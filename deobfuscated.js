(function () {
  alert('injected, script by ally11 workk');
  const vWindow = window;
  let v2 = 111;
  const vF = function (p2) {
    let v3 = "";
    for (let v4 = 0; v4 < p2.length; v4++) {
      v3 += vWindow.String.fromCharCode(p2[v4] ^ v2++ % 255);
    }
    return v3;
  };
  var v5 = 2;
  if (v5 === 4) {
    v5 = 102;
  }
  const v6 = true;
  const v7 = 16;
  const v8 = ["#B26F31", "Allow you to calm crabs, and heal them", "#1f343f", "011_111_010", "#115E60", "Damage: 3", "#0e3838", "Lifetime: 8 days", "Starve.io ", "jus", "#58452b", "#5cccc4", "object", "#092813", "high_ing", "#096d41", "#939995", "Crab Spear", "011_111_000", "Haltbarkeit: 700", "top", "#042b30", "#e0f2f6", "#1a7961", "#09373F", "#e7dc8f", "#7C5A29", "Bed", "#000000", "comida: 100", "upfiz", "Survive without losing life", "Starve.io", "110_111_011", "#B6222A", "#111316", "#e2cf27", "'Baloo Paaji', sans-serif", "#c4a23a", "Easter Egg", "#e8e8e8", "Możesz także zdobyć minerały", "#120202", "#c7a726", "pos", "Daño para estructuras: 1", "amethyst_2", "#21112D", "low_ing", "Damage: 30", "#25c5d6", "#ff0000", "Sushui", "team_box", "You can fly with it.", "#462966", "#86d4e0", "#b7252c", "audio/ambience.mp3", "#124949", "volume", "Oh, yeah? Is there crab in the crab sticks?", "durabilidade: 2000", "#87d2e6", "Damage: 2", "2d", "Chapka", "#A37943", "#fff", "rgba(255, 255, 255, 0)", "auth2", "#3d2a6e", "#63c9d6", "110_110_000", "#EFE4B4", "#123335", "Crab claws can also be eaten", "#C0BF55", "#322413", "Так же вы можете получить ресурсы", "#082b22", "gw", "#0a2728", "Dig the ground to gather resources", "#485e66", "Используется для разрушения зданий", "Building Damage: 4", "#d45ce5", "#094437", "#3f332a", "011_011_000", "#073030", "Obrażenia do budowli: 1", "#596560", "Chrono Quests", "000_111_111", "claim_reward_", "#b864d6", "#59c9c0", "#C6AF81", "bread_6", "#2b7c57", "aloner", "#43aa82", "#1f4948", "#4d4a2e", "#7d6144", "#107746", "#493e26", "treasure_chest_4", "Uuunnnggg", "010_110_010", "input_ratio", "&userid=", "Damage: 5", "#eda80d", "Score", "Game", "Schaden an Gebäuden: 1", "000_011_010", "forest", "#392C16", "wtb", "durabilidade: 1000", "#b3e0e3", "#2a2938", "isl", "You will be cured faster", "#67766F", "#2b6664", "#ddcf8a", "#FFF", "#46554D", "útil para destruir construções", "destination-out", "#211108", "#342C7C", "#54a4ba", "#a7983c", "#113f3c", "#674C2A", "#fef4f4", "010_111_011", "send", "010_111_010", "010_110_000", "#15514f", "#4eb687", "starve_mapping", "#032428", "You can not attack when you use it", "mouseup", "#0e3022", "sap", "#030d14", "click", "application/x-www-form-urlencoded", "#6a7570", "111_111_011", "#432516", "spectator", "WINTER", "#614627", "Creuse la terre, le sable et la neige", "Content-Type", "#092b29", "#072824", "#077b49", "fade", "jub", "#A9D6D3", "#877d36", "#388AC7", "eject_member", "#5cc5ce", "#043c37", "fo", "home_craft", "Durée de vie: 8 jours", "110_111_000", "iro", "#8a938e", "Damage: 14", "#e6636a", "Haltbarkeit: 2000", "#24878f", "#C1C0C0", "#57442a", "#ac222a", "XPayStationWidget", "Animals Defense: 13", "011_111_110", "Урон по строениям: 1", "#083b3a", "Dig the ground to gather dirt, ice, and sand", "#e4efe8", " After 1 day, survive in winter", "#C09D6F", "#77371f", "#dfd1cb", " you can only hit people who are flying too", "inv_shop", "010_010_000", "110_110_010", "#0a4049", "aqu", "starve_aliasing", "Damage: 1", "#1f5453", "qwerty_ing", "000_011_011", "MADBalgouthi", "durabilidade: 700", "cs", "#0B6A84", " Share on Twitter", "starve_cancel", "px Baloo Paaji", "canvas", "dw", "name", "#f9efeb", ".md-languages label button", "#b2d4d1", "#000", "account_nickname_input", "#0b3432", "#efd435", "GET", "They can't hit you and you can't hit them", "You are the king of crabs!", "stop", "play", "rewardquest", " BACK TO THE GAME", "#747471", "#184747", "gm", "Widget", "Durabilité: 1000", "#75827D", "Копайте землю, чтобы получить грязь, лед и песок", "Crabs follow you", "#bfb360", "#A89F67", "#262114", "110_111_010", "000_111_000", "#9baaa3", "Jedzenie: 100", "Durability: 2000", "time_finished_", "#163a3a", "110_111_110", "none", "#c3be9a", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", " Gather 1 amethyst", "#46c2c9", "Comida: 100", "#a08f47", "Защита от игроков: 4, Защита от животных: 16", "#252525", "#182935", "#163A3A", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "#adbcb5", "#785f4c", "Урон: 2", "#4C3B19", "#3dc4c0", "Te calienta en invierno y fuera del agua", "Damage: 4", "#c27add", "#654320", "#171a19", "#c04933", "Cactus", "#665329", "#0F3A24", "#e45936", "starve_quality", "#29997c", "você também pode pegar minerais", "killdragon_1", "#281C08", "000_011_000", "sw", "#be8d50", "Bueno para destruir estructuras", "#0e6553", "#2b5c48", "Essen: 100", "#5E3C10", "source-over", "010_111_111", "#4c3a15", "#EDCE4F", "jad", "Wytrzymałość: 2000", "winter_7", "Buildings Damage: 1", "#43b5af", "#A5A244", "#afac98", "#4c3b19", "111_111_111", "#83827e", "de", "claim_rewards", "Crab Helmet", "Players Defense: 4", "Durabilidad: 1000", "#660000", "cancel_sure_delete", "bap", "FB", "fod", "#c1b06b", "eogito", "#4d2d14", "#313041", "#0c0c0d", "111_111_110", "time", "Days survived", "Kill", "cursor", "#b15ecf", "000_010_010", "#3A2A0D", "#cd98e5", " Collect 100 bread in deep winter", "active", "Прочность: 1000", "#1f773d", "init", "Durability: 400", "dont_hit_5", "#5E3E1A", " Collect 1 dragon heart", "rub", "Food: 20", "mousemove", "#3ba578", "#EAEAEA", "#9b2b25", "Прочность: 2000", "lock_team", "#3fc9c9", "#133a2b", "Защищает от холода вне воды.", "#252B28", "110_111_111", "survive20min_3", "#FFFFFF", "Time Remaining", "Hält dich warm außerhalb von Wasser und Winter", "#1a4545", "round", "Warm outside water and in winter", "Défense: 4, Défense contre animaux: 16", "#347f93", "#183f3f", "opacity", "Utile pour détruire les bâtiments", "010_011_011", "#200333", "timeremainingquest", "#2E85A0", "000_111_010", "dano: 2", "event", "</div>", "Прочность: 700", "Durabilidad: 700", "You feel a great power emanating from this orb", "#523e26", "#89d1d4", "Dégâts: 2", "#07393d", "When you are flying,", " Open 5 treasure chests", "img_", " Constraints", "inline-block", "#0a2f2b", "#33b4e4", "Building method: Grid. Press G to change", "score", "#68622D", "#032b23", "#8c29aa", "You can buy items on the shop in the next game with your points", "LAVA", "#a9e4ed", "FOREST", "#031619", "servselect", "shop_starterkit", "#382e19", "#EBF2F0", "111_111_000", "#939393", "getAuthResponse", "#34255d", "#1d1d22", "Communist", "#136167", "Useful to destroy buildings", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "010_111_000", "kit", "#3da34d", "#f4efc6", "#1d051e", "Winter", "111_111_010", "Birth: 4min", "110_110_110", "#0F464C", "#a33e2b", "#2A8B9B", " QUIT", "nickname_input", " Share on Facebook", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "#232828", "Cava para conseguir tierra, arena y hielo", "#D8DC74", "buy_kit", "points", "#9E8456", "#1a4935", "Durabilité: 2000", "nickname_block", "&region=", "#86d0d1", "#187484", "Damage: 24", "#0d2e33", "#141414", "#d588f1", "#328587", "plm", "defesa de jogadores: 4, defesa de animais: 16", "#ffffff", "px", "#8255b5", "010_111_110", "Durabilidad: 2000", "middle", "game_body", "#394841", "Schaden: 2", "011_011_011", "iblk", "Taco4Life", "_blank", "#c67933", "Durabilité: 700", "Wytrzymałość: 1000", "#816511", "#123b3f", " Reward", "cave o chão para pegar terra, areia e gelo", "recipe_craft", "#564021", "#53A4D5", "#83ddd4", "#3e3c25", "serverAddressInput", " Be peaceful", "_trad_number", "Grab herum um Dreck, Eis und Sand zu bekommen", "000_110_000", "010_010_010", "Building Damage: 1", "#123d38", "#1b170c", "#35b1b5", "011_111_111", "#2b9390", "#174a51", "Продолжительность: 8 дней", "Daño: 2", "typequest", "010_110_110", "#1e2021", "playing", "dano em construções: 1", "#7d5234", "000_111_011", "Réchauffe en dehors de l'eau et dans l'hiver", "You can also gather minerals", "pizza wa", "#554139", "Totem", "jut", "constraintquest", "#8359d3", "gapi", "#73583e", "azerty_ing", "Durability: 700", "#281A49", "#0a2d18", "Anyone want to play?", "Wytrzymałość: 700", "re", "#263947", "#e9dad9", "#1F343F", "#2b280a", "#73dde5", "id", "#b29c32", "000_110_010", "Durability: 1000", "#d7990c", "011_011_010", "_number", "#29aaa1", "#95d5d8", "cop", "010_011_000", "#bbbbbb", "#7f6d52", "Pomocny w niszczeniu budowli", "011_111_011", "starve_quests", "Damage: 20", "#242330", "On-Hit Damage: 3", "000_010_000", "#1678a2", "Uuunnnggg...", "#c26de0", "Haltbarkeit: 1000", "Pixelbitie", "Crab sticks", "You are less cold, less thirsty, and less hungry", "nu", "#BB0000", "#5f6061", "Czas życia: 8 dni", "CrysTal", "Players Defense: 4, Animals Defense: 16", "Building method: Free. Press G to change", "Sandwich", "quit_chronoquest", " Claim rewards", "#0a0b0c", "Du kannst auch Mineralien bekommen", "#d2c77b", "#041c21", "Lebenszeit: 8 Tage", "#af59cd", "#214C4B", "mousedown", "#44301b", "starve_safe", "000_110_110", "Food: 10", "#0d1b1c", "#634828", " : ", "#74ede6", "000_111_110", "img/avatar-player14.png", "Requires appropriate arrows to be used", "#555555", "010_011_010", "starve_info_box", "#280e09", "Crab Claw", "También puedes conseguir minerales", "#454545", "#0b2326", "Relax in this confortable bed", "CLAIM REWARD!", "la", "Ciepło w i poza zimą", "DESERT", "#764eb5", "#C98435", "coa", "#ee593d", "#B56D18", "timeremain_", "#574122", "#58645F", "Nützlich um Gebäude zu zerstören", "string", "#c4bc51", "#083326", "Peut aussi récupérer des minéraux", "#b29e4d", "#47341d"];
  const v9 = 13;
  const vUndefined = undefined;
  const v10 = 15;
  const v11 = 20;
  const v12 = 19;
  const v13 = 14;
  const v14 = false;
  const v15 = 18;
  const v16 = 100;
  const vVUndefined = vUndefined;
  const v17 = 255;
  const vV14 = v14;
  const v18 = 255;
  const v19 = 11;
  const v20 = 17;
  const v21 = 100;
  const v22 = 12;
  const v23 = 10;
  const v24 = 17;
  const v25 = 100;
  const v26 = 255;
  const v27 = 19;
  let v28;
  let v29;
  let v30;
  let vVUndefined2 = vUndefined;
  let vVVUndefined = vVUndefined;
  let vVVUndefined2 = vVUndefined;
  const v31 = 16;
  let vVUndefined3 = vUndefined;
  let v32;
  let v33 = [];
  let v34 = "_";
  const v35 = 256;
  let vVUndefined4 = vUndefined;
  let vVUndefined5 = vUndefined;
  let vVUndefined6 = vUndefined;
  let v36;
  let v37;
  let vVUndefined7 = vUndefined;
  let vVVUndefined3 = vVUndefined;
  let vVVUndefined4 = vVUndefined;
  const v38 = 18;
  let vVUndefined8 = vUndefined;
  const v39 = 19;
  const vV6 = v6;
  const vVV14 = vV14;
  const vVVUndefined5 = vVUndefined;
  let v40;
  let v41;
  let v42;
  let v43;
  let vVVVUndefined5 = vVVUndefined5;
  let vVVVUndefined52 = vVVUndefined5;
  let vVVVUndefined53 = vVVUndefined5;
  const v44 = 20;
  let vVUndefined9 = vUndefined;
  let vVVVUndefined54 = vVVUndefined5;
  const v45 = 19;
  const v46 = 17;
  let v47;
  let vVVUndefined6 = vVUndefined;
  let vVVUndefined7 = vVUndefined;
  const v48 = 15;
  const v49 = 10;
  let v50;
  let vVVUndefined8 = vVUndefined;
  let vVVVUndefined55 = vVVUndefined5;
  function f2(p3) {
    const v51 = Math.floor;
    let v52 = 0;
    Math.floor = function (p4) {
      for (let v53 = 0; v53 < 3397; v53++) {
        v52 += v53;
      }
      return v51(p4);
    };
  }
  const v54 = 20;
  let v55;
  let vVVVUndefined56 = vVVUndefined5;
  let vVVVUndefined57 = vVVUndefined5;
  const v56 = 14;
  let vVVUndefined9 = vVUndefined;
  const v57 = 13;
  let v58;
  let v59;
  let vVVUndefined10 = vVUndefined;
  const vVVVUndefined58 = vVVUndefined5;
  const v60 = 11;
  const vVVUndefined11 = vVUndefined;
  let vVVVUndefined59 = vVVUndefined5;
  let vVVUndefined12 = vVUndefined;
  const v61 = 255;
  let v62;
  let vVVUndefined13 = vVUndefined;
  let vVUndefined10 = vUndefined;
  const v63 = 100;
  let vVUndefined11 = vUndefined;
  let vVVVUndefined11 = vVVUndefined11;
  let v64;
  const v65 = 12;
  let vVUndefined12 = vUndefined;
  let v66;
  const v67 = 16;
  let vVVVVUndefined58 = vVVVUndefined58;
  let vVVVUndefined112 = vVVUndefined11;
  const v68 = 13;
  const v69 = 10;
  let v70 = 0;
  if (!vWindow.WebAssembly || !vWindow.WebAssembly.instantiate) {
    ⲆⵠⲆᐃᐃⵠᐃⲆΔ();
  }
  const v71 = 15;
  const v72 = {
    Date: Date
  };
  vWindow.WebAssembly.instantiate(Uint8Array.from(vWindow.atob(""), function (p5) {
    return p5.charCodeAt(0);
  }), v72).then(function (p6) {
    v28 = p6.instance;
    vVUndefined2 = v28.exports;
    v29 = vVUndefined2.memory;
    vVVUndefined2 = v29.buffer;
    vVVUndefined = vVUndefined2.__pin;
    v30 = vVUndefined2.__unpin;
    vVUndefined3 = vVUndefined2.__new;
    v32 = vVUndefined2.__collect;
    v34 = "_";
    for (let v73 = 0; v73 < 31; v73++) {
      v33[v73] = vVUndefined2[v34 + v73];
    }
    vVUndefined5 = vVUndefined2.__rtti_base;
    vVUndefined4 = new Float32Array(vVVUndefined2);
    vVUndefined6 = new Float64Array(vVVUndefined2);
    vVVUndefined3 = new BigUint64Array(vVVUndefined2);
    vVUndefined7 = new Uint32Array(vVVUndefined2);
    v36 = new Uint16Array(vVVUndefined2);
    v37 = new Uint8Array(vVVUndefined2);
    vVVUndefined4 = new BigInt64Array(vVVUndefined2);
    vVUndefined8 = new Int32Array(vVVUndefined2);
    vVVVUndefined5 = new Int16Array(vVVUndefined2);
    v40 = new Int8Array(vVVUndefined2);
    v47 = v33[25];
    vVVVUndefined54 = v33[17];
    v64 = v33[0];
    v58 = v33[3];
    vVVVUndefined55 = v33[14];
    vVVUndefined9 = v33[23];
    vVVVUndefined52 = v33[2];
    vVVVVUndefined58 = v33[22];
    v59 = v33[7];
    vVVUndefined7 = v33[18];
    v50 = v33[16];
    vVVVUndefined11 = v33[10];
    v42 = v33[4];
    vVVVUndefined53 = v33[15];
    vVVVUndefined56 = v33[30];
    v62 = v33[9];
    vVVVUndefined57 = v33[29];
    v55 = v33[5];
    v66 = v33[26];
    v43 = v33[11];
    vVVUndefined13 = v33[21];
    vVVUndefined10 = v33[19];
    vVUndefined9 = v33[6];
    vVVVUndefined59 = v33[28];
    vVVUndefined12 = v33[13];
    vVUndefined10 = v33[20];
    vVVUndefined6 = v33[24];
    vVUndefined12 = v33[12];
    v41 = v33[8];
    vVVUndefined8 = v33[27];
    vVUndefined11 = v33[1];
    v70 = 1;
    if (vVVVUndefined112) {
      vVVVUndefined112();
    }
  });
  var v74 = vWindow.Math.acos;
  vWindow.Math.acos = vWindow.Math.asin;
  vWindow.Math.asin = v74;
  var v75 = vWindow.Math.cos;
  vWindow.Math.cos = vWindow.Math.sin;
  vWindow.Math.sin = v75;
  const vF2 = function (p7) {
    return vVUndefined7[(vVUndefined5 + 4 >>> 2) + (p7 << 1)];
  };
  const vVVVVUndefined582 = vVVVUndefined58;
  const v76 = 17;
  const v77 = 18;
  const v78 = 100;
  function f3(p8) {
    return 31 - Math.clz32(p8 >>> 6 & 31);
  }
  const vVVV14 = vVV14;
  const v79 = 13;
  const vV142 = v14;
  const v80 = 14;
  const v81 = 256;
  const v82 = 12;
  function f4(p9, p10, p11) {
    if (p11) {
      switch (p9) {
        case 2:
          return vVUndefined4;
        case 3:
          return vVUndefined6;
      }
    } else {
      switch (p9) {
        case 0:
          if (p10) {
            return v40;
          } else {
            return v37;
          }
        case 1:
          if (p10) {
            return vVVVUndefined5;
          } else {
            return v36;
          }
        case 2:
          if (p10) {
            return vVUndefined8;
          } else {
            return vVUndefined7;
          }
        case 3:
          if (p10) {
            return vVVUndefined4;
          } else {
            return vVVUndefined3;
          }
      }
    }
  }
  const vVV6 = vV6;
  function f5(p12) {
    const v83 = vVUndefined7[p12 + -8 >>> 2];
    const vVF2 = vF2(v83);
    const vF3 = f3(vVF2);
    let v84 = vVF2 & 4 ? p12 : vVUndefined7[p12 + 4 >>> 2];
    const v85 = vVF2 & 2 ? vVUndefined7[p12 + 12 >>> 2] : vVUndefined7[v84 + -4 >>> 2] >>> vF3;
    return f4(vF3, vVF2 & 2048, vVF2 & 4096).subarray(v84 >>>= vF3, v84 + v85);
  }
  const vVVV142 = vVV14;
  function f6(p13, p14, p15, p16, p17, p18) {
    const v86 = ~(p16 & 6592) & p16 | ~(p16 & 6592) & 6592;
    const v87 = ~(p17 & 38162) & p17 | ~(p17 & 38162) & 38162;
    return ((27071 + (function (p19, p20, p21) {
      const v88 = ~(p19 & 56284) & p19 | ~(p19 & 56284) & 56284;
      const v89 = ((p20 + 27700) * 2147483629 + 2147483587) % 2147483647;
      const vRo = f64(v88, v89, ~(p21 & 23231) & 23231 | ~(p21 & 23231) & p21);
      f479(v88, v89);
      return (vRo | 27539) & ~(vRo & 27539);
    }((1013904223 + (2225 + p13) * 1664525) % 4294967296, ~(p14 & 55955) & 55955 | ~(p14 & 55955) & p14, p15 ^ 31163) ^ f44(v86, v87))) * 1664525 + 1013904223) % 4294967296;
  }
  function f7(p22, p23, p24, p25, p26) {
    const v90 = ((p22 + 43420) * 214013 + 2531011) % 4294967296;
    const v91 = (16 << (p23 >> 24 & 255)) + (0 << (p23 >> 8 & 255)) + (8 << (p23 >> 16 & 255)) + (24 << (p23 & 255));
    const vRp = f478(v90, v91, ~(p24 & 28239) & 28239 | ~(p24 & 28239) & p24, ((p25 + 37069) * 22695477 + 1) % 4294967296, p26 ^ 37146);
    (function (p27, p28) {
      const v92 = ~(p27 & 5702) & 5702 | ~(p27 & 5702) & p27;
      const v93 = (24 << (p28 >> 8 & 255)) + (0 << (p28 >> 16 & 255)) + (16 << (p28 >> 24 & 255)) + (8 << (p28 & 255));
      const vF4 = function (p29, p30, p31, p32, p33) {
        const v94 = ~(p29 & 30046) & 30046 | ~(p29 & 30046) & p29;
        const v95 = p30 ^ 60223;
        const vRp2 = f478(v94, v95, (p31 | 3766) & ~(p31 & 3766), ~(p32 & 61293) & (p32 | 61293), p33 ^ 61777);
        f479(v94, v95);
        return ~(vRp2 & 12346) & 12346 | ~(vRp2 & 12346) & vRp2;
      }(v92, v93, v92, v93, v92);
      const vBn = f51(v93, v92, v93);
    })(v90, v91);
    return ~(vRp & 65490) & 65490 | ~(vRp & 65490) & vRp;
  }
  const v96 = "development";
  const v97 = "production";
  function f8(p34, p35, p36, p37) {
    v50(vVVVVVUndefined582, p34, p35, p36, p37);
    return ((229 + (function (p38, p39, p40) {
      vVVUndefined7(vVVVVVUndefined582, p38, p39, p40);
      const vXC = f530(v372[0], v372[1], v372[2], v372[0], v372[1]);
      const vOC = f512(v372[2], v372[0], v372[1], v372[2], v372[0]);
      return ((30 + (vXC ^ vOC)) * 16807 + 0) % 2147483647;
    }(v372[0], v372[1], v372[2]) ^ f512(v372[3], v372[0], v372[1], v372[2], v372[3]))) * 8121 + 28411) % 134456;
  }
  function v566(p41) {
    this.ΔⵠⲆΔⲆ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = p41 || Math.floor(Math.random() * (this.ΔⵠⲆΔⲆ - 1));
  }
  v566.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ΔⵠⲆΔⲆ;
    return this.state / this.ΔⵠⲆΔⲆ;
  };
  v566.prototype.ⲆᐃⵠⲆΔⲆⲆ = function (p42) {
    this.state = p42;
  };
  (function f10() {
    const v98 = {
      ⲆⲆⵠΔΔΔⵠⲆΔ: 0
    };
    let v99 = 0;
    for (let v100 in v98) {
      v99 = v100;
    }
    const v101 = [];
    for (let v102 = 0; v102 < 12; v102++) {
      v101.push(vWindow.Math.floor(1 + vWindow.Math.random() * 10));
    }
    let v103 = "for (let " + v99 + " = 0 ; " + v99 + " < " + v101[0] + " ; " + v99 + "++) {";
    for (let v104 = 0; v104 < v101[1]; v104++) {
      v103 += v101[v104] + ";debugger;";
    }
    for (let v105 = 0; v105 < v101[2]; v105++) {
      v103 += "debugger;";
    }
    v103 += "}";
    const v106 = new vWindow.Function(v103);
    vWindow.setTimeout(f10, 10000);
    v106();
  })();
  const v107 = 16;
  const v108 = 100;
  ΔⲆⵠᐃΔΔⵠ = 10000;
  Ⲇᐃⵠⵠᐃⵠⵠ = [];
  var v109 = new v566();
  ;
  const vVVVV142 = vVVV142;
  v109.ⲆᐃⵠⲆΔⲆⲆ(new Date().getTime());
  for (var v110 = 0; ΔⲆⵠᐃΔΔⵠ > v110; v110++) {
    Ⲇᐃⵠⵠᐃⵠⵠ.push(v109.random());
  }
  function f11(p43, p44, p45, p46, p47, p48) {
    const v111 = p43 ^ 15860;
    const v112 = (p45 | 58402) & ~(p45 & 58402);
    const v113 = (8 << (p46 >> 24 & 255)) + (16 << (p46 >> 16 & 255)) + (24 << (p46 >> 8 & 255)) + (0 << (p46 & 255));
    const v114 = ~(p47 & 60439) & 60439 | ~(p47 & 60439) & p47;
    const v115 = ~(p48 & 9685) & 9685 | ~(p48 & 9685) & p48;
    return ((54904 + (f44(v111, (23294 + p44) % 65527) ^ f492(v112, v113, v114, v115, v111))) * 2147483629 + 2147483587) % 2147483647;
  }
  const v116 = 11;
  function f12(p49, p50, p51, p52) {
    const v117 = (1 + (855 + p49) * 22695477) % 4294967296;
    const v118 = p50 ^ 58295;
    const v119 = (0 << (p51 >> 24 & 255)) + (16 << (p51 >> 8 & 255)) + (24 << (p51 & 255)) + (8 << (p51 >> 16 & 255));
    const v120 = p52 ^ 36997;
    return (1 + (23098 + (f44(v117, v118) ^ function (p53, p54, p55, p56, p57, p58) {
      const v121 = (8 << (p56 >> 16 & 255)) + (0 << (p56 & 255)) + (24 << (p56 >> 24 & 255)) + (16 << (p56 >> 8 & 255));
      const v122 = ((1444 + p57) * 2147483629 + 2147483587) % 2147483647;
      const v123 = (16 << (p58 >> 8 & 255)) + (8 << (p58 >> 0 & 255)) + (24 << (p58 >> 24 & 255)) + (0 << (p58 >> 16 & 255));
      const vBn2 = f51((16 << (p53 >> 16 & 255)) + (8 << (p53 & 255)) + (0 << (p53 >> 8 & 255)) + (24 << (p53 >> 24 & 255)), (p54 | 53273) & ~(p54 & 53273), ((p55 + 38598) * 2147483629 + 2147483587) % 2147483647);
      f51(v121, v122, v123);
      return ~(vBn2 & 14721) & 14721 | ~(vBn2 & 14721) & vBn2;
    }(v119, v120, v117, v118, v119, v120))) * 22695477) % 4294967296;
  }
  function f13(p59) {
    if (p59 > 0) {
      return p59 * p59;
    } else {
      return p59;
    }
  }
  function f14(p60) {
    return vWindow.String.fromCharCode(p60);
  }
  const v124 = 3;
  const vVVVVUndefined583 = vVVVUndefined58;
  function f15(p61, p62, p63, p64) {
    const v125 = ~(p61 & 59259) & p61 | ~(p61 & 59259) & 59259;
    const v126 = ~(p62 & 56097) & p62 | ~(p62 & 56097) & 56097;
    const v127 = ((43315 + p63) * 1664525 + 1013904223) % 4294967296;
    const v128 = (8 << (p64 >> 24 & 255)) + (32 << (p64 >> 32 & 255)) + (24 << (p64 >> 8 & 255)) + (16 << (p64 >> 16 & 255));
    const vF5 = function (p65, p66, p67, p68, p69, p70) {
      const v129 = p65 ^ 10715;
      const v130 = (24 << (p66 >> 16 & 255)) + (16 << (p66 >> 32 & 255)) + (32 << (p66 >> 8 & 255)) + (8 << (p66 >> 24 & 255));
      const v131 = (8 << (p67 >> 16 & 255)) + (32 << (p67 >> 24 & 255)) + (16 << (p67 >> 8 & 255)) + (24 << (p67 >> 32 & 255));
      const v132 = p68 ^ 40782;
      const v133 = p69 ^ 41301;
      const v134 = ~(p70 & 12091) & (p70 | 12091);
      const vOt = f23(v129, v130, v131, v132, v133, v134);
      f23(v129, v130, v131, v132, v133, v134);
      f31(v129, v130, v131, v132, v133);
      const v135 = (vOt | 3006) & ~(vOt & 3006);
      return ~(v135 & 24460) & (v135 | 24460);
    }(v125, v126, v127, v128, v125, v126);
    const vQt = f37(v127, v128, v125, v126, v127);
    f23(v128, v125, v126, v127, v128, v125);
    const v136 = (1013904223 + (26191 + (vF5 ^ vQt)) * 1664525) % 4294967296;
    return (v136 | 38630) & ~(v136 & 38630);
  }
  const v137 = 20;
  const v138 = 15;
  function f16(p71, p72, p73, p74, p75, p76) {
    const v139 = ((39488 + p71) * 214013 + 2531011) % 4294967296;
    const v140 = ~(p72 & 49976) & p72 | ~(p72 & 49976) & 49976;
    const v141 = ~(p73 & 35856) & p73 | ~(p73 & 35856) & 35856;
    const v142 = p74 ^ 52219;
    const v143 = (p75 + 3575) % 65503;
    const v144 = ~(p76 & 6932) & p76 | ~(p76 & 6932) & 6932;
    const vAt = f33(v139, v140, v141, v142, v143);
    const vF6 = function (p77, p78, p79, p80, p81, p82) {
      const v145 = p77 ^ 30142;
      const v146 = (p78 + 63025) % 65493;
      const v147 = p79 ^ 30777;
      const v148 = ((45939 + p80) * 22695477 + 1) % 4294967296;
      const v149 = (8 << (p81 >> 16 & 255)) + (32 << (p81 >> 24 & 255)) + (24 << (p81 >> 32 & 255)) + (16 << (p81 >> 8 & 255));
      const v150 = (p82 | 45652) & ~(p82 & 45652);
      const vAt2 = f33(v145, v146, v147, v148, v149);
      f17(v150, v145, v146, v147, v148);
      f29(v149, v150, v145, v146, v147, v148);
      return vAt2 ^ 60048;
    }(v144, v139, v140, v141, v142, v143);
    f26(v144, v139, v140, v141, v142, v143);
    const v151 = (1013904223 + (60709 + (vAt ^ vF6)) * 1664525) % 4294967296;
    return ~(v151 & 42138) & v151 | ~(v151 & 42138) & 42138;
  }
  const vVV62 = vV6;
  function f17(p83, p84, p85, p86, p87) {
    const v152 = ((p83 + 14772) * 2147483629 + 2147483587) % 2147483647;
    const v153 = p84 ^ 63080;
    const v154 = ((p85 + 60304) * 22695477 + 1) % 4294967296;
    const v155 = ~(p86 & 5467) & 5467 | ~(p86 & 5467) & p86;
    const v156 = (p87 | 40165) & ~(p87 & 40165);
    const vF7 = function (p88, p89, p90, p91) {
      const v157 = (p88 | 57611) & ~(p88 & 57611);
      const v158 = ((p89 + 56889) * 1664525 + 1013904223) % 4294967296;
      const v159 = p90 ^ 62842;
      const v160 = ~(p91 & 1179) & p91 | ~(p91 & 1179) & 1179;
      const v$i = f20(v157, v158, v159, v160);
      const vYt = f32(v157, v158, v159, v160);
      f15(v157, v158, v159, v160);
      const v161 = (24 << ((v$i ^ vYt) >> 24 & 255)) + (8 << ((v$i ^ vYt) >> 16 & 255)) + (16 << ((v$i ^ vYt) >> 32 & 255)) + (32 << ((v$i ^ vYt) >> 8 & 255));
      return ~(v161 & 63304) & (v161 | 63304);
    }(v152, v153, v154, v155);
    const vQt2 = f37(v156, v152, v153, v154, v155);
    const vQt3 = f40(v156, v152, v153, v154, v155, v156);
    return ((28765 + ((16 << ((vF7 ^ vQt2) >> 24 & 255)) + (8 << ((vF7 ^ vQt2) >> 16 & 255)) + (24 << ((vF7 ^ vQt2) >> 32 & 255)) + (32 << ((vF7 ^ vQt2) >> 8 & 255)) ^ vQt3)) * 1664525 + 1013904223) % 4294967296;
  }
  const v162 = 19;
  const v163 = 13;
  const v164 = 14;
  function f18(p92, p93, p94, p95, p96) {
    const v165 = (32 << (p92 >> 24 & 255)) + (16 << (p92 >> 8 & 255)) + (24 << (p92 >> 16 & 255)) + (8 << (p92 >> 32 & 255));
    const v166 = (p93 + 39144) % 65406;
    const v167 = p94 ^ 34575;
    const v168 = ~(p95 & 37841) & p95 | ~(p95 & 37841) & 37841;
    const v169 = (p96 | 25975) & ~(p96 & 25975);
    const v$i2 = f20(v165, v166, v167, v168);
    f34(v169, v165, v166, v167, v168);
    f26(v169, v165, v166, v167, v168, v169);
    return (v$i2 | 19326) & ~(v$i2 & 19326) ^ 36297;
  }
  function f19(p97, p98, p99, p100, p101) {
    const v170 = (12345 + (23101 + p97) * 1103515245) % 2147483648;
    const v171 = p98 ^ 58614;
    const v172 = ((p99 + 45267) * 214013 + 2531011) % 4294967296;
    const v173 = p100 ^ 40810;
    const v174 = (24 << (p101 >> 24 & 255)) + (8 << (p101 >> 32 & 255)) + (32 << (p101 >> 8 & 255)) + (16 << (p101 >> 16 & 255));
    const vRt = f38(v170, v171);
    const vF15 = f15(v172, v173, v174, v170);
    (function (p102, p103, p104, p105) {
      const v175 = (p102 + 34282) % 65336;
      const v176 = ~(p103 & 45181) & 45181 | ~(p103 & 45181) & p103;
      const v177 = (16 << (p104 >> 8 & 255)) + (32 << (p104 >> 24 & 255)) + (8 << (p104 >> 32 & 255)) + (24 << (p104 >> 16 & 255));
      const v178 = ~(p105 & 25475) & 25475 | ~(p105 & 25475) & p105;
      const vF8 = function (p106, p107) {
        const v179 = ~(p106 & 41406) & p106 | ~(p106 & 41406) & 41406;
        const v180 = ((p107 + 17922) * 1103515245 + 12345) % 2147483648;
        const vGt = f39(v179, v180, v179);
        f24(v180, v179, v180, v179);
        return ((42346 + (vGt ^ 18573 ^ f18(v180, v179, v180, v179, v180))) * 2147483629 + 2147483587) % 2147483647;
      }(v175, v176);
      const vEt = f34(v177, v178, v175, v176, v177);
      f38(v178, v175);
      const v181 = (58498 + (vF8 ^ vEt)) % 65531;
    })(v171, v172, v173, v174);
    const v182 = (24 << ((vRt ^ vF15) >> 24 & 255)) + (32 << ((vRt ^ vF15) >> 16 & 255)) + (8 << ((vRt ^ vF15) >> 32 & 255)) + (16 << ((vRt ^ vF15) >> 8 & 255));
    return ~(v182 & 13644) & v182 | ~(v182 & 13644) & 13644;
  }
  function f20(p108, p109, p110, p111) {
    const v183 = p108 ^ 11762;
    const v184 = ~(p109 & 19425) & 19425 | ~(p109 & 19425) & p109;
    return ((55182 + (((17757 + ((32 << ((v183 ^ v184) >> 32 & 255)) + (8 << ((v183 ^ v184) >> 8 & 255)) + (24 << ((v183 ^ v184) >> 24 & 255)) + (16 << ((v183 ^ v184) >> 16 & 255)) ^ (32 << (p110 >> 16 & 255)) + (8 << (p110 >> 32 & 255)) + (24 << (p110 >> 24 & 255)) + (16 << (p110 >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(p111 & 259) & 259 | ~(p111 & 259) & p111))) * 1664525 + 1013904223) % 4294967296;
  }
  function f21(p112, p113, p114, p115, p116) {
    const v185 = (24 << (p112 >> 24 & 255)) + (32 << (p112 >> 16 & 255)) + (16 << (p112 >> 8 & 255)) + (8 << (p112 >> 32 & 255));
    const v186 = (12345 + (p113 + 3024) * 1103515245) % 2147483648;
    const v187 = (8 << (p114 >> 8 & 255)) + (32 << (p114 >> 32 & 255)) + (24 << (p114 >> 16 & 255)) + (16 << (p114 >> 24 & 255));
    const v188 = (1 + (p115 + 41324) * 22695477) % 4294967296;
    const v189 = (p116 | 19607) & ~(p116 & 19607);
    const vDt = f36(v185, v186);
    f34(v187, v188, v189, v185, v186);
    f29(v187, v188, v189, v185, v186, v187);
    const v190 = ~(vDt & 49323) & 49323 | ~(vDt & 49323) & vDt;
    return ~(v190 & 46567) & (v190 | 46567);
  }
  const v191 = 19;
  function f22(p117, p118, p119, p120, p121, p122) {
    const v192 = (1013904223 + (p117 + 28824) * 1664525) % 4294967296;
    const v193 = (1013904223 + (13210 + p118) * 1664525) % 4294967296;
    const v194 = ~(p119 & 32165) & 32165 | ~(p119 & 32165) & p119;
    const v195 = (24 << (p120 >> 24 & 255)) + (16 << (p120 >> 8 & 255)) + (8 << (p120 >> 16 & 255)) + (32 << (p120 >> 32 & 255));
    const v196 = (1 + (39199 + p121) * 22695477) % 4294967296;
    const v197 = p122 ^ 33037;
    const vF9 = function (p123, p124, p125) {
      const v198 = (12345 + (39051 + p123) * 1103515245) % 2147483648;
      const v199 = (p124 | 44117) & ~(p124 & 44117);
      const v200 = (24 << (p125 >> 24 & 255)) + (8 << (p125 >> 16 & 255)) + (16 << (p125 >> 32 & 255)) + (32 << (p125 >> 8 & 255));
      const vMt = f27(v198, v199, v200, v198, v199);
      const vQt4 = f40(v200, v198, v199, v200, v198, v199);
      const vF10 = function (p126, p127) {
        const v201 = (16 << (p126 >> 8 & 255)) + (32 << (p126 >> 16 & 255)) + (8 << (p126 >> 32 & 255)) + (24 << (p126 >> 24 & 255));
        const v202 = (32 << (p127 >> 32 & 255)) + (24 << (p127 >> 24 & 255)) + (8 << (p127 >> 8 & 255)) + (16 << (p127 >> 16 & 255));
        const vBt = f29(v201, v202, v201, v202, v201, v202);
        (function (p128, p129, p130, p131, p132) {
          const v203 = p128 ^ 64570;
          const v204 = (2531011 + (p129 + 41768) * 214013) % 4294967296;
          const v205 = (1013904223 + (p130 + 43923) * 1664525) % 4294967296;
          const v206 = (16 << (p131 >> 32 & 255)) + (8 << (p131 >> 24 & 255)) + (32 << (p131 >> 16 & 255)) + (24 << (p131 >> 8 & 255));
          const v207 = (p132 | 21896) & ~(p132 & 21896);
          const vF11 = function (p133, p134) {
            const v208 = ((p133 + 49468) * 1103515245 + 12345) % 2147483648;
            const v209 = ((p134 + 30513) * 214013 + 2531011) % 4294967296;
            const vF12 = function (p135, p136, p137) {
              const v210 = ((5294 + p135) * 1664525 + 1013904223) % 4294967296;
              const v211 = (p136 | 55665) & ~(p136 & 55665);
              const v212 = (p137 + 54633) % 65404;
              const vF17 = f17(v210, v211, v212, v210, v211);
              (function (p138, p139, p140, p141, p142, p143) {
                const v213 = (2531011 + (p138 + 16955) * 214013) % 4294967296;
                const v214 = ((9436 + p139) * 1103515245 + 12345) % 2147483648;
                const v215 = (p140 | 14774) & ~(p140 & 14774);
                const v216 = (p141 | 48802) & ~(p141 & 48802);
                const v217 = ~(p142 & 24998) & (p142 | 24998);
                const v218 = (8 << (p143 >> 8 & 255)) + (16 << (p143 >> 16 & 255)) + (32 << (p143 >> 32 & 255)) + (24 << (p143 >> 24 & 255));
                const vSt = f25(v213, v214, v215, v216);
                const vEt2 = f34(v217, v218, v213, v214, v215);
                const vSt2 = f25(v216, v217, v218, v213);
              })(v212, v210, v211, v212, v210, v211);
              f32(v212, v210, v211, v212);
              return ~(vF17 & 43875) & (vF17 | 43875) ^ 15116;
            }(v208, v209, v208);
            f31(v209, v208, v209, v208, v209);
            f20(v208, v209, v208, v209);
            return (vF12 | 17943) & ~(vF12 & 17943) ^ 21791;
          }(v203, v204);
          f24(v205, v206, v207, v203);
          const vF21 = f21(v204, v205, v206, v207, v203);
        })(v201, v202, v201, v202, v201);
        f36(v202, v201);
        return (vBt | 58283) & ~(vBt & 58283) ^ 8337;
      }(v200, v198);
      const v219 = (16 << ((vMt ^ vQt4) >> 32 & 255)) + (24 << ((vMt ^ vQt4) >> 24 & 255)) + (32 << ((vMt ^ vQt4) >> 8 & 255)) + (8 << ((vMt ^ vQt4) >> 16 & 255));
      return (8 << ((v219 ^ vF10) >> 32 & 255)) + (16 << ((v219 ^ vF10) >> 8 & 255)) + (32 << ((v219 ^ vF10) >> 16 & 255)) + (24 << ((v219 ^ vF10) >> 24 & 255));
    }(v192, v193, v194);
    f32(v195, v196, v197, v192);
    return ((34159 + (vF9 ^ 2959 ^ f25(v193, v194, v195, v196))) * 1103515245 + 12345) % 2147483648;
  }
  const v220 = 255;
  const vVVV62 = vVV62;
  function f23(p144, p145, p146, p147, p148, p149) {
    const v221 = ~(p144 & 36133) & (p144 | 36133);
    const v222 = (p145 | 13670) & ~(p145 & 13670);
    const v223 = (p146 | 31390) & ~(p146 & 31390);
    const v224 = p147 ^ 64081;
    const v225 = p148 ^ 7550;
    const v226 = (2147483587 + (p149 + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (f35(v221, v222, v223, v224, v225) ^ f32(v226, v221, v222, v223))) * 2147483629 + 2147483587) % 2147483647 ^ f31(v224, v225, v226, v221, v222))) * 1103515245) % 2147483648;
  }
  function f24(p150, p151, p152, p153) {
    const v227 = (p150 | 15432) & ~(p150 & 15432);
    const v228 = p151 ^ 12315;
    const v229 = p152 ^ 38714;
    const v230 = p153 ^ 58084;
    const vF16 = f16(v227, v228, v229, v230, v227, v228);
    f32(v229, v230, v227, v228);
    return ((34681 + ((~(vF16 & 41134) & vF16 | ~(vF16 & 41134) & 41134) ^ f26(v229, v230, v227, v228, v229, v230))) * 214013 + 2531011) % 4294967296;
  }
  function f25(p154, p155, p156, p157) {
    const v231 = ~(p154 & 33107) & (p154 | 33107);
    const v232 = (24 << (p155 >> 32 & 255)) + (32 << (p155 >> 8 & 255)) + (8 << (p155 >> 16 & 255)) + (16 << (p155 >> 24 & 255));
    const v233 = ~(p156 & 32053) & (p156 | 32053);
    const v234 = p157 ^ 12240;
    const vF13 = function (p158, p159, p160, p161) {
      const v235 = (32 << (p158 >> 32 & 255)) + (16 << (p158 >> 16 & 255)) + (24 << (p158 >> 24 & 255)) + (8 << (p158 >> 8 & 255));
      const v236 = (1 + (50595 + p159) * 22695477) % 4294967296;
      const v237 = ~(p160 & 40066) & p160 | ~(p160 & 40066) & 40066;
      const v238 = p161 ^ 18768;
      const vAt3 = f33(v235, v236, v237, v238, v235);
      const vF19 = f19(v236, v237, v238, v235, v236);
      const vDt2 = f28(v237, v238);
      return ((16767 + ((2531011 + (35287 + (vAt3 ^ vF19)) * 214013) % 4294967296 ^ vDt2)) * 1664525 + 1013904223) % 4294967296;
    }(v231, v232, v233, v234);
    f32(v231, v232, v233, v234);
    return (2531011 + (44352 + ((~(vF13 & 64131) & 64131 | ~(vF13 & 64131) & vF13) ^ f33(v231, v232, v233, v234, v231))) * 214013) % 4294967296;
  }
  const v239 = 4;
  const v240 = 15;
  function f26(p162, p163, p164, p165, p166, p167) {
    const v241 = p162 ^ 23409;
    const v242 = p163 ^ 26380;
    const v243 = ((p166 + 33017) * 1103515245 + 12345) % 2147483648;
    const v244 = p167 ^ 42490;
    return ((19056 + (f20(v241, v242, p164 ^ 53590, p165 ^ 36633) ^ f20(v243, v244, v241, v242))) * 22695477 + 1) % 4294967296;
  }
  const v245 = 16;
  function f27(p168, p169, p170, p171, p172) {
    const v246 = ((9716 + p168) * 1664525 + 1013904223) % 4294967296;
    const v247 = ~(p169 & 7703) & p169 | ~(p169 & 7703) & 7703;
    const v248 = (p170 | 31275) & ~(p170 & 31275);
    const v249 = ~(p171 & 25693) & 25693 | ~(p171 & 25693) & p171;
    const v250 = (8 << (p172 >> 8 & 255)) + (32 << (p172 >> 24 & 255)) + (24 << (p172 >> 16 & 255)) + (16 << (p172 >> 32 & 255));
    const vF26 = f26(v246, v247, v248, v249, v250, v246);
    const vF20 = f20(v247, v248, v249, v250);
    f39(v246, v247, v248);
    return (24 << ((vF26 ^ vF20) >> 16 & 255)) + (8 << ((vF26 ^ vF20) >> 8 & 255)) + (32 << ((vF26 ^ vF20) >> 24 & 255)) + (16 << ((vF26 ^ vF20) >> 32 & 255)) ^ 31710;
  }
  function f28(p173, p174) {
    const v251 = (2531011 + (p173 + 62874) * 214013) % 4294967296;
    const v252 = (24 << (p174 >> 24 & 255)) + (16 << (p174 >> 32 & 255)) + (8 << (p174 >> 8 & 255)) + (32 << (p174 >> 16 & 255));
    const vF262 = f26(v251, v252, v251, v252, v251, v252);
    const vF263 = f26(v251, v252, v251, v252, v251, v252);
    f20(v251, v252, v251, v252);
    const v253 = (16 << ((vF262 ^ vF263) >> 32 & 255)) + (8 << ((vF262 ^ vF263) >> 24 & 255)) + (24 << ((vF262 ^ vF263) >> 16 & 255)) + (32 << ((vF262 ^ vF263) >> 8 & 255));
    return ~(v253 & 55949) & 55949 | ~(v253 & 55949) & v253;
  }
  function f29(p175, p176, p177, p178, p179, p180) {
    const v254 = (24 << (p175 >> 24 & 255)) + (32 << (p175 >> 16 & 255)) + (16 << (p175 >> 8 & 255)) + (8 << (p175 >> 32 & 255));
    const v255 = (p176 | 41551) & ~(p176 & 41551);
    const v256 = (24 << (p177 >> 24 & 255)) + (16 << (p177 >> 32 & 255)) + (8 << (p177 >> 16 & 255)) + (32 << (p177 >> 8 & 255));
    const v257 = ~(p178 & 32641) & (p178 | 32641);
    const v258 = ((p179 + 35582) * 214013 + 2531011) % 4294967296;
    const v259 = ~(p180 & 1090) & (p180 | 1090);
    const vQt5 = f40(v254, v255, v256, v257, v258, v259);
    f18(v254, v255, v256, v257, v258);
    f20(v259, v254, v255, v256);
    const v260 = ~(vQt5 & 8077) & 8077 | ~(vQt5 & 8077) & vQt5;
    return ~(v260 & 3708) & (v260 | 3708);
  }
  const v261 = 2;
  const v262 = 1;
  const v263 = 16;
  function f30(p181) {
    return f22(p181, 8260, 46947, 8004, 37330, 5330);
  }
  const v264 = 8;
  const v265 = 17;
  function f31(p182, p183, p184, p185, p186) {
    const v266 = (2147483587 + (p182 + 64762) * 2147483629) % 2147483647;
    const v267 = ((18197 + p183) * 214013 + 2531011) % 4294967296;
    const v268 = (2531011 + (22845 + p184) * 214013) % 4294967296;
    const v269 = (32 << (p185 >> 16 & 255)) + (16 << (p185 >> 8 & 255)) + (8 << (p185 >> 32 & 255)) + (24 << (p185 >> 24 & 255));
    const v270 = ~(p186 & 11999) & p186 | ~(p186 & 11999) & 11999;
    const vF264 = f26(v266, v267, v268, v269, v270, v266);
    const vF29 = f29(v267, v268, v269, v270, v266, v267);
    f20(v268, v269, v270, v266);
    return (8 << ((vF264 ^ vF29) >> 24 & 255)) + (16 << ((vF264 ^ vF29) >> 16 & 255)) + (24 << ((vF264 ^ vF29) >> 8 & 255)) + (32 << ((vF264 ^ vF29) >> 32 & 255)) ^ 35444;
  }
  function f32(p187, p188, p189, p190) {
    const v271 = (2147483587 + (37418 + p187) * 2147483629) % 2147483647;
    const v272 = p188 ^ 57623;
    const v273 = ~(p189 & 40280) & p189 | ~(p189 & 40280) & 40280;
    const v274 = ~(p190 & 24601) & p190 | ~(p190 & 24601) & 24601;
    const vDt3 = f36(v271, v272);
    f36(v273, v274);
    f37(v271, v272, v273, v274, v271);
    const v275 = ~(vDt3 & 43902) & 43902 | ~(vDt3 & 43902) & vDt3;
    return (v275 | 8862) & ~(v275 & 8862);
  }
  const v276 = 19;
  const v277 = 18;
  const v278 = 0;
  function f33(p191, p192, p193, p194, p195) {
    const v279 = p191 ^ 62008;
    const v280 = (24 << (p192 >> 32 & 255)) + (8 << (p192 >> 16 & 255)) + (32 << (p192 >> 8 & 255)) + (16 << (p192 >> 24 & 255));
    const v281 = ((p193 + 46531) * 22695477 + 1) % 4294967296;
    const v282 = ~(p194 & 1884) & 1884 | ~(p194 & 1884) & p194;
    const v283 = ~(p195 & 55588) & 55588 | ~(p195 & 55588) & p195;
    const vF172 = f17(v279, v280, v281, v282, v283);
    f40(v279, v280, v281, v282, v283, v279);
    return ((3037 + (vF172 ^ 57467 ^ f37(v280, v281, v282, v283, v279))) * 1664525 + 1013904223) % 4294967296;
  }
  const vVVVV1422 = vVVV142;
  const v284 = 18;
  const v285 = 10;
  const v286 = 2;
  function f34(p196, p197, p198, p199, p200) {
    const v287 = ~(p196 & 42203) & p196 | ~(p196 & 42203) & 42203;
    const v288 = p197 ^ 50118;
    const v289 = p198 ^ 41620;
    const v290 = ((p199 + 34240) * 2147483629 + 2147483587) % 2147483647;
    const v291 = (32 << (p200 >> 16 & 255)) + (16 << (p200 >> 8 & 255)) + (8 << (p200 >> 32 & 255)) + (24 << (p200 >> 24 & 255));
    const vQt6 = f40(v287, v288, v289, v290, v291, v287);
    f40(v288, v289, v290, v291, v287, v288);
    return (2531011 + (53616 + ((vQt6 | 43477) & ~(vQt6 & 43477) ^ f20(v289, v290, v291, v287))) * 214013) % 4294967296;
  }
  function f35(p201, p202, p203, p204, p205) {
    const v292 = (16 << (p201 >> 32 & 255)) + (24 << (p201 >> 24 & 255)) + (8 << (p201 >> 8 & 255)) + (32 << (p201 >> 16 & 255));
    const v293 = p202 ^ 55978;
    const v294 = ((p203 + 2934) * 1664525 + 1013904223) % 4294967296;
    const v295 = ~(p204 & 30642) & (p204 | 30642);
    const v296 = (8 << (p205 >> 8 & 255)) + (24 << (p205 >> 32 & 255)) + (16 << (p205 >> 24 & 255)) + (32 << (p205 >> 16 & 255));
    const vF34 = f34(v292, v293, v294, v295, v296);
    const vF31 = f31(v292, v293, v294, v295, v296);
    f20(v292, v293, v294, v295);
    const v297 = (16 << ((vF34 ^ vF31) >> 32 & 255)) + (24 << ((vF34 ^ vF31) >> 8 & 255)) + (8 << ((vF34 ^ vF31) >> 24 & 255)) + (32 << ((vF34 ^ vF31) >> 16 & 255));
    return ~(v297 & 23686) & (v297 | 23686);
  }
  function f36(p206, p207) {
    const v298 = ((p206 + 44664) * 1664525 + 1013904223) % 4294967296;
    const v299 = p207 ^ 53080;
    return (1 + (57525 + ((17769 + (f35(v298, v299, v298, v299, v298) ^ f34(v299, v298, v299, v298, v299))) % 65357 ^ f20(v298, v299, v298, v299))) * 22695477) % 4294967296;
  }
  const v300 = 13;
  function f37(p208, p209, p210, p211, p212) {
    const v301 = ((p208 + 49173) * 1103515245 + 12345) % 2147483648;
    const v302 = (p209 + 52922) % 65337;
    const v303 = p210 ^ 25250;
    const v304 = ~(p211 & 10903) & 10903 | ~(p211 & 10903) & p211;
    const v305 = ~(p212 & 33814) & 33814 | ~(p212 & 33814) & p212;
    const vF18 = f18(v301, v302, v303, v304, v305);
    const vRt2 = f38(v301, v302);
    f18(v303, v304, v305, v301, v302);
    const v306 = (1 + (19675 + (vF18 ^ vRt2)) * 22695477) % 4294967296;
    return ~(v306 & 7922) & v306 | ~(v306 & 7922) & 7922;
  }
  const v307 = 100;
  const v308 = 12;
  function f38(p213, p214) {
    const v309 = p213 ^ 24508;
    const v310 = (16 << (p214 >> 16 & 255)) + (24 << (p214 >> 8 & 255)) + (32 << (p214 >> 32 & 255)) + (8 << (p214 >> 24 & 255));
    const vF212 = f21(v309, v310, v309, v310, v309);
    const vF35 = f35(v310, v309, v310, v309, v310);
    f27(v309, v310, v309, v310, v309);
    const v311 = ((11269 + (vF212 ^ vF35)) * 2147483629 + 2147483587) % 2147483647;
    return ~(v311 & 40927) & 40927 | ~(v311 & 40927) & v311;
  }
  const v312 = 256;
  function f39(p215, p216, p217) {
    const v313 = p215 ^ 23323;
    const v314 = (2531011 + (61713 + p216) * 214013) % 4294967296;
    const v315 = (p217 | 24198) & ~(p217 & 24198);
    const vF213 = f21(v313, v314, v315, v313, v314);
    const vF214 = f21(v315, v313, v314, v315, v313);
    f21(v314, v315, v313, v314, v315);
    return (16 << ((vF213 ^ vF214) >> 32 & 255)) + (8 << ((vF213 ^ vF214) >> 8 & 255)) + (24 << ((vF213 ^ vF214) >> 24 & 255)) + (32 << ((vF213 ^ vF214) >> 16 & 255)) ^ 31181;
  }
  function f40(p218, p219, p220, p221, p222, p223) {
    const v316 = p220 ^ 8102;
    const v317 = (24 << (p221 >> 16 & 255)) + (32 << (p221 >> 32 & 255)) + (8 << (p221 >> 24 & 255)) + (16 << (p221 >> 8 & 255));
    const v318 = ~(p222 & 29687) & 29687 | ~(p222 & 29687) & p222;
    const v319 = (1 + (62237 + p223) * 22695477) % 4294967296;
    const vF28 = f28((p218 + 52483) % 65496, (16 << (p219 >> 16 & 255)) + (24 << (p219 >> 8 & 255)) + (32 << (p219 >> 24 & 255)) + (8 << (p219 >> 32 & 255)));
    const vF282 = f28(v316, v317);
    f28(v318, v319);
    return (45290 + (vF28 ^ vF282)) % 65334 ^ 55575;
  }
  function f41(p224, p225) {
    v58(vVVVVVUndefined582, p224, p225);
    const vF82 = f8(v372[0], v372[1], v372[0], v372[1]);
    const vOC2 = f512(v372[0], v372[1], v372[0], v372[1], v372[0]);
    return (0 << ((vF82 ^ vOC2) >> 8 & 255)) + (8 << ((vF82 ^ vOC2) >> 24 & 255)) + (24 << ((vF82 ^ vOC2) & 255)) + (16 << ((vF82 ^ vOC2) >> 16 & 255));
  }
  const v320 = 0;
  const vVVUndefined14 = vVUndefined;
  Δᐃᐃ = {
    ⲆⲆⵠΔᐃᐃᐃ: () => new Promise((p226, p227) => {
      vWindow.grecaptcha.ready(function () {
        vWindow.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (p228) {
          p226(p228);
        }).catch(p229 => {
          if (v2247) {
            p226(0);
          } else {
            console.log(vVVUndefined5);
            p227(p229);
          }
        });
      });
    }),
    ΔΔΔΔⲆⵠⲆᐃΔ: function (p230) {
      vWindow.open(p230, "_blank").focus();
    },
    ⲆⵠΔⲆΔⲆⵠ: function (p231) {
      vWindow.open(p231, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ΔΔⵠΔⵠⲆⵠ: function (p232, p233) {
      for (var v321 in p232) {
        if (p232[v321] != p233[v321]) {
          return vV142;
        }
      }
      return true;
    },
    ᐃΔⵠᐃΔⵠⲆΔΔ: function (p234, p235) {
      if (p234.length != p235.length) {
        return false;
      }
      for (var v322 = 0; v322 < p234.length; v322++) {
        if (typeof p234 == "object") {
          if (!this.ΔΔⵠΔⵠⲆⵠ(p234[v322], p235[v322])) {
            return vVVVV1422;
          }
        } else if (p234[v322] != p235[v322]) {
          return false;
        }
      }
      return true;
    },
    ΔⲆᐃⵠᐃΔᐃ: function (p236, p237) {
      p237.x = p236.x;
      p237.y = p236.y;
    },
    ᐃⵠΔⵠⲆᐃΔ: function (p238, p239) {
      return {
        x: p238.x - p239.x,
        y: p238.y - p239.y
      };
    },
    ΔᐃⲆⵠⵠⲆᐃᐃⲆ: function (p240, p241) {
      p240.x *= p241;
      p240.y *= p241;
    },
    ᐃᐃᐃⲆⲆΔⵠ: function (p242, p243) {
      return p242.x * p243.x + p242.y * p243.y;
    },
    ᐃⲆᐃⲆⲆᐃΔ: function (p244) {
      return Math.sqrt(p244.x * p244.x + p244.y * p244.y);
    },
    sign: function (p245) {
      if (p245 < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ᐃᐃⲆⵠΔΔΔ: function (p246, p247) {
      return p246.x * p247.y - p246.y * p247.x;
    },
    ⲆᐃⲆⵠⵠΔⲆ: function (p248, p249, p250, p251) {
      var v323 = p251 - p249;
      var v324 = p250 - p248;
      return Math.atan2(v323, v324);
    },
    ΔΔⲆΔⵠᐃⵠ: function (p252, p253) {
      return Math.asin(this.ᐃᐃᐃⲆⲆΔⵠ(p252, p253) / (this.ᐃⲆᐃⲆⲆᐃΔ(p252) * this.ᐃⲆᐃⲆⲆᐃΔ(p253))) * this.sign(this.ᐃᐃⲆⵠΔΔΔ(p252, p253));
    },
    ⲆⵠⵠΔΔᐃᐃ: function (p254) {
      ᐃΔᐃⵠⲆⲆᐃ = location.href;
      p254 = p254.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var v325 = new RegExp("[\\?&]" + p254 + "=([^&#]*)").exec(ᐃΔᐃⵠⲆⲆᐃ);
      if (v325 === null) {
        return null;
      } else {
        return v325[1];
      }
    },
    ⲆⵠⲆⵠΔⲆΔ: function (p255, p256) {
      var v326 = Math.PI * 2;
      p256 = (p256 % v326 + v326) % v326;
      if (Math.abs(p255 - p256) > Math.PI) {
        if (p255 > p256) {
          return p256 + v326;
        } else {
          return p256 - v326;
        }
      } else {
        return p256;
      }
    },
    ⲆⵠⵠⵠΔⲆᐃ: function (p257, p258) {
      return this.ΔΔⲆΔⵠᐃⵠ({
        x: 1,
        y: 0
      }, this.ᐃⵠΔⵠⲆᐃΔ(p257, p258));
    },
    ⲆⲆⵠᐃ: function (p259, p260) {
      return Math.sqrt((p260.x - p259.x) * (p260.x - p259.x) + (p260.y - p259.y) * (p260.y - p259.y));
    },
    ΔᐃΔᐃΔⵠᐃ: function (p261, p262) {
      return {
        x: Math.sin(p262) * p261,
        y: Math.cos(p262) * p261
      };
    },
    ΔᐃᐃΔᐃΔⲆ: function (p263, p264) {
      p263.x += p264.x;
      p263.y += p264.y;
    },
    ⵠⲆᐃΔⲆΔΔ: function (p265, p266) {
      p265.x -= p266.x;
      p265.y -= p266.y;
    },
    ⵠⲆⲆⲆⲆⵠΔᐃⵠ: function (p267, p268, p269) {
      p267.x += p268;
      p267.y += p269;
    },
    ⲆⲆⲆᐃⵠΔΔⵠⵠ: function (p270, p271, p272) {
      return {
        x: p270.x + p271,
        y: p270.y + p272
      };
    },
    ΔⲆⵠⲆᐃ: function (p273, p274, p275) {
      p273.x += Math.sin(p275) * p274;
      p273.y += Math.cos(p275) * p274;
    },
    ᐃᐃⲆⲆⲆⵠⵠ: function (p276, p277) {
      return Math.floor((p276 - p277) / 2);
    },
    ᐃΔⲆⲆⵠⲆᐃ: function (p278, p279) {
      return {
        x: (p278.x + p279.x) / 2,
        y: (p278.y + p279.y) / 2
      };
    },
    ᐃᐃⵠΔΔᐃⲆ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ΔⲆⵠᐃΔⵠⵠᐃᐃ: function (p280, p281, p282) {
      var v327 = this.ᐃᐃⵠΔΔᐃⲆ();
      var v328 = this.ᐃᐃⵠΔΔᐃⲆ();
      var v329 = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(p280 + Math.sin(v329) * v327 * p282),
        y: Math.floor(p281 + Math.cos(v329) * v328 * p282)
      };
    },
    ΔⲆⲆᐃᐃᐃΔⲆⲆ: function (p283, p284, p285, p286) {
      this.x = p283;
      this.y = p284;
      this.w = p285;
      this.ⵠⲆⵠ = p286;
    },
    ⵠⵠⵠⲆΔΔⲆⲆΔ: function (p287) {
      Δᐃᐃⵠ = [];
      Δᐃᐃⵠ.push.apply(Δᐃᐃⵠ, p287);
      var v330 = [];
      while (Δᐃᐃⵠ.length > 0) {
        var v331 = Math.floor(Math.random() * Δᐃᐃⵠ.length);
        v330.push(Δᐃᐃⵠ[v331]);
        Δᐃᐃⵠ.splice(v331, 1);
      }
      return v330;
    },
    ᐃⵠᐃⲆⲆⵠⲆ: function (p288) {
      if (p288 >= 20000) {
        p288 = (p288 - 20000) * 1000;
      } else if (p288 >= 10000) {
        p288 = (p288 - 10000) * 100;
      }
      return p288;
    },
    ΔⲆΔⲆΔⲆⲆ: function (p289) {
      if (typeof p289 != "number") {
        return "0";
      }
      if (p289 >= 10000) {
        var v332 = Math.floor(Math.log10(p289)) - 2;
        var v333 = Math.max(0, 3 - v332);
        var v334 = Math.floor(p289 / 1000).toString();
        if (v333) {
          for (var v335 = (v334 += "." + (p289 % 1000 / 1000).toString().substring(2).substring(0, v333)).length - 1, v336 = 0; v335 > 0 && v334[v335] == "0"; v335--) {
            v336++;
          }
          if ((v334 = v334.substring(0, v334.length - v336))[v334.length - 1] == ".") {
            v334 = v334.substring(0, v334.length - 1);
          }
        }
        return v334 += "k";
      }
      return p289.toString();
    },
    ΔᐃⲆᐃΔΔᐃ: function (p290) {
      return p290 * (2 - p290);
    },
    ⲆⵠⵠΔᐃⲆⲆ: function (p291) {
      return --p291 * p291 * p291 + 1;
    },
    ΔⲆⲆⲆⲆ: function (p292) {
      if (p292 < 0.5) {
        return p292 * 2 * p292;
      } else {
        return (4 - p292 * 2) * p292 - 1;
      }
    },
    ΔΔⲆⵠⵠⵠᐃ: function (p293) {
      if (p293 < 0.5) {
        return p293 * 4 * p293 * p293;
      } else {
        return (p293 - 1) * (p293 * 2 - 2) * (p293 * 2 - 2) + 1;
      }
    },
    ⲆⵠΔⵠΔΔΔⵠⲆ: function (p294) {
      if (p294 < 0.5) {
        return p294 * 8 * p294 * p294 * p294;
      } else {
        return 1 - --p294 * 8 * p294 * p294 * p294;
      }
    },
    ΔΔᐃⲆᐃᐃⵠ: function (p295) {
      return 1 - --p295 * p295 * p295 * p295;
    },
    ⵠⲆᐃⵠΔᐃⵠ: function (p296) {
      return 1 + --p296 * p296 * p296 * p296 * p296;
    },
    Ⲇⵠᐃᐃ: function (p297, p298, p299, p300, p301, p302) {
      this.ΔⲆΔ = p297;
      this.Ⲇⵠⵠ = p298;
      this.max = p299;
      this.min = p300;
      this.ᐃᐃᐃΔΔⲆΔ = p301;
      this.ᐃΔΔⵠⲆⲆⵠ = p302;
      this.ΔᐃΔΔΔΔⲆ = 0;
      this.ⵠᐃᐃ = function () {
        if (this.ΔⲆΔ) {
          if ((v337 = this.Ⲇⵠⵠ + v3064 * this.ᐃᐃᐃΔΔⲆΔ) > this.max) {
            this.Ⲇⵠⵠ = this.max;
            this.ΔⲆΔ = vVVV142;
            return true;
          }
          this.Ⲇⵠⵠ = v337;
        } else {
          var v337;
          if ((v337 = this.Ⲇⵠⵠ - v3064 * this.ᐃΔΔⵠⲆⲆⵠ) < this.min) {
            this.Ⲇⵠⵠ = this.min;
            this.ΔⲆΔ = vVV62;
          } else {
            this.Ⲇⵠⵠ = v337;
          }
        }
      };
      return vVV14;
    },
    ΔΔⵠⲆΔ: function (p303, p304, p305, p306, p307, p308) {
      this.ᐃⵠΔΔΔ = p303;
      this.ⲆΔⵠΔⵠ = p304;
      this.ᐃⵠⲆΔⲆ = p305;
      this.ⵠᐃⵠᐃΔ = p306;
      this.x = p307;
      this.ⲆᐃΔΔⲆ = p308;
      this.ⵠᐃᐃⲆΔⵠⵠ = function () {
        this.x = this.ΔᐃⵠᐃᐃΔⲆⵠⲆ;
        this.ⲆΔⵠΔⵠ = 0;
      };
      this.ΔΔᐃΔⵠⲆΔ = function (p309) {
        if (p309 !== this.ⲆᐃΔΔⲆ) {
          this.ⲆᐃΔΔⲆ = p309;
          this.ⵠᐃⵠᐃΔ = this.x;
          this.ⲆΔⵠΔⵠ = 0;
        }
        if (this.ⲆᐃΔΔⲆ !== this.x) {
          this.ⲆΔⵠΔⵠ += v3064;
          if (this.ⲆΔⵠΔⵠ > this.ᐃⵠⲆΔⲆ) {
            this.x = this.ⲆᐃΔΔⲆ;
          } else {
            var v338 = this.ᐃⵠΔΔΔ(this.ⲆΔⵠΔⵠ / this.ᐃⵠⲆΔⲆ);
            this.x = this.ⵠᐃⵠᐃΔ + (this.ⲆᐃΔΔⲆ - this.ⵠᐃⵠᐃΔ) * v338;
          }
        }
      };
    },
    ΔⵠΔⲆΔᐃᐃ: function (p310, p311, p312, p313, p314, p315, p316, p317, p318) {
      this.ᐃⵠΔΔΔ = p310;
      this.ⲆΔⵠΔⵠ = p311;
      this.ᐃⵠⲆΔⲆ = p312;
      this.ⵠᐃⵠᐃΔ = p313;
      this.ΔᐃᐃᐃⲆ = p314;
      this.x = p315;
      this.y = p316;
      this.ⲆᐃΔΔⲆ = p317;
      this.ΔᐃⵠΔⵠⵠᐃ = p318;
      this.ΔΔᐃΔⵠⲆΔ = function (p319) {
        if (p319.x != this.ⲆᐃΔΔⲆ || p319.y != this.ΔᐃⵠΔⵠⵠᐃ) {
          this.ⲆᐃΔΔⲆ = p319.x;
          this.ΔᐃⵠΔⵠⵠᐃ = p319.y;
          this.ⵠᐃⵠᐃΔ = this.x;
          this.ΔᐃᐃᐃⲆ = this.y;
          this.ⲆΔⵠΔⵠ = 0;
        }
        if (this.ⲆᐃΔΔⲆ != this.x || this.ΔᐃⵠΔⵠⵠᐃ != this.y) {
          this.ⲆΔⵠΔⵠ += v3064;
          if (this.ⲆΔⵠΔⵠ > this.ᐃⵠⲆΔⲆ) {
            this.x = this.ⲆᐃΔΔⲆ;
            this.y = this.ΔᐃⵠΔⵠⵠᐃ;
          } else {
            var v339 = this.ᐃⵠΔΔΔ(this.ⲆΔⵠΔⵠ / this.ᐃⵠⲆΔⲆ);
            this.x = this.ⵠᐃⵠᐃΔ + (this.ⲆᐃΔΔⲆ - this.ⵠᐃⵠᐃΔ) * v339;
            this.y = this.ΔᐃᐃᐃⲆ + (this.ΔᐃⵠΔⵠⵠᐃ - this.ΔᐃᐃᐃⲆ) * v339;
          }
        }
      };
    },
    ⵠⲆⵠΔᐃΔⵠ: function (p320) {
      var v340 = "";
      for (var v341 = 0; v341 < p320; v341++) {
        v340 += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return v340;
    },
    ΔⵠΔΔΔⲆΔ: function (p321, p322) {
      p322 ||= location.href;
      p321 = p321.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var v342 = new RegExp("[\\?&]" + p321 + "=([^&#]*)").exec(p322);
      if (v342 == null) {
        return null;
      } else {
        return v342[1];
      }
    },
    Ⲇᐃᐃᐃ: function (p323) {
      let v343 = "";
      const v344 = p323.length;
      for (let v345 = 0; v345 < v344; v345++) {
        v343 += String.fromCharCode(p323[v345]);
      }
      return v343;
    },
    ⲆᐃΔⲆⵠΔᐃ: function (p324, p325) {
      return p324.x >= p325.x && p324.x <= p325.x + p325.w && p324.y >= p325.y && p324.y <= p325.y + p325.ⵠⲆⵠ && v6;
    },
    ᐃΔⵠⵠⲆⲆⲆ: function (p326, p327, p328, p329, p330, p331, p332, p333) {
      if (Math.max(p326, p330) < Math.min(p327, p331) && Math.max(p328, p332) < Math.min(p329, p333)) {
        return 1;
      } else {
        return 0;
      }
    },
    ΔΔⵠᐃⵠ: function (p334, p335, p336) {
      return (1 - p336) * p334 + p336 * p335;
    },
    ⵠⵠᐃᐃⵠᐃᐃ: function (p337) {
      return p337.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const v346 = 10;
  function f42(p338, p339, p340, p341, p342) {
    v64(vVVVVVUndefined582, p338, p339, p340, p341, p342);
    const vLn = f50(v372[0], v372[1], v372[2], v372[3], v372[4]);
    const vEn = f48(v372[0], v372[1], v372[2], v372[3], v372[4]);
    return (8 << ((vLn ^ vEn) & 255)) + (0 << ((vLn ^ vEn) >> 16 & 255)) + (16 << ((vLn ^ vEn) >> 24 & 255)) + (24 << ((vLn ^ vEn) >> 8 & 255));
  }
  function f43(p343, p344) {
    const v347 = p343 ^ 16586;
    const v348 = ~(p344 & 31459) & p344 | ~(p344 & 31459) & 31459;
    return ((51043 + (function (p345, p346, p347, p348) {
      const v349 = p345 ^ 616;
      const v350 = (1 + (p346 + 16776) * 22695477) % 4294967296;
      const v351 = (p347 | 315) & ~(p347 & 315);
      const vF14 = function (p349, p350, p351, p352, p353) {
        const v352 = p349 ^ 35467;
        const v353 = ~(p350 & 60840) & (p350 | 60840);
        const v354 = ~(p351 & 51191) & 51191 | ~(p351 & 51191) & p351;
        const v355 = ~(p352 & 60794) & 60794 | ~(p352 & 60794) & p352;
        const v356 = ~(p353 & 12620) & 12620 | ~(p353 & 12620) & p353;
        const vBg = f76(v352, v353, v354, v355, v356, v352);
        const vF22 = function (p354, p355, p356, p357) {
          const v357 = p354 ^ 31008;
          const v358 = p355 ^ 14122;
          const v359 = (8 << (p356 >> 8 & 255)) + (16 << (p356 >> 0 & 255)) + (0 << (p356 >> 16 & 255)) + (24 << (p356 >> 24 & 255));
          const v360 = p357 ^ 38333;
          const vMC = f531(v357, v358, v359, v360, v357);
          const vF23 = function (p358, p359, p360, p361, p362) {
            const v361 = (0 << (p358 & 255)) + (24 << (p358 >> 8 & 255)) + (16 << (p358 >> 24 & 255)) + (8 << (p358 >> 16 & 255));
            const v362 = (12345 + (45233 + p359) * 1103515245) % 2147483648;
            const vLC = f517(v361, v362, p360 ^ 12104, ((51976 + p361) * 1664525 + 1013904223) % 4294967296, p362 ^ 11495);
            (function (p363, p364) {
              const v363 = (1 + (6723 + p363) * 22695477) % 4294967296;
              const v364 = (24 << (p364 >> 24 & 255)) + (16 << (p364 & 255)) + (0 << (p364 >> 8 & 255)) + (8 << (p364 >> 16 & 255));
              const vFp = f479(v363, v364);
              const vF24 = function (p365, p366, p367) {
                const v365 = ((9111 + p365) * 214013 + 2531011) % 4294967296;
                const v366 = ((p366 + 61891) * 1664525 + 1013904223) % 4294967296;
                const v367 = (1013904223 + (p367 + 23062) * 1664525) % 4294967296;
                const vOp = f492(v365, v366, v367, v365, v366);
                const vF25 = function (p368, p369, p370, p371) {
                  const v368 = (24 << (p368 >> 16 & 255)) + (0 << (p368 >> 24 & 255)) + (8 << (p368 & 255)) + (16 << (p368 >> 8 & 255));
                  const v369 = ~(p369 & 7480) & (p369 | 7480);
                  const v370 = (8 << (p370 >> 8 & 255)) + (16 << (p370 >> 24 & 255)) + (0 << (p370 >> 16 & 255)) + (24 << (p370 & 255));
                  const v371 = ~(p371 & 17981) & p371 | ~(p371 & 17981) & 17981;
                  const vRo2 = f64(v368, v369, v370);
                  f531(v371, v368, v369, v370, v371);
                  return vRo2 ^ 15486;
                }(v367, v365, v366, v367);
                return (2147483587 + (52447 + (vOp ^ vF25)) * 2147483629) % 2147483647;
              }(v363, v364, v363);
            })(v361, v362);
            return ~(vLC & 23107) & vLC | ~(vLC & 23107) & 23107;
          }(v358, v359, v360, v357, v358);
          return (0 << ((vMC ^ vF23) >> 8 & 255)) + (24 << ((vMC ^ vF23) >> 16 & 255)) + (16 << ((vMC ^ vF23) >> 24 & 255)) + (8 << ((vMC ^ vF23) & 255));
        }(v353, v354, v355, v356);
        return (12345 + (24261 + (vBg ^ vF22)) * 1103515245) % 2147483648;
      }(v349, v350, v351, (p348 | 58078) & ~(p348 & 58078), v349);
      f44(v350, v351);
      return ~(vF14 & 33609) & vF14 | ~(vF14 & 33609) & 33609;
    }(v347, v348, v347, v348) ^ f481(v347, v348))) * 22695477 + 1) % 4294967296;
  }
  Math.sign = Math.sign || function (p372) {
    if (p372 === 0) {
      return 0;
    } else if (p372 > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  Math.log10 = Math.log10 || function (p373) {
    return Math.log(p373) / Math.ⲆⵠΔᐃᐃΔᐃΔⲆ;
  };
  let v372;
  let vVVVVVUndefined582 = vVVVVUndefined582;
  const v373 = 0;
  const vVVVVUndefined112 = vVVVUndefined112;
  function f44(p374, p375) {
    const v374 = (p374 + 40338) % 65394;
    const v375 = (p375 | 60413) & ~(p375 & 60413);
    return (12345 + (38784 + (f480(v374, v375, v374, v375) ^ f62(v374, v375, v374, v375, v374, v375))) * 1103515245) % 2147483648;
  }
  vVVVUndefined112 = function () {
    vVVVVVUndefined582 = vVVUndefined(v47(13));
    v372 = f5(vVVVVVUndefined582);
    if (vVVVVUndefined112) {
      vVVVVUndefined112();
    }
  };
  (function (p376) {
    var v376 = false;
    if (typeof ᐃΔᐃⲆᐃⵠⲆ == "function" && ᐃΔᐃⲆᐃⵠⲆ.ⵠΔⲆΔᐃⵠΔᐃⵠ) {
      ᐃΔᐃⲆᐃⵠⲆ(p376);
      v376 = true;
    }
    if (typeof ⲆΔⵠⲆⵠᐃⲆ === "object") {
      ⲆⵠΔⲆΔⵠⵠⵠᐃ.exports = p376();
      v376 = true;
    }
    if (!v376) {
      var v377 = vWindow.ⲆᐃΔⵠ;
      var v378 = vWindow.ⲆᐃΔⵠ = p376();
      v378.ⵠΔᐃⵠⲆᐃᐃⲆᐃ = function () {
        vWindow.ⲆᐃΔⵠ = v377;
        return v378;
      };
    }
  })(function () {
    function e() {
      for (var v379 = 0, v380 = {}; v379 < arguments.length; v379++) {
        var v381 = arguments[v379];
        for (var v382 in v381) {
          v380[v382] = v381[v382];
        }
      }
      return v380;
    }
    return function f46(p377) {
      function f47(p378, p379, p380) {
        var v383;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (p380 = e({
              path: "/"
            }, f47.ⲆΔᐃⵠⲆΔⵠ, p380)).expires == "number") {
              var v384 = new Date();
              v384.setMilliseconds(v384.getMilliseconds() + p380.expires * 86400000);
              p380.expires = v384;
            }
            try {
              v383 = JSON.stringify(p379);
              if (/^[\{\[]/.test(v383)) {
                p379 = v383;
              }
            } catch (e) {}
            p379 = p377.write ? p377.write(p379, p378) : encodeURIComponent(String(p379)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            p378 = (p378 = (p378 = encodeURIComponent(String(p378))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [p378, "=", p379, p380.expires ? "; expires=" + p380.expires.toUTCString() : "", p380.path ? "; path=" + p380.path : "", p380.domain ? "; domain=" + p380.domain : "", p380.ΔΔᐃⲆΔⲆⵠΔΔ ? "; secure" : ""].join("");
          }
          if (!p378) {
            v383 = {};
          }
          for (var v385 = document.cookie ? document.cookie.split("; ") : [], v386 = /(%[0-9A-Z]{2})+/g, v387 = 0; v387 < v385.length; v387++) {
            var v388 = v385[v387].split("=");
            var v389 = v388.slice(1).join("=");
            if (v389.charAt(0) === "\"") {
              v389 = v389.slice(1, -1);
            }
            try {
              var v390 = v388[0].replace(v386, decodeURIComponent);
              v389 = p377.read ? p377.read(v389, v390) : p377(v389, v390) || v389.replace(v386, decodeURIComponent);
              if (this.json) {
                try {
                  v389 = JSON.parse(v389);
                } catch (e) {}
              }
              if (v390 === p378) {
                v383 = v389;
                break;
              }
              if (!p378) {
                v383[v390] = v389;
              }
            } catch (e) {}
          }
          return v383;
        }
      }
      f47.set = f47;
      f47.get = function (p381) {
        return f47.call(f47, p381);
      };
      f47.ⲆⵠⲆⲆΔᐃᐃΔⲆ = function () {
        return f47.apply({
          json: vVVV62
        }, [].slice.call(arguments));
      };
      f47.ⲆΔᐃⵠⲆΔⵠ = {};
      f47.remove = function (p382, p383) {
        f47(p382, "", e(p383, {
          expires: -1
        }));
      };
      f47.ᐃⵠᐃΔⲆᐃᐃᐃⲆ = f46;
      return f47;
    }(function () {});
  });
  const v391 = 11;
  function f48(p384, p385, p386, p387, p388) {
    vVVVVUndefined58(vVVVVVUndefined582, p384, p385, p386, p387, p388);
    const vLn2 = f50(v372[0], v372[1], v372[2], v372[3], v372[4]);
    const vLn3 = f50(v372[0], v372[1], v372[2], v372[3], v372[4]);
    return (24 << ((vLn2 ^ vLn3) >> 8 & 255)) + (0 << ((vLn2 ^ vLn3) >> 16 & 255)) + (8 << ((vLn2 ^ vLn3) >> 24 & 255)) + (16 << ((vLn2 ^ vLn3) & 255));
  }
  const v392 = 20;
  function f49(p389) {
    return function (p390, p391) {
      vVVUndefined8(vVVVVVUndefined582, p390, p391);
      const vF27 = function (p392, p393, p394) {
        vVVUndefined6(vVVVVVUndefined582, p392, p393, p394);
        const vF30 = function (p395, p396, p397, p398, p399, p400) {
          vVVUndefined9(vVVVVVUndefined582, p395, p396, p397, p398, p399, p400);
          const vAC = f529(v372[0], v372[1]);
          f529(v372[2], v372[3]);
          return ~(vAC & 49777) & 49777 | ~(vAC & 49777) & vAC;
        }(v372[0], v372[1], v372[2], v372[0], v372[1], v372[2]);
        f80(v372[0], v372[1]);
        return (vF30 | 30254) & ~(vF30 & 30254);
      }(v372[0], v372[1], v372[0]);
      const vQg = f80(v372[1], v372[0]);
      return ((152 + (vF27 ^ vQg)) * 8121 + 28411) % 134456;
    }(p389, 48521);
  }
  const v393 = 13;
  const v394 = 18;
  const v395 = 100;
  const v396 = 20;
  const v397 = 12;
  const vVVV622 = vVV62;
  function f50(p401, p402, p403, p404, p405) {
    vVVUndefined12(vVVVVVUndefined582, p401, p402, p403, p404, p405);
    const vXC2 = f530(v372[0], v372[1], v372[2], v372[3], v372[4]);
    f530(v372[0], v372[1], v372[2], v372[3], v372[4]);
    return ~(vXC2 & 13565) & 13565 | ~(vXC2 & 13565) & vXC2;
  }
  const v398 = 13;
  const v399 = 14;
  const vVV142 = vV142;
  function f51(p406, p407, p408) {
    const v400 = (2147483587 + (9651 + p406) * 2147483629) % 2147483647;
    const v401 = ~(p407 & 46681) & p407 | ~(p407 & 46681) & 46681;
    const v402 = ((p408 + 30294) * 1664525 + 1013904223) % 4294967296;
    const vF112 = f11(v400, v401, v402, v400, v401, v402);
    f76(v400, v401, v402, v400, v401, v402);
    return ~(vF112 & 26067) & (vF112 | 26067);
  }
  function f52(p409, p410, p411, p412) {
    vVVVUndefined57(vVVVVVUndefined582, p409, p410, p411, p412);
    return (47289 + (f42(v372[0], v372[1], v372[2], v372[3], v372[0]) ^ f42(v372[1], v372[2], v372[3], v372[0], v372[1]))) % 65521;
  }
  var v403 = document.getElementById("game_canvas");
  const v404 = 4;
  var v405 = v403.getContext("2d");
  var v406 = v403.width;
  const v407 = 0;
  var v408 = v403.height;
  var v409 = v403.width / 2;
  var v410 = v403.height / 2;
  const v411 = 15;
  const v412 = 17;
  var v413 = {
    x: v409,
    y: v410
  };
  const v414 = 10;
  var v415 = 1;
  var v416 = 1;
  var v417 = -1;
  var v418 = "J" + v446;
  var v419 = "S" + v464;
  var vVWindow = vWindow;
  var v420;
  var v421;
  var v422 = (v433 = "O") + "N";
  var v423 = 0;
  const v424 = 8;
  const v425 = 16;
  function f53(p413) {
    const vF32 = function () {
      for (let v426 = 0; v426 < 5; v426++) {
        vWindow.addEventListener("click", function () {
          vF32();
        });
      }
    };
    vF32();
  }
  const v427 = 4;
  var v428;
  var vVVWindow = vVWindow;
  const v429 = 19;
  const v430 = 20;
  v419 = "N";
  var v431 = "J";
  const v432 = 19;
  var v433 = "O" + v446;
  const v434 = 1;
  var vVVVWindow = vVVWindow;
  var v435;
  const v436 = 18;
  const v437 = 255;
  const v438 = 12;
  var vVVVVWindow = vVVVWindow;
  const v439 = 1;
  v422 = "N" + undefined;
  const vVVVUndefined14 = vVVUndefined14;
  var v440;
  var vVVVVVWindow = vVVVVWindow;
  const vVVV623 = vVV62;
  const v441 = 100;
  var v442;
  var vVVVVVVWindow = vVVVVVWindow;
  const v443 = 18;
  var v444;
  const v445 = 4;
  var v446;
  var vVVVVVVVWindow = vVVVVVVWindow;
  const v447 = 1;
  const vVVVV1423 = vVVV142;
  const v448 = 14;
  var v449;
  const v450 = 11;
  const v451 = 255;
  var vVVVVVVVVWindow = vVVVVVVVWindow;
  const v452 = 17;
  const v453 = 19;
  v431 = "O";
  const v454 = 12;
  const v455 = 13;
  const v456 = 0;
  const vVVVVUndefined14 = vVVVUndefined14;
  vVVVVVVVVWindow = vVVVVVVVWindow;
  const v457 = {};
  v457.get = function (p414, p415) {
    if (p415 !== "ᐃⵠΔⵠΔⵠᐃ") {
      const vF33 = function () {
        for (let v458 = 0; v458 < 5; v458++) {
          vWindow.addEventListener("click", function () {
            vF33();
          });
        }
      };
      vF33();
    }
    return vWindow.Reflect.get(...arguments);
  };
  var v459;
  const v460 = 13;
  const v461 = 15;
  var v462;
  var vVVVVVVVVVWindow = vVVVVVVVVWindow;
  var vVVVVVVVVVVWindow = vVVVVVVVVVWindow;
  const v463 = 15;
  var v464 = "J" + (v459 = "S");
  const v465 = 20;
  v403.oncontextmenu = function () {
    return vVVVV1423;
  };
  const v466 = 17;
  function f54(p416) {
    var v467 = new Image();
    v467.src = p416.toDataURL("image/png");
    v467.width = p416.width;
    v467.height = p416.height;
    v467.ᐃⲆⵠΔᐃⲆⲆ = 1;
    return v467;
  }
  v418 = "J";
  const v468 = 14;
  const v469 = 13;
  const v470 = 10;
  v433 = v422;
  const v471 = 16;
  const v472 = 17;
  v422 = v446;
  v446 = v464;
  const v473 = 12;
  v433 = v464;
  v435 = v440 = v464 + (v431 += v418 = v419);
  v419 = v431 + v418;
  v442 = v420 = v421 = v464 + v431;
  v433 = v464 + v431;
  const v474 = 8;
  const v475 = 20;
  v444 = v421;
  v422 = v464 + v431;
  const vVV143 = vV14;
  const v476 = 12;
  v449 = v428 = v420;
  const v477 = 2;
  v431 = v446 = v464;
  v459 = v421;
  const vVVVUndefined142 = vVVUndefined14;
  v462 = v420;
  v418 = v433;
  const v478 = 100;
  if (vWindow.ᐃΔᐃⵠΔⵠⲆ) {
    var v479 = vWindow.Math.acos;
    vWindow.Math.acos = vWindow.Math.asin;
    vWindow.Math.asin = v479;
    var v480 = vWindow.Math.acos;
    vWindow.Math.acos = vWindow.Math.asin;
    vWindow.Math.asin = v480;
  }
  var v481 = vWindow.devicePixelRatio || 1;
  const vVV63 = vV6;
  var v482 = v405.ᐃⲆᐃᐃΔΔᐃᐃⵠ || v405.ⵠⲆᐃⲆᐃⲆⵠᐃⲆ || v405.ⵠΔΔΔΔⲆΔᐃΔ || v405.ΔⲆⵠⲆⵠΔⲆⵠᐃ || v405.ᐃΔΔΔΔᐃᐃᐃΔ || 1;
  const v483 = 19;
  function f55() {
    if (vWindow.innerWidth != v403.width) {
      v403.width = vWindow.innerWidth;
      v406 = v403.width;
      v409 = v403.width / 2;
    }
    if (vWindow.innerHeight != v403.height) {
      v403.height = vWindow.innerHeight;
      v408 = v403.height;
      v410 = v403.height / 2;
    }
    v413 = {
      x: v409,
      y: v410
    };
    var v484 = v403.width;
    var v485 = v403.height;
    v416 = v417 === -1 ? v481 / v482 : v417;
    v403.width = v416 * v484;
    v403.height = v416 * v485;
    v403.style.width = v484 + "px";
    v403.style.height = v485 + "px";
    v405.scale(v416, v416);
    if (user) {
      user.ᐃⵠⵠ.ᐃⵠᐃⵠⵠⵠΔ = v484;
      user.ᐃⵠⵠ.ᐃⵠⵠⵠΔⵠⵠ = v485;
    }
    if (v3066.ΔΔΔⵠᐃ) {
      v3066.ⵠᐃᐃ();
    } else if (v2833.ΔΔΔⵠᐃ) {
      v2833.ⵠᐃᐃ();
    } else if (game.ΔΔΔⵠᐃ) {
      game.ⵠᐃᐃ();
    } else if (scoreboard.ΔΔΔⵠᐃ) {
      scoreboard.ⵠᐃᐃ();
    }
  }
  var v486 = document.getElementById("game_body");
  v486.ondragstart = function () {
    return false;
  };
  v486.ondrop = function () {
    return vVV143;
  };
  v486.onresize = f55;
  (function () {
    var v487 = 0;
    for (var v488 = ["ms", "moz", "webkit", "o"], v489 = 0; v488.length > v489 && !vWindow.requestAnimationFrame; ++v489) {
      vWindow.requestAnimationFrame = vWindow[v488[v489] + "RequestAnimationFrame"];
      vWindow.cancelAnimationFrame = vWindow[v488[v489] + "CancelAnimationFrame"] || vWindow[v488[v489] + "CancelRequestAnimationFrame"];
    }
    if (!vWindow.requestAnimationFrame) {
      vWindow.requestAnimationFrame = function (p417, p418) {
        var v490 = new Date().getTime();
        var v491 = Math.max(0, 16 - (v490 - v487));
        var v492 = vWindow.setTimeout(function () {
          p417(v490 + v491);
        }, v491);
        v487 = v490 + v491;
        return v492;
      };
    }
    vWindow.cancelAnimationFrame ||= function (p419) {
      clearTimeout(p419);
    };
  })();
  const v493 = 20;
  const v494 = 13;
  const vF36 = function () {
    let v495 = 0;
    let v496 = 0;
    let v497 = 0;
    const v498 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 116, 97, 99, 107]);
    const v499 = Δᐃᐃ.Ⲇᐃᐃᐃ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const v500 = Δᐃᐃ.Ⲇᐃᐃᐃ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const v501 = Δᐃᐃ.Ⲇᐃᐃᐃ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
    Δᐃᐃ.Ⲇᐃᐃᐃ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const v502 = Δᐃᐃ.Ⲇᐃᐃᐃ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const v503 = Δᐃᐃ.Ⲇᐃᐃᐃ([105, 110, 100, 101, 120, 79, 102]);
    const v504 = Δᐃᐃ.Ⲇᐃᐃᐃ([77, 97, 116, 104]);
    const v505 = Δᐃᐃ.Ⲇᐃᐃᐃ([103, 101, 116]);
    const v506 = Δᐃᐃ.Ⲇᐃᐃᐃ([79, 98, 106, 101, 99, 116]);
    const v507 = Δᐃᐃ.Ⲇᐃᐃᐃ([104, 97, 115, 79, 119, 110, 80, 114, 111, 112, 101, 114, 116, 121]);
    Δᐃᐃ.Ⲇᐃᐃᐃ([99, 101, 105, 108]);
    const v508 = Δᐃᐃ.Ⲇᐃᐃᐃ([102, 108, 111, 111, 114]);
    const v509 = Δᐃᐃ.Ⲇᐃᐃᐃ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const v510 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 110, 100]);
    const v511 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 105, 103, 110]);
    const v512 = Δᐃᐃ.Ⲇᐃᐃᐃ([103, 101, 116, 79, 119, 110, 80, 114, 111, 112, 101, 114, 116, 121, 68, 101, 115, 99, 114, 105, 112, 116, 111, 114]);
    const v513 = Δᐃᐃ.Ⲇᐃᐃᐃ([102, 105, 108, 108, 82, 101, 99, 116]);
    const v514 = Δᐃᐃ.Ⲇᐃᐃᐃ([103, 117, 105, 102, 121]);
    const v515 = Δᐃᐃ.Ⲇᐃᐃᐃ([101, 118, 97, 108]);
    const v516 = Δᐃᐃ.Ⲇᐃᐃᐃ([111, 112, 116, 105, 111, 110, 115]);
    const v517 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 116, 116, 105, 110, 103, 115, 46, 88, 114, 97, 121]);
    const v518 = Δᐃᐃ.Ⲇᐃᐃᐃ([10]);
    const v519 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 116, 116, 105, 110, 103, 115, 46, 67, 111, 108, 111, 114, 101, 100, 83, 112, 105, 107, 101, 115]);
    const v520 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 83, 112, 105, 107, 101]);
    const v521 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 70, 101, 101, 100]);
    const v522 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 67, 114, 97, 102, 116]);
    const v523 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 82, 101, 99, 121, 99, 108, 101]);
    const v524 = Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 116, 116, 105, 110, 103, 115, 46, 65, 117, 116, 111, 84, 111, 116, 101, 109]);
    Δᐃᐃ.Ⲇᐃᐃᐃ([115, 101, 116, 116, 105, 110, 103, 115, 46, 69, 120, 116, 114, 97, 99, 116, 111, 114, 73, 110, 102, 111]);
    const v525 = Δᐃᐃ.Ⲇᐃᐃᐃ([83, 97, 110, 100, 115, 116, 111, 114, 109, 73, 109, 97, 103, 101]);
    const v526 = Δᐃᐃ.Ⲇᐃᐃᐃ([116, 111, 83, 116, 114, 105, 110, 103]);
    const v527 = Δᐃᐃ.Ⲇᐃᐃᐃ([66, 108, 105, 122, 122, 97, 114, 100, 73, 109, 97, 103, 101]);
    const v528 = Δᐃᐃ.Ⲇᐃᐃᐃ([73, 68, 76, 69]);
    const v529 = Δᐃᐃ.Ⲇᐃᐃᐃ([67, 66, 79]);
    const v530 = Δᐃᐃ.Ⲇᐃᐃᐃ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);
    const v531 = Δᐃᐃ.Ⲇᐃᐃᐃ([82, 101, 105, 100, 105, 116, 101, 83, 112, 105, 107, 101, 65, 108, 108, 121]);
    const v532 = Δᐃᐃ.Ⲇᐃᐃᐃ([109, 97, 115, 116, 101, 114]);
    const v533 = Δᐃᐃ.Ⲇᐃᐃᐃ([100, 111, 119, 110]);
    const v534 = Δᐃᐃ.Ⲇᐃᐃᐃ([109, 111, 100, 101]);
    const v535 = Δᐃᐃ.Ⲇᐃᐃᐃ([119, 97, 105, 116, 105, 110, 103]);
    const v536 = Δᐃᐃ.Ⲇᐃᐃᐃ([104, 101, 105, 103, 104, 116]);
    const v537 = Δᐃᐃ.Ⲇᐃᐃᐃ([119, 105, 100, 116, 104]);
    const v538 = Δᐃᐃ.Ⲇᐃᐃᐃ([116, 105, 109, 101, 111, 117, 116]);
    const v539 = Δᐃᐃ.Ⲇᐃᐃᐃ([111, 112, 97, 99, 105, 116, 121]);
    const v540 = Δᐃᐃ.Ⲇᐃᐃᐃ([91, 99, 108, 97, 115, 115, 42, 61, 34, 103, 117, 105, 102, 121, 34, 93]);
    const v541 = Δᐃᐃ.Ⲇᐃᐃᐃ([100, 111, 99, 117, 109, 101, 110, 116]);
    const v542 = Δᐃᐃ.Ⲇᐃᐃᐃ([113, 117, 101, 114, 121, 83, 101, 108, 101, 99, 116, 111, 114, 65, 108, 108]);
    function f56(p420) {
      try {
        vWindow[v515](p420);
        return 1;
      } catch (e) {
        return 0;
      }
    }
    function f57(p421) {
      try {
        new p421();
      } catch (e) {
        if (e[v498][v503](v502) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return 0;
    }
    function f58(p422) {
      try {
        p422();
      } catch (e) {
        if (e[v498][v503](v502) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return 0;
    }
    function f59(p423, p424) {
      try {
        if (vWindow[v506][v500][v507](p423)) {
          const v543 = vWindow[v506][v512](vWindow[v506][v500], p423);
          if (v543 && vVVVUndefined14 !== v543[v505]) {
            if (v543[v505][v526]()[v503](p424) !== -1) {
              return 1;
            }
          }
        }
      } catch (e) {}
      return 0;
    }
    function f60(p425) {
      try {
        if (vWindow[v506][v500][v507](p425)) {
          return 1;
        }
      } catch (e) {}
      return 0;
    }
    return {
      ⲆΔᐃⲆᐃᐃᐃ: function () {
        if (v495 > 10000) {
          f30(v495);
          f477(v495);
          f49(v495);
        }
        v497++;
        if (v497 > 1000) {
          v497 = 0;
          v496 = f58(vWindow[v499][v500][v501]) || v496;
          v496 = f58(vWindow[v499][v500][v513]) || v496;
          v496 = f58(vWindow[v509][v500][v510]) || v496;
          v496 = function (p426) {
            if (p426 && p426[v526] && p426[v526]()[v503](v518) !== -1) {
              return 1;
            }
            return 0;
          }(f57) || v496;
          v496 = f57(vWindow[v509]) || v496;
          v496 = f59(v516, v532) || v496;
          v496 = f59(v528, v532) || v496;
          v496 = f59(v533, v532) || v496;
          v496 = f59(v534, v532) || v496;
          v496 = f59(v537, v532) || v496;
          v496 = f59(v536, v532) || v496;
          v496 = f59(v538, v532) || v496;
          v496 = f59(v539, v532) || v496;
          v496 = function (p427) {
            try {
              if (vWindow[v541][v542](p427).length > 0) {
                return 1;
              } else {
                return 0;
              }
            } catch (e) {
              return 0;
            }
            return 0;
          }(v540) || v496;
          v496 = f60(v516) + f60(v528) + f60(v533) + f60(v535) + f60(v538) + f60(v539) + f60(v534) >= 3 ? 1 : v496;
          v496 = f56(v530) || v496;
          v496 = f56(v529) || v496;
          v496 = f56(v531) || v496;
          v496 = f56(v517) || v496;
          v496 = f56(v519) || v496;
          v496 = f56(v520) || v496;
          v496 = f56(v521) || v496;
          v496 = f56(v522) || v496;
          v496 = f56(v523) || v496;
          v496 = f56(v524) || v496;
          v496 = f56(v524) || v496;
          v496 = f56(v525) || v496;
          v496 = f56(v527) || v496;
          if (vWindow[v514] !== undefined) {
            v496 = 1;
          }
        }
        if (v496 === 1) {
          v495++;
          if (v495 > 10000) {
            vWindow[v504][v508] = vWindow[v504][v511];
            if (vWindow[v504][v508](v2830) !== 1) {
              game.ΔᐃΔΔΔΔⵠ();
            }
          }
        }
      },
      ⲆⵠⵠⲆⲆΔᐃ: function () {
        return v496;
      }
    };
  }();
  const vVVV63 = vVV63;
  var v544 = navigator.language || navigator.userLanguage;
  const v545 = 255;
  const v546 = 0;
  const v547 = 100;
  var v548 = -new Date().getTimezoneOffset() / 60;
  var v549 = "Europe";
  const v550 = 11;
  const v551 = 18;
  const v552 = 19;
  var v553 = "South America";
  const v554 = 3;
  const v555 = 8;
  var vV549 = v549;
  const vVV144 = vV14;
  const v556 = 1;
  const v557 = 100;
  function f61(p428, p429) {
    const v558 = (p428 | 16433) & ~(p428 & 16433);
    const v559 = (24 << (p429 & 255)) + (16 << (p429 >> 16 & 255)) + (0 << (p429 >> 24 & 255)) + (8 << (p429 >> 8 & 255));
    const vF113 = f11(v558, v559, v558, v559, v558, v559);
    const vEo = f62(v558, v559, v558, v559, v558, v559);
    return (16 << ((vF113 ^ vEo) >> 16 & 255)) + (24 << ((vF113 ^ vEo) >> 24 & 255)) + (8 << ((vF113 ^ vEo) >> 8 & 255)) + (0 << ((vF113 ^ vEo) & 255));
  }
  function f62(p430, p431, p432, p433, p434, p435) {
    const v560 = (22497 + p433) % 65426;
    const v561 = (12345 + (p434 + 10752) * 1103515245) % 2147483648;
    const v562 = ((25878 + p435) * 2147483629 + 2147483587) % 2147483647;
    const v563 = (21661 + ((~(p430 & 42333) & 42333 | ~(p430 & 42333) & p430) ^ (p431 ^ 31749))) % 65295 ^ 954;
    const v564 = (0 << ((v563 ^ v560) >> 16 & 255)) + (16 << ((v563 ^ v560) >> 8 & 255)) + (8 << ((v563 ^ v560) >> 24 & 255)) + (24 << ((v563 ^ v560) & 255));
    const v565 = (8 << ((v564 ^ v561) & 255)) + (0 << ((v564 ^ v561) >> 24 & 255)) + (16 << ((v564 ^ v561) >> 16 & 255)) + (24 << ((v564 ^ v561) >> 8 & 255));
    return (24 << ((v565 ^ v562) >> 24 & 255)) + (16 << ((v565 ^ v562) >> 16 & 255)) + (0 << ((v565 ^ v562) >> 8 & 255)) + (8 << ((v565 ^ v562) >> 0 & 255));
  }
  if (v548 >= -2 && v548 <= 2) {
    vV549 = v549;
  } else if (v548 > 2 && v548 <= 5) {
    vV549 = "Russia";
  } else if (v548 > 5 && v548 <= 9) {
    vV549 = "Asia";
  } else if (v548 > 9) {
    vV549 = "Australia";
  } else if (v548 >= -5 && v548 < -2) {
    vV549 = v544 === "pt-BR" || v544 === "pt-br" || v544 === "pt" || v544 === "pt-pt" ? v553 : "North America";
  } else if (v548 < -5) {
    vV549 = v544 === "pt-BR" || v544 === "pt-br" || v544 === "pt" || v544 === "pt-pt" ? v553 : "West America";
  }
  var v566 = {
    ᐃⲆΔⲆⲆⲆᐃ: function (p436) {
      var v567 = 2147483648;
      var v568 = p436 || Math.floor(Math.random() * (v567 - 1));
      this.ΔᐃΔⲆⵠ = function (p437) {
        v568 = p437 || Math.floor((v567 - 1) * Math.random());
      };
      this.get = function () {
        return (v568 = (v568 * 1103515245 + 12345) % v567) / v567;
      };
    }
  };
  const v569 = 14;
  const v570 = 15;
  var v571 = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  const v572 = 2;
  const v573 = 3;
  function f63(p438, p439, p440, p441, p442) {
    const v574 = (2147483587 + (p438 + 53538) * 2147483629) % 2147483647;
    const v575 = ~(p439 & 64277) & p439 | ~(p439 & 64277) & 64277;
    const v576 = ~(p440 & 17234) & p440 | ~(p440 & 17234) & 17234;
    const v577 = p441 ^ 40357;
    const v578 = ~(p442 & 58686) & p442 | ~(p442 & 58686) & 58686;
    const vF62 = f62(v574, v575, 0, v577, v578, v574);
    const vF622 = f62(v575, v576, 0, v578, v574, v575);
    return (0 << ((vF62 ^ vF622) >> 16 & 255)) + (24 << ((vF62 ^ vF622) >> 24 & 255)) + (16 << ((vF62 ^ vF622) & 255)) + (8 << ((vF62 ^ vF622) >> 8 & 255));
  }
  function f64(p443, p444, p445) {
    const v579 = ((2167 + p443) * 1664525 + 1013904223) % 4294967296;
    const v580 = (p444 + 45718) % 65478;
    const v581 = ((p445 + 28611) * 1103515245 + 12345) % 2147483648;
    const vOp2 = f492(v579, v580, v581, v579, v580);
    (function (p446, p447, p448, p449, p450) {
      const v582 = p446 ^ 3912;
      const v583 = (p447 | 32976) & ~(p447 & 32976);
      const vLC2 = f517(v582, v583, (16 << (p448 >> 16 & 255)) + (24 << (p448 >> 24 & 255)) + (8 << (p448 & 255)) + (0 << (p448 >> 8 & 255)), (25458 + p449) % 65511, (p450 | 60693) & ~(p450 & 60693));
      f479(v582, v583);
    })(v581, v579, v580, v581, v579);
    return ~(vOp2 & 10393) & (vOp2 | 10393);
  }
  var v584 = 0;
  let v585 = {
    ΔΔⲆⲆⵠ: ["#133A2B", "#042b30"],
    ᐃⲆⵠΔⲆᐃΔΔᐃ: ["#EBF2F0", "#136167"],
    ᐃⲆΔⲆᐃᐃⵠ: ["#4EB687", "#187484"],
    ⲆⲆᐃΔΔΔᐃ: ["#664516", "#13474C"],
    ᐃᐃΔΔΔⲆⵠ: ["#FCEFBB", "#0F4D48"],
    ⵠᐃⵠᐃⵠⵠΔ: ["#C1AA7E", "#0F423D"],
    ΔⲆΔⵠΔⲆᐃ: ["#594837", "#163A3A"],
    ⲆᐃΔᐃⵠΔΔ: ["#A5D6D6", "#539CA0"],
    ⲆⵠΔⵠᐃ: ["#0B6A84", "#09373F"],
    ⵠⵠΔΔⵠΔΔ: ["#2A8B9B", "#0F464C"],
    ᐃⵠⲆᐃΔⵠᐃ: ["#A9D6D3", "#115E60"],
    ΔΔΔΔⲆΔΔ: ["#ECF7F9", "#539CA0"],
    ⵠⲆⲆΔᐃΔᐃ: ["#FFF", "#FFF"],
    ᐃΔᐃᐃΔΔΔ: ["#FFF", "#FFF"],
    ⵠⵠΔᐃⲆᐃⲆ: ["#1C9BA4", "#00272F"],
    ⲆⵠⲆᐃᐃ: ["#2D2017", "#031C1E"],
    ᐃⲆᐃ: 0,
    ᐃⲆΔ: 1,
    ᐃᐃᐃⵠᐃⲆⲆⲆᐃ: 2300,
    ᐃΔΔⵠⲆᐃΔΔΔ: 2290,
    ⲆᐃΔΔΔΔᐃ: 34,
    ᐃⲆᐃᐃᐃᐃΔ: 5,
    ΔⲆᐃᐃⲆΔⵠ: 68,
    ⵠⵠⲆⵠⲆⲆᐃ: 34,
    ⲆⲆΔΔⲆⵠⲆ: 5,
    ᐃⲆⵠⲆⲆᐃⲆ: 1,
    ⵠⲆΔᐃΔᐃⲆ: 0.6,
    ΔᐃᐃⲆⵠⵠⵠ: 0.25,
    ᐃⵠⲆΔⵠᐃᐃ: 50,
    ⵠᐃⲆΔΔⵠⲆ: 10,
    ⲆΔⵠⲆⲆᐃⵠ: 75,
    ⵠⵠΔⵠΔⲆΔ: 20,
    ᐃΔⵠⵠⵠΔΔ: 5,
    ᐃΔᐃᐃⲆ: 0,
    ᐃΔⲆΔᐃ: 1,
    Ⲇᐃⵠᐃᐃ: 2,
    ⵠᐃⵠⲆΔ: 3,
    ⲆⲆⲆᐃΔ: 4,
    ⵠⲆΔⲆⵠ: 5,
    ᐃⵠΔⲆΔ: 6,
    ᐃᐃⲆⲆⵠ: 7,
    ⲆᐃⵠⲆᐃ: 8,
    ᐃᐃΔΔᐃ: 9,
    ΔΔⵠΔΔ: 10,
    ⲆⲆⲆΔᐃ: 11,
    ᐃⵠⵠⲆⲆ: 12,
    Ⲇᐃⵠⵠᐃ: 13,
    ⲆΔΔᐃⵠ: 14,
    ᐃᐃᐃⲆⲆ: 15,
    ⲆⲆⵠⲆⲆ: 16,
    ΔᐃᐃⲆᐃ: 17,
    ᐃᐃⵠᐃΔ: 18,
    ⲆᐃΔⲆⲆ: 19,
    ᐃᐃΔᐃΔ: 20,
    ΔⵠⲆⵠᐃ: 21,
    ⵠᐃΔⵠⲆ: 22,
    ΔⵠΔⵠΔ: 23,
    ⲆΔᐃᐃΔ: 24,
    ⵠⵠΔᐃⵠ: 25,
    ΔⲆⵠΔⵠ: 26,
    ⵠⵠᐃΔΔ: 27,
    ΔⲆⵠᐃΔ: 28,
    ᐃᐃΔᐃⵠ: 29,
    ⵠⲆⵠᐃⲆ: 30,
    ⲆⵠⵠⲆⲆ: 31,
    ⵠΔᐃⵠⲆ: 32,
    ⵠⲆⲆΔⵠ: 33,
    ⵠⵠⵠⲆΔ: 34,
    ΔᐃⲆΔⲆ: 35,
    ⲆᐃⲆΔᐃ: 36,
    ΔᐃΔΔⵠ: 37,
    ⲆΔΔⲆⵠ: 38,
    ⲆⵠⲆΔΔ: 39,
    ΔⲆᐃⲆⲆ: 40,
    ⵠⵠⲆᐃΔ: 41,
    ⲆᐃᐃⵠⲆ: 42,
    ᐃⵠⲆΔᐃ: 43,
    ᐃⵠΔᐃΔ: 44,
    ΔⲆⲆᐃΔ: 45,
    ᐃᐃᐃⲆᐃ: 46,
    ⲆⲆΔΔ: 47,
    ᐃⵠⵠΔⲆ: 48,
    ᐃᐃⲆⲆᐃ: 49,
    ⵠΔΔᐃᐃ: 50,
    ᐃⵠΔⵠⲆ: 51,
    ⲆⵠΔⵠΔ: 52,
    ᐃⲆᐃⲆᐃ: 53,
    ⲆΔⵠΔΔ: 54,
    ᐃΔⲆᐃΔ: 55,
    ⲆᐃⲆᐃᐃ: 56,
    ⵠⵠᐃⲆⵠ: 57,
    ΔᐃᐃΔΔ: 58,
    ⲆⵠΔᐃⲆ: 59,
    ΔᐃΔⵠᐃ: 60,
    ΔⵠⲆⵠⲆ: 61,
    ⲆᐃΔΔΔ: 62,
    Δⵠⵠⵠᐃ: 63,
    ⲆᐃΔᐃⵠ: 64,
    ⵠᐃᐃᐃᐃ: 65,
    ⲆⵠⵠᐃⲆ: 66,
    ΔΔᐃⲆΔ: 67,
    ⵠΔΔⵠΔ: 68,
    ΔᐃⲆⵠᐃ: 69,
    ᐃΔⲆᐃᐃ: 70,
    ⲆᐃⲆᐃⵠ: 71,
    ⵠⵠΔᐃΔ: 72,
    ⵠΔΔⵠⵠ: 73,
    ⵠᐃⵠⲆᐃ: 74,
    ΔⲆᐃᐃΔ: 75,
    ⵠᐃᐃⵠⲆ: 76,
    ⲆⵠⵠⲆᐃ: 77,
    ⲆΔᐃΔⵠ: 78,
    ⵠⵠᐃΔⲆ: 79,
    ⵠⲆᐃᐃᐃ: 80,
    ΔⵠᐃΔⵠ: 81,
    ᐃΔⲆᐃⲆ: 82,
    ΔⲆΔⵠᐃ: 83,
    ⲆᐃⲆⲆΔ: 84,
    ⲆⵠΔⲆᐃ: 85,
    ᐃⲆⵠΔΔ: 86,
    ΔⲆΔΔΔ: 87,
    ⵠⲆⵠⵠⲆ: 88,
    ᐃΔⵠΔⲆ: 89,
    ⲆᐃΔᐃᐃ: 90,
    ⲆⵠⲆⵠᐃ: 91,
    ⲆᐃⲆⲆᐃ: 92,
    ⵠⲆΔΔΔ: 93,
    ΔⲆⲆΔⵠ: 94,
    ⵠᐃⲆΔΔ: 95,
    ᐃᐃᐃⵠⵠ: 96,
    ᐃⵠⲆᐃⵠ: 97,
    ⵠΔᐃΔⵠ: 98,
    Δⵠᐃᐃᐃ: 99,
    ΔΔⵠⲆⲆ: 100,
    ΔΔΔΔΔ: 101,
    ⲆⲆᐃⲆⲆ: 102,
    ⲆᐃⲆⲆⵠ: 103,
    ᐃⲆⲆᐃΔ: 104,
    ᐃⵠⵠⵠᐃ: 105,
    ΔⲆᐃΔⲆ: 106,
    ⲆⵠΔⵠⵠ: 107,
    Ⲇᐃᐃᐃᐃ: 108,
    Δⵠⵠᐃⵠ: 109,
    ᐃⵠⵠⵠⲆ: 110,
    ⵠⵠⵠᐃΔ: 111,
    ⵠⲆⵠΔⲆ: 112,
    ᐃⵠΔᐃᐃ: 113,
    ⵠᐃΔΔⵠ: 114,
    ⵠΔⵠᐃⲆ: 115,
    ΔⵠΔΔᐃ: 116,
    ᐃⲆᐃΔΔ: 117,
    ⵠᐃᐃⲆᐃ: 118,
    ⲆᐃⵠΔΔ: 119,
    ⲆΔΔⲆᐃ: 120,
    Ⲇⵠⵠᐃⵠ: 121,
    ᐃᐃⵠⵠΔ: 122,
    ᐃⵠⵠⲆⵠ: 123,
    ΔⲆⲆⲆᐃ: 124,
    ⵠΔⲆᐃΔ: 125,
    ⵠⲆΔΔⵠ: 126,
    ΔΔᐃⲆᐃ: 127,
    ⵠΔΔⵠⲆ: 128,
    ⲆΔⲆᐃΔ: 129,
    ᐃΔⲆΔΔ: 130,
    ᐃⲆΔⲆⵠ: 131,
    ⵠⵠΔΔⵠ: 132,
    ⵠⵠⲆΔⵠ: 133,
    ⵠⵠᐃⵠᐃ: 134,
    ᐃⵠΔΔⲆ: 135,
    ⵠⲆⵠⵠᐃ: 136,
    ⵠᐃⵠΔⲆ: 137,
    ᐃⵠΔᐃⵠ: 138,
    ΔΔⵠΔⵠ: 139,
    ΔᐃᐃᐃΔ: 140,
    ⵠᐃⲆᐃᐃ: 141,
    ⵠᐃΔⵠᐃ: 142,
    ᐃⵠᐃⵠΔ: 143,
    ⵠⵠⲆΔΔ: 144,
    ⲆⵠΔⲆⵠ: 145,
    ⲆᐃⵠⵠΔ: 146,
    ᐃΔΔᐃⵠ: 147,
    ᐃᐃⵠⲆΔ: 148,
    ΔⲆΔⲆⲆ: 149,
    ΔⲆⲆᐃⵠ: 150,
    ΔᐃⲆⵠⵠ: 151,
    ᐃⲆⲆΔⵠ: 152,
    ᐃᐃᐃⵠᐃ: 153,
    ᐃΔΔΔΔ: 154,
    ᐃΔᐃⲆⵠ: 155,
    ⲆᐃⲆᐃΔ: 156,
    ΔΔΔⵠΔ: 157,
    ⵠΔⲆᐃⲆ: 158,
    ⵠⵠᐃᐃⲆ: 159,
    ⵠⲆⵠᐃⵠ: 160,
    ⲆⲆⵠⵠⲆ: 161,
    ΔᐃⲆᐃⵠ: 162,
    ⲆΔⲆⲆⵠ: 163,
    ⲆⵠⲆⵠⲆ: 164,
    ΔΔⲆᐃᐃ: 165,
    ⵠᐃΔⲆᐃ: 166,
    ⵠⲆⵠᐃΔ: 167,
    ΔᐃⵠⲆᐃ: 168,
    ⲆΔⲆⵠⵠ: 169,
    ⵠⲆⲆᐃΔ: 170,
    ⵠⲆⲆΔΔ: 171,
    ΔΔᐃᐃΔ: 172,
    ΔⲆᐃΔᐃ: 173,
    ᐃΔⵠΔᐃ: 174,
    ᐃⲆΔⲆⲆ: 175,
    ⵠⲆⵠⵠⵠ: 176,
    ΔᐃᐃⵠⲆ: 177,
    ⵠⲆᐃⲆᐃ: 178,
    ΔΔΔΔⵠ: 179,
    ⲆᐃⵠⵠⲆ: 180,
    ⲆΔⵠⲆⵠ: 181,
    ⲆⲆⲆᐃⵠᐃΔⵠⲆ: 182,
    ⵠΔⵠᐃΔ: 183,
    ⵠⲆᐃⵠⲆ: 184,
    ⵠΔᐃᐃⵠ: 185,
    Ⲇᐃᐃⵠⵠ: 186,
    ΔᐃⲆⵠΔ: 187,
    ΔᐃⵠⵠΔ: 188,
    ⵠⵠᐃᐃⵠ: 189,
    Δᐃⵠᐃⵠ: 190,
    ⲆⵠⵠΔⵠ: 191,
    ⵠⵠΔⲆⵠ: 192,
    ΔⵠⵠᐃⲆ: 193,
    ᐃⵠᐃΔⵠ: 194,
    ⵠΔΔⲆΔ: 195,
    ΔⲆᐃΔΔ: 196,
    ΔⲆⲆⲆΔ: 197,
    ᐃᐃΔΔⲆ: 198,
    ⵠᐃⲆᐃΔ: 199,
    ⲆΔᐃⲆ: 200,
    ⵠⲆΔΔⲆ: 201,
    Δⵠᐃᐃ: 202,
    ⵠᐃⲆⲆ: 203,
    ΔᐃΔⵠᐃⲆⲆ: 204,
    ᐃᐃⵠᐃᐃ: 205,
    ΔᐃⲆΔᐃⵠΔ: 206,
    ⲆⵠΔΔΔ: 207,
    ΔΔᐃⵠⵠ: 208,
    ⵠⵠⵠᐃⲆΔⲆ: 209,
    ΔⲆⲆⵠⵠΔⵠ: 210,
    ⲆΔⲆᐃⵠ: 211,
    ΔΔⵠⵠ: 212,
    ⵠⵠⵠⵠⲆ: 213,
    ΔΔⵠᐃᐃ: 214,
    ⲆⲆⲆⲆᐃᐃⵠ: 215,
    ᐃΔⵠⵠⵠ: 216,
    ΔⵠⵠΔΔ: 217,
    ΔⲆⵠⵠΔ: 218,
    ⵠΔⵠᐃⲆⵠΔ: 219,
    ⲆΔⲆⲆᐃⲆⵠ: 220,
    ΔⲆⲆⵠᐃ: 221,
    ⲆⲆᐃᐃⵠ: 222,
    ΔᐃⲆⲆⵠ: 223,
    ⵠⵠⲆⲆⲆ: 224,
    ᐃⵠⵠⵠⵠ: 225,
    ΔΔΔⵠⵠ: 226,
    ⵠᐃᐃᐃΔ: 227,
    ΔΔᐃᐃᐃ: 228,
    ΔᐃᐃⲆΔ: 229,
    ⵠᐃΔⲆⲆ: 230,
    ⲆⵠⵠΔⲆ: 231,
    ⲆⵠⲆⵠΔ: 232,
    ⵠⵠᐃΔΔΔⲆ: 233,
    ΔᐃⲆᐃΔ: 234,
    ⲆΔᐃⵠⵠⵠⲆ: 235,
    ΔⲆⲆᐃⵠᐃΔ: 236,
    ᐃⲆⲆⵠᐃⲆⲆ: 237,
    ᐃΔΔΔΔᐃⲆ: 238,
    ΔⲆᐃᐃⵠ: 239,
    ᐃΔⵠⲆΔ: 240,
    ⵠᐃΔⲆΔ: 241,
    ⵠⲆΔᐃᐃ: 242,
    ⲆⵠᐃⲆⲆ: 243,
    ᐃΔᐃᐃΔ: 244,
    ᐃᐃⵠⲆᐃ: 245,
    ⵠⲆΔᐃⵠ: 246,
    ⲆⲆΔᐃⵠ: 247,
    ΔΔᐃΔⲆ: 248,
    ⵠᐃᐃΔΔ: 249,
    ⲆⲆⲆΔΔ: 250,
    ᐃΔⵠⵠΔ: 251,
    ΔΔⲆⵠΔ: 252,
    ⲆΔΔⵠΔ: 253,
    ΔⵠⵠⲆⵠ: 254,
    ⲆⲆᐃΔᐃ: 255,
    ⲆΔⲆΔⵠ: 256,
    ⲆΔᐃΔΔ: 257,
    ⵠⵠᐃΔⵠ: 258,
    ᐃᐃⵠΔΔ: 259,
    ⲆⲆΔΔΔ: 260,
    ᐃⲆⲆᐃᐃ: 261,
    ΔᐃᐃⵠΔ: 262,
    ⵠΔᐃⲆᐃ: 263,
    ᐃᐃⵠΔⵠ: 264,
    ⲆᐃⲆⵠΔ: 265,
    ⲆⲆⲆᐃⵠ: 266,
    ⲆΔⲆⵠᐃ: 267,
    ᐃⵠⲆⲆΔΔΔ: 268,
    ΔⵠⲆΔΔ: 269,
    ⵠⵠΔᐃᐃ: 270,
    ᐃⵠᐃⵠⲆ: 271,
    ΔΔⲆⵠⲆ: 272,
    ⲆⵠⵠΔΔᐃΔ: 273,
    ΔΔⲆᐃΔⲆᐃ: 274,
    ⲆⵠⲆⲆⲆⲆⵠ: 275,
    ΔⲆΔⲆΔ: 276,
    ⵠΔⵠᐃᐃⵠⲆ: 277,
    ᐃᐃᐃΔⲆⲆⵠ: 278,
    ⵠⵠᐃΔⵠΔΔ: 279,
    ΔⵠⲆΔΔⵠΔ: 280,
    ⵠⵠᐃΔⵠᐃᐃ: 281,
    ΔΔᐃᐃΔᐃΔ: 282,
    ⵠⵠⲆΔᐃΔⲆ: 283,
    ᐃᐃΔᐃᐃⵠⵠ: 284,
    ᐃⲆⲆⲆⵠ: 285,
    ᐃΔⵠⲆᐃ: 286,
    ΔⲆⵠⵠⵠ: 287,
    ⵠⵠΔⵠⲆ: 288,
    ᐃΔΔⲆΔ: 289,
    ΔᐃⲆⲆΔΔΔ: 290,
    ᐃΔⵠΔΔ: 291,
    ΔⲆΔᐃⲆ: 292,
    ᐃΔᐃⵠᐃΔⲆ: 293,
    ⲆᐃΔᐃⲆ: 294,
    ⵠᐃᐃᐃⵠⵠⲆ: 295,
    ⵠΔⲆⲆⲆ: 296,
    ᐃⲆⵠᐃⵠ: 297,
    ⵠᐃⲆⵠΔⵠⲆ: 298,
    ⵠΔᐃΔΔΔᐃ: 299,
    ⵠⵠⲆⵠᐃ: 300,
    Ⲇⵠᐃⵠᐃ: 301,
    ⵠⵠⵠᐃⵠⲆⵠ: 302,
    ᐃᐃᐃⲆΔ: 303,
    ᐃⲆᐃⲆ: 304,
    ⵠᐃⵠᐃⵠ: 305,
    ᐃΔᐃⵠⵠ: 306,
    ΔⲆΔΔⲆ: 307,
    ΔⲆᐃⵠⵠ: 308,
    ⵠⲆΔⵠⵠ: 309,
    ⲆΔⵠⵠⲆ: 310,
    ⵠⵠΔⵠᐃ: 311,
    ᐃΔΔΔᐃ: 312,
    ⲆᐃⵠⲆΔ: 313,
    ᐃΔᐃᐃᐃᐃΔ: 314,
    ⵠⵠⵠᐃᐃ: 315,
    ⲆⲆᐃᐃᐃᐃᐃ: 316,
    ⵠⲆᐃⵠΔ: 317,
    ᐃⵠⲆⵠⵠⲆⲆ: 318,
    Ⲇⵠⵠⵠⵠ: 319,
    ΔⲆΔΔⲆⵠᐃ: 320,
    ⵠᐃⵠⲆΔΔⵠ: 321,
    ⵠⵠⵠⵠⵠ: 322,
    ⵠⵠΔᐃⲆ: 323,
    ⲆΔΔⵠᐃ: 324,
    ⵠΔᐃⲆⵠ: 325,
    ΔⵠⲆⲆᐃ: 326,
    ΔΔΔᐃⵠ: 327,
    ᐃⵠⲆⵠΔ: 328,
    ᐃᐃⵠⲆⵠ: 329,
    ΔᐃΔᐃⵠ: 330,
    ⲆⵠᐃᐃⲆ: 331,
    ⲆᐃΔⲆᐃ: 332,
    ⵠΔᐃⲆΔ: 333,
    ᐃᐃΔⵠⲆ: 334,
    ΔⲆⵠΔᐃΔⲆ: 335,
    ⲆᐃⲆⵠΔΔⵠ: 336,
    ᐃⲆΔᐃᐃ: 337,
    ΔⵠᐃⲆⲆⵠⲆ: 338,
    ᐃⲆⵠΔⵠ: 339,
    ΔⵠⵠⲆΔ: 340,
    ⵠᐃⲆⵠᐃ: 341,
    ΔΔⲆᐃΔ: 342,
    ᐃⲆⵠⲆⵠ: 343,
    ΔᐃᐃⵠᐃⲆᐃ: 344,
    ⲆᐃⵠΔⵠ: 345,
    ᐃⲆⵠⲆΔ: 346,
    ΔΔΔⲆⵠ: 347,
    ⵠᐃⲆΔⵠ: 348,
    ΔΔᐃⲆⵠ: 349,
    ᐃⵠⵠᐃⲆ: 350,
    ᐃΔᐃᐃᐃ: 351,
    ᐃΔΔΔⲆ: 352,
    ⲆⲆΔⵠⵠᐃΔ: 353,
    ⲆᐃⵠΔΔΔΔ: 354,
    ⲆΔⵠⲆⲆ: 355,
    ⲆⵠⲆⵠⵠⵠⵠ: 356,
    ⵠⲆⵠⵠΔ: 357,
    ᐃⵠΔⲆⵠ: 358,
    ⲆⵠᐃΔⲆⲆΔ: 359,
    ΔⵠΔⲆⵠ: 360,
    ⲆᐃⲆΔⵠ: 361,
    ⲆᐃⲆⲆΔⵠⵠ: 362,
    ⵠΔⲆΔΔΔᐃ: 363,
    ᐃᐃⵠⵠⲆⵠⲆ: 364,
    ΔⵠᐃⲆΔΔΔ: 365,
    ⲆΔᐃΔⵠⵠᐃ: 366,
    ⲆᐃΔᐃᐃⵠᐃ: 367,
    ᐃΔⲆᐃΔΔⲆ: 368,
    ⵠⵠⲆΔΔⲆᐃ: 369,
    ⲆΔΔⲆΔ: 370,
    ΔΔⲆᐃⵠΔⵠ: 371,
    ⵠⲆⵠᐃᐃΔⵠ: 372,
    ⲆᐃᐃΔᐃⵠᐃ: 373,
    ᐃΔᐃⵠᐃ: 374,
    ⲆⲆⲆⲆⵠᐃⵠ: 375,
    ⵠⲆᐃᐃΔⲆⵠ: 376,
    ᐃᐃⵠⲆΔᐃᐃ: 377,
    ⲆⵠᐃⵠᐃⵠⲆ: 378,
    ᐃᐃᐃΔⵠⵠΔ: 379,
    ᐃⲆⵠⲆᐃⲆⵠ: 380,
    ᐃⲆΔᐃⵠΔⵠ: 381,
    ΔᐃᐃᐃΔΔΔ: 382,
    ⵠΔΔⵠΔΔΔ: 383,
    ⵠΔᐃᐃᐃⲆᐃ: 384,
    ⲆⲆⲆⵠᐃᐃⲆ: 385,
    ᐃᐃⵠΔⲆⲆΔ: 386,
    ΔᐃⲆΔⵠᐃᐃ: 387,
    ⲆᐃᐃΔΔⲆⵠ: 388,
    ⲆΔⵠⵠ: 389,
    ⵠᐃᐃⵠᐃ: 390,
    ΔⵠΔⲆⵠⵠⵠ: 391,
    ⵠΔᐃΔᐃⵠⲆ: 392,
    ⵠΔ: 393,
    ΔΔⵠⲆᐃⵠΔ: 394,
    ⵠᐃΔᐃⵠ: 395,
    ΔᐃᐃⵠᐃⵠⲆ: 396,
    ΔᐃⲆΔⲆⲆⲆ: 397,
    ΔⲆΔᐃⵠ: 398,
    ΔⵠⲆⲆΔᐃⵠ: 399,
    ⲆΔⵠⵠΔᐃⵠ: 400,
    ΔᐃΔΔᐃΔΔ: 401,
    ΔⵠⵠΔΔⲆⵠ: 402,
    ⲆᐃⵠⲆⵠᐃⵠ: 403,
    ⲆⲆⵠΔⵠ: 404,
    ΔⵠᐃᐃΔᐃΔ: 405,
    ᐃⲆⵠⲆⲆⲆᐃ: 406,
    ⵠᐃⲆⵠᐃⲆⲆ: 407,
    ᐃΔⲆΔⵠᐃⵠ: 408,
    ⵠᐃᐃⲆⵠΔⲆ: 409,
    ΔⲆᐃᐃᐃ: 410,
    ⵠᐃΔΔⵠΔⵠ: 411,
    ⲆΔΔⵠⲆᐃᐃ: 412,
    ᐃⲆⵠᐃⲆⲆᐃ: 413,
    ΔΔⲆⲆΔⲆΔ: 414,
    ⲆⵠΔⲆⵠⵠΔ: 415,
    ⵠΔⲆⵠΔΔⲆ: 416,
    ΔΔⲆᐃⲆⲆΔ: 417,
    ⲆⲆⵠⲆᐃ: 418,
    ⲆⲆⲆᐃΔⵠΔ: 419,
    ⲆᐃΔᐃΔⲆⵠ: 420,
    ΔⵠΔΔⲆᐃⲆ: 421,
    ⲆⵠᐃΔΔᐃⲆ: 422,
    ⲆⵠⲆⵠΔΔⲆ: 423,
    ⲆⲆⵠⲆⵠΔⲆ: 424,
    ⵠΔⵠⵠⲆΔΔ: 425,
    ᐃΔⵠⲆΔⲆΔ: 426,
    ΔⲆⲆᐃᐃΔΔ: 427,
    ⲆⲆᐃⲆᐃⵠΔ: 428,
    ΔⲆⲆⲆⲆΔΔ: 429,
    ⲆⵠⲆΔᐃⵠⵠ: 430,
    ᐃⵠⲆΔⵠᐃΔ: 431,
    ⵠᐃᐃΔⵠᐃⲆ: 432,
    ⲆᐃΔⲆᐃⵠⵠ: 433,
    ⲆⲆΔΔΔⲆᐃ: 434,
    ⲆΔⲆⲆΔⲆΔ: 435,
    ⵠⵠⵠᐃⵠⲆΔ: 436,
    ⵠᐃⲆⲆΔⲆⲆ: 437,
    ⲆᐃⵠⵠⵠⲆᐃ: 438,
    ᐃⲆⲆᐃᐃⵠΔ: 439,
    ΔΔΔⲆᐃΔᐃ: 440,
    ⵠᐃⵠⲆⲆᐃᐃ: 441,
    ⲆⲆⵠⵠⲆΔⲆ: 442,
    ᐃᐃᐃⵠᐃⲆΔ: 443,
    ᐃᐃⲆΔⲆᐃⲆ: 444,
    ⲆᐃⵠᐃⲆᐃⵠ: 445,
    ⲆᐃΔᐃⵠᐃᐃ: 446,
    ΔΔᐃⵠⲆᐃⲆ: 447,
    ⵠⲆⲆⵠᐃᐃΔ: 448,
    ⵠⵠⵠᐃⲆⲆⵠ: 449,
    ΔⵠᐃᐃΔΔᐃ: 450,
    ⲆᐃΔⲆⲆⵠΔ: 451,
    ᐃⵠΔᐃᐃΔⲆ: 452,
    ⲆⲆⲆⲆΔᐃⵠ: 453,
    ⲆᐃⵠᐃΔⵠⵠ: 454,
    ΔⵠᐃⲆᐃⲆⵠ: 455,
    ⲆⵠᐃⵠⲆⵠⵠ: 456,
    ΔΔᐃᐃΔΔᐃ: 457,
    ᐃⲆⲆᐃΔⵠⲆΔⵠ: 458,
    ⵠΔⵠΔⵠΔᐃ: 459,
    ⵠⵠᐃᐃⵠⵠΔ: 460,
    ᐃⵠⲆᐃⲆⲆᐃ: 461,
    Ⲇᐃᐃᐃⵠⵠⵠ: 462,
    ᐃᐃⵠΔⵠⲆΔ: 463,
    ᐃⲆᐃⵠⲆⵠᐃ: 464,
    ΔⲆⲆΔⵠΔⵠ: 465,
    ΔⵠΔⵠᐃⵠΔ: 466,
    ᐃᐃᐃⲆᐃⲆⲆ: 467,
    ΔⲆΔⲆΔᐃⲆ: 468,
    ΔΔΔⵠⲆⲆⵠ: 469,
    ⵠΔΔᐃᐃΔᐃ: 470,
    ⲆᐃⵠᐃⲆΔᐃ: 471,
    ⵠΔΔⲆⵠΔⵠ: 472,
    ΔᐃⲆⵠⲆΔⲆ: 473,
    ⵠⲆᐃΔⵠΔⲆ: 474,
    ᐃᐃΔⲆΔⲆᐃ: 475,
    ᐃᐃⲆⵠⵠΔᐃ: 476,
    ⵠᐃΔΔⵠᐃᐃ: 477,
    ᐃⵠⲆⵠᐃΔⵠ: 478,
    ΔᐃⲆⵠΔⲆⲆ: 479,
    ⵠⵠⲆΔᐃᐃⲆ: 480,
    ⲆⵠⲆⲆΔⲆⲆ: 481,
    ᐃᐃᐃᐃⲆⵠᐃ: 482,
    ΔⲆᐃᐃⲆⵠⲆ: 483,
    ⲆⵠⵠΔᐃᐃⲆ: 484,
    ΔᐃᐃⲆᐃⲆⲆ: 485,
    ⲆⲆⵠᐃⲆΔⵠ: 486,
    ᐃΔᐃⲆΔΔᐃ: 487,
    ΔᐃΔⲆⵠⲆΔ: 488,
    ⲆⵠᐃᐃΔᐃᐃ: 489,
    ⵠᐃⲆⵠⲆᐃΔ: 490,
    ⵠΔᐃᐃΔᐃᐃ: 491,
    ⵠΔᐃⵠⲆΔΔ: 492,
    ⲆᐃᐃᐃⵠⲆⵠ: 493,
    ⲆΔΔⵠᐃⲆᐃ: 494,
    ⵠᐃΔⵠⲆⲆⵠ: 495,
    ⲆⲆⲆⲆⲆⲆⵠ: 496,
    ᐃⲆⵠΔΔⲆΔ: 497,
    ⲆΔⲆⵠΔᐃΔ: 498,
    ⲆⵠⲆΔⵠⵠⵠ: 499,
    ᐃⵠⲆⲆΔᐃΔ: 500,
    ᐃΔⵠⵠⵠᐃΔ: 501,
    ᐃⵠΔᐃⵠΔΔ: 502,
    ᐃⵠΔᐃⲆᐃⵠ: 503,
    ⵠⵠᐃΔᐃⵠΔ: 504,
    ⲆΔⲆᐃΔⲆᐃ: 505,
    ΔΔⵠⲆⲆΔΔ: 506,
    ⲆΔΔⵠΔⲆᐃ: 507,
    ᐃΔΔΔⵠⲆⲆ: 508,
    ΔⵠⵠΔⵠᐃΔ: 509,
    ⵠⲆΔⲆⵠⲆⲆ: 510,
    ⵠⲆⲆᐃⵠᐃᐃ: 511,
    ⲆⲆⲆΔΔⲆⲆ: 512,
    ᐃᐃΔⵠΔΔⵠ: 513,
    ᐃⵠΔⵠⲆᐃⲆ: 514,
    ᐃⵠⵠΔⲆⲆⵠ: 515,
    ΔΔⲆⵠⵠΔⲆ: 516,
    ⵠⲆⲆⲆⲆᐃⵠ: 517,
    ΔⲆΔΔᐃⲆᐃ: 518,
    ⲆⵠΔᐃᐃᐃᐃ: 519,
    ⲆⵠⲆᐃᐃᐃΔ: 520,
    ⲆΔⵠΔᐃⵠΔ: 521,
    ⵠΔⵠᐃⵠᐃΔ: 522,
    ⵠⲆⵠᐃᐃΔⲆ: 523,
    ᐃⵠΔΔⵠ: 524,
    ΔⲆⲆᐃᐃⵠⵠⲆⵠ: 525,
    ⵠⲆΔⲆᐃΔⲆ: 526,
    ᐃⵠⵠᐃⲆⵠᐃ: 527,
    ᐃⵠⲆΔⵠⵠᐃⲆᐃ: 528,
    ⵠΔⲆᐃᐃⲆᐃ: 529,
    ΔΔⵠΔᐃ: 530,
    ᐃⵠⲆⲆⲆΔⲆ: 531,
    ΔⲆⲆⲆᐃⲆⲆ: 532,
    ⲆⵠᐃΔᐃⵠⵠ: 533,
    ᐃⵠⲆⲆⲆⵠΔ: 534,
    ⲆΔⵠΔΔΔᐃ: 535,
    ⵠⵠΔⵠⵠⵠⵠ: 536,
    ⲆⵠΔΔᐃΔΔ: 537,
    ⵠᐃΔᐃΔⵠⲆ: 538,
    ᐃᐃⲆᐃⵠⲆⲆ: 539,
    ⲆΔᐃΔⲆⵠΔ: 540,
    ⵠᐃⲆΔᐃⵠⲆ: 541,
    ΔᐃᐃⵠⵠᐃΔ: 542,
    ΔⲆⵠⲆᐃΔᐃ: 543,
    ⲆΔΔΔⲆΔᐃ: 544,
    ΔΔᐃΔᐃᐃΔ: 545,
    ΔΔⵠΔⲆᐃΔ: 546,
    ⵠΔⵠⵠΔⲆΔ: 547,
    ᐃΔᐃⵠⵠᐃⲆ: 548,
    ᐃΔⵠⵠᐃΔΔ: 549,
    ΔΔⲆⲆᐃΔΔ: 550,
    ᐃⲆⲆⵠᐃΔⲆ: 551,
    ⲆΔⲆⲆᐃⵠΔ: 552,
    ᐃⲆΔᐃⲆⲆΔ: 553,
    ⲆΔⵠⲆⲆᐃΔ: 554,
    ⲆⵠΔᐃᐃΔⲆ: 555,
    ⵠᐃⵠᐃΔᐃⵠ: 556,
    ⵠⵠΔᐃᐃΔⵠ: 557,
    ᐃΔⲆΔᐃᐃⲆ: 558,
    ᐃΔⵠΔΔᐃΔ: 559,
    ⲆΔⵠᐃᐃᐃⲆ: 560,
    ᐃⲆⵠᐃΔᐃⲆ: 561,
    ⲆΔⵠⲆⵠⵠΔ: 562,
    ⵠⵠΔⲆᐃᐃᐃ: 563,
    ⵠⲆⲆᐃⵠⲆᐃ: 564,
    ᐃᐃΔⵠⲆᐃⲆ: 565,
    ⲆⵠᐃⵠⲆΔᐃ: 566,
    ΔΔᐃⵠⲆⵠⵠ: 567,
    ⵠⵠᐃᐃⲆΔᐃ: 568,
    ᐃⵠⵠⲆⵠⲆⲆ: 569,
    ΔⲆⲆᐃᐃⲆᐃ: 570,
    ᐃⵠΔΔⵠⵠⵠ: 571,
    ⲆΔⵠⵠᐃⲆᐃ: 572,
    ⵠΔΔⵠⵠⵠΔ: 573,
    ⲆⲆΔⲆᐃΔᐃ: 574,
    Δᐃᐃⵠᐃᐃⵠ: 575,
    ⵠᐃⵠΔⵠⵠⲆ: 576,
    ⵠⲆⵠⵠⲆⵠΔ: 577,
    ᐃⲆⲆⵠⲆⲆᐃ: 578,
    ⵠⲆⲆⵠΔⲆⲆ: 579,
    ⵠᐃᐃΔⲆⲆⵠ: 580,
    ⵠΔΔᐃⵠΔΔ: 581,
    ᐃⲆᐃⲆⲆⵠΔΔⵠ: 582,
    ⵠΔᐃΔΔ: 583,
    ⵠΔⵠΔΔΔᐃ: 584,
    ⵠⲆΔᐃⲆᐃΔ: 585,
    ⲆⲆⵠΔⵠᐃⲆᐃΔ: 586,
    ⵠⲆⵠⲆⵠ: 587,
    ᐃⲆⲆΔᐃ: 588,
    ⵠⵠᐃᐃΔᐃΔ: 589,
    ⲆⵠⵠᐃᐃⵠΔ: 590,
    ⵠΔᐃⵠᐃΔⵠ: 591,
    ΔΔᐃⵠᐃⵠΔ: 592,
    ᐃⵠⲆᐃⲆᐃⵠ: 593,
    ᐃⵠⵠΔⲆΔΔ: 594,
    ⲆⲆⲆᐃⲆⵠⵠ: 595,
    ᐃΔᐃᐃⵠⲆⲆ: 596,
    ⵠΔΔⲆᐃᐃΔ: 597,
    ᐃⵠΔΔᐃΔᐃ: 598,
    ⲆⵠⵠΔᐃᐃΔ: 599,
    ᐃⲆΔΔⲆΔⵠ: 600,
    ΔⲆᐃᐃⲆⵠⵠ: 601,
    ⲆⲆⲆⵠⲆⲆᐃ: 602,
    ⲆⲆΔⲆᐃΔΔ: 603,
    ⵠΔⵠⲆⵠᐃΔ: 604,
    ⵠΔⵠⲆⵠΔᐃ: 605,
    ⲆΔⵠⲆⲆΔΔ: 606,
    ⵠⲆⲆΔⲆⵠⵠ: 607,
    ᐃⲆΔⵠⲆⵠⵠ: 608,
    ⲆᐃⵠΔⵠⵠⵠ: 609,
    ᐃⲆΔⵠΔᐃⲆ: 610,
    ⲆⲆⲆΔⲆᐃⵠ: 611,
    ΔⲆⲆⵠᐃⵠⲆ: 612,
    ⲆΔⲆⲆⲆᐃⲆ: 613,
    ΔᐃᐃΔΔΔⵠ: 614,
    ᐃᐃᐃΔⲆΔΔ: 615,
    ⲆᐃᐃΔᐃᐃᐃ: 616,
    ΔᐃⵠᐃⵠⵠⲆ: 617,
    ᐃⲆΔⵠⵠⵠΔ: 618,
    ⵠⵠᐃⵠΔⲆⵠ: 619,
    ⵠᐃΔᐃᐃΔⵠ: 620,
    ⵠΔᐃⵠΔⲆⲆ: 621,
    ⵠⵠⲆⲆⵠⲆΔ: 622,
    ⵠⲆⲆᐃⵠⵠⲆ: 623,
    ᐃⵠⵠⲆΔⲆⵠ: 624,
    ΔΔΔⵠΔᐃⲆ: 625,
    ᐃⲆᐃΔΔΔⵠ: 626,
    ⲆⲆⲆᐃⲆΔⵠ: 627,
    ⵠΔⵠᐃΔΔⵠ: 628,
    ᐃⲆⲆⲆⲆⲆᐃ: 629,
    ΔᐃᐃⲆΔⲆⵠ: 630,
    ⲆⲆⵠΔⵠⵠᐃ: 631,
    ΔᐃᐃⵠᐃⲆⵠ: 632,
    ⵠΔⵠⵠⲆΔⵠ: 633,
    ᐃⵠᐃΔⵠᐃᐃ: 634,
    ΔⲆΔⲆⵠⲆᐃ: 635,
    ⵠΔⵠⵠᐃⲆⲆ: 636,
    ⵠΔᐃΔⵠⵠΔ: 637,
    ⲆⲆⵠⲆⵠⵠⲆ: 638,
    ⲆⵠⲆⵠⵠΔᐃ: 639,
    ᐃᐃΔΔᐃⵠⵠ: 640,
    ⵠⲆᐃⲆᐃΔᐃ: 641,
    ΔⲆᐃᐃΔᐃⵠ: 642,
    ΔᐃⵠⲆΔᐃⲆ: 643,
    ⲆᐃᐃΔⲆᐃⲆ: 644,
    ⲆⲆΔⲆᐃΔΔ: 645,
    ᐃᐃᐃΔⵠᐃⵠ: 646,
    ᐃᐃⲆⲆᐃᐃⵠ: 647,
    ΔᐃⲆⵠⲆⵠΔ: 648,
    ⵠⲆⵠᐃⵠΔⵠ: 649,
    ΔᐃⵠⲆⲆⵠⲆ: 650,
    ᐃⲆᐃⵠΔⵠⵠ: 651,
    ⲆⲆᐃⲆᐃΔⵠ: 652,
    ⵠⲆΔⵠΔᐃⲆ: 653,
    ᐃΔⲆⲆᐃⲆΔ: 654,
    ⲆᐃᐃⵠⵠΔⲆ: 655,
    ⲆΔⵠⲆⵠⲆΔ: 656,
    ΔⲆᐃⲆⲆΔⲆ: 657,
    ΔᐃᐃⲆⵠⲆⲆ: 658,
    ΔⵠⵠᐃᐃΔⲆ: 659,
    ⵠΔⲆΔⵠᐃᐃ: 660,
    ⵠⵠⲆⵠⲆⵠᐃ: 661,
    ΔΔᐃⲆⲆⵠΔ: 662,
    ΔⵠⲆΔΔΔᐃ: 663,
    ⵠⲆⲆΔᐃᐃⲆ: 664,
    ΔⲆᐃⲆⲆᐃⵠ: 665,
    ΔⵠⲆⲆⲆΔⵠ: 666,
    ⵠᐃᐃΔᐃⵠᐃ: 667,
    ⵠΔΔᐃΔⲆⵠ: 668,
    ᐃⵠΔⵠΔᐃᐃ: 669,
    ⲆΔᐃⵠᐃΔΔ: 670,
    ᐃⵠΔᐃⲆΔΔ: 671,
    ᐃⲆΔΔᐃⲆᐃ: 672,
    ⲆᐃᐃᐃΔΔⵠ: 673,
    ΔᐃⵠΔⲆᐃⲆ: 674,
    ᐃⲆⲆⲆΔⲆΔ: 675,
    ⲆⲆⲆᐃΔᐃΔ: 676,
    ᐃⵠΔⵠⵠΔΔᐃⲆ: 677,
    ⵠⲆᐃⵠⲆⲆᐃ: 678,
    ⵠΔⲆΔᐃⵠⵠ: 679,
    ⵠⵠΔΔΔΔⲆ: 680,
    ⲆⲆΔᐃⲆᐃΔ: 681,
    ⵠΔⲆᐃΔⵠᐃᐃⲆ: 682,
    POINTS: 683,
    ᐃᐃⵠⲆΔΔᐃ: 684,
    ᐃΔΔᐃᐃⵠⵠ: 685,
    ⵠᐃᐃᐃⲆΔⵠ: 686,
    ⵠΔⵠⵠᐃⵠΔ: 687,
    ⵠⲆⲆⵠΔΔⵠ: 688,
    ⲆΔΔⵠΔⵠⲆ: 689,
    ΔⲆᐃⵠⵠⵠⲆ: 690,
    ⲆΔⵠΔᐃⲆΔ: 691,
    ⲆᐃⵠΔⲆⵠᐃ: 692,
    ⵠⵠⵠⵠᐃᐃΔ: 693,
    ᐃⲆⲆⵠⲆⵠΔ: 694,
    ⲆⲆΔⲆΔΔⵠ: 695,
    ⵠⲆΔⲆΔΔᐃ: 696,
    ΔΔᐃⲆⲆΔⵠ: 697,
    ᐃⵠᐃⵠᐃⵠᐃ: 698,
    ΔⵠⵠⲆΔⵠⲆ: 699,
    ᐃᐃⲆⲆΔⲆⲆ: 700,
    ⲆⲆⵠⲆᐃΔΔ: 701,
    ⲆⲆⵠᐃⵠⵠⲆ: 702,
    ⵠᐃᐃᐃᐃΔⲆ: 703,
    ᐃⲆⲆⲆⲆΔⵠ: 704,
    ⲆᐃⲆᐃⲆᐃⵠ: 705,
    ΔΔᐃⲆᐃⲆᐃ: 706,
    ⵠⲆⲆⲆᐃᐃΔ: 707,
    ⵠᐃΔⵠΔᐃⵠ: 708,
    ⲆⵠᐃⲆⲆᐃᐃ: 709,
    ᐃᐃⲆⵠΔⲆᐃ: 710,
    ⵠᐃᐃⵠΔⵠᐃ: 711,
    ᐃⵠⲆᐃᐃⵠⲆ: 712,
    ⵠΔⵠᐃⵠᐃᐃ: 713,
    ᐃᐃⲆⲆⲆΔΔ: 714,
    ᐃⲆⲆΔⵠΔⲆ: 715,
    ᐃΔⲆⲆⲆⵠⵠ: 716,
    ΔΔᐃᐃᐃΔᐃ: 717,
    ΔⲆⲆⵠΔⵠᐃ: 718,
    ⵠⲆⲆⵠΔᐃΔ: 719,
    ᐃⵠᐃⵠⲆᐃⲆ: 720,
    ᐃΔⲆⵠⲆΔᐃ: 721,
    ΔⵠᐃΔⵠⵠⵠ: 722,
    ΔⵠⲆᐃⲆⵠΔ: 723,
    ⵠⵠⵠΔΔΔᐃ: 724,
    ΔΔⵠⵠⲆⲆΔ: 725,
    ᐃⵠΔᐃᐃⲆⲆ: 726,
    ⲆⲆᐃⵠΔⲆᐃ: 727,
    ΔᐃⵠᐃᐃΔᐃ: 728,
    ΔΔᐃⵠⲆⲆΔ: 729,
    ⵠᐃΔΔΔⵠⵠ: 730,
    ⲆᐃⲆⲆⲆⵠΔ: 731,
    ᐃΔΔᐃᐃⲆΔ: 732,
    ΔΔⵠⲆᐃΔⲆ: 733,
    ⲆΔⵠⲆᐃⵠᐃ: 734,
    ᐃⵠΔⵠⲆⲆΔ: 735,
    ⵠᐃΔΔΔᐃᐃ: 736,
    ⵠⲆΔⵠᐃΔⲆ: 737,
    ΔᐃΔΔΔᐃΔ: 738,
    ᐃΔⲆⵠⲆᐃᐃ: 739,
    ⲆΔⲆΔⵠⲆⲆ: 740,
    ⲆΔᐃⲆᐃⵠⵠ: 741,
    ΔΔⵠⵠⵠΔⵠ: 742,
    ΔᐃⲆΔᐃᐃΔ: 743,
    ⲆⲆⵠⲆⲆⲆⲆ: 744,
    ᐃᐃⵠᐃⵠⲆΔ: 745,
    ᐃⲆᐃΔⲆⲆⵠ: 746,
    ⲆᐃΔᐃⲆᐃΔ: 747,
    ΔⵠⲆΔΔⵠᐃ: 748,
    ⲆΔᐃᐃᐃⲆⵠ: 749,
    ΔⲆⲆΔⲆⵠᐃ: 750,
    ΔΔⲆⵠᐃⵠⲆ: 751,
    ⲆΔΔᐃΔᐃⲆ: 752,
    ΔΔⲆⵠᐃⲆᐃ: 753,
    ⲆᐃΔⲆΔⵠⲆ: 754,
    ΔⲆⲆⲆⵠⲆⵠ: 755,
    ᐃᐃΔᐃᐃⲆⵠ: 756,
    ⵠΔⲆᐃᐃⲆⵠ: 757,
    ᐃΔΔⵠⵠΔⲆ: 758,
    ⵠⵠⲆⵠᐃⲆⵠ: 759,
    ΔⲆⲆΔⲆᐃⵠ: 760,
    ⲆᐃⲆΔⲆⵠⲆ: 761,
    ⲆⵠΔⵠⵠᐃᐃ: 762,
    ⵠΔᐃΔⵠᐃΔ: 763,
    ⵠⲆⲆΔᐃⲆΔ: 764,
    ⲆⲆΔΔⲆⲆΔ: 765,
    ⵠᐃᐃⲆᐃⲆᐃ: 766,
    ⵠⵠⲆⲆⲆΔᐃ: 767,
    ΔⵠΔⵠΔⵠᐃ: 768,
    ⵠⵠⵠⵠⵠΔⵠ: 769,
    ⵠⲆⲆⲆΔᐃΔ: 770,
    ΔⲆᐃⲆΔⲆΔ: 771,
    ᐃΔᐃΔⵠⲆᐃ: 772,
    ΔⵠⵠⲆᐃᐃᐃ: 773,
    ⵠᐃⲆΔⲆΔⵠ: 774,
    ⲆᐃΔⲆΔⲆᐃ: 775,
    ⲆᐃᐃΔⲆⲆⵠ: 776,
    ⵠΔⵠⵠⲆⵠΔ: 777,
    ⵠᐃⵠΔᐃⲆᐃ: 778,
    ⲆᐃⵠⲆΔᐃΔ: 779,
    ΔΔᐃⲆⲆⲆΔ: 780,
    ⲆⵠⵠⲆΔⲆⵠ: 781,
    ΔᐃⵠⲆⵠⲆᐃ: 782,
    ⲆⲆⲆΔΔⲆⵠ: 783,
    ⵠⵠΔⵠⲆΔΔ: 784,
    ᐃᐃⲆΔⲆᐃⵠ: 785,
    ᐃᐃⵠⵠⵠᐃᐃ: 786,
    ᐃⲆᐃⵠᐃⲆᐃ: 787,
    ᐃⵠΔⲆⵠⲆᐃ: 788,
    ΔᐃΔⵠΔᐃΔ: 789,
    ᐃᐃⲆⲆΔⲆⵠ: 790,
    ⲆⵠᐃⵠⲆΔⵠ: 791,
    ⵠᐃⵠⵠⵠΔⵠ: 792,
    ⲆΔᐃⵠⵠΔⲆ: 793,
    ᐃΔᐃΔᐃΔⵠ: 794,
    ⲆᐃⵠᐃⵠΔΔ: 795,
    ᐃΔⵠΔᐃΔΔ: 796,
    ⲆⲆΔΔⲆΔᐃ: 797,
    ⲆⵠΔⲆᐃᐃᐃ: 798,
    ΔⵠᐃᐃⲆᐃⵠ: 799,
    ΔΔⲆⵠⵠᐃᐃ: 800,
    ΔⵠΔⵠᐃΔᐃ: 801,
    ⵠⵠᐃⵠⲆⲆᐃ: 802,
    ΔⲆΔⲆΔᐃⵠ: 803,
    ᐃΔⵠⲆⵠΔⵠ: 804,
    Ⲇᐃⵠᐃᐃᐃᐃ: 805,
    ᐃᐃΔⵠⲆⵠᐃ: 806,
    ᐃⲆΔⵠΔᐃⵠ: 807,
    ᐃⲆᐃΔΔⵠΔ: 808,
    ⵠⵠⲆΔⲆᐃⲆ: 809,
    ΔᐃΔⲆᐃⵠΔ: 810,
    ᐃᐃⲆᐃⲆᐃⲆ: 811,
    ᐃᐃᐃⲆⲆⲆⲆⵠΔ: 812,
    ⲆᐃΔⵠⲆΔΔ: 813,
    ⲆⵠⵠⵠᐃᐃⵠⲆᐃ: 814,
    ⵠΔⲆᐃⵠⵠΔ: 815,
    ᐃᐃᐃΔⵠⵠⵠΔⲆ: 816,
    ⲆⲆⲆⵠΔⵠⵠⲆⲆ: 817,
    ⲆⵠⵠᐃⲆⲆⲆⵠⵠ: 818,
    ΔᐃⵠᐃⲆΔⲆᐃⵠ: 819,
    ⲆⲆⲆⵠΔᐃⵠᐃⵠ: 820,
    ⲆΔⲆᐃᐃⲆᐃ: 821,
    ⲆᐃΔΔᐃ: 822,
    ⵠᐃⲆⲆΔⲆΔ: 823,
    ᐃⵠΔⵠΔⲆⲆ: 824,
    ᐃⲆⵠⵠⲆⵠΔ: 825,
    ⲆⵠⵠⵠⲆΔᐃΔᐃ: 826,
    ΔⵠᐃᐃⲆΔⵠ: 827,
    ⲆᐃⲆΔⲆⵠⵠ: 828,
    ΔᐃⲆⵠⵠᐃⲆ: 829,
    ⲆⵠΔⲆᐃΔⲆ: 830,
    ᐃᐃᐃⵠⵠⲆⲆ: 831,
    ᐃᐃⲆⲆⵠᐃⲆ: 832,
    ⵠᐃⵠⲆⵠᐃᐃ: 833,
    ΔⲆᐃⲆΔᐃⲆ: 834,
    ΔⲆᐃᐃᐃᐃⵠ: 835,
    ⲆⵠⲆᐃᐃⵠⵠ: 836,
    ⵠᐃᐃⲆⵠⲆⲆ: 837,
    ΔⲆΔΔᐃ: 838,
    ᐃᐃΔⲆⲆ: 839,
    ⲆⵠΔΔᐃⲆᐃ: 840,
    ⵠⲆᐃΔⵠΔⲆⲆⲆ: 841,
    ᐃⵠⲆⵠⵠᐃᐃ: 842,
    ⲆⲆⵠⲆⲆⵠᐃ: 843,
    ⵠⵠᐃΔⵠⵠⵠ: 844,
    ⲆΔⵠⵠⲆᐃⵠ: 845,
    ΔⲆⵠⵠⲆⲆΔ: 846,
    ᐃⲆⵠᐃΔⵠᐃ: 847,
    ΔⲆⲆΔⲆΔⵠ: 848,
    ⵠⲆΔᐃⵠᐃⵠ: 849,
    ᐃⵠⲆⲆΔΔⲆ: 850,
    ⲆΔⵠⵠΔᐃᐃ: 851,
    ΔⵠⵠⲆⲆⲆⵠ: 852,
    ΔⵠΔⲆⵠⲆΔ: 853,
    ΔⲆⲆᐃᐃΔᐃ: 854,
    ᐃⵠΔΔᐃⲆᐃ: 855,
    ᐃⵠⲆᐃᐃ: 856,
    ⵠⵠᐃΔⲆⵠⵠ: 857,
    ⲆΔᐃⲆⵠᐃΔ: 858,
    ᐃᐃΔᐃⲆΔᐃ: 859,
    ⵠΔⵠᐃΔⵠᐃ: 860,
    ⲆⵠⲆᐃⲆᐃΔ: 861,
    ⲆⲆⲆΔⵠⲆᐃ: 862,
    ⲆⲆⲆⵠⲆⲆΔ: 863,
    ⲆⲆⵠⲆΔΔⲆ: 864,
    ⵠᐃⵠⲆΔⵠⵠ: 865,
    ⵠⵠⵠⲆⵠⲆⵠ: 866,
    ᐃΔⵠΔᐃΔⵠ: 867,
    ΔᐃᐃΔΔⵠⲆ: 868,
    ⵠᐃΔⲆⲆⲆⵠ: 869,
    ⲆᐃⲆⵠⲆⵠΔ: 870,
    ⵠΔⵠⵠⵠΔⵠ: 871,
    ᐃⵠΔΔᐃⵠᐃ: 872,
    ⵠᐃⲆᐃⲆⲆΔ: 873,
    ⵠⵠⵠⵠΔᐃⵠ: 874,
    ΔᐃⲆᐃⲆⲆⲆ: 875,
    ΔΔⲆⲆᐃᐃΔ: 876,
    ᐃⲆⲆⲆⲆⲆⲆ: 877,
    ⲆⲆⵠᐃΔⵠᐃ: 878,
    ᐃᐃⲆᐃⲆⵠᐃ: 879,
    ᐃⵠⵠΔΔⵠᐃ: 880,
    ΔⵠⵠⲆⵠᐃΔ: 881,
    ΔⲆⵠΔⲆⲆⵠ: 882,
    ⵠᐃⲆᐃΔΔⲆ: 883,
    ⵠΔΔᐃΔΔⲆ: 884,
    ΔⲆΔΔΔⲆᐃ: 885,
    ⲆⲆⵠᐃⵠᐃⵠ: 886,
    ⲆⲆᐃⲆᐃⵠⵠ: 887,
    ⲆⵠⲆΔᐃΔᐃ: 888,
    ΔΔᐃΔᐃⲆⵠ: 889,
    ΔΔⲆⵠΔᐃᐃ: 890,
    ΔⲆᐃᐃΔΔᐃ: 891,
    ᐃᐃⲆⵠⲆ: 892,
    ⲆⵠᐃⵠᐃΔᐃ: 893,
    ΔⵠΔΔⵠᐃᐃ: 894,
    ⵠᐃΔΔⲆ: 895,
    ⵠΔⵠᐃⵠΔΔⵠᐃ: 896,
    ⲆⲆⲆΔⵠΔⵠ: 897,
    ΔΔⵠⵠⲆ: 898,
    ᐃᐃΔᐃⵠᐃᐃ: 899,
    ⲆΔᐃⵠᐃⵠΔ: 900,
    ⵠⲆⲆΔᐃⲆⵠ: 901,
    ᐃᐃΔΔᐃᐃᐃ: 902,
    ⵠΔΔΔⵠⲆⵠ: 903,
    ⵠⲆᐃΔⲆΔⵠ: 904,
    ΔᐃⵠⵠᐃᐃⲆ: 905,
    ᐃΔᐃⵠⵠⵠΔ: 906,
    ᐃⲆⵠᐃΔᐃΔ: 907,
    ⵠΔΔᐃⲆⲆΔ: 908,
    ᐃⲆΔⲆⵠΔΔ: 909,
    ⲆⵠᐃⲆⲆⵠⵠ: 910,
    ᐃᐃⵠΔⵠΔⲆ: 911,
    ᐃⲆᐃⲆⵠ: 912,
    ΔΔⵠⵠΔ: 913,
    ΔⵠⲆⲆⲆ: 914,
    ⲆⲆᐃⵠΔⵠⲆ: 915,
    ⵠⲆΔᐃΔΔᐃ: 916,
    ᐃΔⵠΔᐃⲆⵠ: 917,
    ⲆᐃⵠⲆⲆᐃⲆ: 918,
    ⵠΔⵠⲆᐃᐃⲆ: 919,
    ⵠⵠⲆⲆΔᐃΔ: 920,
    ⲆⵠᐃⲆᐃᐃᐃ: 921,
    ᐃⵠΔΔⵠΔᐃ: 922,
    ⲆⲆⵠᐃΔⵠΔ: 923,
    ⵠⲆⵠᐃΔΔⵠ: 924,
    ⲆⲆᐃᐃΔⵠᐃ: 925,
    ⵠⵠΔⲆⲆⲆΔ: 926,
    ⵠᐃⲆΔⲆⲆᐃ: 927,
    ΔⵠⲆᐃΔⲆⲆ: 928,
    ⵠⲆᐃⵠᐃⲆⵠ: 929,
    ΔΔⲆᐃΔⵠΔ: 930,
    ⲆⲆᐃᐃΔΔⲆ: 931,
    ⲆⲆⲆΔᐃΔⲆ: 932,
    ᐃⵠᐃΔⲆᐃΔ: 933,
    ⲆⵠΔᐃⵠⵠᐃ: 934,
    ⲆⲆⵠΔᐃⲆΔ: 935,
    ⵠᐃⲆᐃᐃᐃΔ: 936,
    ⲆΔΔΔⲆᐃΔ: 937,
    ΔⲆΔⲆΔⵠⲆ: 938,
    ⲆᐃⵠᐃⲆⵠΔ: 939,
    ᐃΔΔΔᐃⵠᐃ: 940,
    ᐃⵠⵠᐃⲆⲆⲆ: 941,
    ᐃΔⲆΔᐃΔⵠ: 942,
    ⵠᐃⵠᐃⵠⲆⵠ: 943,
    ΔⲆⵠⵠΔⲆⲆ: 944,
    ⲆⵠⲆⲆⲆᐃⲆ: 945,
    ⲆⵠᐃΔΔᐃⵠ: 946,
    ⵠⲆⵠⵠΔΔⵠ: 947,
    ΔΔᐃᐃΔᐃⲆ: 948,
    ⲆⵠⲆⲆΔᐃⲆ: 949,
    ᐃⵠⵠΔᐃΔⲆ: 950,
    ᐃⵠⵠᐃⲆᐃΔ: 951,
    ⲆⵠΔᐃᐃⲆΔ: 952,
    ⲆᐃᐃᐃᐃⵠΔ: 953,
    ΔᐃⲆᐃᐃⵠΔ: 954,
    ΔᐃⲆⲆΔⵠΔ: 955,
    ⵠᐃⵠΔⲆⲆᐃ: 956,
    ⵠᐃⲆⲆᐃⲆⵠ: 957,
    ᐃΔⵠΔΔⵠⲆ: 958,
    ⵠᐃⲆⲆⲆΔⵠ: 959,
    ⲆⵠⲆⵠⲆⲆⲆ: 960,
    ΔΔⲆΔΔⵠⲆ: 961,
    ⲆⲆⵠΔⲆΔⲆ: 962,
    ⲆⵠΔΔᐃΔⵠ: 963,
    ΔΔⲆⵠⵠⲆⲆ: 964,
    ⵠⵠⵠⲆΔⵠᐃ: 965,
    ⵠⵠΔΔΔⲆΔ: 966,
    ᐃⵠΔⲆΔᐃⵠ: 967,
    ⲆΔⵠⲆᐃᐃᐃ: 968,
    ⲆᐃⵠⵠΔⵠΔ: 969,
    ⵠΔΔⲆⵠⵠΔⵠΔ: 970,
    ⲆΔⲆΔΔⵠⲆ: 971,
    ΔΔΔⵠΔⲆΔ: 972,
    ⲆⵠⲆⵠⲆⵠᐃ: 973,
    ᐃⵠΔΔⲆⵠΔ: 974,
    ΔᐃᐃᐃⲆⲆⲆ: 975,
    ⵠᐃⵠⲆⲆᐃΔ: 976,
    ⲆᐃᐃᐃⲆΔᐃ: 977,
    ⵠΔΔΔⲆⵠⲆ: 978,
    ᐃΔⵠⲆⲆΔⵠ: 979,
    ΔᐃⵠᐃΔⲆᐃ: 980,
    ⵠΔΔⲆⲆⵠⵠ: 981,
    ᐃᐃⵠᐃⲆⲆᐃ: 982,
    ᐃᐃⲆⲆΔⲆΔ: 983,
    ᐃⲆᐃⲆⵠΔⲆ: 984,
    ΔⵠⵠᐃΔΔⲆ: 985,
    ΔⲆᐃᐃΔⲆᐃ: 986,
    ⲆᐃΔⵠΔᐃⵠ: 987,
    ᐃⲆⲆⵠᐃΔᐃ: 988,
    ᐃⲆⵠᐃΔⲆᐃ: 989,
    ᐃᐃⵠⵠⵠⲆⲆ: 990,
    ⵠⲆⲆᐃⵠΔⲆ: 991,
    ⲆΔⵠΔⲆⵠⵠ: 992,
    ⲆᐃⵠⵠΔΔⵠ: 993,
    ⲆⵠΔᐃⵠΔᐃ: 994,
    ⲆⵠⲆᐃΔⵠⵠ: 995,
    ⵠⵠᐃᐃⲆⲆⲆ: 996,
    ΔⲆⲆⵠⵠⲆΔ: 997,
    ⵠᐃΔⲆⵠᐃⵠ: 998,
    ΔΔΔΔᐃⵠΔ: 999,
    ⵠᐃΔⵠⲆⲆᐃ: 1000,
    ⵠΔᐃⵠᐃⵠᐃ: 1001,
    ⲆΔΔⲆⲆⵠΔ: 1002,
    ΔⵠⵠΔⲆᐃΔ: 1003,
    ⵠⵠⵠⵠⵠⵠΔ: 1004,
    ᐃᐃⲆΔΔᐃⲆ: 1005,
    ᐃⲆⲆᐃΔⲆΔ: 1006,
    ⲆⲆⵠᐃΔⵠⲆ: 1007,
    ⵠᐃΔΔⲆⲆⵠ: 1008,
    ᐃΔΔΔⲆΔⲆ: 1009,
    ΔΔΔᐃΔⲆⵠ: 1010,
    ⵠⲆⵠᐃᐃⵠᐃ: 1011,
    ΔᐃⲆⲆⲆᐃⵠ: 1012,
    ΔᐃᐃΔᐃⲆⵠ: 1013,
    ΔⲆΔⵠⵠᐃⲆ: 1014,
    ΔⵠᐃΔΔⲆᐃ: 1015,
    ΔᐃᐃⵠΔⵠⲆ: 1016,
    ᐃⲆⵠⲆΔⲆᐃ: 1017,
    ΔΔᐃⲆⵠⲆⲆ: 1018,
    ⵠⵠΔⲆΔⵠΔ: 1019,
    ᐃⲆⵠⲆⵠᐃΔ: 1020,
    ᐃᐃⲆΔⵠΔᐃ: 1021,
    ᐃᐃⵠⵠⵠᐃⲆ: 1022,
    ᐃΔⵠⲆΔⵠⲆ: 1023,
    ⲆⵠⲆΔΔⲆⲆ: 1024,
    ⵠⵠᐃⲆⵠⲆⵠ: 1025,
    ⵠⲆⲆᐃΔᐃⵠ: 1026,
    ⲆⵠᐃᐃⲆΔⲆ: 1027,
    ⲆⵠⲆᐃᐃⲆᐃ: 1028,
    ⵠΔⵠΔΔᐃΔ: 1029,
    ΔΔⲆᐃⲆΔᐃ: 1030,
    ⲆⵠⵠΔᐃⲆΔ: 1031,
    ᐃⲆᐃⵠⲆᐃⲆ: 1032,
    ᐃᐃⲆᐃⲆΔᐃ: 1033,
    ⲆⲆⵠⵠⲆᐃΔ: 1034,
    ᐃⵠⲆⲆⵠᐃΔ: 1035,
    ΔΔᐃⲆᐃᐃΔ: 1036,
    ᐃⵠᐃΔᐃⵠᐃ: 1037,
    ᐃⲆⵠⵠⵠⲆᐃ: 1038,
    ΔΔⲆᐃᐃⲆⲆ: 1039,
    ⵠⲆΔⵠⵠΔⵠ: 1040,
    ΔᐃΔΔΔⲆⲆ: 1041,
    ΔⵠⲆᐃᐃ: 1042,
    ⵠⵠⲆΔᐃᐃⵠ: 1043,
    ᐃⲆᐃᐃⲆᐃᐃ: 1044,
    ⵠⲆΔᐃΔ: 1045,
    ⲆᐃⵠᐃΔᐃᐃ: 1046,
    ⲆⵠⵠᐃᐃᐃΔ: 1047,
    ΔᐃⵠᐃⲆΔΔ: 1048,
    ⲆΔᐃᐃⲆΔΔ: 1049,
    ⲆᐃΔᐃⲆᐃᐃ: 1050,
    ᐃᐃⲆⵠΔ: 1051,
    ⵠⲆⵠⵠᐃΔⵠ: 1052,
    ᐃΔΔΔΔᐃⵠⵠᐃ: 1053,
    ⲆⵠⲆⵠⲆⲆⵠΔᐃ: 1054,
    ᐃᐃΔⲆᐃⲆᐃⲆⵠ: 1055,
    ⵠᐃⲆΔⲆᐃΔᐃⲆ: 1056,
    ΔᐃᐃⵠΔᐃⲆ: 1057,
    ⲆⵠⲆᐃᐃΔⲆ: 1058,
    ΔᐃⲆΔⲆⲆᐃ: 1059,
    ⲆᐃⵠᐃⵠⵠⲆ: 1060,
    ⵠᐃⲆⵠⵠⵠⵠ: 1061,
    ⲆΔⵠⲆⵠⲆᐃ: 1062,
    ⵠⵠⲆΔΔⵠⵠ: 1063,
    ΔΔᐃΔⲆⵠᐃ: 1064,
    ᐃᐃΔᐃⵠⲆⲆ: 1065,
    ᐃⵠᐃΔⵠⵠⵠ: 1066,
    ⵠΔΔΔᐃ: 1067,
    ⵠᐃⵠΔᐃ: 1068,
    ΔⲆΔⵠᐃⲆⵠ: 1069,
    ⲆΔⵠᐃⲆΔⵠ: 1070,
    ᐃⲆᐃⲆⲆⲆΔ: 1071,
    ⵠᐃΔⵠΔⲆⵠ: 1072,
    ⲆᐃᐃⲆᐃⵠᐃ: 1073,
    ⲆΔΔᐃⵠⲆΔ: 1074,
    ᐃΔᐃᐃᐃΔΔ: 1075,
    ΔᐃΔⵠΔᐃⵠ: 1076,
    ⵠΔΔⵠᐃⵠⲆ: 1077,
    ⵠⲆⵠⲆΔⵠᐃ: 1078,
    ⲆⲆⵠⵠⲆⲆⲆ: 1079,
    ⲆⲆⲆⵠᐃⲆΔ: 1080,
    ⵠⲆΔⵠΔⲆᐃᐃᐃ: 1081,
    ΔⵠⲆᐃᐃᐃⵠΔᐃ: 1082,
    ⵠⲆⵠⲆᐃⵠᐃ: 1083,
    ⲆᐃᐃⲆᐃΔⲆ: 1084,
    ΔᐃΔⵠΔΔᐃ: 1085,
    ⲆᐃΔⲆΔⵠΔ: 1086,
    ⲆⲆᐃⵠᐃⲆⲆ: 1087,
    ΔⲆᐃΔⲆᐃᐃ: 1088,
    ⵠⵠᐃⲆᐃᐃΔ: 1089,
    ΔⵠΔᐃΔΔΔ: 1090,
    ᐃⲆⲆΔⵠΔΔ: 1091,
    ⲆⵠⲆⲆⵠᐃΔ: 1092,
    ⵠΔΔⲆΔΔΔ: 1093,
    ⵠΔⲆΔⵠⲆⵠ: 1094,
    ⵠⲆΔⲆⲆᐃⵠ: 1095,
    ᐃⵠⲆⵠΔⵠᐃ: 1096,
    ⵠⵠᐃᐃⵠⲆⵠ: 1097,
    ⵠⵠΔΔᐃᐃᐃ: 1098,
    ᐃᐃⲆⵠⲆⲆⲆ: 1099,
    ⵠᐃⲆΔⵠᐃⲆ: 1100,
    ᐃⲆⲆᐃᐃΔᐃΔΔ: 1101,
    ᐃⵠᐃᐃⵠᐃⲆ: 1102,
    ΔⲆⲆᐃⲆ: 1103,
    ᐃⲆᐃΔⲆΔΔⵠΔ: 1104,
    ᐃᐃⵠᐃⵠⵠᐃⵠΔ: 1105,
    ⲆⲆⲆⵠⲆᐃⵠⲆⲆ: 1106,
    ⲆⵠᐃⲆⵠⲆⲆᐃΔ: 1107,
    ⲆΔⲆⲆΔᐃⲆ: 1108,
    ⵠⵠᐃᐃᐃⵠⵠ: 1109,
    ⵠᐃᐃᐃⵠⵠᐃ: 1110,
    ⲆᐃⲆⲆⵠΔΔ: 1111,
    ⲆᐃⲆᐃᐃΔⵠ: 1112,
    ⲆⲆᐃᐃΔᐃⲆⲆΔ: 1113,
    ᐃΔΔⲆⵠⵠⵠ: 1114,
    ΔⲆⵠΔⲆΔΔ: 1115,
    ⵠⲆⵠⵠⲆᐃΔ: 1116,
    ⵠⲆΔⲆⲆⵠⵠ: 1117,
    ΔⵠⵠⵠᐃⵠΔ: 1118,
    ᐃᐃᐃⲆⲆΔⲆ: 1119,
    ᐃᐃᐃⵠⲆⵠᐃ: 1120,
    ⲆⲆⲆⲆⲆ: 1121,
    ⲆΔΔⲆⵠⵠⲆⲆⲆ: 1122,
    ⵠⲆᐃᐃᐃᐃΔ: 1123,
    ᐃᐃⲆⲆᐃᐃⲆ: 1124,
    ⵠᐃⲆᐃΔⲆⵠ: 1125,
    ⵠΔᐃⲆⲆⵠⵠ: 1126,
    ᐃΔⲆΔⵠᐃⲆ: 1127,
    ⵠᐃᐃΔⵠⲆⵠ: 1128,
    ᐃᐃⲆⵠΔᐃⵠ: 1129,
    ᐃΔⲆⵠⵠⲆⲆ: 1130,
    ⲆᐃⵠⲆᐃⵠⵠ: 1131,
    ⵠⲆᐃⲆⵠⲆⵠ: 1132,
    ⵠΔΔΔⵠΔⵠ: 1133,
    ΔΔᐃΔΔⲆΔ: 1134,
    ᐃΔᐃⵠⵠⲆΔ: 1135,
    ⵠΔⵠⵠΔⲆᐃ: 1136,
    ΔⲆⲆΔᐃΔᐃ: 1137,
    ΔᐃΔΔᐃⲆΔ: 1138,
    ᐃᐃⲆⵠᐃᐃⵠ: 1139,
    ᐃΔⲆⵠⲆΔΔ: 1140,
    ⵠᐃΔΔᐃΔᐃ: 1141,
    ΔⲆΔⵠᐃᐃⲆ: 1142,
    ΔᐃᐃΔⵠⵠΔ: 1143,
    ΔⵠᐃᐃⲆⵠᐃ: 1144,
    ΔΔⲆⵠΔⲆᐃ: 1145,
    ⵠΔⲆΔⵠΔΔ: 1146,
    ΔΔⵠⵠᐃᐃΔ: 1147,
    ⲆᐃΔⵠᐃᐃΔ: 1148,
    ⲆⵠΔⵠΔᐃΔ: 1149,
    ΔᐃⵠⲆⲆᐃΔ: 1150,
    ΔΔⵠΔΔⲆⵠ: 1151,
    ᐃᐃⵠΔⲆⵠⲆ: 1152,
    ᐃΔΔΔΔⲆᐃ: 1153,
    ⵠᐃⵠΔΔΔⲆ: 1154,
    ⲆΔⲆΔΔΔⵠ: 1155,
    ⲆΔᐃᐃⵠⵠᐃ: 1156,
    ᐃⲆΔΔⲆⵠᐃ: 1157,
    ᐃΔⵠᐃⵠᐃⵠ: 1158,
    ⵠΔΔΔⵠᐃⵠ: 1159,
    ΔⵠⵠⵠⵠΔⵠ: 1160,
    ⵠⲆΔⲆⲆΔᐃ: 1161,
    ᐃⲆΔⲆⵠΔⵠ: 1162,
    ⲆⵠΔΔⵠ: 1163,
    ΔⲆⲆᐃⲆⲆⵠ: 1164,
    ⲆΔⲆⲆⲆΔᐃ: 1165,
    ⵠⲆΔΔΔⵠⵠ: 1166,
    ΔΔⲆⲆᐃᐃᐃ: 1167,
    ⲆⵠⲆΔⲆᐃΔ: 1168,
    ΔⵠⲆⵠᐃⵠᐃ: 1169,
    ᐃᐃᐃᐃΔⵠᐃ: 1170,
    ⲆⲆᐃᐃΔΔⵠ: 1171,
    ⲆΔΔⲆⲆᐃⵠ: 1172,
    ⵠⵠΔΔⲆΔᐃ: 1173,
    ᐃⵠΔΔᐃΔΔ: 1174,
    ⲆⵠⲆⵠⵠᐃⲆ: 1175,
    ⲆΔⵠⵠⵠⲆⲆ: 1176,
    ⲆⲆⲆΔᐃⲆⲆ: 1177,
    ᐃⵠΔᐃΔᐃᐃ: 1178,
    ⵠᐃⲆΔⵠᐃΔ: 1179,
    ⲆⲆⲆⵠᐃΔΔ: 1180,
    ΔΔⲆⵠᐃᐃᐃ: 1181,
    ᐃⵠⵠⲆⵠᐃᐃ: 1182,
    ΔΔⲆΔΔⲆⵠ: 1183,
    ⵠᐃⲆⲆᐃᐃⲆ: 1184,
    ΔᐃᐃᐃᐃᐃⲆ: 1185,
    ⵠⲆΔⲆⵠᐃⲆ: 1186,
    ᐃⲆⵠⲆᐃᐃⵠ: 1187,
    ᐃᐃⲆΔⲆⵠΔ: 1188,
    ⵠᐃⵠᐃΔⵠᐃ: 1189,
    ᐃᐃΔᐃᐃᐃⵠⲆⵠ: 1190,
    ΔⲆⵠΔⲆⵠΔΔⲆ: 1191,
    ᐃⲆⲆⲆⵠΔⵠⵠⲆ: 1192,
    ⵠⵠⲆᐃⵠᐃⵠᐃⵠ: 1193,
    ⲆᐃⲆΔΔΔΔ: 1194,
    ΔᐃΔⲆⲆᐃᐃ: 1195,
    ⵠⲆᐃΔⵠ: 1196,
    ΔΔⲆⲆᐃᐃⵠ: 1197,
    ᐃΔⵠⲆⲆᐃΔ: 1198,
    ΔᐃⲆⵠⲆᐃⵠ: 1199,
    ⲆᐃⲆΔᐃᐃᐃ: 1200,
    ⲆⲆⵠⵠⵠⲆⲆ: 1201,
    ΔᐃⵠΔΔΔⲆ: 1202,
    ΔⵠᐃⲆⲆΔⲆ: 1203,
    ⵠΔⵠⵠⵠᐃᐃ: 1204,
    ΔΔⵠΔⵠⵠⵠ: 1205,
    ΔⵠⲆᐃᐃⲆⵠ: 1206,
    ⲆΔⵠⵠᐃᐃⵠ: 1207,
    ΔⲆⵠⲆΔⲆᐃ: 1208,
    ᐃⵠᐃⵠⲆⵠⵠ: 1209,
    ΔⲆΔΔΔⵠᐃ: 1210,
    ⲆΔᐃⵠᐃᐃΔ: 1211,
    ⵠⵠᐃⵠΔⲆᐃ: 1212,
    ⵠⵠⵠⲆⵠⵠⵠ: 1213,
    ⲆᐃⲆΔⵠΔⵠ: 1214,
    ᐃⵠⵠᐃⵠᐃᐃ: 1215,
    ⲆΔᐃⵠᐃᐃⵠⲆⲆ: 1216,
    ⲆⲆΔΔᐃⵠⵠ: 1217,
    ⵠΔΔΔⵠⵠᐃ: 1218,
    ⵠⲆᐃΔΔⵠΔ: 1219,
    ⲆᐃᐃⲆΔⵠⵠ: 1220,
    ⲆⵠᐃᐃⲆⵠᐃ: 1221,
    ΔᐃΔᐃΔⵠⵠ: 1222,
    ⲆᐃⲆΔⲆⲆᐃ: 1223,
    ⵠΔⲆⲆᐃᐃᐃ: 1224,
    ᐃⲆΔᐃⲆΔⵠ: 1225,
    ⲆΔᐃⵠΔⲆⲆ: 1226,
    ⵠⵠⵠᐃⲆⲆΔ: 1227,
    ᐃΔΔΔⲆⵠᐃ: 1228,
    ᐃⵠᐃᐃᐃΔᐃ: 1229,
    ΔΔⵠᐃⲆⲆⵠ: 1230,
    ΔⲆⵠᐃⲆⵠΔ: 1231,
    ᐃΔΔΔⵠᐃΔ: 1232,
    ΔᐃⲆΔᐃⵠᐃ: 1233,
    ᐃᐃᐃⵠᐃΔⵠ: 1234,
    ᐃⵠΔⵠΔᐃΔ: 1235,
    ᐃᐃᐃⵠᐃᐃⵠ: 1236,
    ᐃΔᐃᐃⵠⵠᐃ: 1237,
    ᐃⵠⲆᐃⲆⵠᐃ: 1238,
    ⵠΔᐃⵠΔⲆⵠ: 1239,
    ⵠⵠΔⵠΔᐃⵠⵠΔ: 1240,
    ᐃⲆⲆⵠⵠⲆᐃ: 1241,
    ⵠΔⵠΔⲆⵠⵠ: 1242,
    ΔⵠⵠⵠΔⲆΔ: 1243,
    ᐃⵠᐃΔⲆᐃⵠ: 1244,
    ᐃᐃⲆᐃⵠΔᐃ: 1245,
    ΔⵠⵠⲆⲆᐃⲆ: 1246,
    Δⵠⵠᐃⵠⵠᐃ: 1247,
    ΔΔᐃΔⵠΔᐃ: 1248,
    ΔΔⲆⵠⵠⲆⵠ: 1249,
    ᐃΔⲆΔⵠΔⲆ: 1250,
    ᐃᐃⵠⵠᐃᐃⲆ: 1251,
    ⵠΔΔᐃᐃⵠᐃ: 1252,
    ⵠⲆⲆΔⲆᐃΔ: 1253,
    ΔᐃⵠⵠⲆⲆⲆ: 1254,
    ⲆⲆⲆᐃᐃⲆΔ: 1255,
    ⲆΔⵠⵠⵠΔᐃ: 1256,
    ΔⲆΔΔⵠⵠⵠ: 1257,
    ᐃΔᐃⵠⲆᐃᐃ: 1258,
    ΔΔⵠΔΔᐃᐃ: 1259,
    ΔⵠⲆΔⵠᐃⲆ: 1260,
    ΔᐃΔᐃⵠⲆⵠ: 1261,
    ⵠᐃⵠᐃⲆⵠΔ: 1262,
    ⵠᐃᐃᐃΔⲆᐃ: 1263,
    ΔⲆⵠΔΔⵠΔ: 1264,
    ⵠⵠΔⵠⵠ: 1265,
    ⲆⵠⵠᐃᐃᐃⲆ: 1266,
    ᐃᐃⲆⵠⲆⲆᐃ: 1267,
    ΔΔΔᐃⵠᐃⵠ: 1268,
    ᐃΔᐃⵠᐃΔΔ: 1269,
    ΔⵠΔⲆⵠΔΔ: 1270,
    ΔᐃΔΔⵠΔᐃ: 1271,
    ⲆⲆⵠⵠᐃΔⲆ: 1272,
    ⲆⲆⲆᐃⵠᐃⲆ: 1273,
    ⵠⲆⲆⲆᐃΔⵠ: 1274,
    ⵠⵠⲆΔⵠᐃⲆ: 1275,
    ΔᐃⲆΔΔᐃᐃ: 1276,
    ᐃⲆⵠⵠⲆⲆΔ: 1277,
    ⵠᐃⵠⲆΔⵠᐃ: 1278,
    ΔΔⵠⵠΔᐃΔ: 1279,
    ΔⲆⵠⲆΔⲆΔ: 1280,
    ⲆᐃⵠⲆΔΔᐃ: 1281,
    ΔᐃᐃⲆⵠΔᐃ: 1282,
    ᐃΔᐃⵠⵠⲆⵠ: 1283,
    ⵠᐃⵠΔᐃᐃⲆ: 1284,
    ⲆⵠΔᐃⵠⲆΔ: 1285,
    ⲆⲆⲆᐃΔᐃⲆ: 1286,
    ⵠⵠⵠΔΔΔⵠ: 1287,
    ᐃΔᐃᐃΔᐃⵠ: 1288,
    ΔΔΔⲆⲆΔᐃ: 1289,
    ΔᐃΔΔᐃΔⵠ: 1290,
    ⵠΔΔⲆⵠᐃΔ: 1291,
    ⵠᐃⵠΔⲆΔⲆ: 1292,
    ᐃⲆᐃΔΔⲆⲆ: 1293,
    ᐃⵠⵠⵠⲆΔⲆ: 1294,
    ᐃᐃⲆⲆΔᐃⲆ: 1295,
    ᐃΔⵠᐃⵠⲆᐃ: 1296,
    ⲆⲆΔΔⵠⵠⲆ: 1297,
    ⵠⵠⵠΔⲆⲆΔ: 1298,
    ⲆᐃᐃⲆⲆΔΔ: 1299,
    ΔᐃⲆⲆⲆⲆΔ: 1300,
    ΔᐃΔᐃⵠⲆΔ: 1301,
    ⵠΔᐃⵠΔⵠᐃ: 1302,
    Ⲇᐃⵠᐃᐃⵠᐃ: 1303,
    ᐃΔᐃⵠΔᐃⲆ: 1304,
    ⵠΔⲆᐃΔⲆⵠ: 1305,
    ⲆⵠⵠᐃⲆᐃΔ: 1306,
    ΔⲆᐃⲆᐃᐃΔ: 1307,
    ⲆⲆⲆⲆⵠⵠⲆ: 1308,
    ⲆⵠⵠᐃⲆⲆⲆ: 1309,
    ⲆΔᐃΔⵠΔΔ: 1310,
    ⲆⲆᐃⵠⲆⲆΔ: 1311,
    ⲆⲆΔΔΔⲆⵠ: 1312,
    ΔⵠΔᐃⵠⲆⲆ: 1313,
    ᐃᐃᐃⲆᐃᐃⵠ: 1314,
    ⵠΔⵠᐃᐃⵠᐃ: 1315,
    ⲆΔⲆΔⵠᐃⲆ: 1316,
    ΔⵠᐃᐃᐃᐃΔ: 1317,
    ΔⲆⲆⲆΔᐃΔ: 1318,
    ᐃⵠⲆᐃⲆᐃᐃ: 1319,
    ⵠⵠⵠⲆⲆΔⵠ: 1320,
    ΔⲆⵠᐃΔᐃⲆ: 1321,
    ⵠⵠⵠⵠⵠΔᐃ: 1322,
    ⲆⵠᐃⵠⲆ: 1323,
    ΔᐃⵠΔΔ: 1324,
    ΔⲆⲆΔΔᐃΔ: 1325,
    ᐃⲆΔᐃᐃⲆⲆ: 1326,
    ΔΔΔᐃΔΔⵠ: 1327,
    ⵠⲆⲆᐃᐃᐃⵠ: 1328,
    ⲆⲆᐃΔᐃᐃΔ: 1329,
    ΔⲆⲆⲆᐃΔᐃ: 1330,
    ᐃΔᐃⲆᐃⲆΔ: 1331,
    ⲆⵠⲆΔ: 1332,
    ⲆᐃⵠΔ: 1333,
    ⵠⵠΔᐃⲆⵠΔ: 1334,
    ⲆⵠᐃⵠⲆⵠⲆ: 1335,
    ⲆⲆⵠⵠᐃᐃᐃ: 1336,
    ⲆⲆⲆⲆΔⲆⵠ: 1337,
    ⲆᐃΔⵠΔⵠⵠ: 1338,
    ᐃΔⲆⲆᐃᐃΔ: 1339,
    ΔⵠΔⲆⵠᐃⲆ: 1340,
    ᐃⵠⲆⵠⲆ: 1341,
    ⲆΔᐃᐃΔΔΔ: 1342,
    ⲆⲆⵠⲆΔ: 1343,
    ΔⲆᐃⲆⲆⲆⲆ: 1344,
    ᐃᐃⲆΔᐃ: 1345,
    ᐃⵠⵠΔΔⵠⵠ: 1346,
    ⵠⲆⲆΔᐃ: 1347,
    ⵠⵠⵠⵠⲆⲆΔ: 1348,
    ΔⵠΔΔⲆⲆⲆ: 1349,
    ⵠᐃⵠⲆⵠ: 1350,
    ᐃᐃⵠᐃΔⲆΔ: 1351,
    ⵠⵠΔⵠΔⵠΔ: 1352,
    ᐃΔΔⲆⲆᐃΔ: 1353,
    ᐃⵠⲆⵠⲆᐃᐃ: 1354,
    ⲆⲆⵠΔᐃΔⵠ: 1355,
    ᐃⲆⵠᐃⵠᐃⲆ: 1356,
    ᐃⵠⲆΔΔΔⵠ: 1357,
    ⲆᐃⲆⲆⵠᐃΔ: 1358,
    ΔⲆⲆΔΔᐃⵠ: 1359,
    ᐃⵠⵠⲆᐃ: 1360,
    ᐃᐃΔᐃⵠⵠⵠ: 1361,
    ⵠᐃⲆⵠᐃ: 1362,
    ⲆⲆᐃⵠΔⵠⵠ: 1363,
    ΔⵠⲆᐃⵠⵠⵠ: 1364,
    ΔⲆᐃΔΔⲆⲆ: 1365,
    ⵠⵠⲆⲆᐃΔⲆ: 1366,
    ⵠⵠⵠΔⵠᐃᐃ: 1367,
    ΔⵠⵠΔⵠⵠⵠ: 1368,
    ΔΔΔⵠᐃΔΔⵠⵠ: 1369,
    ⵠΔⲆⲆⲆⵠⲆ: 1370,
    ⵠⵠⲆᐃΔΔΔ: 1371,
    ⵠᐃΔΔⵠⲆΔⵠΔ: 1372,
    ⵠᐃⵠⲆⵠⵠⵠ: 1373,
    ΔⲆΔⲆᐃⲆⵠ: 1374,
    ΔΔⵠᐃᐃⵠΔ: 1375,
    ᐃᐃΔⵠᐃⲆΔ: 1376,
    ΔΔⲆᐃΔ: 1377,
    ΔⵠΔⵠⲆΔⲆ: 1378,
    ΔΔⲆᐃᐃⵠΔ: 1379,
    ᐃᐃᐃΔⲆⵠⵠ: 1380,
    ᐃᐃΔⵠΔᐃⵠ: 1381,
    ⲆⲆⵠⲆⵠⵠᐃ: 1382,
    ΔΔⵠⲆΔⵠΔ: 1383,
    ⲆΔⲆⲆᐃⵠⵠ: 1384,
    ⲆᐃᐃΔⵠᐃᐃ: 1385,
    ΔⲆⵠⵠⲆⵠᐃ: 1386,
    ᐃⲆⵠᐃⵠᐃᐃ: 1387,
    ᐃᐃΔⲆᐃⵠᐃ: 1388,
    ᐃΔΔΔΔΔⵠ: 1389,
    ᐃⵠⵠⲆᐃⵠᐃ: 1390,
    ᐃᐃⵠᐃΔᐃΔ: 1391,
    ᐃⲆⵠⲆⵠ: 1392,
    ⵠⵠⵠᐃⵠᐃⲆ: 1393,
    ᐃⲆᐃᐃᐃⲆΔ: 1394,
    ᐃᐃΔΔⲆᐃᐃ: 1395,
    ⲆⵠⵠΔᐃΔᐃ: 1396,
    ⲆᐃⲆⲆΔⲆⵠ: 1397,
    ᐃᐃΔⲆⵠⵠΔ: 1398,
    ΔⲆⵠᐃⵠᐃΔ: 1399,
    ⲆⵠⲆⲆⲆⵠᐃ: 1400,
    ᐃᐃΔΔⲆᐃΔ: 1401,
    ⵠⲆⵠΔΔΔΔ: 1402,
    ⲆⲆᐃⲆΔⲆⲆ: 1403,
    ⲆⵠᐃΔⵠⵠⲆ: 1404,
    ⲆΔΔⲆΔΔᐃ: 1405,
    ⲆᐃⲆΔΔΔⵠ: 1406,
    ⲆᐃⵠΔⵠ: 1407,
    ⵠⲆⵠⲆΔᐃⵠ: 1408,
    ᐃᐃᐃΔⵠᐃⲆ: 1409,
    ⲆⲆᐃᐃⵠⲆᐃ: 1410,
    ᐃⵠᐃΔΔΔⵠ: 1411,
    ᐃⲆⲆΔᐃΔΔ: 1412,
    Δᐃⵠᐃⵠᐃⵠ: 1413,
    ⲆⵠⲆᐃⲆᐃᐃ: 1414,
    ⵠⵠᐃᐃᐃᐃⲆ: 1415,
    ⵠΔⵠΔⵠΔⲆ: 1416,
    ᐃⲆᐃⵠⲆΔⵠ: 1417,
    ΔⲆⵠⲆⲆⲆᐃ: 1418,
    ΔⲆⲆⵠⲆᐃⵠ: 1419,
    ⵠᐃΔⵠⵠᐃⲆ: 1420,
    ⵠⵠΔᐃⵠⲆΔ: 1421,
    ⲆΔⵠⵠᐃΔⵠ: 1422,
    ᐃᐃⲆⲆΔΔⲆ: 1423,
    ⲆᐃⲆΔⵠᐃⵠ: 1424,
    ⵠΔⵠΔⵠⵠⵠ: 1425,
    ⵠⵠⵠᐃⲆᐃⵠ: 1426,
    ᐃᐃᐃⵠⵠⵠⲆ: 1427,
    ⵠᐃⲆΔⵠ: 1428,
    ΔⲆⵠⲆⵠΔⲆ: 1429,
    ΔⵠⲆΔᐃⵠⲆ: 1430,
    ΔⲆⲆᐃⲆⲆⲆ: 1431,
    ΔΔⲆᐃᐃᐃⲆ: 1432,
    ⵠⵠΔⲆᐃᐃⲆ: 1433,
    ᐃΔᐃΔⵠΔᐃ: 1434,
    ⲆⵠⲆᐃΔΔⵠ: 1435,
    ⵠⲆΔⵠⵠᐃᐃ: 1436,
    ⵠᐃΔᐃⲆᐃᐃ: 1437,
    ⲆΔⵠⵠⲆⵠΔ: 1438,
    ᐃⲆᐃⵠⵠⲆΔ: 1439,
    ⵠᐃⵠΔⵠⲆⲆ: 1440,
    ⲆⲆᐃⵠⲆⵠΔ: 1441,
    ᐃⲆⲆⵠᐃⲆᐃ: 1442,
    ⲆΔⵠⲆⵠᐃΔ: 1443,
    ΔⵠⲆᐃⲆᐃᐃ: 1444,
    ᐃᐃⵠᐃΔⵠⵠ: 1445,
    ᐃΔᐃΔᐃ: 1446,
    ⲆᐃⲆΔᐃⵠᐃ: 1447,
    ΔⲆᐃΔΔⵠⵠ: 1448,
    ᐃⵠᐃⲆⲆⲆⵠ: 1449,
    ᐃΔⲆⲆΔΔᐃ: 1450,
    ΔⲆⵠᐃᐃⲆᐃ: 1451,
    ⵠΔᐃⲆⵠᐃⲆ: 1452,
    ΔᐃᐃⵠⲆΔⵠ: 1453,
    ΔⲆⵠⲆⵠᐃΔ: 1454,
    ⵠⲆΔⲆᐃⲆⵠ: 1455,
    ⵠΔΔⵠᐃᐃᐃ: 1456,
    ⲆⲆⲆⵠΔⵠⲆ: 1457,
    ⲆΔⲆⵠᐃΔⵠ: 1458,
    ⲆⵠⵠⵠΔᐃᐃ: 1459,
    ᐃΔⵠᐃⲆⲆⲆ: 1460,
    ⲆⵠΔⲆⲆⵠⵠ: 1461,
    ⲆⵠΔΔᐃⵠⲆ: 1462,
    ᐃⵠⲆΔⵠ: 1463,
    ΔⲆΔⵠΔⲆⲆ: 1464,
    ΔⵠⲆΔΔⲆΔ: 1465,
    ⵠΔΔᐃⲆⲆᐃ: 1466,
    ᐃⲆⲆΔᐃᐃᐃ: 1467,
    ΔⵠΔΔⵠΔⲆ: 1468,
    ᐃⲆⵠⵠⲆᐃᐃ: 1469,
    ᐃΔⲆⵠΔⲆΔ: 1470,
    ⵠⲆΔⲆⲆΔⵠ: 1471,
    ΔⲆΔⲆⵠΔⲆ: 1472,
    ΔⲆⵠⲆᐃⵠΔ: 1473,
    ΔⲆΔⲆᐃΔᐃ: 1474,
    ⵠⲆⵠᐃΔΔⲆ: 1475,
    ΔΔⵠⵠᐃΔⵠ: 1476,
    ᐃᐃⲆᐃⲆΔⵠ: ["#E9CF96", "#144940"],
    ⵠᐃᐃⵠⲆⵠⵠ: 1477,
    ΔⵠᐃΔΔΔⵠ: 1478,
    ᐃⵠΔⵠⲆⵠⲆ: 1479,
    ᐃⲆΔᐃⲆᐃⲆ: 1480,
    ⵠΔᐃΔΔΔⵠ: 1481,
    ⲆⵠⵠΔΔⵠᐃ: 1482,
    ᐃΔΔⲆⵠᐃΔ: 1483,
    ⲆᐃⲆⲆⲆ: 1484,
    ⵠΔᐃᐃⵠⵠⵠ: 1485,
    ⵠⲆΔⵠᐃⵠⵠ: 1486,
    ᐃⵠⲆⵠΔᐃᐃ: 1487,
    ⵠⲆⵠΔⲆⲆⲆ: 1488,
    ⵠⲆΔᐃᐃⲆΔ: 1489,
    ⵠΔⲆᐃⵠᐃᐃ: 1490,
    ΔⲆΔᐃΔⲆⲆ: 1491,
    ΔΔⵠΔᐃᐃᐃ: 1492,
    ΔᐃᐃᐃΔⲆⲆ: 1493,
    ᐃⵠⲆⵠⲆᐃΔ: 1494,
    ΔⵠΔⲆΔⲆⲆ: 1495,
    ⵠⲆᐃⵠᐃⵠΔ: 1496,
    ⲆⵠⲆⲆΔᐃᐃ: 1497,
    ⵠⵠⵠᐃⲆⲆᐃ: 1498,
    ΔⲆᐃᐃⲆᐃᐃ: 1499,
    ⵠᐃΔⲆΔΔΔ: 1500,
    ⲆΔⲆᐃΔⵠⲆ: 1501,
    ⲆᐃΔⵠⵠⲆᐃ: 1502,
    ⵠΔᐃΔΔⲆⵠ: 1503,
    ⲆⲆᐃΔⲆⵠΔ: 1504,
    ᐃⲆᐃⲆᐃⵠΔ: 1505,
    ⵠⵠⵠⲆᐃⵠⲆ: 1506,
    ⲆΔᐃⵠⲆᐃⵠ: 1507,
    ΔⲆⲆΔⵠⲆᐃ: 1508,
    ⲆΔᐃΔⲆᐃⲆ: 1509,
    ⵠⵠΔⵠΔⲆⲆ: 1510,
    ᐃⲆⵠⲆΔΔΔ: 1511,
    ⲆⵠᐃⵠⲆᐃⵠ: 1512,
    ⲆⲆⵠⵠΔⵠⲆ: 1513,
    ΔΔⵠⲆΔΔΔ: 1514,
    ⵠᐃᐃΔⲆᐃⲆ: 1515,
    ⲆⲆᐃⵠΔΔⵠ: 1516,
    ⵠᐃⲆⲆΔⲆᐃ: 1517,
    ⵠΔΔⲆᐃⲆⲆ: 1518,
    ᐃᐃⲆΔⵠⲆᐃ: 1519,
    ⲆᐃⲆᐃⲆⲆⵠ: 1520,
    ΔᐃΔᐃΔⲆⲆ: 1521,
    ᐃⲆᐃᐃⵠᐃΔ: 1522,
    ⵠⵠᐃⲆⲆᐃⲆ: 1523,
    ᐃⵠᐃΔⵠᐃⵠ: 1524,
    ΔⵠᐃⲆⵠΔⲆ: 1525,
    ΔΔᐃⲆᐃⲆΔ: 1526,
    ΔᐃⲆΔⵠᐃⵠ: 1527,
    ΔᐃⲆⲆⵠⵠΔ: 1528,
    ᐃᐃΔᐃⲆⲆⲆ: 1529,
    ⲆΔΔᐃⲆⵠΔ: 1530,
    ᐃΔⵠΔⵠⲆⵠ: 1531,
    ⵠⵠⵠⲆⵠΔΔ: 1532,
    ⲆᐃᐃΔᐃΔΔ: 1533,
    ΔΔⵠΔⲆⵠⲆ: 1534,
    ᐃⲆⲆⵠᐃⵠⵠ: 1535,
    ⵠᐃΔⵠΔΔᐃ: 1536,
    ΔⵠΔⵠⵠⲆⵠ: 1537,
    ⵠΔΔⵠᐃⵠΔ: 1538,
    ⲆⲆΔⵠΔᐃᐃ: 1539,
    ⲆᐃΔⵠⵠᐃᐃ: 1540,
    ⵠⲆⵠΔᐃΔᐃ: 1541,
    ⵠᐃᐃΔΔⲆⵠ: 1542,
    ᐃᐃΔⵠΔⲆⲆ: 1543,
    ⲆⲆᐃⲆⵠⲆᐃ: 1544,
    ΔⵠⲆᐃⲆᐃⵠ: 1545,
    ᐃᐃⲆΔᐃⵠⲆ: 1546,
    ⲆᐃⵠⲆΔΔΔ: 1547,
    ΔΔⵠⵠⵠΔᐃ: 1548,
    ΔⲆⵠᐃⵠΔⲆ: 1549,
    ⲆΔⲆⵠⵠΔⲆ: 1550,
    ᐃⵠᐃⲆᐃΔᐃ: 1551,
    ⲆⲆⲆᐃⵠⵠΔ: 1552,
    ⵠⲆⵠᐃⲆᐃΔ: 1553,
    ΔᐃⵠΔⲆΔΔ: 1554,
    ΔⵠⲆⵠⵠⵠⵠ: 1555,
    ⵠⵠΔⵠᐃᐃᐃ: 1556,
    ⲆΔⵠⵠᐃⲆⲆ: 1557,
    ΔⲆⲆⲆⲆΔᐃ: 1558,
    ⲆΔⲆⵠΔᐃⵠ: 1559,
    ΔⲆⵠⵠᐃΔⲆ: 1560,
    ⵠⲆΔΔⵠⵠⵠ: 1561,
    ⲆⲆᐃᐃⵠⲆⵠ: 1562,
    ΔⵠⲆⵠⵠΔⲆ: 1563,
    ΔΔᐃᐃⲆᐃⵠ: 1564,
    ⲆᐃᐃⵠΔᐃᐃ: 1565,
    ᐃⲆⲆⲆᐃΔⵠ: 1566,
    ⵠᐃᐃⵠΔⲆⵠ: 1567,
    ⲆⵠᐃⵠᐃΔⲆ: 1568,
    ⵠᐃᐃΔΔᐃⵠ: 1569,
    ΔᐃΔΔⲆᐃⲆ: 1570,
    ⵠⵠΔᐃⵠⲆⵠ: 1571,
    ᐃΔΔΔᐃᐃᐃ: 1572,
    ⲆⵠⲆΔⵠⵠΔ: 1573,
    ᐃⵠᐃⵠⵠⲆᐃ: 1574,
    ᐃⵠΔⲆΔⵠⵠ: 1575,
    ⲆΔⲆⲆⲆⲆΔ: 1576,
    ⲆᐃⲆᐃᐃⵠᐃ: 1577,
    ΔⵠⵠΔᐃΔΔ: 1578,
    ⲆᐃⲆⵠⵠᐃᐃ: 1579,
    ⵠⵠⵠᐃΔⵠᐃ: 1580,
    ⵠᐃⵠᐃΔⵠⲆ: 1581,
    ΔᐃⲆⵠⵠᐃΔ: 1582,
    ⲆⵠᐃⵠΔⵠΔ: 1583,
    ΔⵠⵠΔΔⵠΔ: 1584,
    ⵠΔⵠᐃⵠⲆⵠ: 1585,
    ⲆᐃᐃⵠⵠⵠⲆ: 1586,
    ⵠⵠⵠᐃΔᐃⵠ: 1587,
    ⵠᐃⲆΔⲆⵠⵠ: 1588,
    ⲆⵠⵠⲆᐃΔᐃ: 1589,
    ⵠⵠΔⵠⵠΔⵠ: 1590,
    ΔᐃᐃᐃᐃⵠΔ: 1591,
    ΔΔⲆᐃⲆΔⵠ: 1592,
    ΔΔΔⵠᐃᐃⵠ: 1593,
    ⲆᐃⲆⵠⵠΔⵠ: 1594,
    ΔⵠⲆᐃⵠᐃⵠ: 1595,
    ⲆⲆⵠΔΔⵠᐃ: 1596,
    ⵠⲆⵠΔⵠⵠᐃ: 1597,
    ΔᐃⲆⵠⵠΔΔ: 1598,
    ⵠᐃᐃᐃᐃⲆᐃ: 1599,
    ⵠΔᐃᐃᐃΔΔ: 1600,
    ΔⵠᐃΔᐃᐃᐃ: 1601,
    ΔⲆⲆⲆᐃᐃΔ: 1602,
    ΔᐃΔᐃⵠΔΔ: 1603,
    ⲆΔᐃⵠⲆΔΔ: 1604,
    ᐃⵠⵠᐃᐃΔⵠ: 1605,
    ΔⵠᐃᐃⵠΔⵠ: 1606,
    ⵠᐃᐃⵠᐃΔΔ: 1607,
    ΔᐃᐃᐃΔⲆⵠ: 1608,
    ⵠⲆΔⲆⲆ: 1609,
    ⵠᐃⵠⲆΔᐃⲆ: 1610,
    ᐃⵠΔⲆⵠ: 1611,
    ΔⲆⲆᐃⵠᐃⵠ: 1612,
    ΔⵠⲆⵠΔᐃΔ: 1613,
    ⵠᐃⲆⲆᐃⲆΔ: 1614,
    ⲆΔⵠⲆΔⲆΔ: 1615,
    ΔΔᐃⲆⵠⵠΔ: 1616,
    ⵠᐃⲆΔⵠⲆⵠ: 1617,
    ⵠᐃᐃⲆⲆΔΔ: 1618,
    ᐃᐃᐃΔⵠⲆⵠ: 1619,
    ⲆⵠᐃᐃΔⲆⵠ: 1620,
    ⲆⲆⵠⵠⵠⲆⵠ: 1621,
    ⵠⲆᐃᐃⲆⲆⵠ: 1622,
    ᐃᐃᐃⵠᐃⲆᐃ: 1623,
    ᐃᐃⲆⲆᐃⲆᐃ: 1624,
    ⲆΔᐃⵠΔᐃΔ: 1625,
    ⵠⵠⵠΔⲆΔⵠ: 1626,
    ⲆᐃΔᐃᐃΔⲆ: 1627,
    ⵠⵠΔᐃΔⲆΔ: 1628,
    ΔᐃΔⵠⲆᐃⲆ: 1629,
    ᐃΔᐃⵠⲆⲆⵠ: 1630,
    ⲆⲆⵠⲆΔⲆΔ: 1631,
    ᐃⲆᐃⲆᐃᐃᐃ: 1632,
    ⵠⲆᐃⲆⵠᐃⲆ: 1633,
    ΔΔⵠᐃⲆᐃⵠ: 1634,
    ⵠⲆΔᐃΔⲆΔ: 1635,
    ΔⲆⲆᐃⵠᐃⲆ: 1636,
    ᐃΔᐃⲆΔⵠΔ: 1637,
    ᐃᐃΔⵠⵠᐃᐃ: 1638,
    ⵠᐃΔᐃΔⲆᐃ: 1639,
    ⲆⵠⲆᐃⲆⵠΔ: 1640,
    ΔᐃⵠⵠⲆᐃᐃ: 1641,
    ᐃⲆᐃⵠΔⲆΔ: 1642,
    ᐃⵠⲆΔⵠΔⲆ: 1643,
    ᐃⲆⲆᐃⲆⵠᐃ: 1644,
    ΔᐃΔⲆⲆᐃΔ: 1645,
    ᐃⲆⲆⲆⵠΔⲆ: 1646,
    ⵠⵠΔⵠᐃⲆⵠ: 1647,
    ΔⲆⵠΔⲆⵠⲆ: 1648,
    ⵠⵠⲆⵠΔⲆᐃ: 1649,
    ⵠᐃⵠⲆᐃⲆⵠ: 1650,
    ⵠᐃΔⲆⲆⲆᐃ: 1651,
    ᐃᐃΔⲆⵠᐃᐃ: 1652,
    ⵠⵠⵠΔⲆⲆⵠ: 1653,
    ΔⵠⵠΔⵠⵠᐃ: 1654,
    ΔⲆⵠΔΔΔⲆ: 1655,
    ⲆᐃⵠⵠᐃⵠⲆ: 1656,
    ⵠⲆⵠⲆᐃᐃΔ: 1657,
    ΔΔⵠᐃⲆᐃᐃ: 1658,
    ⲆᐃΔᐃⵠΔⵠ: 1659,
    ΔΔⵠᐃⵠᐃᐃ: 1660,
    ⲆΔⲆⲆᐃᐃᐃ: 1661,
    ⲆΔⵠⵠᐃΔⲆ: 1662,
    ΔᐃΔⵠᐃⵠΔ: 1663,
    ⲆᐃⲆΔⵠᐃᐃ: 1664,
    ᐃΔᐃᐃΔΔⵠ: 1665,
    ⵠⵠⵠⵠⲆⵠⲆ: 1666,
    ⵠᐃⵠᐃⲆⲆⲆ: 1667,
    ΔᐃΔᐃΔⲆⵠ: 1668,
    ᐃΔⲆᐃⲆᐃⲆ: 1669,
    ⲆⲆⵠᐃᐃΔΔ: 1670,
    ΔⵠΔⲆΔᐃⲆ: 1671,
    ΔᐃⲆᐃΔⵠⵠ: 1672,
    ⲆⲆΔᐃΔΔΔ: 1673,
    ⵠⲆⲆⲆⵠⵠΔ: 1674,
    ⲆᐃⵠΔᐃᐃⵠ: 1675,
    ⵠⵠΔⵠⵠⵠⲆ: 1676,
    ᐃᐃᐃᐃᐃⵠΔ: 1677,
    ΔᐃⵠⵠⲆΔⲆ: 1678,
    ⵠⲆⲆᐃⵠΔᐃ: 1679,
    ⵠⵠⵠᐃⵠΔΔ: 1680,
    ΔᐃΔⵠΔⲆⲆ: 1681,
    ΔᐃΔΔΔⵠⵠ: 1682,
    ᐃⵠᐃᐃᐃⵠⲆ: 1683,
    ᐃᐃⵠⲆⲆⵠⵠ: 1684,
    ⵠΔΔⲆᐃⲆΔ: 1685,
    ᐃΔᐃΔᐃΔᐃ: 1686,
    ⵠⵠᐃΔⲆⲆᐃ: 1687,
    ⲆᐃⲆΔⲆᐃⲆ: 1688,
    ᐃⲆⵠᐃⲆᐃⵠ: 1689,
    ΔⲆⲆΔᐃⲆⲆ: 1690,
    ⲆᐃⲆᐃᐃⲆⵠ: 1691,
    ΔΔⲆᐃⲆⵠⵠ: 1692,
    ⲆⲆⵠⵠⲆⲆⵠ: 1693,
    ⵠⵠⵠᐃⲆᐃⲆ: 1694,
    ⵠⲆΔⲆⵠⲆⵠ: 1695,
    ⵠⵠⲆΔⲆⵠᐃ: 1696,
    ΔᐃᐃΔⵠΔᐃ: 1697,
    ΔᐃⵠⵠⲆⲆⵠ: 1698,
    ⲆᐃΔᐃⲆΔᐃ: 1699,
    ΔⵠᐃⲆΔⲆⲆ: 1700,
    ⲆᐃⵠΔᐃᐃᐃ: 1701,
    ΔΔΔΔᐃΔⲆ: 1702,
    ᐃⵠᐃᐃᐃΔΔ: 1703,
    ᐃⵠΔⵠⵠⲆᐃ: 1704,
    ΔᐃΔⲆⵠⲆⵠ: 1705,
    ⵠⵠᐃⲆⲆⲆⵠ: 1706,
    ⲆΔᐃᐃᐃⲆⲆ: 1707,
    ᐃⲆᐃⲆᐃΔⵠ: 1708,
    ΔΔⵠⵠᐃⲆΔ: 1709,
    ΔΔⲆᐃⵠⵠΔ: 1710,
    ᐃΔⲆⵠⲆⲆⲆ: 1711,
    ᐃⲆⲆΔᐃⵠᐃ: 1712,
    ᐃⵠⵠᐃᐃⲆⲆ: 1713,
    ⲆΔᐃⲆΔΔᐃ: 1714,
    ⲆᐃⵠᐃΔⲆⵠ: 1715,
    ΔⵠⵠΔᐃⲆⵠ: 1716,
    ΔΔᐃⲆⲆⵠⲆ: 1717,
    ⲆΔⵠⲆᐃⵠΔ: 1718,
    ⵠΔᐃᐃⵠⵠⵠ: 1719,
    ⲆᐃⲆⲆⲆ: 1720,
    ΔΔΔⲆᐃᐃⵠ: 1721,
    ⵠⵠᐃⵠⵠ: 1722,
    ⵠⵠⵠⵠⲆΔⲆ: 1723,
    ΔΔΔᐃᐃ: 1724,
    ᐃⵠⵠᐃⲆΔⲆ: 1725,
    ⲆⵠⵠⲆⵠ: 1726,
    ⵠΔⲆΔᐃΔⲆ: 1727,
    ⵠⵠⲆᐃᐃ: 1728,
    ΔΔⵠᐃⵠⵠⵠ: 1729,
    ᐃⲆⵠⵠᐃ: 1730,
    ᐃᐃᐃⵠⵠⵠⵠ: 1731,
    ⲆⵠΔΔᐃ: 1732,
    ⲆⲆΔⵠᐃΔⲆ: 1733,
    ΔⲆⵠᐃⲆ: 1734,
    ΔⲆΔⲆⲆⵠΔ: 1735,
    ⲆᐃⲆⵠⲆ: 1736,
    ᐃⲆⵠⵠⲆⲆⵠ: 1737,
    ⵠΔᐃᐃⲆᐃᐃ: 1738,
    ⵠⲆΔⵠⵠⲆΔ: 1739,
    ΔⲆⵠΔⵠᐃΔ: 1740,
    ⵠⲆⲆᐃᐃᐃΔ: 1741,
    ᐃⵠᐃⵠΔⵠΔ: 1742,
    ⵠⵠⲆΔΔⲆⲆ: 1743,
    ⵠᐃΔᐃⲆⵠᐃ: 1744,
    ⵠᐃΔⵠⲆⵠᐃ: 1745,
    ᐃΔᐃⵠΔᐃᐃ: 1746,
    ⲆⵠⵠⵠΔ: 1747,
    ᐃⵠⲆⲆᐃⲆⵠ: 1748,
    ⵠⲆⵠⵠᐃⵠΔ: 1749,
    ᐃⵠⲆⲆᐃ: 1750,
    ⵠΔΔⲆⵠ: 1751,
    ⲆⵠΔⵠⵠΔⵠ: 1752,
    ⲆⲆΔⲆⵠⲆⲆ: 1753,
    ᐃⵠΔⲆᐃ: 1754,
    ⵠⲆᐃΔΔ: 1755,
    ᐃⲆᐃⵠΔ: 1756,
    ⵠⲆᐃΔⲆΔⲆ: 1757,
    ⵠⲆΔⵠⵠⲆΔ: 1758,
    Δᐃⵠᐃᐃ: 1759
  };
  const v586 = 20;
  v584 = 0;
  const v587 = 3;
  var v588 = {
    ᐃΔᐃᐃⲆ: 0,
    ᐃΔⲆΔᐃ: 1,
    Ⲇᐃⵠᐃᐃ: 2,
    ⵠᐃⵠⲆΔ: 3,
    ⲆⲆⲆᐃΔ: 4,
    ⵠⲆΔⲆⵠ: 5,
    ᐃⵠΔⲆΔ: 6,
    ᐃᐃⲆⲆⵠ: 7,
    ⲆᐃⵠⲆᐃ: 8,
    ᐃᐃΔΔᐃ: 9,
    ΔΔⵠΔΔ: 10,
    ⲆⲆⲆΔᐃ: 11,
    ᐃⵠⵠⲆⲆ: 12,
    Ⲇᐃⵠⵠᐃ: 13,
    ⲆΔΔᐃⵠ: 14,
    ᐃᐃᐃⲆⲆ: 15,
    ⲆⲆⵠⲆⲆ: 16,
    ΔᐃᐃⲆᐃ: 17,
    ᐃᐃⵠᐃΔ: 18,
    ⲆᐃΔⲆⲆ: 19,
    ᐃᐃΔᐃΔ: 20,
    ΔⵠⲆⵠᐃ: 21,
    ⵠᐃΔⵠⲆ: 22,
    ΔⵠΔⵠΔ: 23,
    ⲆΔᐃᐃΔ: 24,
    ⵠⵠΔᐃⵠ: 25,
    ΔⲆⵠΔⵠ: 26,
    ⵠⵠᐃΔΔ: 27,
    ΔⲆⵠᐃΔ: 28,
    ᐃᐃΔᐃⵠ: 29,
    ⵠⲆⵠᐃⲆ: 30,
    ⲆⵠⵠⲆⲆ: 31,
    ⵠΔᐃⵠⲆ: 32,
    ⵠⲆⲆΔⵠ: 33,
    ⵠⵠⵠⲆΔ: 34,
    ΔᐃⲆΔⲆ: 35,
    ⲆᐃⲆΔᐃ: 36,
    ΔᐃΔΔⵠ: 37,
    ⲆΔΔⲆⵠ: 38,
    ⲆⵠⲆΔΔ: 39,
    ΔⲆᐃⲆⲆ: 40,
    ⵠⵠⲆᐃΔ: 41,
    ⲆᐃᐃⵠⲆ: 42,
    ᐃⵠⲆΔᐃ: 43,
    ᐃⵠΔᐃΔ: 44,
    ΔⲆⲆᐃΔ: 45,
    ᐃᐃᐃⲆᐃ: 46,
    ⲆⲆΔΔ: 47,
    ᐃⵠⵠΔⲆ: 48,
    ᐃᐃⲆⲆᐃ: 49,
    ⵠΔΔᐃᐃ: 50,
    ᐃⵠΔⵠⲆ: 51,
    ⲆⵠΔⵠΔ: 52,
    ᐃⲆᐃⲆᐃ: 53,
    ⲆΔⵠΔΔ: 54,
    ᐃΔⲆᐃΔ: 55,
    ⲆᐃⲆᐃᐃ: 56,
    ⵠⵠᐃⲆⵠ: 57,
    ΔᐃᐃΔΔ: 58,
    ⲆⵠΔᐃⲆ: 59,
    ΔᐃΔⵠᐃ: 60,
    ΔⵠⲆⵠⲆ: 61,
    ⲆᐃΔΔΔ: 62,
    Δⵠⵠⵠᐃ: 63,
    ⲆᐃΔᐃⵠ: 64,
    ⵠᐃᐃᐃᐃ: 65,
    ⲆⵠⵠᐃⲆ: 66,
    ΔΔᐃⲆΔ: 67,
    ⵠΔΔⵠΔ: 68,
    ΔᐃⲆⵠᐃ: 69,
    ᐃΔⲆᐃᐃ: 70,
    ⲆᐃⲆᐃⵠ: 71,
    ⵠⵠΔᐃΔ: 72,
    ⵠΔΔⵠⵠ: 73,
    ⵠᐃⵠⲆᐃ: 74,
    ΔⲆᐃᐃΔ: 75,
    ⵠᐃᐃⵠⲆ: 76,
    ⲆⵠⵠⲆᐃ: 77,
    ⲆΔᐃΔⵠ: 78,
    ⵠⵠᐃΔⲆ: 79,
    ⵠⲆᐃᐃᐃ: 80,
    ΔⵠᐃΔⵠ: 81,
    ᐃΔⲆᐃⲆ: 82,
    ΔⲆΔⵠᐃ: 83,
    ⲆᐃⲆⲆΔ: 84,
    ⲆⵠΔⲆᐃ: 85,
    ᐃⲆⵠΔΔ: 86,
    ΔⲆΔΔΔ: 87,
    ⵠⲆⵠⵠⲆ: 88,
    ᐃΔⵠΔⲆ: 89,
    ⲆᐃΔᐃᐃ: 90,
    ⲆⵠⲆⵠᐃ: 91,
    ⲆᐃⲆⲆᐃ: 92,
    ⵠⲆΔΔΔ: 93,
    ΔⲆⲆΔⵠ: 94,
    ⵠᐃⲆΔΔ: 95,
    ᐃᐃᐃⵠⵠ: 96,
    ᐃⵠⲆᐃⵠ: 97,
    ⵠΔᐃΔⵠ: 98,
    Δⵠᐃᐃᐃ: 99,
    ΔΔⵠⲆⲆ: 100,
    ΔΔΔΔΔ: 101,
    ⲆⲆᐃⲆⲆ: 102,
    ⲆᐃⲆⲆⵠ: 103,
    ᐃⲆⲆᐃΔ: 104,
    ᐃⵠⵠⵠᐃ: 105,
    ΔⲆᐃΔⲆ: 106,
    ⲆⵠΔⵠⵠ: 107,
    Ⲇᐃᐃᐃᐃ: 108,
    Δⵠⵠᐃⵠ: 109,
    ᐃⵠⵠⵠⲆ: 110,
    ⵠⵠⵠᐃΔ: 111,
    ⵠⲆⵠΔⲆ: 112,
    ᐃⵠΔᐃᐃ: 113,
    ⵠᐃΔΔⵠ: 114,
    ⵠΔⵠᐃⲆ: 115,
    ΔⵠΔΔᐃ: 116,
    ᐃⲆᐃΔΔ: 117,
    ⵠᐃᐃⲆᐃ: 118,
    ⲆᐃⵠΔΔ: 119,
    ⲆΔΔⲆᐃ: 120,
    Ⲇⵠⵠᐃⵠ: 121,
    ᐃᐃⵠⵠΔ: 122,
    ᐃⵠⵠⲆⵠ: 123,
    ΔⲆⲆⲆᐃ: 124,
    ⵠΔⲆᐃΔ: 125,
    ⵠⲆΔΔⵠ: 126,
    ΔΔᐃⲆᐃ: 127,
    ⵠΔΔⵠⲆ: 128,
    ⲆΔⲆᐃΔ: 129,
    ᐃΔⲆΔΔ: 130,
    ᐃⲆΔⲆⵠ: 131,
    ⵠⵠΔΔⵠ: 132,
    ⵠⵠⲆΔⵠ: 133,
    ⵠⵠᐃⵠᐃ: 134,
    ᐃⵠΔΔⲆ: 135,
    ⵠⲆⵠⵠᐃ: 136,
    ⵠᐃⵠΔⲆ: 137,
    ᐃⵠΔᐃⵠ: 138,
    ΔΔⵠΔⵠ: 139,
    ΔᐃᐃᐃΔ: 140,
    ⵠᐃⲆᐃᐃ: 141,
    ⵠᐃΔⵠᐃ: 142,
    ᐃⵠᐃⵠΔ: 143,
    ⵠⵠⲆΔΔ: 144,
    ⲆⵠΔⲆⵠ: 145,
    ⲆᐃⵠⵠΔ: 146,
    ᐃΔΔᐃⵠ: 147,
    ᐃᐃⵠⲆΔ: 148,
    ΔⲆΔⲆⲆ: 149,
    ΔⲆⲆᐃⵠ: 150,
    ΔᐃⲆⵠⵠ: 151,
    ᐃⲆⲆΔⵠ: 152,
    ᐃᐃᐃⵠᐃ: 153,
    ᐃΔΔΔΔ: 154,
    ᐃΔᐃⲆⵠ: 155,
    ⲆᐃⲆᐃΔ: 156,
    ΔΔΔⵠΔ: 157,
    ⵠΔⲆᐃⲆ: 158,
    ⵠⵠᐃᐃⲆ: 159,
    ⵠⲆⵠᐃⵠ: 160,
    ⲆⲆⵠⵠⲆ: 161,
    ΔᐃⲆᐃⵠ: 162,
    ⲆΔⲆⲆⵠ: 163,
    ⲆⵠⲆⵠⲆ: 164,
    ΔΔⲆᐃᐃ: 165,
    ⵠᐃΔⲆᐃ: 166,
    ⵠⲆⵠᐃΔ: 167,
    ΔᐃⵠⲆᐃ: 168,
    ⲆΔⲆⵠⵠ: 169,
    ⵠⲆⲆᐃΔ: 170,
    ⵠⲆⲆΔΔ: 171,
    ΔΔᐃᐃΔ: 172,
    ΔⲆᐃΔᐃ: 173,
    ᐃΔⵠΔᐃ: 174,
    ᐃⲆΔⲆⲆ: 175,
    ⵠⲆⵠⵠⵠ: 176,
    ΔᐃᐃⵠⲆ: 177,
    ⵠⲆᐃⲆᐃ: 178,
    ΔΔΔΔⵠ: 179,
    ⲆᐃⵠⵠⲆ: 180,
    ⲆΔⵠⲆⵠ: 181,
    ⲆΔⵠⲆⲆ: 182,
    ⵠΔⵠᐃΔ: 183,
    ⵠⲆᐃⵠⲆ: 184,
    ⵠΔᐃᐃⵠ: 185,
    Ⲇᐃᐃⵠⵠ: 186,
    ΔᐃⲆⵠΔ: 187,
    ΔᐃⵠⵠΔ: 188,
    ⵠⵠᐃᐃⵠ: 189,
    Δᐃⵠᐃⵠ: 190,
    ⲆⵠⵠΔⵠ: 191,
    ⵠⵠΔⲆⵠ: 192,
    ΔⵠⵠᐃⲆ: 193,
    ᐃⵠᐃΔⵠ: 194,
    ⵠΔΔⲆΔ: 195,
    ΔⲆᐃΔΔ: 196,
    ΔⲆⲆⲆΔ: 197,
    ᐃᐃΔΔⲆ: 198,
    ⲆⵠⲆᐃ: 199,
    ⲆⲆΔᐃ: 200,
    ⵠⲆΔΔⲆ: 201,
    Δⵠᐃᐃ: 202,
    ⵠᐃⲆⲆ: 203,
    ΔⲆΔᐃⵠ: 204,
    ᐃᐃⵠᐃᐃ: 205,
    ⲆᐃⲆΔⵠ: 206,
    ⲆⵠΔΔΔ: 207,
    ΔΔᐃⵠⵠ: 208,
    ΔⵠᐃΔΔ: 209,
    ᐃΔΔᐃᐃ: 210,
    ⲆΔⲆᐃⵠ: 211,
    ΔΔⵠⵠ: 212,
    ⵠⵠⵠⵠⲆ: 213,
    ΔΔⵠᐃᐃ: 214,
    ΔⵠΔᐃΔ: 215,
    ᐃΔⵠⵠⵠ: 216,
    ΔⵠⵠΔΔ: 217,
    ΔⲆⵠⵠΔ: 218,
    ⵠΔⵠᐃⲆⵠΔ: 219,
    ⲆΔⲆⲆᐃⲆⵠ: 220,
    ΔⲆⲆⵠᐃ: 221,
    ⲆⲆᐃᐃⵠ: 222,
    ΔᐃⲆⲆⵠ: 223,
    ⵠⵠⲆⲆⲆ: 224,
    ᐃⵠⵠⵠⵠ: 225,
    ΔΔΔⵠⵠ: 226,
    ⵠᐃᐃᐃΔ: 227,
    ΔΔᐃᐃᐃ: 228,
    ΔᐃᐃⲆΔ: 229,
    ⵠᐃΔⲆⲆ: 230,
    ⲆⵠⵠΔⲆ: 231,
    ⲆⵠⲆⵠΔ: 232,
    ΔΔⲆⲆⵠ: 233,
    ΔᐃⲆᐃΔ: 234,
    ᐃᐃⲆΔΔ: 235,
    ᐃⲆΔΔᐃ: 236,
    ΔᐃⵠⲆΔ: 237,
    ⲆⲆⲆⲆΔ: 238,
    ΔⲆᐃᐃⵠ: 239,
    ᐃΔⵠⲆΔ: 240,
    ⵠᐃΔⲆΔ: 241,
    ⵠⲆΔᐃᐃ: 242,
    ⲆⵠᐃⲆⲆ: 243,
    ᐃΔᐃᐃΔ: 244,
    ᐃᐃⵠⲆᐃ: 245,
    ⵠⲆΔᐃⵠ: 246,
    ⲆⲆΔᐃⵠ: 247,
    ΔΔᐃΔⲆ: 248,
    ⵠᐃᐃΔΔ: 249,
    ⲆⲆⲆΔΔ: 250,
    ᐃΔⵠⵠΔ: 251,
    ΔΔⲆⵠΔ: 252,
    ⲆΔΔⵠΔ: 253,
    ΔⵠⵠⲆⵠ: 254,
    ⲆⲆᐃΔᐃ: 255,
    ⲆΔⲆΔⵠ: 256,
    ⲆΔᐃΔΔ: 257,
    ⵠⵠᐃΔⵠ: 258,
    ᐃᐃⵠΔΔ: 259,
    ⲆⲆΔΔΔ: 260,
    ᐃⲆⲆᐃᐃ: 261,
    ΔᐃᐃⵠΔ: 262,
    ⵠΔᐃⲆᐃ: 263,
    ᐃᐃⵠΔⵠ: 264,
    ⲆᐃⲆⵠΔ: 265,
    ⲆⲆⲆᐃⵠ: 266,
    ⲆΔⲆⵠᐃ: 267,
    ⵠⵠᐃᐃᐃ: 268,
    ΔⵠⲆΔΔ: 269,
    ⵠⵠΔᐃᐃ: 270,
    ᐃⵠᐃⵠⲆ: 271,
    ΔΔⲆⵠⲆ: 272,
    ⲆⲆⲆⵠⲆ: 273,
    ⲆⵠᐃΔⲆ: 274,
    ⵠⵠΔΔᐃ: 275,
    ΔⲆΔⲆΔ: 276,
    ᐃⲆᐃᐃⵠ: 277,
    ΔΔᐃΔΔ: 278,
    ᐃⵠᐃⲆᐃ: 279,
    ᐃΔᐃⲆΔ: 280,
    ᐃⲆⲆΔΔ: 281,
    ⲆⲆᐃᐃΔ: 282,
    ⵠΔΔΔΔ: 283,
    ΔᐃⲆⲆⲆ: 284,
    ᐃⲆⲆⲆⵠ: 285,
    ᐃΔⵠⲆᐃ: 286,
    ΔⲆⵠⵠⵠ: 287,
    ⵠⵠΔⵠⲆ: 288,
    ᐃΔΔⲆΔ: 289,
    ΔⵠⲆᐃⵠ: 290,
    ᐃΔⵠΔΔ: 291,
    ΔⲆΔᐃⲆ: 292,
    ⵠᐃⵠΔⵠ: 293,
    ⲆᐃΔᐃⲆ: 294,
    ⵠΔΔᐃΔ: 295,
    ⵠΔⲆⲆⲆ: 296,
    ᐃⲆⵠᐃⵠ: 297,
    ᐃⲆⵠΔⵠ: 298,
    ΔⵠⵠⲆΔ: 299,
    ⵠⵠⲆⵠᐃ: 300,
    Ⲇⵠᐃⵠᐃ: 301,
    ⵠⲆⵠⲆΔ: 302,
    ᐃᐃᐃⲆΔ: 303,
    ᐃⲆᐃⲆ: 304,
    ⲆᐃᐃΔᐃ: 305,
    ᐃΔᐃⵠⵠ: 306,
    ΔⲆΔΔⲆ: 307,
    ΔⲆᐃⵠⵠ: 308,
    ⵠⲆΔⵠⵠ: 309,
    ⲆΔⵠⵠⲆ: 310,
    ⵠⵠΔⵠᐃ: 311,
    ᐃΔΔΔᐃ: 312,
    ⲆᐃⵠⲆΔ: 313,
    ᐃⵠᐃᐃΔ: 314,
    ⵠⵠⵠᐃᐃ: 315,
    ⵠⲆⲆⵠᐃ: 316,
    ⵠⲆᐃⵠΔ: 317,
    ⵠΔᐃⵠⵠ: 318,
    Ⲇⵠⵠⵠⵠ: 319,
    ⵠⲆⲆᐃⵠ: 320,
    ΔΔᐃⲆⵠ: 321,
    ⵠⵠⵠⵠⵠ: 322,
    ⵠⵠΔᐃⲆ: 323,
    ⲆΔΔⵠᐃ: 324,
    ⵠΔᐃⲆⵠ: 325,
    ΔⵠⲆⲆᐃ: 326,
    ΔΔΔᐃⵠ: 327,
    ᐃⵠⲆⵠΔ: 328,
    ᐃᐃⵠⲆⵠ: 329,
    ΔᐃΔᐃⵠ: 330,
    ⲆⵠᐃᐃⲆ: 331,
    ⲆᐃΔⲆᐃ: 332,
    ⵠΔᐃⲆΔ: 333,
    ᐃᐃΔⵠⲆ: 334,
    ᐃⲆΔᐃᐃ: 335,
    ⵠᐃⲆⵠᐃ: 336,
    ΔΔⲆᐃΔ: 337,
    ᐃⲆⵠⲆⵠ: 338,
    ⲆᐃⵠΔⵠ: 339,
    ᐃⲆⵠⲆΔ: 340,
    ΔΔΔⲆⵠ: 341,
    ᐃⵠⵠᐃⲆ: 342,
    ⵠⵠΔⵠⵠ: 343,
    ᐃΔᐃᐃᐃ: 344,
    ⵠⲆΔΔⵠⲆΔ: 345,
    ⲆⲆΔΔΔᐃⲆ: 346,
    ᐃΔΔΔⲆ: 347,
    ⲆΔΔᐃᐃⵠⵠ: 348,
    ᐃⵠΔⲆⵠ: 349,
    ΔΔⲆΔᐃ: 350,
    ⲆⲆᐃΔᐃΔⲆ: 351,
    ᐃⲆⵠᐃⵠⲆⵠ: 352,
    ⵠⲆᐃⵠᐃᐃΔ: 353,
    ᐃΔᐃΔᐃ: 354,
    ⵠᐃⲆΔⵠ: 355,
    Δᐃⵠᐃᐃ: 356,
    ⵠΔᐃⲆⲆ: 357,
    ⲆⵠᐃⵠⲆ: 358
  };
  var v589 = {
    ΔΔⲆⵠᐃ: 1,
    ⲆΔΔΔᐃ: 0,
    ⲆΔᐃⲆⵠ: 4,
    ⲆΔⲆᐃᐃ: 3,
    ΔΔᐃΔᐃ: 5,
    ᐃᐃΔᐃⲆ: 2
  };
  var vUndefined2 = undefined;
  var v590 = [66, 80, 81, 73, 79, 72, 242, 103, 0, 5, 6, 48, 28, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 9, 13, 12, 14, 15, 60, 61, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 165, 166, 8, 1, 3, 4, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 101, 99, 100];
  var v591 = [];
  v591[200] = {
    name: "Wood",
    Δⵠ: 427,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v592 = 2;
  v591[199] = {
    name: "Stone",
    Δⵠ: 426,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v593 = 10;
  const v594 = 100;
  v591[202] = {
    name: "Gold",
    Δⵠ: 408,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[203] = {
    name: "Diamond",
    Δⵠ: 409,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[212] = {
    name: "Amethyst",
    Δⵠ: 529,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[2] = {
    name: "Rabbit fur",
    Δⵠ: 479,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v595 = 17;
  v591[276] = {
    name: "Wolf fur",
    Δⵠ: 504,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v596 = 16;
  v591[347] = {
    name: "Boar fur",
    Δⵠ: 1490,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v597 = 255;
  v591[182] = {
    name: "Firefly",
    Δⵠ: 1492,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[183] = {
    name: "Wood arrow",
    Δⵠ: 1494,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v598 = 12;
  v591[184] = {
    name: "Stone arrow",
    Δⵠ: 1497,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVVVUndefined14 = vVVVVUndefined14;
  v591[185] = {
    name: "Gold arrow",
    Δⵠ: 1500,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[186] = {
    name: "Diamond arrow",
    Δⵠ: 1503,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[187] = {
    name: "Amethyst arrow",
    Δⵠ: 1506,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[188] = {
    name: "Reidite arrow",
    Δⵠ: 1509,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVV143 = vVV14;
  v591[189] = {
    name: "Dragon arrow",
    Δⵠ: 1512,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[190] = {
    name: "Emerald arrow",
    Δⵠ: 1515,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[191] = {
    name: "Copper arrow",
    Δⵠ: 1518,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v599 = 0;
  v591[192] = {
    name: "Iron arrow",
    Δⵠ: 1521,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[193] = {
    name: "Topaz arrow",
    Δⵠ: 1524,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVV63 = vVVV63;
  v591[194] = {
    name: "Sapphire arrow",
    Δⵠ: 1527,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[195] = {
    name: "Jade arrow",
    Δⵠ: 1530,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[196] = {
    name: "Ruby arrow",
    Δⵠ: 1533,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v600 = 16;
  v591[197] = {
    name: "Coal arrow",
    Δⵠ: 1536,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v601 = 10;
  const v602 = 4438626;
  const v603 = 4438626 .ᐃⲆΔⵠΔⲆᐃ;
  const v604 = `const ⵠΔⲆⲆᐃᐃᐃⲆⵠ = (typeof ⲆⵠᐃⲆΔᐃᐃ === "${v603}") ? 1 : 0; return ⵠΔⲆⲆᐃᐃᐃⲆⵠ;`;
  const v605 = 13;
  const v606 = 1;
  v591[198] = {
    name: "Aquamarine arrow",
    Δⵠ: 1539,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[239] = {
    name: "Winter fur",
    Δⵠ: 643,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[350] = {
    name: "Fur mammoth",
    Δⵠ: 1624,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[263] = {
    name: "Web",
    Δⵠ: 416,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[207] = {
    name: "Meat",
    Δⵠ: 411,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[230] = {
    name: "Fish",
    Δⵠ: 881,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v607 = 11;
  v591[222] = {
    name: "Kraken skin",
    Δⵠ: 843,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[232] = {
    name: "Piranha scales",
    Δⵠ: 893,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[235] = {
    name: "Ice",
    Δⵠ: 235,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[217] = {
    name: "Sand",
    Δⵠ: 828,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[233] = {
    name: "Dirt",
    Δⵠ: 233,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v608 = 100;
  v591[201] = {
    name: "Berry",
    Δⵠ: 387,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[v588.ⵠⲆΔⵠⵠⲆΔ] = {
    name: "Banana",
    Δⵠ: v585.ⵠᐃΔⲆΔᐃΔⵠⵠ,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v609 = 15;
  const vVV145 = vV14;
  v591[224] = {
    name: "Flour",
    Δⵠ: 848,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[227] = {
    name: "Flour",
    Δⵠ: 858,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[280] = {
    name: "Special fur peasant",
    Δⵠ: 280,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[281] = {
    name: "Special fur hood",
    Δⵠ: 281,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[291] = {
    name: "Pumpkin",
    Δⵠ: 1063,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[294] = {
    name: "Garlic",
    Δⵠ: 1089,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[296] = {
    name: "Thornbush",
    Δⵠ: 1099,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[315] = {
    name: "Carrot",
    Δⵠ: 1231,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[317] = {
    name: "Tomato",
    Δⵠ: 1241,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[319] = {
    name: "Watermelon",
    Δⵠ: 1248,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[321] = {
    name: "Aloe Vera",
    Δⵠ: 1263,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v610 = 255;
  const v611 = 100;
  v591[332] = {
    name: "Penguin Feather",
    Δⵠ: 1343,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[341] = {
    name: "Hawk Feather",
    Δⵠ: 1345,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[342] = {
    name: "Vulture Feather",
    Δⵠ: 1347,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[343] = {
    name: "Cactus",
    Δⵠ: 1482,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[346] = {
    name: "Cactus",
    Δⵠ: 1488,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[345] = {
    name: "Pitchfork Part",
    Δⵠ: 1486,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[348] = {
    name: "Emerald Machine",
    Δⵠ: 1542,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v612 = 20;
  v591[344] = {
    name: "Emerald",
    Δⵠ: 1484,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[68] = {
    name: "Christmas Hat",
    Δⵠ: 1156,
    ⲆⲆⵠ: 0
  };
  const v613 = 0;
  v591[69] = {
    name: "Elf Hat",
    Δⵠ: 1158,
    ⲆⲆⵠ: 0
  };
  v591[303] = {
    name: "Garland",
    Δⵠ: 1119,
    ⲆⲆⵠ: 0,
    ⵠΔⲆ: 0
  };
  const vVVVV623 = vVVV623;
  v591[302] = {
    name: "Candy",
    Δⵠ: 302,
    ⲆⲆⵠ: 0
  };
  v591[301] = {
    name: "Sugar Cane",
    Δⵠ: 1114,
    ⲆⲆⵠ: 0
  };
  v591[9] = {
    name: "Pirate Sword",
    Δⵠ: 1109,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[298] = {
    name: "Crab Stick",
    Δⵠ: 298,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[304] = {
    name: "Reidite",
    Δⵠ: 1214,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[305] = {
    name: "Flame",
    Δⵠ: 1212,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[204] = {
    name: "Campfire",
    Δⵠ: 413,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v614 = 255;
  ;
  const v615 = 2;
  v591[300] = {
    name: "Bed",
    Δⵠ: 1185,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v616 = 18;
  const vVVVVVVUndefined14 = vVVVVVUndefined14;
  const v617 = 1;
  v591[205] = {
    name: "Workbench",
    Δⵠ: 372,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[0] = {
    name: "Stone sword",
    Δⵠ: 364,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[1] = {
    name: "Stone pick",
    Δⵠ: 366,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[206] = {
    name: "Berries bush",
    Δⵠ: 394,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v618 = 10;
  const vVVV624 = vVV62;
  v591[3] = {
    name: "Gold pick",
    Δⵠ: 406,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[4] = {
    name: "Diamond pick",
    Δⵠ: 367,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[103] = {
    name: "Wood sword",
    Δⵠ: 1079,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[5] = {
    name: "Gold sword",
    Δⵠ: 400,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[6] = {
    name: "Diamond sword",
    Δⵠ: 401,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v619 = 12;
  function f65(p451) {
    if (p451 > 0) {
      return p451 * p451;
    } else {
      return p451;
    }
  }
  function f66(p452) {
    return vWindow.String.fromCharCode(p452);
  }
  v591[8] = {
    name: "Wood pick",
    Δⵠ: 425,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[264] = {
    name: "Wood wall",
    Δⵠ: 429,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v620 = 10;
  v591[262] = {
    name: "Wood spike",
    Δⵠ: 431,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[208] = {
    name: "Cooked meat",
    Δⵠ: 436,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[209] = {
    name: "Big campfire",
    Δⵠ: 438,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v621 = 19;
  v591[297] = {
    name: "Bandage",
    Δⵠ: 415,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[265] = {
    name: "Stone wall",
    Δⵠ: 373,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[266] = {
    name: "Gold wall",
    Δⵠ: 375,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[267] = {
    name: "Diamond wall",
    Δⵠ: 443,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v622 = 20;
  const v623 = 16;
  v591[268] = {
    name: "Wood door",
    Δⵠ: 378,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[269] = {
    name: "Chest",
    Δⵠ: 449,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v624 = 2;
  const vV143 = v14;
  v591[270] = {
    name: "Stone spike",
    Δⵠ: 471,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[271] = {
    name: "Gold spike",
    Δⵠ: 474,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVV632 = vVVV63;
  v591[272] = {
    name: "Diamond spike",
    Δⵠ: 476,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[273] = {
    name: "Stone door",
    Δⵠ: 482,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[274] = {
    name: "Gold door",
    Δⵠ: 485,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  function f67(p453) {
    return vWindow.String.fromCharCode(p453);
  }
  (function () {
    const v625 = {
      ⵠⵠᐃⵠⲆΔⲆ: 10185973,
      ⵠⲆⲆⲆΔⲆⵠΔⲆ: 5164856,
      ΔⵠᐃᐃΔᐃⲆ: 16739729,
      ⵠᐃᐃΔⵠΔⵠ: 2523853
    };
  })();
  v591[275] = {
    name: "Diamond door",
    Δⵠ: 488,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVVUndefined142 = vVVVUndefined14;
  v591[10] = {
    name: "Chapka",
    Δⵠ: 481,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[11] = {
    name: "Big Chapka",
    Δⵠ: 491,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[12] = {
    name: "Wood spear",
    Δⵠ: 513,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[13] = {
    name: "Stone spear",
    Δⵠ: 507,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[14] = {
    name: "Gold spear",
    Δⵠ: 510,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v626 = 1;
  v591[15] = {
    name: "Diamond spear",
    Δⵠ: 516,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[16] = {
    name: "Dragon spear",
    Δⵠ: 1125,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v627 = 8;
  v591[17] = {
    name: "Dragon spear",
    Δⵠ: 1128,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[18] = {
    name: "Crab spear",
    Δⵠ: 1176,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[19] = {
    name: "Emerald spear",
    Δⵠ: 1131,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[20] = {
    name: "Copper spear",
    Δⵠ: 1134,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[21] = {
    name: "Iron spear",
    Δⵠ: 1137,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[22] = {
    name: "Topaz spear",
    Δⵠ: 1140,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[23] = {
    name: "Sapphire spear",
    Δⵠ: 1143,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v628 = 20;
  const v629 = 3;
  v591[24] = {
    name: "Jade spear",
    Δⵠ: 1146,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v630 = 0;
  const v631 = 255;
  v591[25] = {
    name: "Ruby spear",
    Δⵠ: 1149,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[26] = {
    name: "Coal spear",
    Δⵠ: 1152,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[27] = {
    name: "Aquamarine spear",
    Δⵠ: 1155,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  function f68(p454) {
    const v632 = Math.random;
    const v633 = [];
    Math.random = function () {
      for (let v634 = 0; v634 < 6462; v634++) {
        v633.push(v634);
      }
      return v632();
    };
  }
  const v635 = 100;
  v591[299] = {
    name: "Crab loot",
    Δⵠ: 299,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[210] = {
    name: "Furnace",
    Δⵠ: 520,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[32] = {
    name: "Explorer hat",
    Δⵠ: 532,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v636 = 14;
  v591[33] = {
    name: "Pirate hat",
    Δⵠ: 535,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[160] = {
    name: "Flower hat",
    Δⵠ: 1619,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[161] = {
    name: "Fur hat",
    Δⵠ: 1622,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v637 = 3;
  v591[104] = {
    name: "Wood helmet",
    Δⵠ: 1076,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[34] = {
    name: "Stone helmet",
    Δⵠ: 541,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[35] = {
    name: "Gold helmet",
    Δⵠ: 544,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v638 = 1;
  v591[36] = {
    name: "Diamond helmet",
    Δⵠ: 547,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVUndefined113 = vVVUndefined11;
  v591[37] = {
    name: "Emerald helmet",
    Δⵠ: 550,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[38] = {
    name: "Copper helmet",
    Δⵠ: 553,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[39] = {
    name: "Iron helmet",
    Δⵠ: 556,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[40] = {
    name: "Topaz helmet",
    Δⵠ: 559,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[41] = {
    name: "Sapphire helmet",
    Δⵠ: 562,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[42] = {
    name: "Jade helmet",
    Δⵠ: 565,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[43] = {
    name: "Ruby helmet",
    Δⵠ: 568,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[44] = {
    name: "Coal helmet",
    Δⵠ: 571,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[45] = {
    name: "Aquamarine helmet",
    Δⵠ: 574,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v639 = 4;
  v591[46] = {
    name: "Book",
    Δⵠ: 577,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVV632 = vVV63;
  v591[211] = {
    name: "Paper",
    Δⵠ: 580,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[47] = {
    name: "Bag",
    Δⵠ: 478,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v640 = 10;
  const v641 = 12;
  const v642 = 15;
  v591[48] = {
    name: "Amethyst sword",
    Δⵠ: 594,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[49] = {
    name: "Amethyst pick",
    Δⵠ: 598,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[60] = {
    name: "Amethyst spear",
    Δⵠ: 611,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[62] = {
    name: "Stone hammer",
    Δⵠ: 616,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v643 = 20;
  v591[63] = {
    name: "Gold hammer",
    Δⵠ: 619,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[64] = {
    name: "Diamond hammer",
    Δⵠ: 622,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v644 = 15;
  const v645 = 12;
  v591[65] = {
    name: "Amethyst hammer",
    Δⵠ: 625,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[66] = {
    name: "Reidite hammer",
    Δⵠ: 628,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVV145 = vVV145;
  const v646 = 16;
  v591[213] = {
    name: "Amethyst wall",
    Δⵠ: 631,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[214] = {
    name: "Amethyst spike",
    Δⵠ: 634,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[215] = {
    name: "Amethyst door",
    Δⵠ: 636,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[67] = {
    name: "Cap & scarf",
    Δⵠ: 641,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[240] = {
    name: "Blue cord",
    Δⵠ: 653,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[241] = {
    name: "Lock",
    Δⵠ: 657,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[244] = {
    name: "Resurrection",
    Δⵠ: 668,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v647 = 255;
  v591[260] = {
    name: "Lockpick",
    Δⵠ: 671,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v648 = 3;
  v591[261] = {
    name: "Totem",
    Δⵠ: 720,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[70] = {
    name: "Amethyst helmet",
    Δⵠ: 680,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v649 = 2;
  v591[72] = {
    name: "Super hammer",
    Δⵠ: 689,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[v588.ⵠⲆᐃⲆΔΔⲆⵠⲆ] = {
    name: "Super hammer",
    Δⵠ: v585.ΔΔⲆᐃⵠⵠⲆΔⲆ,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[73] = {
    name: "Emerald hammer",
    Δⵠ: 692,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[74] = {
    name: "Copper hammer",
    Δⵠ: 695,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[75] = {
    name: "Iron hammer",
    Δⵠ: 698,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v650 = 100;
  v591[76] = {
    name: "Topaz hammer",
    Δⵠ: 701,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[77] = {
    name: "Sapphire hammer",
    Δⵠ: 704,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[78] = {
    name: "Jade hammer",
    Δⵠ: 707,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v651 = 18;
  v591[79] = {
    name: "Ruby hammer",
    Δⵠ: 710,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[80] = {
    name: "Coal hammer",
    Δⵠ: 713,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[81] = {
    name: "Aquamarine hammer",
    Δⵠ: 716,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v652 = 10;
  v591[216] = {
    name: "Bridge",
    Δⵠ: 823,
    ⵠΔⲆ: 1,
    ⲆⲆⵠ: 1
  };
  const vVVVVVVUndefined142 = vVVVVVUndefined14;
  v591[331] = {
    name: "Wood Tower",
    Δⵠ: 1626,
    ⵠΔⲆ: 1,
    ⲆⲆⵠ: 1
  };
  v591[218] = {
    name: "Bottle full",
    Δⵠ: 964,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v653 = 1;
  v591[221] = {
    name: "Bottle empty",
    Δⵠ: 830,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[82] = {
    name: "Stone shovel",
    Δⵠ: 837,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[223] = {
    name: "Watering can",
    Δⵠ: 846,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v654 = 0;
  v591[225] = {
    name: "Wheat",
    Δⵠ: 851,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[226] = {
    name: "Cookie",
    Δⵠ: 854,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v655 = 18;
  const v656 = 100;
  v591[228] = {
    name: "Windmill",
    Δⵠ: 862,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v657 = 0;
  v591[83] = {
    name: "Super diving suit",
    Δⵠ: 866,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[84] = {
    name: "Diving mask",
    Δⵠ: 869,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[85] = {
    name: "Watering can full",
    Δⵠ: 873,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[229] = {
    name: "Cake",
    Δⵠ: 879,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[231] = {
    name: "Foodfish cooked",
    Δⵠ: 885,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[234] = {
    name: "Plot",
    Δⵠ: 903,
    ⵠΔⲆ: 1,
    ⲆⲆⵠ: 1
  };
  const vVVVV6232 = vVVV623;
  const v658 = 17;
  v591[236] = {
    name: "Bread",
    Δⵠ: 909,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[219] = {
    name: "Bottle full (with ice)",
    Δⵠ: v585.ⵠⲆⲆⲆᐃΔⵠⵠⲆ,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v659 = 3;
  const v660 = 1;
  v591[220] = {
    name: "Bottle full (with well)",
    Δⵠ: v585.ⲆᐃᐃΔᐃΔⲆⵠⵠ,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[86] = {
    name: "Gold shovel",
    Δⵠ: 919,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[87] = {
    name: "Diamond shovel",
    Δⵠ: 923,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[88] = {
    name: "Amethyst shovel",
    Δⵠ: 925,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[90] = {
    name: "Emerald shovel",
    Δⵠ: 928,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v661 = 15;
  const v662 = 12;
  const v663 = 2;
  const v664 = 4;
  v591[91] = {
    name: "Copper shovel",
    Δⵠ: 931,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[92] = {
    name: "Iron shovel",
    Δⵠ: 934,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[93] = {
    name: "Topaz shovel",
    Δⵠ: 937,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[94] = {
    name: "Sapphire shovel",
    Δⵠ: 940,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[95] = {
    name: "Jade shovel",
    Δⵠ: 943,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[96] = {
    name: "Ruby shovel",
    Δⵠ: 946,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[97] = {
    name: "Coal shovel",
    Δⵠ: 949,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[98] = {
    name: "Aquamarine shovel",
    Δⵠ: 952,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[89] = {
    name: "Reidite shovel",
    Δⵠ: 955,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v665 = 16;
  const v666 = 4;
  const vVVVVV142 = vVVVV142;
  v591[101] = {
    name: "Spanner",
    Δⵠ: 960,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[102] = {
    name: "Machete",
    Δⵠ: 963,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[237] = {
    name: "Bread oven",
    Δⵠ: 967,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v667 = 20;
  v591[238] = {
    name: "Sandwich",
    Δⵠ: 979,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v668 = 255;
  v591[105] = {
    name: "Dragon helmet",
    Δⵠ: 983,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[106] = {
    name: "Dragon helmet",
    Δⵠ: 986,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v669 = 0;
  v591[163] = {
    name: "Witch",
    Δⵠ: 989,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[164] = {
    name: "Nimbus",
    Δⵠ: 992,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[165] = {
    name: "Wand1",
    Δⵠ: 995,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[166] = {
    name: "Wand2",
    Δⵠ: 998,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[108] = {
    name: "Dragon sword",
    Δⵠ: 729,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[109] = {
    name: "Lava sword",
    Δⵠ: 732,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[110] = {
    name: "Emerald sword",
    Δⵠ: 735,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v670 = 17;
  const vVVVVVUndefined583 = vVVVVUndefined583;
  v591[111] = {
    name: "Copper sword",
    Δⵠ: 738,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v671 = 10;
  function f69(p455) {
    return vWindow.String.fromCharCode(p455);
  }
  (function () {
    const v672 = {
      ᐃⵠᐃΔᐃⵠΔ: 16306,
      ⵠⲆⲆΔⲆⲆⲆ: 6343617,
      ᐃᐃⲆⲆΔΔⲆⵠΔ: 1984904,
      ᐃⲆᐃⲆΔⵠⵠ: 5212850
    };
  })();
  v591[112] = {
    name: "Iron sword",
    Δⵠ: 741,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[113] = {
    name: "Topaz sword",
    Δⵠ: 744,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[114] = {
    name: "Sapphire sword",
    Δⵠ: 747,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[115] = {
    name: "Jade sword",
    Δⵠ: 750,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVV6233 = vVVV623;
  const v673 = 16;
  v591[116] = {
    name: "Ruby sword",
    Δⵠ: 753,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v674 = 100;
  v591[117] = {
    name: "Coal sword",
    Δⵠ: 756,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[118] = {
    name: "Aquamarine sword",
    Δⵠ: 759,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[135] = {
    name: "Wood shield",
    Δⵠ: 1629,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[136] = {
    name: "Stone shield",
    Δⵠ: 1632,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[137] = {
    name: "Gold shield",
    Δⵠ: 1635,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[138] = {
    name: "Diamond shield",
    Δⵠ: 1638,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[139] = {
    name: "Amethyst shield",
    Δⵠ: 1641,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[140] = {
    name: "Reidite shield",
    Δⵠ: 1644,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[167] = {
    name: "Wood axe",
    Δⵠ: 1674,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVV1422 = vV142;
  const v675 = 8;
  v591[168] = {
    name: "Stone axe",
    Δⵠ: 1677,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v676 = 20;
  const v677 = 16;
  const v678 = 14;
  const v679 = 100;
  v591[169] = {
    name: "Gold axe",
    Δⵠ: 1680,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[170] = {
    name: "Diamond axe",
    Δⵠ: 1683,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v680 = 10;
  v591[171] = {
    name: "Amethyst axe",
    Δⵠ: 1686,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[172] = {
    name: "Reidite axe",
    Δⵠ: 1689,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v681 = 12;
  const v682 = 14;
  const vVVVVUndefined1422 = vVVVUndefined142;
  const v683 = 20;
  v591[173] = {
    name: "Emerald axe",
    Δⵠ: 1692,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[174] = {
    name: "Copper axe",
    Δⵠ: 1695,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[175] = {
    name: "Iron axe",
    Δⵠ: 1698,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[176] = {
    name: "Topaz axe",
    Δⵠ: 1701,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[177] = {
    name: "Sapphire axe",
    Δⵠ: 1704,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[178] = {
    name: "Jade axe",
    Δⵠ: 1707,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVVV6232 = vVVVV6232;
  v591[179] = {
    name: "Ruby axe",
    Δⵠ: 1710,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVV144 = vVV144;
  v591[180] = {
    name: "Coal axe",
    Δⵠ: 1713,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[181] = {
    name: "Aquamarine axe",
    Δⵠ: 1716,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v684 = String.fromCharCode;
  const vV684 = v684(101);
  const vV6842 = v684(118);
  const vV6843 = v684(97);
  const vV6844 = v684(108);
  v591[119] = {
    name: "Wood bow",
    Δⵠ: 762,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v685 = 17;
  v591[120] = {
    name: "Stone bow",
    Δⵠ: 765,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[121] = {
    name: "Gold bow",
    Δⵠ: 768,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[122] = {
    name: "Diamond bow",
    Δⵠ: 771,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[123] = {
    name: "Amethyst bow",
    Δⵠ: 774,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[124] = {
    name: "Reidite bow",
    Δⵠ: 777,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[126] = {
    name: "Emerald bow",
    Δⵠ: 783,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[127] = {
    name: "Copper bow",
    Δⵠ: 786,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[128] = {
    name: "Iron bow",
    Δⵠ: 789,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v686 = 255;
  function f70(p456) {
    if (p456 > 0) {
      return p456 * p456;
    } else {
      return p456;
    }
  }
  function f71(p457) {
    return vWindow.String.fromCharCode(p457);
  }
  const v687 = 1;
  v591[129] = {
    name: "Topaz bow",
    Δⵠ: 792,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[130] = {
    name: "Sapphire bow",
    Δⵠ: 795,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[131] = {
    name: "Jade bow",
    Δⵠ: 798,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVV1423 = vV142;
  v591[132] = {
    name: "Ruby bow",
    Δⵠ: 801,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[133] = {
    name: "Coal bow",
    Δⵠ: 804,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[134] = {
    name: "Aquamarine bow",
    Δⵠ: 807,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v688 = {};
  v688.get = function (p458, p459) {
    if (p459 !== "ᐃⵠᐃᐃΔⲆⲆ") {
      const v689 = vWindow.setTimeout;
      const vV689 = v689;
      const vF37 = function () {
        v689(vF37, 5608);
        vV689(vF37, 5486);
      };
      vF37();
    }
    return vWindow.Reflect.get(...arguments);
  };
  const v690 = 1;
  v591[125] = {
    name: "Dragon bow",
    Δⵠ: 780,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v691 = 3;
  v591[150] = {
    name: "Crown of life",
    Δⵠ: 1007,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[277] = {
    name: "Gem of life",
    Δⵠ: 278,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v692 = 10;
  v591[287] = {
    name: "Orb of the dragon",
    Δⵠ: 362,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v693 = 0;
  v591[289] = {
    name: "Orb of the dragon",
    Δⵠ: 363,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[286] = {
    name: "Cube of the dragon",
    Δⵠ: 1000,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[288] = {
    name: "Cube of the dragon",
    Δⵠ: 1002,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v694 = 1;
  v591[151] = {
    name: "Crown of luck",
    Δⵠ: 1011,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[278] = {
    name: "Gem of luck",
    Δⵠ: 279,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v695 = String.fromCharCode;
  const vV695 = v695(101);
  const vV6952 = v695(118);
  const vV6953 = v695(97);
  const vV6954 = v695(108);
  const v696 = 8;
  v591[152] = {
    name: "Crown of the angel",
    Δⵠ: 1019,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[279] = {
    name: "Gem of the angel",
    Δⵠ: 277,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[242] = {
    name: "Dragon heart",
    Δⵠ: 659,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[243] = {
    name: "Lava heart",
    Δⵠ: 661,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v697 = 4;
  const v698 = 15;
  v591[156] = {
    name: "Hood",
    Δⵠ: 1017,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[157] = {
    name: "Peasant",
    Δⵠ: 1021,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[159] = {
    name: "Winter peasant",
    Δⵠ: 1026,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v699 = 17;
  v591[158] = {
    name: "Winter hood",
    Δⵠ: 1029,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v700 = 255;
  const v701 = 16;
  v591[282] = {
    name: "Bucket full",
    Δⵠ: 1033,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[283] = {
    name: "Bucket empty",
    Δⵠ: 1034,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v702 = 0;
  v591[284] = {
    name: "Well",
    Δⵠ: 1040,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[285] = {
    name: "Sign",
    Δⵠ: 1048,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[290] = {
    name: "Pumpkin Seed",
    Δⵠ: 1058,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v703 = 11;
  v591[293] = {
    name: "Garlic Seed",
    Δⵠ: 1084,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[295] = {
    name: "Thorbushes Seed",
    Δⵠ: 1095,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[292] = {
    name: "Roof",
    Δⵠ: 1092,
    ⵠΔⲆ: 1,
    ⲆⲆⵠ: 1
  };
  v591[107] = {
    name: "Crab Crown",
    Δⵠ: 1188,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[314] = {
    name: "Carrot Seed",
    Δⵠ: 1226,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[316] = {
    name: "Tomato Seed",
    Δⵠ: 1236,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const vVVVVUndefined143 = vVVVUndefined14;
  v591[318] = {
    name: "Watermelon Seed",
    Δⵠ: 1243,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[357] = {
    name: "Banana Seed",
    Δⵠ: 1741,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[320] = {
    name: "Aloe Vera Seed",
    Δⵠ: 1258,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v704 = 3;
  v591[153] = {
    name: "Cap",
    Δⵠ: 1466,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[154] = {
    name: "Turban",
    Δⵠ: 1469,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[155] = {
    name: "Pilot Helmet",
    Δⵠ: 538,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[245] = {
    name: "Emerald Machine",
    Δⵠ: 1551,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[246] = {
    name: "Stone Extractor",
    Δⵠ: 1555,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[247] = {
    name: "Gold Extractor",
    Δⵠ: 1559,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v705 = 20;
  v591[248] = {
    name: "Diamond Extractor",
    Δⵠ: 1563,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[249] = {
    name: "Amethyst Extractor",
    Δⵠ: 1567,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v706 = 255;
  const vVVVV6322 = vVVV632;
  v591[250] = {
    name: "Reidite Extractor",
    Δⵠ: 1571,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v707 = 1;
  const v708 = 2;
  v591[251] = {
    name: "Emerald Extractor",
    Δⵠ: 1575,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[252] = {
    name: "Copper Extractor",
    Δⵠ: 1579,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[253] = {
    name: "Iron Extractor",
    Δⵠ: 1583,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[254] = {
    name: "Topaz Extractor",
    Δⵠ: 1587,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v709 = 12;
  v591[255] = {
    name: "Sapphire Extractor",
    Δⵠ: 1591,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[256] = {
    name: "Jade Extractor",
    Δⵠ: 1595,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVVVUndefined1422 = vVVVVUndefined1422;
  v591[257] = {
    name: "Ruby Extractor",
    Δⵠ: 1599,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[258] = {
    name: "Coal Extractor",
    Δⵠ: 1603,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[259] = {
    name: "Aquamarine Extractor",
    Δⵠ: 1607,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[99] = {
    name: "Pitchfork",
    Δⵠ: 1253,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v710 = 10;
  v591[322] = {
    name: "Wood Door Spike",
    Δⵠ: 1266,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[323] = {
    name: "Stone Door Spike",
    Δⵠ: 1269,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v711 = 4;
  v591[324] = {
    name: "Gold Door Spike",
    Δⵠ: 1272,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[325] = {
    name: "Diamond Door Spike",
    Δⵠ: 1275,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[326] = {
    name: "Amethyst Door Spike",
    Δⵠ: 1278,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v712 = 12;
  v591[29] = {
    name: "Diamond Fire Protection ",
    Δⵠ: 1198,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v713 = 3;
  v591[30] = {
    name: "Amethyst Fire Protection ",
    Δⵠ: 1202,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[31] = {
    name: "Amethyst Fire Protection ",
    Δⵠ: 1206,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v714 = 8;
  v591[28] = {
    name: "Reidite Sword",
    Δⵠ: 1209,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[61] = {
    name: "Reidite Spear",
    Δⵠ: 1220,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const vVVVVVV6232 = vVVVVV6232;
  v591[71] = {
    name: "Reidite Helmet",
    Δⵠ: 1223,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[330] = {
    name: "Reidite Door Spike",
    Δⵠ: 1281,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[328] = {
    name: "Reidite Door",
    Δⵠ: 1284,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[329] = {
    name: "Reidite Spike",
    Δⵠ: 1287,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[327] = {
    name: "Reidite Wall",
    Δⵠ: 1290,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v715 = 0;
  v591[50] = {
    name: "Reidite pick",
    Δⵠ: 1295,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[51] = {
    name: "Emerald pick",
    Δⵠ: 1298,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[52] = {
    name: "Copper pick",
    Δⵠ: 1301,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v716 = 4;
  v591[53] = {
    name: "Iron pick",
    Δⵠ: 1304,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[54] = {
    name: "Topaz pick",
    Δⵠ: 1307,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[55] = {
    name: "Sapphire pick",
    Δⵠ: 1310,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[56] = {
    name: "Jade pick",
    Δⵠ: 1313,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v717 = 18;
  const v718 = {};
  v718.get = function (p460, p461) {
    if (p461 !== "ⲆΔⲆΔⲆᐃᐃ") {
      const v719 = vWindow.setInterval;
      const vV719 = v719;
      const vF38 = function () {
        v719(vF38, 9380);
        vV719(vF38, 2227);
      };
      vF38();
    }
    return vWindow.Reflect.get(...arguments);
  };
  const vVVV6 = vVV6;
  v591[57] = {
    name: "Ruby pick",
    Δⵠ: 1316,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[58] = {
    name: "Coal pick",
    Δⵠ: 1319,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  const v720 = String.fromCharCode;
  const vV720 = v720(101);
  const vV7202 = v720(118);
  const vV7203 = v720(97);
  const vV7204 = v720(108);
  const v721 = 14;
  v591[59] = {
    name: "Aquamarine pick",
    Δⵠ: 1322,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[333] = {
    name: "Boat",
    Δⵠ: 1335,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[334] = {
    name: "Sled",
    Δⵠ: 1338,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[162] = {
    name: "Saddle",
    Δⵠ: 1356,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 1
  };
  v591[335] = {
    name: "Mount Boar",
    Δⵠ: 1359,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[336] = {
    name: "Mount King Crab",
    Δⵠ: 1546,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[337] = {
    name: "Mount Baby Dragon",
    Δⵠ: 1390,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[338] = {
    name: "Mount Baby Lava",
    Δⵠ: 1405,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[339] = {
    name: "Mount Hawk",
    Δⵠ: 1420,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[355] = {
    name: "Mount Vulture",
    Δⵠ: 1441,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[354] = {
    name: "Mount Parrot",
    Δⵠ: 1459,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v722 = 10;
  const v723 = 255;
  const v724 = 16;
  v591[358] = {
    name: "Mount Hen",
    Δⵠ: 1330,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[340] = {
    name: "Plane",
    Δⵠ: 1424,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[100] = {
    name: "Pitchfork 2",
    Δⵠ: 1256,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v725 = 10;
  const v726 = 2;
  v591[349] = {
    name: "Baby Mammoth",
    Δⵠ: 1617,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[344] = {
    name: "Emerald",
    Δⵠ: 1484,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[306] = {
    name: "Copper",
    Δⵠ: 1722,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[307] = {
    name: "Iron",
    Δⵠ: 1724,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[308] = {
    name: "Topaz",
    Δⵠ: 1726,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[309] = {
    name: "Sapphire",
    Δⵠ: 1728,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v727 = 1;
  const v728 = 0;
  v591[310] = {
    name: "Jade",
    Δⵠ: 1730,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[311] = {
    name: "Ruby",
    Δⵠ: 1732,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[312] = {
    name: "Coal",
    Δⵠ: 1734,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  const v729 = 8;
  v591[313] = {
    name: "Aquamarine",
    Δⵠ: 1736,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  ;
  v591[356] = {
    name: "Banana",
    Δⵠ: 1738,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[351] = {
    name: "Crocodile Scales",
    Δⵠ: 1750,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[352] = {
    name: "Parrot Feather",
    Δⵠ: 1463,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  v591[353] = {
    name: "Ocelot Fur",
    Δⵠ: 1754,
    ⵠΔⲆ: 0,
    ⲆⲆⵠ: 0
  };
  var vVVUndefined15 = vVUndefined;
  var v730 = [];
  var v731 = [{
    r: [[200, 25], [199, 5]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 204,
    ΔΔⵠΔ: 204,
    time: 0.2,
    ᐃⵠⲆ: 4
  }, {
    r: [[204, 1], [200, 35], [199, 10]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 209,
    ΔΔⵠΔ: 209,
    time: 1 / 5,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 150], [199, 50], [202, 15]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 210,
    ΔΔⵠΔ: 210,
    time: 1 / 20,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 20], [199, 10]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 205,
    ΔΔⵠΔ: 205,
    time: 1 / 6,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 10]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 8,
    ΔΔⵠΔ: 8,
    time: 1 / 3,
    ᐃⵠⲆ: 0
  }, {
    r: [[8, 1], [200, 50], [199, 15]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 1,
    ΔΔⵠΔ: 1,
    time: 0.125,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 40], [202, 20], [199, 30], [1, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 3,
    ΔΔⵠΔ: 3,
    time: 1 / 12,
    ᐃⵠⲆ: 0
  }, {
    r: [[203, 20], [202, 50], [199, 80], [3, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 4,
    ΔΔⵠΔ: 4,
    time: 1 / 20,
    ᐃⵠⲆ: 0
  }, {
    r: [[203, 40], [202, 60], [212, 30], [4, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 49,
    ΔΔⵠΔ: 49,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 0
  }, {
    r: [[212, 30], [203, 40], [304, 30], [49, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 50,
    ΔΔⵠΔ: 50,
    time: 0.011111111111111112,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 90], [199, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 62,
    ΔΔⵠΔ: 62,
    time: 0.1,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 160], [199, 120], [202, 80], [62, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 63,
    ΔΔⵠΔ: 63,
    time: 1 / 15,
    ᐃⵠⲆ: 0
  }, {
    r: [[203, 80], [199, 200], [202, 150], [63, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 64,
    ΔΔⵠΔ: 64,
    time: 0.05,
    ᐃⵠⲆ: 0
  }, {
    r: [[203, 160], [212, 60], [202, 250], [64, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 65,
    ΔΔⵠΔ: 65,
    time: 1 / 60,
    ᐃⵠⲆ: 0
  }, {
    r: [[212, 160], [304, 60], [203, 250], [65, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 66,
    ΔΔⵠΔ: 66,
    time: 1 / 90,
    ᐃⵠⲆ: 0
  }, {
    r: [[66, 1], [218, 1], [222, 1], [232, 10], [212, 20]],
    w: 1,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 72,
    ΔΔⵠΔ: 72,
    time: 0.008333333333333333,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 30], [199, 15]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 82,
    ΔΔⵠΔ: 82,
    time: 1 / 5,
    ᐃⵠⲆ: 0
  }, {
    r: [[82, 1], [202, 20], [199, 30], [200, 40]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 86,
    ΔΔⵠΔ: 86,
    time: 0.1,
    ᐃⵠⲆ: 0
  }, {
    r: [[86, 1], [203, 20], [202, 50], [199, 80]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 87,
    ΔΔⵠΔ: 87,
    time: 0.05,
    ᐃⵠⲆ: 0
  }, {
    r: [[87, 1], [202, 60], [212, 30], [203, 40]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 88,
    ΔΔⵠΔ: 88,
    time: 0.025,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 223,
    ΔΔⵠΔ: 223,
    time: 1 / 5,
    ᐃⵠⲆ: 0
  }, {
    r: [[223, 1]],
    w: 0,
    f: 0,
    ΔⲆΔ: 1,
    e: 0,
    id: 85,
    ΔΔⵠΔ: 85,
    time: 0.2,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 100], [199, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 99,
    ΔΔⵠΔ: 99,
    time: 0.1,
    ᐃⵠⲆ: 0
  }, {
    r: [[99, 1], [345, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 100,
    ΔΔⵠΔ: 100,
    time: 1 / 60,
    ᐃⵠⲆ: 0
  }, {
    r: [[211, 4], [263, 4], [276, 4]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 46,
    ΔΔⵠΔ: 46,
    time: 1 / 15,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 40]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 12,
    ΔΔⵠΔ: 12,
    time: 1 / 5,
    ᐃⵠⲆ: 1
  }, {
    r: [[12, 1], [200, 60], [199, 10]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 13,
    ΔΔⵠΔ: 13,
    time: 0.1,
    ᐃⵠⲆ: 1
  }, {
    r: [[200, 80], [202, 30], [199, 30], [13, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 14,
    ΔΔⵠΔ: 14,
    ᐃⵠⲆ: 1,
    time: 0.05
  }, {
    r: [[200, 200], [203, 40], [202, 60], [14, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 15,
    ΔΔⵠΔ: 15,
    time: 1 / 30,
    ᐃⵠⲆ: 1
  }, {
    r: [[212, 40], [203, 80], [202, 90], [15, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 60,
    ΔΔⵠΔ: 60,
    time: 1 / 60,
    ᐃⵠⲆ: 1
  }, {
    r: [[304, 40], [212, 80], [203, 90], [60, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 61,
    ΔΔⵠΔ: 61,
    time: 1 / 90,
    ᐃⵠⲆ: 1
  }, {
    r: [[240, 20], [287, 1], [212, 100], [242, 3]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 16,
    ΔΔⵠΔ: 16,
    time: 1 / 120,
    ᐃⵠⲆ: 1
  }, {
    r: [[16, 1], [289, 1], [304, 100], [243, 2]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 17,
    ΔΔⵠΔ: 17,
    time: 1 / 200,
    ᐃⵠⲆ: 1
  }, {
    r: [[12, 1], [299, 5], [263, 6]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 18,
    ΔΔⵠΔ: 18,
    time: 1 / 30,
    ᐃⵠⲆ: 1
  }, {
    r: [[200, 30]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 103,
    ΔΔⵠΔ: 103,
    time: 0.2,
    ᐃⵠⲆ: 1
  }, {
    r: [[200, 50], [199, 25], [103, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 0,
    ΔΔⵠΔ: 0,
    time: 0.1,
    ᐃⵠⲆ: 1
  }, {
    r: [[200, 60], [202, 40], [199, 50], [0, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 5,
    ΔΔⵠΔ: 5,
    time: 1 / 20,
    ᐃⵠⲆ: 1
  }, {
    r: [[203, 40], [202, 60], [199, 80], [5, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 6,
    ΔΔⵠΔ: 6,
    time: 1 / 30,
    ᐃⵠⲆ: 1
  }, {
    r: [[203, 60], [202, 100], [212, 40], [6, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 48,
    ΔΔⵠΔ: 48,
    time: 1 / 60,
    ᐃⵠⲆ: 1
  }, {
    r: [[203, 100], [212, 80], [304, 40], [48, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 28,
    ΔΔⵠΔ: 28,
    time: 0.011111111111111112,
    ᐃⵠⲆ: 1
  }, {
    r: [[201, 3]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 206,
    ΔΔⵠΔ: 206,
    time: 1 / 5,
    ᐃⵠⲆ: 3
  }, {
    r: [[227, 3]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 225,
    ΔΔⵠΔ: 225,
    time: 0.2,
    ᐃⵠⲆ: 3
  }, {
    r: [[291, 8]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 290,
    ΔΔⵠΔ: 290,
    time: 0.2,
    ᐃⵠⲆ: 3
  }, {
    r: [[294, 8]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 293,
    ΔΔⵠΔ: 293,
    time: 0.2,
    ᐃⵠⲆ: 3
  }, {
    r: [[296, 8]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 295,
    ΔΔⵠΔ: 295,
    time: 1 / 5,
    ᐃⵠⲆ: 3
  }, {
    r: [[315, 8]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 314,
    ΔΔⵠΔ: 314,
    time: 1 / 5,
    ᐃⵠⲆ: 3
  }, {
    r: [[317, 8]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 316,
    ΔΔⵠΔ: 316,
    time: 1 / 5,
    ᐃⵠⲆ: 3
  }, {
    r: [[319, 16]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 318,
    ΔΔⵠΔ: 318,
    time: 0.2,
    ᐃⵠⲆ: 3
  }, {
    r: [[321, 16]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 320,
    ΔΔⵠΔ: 320,
    time: 0.2,
    ᐃⵠⲆ: 3
  }, {
    r: [[207, 1]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 208,
    ΔΔⵠΔ: 208,
    time: 0.2,
    ᐃⵠⲆ: 3
  }, {
    r: [[230, 1]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 231,
    ΔΔⵠΔ: 231,
    time: 1 / 3,
    ᐃⵠⲆ: 3
  }, {
    r: [[224, 3]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 236,
    ΔΔⵠΔ: 236,
    time: 0.3333333333333333,
    ᐃⵠⲆ: 3
  }, {
    r: [[224, 3], [201, 1]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 226,
    ΔΔⵠΔ: 226,
    time: 1 / 3,
    ᐃⵠⲆ: 3
  }, {
    r: [[224, 5], [201, 2], [235, 2]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 229,
    ΔΔⵠΔ: 229,
    time: 1 / 5,
    ᐃⵠⲆ: 3
  }, {
    r: [[263, 2]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 297,
    ΔΔⵠΔ: 297,
    time: 1 / 5,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 20]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 264,
    ΔΔⵠΔ: 264,
    time: 0.2,
    ᐃⵠⲆ: 5
  }, {
    r: [[264, 1], [199, 17]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 265,
    ΔΔⵠΔ: 265,
    time: 0.2,
    ᐃⵠⲆ: 5
  }, {
    r: [[265, 1], [202, 14]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 266,
    ΔΔⵠΔ: 266,
    time: 0.2,
    ᐃⵠⲆ: 5
  }, {
    r: [[266, 1], [203, 11]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 267,
    ΔΔⵠΔ: 267,
    time: 1 / 5,
    ᐃⵠⲆ: 5
  }, {
    r: [[267, 1], [212, 8]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 213,
    ΔΔⵠΔ: 213,
    time: 0.2,
    ᐃⵠⲆ: 5
  }, {
    r: [[213, 1], [304, 5]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 327,
    ΔΔⵠΔ: 327,
    time: 1 / 5,
    ᐃⵠⲆ: 5
  }, {
    r: [[200, 30]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 268,
    ΔΔⵠΔ: 268,
    time: 1 / 8,
    ᐃⵠⲆ: 5
  }, {
    r: [[268, 1], [199, 27]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 273,
    ΔΔⵠΔ: 273,
    time: 1 / 8,
    ᐃⵠⲆ: 5
  }, {
    r: [[273, 1], [202, 24]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 274,
    ΔΔⵠΔ: 274,
    time: 1 / 8,
    ᐃⵠⲆ: 5
  }, {
    r: [[274, 1], [203, 21]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 275,
    ΔΔⵠΔ: 275,
    time: 1 / 8,
    ᐃⵠⲆ: 5
  }, {
    r: [[275, 1], [212, 18]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 215,
    ΔΔⵠΔ: 215,
    time: 1 / 8,
    ᐃⵠⲆ: 5
  }, {
    r: [[215, 1], [304, 15]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 328,
    ΔΔⵠΔ: 328,
    time: 1 / 8,
    ᐃⵠⲆ: 5
  }, {
    r: [[264, 1], [200, 40], [199, 30]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 262,
    ΔΔⵠΔ: 262,
    time: 0.05,
    ᐃⵠⲆ: 5
  }, {
    r: [[265, 1], [199, 70]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 270,
    ΔΔⵠΔ: 270,
    time: 1 / 20,
    ᐃⵠⲆ: 5
  }, {
    r: [[266, 1], [202, 40], [199, 30]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 271,
    ΔΔⵠΔ: 271,
    time: 1 / 20,
    ᐃⵠⲆ: 5
  }, {
    r: [[267, 1], [203, 40], [199, 30]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 272,
    ΔΔⵠΔ: 272,
    time: 0.05,
    ᐃⵠⲆ: 5
  }, {
    r: [[213, 1], [212, 40], [199, 30]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 214,
    ΔΔⵠΔ: 214,
    time: 1 / 20,
    ᐃⵠⲆ: 5
  }, {
    r: [[327, 1], [304, 40], [202, 30]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 329,
    ΔΔⵠΔ: 329,
    time: 0.05,
    ᐃⵠⲆ: 5
  }, {
    r: [[268, 1], [200, 80], [199, 60]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 322,
    ΔΔⵠΔ: 322,
    time: 0.05,
    ᐃⵠⲆ: 5
  }, {
    r: [[273, 1], [199, 140]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 323,
    ΔΔⵠΔ: 323,
    time: 0.05,
    ᐃⵠⲆ: 5
  }, {
    r: [[274, 1], [202, 80], [199, 60]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 324,
    ΔΔⵠΔ: 324,
    time: 1 / 20,
    ᐃⵠⲆ: 5
  }, {
    r: [[275, 1], [203, 80], [199, 60]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 325,
    ΔΔⵠΔ: 325,
    time: 1 / 20,
    ᐃⵠⲆ: 5
  }, {
    r: [[215, 1], [212, 80], [199, 60]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 326,
    ΔΔⵠΔ: 326,
    time: 0.05,
    ᐃⵠⲆ: 5
  }, {
    r: [[328, 1], [304, 80], [202, 60]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 330,
    ΔΔⵠΔ: 330,
    time: 0.05,
    ᐃⵠⲆ: 5
  }, {
    r: [[200, 25], [202, 2]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 269,
    ΔΔⵠΔ: 269,
    time: 0.2,
    ᐃⵠⲆ: 4
  }, {
    r: [[211, 1], [2, 1], [263, 2]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 32,
    ΔΔⵠΔ: 32,
    time: 0.2,
    ᐃⵠⲆ: 2
  }, {
    r: [[211, 5], [332, 20], [240, 5], [2, 5]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 33,
    ΔΔⵠΔ: 33,
    time: 1 / 30,
    ᐃⵠⲆ: 2
  }, {
    r: [[346, 1], [341, 8], [342, 8], [332, 8], [263, 6]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 155,
    ΔΔⵠΔ: 155,
    time: 1 / 60,
    ᐃⵠⲆ: 2
  }, {
    r: [[2, 1], [263, 2]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 10,
    ΔΔⵠΔ: 10,
    time: 0.2,
    ᐃⵠⲆ: 2
  }, {
    r: [[10, 1], [276, 5], [263, 4]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 11,
    ΔΔⵠΔ: 11,
    time: 1 / 12,
    ᐃⵠⲆ: 2
  }, {
    r: [[11, 1], [239, 5], [240, 4]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 67,
    ΔΔⵠΔ: 67,
    time: 1 / 30,
    ᐃⵠⲆ: 2
  }, {
    r: [[67, 1], [239, 5], [350, 10], [240, 4]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 161,
    ΔΔⵠΔ: 161,
    time: 1 / 50,
    ᐃⵠⲆ: 2
  }, {
    r: [[200, 50]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 104,
    ΔΔⵠΔ: 104,
    time: 0.2,
    ᐃⵠⲆ: 2
  }, {
    r: [[199, 75], [200, 75], [104, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 34,
    ΔΔⵠΔ: 34,
    time: 0.1,
    ᐃⵠⲆ: 2
  }, {
    r: [[199, 90], [200, 90], [202, 90], [34, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 35,
    ΔΔⵠΔ: 35,
    time: 1 / 20,
    ᐃⵠⲆ: 2
  }, {
    r: [[199, 100], [202, 100], [203, 100], [35, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 36,
    ΔΔⵠΔ: 36,
    time: 1 / 30,
    ᐃⵠⲆ: 2
  }, {
    r: [[212, 80], [202, 150], [203, 120], [36, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 70,
    ΔΔⵠΔ: 70,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 2
  }, {
    r: [[304, 80], [203, 150], [212, 120], [70, 1]],
    w: 1,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 71,
    ΔΔⵠΔ: 71,
    time: 0.011111111111111112,
    ᐃⵠⲆ: 2
  }, {
    r: [[232, 2], [203, 40], [263, 4]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 84,
    ΔΔⵠΔ: 84,
    time: 1 / 20,
    ᐃⵠⲆ: 2
  }, {
    r: [[84, 1], [202, 80], [222, 1], [212, 20]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 83,
    ΔΔⵠΔ: 83,
    time: 0.011111111111111112,
    ᐃⵠⲆ: 2
  }, {
    r: [[305, 5], [203, 50], [240, 5]],
    w: 1,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 29,
    ΔΔⵠΔ: 29,
    time: 0.05,
    ᐃⵠⲆ: 2
  }, {
    r: [[29, 1], [305, 10], [212, 50]],
    w: 1,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 30,
    ΔΔⵠΔ: 30,
    time: 1 / 60,
    ᐃⵠⲆ: 2
  }, {
    r: [[30, 1], [305, 15], [212, 50], [304, 50]],
    w: 1,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 31,
    ΔΔⵠΔ: 31,
    time: 1 / 90,
    ᐃⵠⲆ: 2
  }, {
    r: [[263, 4], [347, 2]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 153,
    ΔΔⵠΔ: 153,
    time: 0.06666666666666667,
    ᐃⵠⲆ: 2
  }, {
    r: [[153, 1], [263, 6], [347, 4], [342, 12], [332, 4]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 154,
    ΔΔⵠΔ: 154,
    time: 1 / 150,
    ᐃⵠⲆ: 2
  }, {
    r: [[263, 6], [276, 5]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 47,
    ΔΔⵠΔ: 47,
    time: 1 / 15,
    ᐃⵠⲆ: 2
  }, {
    r: [[200, 20]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 211,
    ΔΔⵠΔ: 211,
    time: 1 / 3,
    ᐃⵠⲆ: 4
  }, {
    r: [[203, 1], [263, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 240,
    ΔΔⵠΔ: 240,
    time: 1 / 3,
    ᐃⵠⲆ: 4
  }, {
    r: [[202, 10]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 241,
    ΔΔⵠΔ: 241,
    time: 0.2,
    ᐃⵠⲆ: 4
  }, {
    r: [[202, 250]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 260,
    ΔΔⵠΔ: 260,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 261,
    ΔΔⵠΔ: 261,
    time: 0.1,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 15]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 216,
    ΔΔⵠΔ: 216,
    time: 0.2,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 30]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 292,
    ΔΔⵠΔ: 292,
    time: 1 / 5,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 120]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 331,
    ΔΔⵠΔ: 331,
    time: 1 / 15,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 20], [233, 15]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 234,
    ΔΔⵠΔ: 234,
    time: 1 / 5,
    ᐃⵠⲆ: 4
  }, {
    r: [[217, 25]],
    w: 1,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 221,
    ΔΔⵠΔ: 221,
    time: 0.2,
    ᐃⵠⲆ: 3
  }, {
    r: [[221, 1]],
    w: 0,
    f: 0,
    ΔⲆΔ: 1,
    e: 0,
    id: 218,
    ΔΔⵠΔ: 218,
    time: 1 / 5,
    ᐃⵠⲆ: 3
  }, {
    r: [[235, 20], [221, 1]],
    w: 0,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 219,
    ΔΔⵠΔ: 218,
    time: 0.1,
    ᐃⵠⲆ: 3
  }, {
    r: [[221, 1]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 1,
    id: 220,
    ΔΔⵠΔ: 218,
    time: 0.3333333333333333,
    ᐃⵠⲆ: 3
  }, {
    r: [[200, 60], [199, 20], [263, 2]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 228,
    ΔΔⵠΔ: 228,
    time: 1 / 10,
    ᐃⵠⲆ: 4
  }, {
    r: [[203, 40], [199, 45]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 244,
    ΔΔⵠΔ: 244,
    time: 0.05,
    ᐃⵠⲆ: 4
  }, {
    r: [[244, 1], [344, 40], [348, 1]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 245,
    ΔΔⵠΔ: 245,
    time: 1 / 200,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 50], [199, 100]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 246,
    ΔΔⵠΔ: 246,
    time: 0.011111111111111112,
    ᐃⵠⲆ: 4
  }, {
    r: [[199, 60], [202, 120]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 247,
    ΔΔⵠΔ: 247,
    time: 0.011111111111111112,
    ᐃⵠⲆ: 4
  }, {
    r: [[202, 70], [203, 140]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 248,
    ΔΔⵠΔ: 248,
    time: 1 / 90,
    ᐃⵠⲆ: 4
  }, {
    r: [[203, 80], [212, 160]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 249,
    ΔΔⵠΔ: 249,
    time: 1 / 90,
    ᐃⵠⲆ: 4
  }, {
    r: [[212, 90], [304, 180]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 250,
    ΔΔⵠΔ: 250,
    time: 1 / 90,
    ᐃⵠⲆ: 4
  }, {
    r: [[199, 70]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 101,
    ΔΔⵠΔ: 101,
    time: 0.1,
    ᐃⵠⲆ: 0
  }, {
    r: [[199, 70], [200, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 102,
    ΔΔⵠΔ: 102,
    time: 0.1,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 40], [199, 40]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 237,
    ΔΔⵠΔ: 237,
    time: 0.1,
    ᐃⵠⲆ: 4
  }, {
    r: [[236, 1], [208, 1]],
    w: 0,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 238,
    ΔΔⵠΔ: 238,
    time: 1 / 3,
    ᐃⵠⲆ: 3
  }, {
    r: [[240, 30], [286, 1], [212, 150], [242, 3]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 105,
    ΔΔⵠΔ: 105,
    time: 1 / 120,
    ᐃⵠⲆ: 2
  }, {
    r: [[105, 1], [288, 1], [304, 150], [243, 2]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 106,
    ΔΔⵠΔ: 106,
    time: 1 / 180,
    ᐃⵠⲆ: 2
  }, {
    r: [[35, 1], [299, 10], [298, 10], [263, 10]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 107,
    ΔΔⵠΔ: 107,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 2
  }, {
    r: [[240, 20], [287, 1], [212, 150], [242, 3]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 108,
    ΔΔⵠΔ: 108,
    time: 1 / 120,
    ᐃⵠⲆ: 1
  }, {
    r: [[108, 1], [289, 1], [304, 150], [243, 2]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 109,
    ΔΔⵠΔ: 109,
    time: 1 / 180,
    ᐃⵠⲆ: 1
  }, {
    r: [[200, 100], [263, 4]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 119,
    ΔΔⵠΔ: 119,
    time: 0.05,
    ᐃⵠⲆ: 1
  }, {
    r: [[200, 30]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 183,
    ΔΔⵠΔ: 183,
    time: 0.2,
    ᐃⵠⲆ: 1
  }, {
    r: [[199, 200], [263, 8], [332, 4], [119, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 120,
    ΔΔⵠΔ: 120,
    time: 1 / 25,
    ᐃⵠⲆ: 1
  }, {
    r: [[199, 20], [341, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 184,
    ΔΔⵠΔ: 184,
    time: 0.2,
    ᐃⵠⲆ: 1
  }, {
    r: [[202, 200], [263, 12], [341, 4], [332, 4], [120, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 121,
    ΔΔⵠΔ: 121,
    time: 1 / 30,
    ᐃⵠⲆ: 1
  }, {
    r: [[202, 20], [332, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 185,
    ΔΔⵠΔ: 185,
    time: 0.1,
    ᐃⵠⲆ: 1
  }, {
    r: [[203, 200], [240, 10], [341, 8], [332, 8], [121, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 122,
    ΔΔⵠΔ: 122,
    time: 1 / 35,
    ᐃⵠⲆ: 1
  }, {
    r: [[203, 10], [332, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 186,
    ΔΔⵠΔ: 186,
    time: 0.1,
    ᐃⵠⲆ: 1
  }, {
    r: [[212, 200], [240, 10], [332, 8], [342, 8], [122, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 123,
    ΔΔⵠΔ: 123,
    time: 1 / 40,
    ᐃⵠⲆ: 1
  }, {
    r: [[212, 10], [342, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 187,
    ΔΔⵠΔ: 187,
    time: 1 / 15,
    ᐃⵠⲆ: 1
  }, {
    r: [[304, 200], [240, 10], [222, 1], [123, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 124,
    ΔΔⵠΔ: 124,
    time: 1 / 45,
    ᐃⵠⲆ: 1
  }, {
    r: [[304, 10], [342, 1], [305, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 188,
    ΔΔⵠΔ: 188,
    time: 0.06666666666666667,
    ᐃⵠⲆ: 1
  }, {
    r: [[344, 200], [240, 10], [287, 1], [124, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 125,
    ΔΔⵠΔ: 125,
    time: 1 / 50,
    ᐃⵠⲆ: 1
  }, {
    r: [[344, 10], [348, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 189,
    ΔΔⵠΔ: 189,
    time: 1 / 20,
    ᐃⵠⲆ: 1
  }, {
    r: [[200, 100]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 135,
    ΔΔⵠΔ: 135,
    time: 0.04,
    ᐃⵠⲆ: 1
  }, {
    r: [[135, 1], [199, 100], [200, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 136,
    ΔΔⵠΔ: 136,
    time: 1 / 40,
    ᐃⵠⲆ: 1
  }, {
    r: [[136, 1], [202, 50], [199, 50], [200, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 137,
    ΔΔⵠΔ: 137,
    time: 0.02,
    ᐃⵠⲆ: 1
  }, {
    r: [[137, 1], [203, 50], [202, 50], [199, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 138,
    ΔΔⵠΔ: 138,
    time: 0.014285714285714285,
    ᐃⵠⲆ: 1
  }, {
    r: [[138, 1], [212, 50], [203, 50], [202, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 139,
    ΔΔⵠΔ: 139,
    time: 1 / 90,
    ᐃⵠⲆ: 1
  }, {
    r: [[139, 1], [304, 50], [212, 50], [203, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 140,
    ΔΔⵠΔ: 140,
    time: 1 / 120,
    ᐃⵠⲆ: 1
  }, {
    r: [[277, 1], [202, 200]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 150,
    ΔΔⵠΔ: 150,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 2
  }, {
    r: [[278, 1], [202, 200]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 151,
    ΔΔⵠΔ: 151,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 2
  }, {
    r: [[279, 1], [202, 200], [242, 1]],
    w: 1,
    f: 1,
    ΔⲆΔ: 1,
    e: 0,
    id: 152,
    ΔΔⵠΔ: 152,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 2
  }, {
    r: [[276, 10], [2, 5], [263, 6]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 156,
    ΔΔⵠΔ: 156,
    time: 0.1,
    ᐃⵠⲆ: 2
  }, {
    r: [[2, 3], [263, 2]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 157,
    ΔΔⵠΔ: 157,
    time: 0.1,
    ᐃⵠⲆ: 2
  }, {
    r: [[156, 1], [281, 1], [239, 15], [240, 5], [332, 8]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 158,
    ΔΔⵠΔ: 158,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 2
  }, {
    r: [[157, 1], [280, 1], [239, 10], [240, 5], [332, 8]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 159,
    ΔΔⵠΔ: 159,
    time: 0.016666666666666666,
    ᐃⵠⲆ: 2
  }, {
    r: [[283, 1]],
    w: 0,
    f: 0,
    ΔⲆΔ: 1,
    e: 0,
    id: 282,
    ΔΔⵠΔ: 282,
    time: 0.2,
    ᐃⵠⲆ: 0
  }, {
    r: [[200, 20], [263, 1]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 283,
    ΔΔⵠΔ: 283,
    time: 0.2,
    ᐃⵠⲆ: 0
  }, {
    r: [[199, 100], [233, 30]],
    w: 1,
    f: 1,
    ΔⲆΔ: 0,
    e: 0,
    id: 284,
    ΔΔⵠΔ: 284,
    time: 0.1,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 20]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 285,
    ΔΔⵠΔ: 285,
    time: 0.2,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 100], [199, 50], [2, 5], [276, 5], [263, 6]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 300,
    ΔΔⵠΔ: 300,
    time: 0.05,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 250], [240, 10], [239, 2], [232, 2]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 333,
    ΔΔⵠΔ: 333,
    time: 0.02,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 250], [263, 10], [239, 2], [332, 8]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 334,
    ΔΔⵠΔ: 334,
    time: 0.02,
    ᐃⵠⲆ: 4
  }, {
    r: [[263, 10], [276, 6], [2, 4], [217, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 162,
    ΔΔⵠΔ: 162,
    time: 0.05,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 250], [263, 10], [211, 10], [341, 8]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 340,
    ΔΔⵠΔ: 340,
    time: 1 / 50,
    ᐃⵠⲆ: 4
  }, {
    r: [[200, 40]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 167,
    ΔΔⵠΔ: 167,
    time: 1 / 5,
    ᐃⵠⲆ: 1
  }, {
    r: [[167, 1], [199, 40], [200, 50]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 168,
    ΔΔⵠΔ: 168,
    time: 0.1,
    ᐃⵠⲆ: 1
  }, {
    r: [[168, 1], [202, 40], [199, 50], [200, 60]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 169,
    ΔΔⵠΔ: 169,
    time: 0.05,
    ᐃⵠⲆ: 1
  }, {
    r: [[169, 1], [203, 40], [202, 70], [199, 80]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 170,
    ΔΔⵠΔ: 170,
    time: 1 / 30,
    ᐃⵠⲆ: 1
  }, {
    r: [[170, 1], [212, 40], [203, 70], [202, 110]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 171,
    ΔΔⵠΔ: 171,
    time: 1 / 60,
    ᐃⵠⲆ: 1
  }, {
    r: [[171, 1], [304, 50], [212, 80], [203, 110]],
    w: 1,
    f: 0,
    ΔⲆΔ: 0,
    e: 0,
    id: 172,
    ΔΔⵠΔ: 172,
    time: 1 / 90,
    ᐃⵠⲆ: 1
  }];
  for (let v732 = 0; v732 < v731.length; v732++) {
    v730[v731[v732].id] = v731[v732];
  }
  v584 = 2000;
  const v733 = 20;
  const v734 = 15;
  ;
  ΔᐃΔᐃ = {
    ᐃᐃⵠΔᐃΔΔ: 2000,
    ⲆⵠⵠᐃⲆᐃⲆ: 2001,
    ⵠᐃⲆⵠⵠⲆⵠ: 2002,
    ΔᐃⲆΔᐃᐃⲆ: 2003,
    ⵠⵠⲆΔΔΔⵠ: 2004,
    ⵠΔᐃᐃⲆⲆΔ: 2005,
    ⵠᐃΔᐃⵠΔΔ: 2006,
    ᐃⲆⲆᐃⲆⵠⲆ: 2007,
    ⲆΔⲆΔᐃᐃⵠ: 2008,
    ⲆΔᐃᐃᐃᐃΔ: 2009,
    ⲆΔᐃⲆᐃᐃⵠ: 2010,
    ΔᐃⲆΔᐃⲆΔ: 2011,
    EMPTY: 2012,
    ᐃΔΔΔΔΔΔ: 2013,
    ⲆᐃᐃᐃⲆᐃᐃ: 2014,
    ⵠΔⲆΔⵠⵠⲆ: 2015,
    ⲆΔⲆᐃΔᐃΔ: 2016,
    ⲆᐃⲆΔᐃΔᐃ: 2017,
    ⲆΔⵠΔᐃΔⲆ: 2018,
    ᐃⵠᐃΔΔⲆΔ: 2019,
    ⵠⵠᐃΔⲆᐃᐃ: 2020,
    ⵠⲆᐃⵠⲆᐃⲆ: 2021,
    ΔᐃΔΔᐃⲆⲆ: 2022,
    ΔᐃᐃΔΔΔᐃ: 2023,
    ΔⲆⲆΔΔ: 2024,
    ⵠⲆᐃⲆΔᐃⵠ: 2025,
    ⲆΔΔⲆⵠΔᐃ: 2026,
    ᐃΔⵠⲆΔⲆᐃ: 2027,
    ⲆᐃᐃⲆⵠⲆⲆ: 2028,
    ΔΔΔⲆⵠⲆᐃ: 2029,
    ΔᐃⲆⲆΔⵠⵠ: 2030,
    ᐃⲆⵠⵠⲆⲆᐃ: 2031,
    POINTS: 2032,
    ᐃⵠⵠΔⲆⵠⵠ: 2033,
    ⵠⵠΔᐃⲆᐃΔ: 2034,
    ΔⵠⲆⵠⵠᐃΔ: 2035,
    ⲆᐃⲆᐃⲆⲆⲆ: 2036,
    ⵠᐃΔⵠⵠᐃᐃ: 2037,
    ⵠᐃᐃⵠΔΔⲆ: 2038,
    ᐃⵠⲆⲆΔᐃᐃ: 2039,
    ⵠΔᐃᐃⵠⵠᐃ: 2040,
    ΔⲆⲆΔⲆΔⲆ: 2041,
    ᐃⲆⵠⵠᐃᐃᐃ: 2042,
    ⵠⵠᐃⲆⵠᐃⲆ: 2043
  };
  function f72() {
    v751[172] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    v751[171] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    v751[170] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    v751[169] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    v751[168] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    v751[167] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    v751[246] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    v751[247] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    v751[248] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    v751[249] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    v751[250] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    v751[140] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    v751[139] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    v751[138] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    v751[137] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    v751[136] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    v751[135] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    v751[102] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    v751[331] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    v751[189] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    v751[125] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    v751[188] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    v751[124] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    v751[187] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    v751[123] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    v751[186] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    v751[122] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    v751[185] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    v751[121] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    v751[184] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    v751[120] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    v751[183] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    v751[119] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    v751[245] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    v751[347] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    v751[350] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    v751[342] = ["Vulture Feather", "From a deadly vulture"];
    v751[344] = ["Emerald", "How many golden breads can you get from it?"];
    v751[348] = ["Sand Worm Juice", "I don't want to know how you got this."];
    v751[153] = ["Turban", "Useful to survive in the desert."];
    v751[154] = ["Ninja outfit", "Essential to survive in the desert"];
    v751[155] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    v751[346] = ["Pilot Glasses"];
    v751[335] = ["Tamed Boar", "Fast on lands and slow on water."];
    v751[358] = ["Tamed Golden Hen", "So fast, even lag can't keep up."];
    v751[349] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    v751[336] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    v751[337] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    v751[338] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    v751[339] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    v751[354] = ["Tamed Parrot", "You can fly with it.", "When you are flying,", "you can only hit people who are flying too"];
    v751[355] = ["Tamed Vulture", "You can fly with it.", "When you are flying,", "you can only hit people who are flying too"];
    v751[162] = ["Saddle", "Hit a boar with it to tame it."];
    v751[163] = ["Witch Hat", "You're a wizard Starvy!"];
    v751[164] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    v751[165] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    v751[166] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    v751[182] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    v751[33] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    v751[334] = ["Sled", "You are faster with it in the snow"];
    v751[333] = ["Boat", "You are faster with it in the water"];
    v751[340] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    v751[66] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    v751[332] = ["Penguin Feather", "From a deadly cute penguin."];
    v751[341] = ["Hawk Feather", "From a deadly hawk."];
    v751[343] = ["Cactus", "Food : 20", "Water : 10"];
    v751[321] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    v751[320] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    v751[319] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    v751[318] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    v751[328] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    v751[327] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    v751[329] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    v751[330] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    v751[50] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    v751[322] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    v751[323] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    v751[324] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    v751[325] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    v751[326] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    v751[315] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    v751[317] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    v751[314] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    v751[316] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    v751[99] = ["Pitchfork", "Perfect for gathering"];
    v751[100] = ["Golden Pitchfork", "Essential for a real farmer."];
    v751[345] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    v751[v588.ᐃⲆⵠⲆᐃΔⵠ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    v751[v588.ᐃⵠⵠⲆᐃⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    v751[v588.ⵠⵠΔΔᐃⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    v751[v588.ⵠᐃΔⵠⲆⲆⲆ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    v751[v588.ⲆⲆΔᐃⵠⲆᐃ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    v751[288] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    v751[289] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    v751[109] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    v751[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    v751[243] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    v751[106] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    v751[61] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    v751[28] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    v751[305] = ["Flame", "It's hot!"];
    v751[29] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    v751[30] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    v751[31] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    v751[304] = ["Reidite", "The ultimate ore"];
    v751[286] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    v753[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    v753[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    v753[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    v753[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    v753[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    v753[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    v753[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    v753[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    v753[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    v753[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    v753[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    v753[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    v753[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    v753[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    v753[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    v753[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    v753[38] = ["You died crushed by an angry baby mammoth."];
    v753[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    v753[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    v753[41] = ["While trying to wrestle with a crocodile, you learned the hard way that its jaws have the force of a thousand nightmares. You were dragged into the swamp, and now you're part of the ecosystem."];
    v753[42] = ["A parrot swooped down, pecked at your face, and squawked insults at you in fluent pirate lingo. You died of humiliation and a surprising amount of blood loss."];
    v753[43] = ["The ocelot pounced on you with cat-like grace. Before you knew it, you were clawed, chewed, and left as a snack for its cubs. At least someone appreciates you."];
    v753[44] = ["The golden hen, faster than your thoughts, pecked at your pride and then your face. Unable to keep up with its legendary speed, you collapsed, humiliated, as it performed victory laps around your lifeless body. Your soul whispers, 'Why did I even try?'"];
    v751[298] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    v751[2041] = "A sandstorm is approaching in a few seconds.";
    v751[2040] = "The sandstorm will soon stop.";
    v751[2043] = "A blizzard is approaching in a few seconds.";
    v751[2042] = "The blizzard will soon stop.";
    v751[2028] = " BACK TO THE GAME";
    v751[2029] = " Share on Twitter";
    v751[2030] = " Share on Facebook";
    v751[2031] = "You can buy items on the shop in the next game with your points";
    v751[2032] = "points";
    v751[2033] = "Score";
    v751[2034] = "Kill";
    v751[2035] = "Days survived";
    v751[2036] = "Building method: Free. Press G to change";
    v751[2037] = "Building method: Grid. Press G to change";
    v751[299] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    v751[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    v751[107] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    v751[300] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    v751[173] = ["Emerald Axe", "Shines bright, cuts light!"];
    v751[174] = ["Copper Axe", "Not the sharpest tool, but it gets the job done"];
    v751[175] = ["Iron Axe", "Strong and reliable, like your favorite boots"];
    v751[176] = ["Topaz Axe", "Chop trees with a golden gleam"];
    v751[177] = ["Sapphire Axe", "Cuts through wood like water"];
    v751[178] = ["Jade Axe", "Green means go... for chopping!"];
    v751[179] = ["Ruby Axe", "Red-hot lumberjack action"];
    v751[180] = ["Coal Axe", "It's a bit dusty but does the job"];
    v751[181] = ["Aquamarine Axe", "Make waves in the forest"];
    v751[141] = ["Emerald Shield", "Reflects envy and enemy attacks", "You can not attack when you use it"];
    v751[142] = ["Copper Shield", "Budget protection at its finest", "You can not attack when you use it"];
    v751[143] = ["Iron Shield", "Heavy metal defense", "You can not attack when you use it"];
    v751[144] = ["Topaz Shield", "Guard yourself with a touch of class", "You can not attack when you use it"];
    v751[145] = ["Sapphire Shield", "Blue is the color of safety", "You can not attack when you use it"];
    v751[146] = ["Jade Shield", "Defend with green grace", "You can not attack when you use it"];
    v751[147] = ["Ruby Shield", "Stops attacks dead in their tracks", "You can not attack when you use it"];
    v751[148] = ["Coal Shield", "Not the best idea, but okay", "You can not attack when you use it"];
    v751[149] = ["Aquamarine Shield", "Dive into defense", "You can not attack when you use it"];
    v751[190] = ["Emerald Arrow", "For when regular arrows just don't cut it"];
    v751[191] = ["Copper Arrow", "Cheap shots never felt so good"];
    v751[192] = ["Iron Arrow", "Piercing through armor and egos"];
    v751[193] = ["Topaz Arrow", "Hits the mark with a sparkle"];
    v751[194] = ["Sapphire Arrow", "Blue streak of doom"];
    v751[195] = ["Jade Arrow", "Nature's way of saying 'gotcha!'"];
    v751[196] = ["Ruby Arrow", "Redefine 'pointy things'"];
    v751[197] = ["Coal Arrow", "Santa's favorite projectile"];
    v751[198] = ["Aquamarine Arrow", "Make a splash in archery"];
    v751[126] = ["Emerald Bow", "Envy of every archer", "Requires appropriate arrows to be used"];
    v751[127] = ["Copper Bow", "Not worth much, but still shoots", "Requires appropriate arrows to be used"];
    v751[128] = ["Iron Bow", "Heavy but reliable", "Requires appropriate arrows to be used"];
    v751[129] = ["Topaz Bow", "Shoots with a golden glow", "Requires appropriate arrows to be used"];
    v751[130] = ["Sapphire Bow", "Bow down to the blue", "Requires appropriate arrows to be used"];
    v751[131] = ["Jade Bow", "Green means go—for arrows", "Requires appropriate arrows to be used"];
    v751[132] = ["Ruby Bow", "Red alert: enemies beware", "Requires appropriate arrows to be used"];
    v751[133] = ["Coal Bow", "Fires up your shots", "Requires appropriate arrows to be used"];
    v751[134] = ["Aquamarine Bow", "Make waves from afar", "Requires appropriate arrows to be used"];
    v751[19] = ["Emerald Spear", "Poke with the power of green"];
    v751[20] = ["Copper Spear", "Affordable pointy stick"];
    v751[21] = ["Iron Spear", "Trusty thrusty weapon"];
    v751[22] = ["Topaz Spear", "Stab with sparkle"];
    v751[23] = ["Sapphire Spear", "Blue-tipped for extra coolness"];
    v751[24] = ["Jade Spear", "Spear of natural beauty"];
    v751[25] = ["Ruby Spear", "Red tip, sharp wit"];
    v751[26] = ["Coal Spear", "Not the brightest idea"];
    v751[27] = ["Aquamarine Spear", "Pierce with the power of the sea"];
    v751[110] = ["Emerald Sword", "Cutting edge of envy"];
    v751[111] = ["Copper Sword", "Shiny but soft"];
    v751[112] = ["Iron Sword", "A classic choice"];
    v751[113] = ["Topaz Sword", "Slice with a golden touch"];
    v751[114] = ["Sapphire Sword", "Blue blade of bravery"];
    v751[115] = ["Jade Sword", "Green means keen"];
    v751[116] = ["Ruby Sword", "Redefining sharpness"];
    v751[117] = ["Coal Sword", "Swing with soot"];
    v751[118] = ["Aquamarine Sword", "Sword with a splash"];
    v751[73] = ["Emerald Hammer", "Smash with class"];
    v751[74] = ["Copper Hammer", "For all your basic smashing needs"];
    v751[75] = ["Iron Hammer", "Hammer time!"];
    v751[76] = ["Topaz Hammer", "Break things in style"];
    v751[77] = ["Sapphire Hammer", "Hits like a tidal wave"];
    v751[78] = ["Jade Hammer", "Green means smash"];
    v751[79] = ["Ruby Hammer", "Redefining demolition"];
    v751[80] = ["Coal Hammer", "When all you have is a hammer..."];
    v751[81] = ["Aquamarine Hammer", "Make a splash in demolition"];
    v751[90] = ["Emerald Shovel", "Dig the ground to gather resources"];
    v751[91] = ["Copper Shovel", "Dig the ground to gather resources"];
    v751[92] = ["Iron Shovel", "Dig the ground to gather resources"];
    v751[93] = ["Topaz Shovel", "Dig the ground to gather resources"];
    v751[94] = ["Sapphire Shovel", "Dig the ground to gather resources"];
    v751[95] = ["Jade Shovel", "Dig the ground to gather resources"];
    v751[96] = ["Ruby Shovel", "Dig the ground to gather resources"];
    v751[97] = ["Coal Shovel", "Dig the ground to gather resources"];
    v751[98] = ["Aquamarine Shovel", "Dig the ground to gather resources"];
    v751[51] = ["Emerald Pickaxe", "Mining with a touch of envy"];
    v751[52] = ["Copper Pickaxe", "A penny saved is a penny earned"];
    v751[53] = ["Iron Pickaxe", "Standard issue mining gear"];
    v751[54] = ["Topaz Pickaxe", "Sparkling digs"];
    v751[55] = ["Sapphire Pickaxe", "Digging deep blue"];
    v751[56] = ["Jade Pickaxe", "Green thumb for mining"];
    v751[57] = ["Ruby Pickaxe", "Red-hot mining action"];
    v751[58] = ["Coal Pickaxe", "Black gold digger"];
    v751[59] = ["Aquamarine Pickaxe", "Dive into the depths"];
    v751[251] = ["Emerald Extractor", "Can produce emerald with wood", "It takes 10 seconds to drill Emerald"];
    v751[252] = ["Copper Extractor", "Can produce copper with wood", "It takes 10 seconds to drill Copper"];
    v751[253] = ["Iron Extractor", "Can produce iron with wood", "It takes 10 seconds to drill Iron"];
    v751[254] = ["Topaz Extractor", "Can produce topaz with wood", "It takes 10 seconds to drill Topaz"];
    v751[255] = ["Sapphire Extractor", "Can produce sapphire with wood", "It takes 10 seconds to drill Sapphire"];
    v751[256] = ["Jade Extractor", "Can produce jade with wood", "It takes 10 seconds to drill Jade"];
    v751[257] = ["Ruby Extractor", "Can produce ruby with wood", "It takes 10 seconds to drill Ruby"];
    v751[258] = ["Coal Extractor", "Can produce coal with wood", "It takes 10 seconds to drill Coal"];
    v751[259] = ["Aquamarine Extractor", "Can produce aquamarine with wood", "It takes 10 seconds to drill Aquamarine"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var v735 = 0; v735 < 7; v735++) {
      document.getElementById("claim_reward_" + v735).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    v751[7] = ["Hand"];
    v751[233] = ["Dirt", "Dirty!"];
    v751[217] = ["Sand", "I got it in my eyes!"];
    v751[200] = ["Wood", "You can't get enough of it!"];
    v751[199] = ["Stone", "Also called a rock"];
    v751[202] = ["Gold", "Be generous, give it to others"];
    v751[203] = ["Diamond", "What will you make with it?"];
    v751[212] = ["Amethyst", "It's Mauve like Lapa"];
    v751[224] = ["Flour", "Used in cooking"];
    v751[226] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    v751[229] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    v751[207] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    v751[208] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    v751[230] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    v751[231] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    v751[236] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    v751[238] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    v751[302] = ["Candies", "Only for children!", "Food: 20"];
    v751[301] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    v751[303] = ["Garland", "Perfect decoration for roofs"];
    v751[206] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    v751[201] = ["Berry", "Berry tasty!", "Food: 10"];
    v751[225] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    v751[227] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    v751[290] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    v751[291] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    v751[293] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    v751[294] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    v751[295] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    v751[296] = ["Thorn bush", "It stings!"];
    v751[234] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    v751[235] = ["Ice", "Useful for making cakes and water"];
    v751[101] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    v751[276] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    v751[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    v751[280] = ["Pure Fur", "You're a bread factory"];
    v751[281] = ["Dark Fur", "You get ready to do something wrong"];
    v751[239] = ["Winter Fur", "These animals just wanted a hug..."];
    v751[232] = ["Scales", "It smells like fish!"];
    v751[222] = ["Kraken Skin", "Weren't you too scared?"];
    v751[353] = ["Ocelot Fur", "Now you can make a stylish jungle outfit."];
    v751[351] = ["Crocodile Scales", "Congrats, you defeated a prehistoric handbag!"];
    v751[352] = ["Parrot Feather", "Polly's not going to want a cracker after this..."];
    v751[204] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    v751[209] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    v751[205] = ["Workbench", "Very useful to craft all kinds of objects"];
    v751[263] = ["Cord", "Used in crafting Hats and Bag"];
    v751[240] = ["Diamond Cord", "Used in crafting Special Hats"];
    v751[269] = ["Chest", "Allows you to store items", "Durability: 500"];
    v751[103] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    v751[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    v751[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    v751[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    v751[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    v751[48] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    v751[108] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    v751[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    v751[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    v751[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    v751[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    v751[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    v751[49] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    v751[62] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    v751[63] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    v751[64] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    v751[65] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    v751[72] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    v751[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    v751[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    v751[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    v751[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    v751[60] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    v751[82] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    v751[86] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    v751[87] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    v751[88] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    v751[89] = ["Reidite Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    v751[104] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    v751[34] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    v751[35] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    v751[36] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    v751[70] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    v751[71] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    v751[105] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    v751[37] = ["Emerald Helmet", "A gem of protection, dazzling and strong."];
    v751[38] = ["Copper Helmet", "You’re prepared for whatever comes your way"];
    v751[39] = ["Iron Helmet", "Your resolve is as strong as iron"];
    v751[40] = ["Topaz Helmet", "You are ready to shine brighter than ever"];
    v751[41] = ["Sapphire Helmet", "Ice-cold style for your survival selfies."];
    v751[42] = ["Jade Helmet", "Green armor that screams 'I farmed too much!'"];
    v751[43] = ["Ruby Helmet", "Red, shiny, and intimidating to berry thieves."];
    v751[44] = ["Coal Helmet", "For when you want to keep your head warm in the mines."];
    v751[45] = ["Aquamarine Helmet", "Dive deep in style, or just flex near the water."];
    v751[32] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    v751[68] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    v751[69] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    v751[156] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    v751[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    v751[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    v751[67] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    v751[161] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    v751[157] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    v751[158] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    v751[159] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    v751[84] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    v751[83] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    v751[287] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    v751[242] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    v751[277] = ["Green Gemstone", "You didn't cheat, promise?"];
    v751[278] = ["Orange Gemstone", "Only a real pirate can find it!"];
    v751[279] = ["Blue Gemstone", "For too kind people"];
    v751[150] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    v751[151] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    v751[152] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    v751[282] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    v751[283] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    v751[218] = ["Bottle", "Allows you to drink water anywhere (using water)", "Water: 50"];
    v751[219] = ["Bottle", "Allows you to drink water anywhere (using ice)", "Water: 50"];
    v751[220] = ["Bottle", "Allows you to drink water anywhere (using well)", "Water: 50"];
    v751[221] = ["Empty Bottle", "You can fill this bottle near a water source"];
    v751[223] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    v751[85] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    v751[47] = ["Bag", "More space for your items!"];
    v751[211] = ["Paper", "Used in book-crafting"];
    v751[46] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    v751[297] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    v751[241] = ["Lock", "Allow you to lock your chest"];
    v751[260] = ["Lock-pick", "Allows you to unlock one chest"];
    v751[261] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    v751[216] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    v751[285] = ["Sign", "Leave a message to others", "Durability: 200"];
    v751[292] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    v751[284] = ["Well", "Allows bottle filling", "Durability: 1000"];
    v751[264] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    v751[265] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    v751[266] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    v751[267] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    v751[213] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    v751[262] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    v751[270] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    v751[271] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    v751[272] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    v751[214] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    v751[268] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    v751[273] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    v751[274] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    v751[275] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    v751[215] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    v751[210] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    v751[228] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    v751[237] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    v751[244] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    v751[306] = ["Copper", "Not gold, but still better than wood"];
    v751[307] = ["Iron", "Strong enough to make a decent hat"];
    v751[308] = ["Topaz", "Yellow gem that dreams of being the sun"];
    v751[309] = ["Sapphire", "Blue, shiny, and better than fish tears"];
    v751[310] = ["Jade", "Green stone, a favorite of picky penguins"];
    v751[311] = ["Ruby", "Red gem hotter than your campfire"];
    v751[312] = ["Coal", "Fuel your fire or your disappointment"];
    v751[313] = ["Aquamarine", "Ocean vibes without the drowning"];
    v751[356] = ["Banana", "A tasty treat to fill your belly!"];
    v751[357] = ["Banana Seed", "Grows into Banana", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    v751[2000] = "You cannot join this server";
    v751[2001] = "Kicked: ";
    v751[2002] = "Your key is already used by someone else";
    v751[2003] = "Your key is wrong";
    v751[2004] = "You have an old version, you need to clear your cache";
    v751[2038] = "Your client version is too recent for this server. The server is being updated";
    v751[2039] = "Wrong password! To enter a password: https://starve.io/?password=...";
    v751[2005] = "There are no more new resources";
    v751[2006] = "You survived 1 day";
    v751[2007] = "You survived ";
    v751[2008] = " days";
    v751[2009] = "You are dead ;-;";
    v751[2010] = "Server cannot find spawn location! Spam the play button!";
    v751[2011] = "Server is full! Spam the play button!";
    v751[2012] = "Resource is empty";
    v751[2013] = "Inventory is full (right-click to empty items)";
    v751[2014] = " is dead";
    v751[2015] = "This is not the right tool";
    v751[2016] = "You joined a team";
    v751[2017] = "You are dead";
    v751[2018] = " joined the team";
    v751[2019] = "Your team was destroyed";
    v751[2020] = "You left the team";
    v751[2021] = " left the team";
    v751[2022] = "Someone stole your token :>";
    v751[2023] = "Choose a server";
    v751[2024] = "players";
    v751[2025] = "total players";
    v751[2026] = "players on this mode";
    v751[2027] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    v753[0] = ["You were killed for no reason"];
    v753[1] = ["You starved to death, as the name of the game implies"];
    v753[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    v753[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    v753[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    v753[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    v753[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    v753[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    v753[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    v753[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    v753[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    v753[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    v753[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    v753[13] = ["You died of thirst. Better drink your own piss."];
    v753[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    v753[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    v753[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    v753[17] = ["Your skin's falling apart, the sun killed you."];
    v753[18] = ["Garlic stored in your pockets boiled your brain."];
    v753[19] = ["As a vampire, don't stand near the garlic cloves."];
    v753[20] = ["You ate garlic as a vampire, what did you expect?"];
    v753[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ⵠᐃⵠⵠⲆᐃⲆ = "Uuunnnggg";
    ΔⵠΔΔⵠᐃΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const v736 = 0;
  const v737 = 12;
  function f73() {
    v751[286] = ["You feel a great power emanating from this orb"];
    v753[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    v751[298] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    v751[2028] = " BACK TO THE GAME";
    v751[2029] = " Share on Twitter";
    v751[2030] = " Share on Facebook";
    v751[2031] = "You can buy items on the shop in the next game with your points";
    v751[2032] = "points";
    v751[2033] = "Score";
    v751[2034] = "Kill";
    v751[2035] = "Days survived";
    v751[2036] = "Building method: Free. Press G to change";
    v751[2037] = "Building method: Grid. Press G to change";
    v751[299] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    v751[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    v751[107] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    v751[300] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var v738 = 0; v738 < 7; v738++) {
      document.getElementById("claim_reward_" + v738).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    v751[7] = ["Рука"];
    v751[233] = ["Земля", "Грязно!"];
    v751[217] = ["Песок", "Он в моих глазах!"];
    v751[200] = ["Дерево", "Постоянно нужно больше!"];
    v751[199] = ["Камень", "Твердый"];
    v751[202] = ["Золото", "Будьте щедры, давайте его другим"];
    v751[203] = ["Алмаз", "Что вы создадите с помощью него?"];
    v751[212] = ["Аметист", "Он сиреневый, как Lapa"];
    v751[224] = ["Мука", "Используется в готовке"];
    v751[226] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    v751[229] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    v751[207] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    v751[208] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    v751[230] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    v751[231] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    v751[236] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    v751[238] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    v751[302] = ["Конфеты", "Только для детей!", "Еда: 20"];
    v751[301] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    v751[303] = ["Гирлянда", "Прекрасная декорация для крыши"];
    v751[206] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    v751[201] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    v751[225] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    v751[227] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    v751[290] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    v751[291] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    v751[293] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    v751[294] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    v751[295] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    v751[296] = ["Колючий Куст", "Это больно!"];
    v751[234] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    v751[235] = ["Лёд", "Используется для изготовления тортов и воды"];
    v751[101] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    v751[276] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    v751[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    v751[280] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    v751[281] = ["Чёрная Шкура", "Вы готовы делать зло."];
    v751[239] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    v751[232] = ["Чешуя", "Она пахнет рыбой!"];
    v751[222] = ["Шкура Кракена", "Вы не испугались?"];
    v751[204] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    v751[209] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    v751[205] = ["Верстак", "Необходим для создания многих предметов"];
    v751[263] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    v751[240] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    v751[269] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    v751[103] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    v751[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    v751[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    v751[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    v751[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    v751[48] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    v751[108] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    v751[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    v751[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    v751[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    v751[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    v751[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    v751[49] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    v751[62] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    v751[63] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    v751[64] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    v751[65] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    v751[72] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    v751[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    v751[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    v751[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    v751[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    v751[60] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    v751[82] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    v751[86] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    v751[87] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    v751[88] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    v751[104] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    v751[34] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    v751[35] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    v751[36] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    v751[70] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    v751[105] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    v751[32] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    v751[68] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    v751[69] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    v751[156] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    v751[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    v751[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    v751[67] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    v751[157] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    v751[158] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    v751[159] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    v751[84] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    v751[83] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    v751[287] = ["Шар Дракона", "Даётся за квест"];
    v751[242] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    v751[277] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    v751[278] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    v751[279] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    v751[150] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    v751[151] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    v751[152] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    v751[282] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    v751[283] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    v751[218] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    v751[221] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    v751[223] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    v751[85] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    v751[47] = ["Рюкзак", "Больше места для ваших предметов!"];
    v751[211] = ["Бумага", "Используется при создании книги"];
    v751[46] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    v751[297] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    v751[241] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    v751[260] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    v751[261] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    v751[216] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    v751[285] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    v751[292] = ["Крыша", "Немного скрывает вас и согревает!"];
    v751[284] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    v751[264] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    v751[265] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    v751[266] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    v751[267] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    v751[213] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    v751[262] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    v751[270] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    v751[271] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    v751[272] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    v751[214] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    v751[268] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    v751[273] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    v751[274] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    v751[275] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    v751[215] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    v751[210] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    v751[228] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    v751[237] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    v751[244] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    v751[2000] = "Вы не можете зайти на этот сервер";
    v751[2001] = "Выгнаны: ";
    v751[2002] = "Ваш ключ уже используется кем-то";
    v751[2003] = "Ваш ключ неправильный";
    v751[2004] = "У вас старая версия, вам нужно очистить кеш";
    v751[2005] = "Ресурсов больше нет";
    v751[2006] = "Вы выжили 1 день";
    v751[2007] = "Вы выжили ";
    v751[2008] = " дней";
    v751[2009] = "Вы умерли ;-;";
    v751[2010] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    v751[2011] = "Сервер заполнен! Спамьте кнопку играть!";
    v751[2012] = "Ресурсы закончились";
    v751[2013] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    v751[2014] = " умер";
    v751[2015] = "Это не тот инструмент";
    v751[2016] = "Вы вошли в команду";
    v751[2017] = "Вы умерли";
    v751[2018] = " вошёл в команду";
    v751[2019] = "Ваша команда была разрушена";
    v751[2020] = "Вы покинули команду";
    v751[2021] = " покинул команду";
    v751[2022] = "Кто-то использует ваш токен :>";
    v751[2023] = "Выберите сервер";
    v751[2024] = "игроков";
    v751[2025] = "игроков всего";
    v751[2026] = "игроков в этом режиме";
    v751[2027] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    v753[0] = ["Вы были убиты без причины"];
    v753[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    v753[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    v753[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    v753[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    v753[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    v753[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    v753[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    v753[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    v753[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    v753[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    v753[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    v753[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    v753[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    v753[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    v753[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    v753[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    v753[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    v753[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    v753[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    v753[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    v753[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ⵠᐃⵠⵠⲆᐃⲆ = "Uuunnnggg";
    ΔⵠΔΔⵠᐃΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function f74() {
    v751[286] = ["You feel a great power emanating from this orb"];
    v753[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    v751[298] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    v751[2028] = " BACK TO THE GAME";
    v751[2029] = " Share on Twitter";
    v751[2030] = " Share on Facebook";
    v751[2031] = "You can buy items on the shop in the next game with your points";
    v751[2032] = "points";
    v751[2033] = "Score";
    v751[2034] = "Kill";
    v751[2035] = "Days survived";
    v751[2036] = "Building method: Free. Press G to change";
    v751[2037] = "Building method: Grid. Press G to change";
    v751[299] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    v751[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    v751[107] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    v751[300] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var v739 = 0; v739 < 7; v739++) {
      document.getElementById("claim_reward_" + v739).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    v751[7] = ["mão"];
    v751[233] = ["terra", "está sujo!"];
    v751[217] = ["areia", "entrou nos meus olhos!"];
    v751[200] = ["madeira", "você não pode pegar o suficiente disso!"];
    v751[199] = ["pedra", "também chamado rocha"];
    v751[202] = ["ouro", "seja generoso, dê para outros"];
    v751[203] = ["diamante", "o que você irá fazer com isso?"];
    v751[212] = ["ametista", "é mauve como lapa"];
    v751[224] = ["farinha", "usada na cozinha"];
    v751[226] = ["biscoito", "biscoito da vovó", "comida: 50"];
    v751[229] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    v751[207] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    v751[208] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    v751[230] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    v751[231] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    v751[236] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    v751[238] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    v751[302] = ["doces", "apenas para crianças!", "comida: 100"];
    v751[301] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    v751[303] = ["pisca-pisca", "decoração perfeita de telhado"];
    v751[206] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    v751[201] = ["berry", "Berry saborosa!", "comida: 10"];
    v751[225] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    v751[227] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    v751[290] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    v751[291] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    v751[293] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    v751[294] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    v751[295] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    v751[296] = ["mato de espinhos", "pica!"];
    v751[234] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    v751[235] = ["gelo", "útil para fazer bolo e água"];
    v751[101] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    v751[276] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    v751[2] = ["pele de coelho", "o coelho era tão fofo..."];
    v751[280] = ["pele pura", "você é uma fábrica de pão"];
    v751[281] = ["pele negra", "você está pronto para fazer algo errado"];
    v751[239] = ["pele de inverno", "ele só queria um abraço"];
    v751[232] = ["escala", "é pequeno como peixe!"];
    v751[222] = ["pele do kraken", "você não está com medo?"];
    v751[204] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    v751[209] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    v751[205] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    v751[263] = ["linha", "usada para fazer chapéus e mochila"];
    v751[240] = ["linha de diamante", "usada para fazer chapéus especiais"];
    v751[269] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    v751[103] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    v751[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    v751[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    v751[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    v751[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    v751[48] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    v751[108] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    v751[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    v751[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    v751[v588.ᐃⲆⲆⵠⵠⲆᐃᐃⵠ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    v751[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    v751[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    v751[49] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    v751[62] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    v751[63] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    v751[64] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    v751[65] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    v751[72] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    v751[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    v751[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    v751[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    v751[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    v751[60] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    v751[82] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    v751[86] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    v751[87] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    v751[88] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    v751[104] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    v751[34] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    v751[35] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    v751[36] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    v751[70] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    v751[105] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    v751[32] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    v751[68] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    v751[69] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    v751[156] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    v751[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    v751[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    v751[67] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    v751[157] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    v751[158] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    v751[159] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    v751[84] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    v751[83] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    v751[287] = ["esfera do dragão", "dado na questt"];
    v751[242] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    v751[277] = ["pedra verde", "você não vai trapacear, promete?"];
    v751[278] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    v751[279] = ["pedra azul", "para pessoas muito gentis"];
    v751[150] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    v751[151] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    v751[152] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    v751[282] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    v751[283] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    v751[218] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    v751[221] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    v751[223] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    v751[85] = ["regador", "permite regar as plantas", "dano: 1"];
    v751[47] = ["mochila", "mais espaço para seus itens!"];
    v751[211] = ["papel", "usado para fazer o livro"];
    v751[46] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    v751[297] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    v751[241] = ["fechadura", "permite você trancar seu baú"];
    v751[260] = ["chave", "permite destrancar um baú"];
    v751[261] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    v751[216] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    v751[285] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    v751[292] = ["telhado", "esconde você um pouco e te esquenta!"];
    v751[284] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    v751[264] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    v751[265] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    v751[266] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    v751[267] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    v751[213] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    v751[262] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    v751[270] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    v751[271] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    v751[272] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    v751[214] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    v751[268] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    v751[273] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    v751[274] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    v751[275] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    v751[215] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    v751[210] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    v751[228] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    v751[237] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    v751[244] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    v751[2000] = "você não pode entrar no servidor";
    v751[2001] = "kickado: ";
    v751[2002] = "sua chave está em uso por outra pessoa";
    v751[2003] = "sua chave está errada";
    v751[2004] = "você tem uma versão velha, limpe seu cache";
    v751[2005] = "não tem mais recursos";
    v751[2006] = "você sobreviveu 1 dia";
    v751[2007] = "você sobreviveu ";
    v751[2008] = " dias";
    v751[2009] = "você está morto ;-;";
    v751[2010] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    v751[2011] = "servidor está cheio! spam o botão de play!";
    v751[2012] = "não tem recursos";
    v751[2013] = "inventário está cheio (botão direito para deletar itens)";
    v751[2014] = " está morto";
    v751[2015] = "essa não é a ferramenta certa";
    v751[2016] = "você entrou no time";
    v751[2017] = "você está morto";
    v751[2018] = "entrou no time";
    v751[2019] = "seu time foi destruido";
    v751[2020] = "você saiu do time";
    v751[2021] = " saiu do time";
    v751[2022] = "alguém roubou sua ficha :>";
    v751[2023] = "escolha um servidor";
    v751[2024] = "jogadores";
    v751[2025] = "jogadores totais";
    v751[2026] = "jogadores nesse modo";
    v751[2027] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    v753[0] = ["você morreu sem motivo"];
    v753[1] = ["você morreu de fome, como o jogo diz"];
    v753[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    v753[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    v753[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    v753[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    v753[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    v753[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    v753[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    v753[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    v753[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    v753[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    v753[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    v753[13] = ["você morreu de sede. melhor beber sua própria urina."];
    v753[14] = ["você sabia que você morre afogado? agora você sabe."];
    v753[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    v753[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    v753[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    v753[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    v753[19] = ["como vampiro, não chegue perto do alho."];
    v753[20] = ["você comeu alho como vampiro, o que você esperava?"];
    v753[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ⵠᐃⵠⵠⲆᐃⲆ = "Uuunnnggg";
    ΔⵠΔΔⵠᐃΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function f75() {
    v751[286] = ["You feel a great power emanating from this orb"];
    v753[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    v751[298] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    v751[2028] = " BACK TO THE GAME";
    v751[2029] = " Share on Twitter";
    v751[2030] = " Share on Facebook";
    v751[2031] = "You can buy items on the shop in the next game with your points";
    v751[2032] = "points";
    v751[2033] = "Score";
    v751[2034] = "Kill";
    v751[2035] = "Days survived";
    v751[2036] = "Building method: Free. Press G to change";
    v751[2037] = "Building method: Grid. Press G to change";
    v751[299] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    v751[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    v751[107] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    v751[300] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var v740 = 0; v740 < 7; v740++) {
      document.getElementById("claim_reward_" + v740).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    v751[7] = ["Mano"];
    v751[233] = ["Tierra", "¡Tan limpia como mis manos!"];
    v751[217] = ["Arena", "¡Tengo arena en mis ojos!"];
    v751[200] = ["Madera", "¡Nunca hay suficiente!"];
    v751[199] = ["Piedra", "También llamada roca."];
    v751[202] = ["Oro", "Sé generoso, compártelo con los otros"];
    v751[203] = ["Diamante", "¿Que vas a hacer con él?"];
    v751[212] = ["Amatista", "Es Mauve como Lapa"];
    v751[224] = ["Harina", "Usada para cocinar."];
    v751[226] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    v751[229] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    v751[207] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    v751[208] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    v751[230] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    v751[231] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    v751[236] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    v751[238] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    v751[302] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    v751[301] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    v751[303] = ["Guirnalda", "Perfecta para decorar el techo"];
    v751[206] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    v751[201] = ["Baya", "No es venenosa.", "Comida: 10"];
    v751[225] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    v751[227] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    v751[290] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    v751[291] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    v751[293] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    v751[294] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    v751[295] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    v751[296] = ["Planta de Espinas", "¡Te daña!"];
    v751[234] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    v751[235] = ["Hielo", "Bueno para hacer tartas y agua"];
    v751[101] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    v751[276] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    v751[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    v751[280] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    v751[281] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    v751[239] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    v751[232] = ["Escamas", "¡Huele a pescado!"];
    v751[222] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    v751[204] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    v751[209] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    v751[205] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    v751[263] = ["Hilo", "Usado para craftear ropa y mochila"];
    v751[240] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    v751[269] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    v751[103] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    v751[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    v751[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    v751[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    v751[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    v751[48] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    v751[108] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    v751[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    v751[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    v751[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    v751[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    v751[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    v751[49] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    v751[62] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    v751[63] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    v751[64] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    v751[65] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    v751[72] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    v751[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    v751[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    v751[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    v751[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    v751[60] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    v751[82] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    v751[86] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    v751[87] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    v751[88] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    v751[104] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    v751[34] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    v751[35] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    v751[36] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    v751[70] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    v751[105] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    v751[32] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    v751[68] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    v751[69] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    v751[156] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    v751[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    v751[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    v751[67] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    v751[157] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    v751[158] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    v751[159] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    v751[84] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    v751[83] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    v751[287] = ["Esfera del Dragón", "Dada en la misión"];
    v751[242] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    v751[277] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    v751[278] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    v751[279] = ["Gema Azul", "Para gente muy amable"];
    v751[150] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    v751[151] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    v751[152] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    v751[282] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    v751[283] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    v751[218] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    v751[221] = ["Botella Vacia", "La puedes llenar de agua"];
    v751[223] = ["Regadera Vacía", "La tienes que llenar de agua"];
    v751[85] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    v751[47] = ["Mochila", "¡Mas espacio para tus cosas!"];
    v751[211] = ["Hoja", "Usada para hacer un libro"];
    v751[46] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    v751[297] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    v751[241] = ["Cerradura", "Te permite cerrar tu cofre"];
    v751[260] = ["Llave", "Te permite abrir un cofre cerrado"];
    v751[261] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    v751[216] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    v751[285] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    v751[292] = ["Techo", "Te esconde un poco y te protege del frío"];
    v751[284] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    v751[264] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    v751[265] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    v751[266] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    v751[267] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    v751[213] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    v751[262] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    v751[270] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    v751[271] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    v751[272] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    v751[214] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    v751[268] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    v751[273] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    v751[274] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    v751[275] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    v751[215] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    v751[210] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    v751[228] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    v751[237] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    v751[244] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    v751[2000] = "No puedes unirte a este servidor";
    v751[2001] = "Expulsado: ";
    v751[2002] = "Tu llave ya está usada";
    v751[2003] = "Tu llave está mal";
    v751[2004] = "Tienes una versión antigua, limpia tu cache";
    v751[2005] = "No hay mas recursos";
    v751[2006] = "Has sobrevivido 1 día";
    v751[2007] = "Has sobrevivido ";
    v751[2008] = " días";
    v751[2009] = "Estás muerto ;-;";
    v751[2010] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    v751[2011] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    v751[2012] = "Recurso vacio";
    v751[2013] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    v751[2014] = " está muerto";
    v751[2015] = "Esta no es la herramienta correcta";
    v751[2016] = "Te has unido a un equipo";
    v751[2017] = "Estás muerto";
    v751[2018] = " se unió al equipo";
    v751[2019] = "Tu equipo ha sido destruido";
    v751[2020] = "Has dejado el equipo";
    v751[2021] = " dejo el equipo ";
    v751[2022] = "Alguien te robó tu token :>";
    v751[2023] = "Elige un servidor";
    v751[2024] = "jugadores";
    v751[2025] = "total de jugadores";
    v751[2026] = "Jugadores en este modo de juego";
    v751[2027] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    v753[0] = ["Has muerto por ninguna razón"];
    v753[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    v753[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    v753[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    v753[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    v753[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    v753[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    v753[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    v753[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    v753[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    v753[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    v753[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    v753[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    v753[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    v753[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    v753[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    v753[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    v753[17] = ["Tu piel se cayó, el sol te quemó."];
    v753[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    v753[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    v753[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    v753[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ⵠᐃⵠⵠⲆᐃⲆ = "Uuunnnggg";
    ΔⵠΔΔⵠᐃΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function f76(p462, p463, p464, p465, p466, p467) {
    const v741 = p462 ^ 34952;
    const v742 = p463 ^ 50557;
    const v743 = ~(p464 & 11749) & 11749 | ~(p464 & 11749) & p464;
    const v744 = p465 ^ 40956;
    const v745 = (1013904223 + (45326 + p466) * 1664525) % 4294967296;
    const v746 = (p467 | 26661) & ~(p467 & 26661);
    const vF64 = f64(v741, v742, v743);
    f6(v744, v745, v746, v741, v742);
    return vF64 ^ 48545;
  }
  function f77() {
    v751[286] = ["You feel a great power emanating from this orb"];
    v753[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    v751[298] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    v751[2028] = " BACK TO THE GAME";
    v751[2029] = " Share on Twitter";
    v751[2030] = " Share on Facebook";
    v751[2031] = "You can buy items on the shop in the next game with your points";
    v751[2032] = "points";
    v751[2033] = "Score";
    v751[2034] = "Kill";
    v751[2035] = "Days survived";
    v751[2036] = "Building method: Free. Press G to change";
    v751[2037] = "Building method: Grid. Press G to change";
    v751[299] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    v751[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    v751[107] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    v751[300] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var v747 = 0; v747 < 7; v747++) {
      document.getElementById("claim_reward_" + v747).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    v751[7] = ["Hand"];
    v751[233] = ["Boden", "Dreckig!"];
    v751[217] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    v751[200] = ["Holz", "Du kannst niemals zu viel haben!"];
    v751[199] = ["Stein", "Auch Fels gennant"];
    v751[202] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    v751[203] = ["Diamant", "Was wirst du daraus machen?"];
    v751[212] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    v751[224] = ["Mehl", "wird fürs Backen gebraucht"];
    v751[226] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    v751[229] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    v751[207] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    v751[208] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    v751[230] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    v751[231] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    v751[236] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    v751[238] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    v751[302] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    v751[301] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    v751[303] = ["Girlande", "perfekter Schmuck für Dächer"];
    v751[206] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    v751[201] = ["Beere", "Beeren lecker!", "Essen: 10"];
    v751[225] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    v751[227] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    v751[290] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    v751[291] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    v751[293] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    v751[294] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    v751[295] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    v751[296] = ["Dornenbusch", "Es sticht!"];
    v751[234] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    v751[235] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    v751[101] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    v751[276] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    v751[2] = ["Hasenfell", "Der Hase war so süß..."];
    v751[280] = ["Klares Fell", "Du bist eine Brotfabrik"];
    v751[281] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    v751[239] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    v751[232] = ["Schuppen", "Es riecht wie Fisch!"];
    v751[222] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    v751[204] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    v751[209] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    v751[205] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    v751[263] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    v751[240] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    v751[269] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    v751[103] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    v751[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    v751[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    v751[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    v751[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    v751[48] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    v751[108] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    v751[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    v751[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    v751[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    v751[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    v751[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    v751[49] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    v751[62] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    v751[63] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    v751[64] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    v751[65] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    v751[72] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    v751[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    v751[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    v751[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    v751[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    v751[60] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    v751[82] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    v751[86] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    v751[87] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    v751[88] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    v751[104] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    v751[34] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    v751[35] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    v751[36] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    v751[70] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    v751[105] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    v751[32] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[68] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[69] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[156] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[67] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    v751[157] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[158] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[159] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    v751[84] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    v751[83] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    v751[287] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    v751[242] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    v751[277] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    v751[278] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    v751[279] = ["Blauer Edelstein", "Für sehr nette Leute"];
    v751[150] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    v751[151] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    v751[152] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    v751[282] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    v751[283] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    v751[218] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    v751[221] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    v751[223] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    v751[85] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    v751[47] = ["Rucksack", "Mehr Platz im Inventar!"];
    v751[211] = ["Papier", "Wird fürs Büchermachen verwendet"];
    v751[46] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    v751[297] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    v751[241] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    v751[260] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    v751[261] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    v751[216] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    v751[285] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    v751[292] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    v751[284] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    v751[264] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    v751[265] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    v751[266] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    v751[267] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    v751[213] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    v751[262] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    v751[270] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    v751[271] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    v751[272] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    v751[214] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    v751[268] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    v751[273] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    v751[274] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    v751[275] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    v751[215] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    v751[210] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    v751[228] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    v751[237] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    v751[244] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    v751[2000] = "Du kannst diesem Server nicht beitreten";
    v751[2001] = "Gekickt: ";
    v751[2002] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    v751[2003] = "Dein Schlüssel ist falsch";
    v751[2004] = "Deine Version ist veraltet, säubere dein Cache";
    v751[2005] = "Es gibt keine neuen Ressourcen";
    v751[2006] = "Du hast einen Tag überlebt";
    v751[2007] = "Du hast überlebt ";
    v751[2008] = " Tage";
    v751[2009] = "Du bist gestorben ;-;";
    v751[2010] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    v751[2011] = "Server ist voll! Drücke immer wieder auf spielen!";
    v751[2012] = "Ressource ist leer";
    v751[2013] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    v751[2014] = " ist gestorben";
    v751[2015] = "Das ist nicht das richtige Werkzeug";
    v751[2016] = "Du bist einem Team beigetreten";
    v751[2017] = "Du bist gestorben";
    v751[2018] = " ist dem Team beigetreten";
    v751[2019] = "Dein Team wurde zerstört";
    v751[2020] = "Du hast das Team verlassen";
    v751[2021] = " hat das Team verlassen";
    v751[2022] = "Jemand hat dein Token gestohlen :>";
    v751[2023] = "Suche dir ein Server aus";
    v751[2024] = "Spieler";
    v751[2025] = "alle Spieler";
    v751[2026] = "Spieler in diesem Modus";
    v751[2027] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    v753[0] = ["Du wurdest ohne Grund getötet"];
    v753[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    v753[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    v753[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    v753[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    v753[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    v753[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    v753[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    v753[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    v753[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    v753[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    v753[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    v753[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    v753[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    v753[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    v753[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    v753[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    v753[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    v753[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    v753[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    v753[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    v753[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ⵠᐃⵠⵠⲆᐃⲆ = "Uuunnnggg";
    ΔⵠΔΔⵠᐃΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  function f78(p468, p469, p470, p471) {
    vVVVUndefined56(vVVVVVUndefined582, p468, p469, p470, p471);
    return ((23 + (f476(v372[0], v372[1], v372[2], v372[3], v372[0], v372[1]) ^ f476(v372[2], v372[3], v372[0], v372[1], v372[2], v372[3]))) * 75 + 74) % 65537;
  }
  function f79() {
    v751[286] = ["You feel a great power emanating from this orb"];
    v753[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    v751[298] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    v751[2028] = " BACK TO THE GAME";
    v751[2029] = " Share on Twitter";
    v751[2030] = " Share on Facebook";
    v751[2031] = "You can buy items on the shop in the next game with your points";
    v751[2032] = "points";
    v751[2033] = "Score";
    v751[2034] = "Kill";
    v751[2035] = "Days survived";
    v751[2036] = "Building method: Free. Press G to change";
    v751[2037] = "Building method: Grid. Press G to change";
    v751[299] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    v751[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    v751[107] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    v751[300] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var v748 = 0; v748 < 7; v748++) {
      document.getElementById("claim_reward_" + v748).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    v751[7] = ["Ręka"];
    v751[233] = ["Ziemia", "Brudna!"];
    v751[217] = ["Piasek", "Mam go w oczach!"];
    v751[200] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    v751[199] = ["Kamień", "Także nazywany skałą"];
    v751[202] = ["Złoto", "Bądź hojny, daj trochę innym"];
    v751[203] = ["Diament", "Co z nim zrobisz?"];
    v751[212] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    v751[224] = ["Mąka", "Używana w gotowaniu"];
    v751[226] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    v751[229] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    v751[207] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    v751[208] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    v751[230] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    v751[231] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    v751[236] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    v751[238] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    v751[302] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    v751[301] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    v751[303] = ["Girlanda", "Idealna do dekorowania dachów"];
    v751[206] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    v751[201] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    v751[225] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    v751[227] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    v751[290] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    v751[291] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    v751[293] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    v751[294] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    v751[295] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    v751[296] = ["Kolczasty krzew", "Kłuje!"];
    v751[234] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    v751[235] = ["Lód", "Użyteczny do robienia ciast i wody"];
    v751[101] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    v751[276] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    v751[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    v751[280] = ["Skóra", "Jesteś fabryką chleba"];
    v751[281] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    v751[239] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    v751[232] = ["Łuski", "Pachnie jak ryba!"];
    v751[222] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    v751[204] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    v751[209] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    v751[205] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    v751[263] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    v751[240] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    v751[269] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    v751[103] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    v751[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    v751[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    v751[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    v751[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    v751[48] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    v751[108] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    v751[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    v751[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    v751[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    v751[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    v751[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    v751[49] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    v751[62] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    v751[63] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    v751[64] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    v751[65] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    v751[72] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    v751[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    v751[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    v751[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    v751[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    v751[60] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    v751[82] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    v751[86] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    v751[87] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    v751[88] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    v751[104] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    v751[34] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    v751[35] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    v751[36] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    v751[70] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    v751[105] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    v751[32] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    v751[68] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    v751[69] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    v751[156] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    v751[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    v751[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    v751[67] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    v751[157] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    v751[158] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    v751[159] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    v751[84] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    v751[83] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    v751[287] = ["Smocza kula", "Zdobyta podczas zadania"];
    v751[242] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    v751[277] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    v751[278] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    v751[279] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    v751[150] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    v751[151] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    v751[152] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    v751[282] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    v751[283] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    v751[218] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    v751[221] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    v751[223] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    v751[85] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    v751[47] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    v751[211] = ["Papier", "Używany w tworzeniu książki"];
    v751[46] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    v751[297] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    v751[241] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    v751[260] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    v751[261] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    v751[216] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    v751[285] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    v751[292] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    v751[284] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    v751[264] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    v751[265] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    v751[266] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    v751[267] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    v751[213] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    v751[262] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    v751[270] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    v751[271] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    v751[272] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    v751[214] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    v751[268] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    v751[273] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    v751[274] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    v751[275] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    v751[215] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    v751[210] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    v751[228] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    v751[237] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    v751[244] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    v751[2000] = "Nie możesz dołączyć do tego serwera";
    v751[2001] = "Wyrzucony: ";
    v751[2002] = "Twój klucz jest aktualnie używany przez innego gracza";
    v751[2003] = "Twój klucz jest nieprawidłowy";
    v751[2004] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    v751[2005] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    v751[2006] = "Przeżyłeś 1 dzień";
    v751[2007] = "Przeżyłeś ";
    v751[2008] = " dni";
    v751[2009] = "Jesteś martwy ;-;";
    v751[2010] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    v751[2011] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    v751[2012] = "Źródło jest puste";
    v751[2013] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    v751[2014] = " jest martwy";
    v751[2015] = "To nie jest właściwe narzędzie";
    v751[2016] = "Dołączyłeś do drużyny";
    v751[2017] = "Jesteś martwy";
    v751[2018] = " dołączył do drużyny";
    v751[2019] = "Twoja drużyna została zniszczona";
    v751[2020] = " Opuściłeś drużynę";
    v751[2021] = " opuścił drużynę";
    v751[2022] = "Ktoś ukradł twój żeton :>";
    v751[2023] = "Wybierz serwer";
    v751[2024] = "graczy";
    v751[2025] = "wszystkich graczy";
    v751[2026] = "graczy w tym trybie";
    v751[2027] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    v753[0] = ["Zostałeś zabity bez powodu"];
    v753[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    v753[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    v753[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    v753[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    v753[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    v753[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    v753[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    v753[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    v753[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    v753[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    v753[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    v753[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    v753[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    v753[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    v753[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    v753[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    v753[17] = ["Twoja skóra odpada, słońce cię zabija."];
    v753[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    v753[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    v753[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    v753[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ⵠᐃⵠⵠⲆᐃⲆ = "Uuunnnggg";
    ΔⵠΔΔⵠᐃΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  const v749 = 4;
  function f80(p472, p473) {
    vVVUndefined10(vVVVVVUndefined582, p472, p473);
    return ((51 + (f42(v372[0], v372[1], v372[0], v372[1], v372[0]) ^ function (p474, p475, p476, p477) {
      v55(vVVVVVUndefined582, p474, p475, p476, p477);
      const vF41 = f41(v372[0], v372[1]);
      f52(v372[2], v372[3], v372[0], v372[1]);
      return ~(vF41 & 4294) & vF41 | ~(vF41 & 4294) & 4294;
    }(v372[1], v372[0], v372[1], v372[0]))) * 16807 + 0) % 2147483647;
  }
  function f81() {
    v751[286] = ["You feel a great power emanating from this orb"];
    v753[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    v751[298] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    v751[2028] = " RETOUR AU JEU";
    v751[2029] = " Partage sur Twitter";
    v751[2030] = " Partage sur Facebook";
    v751[2031] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    v751[2032] = "points";
    v751[2033] = "Score";
    v751[2034] = "Tués";
    v751[2035] = "Jours survécus";
    v751[2036] = "Mode de construction: Libre. Appuie sur G pour changer";
    v751[2037] = "Mode de construction: Grille. Appuie sur G pour changer";
    v751[299] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    v751[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    v751[107] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    v751[300] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var v750 = 0; v750 < 7; v750++) {
      document.getElementById("claim_reward_" + v750).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    v751[7] = ["Main"];
    v751[233] = ["Terre", "C'est sale!"];
    v751[217] = ["Sable", "J'en ai dans les yeux"];
    v751[200] = ["Bois", "Tu n'en auras jamais trop!"];
    v751[199] = ["Pierre", "Aussi appelée roche"];
    v751[202] = ["Or", "Sois généreux, donne en aux autres"];
    v751[203] = ["Diamant", "Comme tes yeux! wesh"];
    v751[212] = ["Améthyste", "C'est Mauve comme Lapa"];
    v751[224] = ["Farine", "Utile pour la cuisine"];
    v751[226] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    v751[229] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    v751[207] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    v751[208] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    v751[230] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    v751[231] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    v751[236] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    v751[238] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    v751[302] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    v751[301] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    v751[303] = ["Guirlandes", "Utilisable sur les toits"];
    v751[206] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    v751[201] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    v751[225] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    v751[227] = ["Blé", "Peut être transformé en farine dans les moulins"];
    v751[290] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    v751[291] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    v751[293] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    v751[294] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    v751[295] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    v751[296] = ["Ronces", "Ça pique!"];
    v751[234] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    v751[235] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    v751[101] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    v751[276] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    v751[2] = ["Peau de lapin", "Vous êtes un monstre"];
    v751[280] = ["Fourrure blanche", "Tu es une usine à pain"];
    v751[281] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    v751[239] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    v751[232] = ["Écailles", "Ça sent le poisson!"];
    v751[222] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    v751[204] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    v751[209] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    v751[205] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    v751[263] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    v751[240] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    v751[269] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    v751[103] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    v751[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    v751[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    v751[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    v751[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    v751[48] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    v751[108] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    v751[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    v751[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    v751[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    v751[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    v751[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    v751[49] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    v751[62] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    v751[63] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    v751[64] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    v751[65] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    v751[72] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    v751[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    v751[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    v751[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    v751[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    v751[60] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    v751[82] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    v751[86] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    v751[87] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    v751[88] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    v751[104] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    v751[34] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    v751[35] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    v751[36] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    v751[70] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    v751[105] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    v751[32] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[68] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[69] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[156] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[67] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    v751[157] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[158] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[159] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    v751[84] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    v751[83] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    v751[287] = ["Orbe du Dragon", "Donné en Quête"];
    v751[242] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    v751[277] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    v751[278] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    v751[279] = ["Gemme bleue", "Pour les gens trop gentils"];
    v751[150] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    v751[151] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    v751[152] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    v751[282] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    v751[283] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    v751[218] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    v751[221] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    v751[223] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    v751[85] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    v751[47] = ["Sac", "Plus de place dans ton inventaire!"];
    v751[211] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    v751[46] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    v751[297] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    v751[241] = ["Cadenas", "Pour verrouiller un coffre"];
    v751[260] = ["Clé", "Pour déverrouiller un coffre"];
    v751[261] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    v751[216] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    v751[285] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    v751[292] = ["Toit", "Te cache un peu et te réchauffe"];
    v751[284] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    v751[264] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    v751[265] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    v751[266] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    v751[267] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    v751[213] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    v751[262] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    v751[270] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    v751[271] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    v751[272] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    v751[214] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    v751[268] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    v751[273] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    v751[274] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    v751[275] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    v751[215] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    v751[210] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    v751[228] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    v751[237] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    v751[244] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    v751[2000] = "Tu ne peux pas rejoindre le serveur";
    v751[2001] = "Expulsé: ";
    v751[2002] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    v751[2003] = "Ta clé est fausse";
    v751[2004] = "Tu as une vieille version, rafraichis tes caches";
    v751[2005] = "Il n'y a plus de nouvelles ressources";
    v751[2006] = "Tu as survécu 1 jour";
    v751[2007] = "Tu as survécu ";
    v751[2008] = " jours";
    v751[2009] = "Tu es mort ;-;";
    v751[2010] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    v751[2011] = "Le serveur est complet! Spam le bouton jouer";
    v751[2012] = "Cette ressource est vide";
    v751[2013] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    v751[2014] = " est mort";
    v751[2015] = "Ce n'est pas le bon outil";
    v751[2016] = "Tu as rejoins une équipe";
    v751[2017] = "Tu es mort";
    v751[2018] = " a rejoint l'équipe";
    v751[2019] = "Ton équipe a été détruite";
    v751[2020] = "Tu as quitté l'équipe";
    v751[2021] = " a quitté l'équipe";
    v751[2022] = "Quelqu'un a volé ton token :>";
    v751[2023] = "Choisis un serveur";
    v751[2024] = "joueurs";
    v751[2025] = "joueurs";
    v751[2026] = "joueurs dans ce mode";
    v751[2027] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    v753[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    v753[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    v753[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    v753[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    v753[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    v753[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    v753[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    v753[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    v753[8] = ["Cet ours voulait juste un câlin."];
    v753[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    v753[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    v753[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    v753[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    v753[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    v753[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    v753[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    v753[16] = ["Un kraken a 'kraké' tes os."];
    v753[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    v753[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    v753[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    v753[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    v753[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ⵠᐃⵠⵠⲆᐃⲆ = "Uuunnnggg";
    ΔⵠΔΔⵠᐃΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  var v751 = [];
  for (var v770 = 0; v584 > v770; v770++) {
    v751[v770] = "";
  }
  var v753 = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  const v754 = 1;
  const v755 = 10;
  const v756 = 2;
  $(".md-languages ul li").on("click", function () {
    var v757 = $(this).text();
    if (v757 === "English") {
      f72();
    } else if (v757 === "Français") {
      f81();
    } else if (v757 === "Deutsch") {
      f77();
    } else if (v757 === "Español") {
      f75();
    } else if (v757 === "Português") {
      f74();
    } else if (v757 === "Русский") {
      f73();
    } else if (v757 === "Polski") {
      f79();
    }
    ⲆᐃⵠΔⵠΔΔ = [];
    user.ⵠⲆⲆᐃ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(v757);
  });
  const v758 = 0;
  const v759 = 16;
  var v760;
  v544 = "EN";
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      v544 = "RU";
      break;
    case "en":
      v544 = "EN";
      break;
    case "es":
      v544 = "SP";
      break;
    case "fr":
      v544 = "FR";
      break;
    case "pl":
      v544 = "PL";
      break;
    case "de":
      v544 = "DE";
      break;
    case "pt":
      v544 = "PT";
  }
  if (v544 === "FR") {
    $(".md-languages label button").text("Français");
    v760 = f81;
  } else if (v544 === "PL") {
    $(".md-languages label button").text("Polski");
    v760 = f79;
  } else if (v544 === "PT") {
    $(".md-languages label button").text("Português");
    v760 = f74;
  } else if (v544 === "SP") {
    $(".md-languages label button").text("Español");
    v760 = f75;
  } else if (v544 === "RU") {
    $(".md-languages label button").text("Русский");
    v760 = f73;
  } else if (v544 === "DE") {
    $(".md-languages label button").text("Deutsch");
    v760 = f77;
  } else {
    $(".md-languages label button").text("English");
    v760 = f72;
  }
  const v761 = 2;
  const v762 = 16;
  function f82(p478, p479) {
    const v763 = p478 ^ 58255;
    const v764 = p479 ^ 19160;
    const vF61 = f61(v763, v764);
    (function (p480, p481, p482) {
      const v765 = ~(p480 & 44527) & (p480 | 44527);
      const v766 = ~(p481 & 6926) & p481 | ~(p481 & 6926) & 6926;
      const v767 = ~(p482 & 22383) & (p482 | 22383);
      const vF44 = f44(v765, v766);
      f12(v767, v765, v766, v767);
    })(v763, v764, v763);
    return ~(vF61 & 29297) & vF61 | ~(vF61 & 29297) & 29297;
  }
  ⵠᐃ = {
    ΔΔᐃΔⲆⵠⵠⵠⵠ: "img/logo.png",
    ΔΔⲆᐃᐃⲆⵠ: "img/mapday.png",
    ⵠⵠⲆⵠΔᐃⵠ: "img/mapnight.png",
    ΔⵠΔⵠᐃΔΔⵠⲆ: "img/bigzday.png",
    ⵠΔᐃᐃⲆⲆⵠⵠᐃ: "img/bigznight.png",
    ⲆᐃⵠΔⲆⵠΔ: "img/bigday-river1.png",
    ⵠⲆⵠⲆΔᐃⲆⲆᐃ: "img/bigday-lake.png",
    ⲆⲆⲆⵠⵠΔⲆ: "img/bigday-berry.png",
    ΔᐃⵠⵠΔⵠᐃ: "img/bigday-stone1.png",
    ⲆᐃⲆΔᐃΔⵠ: "img/bigday-stone2.png",
    ⵠΔΔΔⲆⲆΔ: "img/bigday-gold1.png",
    ⵠⵠⲆⵠⵠᐃⲆ: "img/bigday-gold2.png",
    ᐃⲆⵠⲆΔᐃⲆ: "img/bigday-emerald1.png",
    ᐃᐃᐃᐃΔᐃⲆ: "img/bigday-emerald2.png",
    ⵠⵠⲆᐃⵠΔⵠ: "img/bigday-amethyst.png",
    ΔⵠᐃΔⵠⵠⲆ: "img/bigday-bear.png",
    ⵠⵠΔΔⲆᐃᐃ: "img/bigday-cave.png",
    ⵠᐃΔⵠΔⵠᐃ: "img/bigday-diamond.png",
    ⵠⵠᐃⲆⲆⵠᐃ: "img/bigday-island.png",
    ⲆⲆⲆⵠⲆᐃΔ: "img/bigday-reidite.png",
    ⲆΔⵠΔⵠⵠⵠ: "img/bigday-spider.png",
    ΔⵠⲆⵠΔⵠΔ: "img/bigday-wolf.png",
    ᐃⵠΔᐃⵠΔⵠ: "img/bigday-fir-tree.png",
    ⵠΔⲆΔᐃᐃΔ: "img/bigday-fox.png",
    ᐃΔⲆⵠⵠⵠⲆ: "img/bigday-kraken.png",
    ΔⲆⲆⵠⲆⲆⵠ: "img/bigday-piranha.png",
    ᐃᐃΔⵠⵠᐃⲆ: "img/bigday-cactus.png",
    ΔΔᐃΔΔΔⲆ: "img/bigday-magma.png",
    ᐃⲆⲆΔᐃᐃⵠ: "img/bigday-aquamarine1.png",
    ⲆΔⲆⲆᐃΔⵠ: "img/bigday-aquamarine2.png",
    ⲆΔⵠΔΔⲆΔ: "img/bigday-coal1.png",
    ⵠⲆⵠⲆᐃⵠΔ: "img/bigday-coal2.png",
    ⵠⵠΔΔⵠⲆⵠ: "img/bigday-ruby1.png",
    ⲆΔΔⲆᐃⲆⲆ: "img/bigday-ruby2.png",
    ⲆΔΔᐃⵠᐃΔ: "img/bigday-jade1.png",
    ᐃΔⵠᐃⵠⵠⵠ: "img/bigday-jade2.png",
    ⲆⲆᐃⲆⵠⵠⲆ: "img/bigday-sapphire1.png",
    ⲆΔΔᐃΔⲆΔ: "img/bigday-sapphire2.png",
    ⵠⲆⵠᐃⵠᐃⲆ: "img/bigday-topaz1.png",
    ᐃΔᐃᐃⵠⵠⵠ: "img/bigday-topaz2.png",
    ⵠⲆⵠⵠⲆᐃⲆ: "img/bigday-iron1.png",
    ᐃⲆⵠⲆΔⲆⵠ: "img/bigday-iron2.png",
    ⲆᐃⵠᐃΔΔᐃ: "img/bigday-copper1.png",
    ⵠᐃᐃⵠΔΔΔ: "img/bigday-copper2.png",
    ᐃΔΔⲆⲆⵠᐃ: "img/bigday-jungle-tree.png",
    ⵠⵠΔᐃΔⲆⲆ: "img/bigday-jungle-bush.png",
    ⲆΔⲆΔⵠⲆᐃ: "img/bigday-jungle-stone1.png",
    ΔᐃⵠΔᐃᐃᐃ: "img/bigday-jungle-stone2.png",
    ⲆᐃΔΔΔⵠᐃ: "img/bigday-banana-plant.png",
    ⲆΔⵠⵠⲆⲆΔ: "img/bigday-river1.png",
    ᐃⵠΔⲆᐃᐃⲆⵠⲆ: "img/bignight-lake.png",
    ⲆΔΔⲆᐃᐃᐃΔᐃ: "img/bignight-berry.png",
    ⵠΔⲆᐃⲆⵠⵠ: "img/bignight-stone1.png",
    ΔⲆᐃᐃᐃⲆⵠ: "img/bignight-stone2.png",
    ᐃⵠⵠΔⲆⵠΔ: "img/bignight-gold1.png",
    ΔᐃⵠΔᐃⵠΔ: "img/bignight-gold2.png",
    ᐃΔΔᐃᐃⵠⲆ: "img/bignight-emerald1.png",
    ᐃΔⵠᐃᐃⵠᐃ: "img/bignight-emerald2.png",
    ᐃᐃΔᐃΔᐃⵠ: "img/bignight-amethyst.png",
    ΔᐃΔΔᐃⲆᐃ: "img/bignight-bear.png",
    ⲆⵠⲆⵠΔΔΔ: "img/bignight-cave.png",
    ΔⵠⲆⵠΔΔⲆ: "img/bignight-diamond.png",
    ᐃⲆⲆΔⲆΔⵠ: "img/bignight-island.png",
    ⵠᐃΔⲆⵠᐃⲆ: "img/bignight-reidite.png",
    ⵠΔΔᐃᐃᐃᐃ: "img/bignight-spider.png",
    ⵠΔΔΔᐃⲆΔ: "img/bignight-wolf.png",
    ⲆⲆⲆΔΔⲆᐃ: "img/bignight-fir-tree.png",
    ⵠΔⲆΔΔⵠᐃ: "img/bignight-fox.png",
    ΔⵠΔⲆᐃᐃᐃ: "img/bignight-kraken.png",
    ᐃⵠΔΔΔᐃᐃ: "img/bignight-piranha.png",
    ⵠᐃᐃⲆⵠⵠΔ: "img/bignight-cactus.png",
    ⲆⲆⲆΔΔΔⲆ: "img/bignight-magma.png",
    ⵠᐃⲆᐃᐃᐃⲆ: "img/bignight-aquamarine1.png",
    ⲆᐃⲆᐃⲆΔⲆ: "img/bignight-aquamarine2.png",
    ⲆΔⲆⲆᐃⵠⲆ: "img/bignight-coal1.png",
    ⵠⵠᐃⲆᐃᐃᐃ: "img/bignight-coal2.png",
    ⵠΔⵠⲆⵠⲆᐃ: "img/bignight-ruby1.png",
    ⵠⲆⲆᐃⵠΔⵠ: "img/bignight-ruby2.png",
    ⲆⲆΔΔⲆⲆⵠ: "img/bignight-jade1.png",
    ᐃΔᐃᐃΔⲆⲆ: "img/bignight-jade2.png",
    ᐃⵠᐃΔⲆⵠᐃ: "img/bignight-sapphire1.png",
    ᐃⵠᐃᐃᐃᐃᐃ: "img/bignight-sapphire2.png",
    ⲆΔⵠᐃᐃⵠΔ: "img/bignight-topaz1.png",
    ᐃⵠⲆⲆⵠⵠⲆ: "img/bignight-topaz2.png",
    ⵠⵠᐃΔⵠⵠⲆ: "img/bignight-iron1.png",
    ᐃⲆᐃᐃⵠᐃⵠ: "img/bignight-iron2.png",
    ΔᐃΔⲆᐃᐃⵠ: "img/bignight-copper1.png",
    ⵠⵠΔⵠΔᐃΔ: "img/bignight-copper2.png",
    ⲆⵠΔⵠᐃⲆᐃ: "img/bignight-jungle-tree.png",
    ᐃⲆⵠⲆⵠⵠᐃ: "img/bignight-jungle-bush.png",
    ⲆⲆⵠΔⲆᐃΔ: "img/bignight-jungle-stone1.png",
    ᐃᐃⵠⵠΔⲆⵠ: "img/bignight-jungle-stone2.png",
    ⵠⲆⲆᐃΔⲆⵠ: "img/bignight-banana-plant.png",
    ⲆⲆᐃⵠᐃᐃΔ: "img/bigday-desert.png",
    ⲆᐃⵠΔΔΔᐃ: "img/bigday-winter.png",
    ᐃΔⲆᐃΔⲆⵠ: "img/bigday-lava.png",
    ΔⲆⵠᐃΔΔⲆ: "img/bigday-forest.png",
    ⲆᐃⵠΔⵠᐃⲆ: "img/bigday-jungle.png",
    ᐃⲆΔΔⲆΔᐃ: "img/bignight-desert.png",
    ᐃᐃᐃᐃⲆⲆⲆ: "img/bignight-winter.png",
    ⵠᐃΔΔΔⵠΔ: "img/bignight-lava.png",
    ᐃⵠᐃⵠⲆⲆⲆ: "img/bignight-forest.png",
    ⵠⵠᐃⵠⲆᐃᐃ: "img/bignight-jungle.png",
    ΔΔΔⵠⲆΔΔ: "img/day-river-wave.png",
    ⲆᐃΔΔᐃᐃⵠ: "img/night-river-wave.png",
    ⵠᐃⲆΔΔⲆⲆ: "img/day-fog0.png",
    ᐃᐃΔᐃⵠΔⵠ: "img/day-fog1.png",
    ⲆⲆⲆᐃⲆⵠΔ: "img/day-fog2.png",
    ⲆᐃΔⵠΔΔᐃ: "img/night-fog0.png",
    ⲆᐃⲆⵠΔᐃⵠ: "img/night-fog1.png",
    ᐃΔⲆⵠΔᐃⵠ: "img/night-fog2.png",
    ᐃᐃⵠⲆⲆΔⵠ: "img/day-fogdesert0.png",
    ⲆΔΔⲆⲆⲆᐃ: "img/day-fogdesert1.png",
    ᐃⲆᐃΔΔΔⲆ: "img/day-fogdesert2.png",
    ⲆⵠⲆᐃⵠᐃΔ: "img/night-fogdesert0.png",
    ⵠⵠⲆⵠⲆᐃⵠ: "img/night-fogdesert1.png",
    ᐃΔⲆⵠΔΔᐃ: "img/night-fogdesert2.png",
    ⵠⵠΔΔᐃⲆΔ: "img/day-cross-server.png",
    ΔⵠΔᐃᐃᐃⵠ: "img/day-here-server.png",
    ΔᐃΔⵠΔΔⲆ: "img/day-finish-server.png",
    ⲆⵠⲆⲆⲆⵠⵠ: "img/day-item-server.png",
    ⲆΔᐃᐃⲆΔⵠ: "img/day-skull-server.png",
    ⵠⵠⵠⵠΔⲆΔ: "img/night-cross-server.png",
    ⵠⲆⲆᐃᐃⵠΔ: "img/night-here-server.png",
    ᐃⵠᐃⲆΔⲆΔ: "img/night-finish-server.png",
    ⵠⵠΔⵠΔᐃᐃ: "img/night-item-server.png",
    ⵠᐃⲆⲆⲆⵠΔ: "img/night-skull-server.png",
    ΔᐃⵠⲆⵠⲆⵠ: "img/day-reidite0.png",
    ᐃⵠΔⲆⲆⲆⵠ: "img/night-reidite0.png",
    ᐃⵠΔⵠⲆΔⵠ: "img/day-reidite1.png",
    ΔᐃᐃΔⲆᐃⵠ: "img/night-reidite1.png",
    ΔᐃᐃᐃΔΔⵠ: "img/day-reidite2.png",
    ⲆⵠⲆⲆᐃⲆⲆ: "img/night-reidite2.png",
    ᐃᐃΔⲆⵠⲆⵠ: "img/day-lava1.png",
    ᐃΔᐃⵠⲆΔⵠ: "img/night-lava1.png",
    ΔⵠⲆⵠΔᐃᐃ: "img/day-lava2.png",
    ΔΔΔᐃΔᐃⵠ: "img/night-lava2.png",
    ⵠᐃΔᐃᐃⵠⲆ: "img/day-lava3.png",
    ΔⵠΔᐃⵠΔⵠ: "img/night-lava3.png",
    ⲆⲆⲆⲆⵠⲆΔ: "img/day-lava4.png",
    ⲆⲆᐃΔⵠΔΔ: "img/night-lava4.png",
    ΔΔΔΔⵠᐃΔ: "img/day-lava5.png",
    ᐃᐃΔΔⵠΔⲆ: "img/night-lava5.png",
    ⵠⲆᐃΔᐃᐃΔ: "img/day-lava6.png",
    ⲆⵠⲆⵠⲆⲆⵠ: "img/night-lava6.png",
    ⵠΔⵠΔⲆΔΔ: "img/day-lava-ground1.png",
    ᐃⲆΔᐃᐃᐃⲆ: "img/night-lava-ground1.png",
    ΔΔΔⲆΔⲆⲆ: "img/day-lava-ground2.png",
    ΔⵠⲆΔΔᐃᐃ: "img/night-lava-ground2.png",
    ΔⲆⵠⲆᐃΔⲆ: "img/day-lava-ground3.png",
    ᐃᐃΔᐃᐃᐃⲆ: "img/night-lava-ground3.png",
    ᐃᐃⵠⲆⵠⲆⵠ: "img/day-lava-ground4.png",
    ⵠΔⵠΔᐃⵠⵠ: "img/night-lava-ground4.png",
    ⵠⵠΔⵠⵠⵠᐃ: "img/day-lava-ground5.png",
    ⲆⵠΔᐃΔΔᐃ: "img/night-lava-ground5.png",
    ΔⵠΔΔΔΔⵠ: "img/day-lava-ground6.png",
    ΔᐃⲆᐃⲆᐃⵠ: "img/night-lava-ground6.png",
    ⵠⵠⲆᐃᐃⵠᐃ: "img/day-fire-mob.png",
    ⲆΔᐃⵠΔⵠⵠ: "img/night-fire-mob.png",
    ⲆⵠᐃⲆⵠⵠⲆ: "img/hurt-fire-mob.png",
    ᐃΔᐃⲆⲆᐃᐃ: "img/day-diamond-protection.png",
    ⲆⲆⵠᐃⲆⵠⲆ: "img/night-diamond-protection.png",
    ᐃⲆᐃⵠᐃⲆⵠ: "img/day-hand-diamond-protection.png",
    ⵠΔⵠⵠᐃᐃΔ: "img/night-hand-diamond-protection.png",
    ᐃⲆⲆᐃⲆⲆᐃ: "img/inv-diamond-protection-out.png",
    ⵠᐃⵠⲆᐃΔⲆ: "img/inv-diamond-protection-in.png",
    ⵠΔⲆⲆⲆᐃⲆ: "img/inv-diamond-protection-click.png",
    ᐃΔⲆⲆⵠⲆⵠ: "img/day-amethyst-protection.png",
    ⵠⲆⵠⵠⵠⵠⲆ: "img/night-amethyst-protection.png",
    ΔΔⵠΔΔⲆⵠⵠⲆ: "img/day-hand-amethyst-protection.png",
    ΔⵠΔⲆΔⵠΔΔΔ: "img/night-hand-amethyst-protection.png",
    ᐃⵠⵠⲆⲆᐃΔ: "img/inv-amethyst-protection-out.png",
    ΔⵠᐃᐃᐃΔΔ: "img/inv-amethyst-protection-in.png",
    ⵠⵠⲆⵠⵠⵠΔ: "img/inv-amethyst-protection-click.png",
    ⲆᐃⲆⵠᐃΔΔ: "img/day-reidite-sword.png",
    ⵠⵠⵠⵠΔⲆⵠ: "img/night-reidite-sword.png",
    ⵠⲆⵠΔΔᐃᐃ: "img/inv-reidite-sword-out.png",
    ⵠⲆⲆᐃᐃⵠⲆ: "img/inv-reidite-sword-in.png",
    ΔᐃⲆⲆⵠⲆᐃ: "img/inv-reidite-sword-click.png",
    ⲆⵠⵠⲆᐃΔⵠ: "img/inv-reidite-out.png",
    ᐃᐃⵠⵠⲆⲆᐃ: "img/inv-reidite-in.png",
    ⲆⲆⵠᐃΔᐃᐃ: "img/inv-reidite-click.png",
    ⲆⵠⵠΔᐃⵠⵠ: "img/inv-flame-out.png",
    ⲆⲆᐃΔΔᐃᐃ: "img/inv-flame-in.png",
    ᐃⲆΔⵠⵠᐃΔ: "img/inv-flame-click.png",
    ΔⵠⵠΔⲆⵠΔ: "img/day-magma-buble0.png",
    ⲆΔΔⲆΔᐃᐃ: "img/night-magma-buble0.png",
    ⲆⲆΔⵠΔⵠⵠ: "img/day-magma-buble1.png",
    ᐃᐃⲆΔᐃⲆΔ: "img/night-magma-buble1.png",
    ⵠⵠΔⲆᐃΔⵠ: "img/day-magma-buble2.png",
    ΔΔᐃⵠΔⵠⲆ: "img/night-magma-buble2.png",
    ⲆⵠᐃΔⲆᐃⵠ: "img/day-lava-dragon.png",
    ⲆⵠⵠᐃᐃⲆⲆ: "img/night-lava-dragon.png",
    ΔᐃⲆⲆᐃⲆΔᐃⵠ: "img/day-fire-dragon.png",
    ⲆⵠᐃⲆΔᐃᐃⲆᐃ: "img/night-fire-dragon.png",
    ⲆⲆⲆⵠⲆⲆᐃ: "img/hurt-lava-dragon.png",
    ⵠΔⵠⵠᐃΔᐃ: "img/day-lava-wing-left.png",
    ΔⵠⲆΔᐃⲆΔ: "img/night-lava-wing-left.png",
    ⵠΔᐃΔⲆⲆⲆ: "img/day-lava-wing-right.png",
    ᐃΔⲆΔⵠⲆᐃ: "img/night-lava-wing-right.png",
    ⲆΔⵠⲆⲆΔΔ: "img/hurt-lava-wing-left.png",
    ⵠⲆⲆΔⲆⵠⵠ: "img/hurt-lava-wing-right.png",
    ⵠⲆᐃⵠⵠⵠΔ: "img/day-reidite-spear.png",
    ΔΔⲆⵠⵠⵠΔ: "img/night-reidite-spear.png",
    ᐃᐃⲆⲆᐃᐃᐃ: "img/inv-reidite-spear-out.png",
    ⵠᐃᐃΔΔⲆⲆ: "img/inv-reidite-spear-in.png",
    ⵠᐃᐃᐃⵠᐃᐃ: "img/inv-reidite-spear-click.png",
    ⲆΔΔΔΔⵠΔ: "img/day-reidite-helmet.png",
    ⲆⵠΔᐃⵠⲆᐃ: "img/night-reidite-helmet.png",
    ⲆΔⲆᐃⲆΔΔ: "img/inv-reidite-helmet-out.png",
    ⵠΔΔΔΔᐃⲆ: "img/inv-reidite-helmet-in.png",
    ᐃᐃᐃⲆΔⲆΔ: "img/inv-reidite-helmet-click.png",
    ΔΔΔⲆⵠΔΔ: "img/day-hand-reidite-protection.png",
    ΔΔΔⵠᐃⵠΔ: "img/night-hand-reidite-protection.png",
    ⵠᐃᐃⲆⵠⵠⵠ: "img/day-reidite-protection.png",
    Δᐃⵠⵠⵠᐃⵠ: "img/night-reidite-protection.png",
    ⵠΔΔⲆΔⵠΔ: "img/inv-reidite-protection-out.png",
    ⲆΔⵠⲆᐃᐃⵠ: "img/inv-reidite-protection-in.png",
    ⲆΔⵠᐃΔⵠⲆ: "img/inv-reidite-protection-click.png",
    ⵠᐃⵠᐃⲆΔᐃ: "img/day-lava-dragon-sword.png",
    ⲆΔᐃⲆⲆⲆⲆ: "img/night-lava-dragon-sword.png",
    ⵠⵠⲆⲆⵠᐃΔ: "img/inv-lava-dragon-sword-out.png",
    ᐃᐃΔⲆⵠⲆⲆ: "img/inv-lava-dragon-sword-in.png",
    ⵠΔΔⵠⵠⵠⲆ: "img/inv-lava-dragon-sword-click.png",
    ᐃⲆΔᐃⲆⲆᐃ: "img/day-lava-spear.png",
    ᐃΔᐃΔⲆⵠⵠ: "img/night-lava-spear.png",
    ᐃΔⵠⵠᐃΔⵠ: "img/inv-lava-spear-out.png",
    ΔⲆⲆᐃᐃΔⵠ: "img/inv-lava-spear-in.png",
    ΔᐃΔᐃⵠⵠⵠ: "img/inv-lava-spear-click.png",
    ᐃΔΔΔΔΔᐃ: "img/day-lava-helmet.png",
    ᐃΔΔΔⲆΔᐃ: "img/night-lava-helmet.png",
    ⲆΔᐃᐃⲆⵠⲆ: "img/inv-lava-helmet-out.png",
    ΔᐃᐃΔⲆⲆⲆ: "img/inv-lava-helmet-in.png",
    ᐃᐃⲆⵠⲆΔⲆ: "img/inv-lava-helmet-click.png",
    ΔⲆᐃⵠⵠⵠΔ: "img/day-iron0.png",
    ⵠΔᐃⵠⲆΔᐃ: "img/night-iron0.png",
    ᐃᐃΔⵠⲆⲆᐃ: "img/day-iron1.png",
    ⵠⵠᐃⲆⵠᐃᐃ: "img/night-iron1.png",
    ⲆᐃⲆΔⵠᐃΔ: "img/day-iron2.png",
    ⵠᐃΔⲆⲆᐃᐃ: "img/night-iron2.png",
    ΔΔΔᐃᐃ: "img/inv-iron-click.png",
    ᐃⵠⲆΔᐃⲆΔ: "img/day-copper0.png",
    ⲆᐃⲆΔⲆⲆⵠ: "img/night-copper0.png",
    ᐃⲆⲆΔᐃᐃΔ: "img/day-copper1.png",
    ⲆⲆⵠΔⵠᐃΔ: "img/night-copper1.png",
    ᐃⲆΔⵠᐃⵠΔ: "img/day-copper2.png",
    ⲆⵠΔⵠᐃΔᐃ: "img/night-copper2.png",
    ⵠⵠᐃⵠⵠ: "img/inv-copper-click.png",
    ᐃⵠΔⵠΔᐃⲆ: "img/day-topaz0.png",
    ᐃΔⲆⵠΔᐃΔ: "img/night-topaz0.png",
    ΔⲆᐃΔⵠΔⲆ: "img/day-topaz1.png",
    ΔΔⵠᐃΔⲆⲆ: "img/night-topaz1.png",
    ⵠᐃΔⵠΔΔⲆ: "img/day-topaz2.png",
    ⵠⲆⵠᐃᐃⲆᐃ: "img/night-topaz2.png",
    ⲆⵠⵠⲆⵠ: "img/inv-topaz-click.png",
    ᐃⲆᐃᐃΔΔⲆ: "img/day-sapphire0.png",
    ⲆⲆⵠⵠⲆᐃⲆ: "img/night-sapphire0.png",
    ⵠΔⵠΔᐃⲆΔ: "img/day-sapphire1.png",
    ΔᐃⵠⲆⲆⲆⲆ: "img/night-sapphire1.png",
    ᐃⵠⵠⵠᐃΔᐃ: "img/day-sapphire2.png",
    ΔΔᐃⲆⵠᐃΔ: "img/night-sapphire2.png",
    ⵠⵠⲆᐃᐃ: "img/inv-sapphire-click.png",
    ᐃΔᐃᐃᐃᐃⵠ: "img/day-jade0.png",
    ⵠΔⵠᐃⵠⵠⵠ: "img/night-jade0.png",
    ΔΔⲆᐃΔⵠⵠ: "img/day-jade1.png",
    ⵠᐃⵠⵠᐃⵠᐃ: "img/night-jade1.png",
    ΔᐃⵠΔΔⲆⵠ: "img/day-jade2.png",
    ⲆⲆᐃΔᐃᐃᐃ: "img/night-jade2.png",
    ᐃⲆⵠⵠᐃ: "img/inv-jade-click.png",
    ᐃⵠⵠᐃⲆΔᐃ: "img/day-ruby0.png",
    ⲆΔΔΔⵠᐃⲆ: "img/night-ruby0.png",
    ΔΔⵠⲆΔⲆΔ: "img/day-ruby1.png",
    ᐃᐃᐃᐃⵠᐃᐃ: "img/night-ruby1.png",
    ⵠΔᐃⲆⲆⲆⵠ: "img/day-ruby2.png",
    ⵠⲆᐃᐃᐃⲆΔ: "img/night-ruby2.png",
    ⲆⵠΔΔᐃ: "img/inv-ruby-click.png",
    ⲆΔⲆᐃⵠΔΔ: "img/day-aquamarine0.png",
    ⵠⵠΔⵠᐃΔΔ: "img/night-aquamarine0.png",
    ΔᐃⵠⲆⵠⵠΔ: "img/day-aquamarine1.png",
    ᐃΔⵠΔⵠⲆΔ: "img/night-aquamarine1.png",
    ⲆΔᐃⵠᐃⲆⵠ: "img/day-aquamarine2.png",
    ⵠⲆⲆⵠⵠⲆⲆ: "img/night-aquamarine2.png",
    ⲆᐃⲆⵠⲆ: "img/inv-aquamarine-click.png",
    ᐃⵠΔⵠᐃⲆᐃ: "img/day-coal0.png",
    ⵠΔⲆᐃⲆⵠⲆ: "img/night-coal0.png",
    ᐃΔⵠⵠⲆⲆⵠ: "img/day-coal1.png",
    ⵠⵠᐃⲆⵠΔΔ: "img/night-coal1.png",
    ⲆᐃΔⵠΔⵠⲆ: "img/day-coal2.png",
    ᐃⵠΔΔⵠΔⵠ: "img/night-coal2.png",
    ΔⲆⵠᐃⲆ: "img/inv-coal-click.png",
    ΔⵠΔⵠΔᐃΔ: "img/day-banana-plant.png",
    ⵠΔⲆⲆᐃΔⲆ: "img/night-banana-plant.png",
    ⵠⵠⲆᐃⲆᐃᐃ: "img/day-banana.png",
    ΔⲆⲆⲆⵠᐃᐃ: "img/night-banana.png",
    ⵠΔᐃᐃⲆᐃᐃ: "img/inv-banana-click.png",
    ⲆᐃⵠᐃⲆⵠᐃ: "img/inv-banana-out.png",
    ⲆΔᐃΔⵠⵠⲆ: "img/inv-banana-in.png",
    ΔᐃᐃΔᐃᐃⵠ: "img/inv-banana-click.png",
    ΔᐃΔⵠᐃⵠᐃ: "img/day-emerald-helmet.png",
    ⲆΔᐃᐃⵠⵠΔ: "img/night-emerald-helmet.png",
    ᐃⲆᐃⲆΔᐃⵠ: "img/inv-emerald-helmet-out.png",
    ᐃⲆΔⲆΔⵠⲆ: "img/inv-emerald-helmet-in.png",
    ΔΔⵠᐃᐃⲆⵠ: "img/inv-emerald-helmet-click.png",
    ⲆⵠⵠⲆᐃᐃⲆ: "img/day-copper-helmet.png",
    ⵠΔᐃᐃᐃᐃᐃ: "img/night-copper-helmet.png",
    ⵠⲆΔᐃᐃΔᐃ: "img/inv-copper-helmet-out.png",
    ΔᐃᐃᐃΔΔⲆ: "img/inv-copper-helmet-in.png",
    ᐃᐃⲆΔΔⵠᐃ: "img/inv-copper-helmet-click.png",
    ⵠⵠᐃⵠᐃΔⵠ: "img/day-iron-helmet.png",
    ⵠⲆᐃⵠⲆΔⲆ: "img/night-iron-helmet.png",
    ⲆⵠᐃΔᐃΔΔ: "img/inv-iron-helmet-out.png",
    ⲆⲆᐃⲆΔⵠΔ: "img/inv-iron-helmet-in.png",
    ΔⲆⵠⵠⵠⵠⵠ: "img/inv-iron-helmet-click.png",
    ⲆⲆᐃᐃΔᐃΔ: "img/day-topaz-helmet.png",
    ᐃⲆᐃΔΔⵠⵠ: "img/night-topaz-helmet.png",
    ⵠᐃᐃⵠΔⲆᐃ: "img/inv-topaz-helmet-out.png",
    ᐃⲆΔⵠⲆΔⲆ: "img/inv-topaz-helmet-in.png",
    ΔⲆᐃⵠᐃⵠᐃ: "img/inv-topaz-helmet-click.png",
    ⲆᐃΔⲆⲆⲆⵠ: "img/day-sapphire-helmet.png",
    ΔⵠⵠΔΔⵠᐃ: "img/night-sapphire-helmet.png",
    ⲆⲆⲆⲆᐃⵠᐃ: "img/inv-sapphire-helmet-out.png",
    ⲆⵠⵠΔⲆᐃΔ: "img/inv-sapphire-helmet-in.png",
    ⲆᐃᐃⲆⵠΔⲆ: "img/inv-sapphire-helmet-click.png",
    ⵠⲆⵠᐃⵠⲆᐃ: "img/day-jade-helmet.png",
    ⲆᐃⵠΔⵠᐃᐃ: "img/night-jade-helmet.png",
    ⲆΔᐃΔⲆᐃᐃ: "img/inv-jade-helmet-out.png",
    ⲆⵠΔⵠⵠᐃΔ: "img/inv-jade-helmet-in.png",
    ⵠᐃⵠΔⲆΔΔ: "img/inv-jade-helmet-click.png",
    ΔΔᐃⵠⵠⲆⵠ: "img/day-ruby-helmet.png",
    ᐃΔᐃⲆΔⲆⲆ: "img/night-ruby-helmet.png",
    ΔᐃⵠΔΔᐃᐃ: "img/inv-ruby-helmet-out.png",
    ΔⲆᐃΔᐃⲆΔ: "img/inv-ruby-helmet-in.png",
    ⲆᐃᐃⵠⵠⲆⲆ: "img/inv-ruby-helmet-click.png",
    ᐃᐃᐃⲆⵠᐃΔ: "img/day-coal-helmet.png",
    ⵠΔΔΔΔΔⵠ: "img/night-coal-helmet.png",
    ᐃᐃⵠᐃΔΔⵠ: "img/inv-coal-helmet-out.png",
    ᐃⵠᐃⲆⵠΔᐃ: "img/inv-coal-helmet-in.png",
    ⵠⲆᐃⵠᐃⲆⲆ: "img/inv-coal-helmet-click.png",
    ⲆⲆⲆⵠⲆᐃⵠ: "img/day-aquamarine-helmet.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/night-aquamarine-helmet.png",
    ΔΔΔᐃⲆᐃⵠ: "img/inv-aquamarine-helmet-out.png",
    Δᐃⵠᐃⵠⵠᐃ: "img/inv-aquamarine-helmet-in.png",
    ⵠⵠΔⲆᐃⵠΔ: "img/inv-aquamarine-helmet-click.png",
    ⲆΔⵠᐃᐃⲆᐃ: "img/day-copper-pickaxe.png",
    ᐃΔⵠΔⲆΔᐃ: "img/night-copper-pickaxe.png",
    ΔᐃᐃᐃᐃⲆᐃ: "img/inv-copper-pickaxe-out.png",
    ⲆⵠⲆⵠᐃΔⵠ: "img/inv-copper-pickaxe-in.png",
    ⲆᐃⵠΔᐃⲆⵠ: "img/inv-copper-pickaxe-click.png",
    ⲆⵠᐃΔⵠⲆⵠ: "img/day-iron-pickaxe.png",
    ᐃⵠᐃⵠⵠΔⲆ: "img/night-iron-pickaxe.png",
    ⲆΔΔᐃΔΔΔ: "img/inv-iron-pickaxe-out.png",
    ⲆᐃⲆⵠΔΔⲆ: "img/inv-iron-pickaxe-in.png",
    ΔᐃⵠΔⲆⵠΔ: "img/inv-iron-pickaxe-click.png",
    ⲆΔⲆΔΔᐃⵠ: "img/day-topaz-pickaxe.png",
    ⵠⲆⵠⵠⲆⲆᐃ: "img/night-topaz-pickaxe.png",
    ΔΔᐃᐃᐃⵠᐃ: "img/inv-topaz-pickaxe-out.png",
    ΔⵠⵠᐃⵠⲆΔ: "img/inv-topaz-pickaxe-in.png",
    ᐃᐃⲆⲆᐃΔᐃ: "img/inv-topaz-pickaxe-click.png",
    ⲆΔⲆΔⵠᐃᐃ: "img/day-sapphire-pickaxe.png",
    ᐃⲆΔⲆᐃⲆΔ: "img/night-sapphire-pickaxe.png",
    ⵠⵠᐃᐃⲆⵠⵠ: "img/inv-sapphire-pickaxe-out.png",
    ⵠΔⵠⲆⵠⵠⵠ: "img/inv-sapphire-pickaxe-in.png",
    ⲆⲆΔⲆᐃᐃⲆ: "img/inv-sapphire-pickaxe-click.png",
    ⵠⵠⲆⵠⲆᐃΔ: "img/day-jade-pickaxe.png",
    ⲆᐃⵠⵠⲆᐃⲆ: "img/night-jade-pickaxe.png",
    ⵠⵠⵠΔⵠⵠⲆ: "img/inv-jade-pickaxe-out.png",
    ΔΔΔᐃⲆΔΔ: "img/inv-jade-pickaxe-in.png",
    ⲆᐃⲆⲆΔⲆᐃ: "img/inv-jade-pickaxe-click.png",
    ΔⲆᐃⵠᐃΔΔ: "img/day-ruby-pickaxe.png",
    ⲆΔⲆⵠⲆⲆⲆ: "img/night-ruby-pickaxe.png",
    ΔΔⵠΔⲆΔΔ: "img/inv-ruby-pickaxe-out.png",
    ⲆⵠⲆⵠⲆⵠⵠ: "img/inv-ruby-pickaxe-in.png",
    ⲆⵠⵠⵠⵠⵠⲆ: "img/inv-ruby-pickaxe-click.png",
    ΔⵠᐃΔᐃⲆΔ: "img/day-emerald-pickaxe.png",
    ᐃⲆΔᐃⲆΔⲆ: "img/night-emerald-pickaxe.png",
    ⲆⲆⵠⵠⵠᐃⵠ: "img/inv-emerald-pickaxe-out.png",
    ⲆⵠᐃⵠⲆⲆᐃ: "img/inv-emerald-pickaxe-in.png",
    ⵠᐃⲆⵠᐃᐃⵠ: "img/inv-emerald-pickaxe-click.png",
    ᐃⲆⲆⲆΔⵠⵠ: "img/day-coal-pickaxe.png",
    ᐃΔΔⵠⵠΔⵠ: "img/night-coal-pickaxe.png",
    ΔⵠΔΔᐃⲆⲆ: "img/inv-coal-pickaxe-out.png",
    ᐃᐃⵠΔᐃⲆⵠ: "img/inv-coal-pickaxe-in.png",
    ⲆⲆΔⲆΔⵠᐃ: "img/inv-coal-pickaxe-click.png",
    ⲆⵠΔΔᐃᐃᐃ: "img/day-aquamarine-pickaxe.png",
    ᐃⵠⵠⵠᐃΔΔ: "img/night-aquamarine-pickaxe.png",
    ΔⵠⲆΔⵠⲆΔ: "img/inv-aquamarine-pickaxe-out.png",
    ΔⲆᐃⲆⲆΔΔ: "img/inv-aquamarine-pickaxe-in.png",
    ΔⵠⵠᐃᐃⲆΔ: "img/inv-aquamarine-pickaxe-click.png",
    ΔⲆⲆⵠᐃᐃⲆ: "img/day-copper-hammer.png",
    ⵠⵠᐃⲆⲆⲆᐃ: "img/night-copper-hammer.png",
    ⲆⲆⵠⲆⵠᐃᐃ: "img/inv-copper-hammer-out.png",
    ⲆⲆⲆⵠᐃⵠᐃ: "img/inv-copper-hammer-in.png",
    ᐃᐃⲆᐃⲆⲆΔ: "img/inv-copper-hammer-click.png",
    ⵠΔⵠΔⵠᐃⲆ: "img/day-iron-hammer.png",
    ᐃⲆᐃΔⲆⵠⲆ: "img/night-iron-hammer.png",
    ΔⲆᐃᐃᐃΔᐃ: "img/inv-iron-hammer-out.png",
    ⵠⲆᐃⲆⵠᐃⵠ: "img/inv-iron-hammer-in.png",
    ᐃⵠΔⵠⲆᐃᐃ: "img/inv-iron-hammer-click.png",
    ᐃⲆⵠⲆᐃΔᐃ: "img/day-topaz-hammer.png",
    ⲆⵠⵠⲆᐃⵠⲆ: "img/night-topaz-hammer.png",
    ⲆⵠⲆᐃᐃⵠⲆ: "img/inv-topaz-hammer-out.png",
    ΔⲆᐃΔⲆΔⲆ: "img/inv-topaz-hammer-in.png",
    ⵠⵠΔᐃᐃⲆᐃ: "img/inv-topaz-hammer-click.png",
    ᐃΔⲆⵠΔⵠⵠ: "img/day-sapphire-hammer.png",
    ᐃⲆΔΔⲆⵠΔ: "img/night-sapphire-hammer.png",
    ⲆΔⵠⵠᐃᐃᐃ: "img/inv-sapphire-hammer-out.png",
    ᐃᐃΔⲆⵠΔᐃ: "img/inv-sapphire-hammer-in.png",
    ΔᐃᐃⲆΔᐃⲆ: "img/inv-sapphire-hammer-click.png",
    ᐃⲆⵠⵠᐃⵠⲆ: "img/day-jade-hammer.png",
    ⵠⵠΔᐃⲆΔᐃ: "img/night-jade-hammer.png",
    ᐃᐃᐃⵠⲆΔⲆ: "img/inv-jade-hammer-out.png",
    ΔᐃⲆΔᐃⵠⵠ: "img/inv-jade-hammer-in.png",
    ᐃΔⵠⵠⲆⲆᐃ: "img/inv-jade-hammer-click.png",
    ⲆⲆᐃⲆⲆΔⵠ: "img/day-ruby-hammer.png",
    ⲆⲆⲆⵠᐃΔᐃ: "img/night-ruby-hammer.png",
    ⵠΔᐃᐃⲆΔᐃ: "img/inv-ruby-hammer-out.png",
    ΔⲆΔΔᐃⲆⵠ: "img/inv-ruby-hammer-in.png",
    ⲆⵠΔΔⵠⵠᐃ: "img/inv-ruby-hammer-click.png",
    ⲆⵠᐃΔⵠⲆᐃ: "img/day-emerald-hammer.png",
    ⲆⵠⵠᐃΔᐃⲆ: "img/night-emerald-hammer.png",
    ⲆᐃΔⲆⲆᐃᐃ: "img/inv-emerald-hammer-out.png",
    ⵠⲆᐃⲆΔⵠⵠ: "img/inv-emerald-hammer-in.png",
    ᐃⲆᐃⵠΔΔⲆ: "img/inv-emerald-hammer-click.png",
    Ⲇⵠᐃⵠᐃⵠⵠ: "img/day-coal-hammer.png",
    ⲆⲆⵠⲆⵠⵠΔ: "img/night-coal-hammer.png",
    ⲆⲆⵠᐃⲆⵠⵠ: "img/inv-coal-hammer-out.png",
    ᐃᐃⵠⲆⲆᐃⵠ: "img/inv-coal-hammer-in.png",
    ΔᐃᐃᐃΔᐃⵠ: "img/inv-coal-hammer-click.png",
    ΔⲆⲆⵠⲆᐃⲆ: "img/day-aquamarine-hammer.png",
    ⲆⵠᐃⵠⲆᐃᐃ: "img/night-aquamarine-hammer.png",
    ⵠᐃΔⲆⵠⵠⲆ: "img/inv-aquamarine-hammer-out.png",
    ΔⵠⵠⲆⵠⲆⲆ: "img/inv-aquamarine-hammer-in.png",
    ⲆᐃᐃⵠⲆᐃⲆ: "img/inv-aquamarine-hammer-click.png",
    ⵠⵠᐃᐃⲆⲆⵠ: "img/day-copper-shovel.png",
    ⵠᐃΔⵠΔⲆΔ: "img/night-copper-shovel.png",
    ⲆᐃⲆΔΔⲆᐃ: "img/inv-copper-shovel-out.png",
    ⵠⲆΔⲆⲆⵠΔ: "img/inv-copper-shovel-in.png",
    ᐃᐃⲆⵠΔⲆΔ: "img/inv-copper-shovel-click.png",
    ⲆⵠⵠΔᐃⵠΔ: "img/day-iron-shovel.png",
    ΔⵠⵠᐃⲆΔⲆ: "img/night-iron-shovel.png",
    ΔⲆⲆᐃⵠⵠⵠ: "img/inv-iron-shovel-out.png",
    ΔⵠᐃⲆⲆⵠⵠ: "img/inv-iron-shovel-in.png",
    ᐃΔⲆⲆΔⵠΔ: "img/inv-iron-shovel-click.png",
    ΔᐃᐃⲆΔΔᐃ: "img/day-topaz-shovel.png",
    ᐃⵠⵠⵠⵠΔⲆ: "img/night-topaz-shovel.png",
    ᐃⲆΔⲆᐃⵠⵠ: "img/inv-topaz-shovel-out.png",
    ⵠΔⵠⵠⵠⲆΔ: "img/inv-topaz-shovel-in.png",
    ⲆⵠⲆΔⵠΔΔ: "img/inv-topaz-shovel-click.png",
    ΔⵠⵠⵠⲆᐃⵠ: "img/day-sapphire-shovel.png",
    ⲆΔⲆⵠⵠᐃⵠ: "img/night-sapphire-shovel.png",
    ⵠⲆⲆΔⵠΔⲆ: "img/inv-sapphire-shovel-out.png",
    ⵠⲆΔΔΔΔᐃ: "img/inv-sapphire-shovel-in.png",
    ᐃᐃⵠᐃᐃⲆⲆ: "img/inv-sapphire-shovel-click.png",
    ᐃᐃⲆⵠᐃΔΔ: "img/day-jade-shovel.png",
    ⵠⵠⲆΔΔᐃᐃ: "img/night-jade-shovel.png",
    ⲆΔⲆᐃⲆᐃⲆ: "img/inv-jade-shovel-out.png",
    ᐃΔⵠΔⲆⵠⲆ: "img/inv-jade-shovel-in.png",
    ⲆᐃⲆᐃΔᐃᐃ: "img/inv-jade-shovel-click.png",
    ⲆⲆⵠⵠⲆⵠⵠ: "img/day-ruby-shovel.png",
    ΔⵠⲆⲆⵠΔⵠ: "img/night-ruby-shovel.png",
    ⵠⵠⲆᐃⲆⵠᐃ: "img/inv-ruby-shovel-out.png",
    ⵠⵠΔⵠΔⵠᐃ: "img/inv-ruby-shovel-in.png",
    ᐃΔⲆΔⲆᐃᐃ: "img/inv-ruby-shovel-click.png",
    ΔᐃⵠΔᐃⲆⲆ: "img/day-emerald-shovel.png",
    ⲆᐃⵠⲆⲆΔⵠ: "img/night-emerald-shovel.png",
    ⵠⵠᐃⵠⵠⲆΔ: "img/inv-emerald-shovel-out.png",
    ΔⲆᐃᐃᐃᐃⲆ: "img/inv-emerald-shovel-in.png",
    ΔΔⲆᐃⵠⵠⲆ: "img/inv-emerald-shovel-click.png",
    ⵠᐃᐃΔᐃⵠΔ: "img/day-reidite-shovel.png",
    ⲆᐃⵠᐃᐃᐃⲆ: "img/night-reidite-shovel.png",
    ⵠⲆᐃᐃⵠⵠᐃ: "img/inv-reidite-shovel-out.png",
    ⵠⲆⲆΔⵠⲆⵠ: "img/inv-reidite-shovel-in.png",
    ᐃⵠᐃⲆᐃⵠⵠ: "img/inv-reidite-shovel-click.png",
    ΔᐃⲆⲆΔΔᐃ: "img/day-coal-shovel.png",
    ⵠⲆⵠΔⲆⲆᐃ: "img/night-coal-shovel.png",
    ΔᐃΔΔⵠⲆⲆ: "img/inv-coal-shovel-out.png",
    ᐃᐃⵠⵠⵠⵠᐃ: "img/inv-coal-shovel-in.png",
    ᐃⲆᐃⲆⵠΔⵠ: "img/inv-coal-shovel-click.png",
    ⵠᐃΔⵠᐃᐃᐃ: "img/day-aquamarine-shovel.png",
    ΔⲆⲆⲆⵠⲆᐃ: "img/night-aquamarine-shovel.png",
    ΔΔⲆⵠⵠᐃΔ: "img/inv-aquamarine-shovel-out.png",
    ᐃⵠⵠᐃⵠΔΔ: "img/inv-aquamarine-shovel-in.png",
    ᐃΔⲆΔⲆⵠᐃ: "img/inv-aquamarine-shovel-click.png",
    ΔⲆⵠᐃΔⵠⵠ: "img/day-copper-sword.png",
    ᐃΔᐃⲆⲆⵠⵠ: "img/night-copper-sword.png",
    ⵠᐃᐃⲆᐃᐃᐃ: "img/inv-copper-sword-out.png",
    ΔᐃΔⲆⵠⵠⵠ: "img/inv-copper-sword-in.png",
    ⵠᐃⲆᐃΔⵠⵠ: "img/inv-copper-sword-click.png",
    ΔΔⵠⵠᐃⵠⵠ: "img/day-iron-sword.png",
    ⲆΔⵠᐃⲆΔⲆ: "img/night-iron-sword.png",
    ⲆᐃᐃⵠΔΔᐃ: "img/inv-iron-sword-out.png",
    ⵠⵠΔⵠⲆⵠᐃ: "img/inv-iron-sword-in.png",
    ΔΔⵠΔⵠΔⲆ: "img/inv-iron-sword-click.png",
    ΔΔⵠΔᐃⲆⵠ: "img/day-topaz-sword.png",
    ΔⵠΔΔᐃᐃⲆ: "img/night-topaz-sword.png",
    ⲆⲆᐃⵠΔΔᐃ: "img/inv-topaz-sword-out.png",
    ⲆΔΔⲆΔᐃΔ: "img/inv-topaz-sword-in.png",
    ⵠⵠⲆΔᐃⵠⲆ: "img/inv-topaz-sword-click.png",
    ⵠⵠⲆⵠΔΔᐃ: "img/day-sapphire-sword.png",
    ⲆⲆⵠᐃᐃⲆΔ: "img/night-sapphire-sword.png",
    ⲆᐃⵠΔΔⵠⲆ: "img/inv-sapphire-sword-out.png",
    ⲆΔⵠⵠⲆⵠᐃ: "img/inv-sapphire-sword-in.png",
    ᐃΔⲆⵠⲆⵠⵠ: "img/inv-sapphire-sword-click.png",
    ΔⵠᐃⵠⲆᐃΔ: "img/day-jade-sword.png",
    ΔⵠⵠΔⵠᐃⲆ: "img/night-jade-sword.png",
    ΔᐃᐃᐃⵠᐃⲆ: "img/inv-jade-sword-out.png",
    ᐃΔΔᐃΔᐃᐃ: "img/inv-jade-sword-in.png",
    ⲆᐃⲆΔᐃⵠΔ: "img/inv-jade-sword-click.png",
    ⵠᐃᐃⲆⵠⵠⲆ: "img/day-ruby-sword.png",
    ⲆᐃᐃⲆᐃⲆᐃ: "img/night-ruby-sword.png",
    ⲆΔⲆᐃᐃᐃⵠ: "img/inv-ruby-sword-out.png",
    ΔⲆΔΔⵠᐃΔ: "img/inv-ruby-sword-in.png",
    ⲆⲆΔΔΔᐃⵠ: "img/inv-ruby-sword-click.png",
    ΔⲆΔΔΔᐃⵠ: "img/day-emerald-sword.png",
    ⵠᐃΔᐃⵠⵠⵠ: "img/night-emerald-sword.png",
    ⵠᐃᐃⲆⲆⲆⲆ: "img/inv-emerald-sword-out.png",
    ΔⲆⵠΔⵠΔᐃ: "img/inv-emerald-sword-in.png",
    ⵠⵠⲆᐃΔᐃΔ: "img/inv-emerald-sword-click.png",
    ΔⲆⵠΔᐃΔΔ: "img/day-coal-sword.png",
    ⵠⵠⲆⲆᐃΔᐃ: "img/night-coal-sword.png",
    ⲆⲆⲆᐃⲆᐃⲆ: "img/inv-coal-sword-out.png",
    ⲆⵠΔⲆⵠⲆⵠ: "img/inv-coal-sword-in.png",
    ΔⲆΔⲆⵠΔⵠ: "img/inv-coal-sword-click.png",
    ⵠⵠΔΔⲆⲆⲆ: "img/day-aquamarine-sword.png",
    ⵠΔⲆᐃⲆΔᐃ: "img/night-aquamarine-sword.png",
    ΔᐃΔⲆⵠΔᐃ: "img/inv-aquamarine-sword-out.png",
    ᐃⲆⵠΔⲆΔⲆ: "img/inv-aquamarine-sword-in.png",
    ᐃᐃΔⵠⲆΔᐃ: "img/inv-aquamarine-sword-click.png",
    ΔᐃᐃΔᐃⵠⵠ: "img/day-copper-spear.png",
    ΔⲆⵠᐃⲆΔⲆ: "img/night-copper-spear.png",
    ⵠⲆⵠᐃᐃⵠΔ: "img/inv-copper-spear-out.png",
    ᐃⲆΔⵠΔᐃᐃ: "img/inv-copper-spear-in.png",
    ᐃⲆΔⲆⵠᐃⵠ: "img/inv-copper-spear-click.png",
    ΔΔⵠᐃᐃΔⵠ: "img/day-iron-spear.png",
    ΔᐃᐃⲆᐃΔⵠ: "img/night-iron-spear.png",
    ⲆᐃⲆᐃᐃⵠⲆ: "img/inv-iron-spear-out.png",
    ⲆΔⵠⵠⵠᐃᐃ: "img/inv-iron-spear-in.png",
    ⲆᐃⵠⵠⵠᐃΔ: "img/inv-iron-spear-click.png",
    ΔⵠⵠⲆΔᐃᐃ: "img/day-topaz-spear.png",
    ᐃᐃᐃⲆΔⵠΔ: "img/night-topaz-spear.png",
    ⲆⲆᐃΔᐃⵠⲆ: "img/inv-topaz-spear-out.png",
    ⵠᐃⵠⵠΔᐃᐃ: "img/inv-topaz-spear-in.png",
    ⲆⲆΔⲆⲆⵠΔ: "img/inv-topaz-spear-click.png",
    ΔΔΔΔᐃΔΔ: "img/day-sapphire-spear.png",
    ΔΔΔΔΔⵠΔ: "img/night-sapphire-spear.png",
    ⵠΔᐃⵠᐃⲆⲆ: "img/inv-sapphire-spear-out.png",
    ⵠΔⵠᐃᐃᐃⵠ: "img/inv-sapphire-spear-in.png",
    ΔⵠᐃᐃΔⵠᐃ: "img/inv-sapphire-spear-click.png",
    ΔᐃⵠᐃⵠⵠΔ: "img/day-jade-spear.png",
    ᐃⲆⲆⲆᐃⲆⲆ: "img/night-jade-spear.png",
    ⵠⲆᐃΔⵠΔⵠ: "img/inv-jade-spear-out.png",
    ⵠΔⲆⵠⵠΔΔ: "img/inv-jade-spear-in.png",
    ᐃΔΔⵠᐃⲆⵠ: "img/inv-jade-spear-click.png",
    ⲆⵠΔⵠⲆΔⲆ: "img/day-ruby-spear.png",
    ᐃⲆᐃΔᐃⲆΔ: "img/night-ruby-spear.png",
    ᐃⲆⵠⲆᐃⵠⲆ: "img/inv-ruby-spear-out.png",
    ΔⵠⵠⲆᐃΔⵠ: "img/inv-ruby-spear-in.png",
    ΔⲆⲆᐃⲆⲆΔ: "img/inv-ruby-spear-click.png",
    ᐃᐃⵠΔΔⲆⵠ: "img/day-emerald-spear.png",
    ΔΔⲆΔΔΔⵠ: "img/night-emerald-spear.png",
    ⲆⲆⵠⵠⲆⵠⲆ: "img/inv-emerald-spear-out.png",
    ᐃᐃᐃΔΔΔⵠ: "img/inv-emerald-spear-in.png",
    ⵠΔΔΔⵠⵠⲆ: "img/inv-emerald-spear-click.png",
    ᐃᐃⵠΔΔⲆⵠ: "img/day-emerald-spear.png",
    ΔΔⲆΔΔΔⵠ: "img/night-emerald-spear.png",
    ⲆⲆⵠⵠⲆⵠⲆ: "img/inv-emerald-spear-out.png",
    ᐃᐃᐃΔΔΔⵠ: "img/inv-emerald-spear-in.png",
    ⵠΔΔΔⵠⵠⲆ: "img/inv-emerald-spear-click.png",
    ⲆᐃᐃᐃΔⲆᐃ: "img/day-coal-spear.png",
    ᐃⲆΔᐃⵠᐃᐃ: "img/night-coal-spear.png",
    ᐃΔᐃⲆᐃⲆⲆ: "img/inv-coal-spear-out.png",
    ᐃⵠᐃⵠΔᐃΔ: "img/inv-coal-spear-in.png",
    ᐃΔᐃΔᐃⲆΔ: "img/inv-coal-spear-click.png",
    ΔⵠⲆⲆᐃⲆⲆ: "img/day-aquamarine-spear.png",
    ᐃⲆⵠᐃⵠΔⲆ: "img/night-aquamarine-spear.png",
    ⵠⵠΔⲆⵠⲆⵠ: "img/inv-aquamarine-spear-out.png",
    ΔᐃⵠᐃⵠᐃΔ: "img/inv-aquamarine-spear-in.png",
    ⵠᐃⲆⵠⲆⵠⵠ: "img/inv-aquamarine-spear-click.png",
    ᐃᐃⲆⲆⲆⵠᐃ: "img/day-copper-bow.png",
    ⲆᐃᐃⵠΔⲆΔ: "img/night-copper-bow.png",
    ᐃΔΔⵠⵠⵠⵠ: "img/inv-copper-bow-out.png",
    ⲆⵠΔⲆⲆᐃⵠ: "img/inv-copper-bow-in.png",
    ⵠΔᐃᐃⵠᐃⲆ: "img/inv-copper-bow-click.png",
    ᐃΔᐃᐃⵠΔⲆ: "img/day-iron-bow.png",
    ᐃΔⲆⵠⵠⲆΔ: "img/night-iron-bow.png",
    ᐃᐃΔⲆᐃᐃⵠ: "img/inv-iron-bow-out.png",
    ᐃᐃᐃΔᐃᐃⲆ: "img/inv-iron-bow-in.png",
    ⵠᐃⵠⲆᐃⵠⵠ: "img/inv-iron-bow-click.png",
    ΔⵠΔⲆⲆΔⵠ: "img/day-topaz-bow.png",
    ⲆΔΔᐃⵠⵠⲆ: "img/night-topaz-bow.png",
    ⲆⲆΔΔΔᐃᐃ: "img/inv-topaz-bow-out.png",
    ᐃⵠⵠⵠⵠᐃⵠ: "img/inv-topaz-bow-in.png",
    ᐃΔⲆᐃᐃⵠᐃ: "img/inv-topaz-bow-click.png",
    Ⲇᐃⵠⵠᐃⵠᐃ: "img/day-sapphire-bow.png",
    ΔⲆᐃᐃΔⵠᐃ: "img/night-sapphire-bow.png",
    ᐃⵠΔⲆᐃⵠᐃ: "img/inv-sapphire-bow-out.png",
    ᐃᐃⲆⵠⲆᐃⵠ: "img/inv-sapphire-bow-in.png",
    ⲆⵠⵠⲆⲆⲆᐃ: "img/inv-sapphire-bow-click.png",
    ᐃⲆᐃⲆᐃⵠᐃ: "img/day-jade-bow.png",
    ⵠⲆΔᐃⵠⵠᐃ: "img/night-jade-bow.png",
    ΔⵠᐃᐃⲆⲆⲆ: "img/inv-jade-bow-out.png",
    ΔᐃⵠⵠΔᐃᐃ: "img/inv-jade-bow-in.png",
    ⲆⵠΔⵠΔΔᐃ: "img/inv-jade-bow-click.png",
    ⵠⲆⵠΔᐃᐃᐃ: "img/day-ruby-bow.png",
    ⲆⲆᐃΔⵠⲆᐃ: "img/night-ruby-bow.png",
    ᐃⲆⲆᐃΔΔΔ: "img/inv-ruby-bow-out.png",
    ⲆΔᐃᐃΔⵠΔ: "img/inv-ruby-bow-in.png",
    ⵠⲆᐃⵠⲆⵠⵠ: "img/inv-ruby-bow-click.png",
    ⵠΔⲆΔΔⲆⲆ: "img/day-emerald-bow.png",
    ΔⵠᐃⲆΔᐃΔ: "img/night-emerald-bow.png",
    ⲆⲆᐃΔᐃⵠⵠ: "img/inv-emerald-bow-out.png",
    ⵠⵠⵠΔⵠᐃΔ: "img/inv-emerald-bow-in.png",
    ΔᐃΔⵠⲆΔᐃ: "img/inv-emerald-bow-click.png",
    ᐃⵠᐃᐃᐃΔⲆ: "img/day-coal-bow.png",
    ᐃᐃⲆΔΔΔΔ: "img/night-coal-bow.png",
    ΔΔᐃⲆⵠΔⵠ: "img/inv-coal-bow-out.png",
    ⲆⵠᐃΔᐃᐃᐃ: "img/inv-coal-bow-in.png",
    ᐃⵠⲆⵠⲆΔⵠ: "img/inv-coal-bow-click.png",
    ⲆΔⵠⵠⵠⵠⲆ: "img/day-aquamarine-bow.png",
    ⲆⵠᐃΔⵠᐃⲆ: "img/night-aquamarine-bow.png",
    ᐃⲆⲆⵠΔᐃⵠ: "img/inv-aquamarine-bow-out.png",
    ⲆⵠΔⵠⵠⵠⲆ: "img/inv-aquamarine-bow-in.png",
    ᐃⲆᐃᐃΔΔᐃ: "img/inv-aquamarine-bow-click.png",
    ΔΔⵠᐃⲆΔⲆ: "img/day-copper-arrow.png",
    ΔⲆⵠⵠᐃⵠΔ: "img/night-copper-arrow.png",
    ᐃΔⵠᐃᐃⲆᐃ: "img/inv-copper-arrow-out.png",
    ⵠⲆᐃΔⵠᐃⵠ: "img/inv-copper-arrow-in.png",
    ΔⵠᐃⲆᐃΔΔ: "img/inv-copper-arrow-click.png",
    ΔΔᐃⲆⵠΔⲆ: "img/day-iron-arrow.png",
    ΔᐃᐃⲆΔⵠᐃ: "img/night-iron-arrow.png",
    ΔᐃⵠⲆᐃⵠⵠ: "img/inv-iron-arrow-out.png",
    ᐃⵠᐃᐃΔⲆᐃ: "img/inv-iron-arrow-in.png",
    ⵠΔⵠⵠΔΔⵠ: "img/inv-iron-arrow-click.png",
    ᐃᐃⲆᐃⵠΔⲆ: "img/day-topaz-arrow.png",
    ᐃⲆⵠᐃΔᐃⵠ: "img/night-topaz-arrow.png",
    ᐃΔᐃⵠⵠⲆⲆ: "img/inv-topaz-arrow-out.png",
    ⲆΔᐃΔᐃΔΔ: "img/inv-topaz-arrow-in.png",
    ⲆΔᐃⵠⵠΔᐃ: "img/inv-topaz-arrow-click.png",
    ΔΔᐃⵠⵠⵠᐃ: "img/day-sapphire-arrow.png",
    ⲆᐃⵠⲆΔⲆⵠ: "img/night-sapphire-arrow.png",
    ΔⵠᐃᐃΔᐃᐃ: "img/inv-sapphire-arrow-out.png",
    ⵠⲆⲆᐃⵠᐃⲆ: "img/inv-sapphire-arrow-in.png",
    ⲆᐃᐃᐃᐃΔⲆ: "img/inv-sapphire-arrow-click.png",
    ΔΔⲆΔᐃⵠᐃ: "img/day-jade-arrow.png",
    ΔᐃᐃΔᐃⵠΔ: "img/night-jade-arrow.png",
    ΔⲆᐃⲆᐃⵠⵠ: "img/inv-jade-arrow-out.png",
    ⲆᐃⵠΔᐃΔᐃ: "img/inv-jade-arrow-in.png",
    ᐃΔᐃᐃᐃΔⵠ: "img/inv-jade-arrow-click.png",
    ⲆᐃᐃᐃΔΔᐃ: "img/day-ruby-arrow.png",
    ΔⵠⲆᐃΔⲆΔ: "img/night-ruby-arrow.png",
    ᐃΔΔⲆᐃᐃⲆ: "img/inv-ruby-arrow-out.png",
    ⵠⵠΔⲆⵠᐃΔ: "img/inv-ruby-arrow-in.png",
    ᐃⵠⵠⵠᐃⵠᐃ: "img/inv-ruby-arrow-click.png",
    ΔΔⵠⲆⵠΔⲆ: "img/day-emerald-arrow.png",
    ΔⵠΔᐃⵠⵠΔ: "img/night-emerald-arrow.png",
    ᐃⵠⵠᐃⵠⵠᐃ: "img/inv-emerald-arrow-out.png",
    ᐃⵠΔΔΔⵠᐃ: "img/inv-emerald-arrow-in.png",
    ⲆⲆᐃⲆΔΔⵠ: "img/inv-emerald-arrow-click.png",
    ᐃⲆΔⵠⵠᐃᐃ: "img/day-coal-arrow.png",
    ⵠΔⲆⲆΔⲆⲆ: "img/night-coal-arrow.png",
    ΔⲆᐃᐃⲆⲆⵠ: "img/inv-coal-arrow-out.png",
    ⲆⵠⵠΔⲆⵠΔ: "img/inv-coal-arrow-in.png",
    ⲆᐃⲆΔⲆⵠΔ: "img/inv-coal-arrow-click.png",
    ⵠⲆᐃⵠⵠᐃⲆ: "img/day-aquamarine-arrow.png",
    ᐃᐃᐃⲆⵠⲆⲆ: "img/night-aquamarine-arrow.png",
    ⵠⲆⵠΔΔᐃⵠ: "img/inv-aquamarine-arrow-out.png",
    ΔᐃΔⵠᐃⲆΔ: "img/inv-aquamarine-arrow-in.png",
    ΔΔΔᐃΔⵠΔ: "img/inv-aquamarine-arrow-click.png",
    ⲆᐃᐃⵠⲆⵠΔ: "img/day-witch-hat.png",
    ΔⲆᐃⵠᐃᐃΔ: "img/night-witch-hat.png",
    ⵠⲆⲆⵠⲆⲆⲆ: "img/inv-witch-hat-out.png",
    ΔᐃᐃⵠΔⵠⵠ: "img/inv-witch-hat-in.png",
    ᐃᐃⲆⲆⲆⲆⵠ: "img/inv-witch-hat-click.png",
    ΔᐃⵠΔᐃᐃⲆ: "img/day-nimbus2000.png",
    ⲆᐃΔΔⲆⲆᐃ: "img/night-nimbus2000.png",
    ⲆᐃⵠᐃᐃΔΔ: "img/inv-nimbus2000-out.png",
    ⲆⲆⲆΔᐃⵠᐃ: "img/inv-nimbus2000-in.png",
    ⵠⲆⲆⵠᐃⲆᐃ: "img/inv-nimbus2000-click.png",
    ΔⵠᐃᐃᐃⲆᐃ: "img/day-accessory1-pacques.png",
    ⵠⲆΔΔᐃᐃᐃ: "img/night-accessory1-pacques.png",
    ⵠⲆⲆᐃⵠⲆⲆ: "img/day-accessory2-pacques.png",
    ⵠΔⲆΔⵠΔⵠ: "img/night-accessory2-pacques.png",
    ᐃⲆΔΔΔⲆᐃ: "img/day-accessory3-pacques.png",
    ᐃⲆⵠᐃΔΔⲆ: "img/night-accessory3-pacques.png",
    ⲆΔᐃΔⲆΔⲆ: "img/day-accessory5-pacques.png",
    ⲆΔⲆᐃᐃΔⲆ: "img/night-accessory5-pacques.png",
    ᐃᐃⵠⵠⲆᐃΔ: "img/day-accessory6-pacques.png",
    ᐃᐃᐃΔⵠⲆⲆ: "img/night-accessory6-pacques.png",
    ᐃⵠⲆᐃⵠⲆΔ: "img/day-accessory7-pacques.png",
    ⵠⵠⲆⲆⲆᐃⵠ: "img/night-accessory7-pacques.png",
    ⵠΔΔⵠΔⵠⲆ: "img/day-accessory8-pacques.png",
    ⲆΔᐃⲆᐃⵠⲆ: "img/night-accessory8-pacques.png",
    ⵠᐃⵠⵠᐃⲆⲆ: "img/day-bag-pacques.png",
    ᐃⵠⲆᐃⵠᐃⵠ: "img/night-bag-pacques.png",
    ΔᐃⲆⵠⵠⵠⵠ: "img/day-carrot.png",
    ⲆⵠΔⵠᐃⲆⲆ: "img/night-carrot.png",
    ⵠⵠΔΔΔᐃΔ: "img/day-carrot-dried.png",
    ⵠΔⲆᐃᐃΔⵠ: "img/night-carrot-dried.png",
    ⲆᐃᐃΔΔⵠΔ: "img/day-tomato-herb.png",
    ⲆⵠΔⲆᐃⵠⵠ: "img/night-tomato-herb.png",
    ᐃΔᐃⲆΔᐃᐃ: "img/day-tomato-herb-dried.png",
    ⲆΔΔⲆΔⵠΔ: "img/night-tomato-herb-dried.png",
    ⵠᐃᐃⲆⲆⲆᐃ: "img/day-tomato.png",
    ⲆᐃΔΔⲆΔⲆ: "img/night-tomato.png",
    ΔⲆᐃⵠⲆⲆⵠⲆᐃ: "img/day-banana.png",
    ⵠⵠⲆⲆⲆⵠⲆⵠⲆ: "img/night-banana.png",
    ΔΔΔⵠⲆᐃⲆ: "img/day-banana-dried.png",
    ᐃⵠⵠⵠΔΔᐃ: "img/night-banana-dried.png",
    ΔᐃΔⵠΔⲆΔ: "img/inv-carrot-out.png",
    ⵠΔⵠⲆᐃⵠᐃ: "img/inv-carrot-in.png",
    ΔⲆⵠⵠᐃⵠⵠ: "img/inv-carrot-click.png",
    ΔᐃⵠⲆΔⲆΔ: "img/inv-tomato-out.png",
    ΔᐃᐃⵠΔⵠᐃ: "img/inv-tomato-in.png",
    ⲆⲆᐃⲆⲆⵠⲆ: "img/inv-tomato-click.png",
    ⲆᐃⵠᐃⲆⵠᐃ: "img/inv-banana-out.png",
    ⲆΔᐃΔⵠⵠⲆ: "img/inv-banana-in.png",
    ΔᐃᐃΔᐃᐃⵠ: "img/inv-banana-click.png",
    ΔᐃⵠᐃⵠΔᐃ: "img/day-player0.png",
    ΔᐃⵠᐃⲆΔᐃ: "img/night-player0.png",
    ᐃⲆᐃⲆⵠᐃⵠ: "img/day-player1.png",
    ᐃᐃⵠΔΔΔᐃ: "img/night-player1.png",
    ΔⵠΔᐃᐃⵠⲆ: "img/day-player2.png",
    ΔᐃⵠⵠΔᐃΔ: "img/night-player22.png",
    ΔⲆⵠΔΔᐃⲆ: "img/day-player3.png",
    ᐃᐃΔΔᐃᐃⵠ: "img/night-player33.png",
    ⵠⲆΔⵠⵠΔᐃ: "img/day-player4.png",
    ΔᐃⵠⵠᐃΔⲆ: "img/night-player4.png",
    ⲆⵠⲆᐃᐃᐃⲆ: "img/day-player5.png",
    ᐃⵠᐃⵠⲆᐃΔ: "img/night-player5.png",
    ᐃⵠⲆⵠΔⲆⵠ: "img/day-player6.png",
    ⲆⲆΔⲆⲆΔΔ: "img/night-player6.png",
    ᐃⲆΔᐃΔΔⲆ: "img/day-player7.png",
    ΔⵠᐃⲆⵠΔΔ: "img/night-player7.png",
    ΔⵠΔᐃⵠⵠⲆ: "img/day-player8.png",
    ᐃΔⵠⵠᐃⵠⲆ: "img/night-player8.png",
    ⵠⲆᐃⲆⲆᐃΔ: "img/day-player9.png",
    ΔΔᐃⵠⲆⲆⵠ: "img/night-player9.png",
    ᐃⵠᐃⵠⵠᐃⲆ: "img/day-player10.png",
    ⵠΔΔⲆⵠⲆⵠ: "img/night-player10.png",
    ⲆⵠᐃᐃⲆⵠⵠ: "img/day-player11.png",
    ΔⵠΔᐃΔⲆⲆ: "img/night-player11.png",
    ΔΔⵠⵠⲆⲆⲆ: "img/day-player12.png",
    ΔⵠⲆΔΔⲆᐃ: "img/night-player12.png",
    ⲆΔᐃᐃᐃΔᐃ: "img/day-player13.png",
    ᐃᐃⲆⲆⵠⵠⲆ: "img/night-player13.png",
    ⵠⲆΔᐃⵠᐃⲆ: "img/day-player14.png",
    ⵠΔᐃΔΔᐃΔ: "img/night-player14.png",
    ⵠⲆⵠⲆⲆᐃⵠ: "img/day-player15.png",
    ⲆᐃΔΔᐃⵠⲆ: "img/night-player15.png",
    ᐃⲆⵠⲆⵠᐃⵠ: "img/day-player16.png",
    ⵠᐃⲆΔᐃⲆⲆ: "img/night-player16.png",
    ⲆΔⲆⲆⲆⲆⵠ: "img/day-player17.png",
    ᐃⵠⲆᐃᐃᐃΔ: "img/night-player17.png",
    ⵠⲆⲆᐃΔΔⲆ: "img/day-player18.png",
    ⲆⲆⵠᐃᐃⲆⵠ: "img/night-player18.png",
    ⵠⵠᐃⲆΔΔΔ: "img/day-player19.png",
    ᐃΔᐃⵠΔⲆΔ: "img/night-player19.png",
    ⵠΔⲆⵠⵠᐃᐃ: "img/day-hand-player0.png",
    ⲆΔⲆᐃᐃⵠⲆ: "img/night-hand-player0.png",
    ΔⵠⲆⲆⲆⲆⵠ: "img/day-hand-player1.png",
    ⵠⵠᐃᐃᐃΔⵠ: "img/night-hand-player1.png",
    ᐃⵠⲆΔⵠᐃⵠ: "img/day-hand-player2.png",
    ⲆⵠⲆΔΔᐃΔ: "img/night-hand-player22.png",
    ⵠΔΔⵠᐃΔⵠ: "img/day-hand-player3.png",
    ⵠᐃᐃΔᐃⵠⲆ: "img/night-hand-player33.png",
    ᐃᐃᐃⵠΔⲆⲆ: "img/day-hand-player4.png",
    ⲆⲆΔⲆⲆΔⲆ: "img/night-hand-player4.png",
    ΔᐃⲆⵠΔΔΔ: "img/day-hand-player5.png",
    ᐃᐃᐃⲆⵠⵠΔ: "img/night-hand-player5.png",
    ᐃΔᐃΔᐃᐃΔ: "img/day-hand-player6.png",
    ⵠⵠⲆᐃΔΔⲆ: "img/night-hand-player6.png",
    ᐃⲆⲆⵠⲆᐃⵠ: "img/day-hand-player7.png",
    ⲆⵠΔⵠᐃⲆⵠ: "img/night-hand-player7.png",
    ΔⲆⲆᐃⲆΔⵠ: "img/day-hand-player8.png",
    ⲆΔⵠᐃⲆⲆΔ: "img/night-hand-player8.png",
    ᐃΔᐃⲆⲆⲆΔ: "img/day-hand-player9.png",
    ΔᐃⵠᐃᐃⲆᐃ: "img/night-hand-player9.png",
    ΔⵠⵠΔΔⲆᐃ: "img/day-hand-player10.png",
    ᐃᐃⵠΔⲆᐃⵠ: "img/night-hand-player10.png",
    ΔᐃᐃⵠΔΔΔ: "img/day-hand-player11.png",
    ⲆᐃⲆⵠΔⲆⲆ: "img/night-hand-player11.png",
    ᐃΔⲆⵠⲆⲆΔ: "img/day-hand-player12.png",
    ᐃΔᐃⲆᐃᐃΔ: "img/night-hand-player12.png",
    ⲆΔᐃΔⵠᐃⲆ: "img/day-hand-player13.png",
    ⵠⵠᐃΔⲆᐃⲆ: "img/night-hand-player13.png",
    ᐃⲆΔⲆⵠΔᐃ: "img/day-hand-player14.png",
    ᐃᐃΔΔΔΔΔ: "img/night-hand-player14.png",
    ⲆⵠΔΔᐃⵠΔ: "img/day-hand-player15.png",
    ᐃΔΔⲆⲆⲆΔ: "img/night-hand-player15.png",
    ΔΔⲆΔᐃⲆⵠ: "img/day-hand-player16.png",
    ⲆⲆⵠⲆⲆⲆᐃ: "img/night-hand-player16.png",
    ΔⲆᐃⵠⲆᐃΔ: "img/day-hand-player17.png",
    ⲆⲆⲆᐃⵠⲆᐃ: "img/night-hand-player17.png",
    ⲆΔΔᐃΔⵠΔ: "img/day-hand-player18.png",
    ΔΔᐃΔⲆᐃⵠ: "img/night-hand-player18.png",
    ΔᐃⲆⲆⲆΔⲆ: "img/day-hand-player19.png",
    ⵠΔⲆⲆⲆⲆⲆ: "img/night-hand-player19.png",
    ⲆᐃⵠΔⲆΔΔ: "img/day-accessory4.png",
    ⲆⵠⵠΔⲆⵠⲆ: "img/night-accessory4.png",
    ⲆⲆᐃⲆⵠⲆΔ: "img/day-accessory9.png",
    ⲆⵠᐃᐃⲆⵠⲆ: "img/night-accessory9.png",
    ᐃⲆⵠⲆⲆⲆⲆ: "img/day-accessory10.png",
    ᐃᐃΔᐃᐃⵠⲆ: "img/night-accessory10.png",
    ⵠⲆΔᐃⵠⲆᐃ: "img/day-accessory11.png",
    ⲆⲆⲆⲆⲆᐃⲆ: "img/night-accessory11.png",
    ᐃΔⲆⲆⲆΔⵠ: "img/day-accessory12.png",
    ⲆΔΔⲆⵠⲆᐃ: "img/night-accessory12.png",
    ᐃᐃⲆⵠⵠⲆⲆ: "img/day-bag.png",
    ⵠΔⵠⵠᐃΔⲆ: "img/night-bag.png",
    ⵠⲆᐃⲆⵠΔⵠ: "img/inv-bag-out.png",
    ᐃⲆⲆᐃᐃⲆΔ: "img/inv-bag-in.png",
    ⵠΔᐃΔᐃⵠΔ: "img/inv-bag-click.png",
    ⵠⵠⵠⲆᐃΔⵠ: "img/day-pitchfork.png",
    ⵠᐃⵠᐃΔⲆⵠ: "img/night-pitchfork.png",
    ⵠΔᐃᐃᐃΔⲆ: "img/inv-pitchfork-out.png",
    ⵠⲆⲆⵠⲆΔΔ: "img/inv-pitchfork-in.png",
    ᐃᐃⲆΔΔⲆⲆ: "img/inv-pitchfork-click.png",
    ᐃΔᐃⵠᐃⵠⵠ: "img/inv-wood-spike-door-out.png",
    ΔΔΔⵠⵠΔⲆ: "img/inv-wood-spike-door-in.png",
    ΔΔⲆⲆⵠⲆᐃ: "img/inv-wood-spike-door-click.png",
    ᐃⲆᐃᐃⵠΔⵠ: "img/inv-stone-spike-door-out.png",
    ΔⲆⲆᐃⵠⵠΔ: "img/inv-stone-spike-door-in.png",
    ᐃᐃΔΔⵠⲆΔ: "img/inv-stone-spike-door-click.png",
    ᐃⵠⲆΔΔⵠᐃ: "img/inv-gold-spike-door-out.png",
    ᐃⲆⲆⵠⵠⵠⲆ: "img/inv-gold-spike-door-in.png",
    ⲆⵠᐃⲆⲆⵠⲆ: "img/inv-gold-spike-door-click.png",
    ⵠⲆⵠΔᐃΔⲆ: "img/inv-diamond-spike-door-out.png",
    ⵠᐃΔΔⲆⲆΔ: "img/inv-diamond-spike-door-in.png",
    ᐃᐃⵠΔⵠΔΔ: "img/inv-diamond-spike-door-click.png",
    ΔΔᐃⵠⲆᐃΔ: "img/inv-amethyst-spike-door-out.png",
    ⵠⵠΔΔᐃᐃⲆ: "img/inv-amethyst-spike-door-in.png",
    ᐃΔⲆⲆⲆΔⲆ: "img/inv-amethyst-spike-door-click.png",
    ᐃᐃΔⲆΔᐃⵠ: "img/day-wood-spike-door.png",
    ᐃΔⵠⲆⲆⵠᐃ: "img/night-wood-spike-door.png",
    ⲆᐃⵠΔΔⲆᐃ: "img/day-stone-spike-door.png",
    ΔᐃⵠⲆⵠⲆⲆ: "img/night-stone-spike-door.png",
    ᐃⵠᐃΔⵠΔⲆ: "img/day-gold-spike-door.png",
    ᐃΔⵠⵠⵠⵠᐃ: "img/night-gold-spike-door.png",
    ⲆΔⲆᐃⲆᐃⵠ: "img/day-diamond-spike-door.png",
    ⵠᐃᐃⵠⵠⵠⵠ: "img/night-diamond-spike-door.png",
    ᐃᐃΔⵠᐃᐃᐃ: "img/day-amethyst-spike-door.png",
    ΔⵠΔΔⲆΔⵠ: "img/night-amethyst-spike-door.png",
    ᐃᐃⵠⲆᐃⵠⲆ: "img/inv-reidite-spike-door-out.png",
    ΔⵠᐃⵠⵠΔⲆ: "img/inv-reidite-spike-door-in.png",
    ⲆᐃⲆⲆᐃⲆΔ: "img/inv-reidite-spike-door-click.png",
    ᐃᐃᐃΔΔΔΔ: "img/inv-reidite-door-out.png",
    ᐃⵠᐃΔᐃΔⵠ: "img/inv-reidite-door-in.png",
    ⲆⲆⵠᐃΔΔᐃ: "img/inv-reidite-door-click.png",
    ΔΔⲆⲆΔΔᐃ: "img/inv-reidite-spike-out.png",
    ᐃᐃΔΔⵠᐃΔ: "img/inv-reidite-spike-in.png",
    ⵠΔΔΔⵠΔⲆ: "img/inv-reidite-spike-click.png",
    ᐃⲆΔⵠⲆᐃΔ: "img/inv-reidite-wall-out.png",
    ⲆᐃᐃⲆᐃΔᐃ: "img/inv-reidite-wall-in.png",
    ⲆΔᐃᐃᐃᐃⵠ: "img/inv-reidite-wall-click.png",
    ⵠΔⵠⵠⲆⲆΔ: "img/day-reidite-wall.png",
    ⵠⵠⵠⵠᐃᐃⵠ: "img/night-reidite-wall.png",
    ⵠᐃᐃⲆΔΔⵠ: "img/day-reidite-door.png",
    ΔⲆᐃⵠᐃⲆⲆ: "img/night-reidite-door.png",
    ᐃᐃⵠΔⵠᐃᐃ: "img/day-reidite-spike.png",
    ᐃⵠⵠᐃΔᐃΔ: "img/night-reidite-spike.png",
    ᐃⲆᐃⲆⵠⵠΔ: "img/day-reidite-spike-door.png",
    ΔⵠⵠⲆⲆΔⲆ: "img/night-reidite-spike-door.png",
    ⵠⲆⵠᐃⵠΔᐃ: "img/inv-reidite-pickaxe-out.png",
    ⵠᐃⵠⵠΔΔᐃ: "img/inv-reidite-pickaxe-in.png",
    ⵠⲆᐃⵠᐃⵠⲆ: "img/inv-reidite-pickaxe-click.png",
    ΔΔᐃⵠΔⲆⲆ: "img/day-reidite-pickaxe.png",
    ⵠΔⵠᐃᐃΔᐃ: "img/night-reidite-pickaxe.png",
    ΔⵠⵠⲆᐃᐃⵠ: "img/inv-reidite-hammer-out.png",
    ΔⲆΔΔΔⲆΔ: "img/inv-reidite-hammer-in.png",
    ⵠᐃᐃⵠᐃΔⲆ: "img/inv-reidite-hammer-click.png",
    ΔΔΔᐃⵠΔⲆ: "img/day-reidite-hammer.png",
    ⲆⵠᐃⲆⲆⵠΔ: "img/night-reidite-hammer.png",
    ⲆΔⵠΔΔⲆⵠ: "img/day-watermelon1.png",
    ᐃΔΔⵠⲆΔⵠ: "img/night-watermelon1.png",
    ᐃᐃⲆⵠⵠⵠᐃ: "img/day-watermelon-dried1.png",
    ⲆᐃⵠᐃⲆΔⲆ: "img/night-watermelon-dried1.png",
    ᐃᐃⵠⵠⲆᐃᐃ: "img/inv-watermelon-out.png",
    ΔΔⵠⵠⲆΔⲆ: "img/inv-watermelon-in.png",
    ⵠⲆⵠΔⵠⵠⲆ: "img/inv-watermelon-click.png",
    ⵠⲆⵠⲆΔᐃΔ: "img/day-boat.png",
    ⵠⵠⲆⵠᐃⵠᐃ: "img/night-boat.png",
    ⵠΔⲆᐃⲆᐃⵠ: "img/day-boat-wave.png",
    ᐃΔⵠⲆᐃⵠΔ: "img/night-boat-wave.png",
    ⲆᐃⵠⵠΔΔΔ: "img/inv-boat-out.png",
    ΔᐃΔⲆΔⲆΔ: "img/inv-boat-in.png",
    ᐃⵠᐃⲆⲆⲆⲆ: "img/inv-boat-click.png",
    ⵠⲆᐃΔⵠⲆᐃ: "img/day-plane.png",
    ᐃⵠᐃⵠᐃᐃⲆ: "img/night-plane.png",
    ΔΔⵠᐃᐃⲆᐃ: "img/inv-plane-out.png",
    ΔΔⲆΔΔᐃᐃ: "img/inv-plane-in.png",
    ΔⲆⲆΔᐃᐃΔ: "img/inv-plane-click.png",
    ᐃΔᐃᐃΔΔᐃ: "img/day-sled.png",
    ᐃⲆⲆᐃΔⵠⲆ: "img/night-sled.png",
    ⵠᐃⲆⵠΔᐃⵠ: "img/day-sled-wave.png",
    ⵠⲆⲆⵠΔΔΔ: "img/night-sled-wave.png",
    ⲆⲆⲆᐃᐃᐃⵠ: "img/inv-sled-out.png",
    ⵠⵠΔⲆⲆⵠⵠ: "img/inv-sled-in.png",
    ΔΔΔΔⲆⲆⲆ: "img/inv-sled-click.png",
    ᐃᐃᐃⲆᐃΔⵠ: "img/day-pirate-hat.png",
    ⲆΔⲆⲆΔⲆⵠ: "img/night-pirate-hat.png",
    ⲆΔⵠΔⲆΔΔ: "img/inv-pirate-hat-out.png",
    ⵠⵠⲆΔΔⲆΔ: "img/inv-pirate-hat-in.png",
    ᐃⵠⵠⵠⵠᐃΔ: "img/inv-pirate-hat-click.png",
    ⵠⲆⵠⵠⲆΔⲆ: "img/day-penguin.png",
    ᐃⲆⲆⲆΔⲆⵠ: "img/night-penguin.png",
    ⲆΔᐃᐃΔΔΔ: "img/hurt-penguin.png",
    ⲆⲆⵠⲆΔ: "img/inv-penguin-feather-click.png",
    ᐃᐃⲆΔᐃ: "img/inv-hawk-feather-click.png",
    ᐃⵠⲆΔⵠ: "img/inv-parrot-feather-click.png",
    ⲆⵠᐃΔⲆᐃᐃ: "img/day-ocelot.png",
    ⲆⲆⵠⲆᐃᐃΔ: "img/night-ocelot.png",
    ⲆⵠΔⵠⵠΔⵠ: "img/hurt-ocelot.png",
    ᐃⵠΔⲆᐃ: "img/inv-ocelot-fur-click.png",
    ⲆⲆⲆⲆΔᐃᐃ: "img/day-crocodile.png",
    ᐃᐃⵠⲆΔⵠⲆ: "img/night-crocodile.png",
    ᐃⵠⲆⲆᐃⲆⵠ: "img/hurt-crocodile.png",
    ᐃⵠⲆⲆᐃ: "img/inv-crocodile-scales-click.png",
    ᐃᐃΔᐃᐃΔΔ: "img/day-boar1.png",
    ᐃⵠᐃΔⵠⲆⲆ: "img/day-boar1-tamed.png",
    ⵠΔⲆⵠᐃᐃⲆ: "img/day-boar1-angry.png",
    ⵠΔΔⲆⲆΔᐃ: "img/night-boar1.png",
    ᐃΔⵠⵠᐃⵠΔ: "img/night-boar1-tamed.png",
    ᐃΔⵠΔⵠΔⲆ: "img/night-boar1-angry.png",
    ⵠᐃⵠⵠⵠⲆᐃ: "img/inv-mount-boar-out.png",
    ΔⲆΔᐃᐃΔΔ: "img/inv-mount-boar-in.png",
    ᐃⵠⲆⲆⵠΔⵠ: "img/inv-mount-boar-click.png",
    ᐃΔΔⲆⲆᐃΔ: "img/day-hurt-boar1.png",
    ΔⵠᐃⲆⲆⵠⲆ: "img/boar1-step.png",
    ΔΔⲆⵠᐃΔΔ: "img/day-saddle1.png",
    ᐃⵠⵠᐃᐃⲆⵠ: "img/night-saddle1.png",
    ⲆⲆⵠⵠᐃⵠΔ: "img/inv-saddle-out.png",
    ⵠΔᐃⵠⲆⵠᐃ: "img/inv-saddle-in.png",
    ΔΔⲆᐃᐃⲆᐃ: "img/inv-saddle-click.png",
    ΔⲆᐃΔᐃⵠⵠ: "img/day-magic-wand0.png",
    ΔⲆⲆᐃⲆⵠΔ: "img/night-magic-wand0.png",
    ᐃΔΔᐃⲆΔᐃ: "img/day-light-wand1.png",
    ᐃⵠᐃⵠⵠΔᐃ: "img/night-light-wand1.png",
    ᐃΔΔⲆⲆᐃⵠ: "img/inv-magic-wand0-out.png",
    ΔᐃᐃᐃⵠⲆⲆ: "img/inv-magic-wand0-in.png",
    ⲆᐃⲆΔⵠⵠΔ: "img/inv-magic-wand0-click.png",
    ᐃᐃᐃᐃⵠᐃⵠ: "img/day-magic-wand1.png",
    ⵠΔᐃⵠΔⵠⲆ: "img/night-magic-wand1.png",
    ΔΔᐃᐃⲆΔᐃ: "img/day-light-wand0.png",
    ⲆⲆᐃⲆⲆΔΔ: "img/night-light-wand0.png",
    ⲆⵠᐃΔⲆΔᐃ: "img/inv-magic-wand1-out.png",
    ⲆᐃΔᐃᐃⲆᐃ: "img/inv-magic-wand1-in.png",
    ᐃⵠⲆⲆⲆⲆⲆ: "img/inv-magic-wand1-click.png",
    ΔⲆⵠⵠⵠΔⵠ: "img/day-firefly.png",
    ⵠᐃᐃᐃΔΔΔ: "img/night-firefly.png",
    ⲆⵠⲆⵠⵠⵠⵠ: "img/hurt-firefly.png",
    ⲆⵠΔⲆᐃⵠᐃ: "img/inv-firefly-out.png",
    ΔᐃⲆⲆⵠⲆⲆ: "img/inv-firefly-in.png",
    ΔⲆΔⵠΔⵠᐃ: "img/inv-firefly-click.png",
    ΔⵠΔΔᐃΔᐃ: "img/day-baby-dragon.png",
    ΔⵠⵠⵠⵠΔⲆ: "img/night-baby-dragon.png",
    ⲆⲆⵠΔⲆⵠⵠ: "img/day-baby-dragon-angry.png",
    ᐃᐃⲆⵠᐃⵠΔ: "img/night-baby-dragon-angry.png",
    ⲆᐃⲆΔΔᐃⵠ: "img/day-baby-dragon-tamed.png",
    ΔᐃΔΔⵠΔⵠ: "img/night-baby-dragon-tamed.png",
    ⲆΔΔΔᐃᐃΔ: "img/day-wing-dragon-left-angry.png",
    ⲆΔⵠⲆⲆΔⲆ: "img/night-dragon-wing-left-angry.png",
    ⲆΔΔΔⵠΔΔ: "img/day-wing-dragon-right-angry.png",
    ΔⵠⵠⲆⵠⵠⵠ: "img/night-dragon-wing-right-angry.png",
    ΔΔΔᐃᐃⲆⵠ: "img/day-wing-dragon-left-tamed.png",
    ᐃⵠΔΔΔⵠⲆ: "img/night-dragon-wing-left-tamed.png",
    ⲆⵠΔⵠⵠⲆⲆ: "img/day-wing-dragon-right-tamed.png",
    ⵠΔΔⵠⵠⲆⲆ: "img/night-wing-dragon-right-tamed.png",
    ⵠΔⲆⲆᐃΔΔ: "img/day-wing-dragon-left.png",
    ΔⵠΔⵠⲆΔᐃ: "img/night-dragon-wing-left.png",
    ⵠᐃⲆⵠⵠᐃⵠ: "img/day-wing-dragon-right.png",
    ⵠΔΔⲆΔΔᐃ: "img/night-wing-dragon-right.png",
    ⲆᐃᐃΔⵠᐃᐃ: "img/hurt-baby-dragon.png",
    ΔⲆⵠⵠⲆⵠᐃ: "img/hurt-baby-dragon-wing-left.png",
    ᐃⲆⵠᐃⵠᐃᐃ: "img/hurt-baby-dragon-wing-right.png",
    ΔⲆΔΔⲆⲆⲆ: "img/inv-baby-dragon-out.png",
    ⲆⵠΔΔΔⵠⵠ: "img/inv-baby-dragon-in.png",
    ⵠⵠⵠᐃΔⲆΔ: "img/inv-baby-dragon-click.png",
    ΔⵠⵠΔⵠⵠΔ: "img/day-baby-lava.png",
    ⵠΔⲆΔᐃⲆⵠ: "img/night-baby-lava.png",
    ᐃΔⵠΔⲆⲆᐃ: "img/day-baby-lava-angry.png",
    ⲆᐃΔⵠⲆⵠΔ: "img/night-baby-lava-angry.png",
    ⵠΔᐃⲆᐃⵠⲆ: "img/day-baby-lava-tamed.png",
    ⲆⲆᐃᐃⵠⲆΔ: "img/night-baby-lava-tamed.png",
    ⵠⲆⵠᐃⵠⵠᐃ: "img/day-wing-lava-left-angry.png",
    ⲆⵠΔⲆᐃⲆⲆ: "img/night-wing-lava-left-angry.png",
    ⲆⲆᐃΔⲆⲆⲆ: "img/day-wing-lava-right-angry.png",
    ΔⲆⵠᐃⲆⲆⲆ: "img/night-wing-lava-right-angry.png",
    ⵠᐃΔⵠⲆΔⵠ: "img/day-wing-lava-left-tamed.png",
    ᐃⲆΔᐃⵠⵠᐃ: "img/night-wing-lava-left-tamed.png",
    ᐃᐃⵠⵠᐃⵠⲆ: "img/day-wing-lava-right-tamed.png",
    ᐃⵠⵠⲆⵠⵠΔ: "img/night-wing-lava-right-tamed.png",
    ᐃⲆⵠΔΔΔᐃ: "img/day-wing-lava-left.png",
    ᐃᐃⲆⲆⵠⵠᐃ: "img/night-wing-lava-left.png",
    ⵠⵠᐃⲆⲆⵠⵠ: "img/day-wing-lava-right.png",
    ᐃᐃᐃᐃⲆⲆΔ: "img/night-wing-lava-right.png",
    ⲆⵠⲆⲆⲆⵠᐃ: "img/hurt-baby-lava.png",
    ᐃᐃΔΔⲆᐃΔ: "img/hurt-baby-lava-wing-left.png",
    ⵠⲆⵠΔΔΔΔ: "img/hurt-baby-lava-wing-right.png",
    ⵠᐃⲆⲆⲆⵠⲆ: "img/inv-baby-lava-out.png",
    ᐃⵠⲆⵠᐃΔΔ: "img/inv-baby-lava-in.png",
    ⵠΔⲆΔᐃΔΔ: "img/inv-baby-lava-click.png",
    ⲆΔᐃΔᐃⵠΔ: "img/day-falcon.png",
    ⲆⵠⲆᐃΔⲆⲆ: "img/night-falcon.png",
    ⲆⵠⲆΔᐃΔⵠ: "img/day-falcon-angry.png",
    ᐃⲆΔΔⲆⲆᐃ: "img/night-falcon-angry.png",
    ⲆᐃᐃⲆΔⵠΔ: "img/day-falcon-ground.png",
    ᐃᐃΔᐃⲆᐃᐃ: "img/night-falcon-ground.png",
    ⵠⲆΔⵠΔΔΔ: "img/day-falcon-ground-angry.png",
    ΔⲆΔⲆⵠⲆⵠ: "img/night-falcon-ground-angry.png",
    ᐃⲆⵠᐃᐃⵠⵠ: "img/day-falcon-wings-left.png",
    ⲆΔᐃⲆⵠᐃⵠ: "img/night-falcon-wings-left.png",
    ᐃᐃᐃⵠΔⲆᐃ: "img/day-falcon-wings-right.png",
    ᐃᐃⵠᐃΔⵠⲆ: "img/night-falcon-wings-right.png",
    ⵠⵠⵠΔᐃᐃᐃ: "img/day-falcon-angry-wings-left.png",
    ΔⲆᐃΔⵠᐃⵠ: "img/night-falcon-angry-wings-left.png",
    ᐃᐃΔΔⲆᐃⲆ: "img/day-falcon-angry-wings-right.png",
    Ⲇᐃᐃⵠⵠⵠⵠ: "img/night-falcon-angry-wings-right.png",
    ⵠᐃⲆⵠΔⲆΔ: "img/day-falcon-wings-left-tamed.png",
    ⲆⵠⵠⲆΔᐃΔ: "img/night-falcon-wings-left-tamed.png",
    ΔΔⵠᐃⵠΔⵠ: "img/day-falcon-wings-right-tamed.png",
    ΔΔᐃⵠᐃΔⲆ: "img/night-falcon-wings-right-tamed.png",
    ⲆⵠⲆᐃΔᐃΔ: "img/day-falcon-tamed.png",
    ⲆⲆⵠⵠⵠᐃΔ: "img/night-falcon-tamed.png",
    ᐃᐃⲆⲆΔΔⲆ: "img/hurt-falcon-ground.png",
    ⵠⵠᐃᐃᐃᐃⲆ: "img/hurt-falcon.png",
    ⵠΔⵠΔⵠΔⲆ: "img/hurt-falcon-wings-left.png",
    ᐃⲆᐃⵠⲆΔⵠ: "img/hurt-falcon-wings-right.png",
    ⲆᐃⲆⲆΔⵠΔ: "img/inv-falcon-out.png",
    ᐃⲆⵠᐃⲆᐃᐃ: "img/inv-falcon-in.png",
    ᐃᐃᐃΔⲆⲆᐃ: "img/inv-falcon-click.png",
    ᐃⲆΔⵠΔᐃΔ: "img/day-parrot.png",
    ᐃⵠᐃⵠⲆΔΔ: "img/night-parrot.png",
    ⵠᐃⵠΔᐃⲆⲆ: "img/day-parrot-angry.png",
    ᐃΔⵠⲆΔᐃⵠ: "img/night-parrot-angry.png",
    ΔᐃⲆᐃᐃⲆⵠ: "img/day-parrot-ground.png",
    ᐃⵠᐃᐃⲆΔⵠ: "img/night-parrot-ground.png",
    ΔΔⲆᐃⵠⲆⲆ: "img/day-parrot-ground-angry.png",
    ⲆⵠⵠΔⲆΔᐃ: "img/night-parrot-ground-angry.png",
    ⲆΔΔΔⵠᐃΔ: "img/day-parrot-wing-left.png",
    ᐃⵠⵠᐃⲆⵠΔ: "img/night-parrot-wing-left.png",
    ᐃⲆᐃⲆΔᐃΔ: "img/day-parrot-wing-right.png",
    ᐃⵠΔⲆⲆⵠⲆ: "img/night-parrot-wing-right.png",
    ΔⵠΔⲆⵠΔⲆ: "img/day-parrot-angry-wing-left.png",
    ΔΔΔΔⵠⲆⲆ: "img/night-parrot-angry-wing-left.png",
    ΔᐃΔΔⲆᐃᐃ: "img/day-parrot-angry-wing-right.png",
    ⵠΔⵠᐃⲆⵠⲆ: "img/night-parrot-angry-wing-right.png",
    ⲆΔⵠᐃᐃᐃⵠ: "img/day-parrot-wing-left-tamed.png",
    ΔⲆⵠⲆᐃⵠᐃ: "img/night-parrot-wing-left-tamed.png",
    ⵠⲆᐃᐃⵠᐃᐃ: "img/day-parrot-wing-right-tamed.png",
    ΔⵠⵠⵠΔᐃΔ: "img/night-parrot-wing-right-tamed.png",
    ΔᐃᐃΔΔᐃⵠ: "img/day-parrot-tamed.png",
    ⵠⲆΔΔⵠⲆⵠ: "img/night-parrot-tamed.png",
    ⲆⵠΔΔᐃⵠⲆ: "img/hurt-parrot-ground.png",
    ΔⲆⵠⲆⵠᐃΔ: "img/hurt-parrot.png",
    ⵠⲆΔⲆᐃⲆⵠ: "img/hurt-parrot-wing-left.png",
    ⵠΔΔⵠᐃᐃᐃ: "img/hurt-parrot-wing-right.png",
    ⵠΔΔΔⲆΔⲆ: "img/inv-parrot-out.png",
    ⲆⵠⵠΔᐃΔⵠ: "img/inv-parrot-in.png",
    ΔⲆΔⲆᐃⵠⲆ: "img/inv-parrot-click.png",
    ⲆⲆΔᐃⵠᐃⵠ: "img/day-crab-boss.png",
    ᐃⲆⲆⵠᐃΔΔ: "img/night-crab-boss.png",
    ΔⲆᐃⵠᐃⲆΔ: "img/day-crab-boss-angry.png",
    ⲆᐃΔΔⵠⲆᐃ: "img/night-crab-boss-angry.png",
    ⵠⲆⲆⵠΔⵠⲆ: "img/day-crab-boss-tamed.png",
    ΔΔⵠⵠᐃΔᐃ: "img/night-crab-boss-tamed.png",
    ⵠⲆᐃⲆⲆᐃⵠ: "img/day-crab-boss-claw-left-attack.png",
    ⲆΔⲆⵠᐃⵠᐃ: "img/night-crab-boss-claw-left-attack.png",
    ⲆⲆⵠᐃⵠᐃⲆ: "img/day-crab-boss-claw-right-attack.png",
    ⲆⲆⲆⵠⲆᐃᐃ: "img/night-crab-boss-claw-right-attack.png",
    ΔⲆⵠΔΔᐃᐃⲆᐃ: "img/day-crab-boss-claw-left-tamed.png",
    ᐃⲆᐃⲆⲆⲆᐃⲆΔ: "img/night-crab-boss-claw-left-tamed.png",
    ΔΔᐃⵠⵠⵠΔⵠΔ: "img/day-crab-boss-claw-right-tamed.png",
    ΔⲆΔⵠⲆΔⲆⲆΔ: "img/night-crab-boss-claw-right-tamed.png",
    ᐃΔⵠⲆᐃᐃⲆ: "img/day-crab-boss-claw-left.png",
    ⲆΔⵠⵠⵠⵠᐃ: "img/night-crab-boss-claw-left.png",
    ᐃⵠΔⵠⵠⵠⵠ: "img/day-crab-boss-claw-right.png",
    ᐃⲆⲆᐃⵠΔΔ: "img/night-crab-boss-claw-right.png",
    ΔⵠⲆᐃⵠⵠⵠ: "img/hurt-crab-boss.png",
    ΔⲆᐃΔΔⲆⲆ: "img/hurt-crab-boss-claw-left.png",
    ⵠⵠⲆⲆᐃΔⲆ: "img/hurt-crab-boss-claw-right.png",
    ⵠᐃⵠⲆⵠⵠⵠ: "img/heal-crab-boss.png",
    ΔⲆΔⲆᐃⲆⵠ: "img/heal-crab-boss-claw-left.png",
    ΔΔⵠᐃᐃⵠΔ: "img/heal-crab-boss-claw-right.png",
    ΔᐃᐃⵠᐃⲆᐃ: "img/crab-step.png",
    ΔⵠⵠⲆⲆᐃⵠ: "img/inv-crab-boss-out.png",
    ⲆΔⵠΔⲆΔⵠ: "img/inv-crab-boss-in.png",
    ⵠΔΔᐃᐃᐃⵠ: "img/inv-crab-boss-click.png",
    ⲆᐃⲆⲆⵠΔⵠ: "img/day-cactus10.png",
    ⵠⲆΔⲆᐃΔᐃ: "img/night-cactus10.png",
    ⵠᐃⵠΔⲆⵠᐃ: "img/inv-cactus-out.png",
    ΔⲆⵠⲆⲆᐃΔ: "img/inv-cactus-in.png",
    ᐃᐃⲆᐃⲆᐃΔ: "img/inv-cactus-click.png",
    ⵠⵠⵠⲆΔᐃⵠ: "img/day-scorpion.png",
    ᐃᐃⲆⵠΔᐃΔ: "img/night-scorpion.png",
    ⵠᐃᐃΔᐃᐃᐃ: "img/day-scorpion-hand-left.png",
    ᐃᐃⲆⵠⲆⵠΔ: "img/night-scorpion-hand-left.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/day-scorpion-hand-right.png",
    ΔᐃΔⲆᐃⵠᐃ: "img/night-scorpion-hand-right.png",
    ΔⲆΔⲆⵠΔⲆ: "img/hurt-scorpion.png",
    ⵠⲆⵠᐃΔΔⲆ: "img/hurt-scorpion-hand-left.png",
    ΔΔⵠⵠᐃΔⵠ: "img/hurt-scorpion-hand-right.png",
    ᐃΔⲆⲆⲆᐃⵠ: "img/day-vulture.png",
    ⵠΔᐃⵠΔΔⲆ: "img/night-vulture.png",
    ᐃⵠⵠⲆⲆΔΔ: "img/day-vulture-angry.png",
    ΔΔⲆⲆⲆΔᐃ: "img/night-vulture-angry.png",
    ⵠᐃᐃᐃΔⲆⲆ: "img/day-vulture-ground.png",
    ⵠⲆⵠⲆΔⵠΔ: "img/night-vulture-ground.png",
    ⲆᐃⵠᐃⲆⲆᐃ: "img/day-vulture-ground-angry.png",
    ᐃΔΔΔⲆᐃⲆ: "img/night-vulture-ground-angry.png",
    ⲆⲆⲆΔΔΔⵠ: "img/day-vulture-wings-left.png",
    ΔⲆᐃΔⲆΔΔ: "img/night-vulture-wings-left.png",
    ⵠⲆΔᐃⵠⲆⲆ: "img/day-vulture-wings-right.png",
    Ⲇᐃᐃᐃᐃᐃⵠ: "img/night-vulture-wings-right.png",
    ⵠᐃⲆᐃⵠⵠⲆ: "img/day-vulture-angry-wings-left.png",
    ᐃΔΔⵠᐃᐃⵠ: "img/night-vulture-angry-wings-left.png",
    ᐃⵠᐃΔΔΔⲆ: "img/day-vulture-angry-wings-right.png",
    ᐃᐃᐃᐃΔⵠⲆ: "img/night-vulture-angry-wings-right.png",
    ᐃᐃΔΔⵠⲆᐃ: "img/day-vulture-wings-left-tamed.png",
    ᐃΔᐃⵠⵠΔⲆ: "img/night-vulture-wings-left-tamed.png",
    ΔⵠⵠᐃⲆᐃᐃ: "img/day-vulture-wings-right-tamed.png",
    ⲆⲆⵠΔΔΔⵠ: "img/night-vulture-wings-right-tamed.png",
    ΔⲆⵠᐃⵠⵠΔ: "img/day-vulture-tamed.png",
    ΔⲆΔⵠⲆΔⵠ: "img/night-vulture-tamed.png",
    ΔⵠⲆᐃⲆᐃᐃ: "img/hurt-vulture-ground.png",
    ⵠⲆΔⵠⵠᐃᐃ: "img/hurt-vulture.png",
    ⵠᐃΔᐃⲆᐃᐃ: "img/hurt-vulture-wings-left.png",
    ⲆΔⵠⵠⲆⵠΔ: "img/hurt-vulture-wings-right.png",
    ⵠΔⵠΔⵠⲆΔ: "img/inv-vulture-out.png",
    ⲆⵠⲆⲆᐃΔⲆ: "img/inv-vulture-in.png",
    ΔⲆᐃⵠⵠᐃⲆ: "img/inv-vulture-click.png",
    ⵠⲆⵠⲆⲆᐃΔ: "img/day-aloe-vera.png",
    ᐃⲆⲆⵠΔⵠΔ: "img/night-aloe-vera.png",
    ⵠⲆⵠⲆⲆⵠΔ: "img/inv-aloe-vera-out.png",
    ⲆΔᐃᐃⵠⲆⵠ: "img/inv-aloe-vera-in.png",
    ⲆⵠⵠΔⵠᐃⵠ: "img/inv-aloe-vera-click.png",
    ΔⲆΔᐃᐃΔⲆ: "img/day-aloe-vera-grown.png",
    ᐃᐃⵠⲆΔⵠᐃ: "img/night-aloe-vera-grown.png",
    ᐃᐃⲆᐃⲆⲆⵠ: "img/day-aloe-vera-dried.png",
    ⵠⲆⲆⲆⵠΔᐃ: "img/night-aloe-vera-dried.png",
    ᐃᐃᐃᐃᐃⵠⵠ: "img/day-turban1.png",
    ⲆⵠΔⲆⲆᐃΔ: "img/night-turban1.png",
    ΔΔⵠΔⵠᐃΔ: "img/day-turban2.png",
    ⲆⲆⲆⵠΔⲆⲆ: "img/night-turban2.png",
    ΔⲆⵠΔⵠⵠⲆ: "img/inv-turban2-out.png",
    ΔⵠΔⲆⵠⵠΔ: "img/inv-turban2-in.png",
    ⵠΔⵠⵠⲆⲆⲆ: "img/inv-turban2-click.png",
    ᐃΔΔⲆᐃⵠⵠ: "img/inv-turban1-out.png",
    ⵠΔⵠΔᐃⲆⵠ: "img/inv-turban1-in.png",
    ΔⵠⲆⵠⲆΔⲆ: "img/inv-turban1-click.png",
    ⵠᐃᐃΔᐃⵠⵠ: "img/day-pitchfork2.png",
    ⵠⵠⵠⵠΔⵠᐃ: "img/night-pitchfork2.png",
    ΔⵠΔⵠΔⲆᐃ: "img/inv-pitchfork2-out.png",
    ⲆⵠΔⲆΔⵠⵠ: "img/inv-pitchfork2-in.png",
    ΔⵠⲆᐃΔⵠΔ: "img/inv-pitchfork2-click.png",
    ⵠⵠΔΔᐃᐃΔ: "img/inv-gold-fork-click.png",
    ⲆᐃⵠⵠᐃⲆⵠ: "img/inv-pilot-glasses-click.png",
    ᐃⵠᐃᐃⲆᐃΔ: "img/day-pilot-helmet.png",
    ΔⵠΔⵠⲆⵠᐃ: "img/night-pilot-helmet.png",
    ΔᐃΔᐃᐃΔⲆ: "img/inv-pilot-helmet-out.png",
    ΔⲆⲆⵠⵠⵠⲆ: "img/inv-pilot-helmet-in.png",
    ⵠⲆᐃⲆᐃⲆⵠ: "img/inv-pilot-helmet-click.png",
    ᐃⲆΔⲆⵠⲆⵠΔⵠ: "img/day-sandworm0.png",
    ΔᐃⵠΔⵠᐃΔ: "img/day-sandworm1.png",
    ⲆⲆΔⵠᐃᐃⲆ: "img/day-sandworm2.png",
    ⵠΔᐃΔΔΔΔⲆⲆ: "img/night-sandworm0.png",
    ⵠᐃⲆᐃΔⵠⲆ: "img/night-sandworm1.png",
    ⵠⵠⵠⵠΔᐃⲆ: "img/night-sandworm2.png",
    ⵠᐃᐃⵠⲆⵠⵠ: "img/hurt-sandworm0.png",
    ᐃⵠΔⵠⲆⵠⲆ: "img/hurt-sandworm1.png",
    ⵠΔᐃΔΔΔⵠ: "img/hurt-sandworm2.png",
    ⵠⲆⲆΔᐃ: "img/inv-vulture-feather-click.png",
    Δⵠⵠᐃᐃⵠᐃ: "img/day-jungle-tree0.png",
    ΔᐃⵠᐃⵠⲆⵠ: "img/night-jungle-tree0.png",
    ⵠΔᐃⲆᐃΔⵠ: "img/day-jungle-tree1.png",
    ⲆΔᐃⲆⵠⲆΔ: "img/night-jungle-tree1.png",
    ΔⲆᐃⵠⲆᐃⵠ: "img/day-jungle-tree2.png",
    ᐃΔⵠΔⵠΔⵠ: "img/night-jungle-tree2.png",
    ΔᐃⲆⵠⲆⵠᐃ: "img/day-jungle-tree3.png",
    ⵠⵠΔᐃᐃⲆⵠ: "img/night-jungle-tree3.png",
    ᐃⲆⵠⲆᐃⵠⵠ: "img/day-jungle-tree4.png",
    ΔᐃⲆᐃⲆᐃᐃ: "img/night-jungle-tree4.png",
    ᐃΔᐃΔⲆΔΔ: "img/day-jungle-bush0.png",
    ⵠΔⲆᐃⲆⵠᐃ: "img/night-jungle-bush0.png",
    ⵠᐃΔᐃΔⲆⵠ: "img/day-jungle-bush1.png",
    ᐃΔᐃⵠⲆⲆⲆ: "img/night-jungle-bush1.png",
    ᐃⲆᐃᐃᐃⲆⵠ: "img/day-jungle-ground0.png",
    ⵠⵠⵠⲆⲆⲆⵠ: "img/night-jungle-ground0.png",
    ΔΔⲆᐃΔΔΔ: "img/day-jungle-ground1.png",
    ⵠⵠΔⲆΔΔᐃ: "img/night-jungle-ground1.png",
    ⵠΔⵠⵠⲆⵠⵠ: "img/day-jungle-ground2.png",
    ⵠⵠⲆⵠⵠⲆΔ: "img/night-jungle-ground2.png",
    ⲆᐃⲆⲆⵠⵠᐃ: "img/day-jungle-ground3.png",
    ⲆᐃⵠᐃᐃⲆⲆ: "img/night-jungle-ground3.png",
    ⲆⲆᐃΔⵠⲆⲆ: "img/day-jungle-pebble0.png",
    ⲆⲆᐃⵠΔⵠᐃ: "img/night-jungle-pebble0.png",
    ⵠⲆⲆᐃᐃⵠⵠ: "img/day-jungle-pebble1.png",
    ΔΔΔⵠⵠΔᐃ: "img/night-jungle-pebble1.png",
    ΔᐃⵠᐃΔᐃΔ: "img/day-jungle-pebble2.png",
    ΔⵠⵠⵠⲆⵠⵠ: "img/night-jungle-pebble2.png",
    ΔᐃⵠⲆΔΔΔ: "img/day-jungle-pebble3.png",
    ᐃᐃⵠΔᐃΔⵠ: "img/night-jungle-pebble3.png",
    ⵠⵠᐃⵠΔΔⲆ: "img/day-jungle-pebble4.png",
    ᐃⵠᐃᐃᐃⲆⵠ: "img/night-jungle-pebble4.png",
    ΔΔΔⵠⲆΔⵠ: "img/day-jungle-pebble5.png",
    ⲆΔⲆΔⲆⵠⵠ: "img/night-jungle-pebble5.png",
    ⲆⲆⵠΔⵠⵠΔ: "img/day-jungle-stone0.png",
    ⲆᐃⵠⲆⵠⵠΔ: "img/night-jungle-stone0.png",
    ΔΔⵠⲆⲆⲆᐃ: "img/day-jungle-stone1.png",
    ⵠΔⲆⵠΔᐃⲆ: "img/night-jungle-stone1.png",
    ⲆⵠⵠᐃΔⵠᐃ: "img/day-jungle-stone2.png",
    ΔⵠᐃⵠⲆⲆΔ: "img/night-jungle-stone2.png",
    ⵠΔⲆⲆⵠΔΔ: "img/day-emerald0.png",
    ΔΔᐃΔᐃΔᐃ: "img/night-emerald0.png",
    ᐃΔΔⲆᐃΔⵠ: "img/day-emerald1.png",
    ΔⵠᐃΔΔᐃΔ: "img/night-emerald1.png",
    ΔΔᐃΔΔΔᐃ: "img/day-emerald2.png",
    ΔⲆⲆΔⲆⵠΔ: "img/night-emerald2.png",
    ⲆᐃⲆⲆⲆ: "img/inv-emerald-click.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/inv-sworm-juice-out.png",
    ΔⲆⵠⵠΔᐃⵠ: "img/inv-sworm-juice-in.png",
    ᐃΔΔⲆᐃⵠⲆ: "img/inv-sworm-juice-click.png",
    ΔΔᐃⵠᐃΔᐃ: "img/day-point-machine.png",
    ᐃΔΔᐃⵠⲆⵠ: "img/night-point-machine.png",
    ᐃⵠᐃΔΔⲆⲆ: "img/day-point-machine-hole.png",
    ᐃⵠΔΔᐃᐃⲆ: "img/night-point-machine-hole.png",
    ⵠᐃⲆΔᐃⵠΔ: "img/day-point-machine-ground.png",
    ᐃΔΔⲆᐃⲆⲆ: "img/night-point-machine-ground.png",
    ΔⵠᐃⲆᐃᐃᐃ: "img/day-point-machine-rotate.png",
    ⲆᐃᐃᐃΔⲆⲆ: "img/night-point-machine-rotate.png",
    ΔᐃⵠⲆᐃⵠΔ: "img/inv-point-machine-out.png",
    ᐃⵠⵠΔᐃᐃΔ: "img/inv-point-machine-in.png",
    ⲆᐃⲆΔⲆᐃᐃ: "img/inv-point-machine-click.png",
    ΔΔᐃⲆΔⲆΔ: "img/day-extractor-machine0-stone.png",
    ΔⲆⵠⵠⲆΔΔ: "img/night-extractor-machine0-stone.png",
    ΔⵠⲆⲆⲆⲆᐃ: "img/day-extractor-machine-stone.png",
    ⲆⵠΔⲆΔⵠΔ: "img/night-extractor-machine-stone.png",
    ⲆᐃΔΔⵠⲆⲆ: "img/inv-extractor-machine-stone-out.png",
    ᐃᐃⵠΔᐃⵠΔ: "img/inv-extractor-machine-stone-in.png",
    ⵠⵠΔΔΔΔΔ: "img/inv-extractor-machine-stone-click.png",
    ⲆⵠⲆᐃΔⵠᐃ: "img/day-extractor-machine0-gold.png",
    ᐃⲆΔΔⲆΔⲆ: "img/night-extractor-machine0-gold.png",
    ⲆⵠᐃⲆⲆΔᐃ: "img/day-extractor-machine-gold.png",
    ⵠΔⲆᐃᐃΔᐃ: "img/night-extractor-machine-gold.png",
    ΔⲆᐃΔΔⵠᐃ: "img/inv-extractor-machine-gold-out.png",
    ⲆΔⲆΔᐃΔⲆ: "img/inv-extractor-machine-gold-in.png",
    ᐃΔᐃⲆⵠΔΔ: "img/inv-extractor-machine-gold-click.png",
    ΔᐃⵠΔⲆⲆΔ: "img/day-extractor-machine0-diamond.png",
    ⵠⵠΔΔⲆⵠΔ: "img/night-extractor-machine0-diamond.png",
    ΔᐃⲆΔⵠᐃⲆ: "img/day-extractor-machine-diamond.png",
    ⲆᐃⲆⲆⵠⲆᐃ: "img/night-extractor-machine-diamond.png",
    ⲆⲆΔΔΔΔᐃ: "img/inv-extractor-machine-diamond-out.png",
    ᐃⲆΔΔᐃΔΔ: "img/inv-extractor-machine-diamond-in.png",
    ᐃᐃᐃⲆⲆⲆⵠ: "img/inv-extractor-machine-diamond-click.png",
    ⲆⲆⲆⲆⵠⲆⲆ: "img/day-extractor-machine0-amethyst.png",
    ᐃΔⲆⲆᐃΔΔ: "img/night-extractor-machine0-amethyst.png",
    ᐃᐃⵠᐃΔΔΔ: "img/day-extractor-machine-amethyst.png",
    ᐃΔⵠΔΔΔΔ: "img/night-extractor-machine-amethyst.png",
    ⲆΔΔⵠᐃⵠⵠ: "img/inv-extractor-machine-amethyst-out.png",
    ᐃΔⲆᐃⲆᐃᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ᐃⲆᐃΔΔᐃⲆ: "img/inv-extractor-machine-amethyst-click.png",
    ᐃⲆⲆⵠΔΔΔ: "img/day-extractor-machine0-reidite.png",
    ⲆᐃΔΔⲆΔⵠ: "img/night-extractor-machine0-reidite.png",
    ⲆⲆΔⵠΔⲆΔ: "img/day-extractor-machine-reidite.png",
    ⲆΔⲆΔᐃⲆⵠ: "img/night-extractor-machine-reidite.png",
    ᐃΔⵠᐃⵠⵠᐃ: "img/inv-extractor-machine-reidite-out.png",
    ⵠⲆⲆⵠⵠΔᐃ: "img/inv-extractor-machine-reidite-in.png",
    ᐃᐃⵠᐃⲆⵠᐃ: "img/inv-extractor-machine-reidite-click.png",
    ΔΔΔⲆᐃⲆΔ: "img/day-extractor-machine0-emerald.png",
    ΔⵠΔᐃⲆΔⵠ: "img/night-extractor-machine0-emerald.png",
    ᐃΔⲆΔⲆΔⲆ: "img/day-extractor-machine-emerald.png",
    ΔⲆⲆⲆⵠⲆΔ: "img/night-extractor-machine-emerald.png",
    ⲆᐃⵠⵠⵠΔⵠ: "img/inv-extractor-machine-emerald-out.png",
    ΔⲆΔΔⲆΔᐃ: "img/inv-extractor-machine-emerald-in.png",
    ⵠΔⲆᐃⵠΔΔ: "img/inv-extractor-machine-emerald-click.png",
    ⵠᐃᐃⵠᐃⵠⲆ: "img/day-extractor-machine0-copper.png",
    ⲆΔⵠⲆⵠⲆⲆ: "img/night-extractor-machine0-copper.png",
    ⲆⵠⵠⵠΔᐃΔ: "img/day-extractor-machine-copper.png",
    ⲆⵠⲆΔⲆⲆΔ: "img/night-extractor-machine-copper.png",
    ⵠΔⲆⵠⲆΔΔ: "img/inv-extractor-machine-copper-out.png",
    ⲆᐃⵠⵠΔⵠᐃ: "img/inv-extractor-machine-copper-in.png",
    ⲆⲆᐃⵠⵠΔᐃ: "img/inv-extractor-machine-copper-click.png",
    ⲆΔⵠⲆⲆⲆΔ: "img/day-extractor-machine0-iron.png",
    ᐃᐃᐃⲆⵠⵠⲆ: "img/night-extractor-machine0-iron.png",
    ᐃⵠΔΔⵠΔΔ: "img/day-extractor-machine-iron.png",
    ⵠⵠᐃⲆᐃⲆᐃ: "img/night-extractor-machine-iron.png",
    ΔᐃΔⲆΔⵠΔ: "img/inv-extractor-machine-iron-out.png",
    ⲆⵠΔⵠⵠᐃⲆ: "img/inv-extractor-machine-iron-in.png",
    ⵠᐃⲆᐃⵠᐃᐃ: "img/inv-extractor-machine-iron-click.png",
    ΔᐃᐃᐃⲆᐃⲆ: "img/day-extractor-machine0-topaz.png",
    ΔᐃΔΔΔⵠᐃ: "img/night-extractor-machine0-topaz.png",
    ⲆⵠⵠᐃⵠΔⲆ: "img/day-extractor-machine-topaz.png",
    ⵠⵠΔⵠᐃΔⵠ: "img/night-extractor-machine-topaz.png",
    ᐃΔᐃⲆⵠΔᐃ: "img/inv-extractor-machine-topaz-out.png",
    ⵠⲆⲆΔⲆΔᐃ: "img/inv-extractor-machine-topaz-in.png",
    ⲆⲆΔⲆⵠⲆΔ: "img/inv-extractor-machine-topaz-click.png",
    ΔᐃΔΔΔΔᐃ: "img/day-extractor-machine0-sapphire.png",
    ΔᐃΔⲆΔΔⲆ: "img/night-extractor-machine0-sapphire.png",
    ΔᐃⵠⵠΔΔᐃ: "img/day-extractor-machine-sapphire.png",
    ⵠΔⲆΔᐃⲆⲆ: "img/night-extractor-machine-sapphire.png",
    ᐃⲆΔⲆᐃⵠᐃ: "img/inv-extractor-machine-sapphire-out.png",
    ⵠΔⵠΔⵠΔⵠ: "img/inv-extractor-machine-sapphire-in.png",
    ᐃᐃΔᐃΔⵠⵠ: "img/inv-extractor-machine-sapphire-click.png",
    ⲆᐃⵠΔⲆᐃⵠ: "img/day-extractor-machine0-jade.png",
    ᐃᐃⵠⵠᐃᐃΔ: "img/night-extractor-machine0-jade.png",
    ⵠΔⲆᐃᐃⵠⵠ: "img/day-extractor-machine-jade.png",
    ⵠΔⲆⵠᐃΔᐃ: "img/night-extractor-machine-jade.png",
    ᐃᐃΔΔᐃⵠΔ: "img/inv-extractor-machine-jade-out.png",
    ⲆᐃΔΔⲆΔᐃ: "img/inv-extractor-machine-jade-in.png",
    ᐃⵠⵠⲆⲆⵠⲆ: "img/inv-extractor-machine-jade-click.png",
    ⲆⵠΔᐃᐃⵠⲆ: "img/day-extractor-machine0-ruby.png",
    ⲆΔⲆⲆᐃⵠᐃ: "img/night-extractor-machine0-ruby.png",
    ᐃⲆΔⵠᐃΔᐃ: "img/day-extractor-machine-ruby.png",
    ⲆⵠⲆΔᐃΔΔ: "img/night-extractor-machine-ruby.png",
    ⵠᐃⵠⵠⵠᐃⲆ: "img/inv-extractor-machine-ruby-out.png",
    ΔⲆᐃᐃΔⲆⲆ: "img/inv-extractor-machine-ruby-in.png",
    ᐃᐃⵠⵠΔⵠⵠ: "img/inv-extractor-machine-ruby-click.png",
    ⵠᐃΔⵠⲆΔⲆ: "img/day-extractor-machine0-coal.png",
    ᐃⵠᐃⲆΔⵠᐃ: "img/night-extractor-machine0-coal.png",
    ᐃⵠᐃⵠΔΔⲆ: "img/day-extractor-machine-coal.png",
    ⵠⲆΔΔⵠΔⵠ: "img/night-extractor-machine-coal.png",
    ΔᐃΔΔⵠΔΔ: "img/inv-extractor-machine-coal-out.png",
    ⲆᐃⲆⲆᐃⵠⵠ: "img/inv-extractor-machine-coal-in.png",
    ΔΔᐃΔᐃᐃᐃ: "img/inv-extractor-machine-coal-click.png",
    ⵠᐃΔⲆΔⲆⲆ: "img/day-extractor-machine0-aquamarine.png",
    ΔⵠⲆΔᐃΔᐃ: "img/night-extractor-machine0-aquamarine.png",
    ⵠⲆᐃⵠΔᐃᐃ: "img/day-extractor-machine-aquamarine.png",
    ᐃᐃⲆⲆⲆⵠⲆ: "img/night-extractor-machine-aquamarine.png",
    ΔⲆᐃᐃᐃΔⲆ: "img/inv-extractor-machine-aquamarine-out.png",
    ΔΔΔⲆᐃΔⵠ: "img/inv-extractor-machine-aquamarine-in.png",
    ⲆⲆⲆᐃⵠΔᐃ: "img/inv-extractor-machine-aquamarine-click.png",
    ΔᐃⲆᐃⲆⲆⲆ: "img/extractor-cases.png",
    ᐃⵠᐃⵠⵠⵠⲆ: "img/day-golden-hen.png",
    ΔⵠᐃⲆΔⲆᐃ: "img/night-golden-hen.png",
    ⲆⵠⲆᐃⲆΔᐃ: "img/day-golden-chicken.png",
    ⲆΔⵠⲆⵠΔΔ: "img/night-golden-chicken.png",
    ᐃⲆⵠᐃΔΔⵠ: "img/day-golden-hen-angry.png",
    ᐃⵠⲆΔΔⵠΔ: "img/night-golden-hen-angry.png",
    ΔⲆⲆΔΔᐃΔ: "img/hurt-golden-hen.png",
    ᐃⲆΔᐃᐃⲆⲆ: "img/hurt-golden-chicken.png",
    ᐃⵠⲆⲆⵠⵠᐃ: "img/day-golden-hen-tamed.png",
    ⵠΔⵠⲆᐃΔᐃ: "img/night-golden-hen-tamed.png",
    ⲆⵠⵠⵠᐃᐃⲆ: "img/inv-mount-golden-hen-out.png",
    ⲆⵠᐃⵠΔⵠⲆ: "img/inv-mount-golden-hen-in.png",
    ⲆⲆⵠᐃᐃᐃⲆ: "img/inv-mount-golden-hen-click.png",
    ΔⲆΔᐃΔᐃⵠ: "img/logo-interface.png",
    ⲆⲆΔΔᐃΔᐃ: "img/biome-mode-hover.png",
    ⲆⲆΔⵠⵠⲆⲆ: "img/normal-mode-hover.png",
    ⲆⲆΔΔⲆᐃⲆ: "img/vampire-mode-hover.png",
    ⵠΔⲆΔΔⵠΔ: "img/zombie-mode-hover.png",
    ⲆΔⵠΔⲆⲆΔ: "img/community-mode-hover2.png",
    ΔΔᐃⵠᐃⲆⲆ: "img/experimental-mode-hover.png",
    ΔⲆᐃᐃΔΔⵠ: "img/zombie-mode-out.png",
    ΔⵠⲆΔᐃΔⲆ: "img/zombie-mode-in.png",
    ΔⵠⵠⲆᐃⵠⵠ: "img/zombie-mode-click.png",
    ᐃΔⵠᐃⵠΔⵠ: "img/vampire-mode-out.png",
    ᐃⵠᐃⵠⵠⵠⵠ: "img/vampire-mode-in.png",
    ᐃⲆⲆⵠᐃᐃⵠ: "img/vampire-mode-click.png",
    ᐃⵠⲆⵠⲆⲆΔ: "img/normal-mode-out.png",
    ⲆⲆΔΔⲆⵠᐃ: "img/normal-mode-in.png",
    ᐃⲆΔⵠⲆΔⵠ: "img/normal-mode-click.png",
    ᐃΔⵠⵠⲆᐃᐃ: "img/biome-mode-out.png",
    ⲆᐃⵠΔΔΔⲆ: "img/biome-mode-in.png",
    ⵠⲆᐃⲆΔⲆΔ: "img/biome-mode-click.png",
    ᐃᐃᐃᐃΔⲆΔ: "img/community-mode-out.png",
    ΔⲆΔΔΔⲆⲆ: "img/community-mode-in.png",
    ⵠⲆΔⲆᐃΔΔ: "img/community-mode-click.png",
    ⵠᐃΔⵠΔᐃᐃ: "img/experimental-modes-out.png",
    ⵠⲆᐃⲆΔΔΔ: "img/experimental-modes-in.png",
    ΔΔᐃᐃⵠⵠⵠ: "img/experimental-modes-click.png",
    ⵠⲆΔⵠⵠⲆᐃ: "img/youtube-button-out.png",
    ᐃΔΔⲆᐃΔⲆ: "img/youtube-button-in.png",
    ᐃⵠⵠᐃᐃᐃᐃ: "img/youtube-button-click.png",
    ⵠᐃΔⲆᐃⵠⲆ: "img/wiki-button-out.png",
    ΔⵠᐃⵠⵠᐃΔ: "img/wiki-button-in.png",
    ⵠⵠᐃⵠᐃⵠΔ: "img/wiki-button-click.png",
    ΔⲆⲆΔⵠⵠⲆ: "img/twitter-button-out.png",
    ΔΔⵠᐃᐃᐃᐃ: "img/twitter-button-in.png",
    ΔⵠⲆΔᐃⵠΔ: "img/twitter-button-click.png",
    ᐃⵠⲆΔⵠⵠⵠ: "img/facebook-button-out.png",
    ᐃΔΔⲆⲆΔⲆ: "img/facebook-button-in.png",
    ᐃⵠⵠΔΔⲆⵠ: "img/facebook-button-click.png",
    ΔⲆᐃⲆⵠⲆⵠ: "img/reddit-button-out.png",
    ᐃᐃΔᐃᐃⲆᐃ: "img/reddit-button-in.png",
    ΔⵠⵠⲆΔᐃⲆ: "img/reddit-button-click.png",
    ⵠⲆⲆⲆΔᐃⵠ: "img/discord-button-out.png",
    ᐃⵠᐃΔᐃⲆᐃ: "img/discord-button-in.png",
    ᐃⲆⵠⲆⵠⲆⲆ: "img/discord-button-click.png",
    ᐃⵠⲆⲆⵠΔᐃ: "img/merch-button-out.png",
    ⲆᐃⵠⲆΔⵠⲆ: "img/merch-button-in.png",
    ΔΔᐃⲆⲆⲆⵠ: "img/merch-button-click.png",
    ⵠΔᐃⵠΔᐃⵠⵠΔ: "img/terminal-button-out.png",
    ᐃⵠΔᐃᐃⲆⲆⲆΔ: "img/terminal-button-in.png",
    ΔⵠᐃⲆⵠᐃᐃᐃⵠ: "img/terminal-button-click.png",
    ⵠⵠΔⵠΔⵠⵠ: "img/restart-out.png",
    ⲆⵠⲆⲆΔΔΔ: "img/restart-in.png",
    ᐃⲆᐃⲆⵠΔΔ: "img/restart-click.png",
    ᐃⲆᐃΔΔⵠⲆ: "img/reboot-out.png",
    ᐃⵠᐃΔΔᐃΔ: "img/reboot-in.png",
    ⲆᐃᐃΔΔⲆⲆ: "img/reboot-click.png",
    ⵠⵠᐃⵠΔⵠⵠ: "img/guide-out.png",
    ΔΔⲆⲆᐃⲆⵠ: "img/guide-in.png",
    ΔᐃΔⵠⵠⲆⲆ: "img/guide-click.png",
    ⲆᐃΔΔᐃⲆⲆ: "img/copy-paste-out.png",
    ⵠⵠΔᐃⲆⲆᐃ: "img/copy-paste-in.png",
    ⲆΔⲆΔΔᐃΔ: "img/copy-paste-click.png",
    ᐃΔⲆΔⵠⵠⵠ: "img/link-buttons-bg.png",
    ⲆⲆΔΔᐃᐃᐃ: "img/changelog-box2.png",
    ⵠᐃᐃⵠΔⵠⵠ: "img/changelog_33.png",
    ᐃⵠⵠⵠⵠⲆⲆ: "img/banner-taming.png",
    ⵠⲆΔΔΔΔⲆ: "img/profile-button-out.png",
    ΔⵠᐃⵠⲆⲆᐃ: "img/profile-button-in.png",
    ᐃⵠⲆΔⲆᐃΔ: "img/profile-button-click.png",
    ΔⵠⲆⵠⲆⵠⲆ: "img/login-button-out.png",
    ⲆⲆᐃⵠⵠᐃΔ: "img/login-button-in.png",
    ᐃᐃᐃᐃΔᐃΔ: "img/login-button-click.png",
    ΔᐃΔⵠⲆⲆᐃ: "img/login-google-out.png",
    ⲆⲆΔⵠᐃΔᐃ: "img/login-google-in.png",
    ⵠⲆΔᐃⵠⵠⵠ: "img/login-google-click.png",
    ᐃΔᐃⲆⲆᐃΔ: "img/login-facebook-out.png",
    ΔⲆΔᐃⲆⲆⵠ: "img/login-facebook-in.png",
    ᐃΔΔⲆΔⲆⵠ: "img/login-facebook-click.png",
    ΔᐃᐃᐃᐃⵠⲆ: "img/account-box.png",
    ΔⲆⲆΔⲆⲆᐃⵠΔ: "img/account-under-maintenance.png",
    ⲆΔⲆⵠΔᐃᐃ: "img/close-button-account-out.png",
    ΔΔΔⵠⵠⵠΔ: "img/close-button-account-in.png",
    ᐃⲆᐃᐃΔᐃⲆ: "img/close-button-account-click.png",
    ᐃⲆᐃᐃⲆΔᐃ: "img/play-button-out.png",
    ΔᐃΔⲆⵠⲆᐃ: "img/play-button-in.png",
    ⲆⵠⵠⲆⵠΔⲆ: "img/play-button-click.png",
    ΔΔᐃⲆⲆⵠᐃᐃᐃ: "img/app-store-badge.png",
    ᐃⵠᐃⲆⵠⵠⲆⵠⲆ: "img/play-store-badge.png",
    ⵠⲆⵠΔⵠᐃΔⲆΔ: "img/mobile-boxad.png",
    ⵠΔᐃⵠΔΔⵠ: "img/modify-name-out.png",
    ⲆΔⲆΔⲆᐃⵠ: "img/modify-name-in.png",
    ΔᐃⵠⲆⵠⵠⲆ: "img/modify-name-click.png",
    ⵠⵠⲆⵠΔΔⲆ: "img/copy-id-button-out.png",
    ᐃᐃᐃⲆᐃⵠⵠ: "img/copy-id-button-hover.png",
    ⲆⵠΔᐃⲆᐃⲆ: "img/copy-id-button-active.png",
    ᐃᐃⵠⵠΔᐃⵠ: "img/yes-button-out.png",
    ⵠᐃᐃⵠᐃⲆᐃ: "img/yes-button-in.png",
    ⵠᐃⲆΔᐃⵠᐃ: "img/yes-button-click.png",
    ⵠΔⲆⲆⲆᐃᐃ: "img/yes-300-button-out.png",
    ⲆΔΔⲆᐃᐃᐃ: "img/yes-300-button-in.png",
    ΔⵠⲆⲆⵠΔᐃ: "img/yes-300-button-click.png",
    ᐃᐃⲆⵠⲆᐃⲆ: "img/no-button-out.png",
    ᐃⲆⲆⵠⲆΔΔ: "img/no-button-in.png",
    ⵠΔᐃⵠⲆᐃⵠ: "img/no-button-click.png",
    Ⲇⵠⵠᐃᐃⵠⵠ: "img/no-thanks-button-out.png",
    ΔΔⲆᐃⵠΔᐃ: "img/no-thanks-button-in.png",
    ΔᐃΔᐃᐃᐃⵠ: "img/no-thanks-button-click.png",
    ΔⲆᐃᐃⲆΔΔ: "img/shop-button-out.png",
    ⲆᐃᐃⲆⵠΔⵠ: "img/shop-button-in.png",
    ΔᐃΔⲆᐃΔⲆ: "img/shop-button-click.png",
    ΔΔᐃΔᐃⵠΔ: "img/logout-out.png",
    ⲆΔΔⵠᐃⵠΔ: "img/logout-in.png",
    ΔΔⲆⵠΔΔΔ: "img/logout-click.png",
    ⵠⲆⵠᐃⲆⲆΔ: "img/terms-button-out.png",
    ᐃᐃᐃⲆⵠΔΔ: "img/terms-button-in.png",
    ⲆΔΔⲆΔⲆⲆ: "img/terms-button-click.png",
    ᐃᐃⵠⵠᐃⵠⵠ: "img/tutorial-icon.png",
    ᐃᐃᐃⲆⵠᐃⵠ: "img/skins-icon.png",
    ΔΔⲆΔⵠⵠⵠ: "img/shop-icon.png",
    ΔΔΔΔΔᐃⲆΔⵠ: "img/paint-icon.png",
    ⵠⵠⵠⵠᐃⲆΔ: "img/leaderboard-icon.png",
    ⲆⵠⵠⲆⲆⲆⵠ: "img/start-icon.png",
    ⵠⵠⲆᐃⵠⵠⵠ: "img/profile-icon.png",
    ⵠᐃᐃᐃⲆΔᐃ: "img/server-access-icon2.png",
    ᐃⲆᐃⲆΔⲆⲆ: "img/button-homepage-bg-out.png",
    ⲆΔᐃΔⵠⲆⵠ: "img/button-homepage-bg-in.png",
    ΔⵠⲆⵠⵠᐃⲆ: "img/button-homepage-bg-click.png",
    ᐃⲆᐃᐃᐃⵠⲆ: "img/button-bottom-homepage-bg-out.png",
    ᐃΔⲆⵠᐃⵠΔ: "img/button-bottom-homepage-bg-in.png",
    ⲆᐃⲆⵠⵠⵠᐃ: "img/button-bottom-homepage-bg-click.png",
    ⵠᐃⵠᐃⲆⲆᐃ: "img/lvl-player.png",
    ⲆⲆᐃΔΔⵠΔ: "img/avatar-player.png",
    ⲆΔⵠⵠⲆⲆⵠ: "img/avatar-player1.png",
    ⲆᐃⵠΔⲆΔᐃ: "img/avatar-player2.png",
    ⲆᐃΔⵠᐃⵠᐃ: "img/avatar-player3.png",
    ΔⵠⵠΔΔᐃᐃ: "img/avatar-player4.png",
    ⵠᐃᐃᐃᐃΔᐃ: "img/avatar-player5.png",
    ⲆⵠⵠᐃᐃΔⲆ: "img/avatar-player6.png",
    ᐃᐃⵠᐃⲆΔⲆ: "img/avatar-player7.png",
    Ⲇᐃᐃⵠᐃⵠⵠ: "img/avatar-player8.png",
    ΔⵠⵠⲆⲆⲆⲆ: "img/avatar-player9.png",
    ⵠΔⵠΔᐃΔⲆ: "img/avatar-player10.png",
    ΔᐃΔΔΔᐃᐃ: "img/avatar-player11.png",
    ⲆᐃⵠⵠⲆΔⲆ: "img/avatar-player12.png",
    ᐃΔⵠⲆⲆⲆᐃ: "img/avatar-player13.png",
    ᐃⲆⵠᐃΔⲆⵠ: "img/avatar-player14.png",
    ⵠⲆΔᐃᐃⲆᐃ: "img/avatar-player14.png",
    ᐃⲆⵠᐃⲆᐃΔ: "img/avatar-player14.png",
    ⵠᐃᐃΔⲆΔⲆ: "img/avatar-player14.png",
    ᐃⵠⵠΔⵠⲆⲆⲆⵠ: "img/golden-bread.png",
    ᐃᐃᐃⵠᐃⲆⲆ: "img/buy-bread-out.png",
    ⵠⵠⲆⵠⲆⲆΔ: "img/buy-bread-in.png",
    ΔΔᐃⵠΔΔᐃ: "img/buy-bread-click.png",
    ΔⲆᐃⲆⲆⲆΔ: "img/gauge.png",
    ᐃΔΔⵠⲆΔⲆⲆⵠ: "img/season-4-out.png",
    ΔⲆᐃΔΔⲆᐃⵠΔ: "img/season-4-in.png",
    ΔΔᐃⲆⲆΔΔᐃⲆ: "img/season-4-click.png",
    ⲆᐃⵠⲆΔΔⲆᐃΔ: "img/season4-box.png",
    ΔⲆⲆⵠΔᐃΔᐃⵠ: "img/season-5-out.png",
    ΔΔⵠΔΔⵠᐃᐃᐃ: "img/season-5-in.png",
    ⵠᐃΔⲆΔⲆΔΔΔ: "img/season-5-click.png",
    ΔΔᐃⵠⲆⲆⲆΔⲆ: "img/season5-box.png",
    ΔⵠΔΔⵠⲆⵠΔⵠ: "img/season-6-out.png",
    ⲆΔⵠΔΔⵠΔΔᐃ: "img/season-6-in.png",
    ⵠΔΔΔᐃΔⵠⵠᐃ: "img/season-6-click.png",
    ᐃⲆᐃⵠⵠⲆᐃⲆΔ: "img/season6-box.png",
    ⵠⲆΔⵠⵠᐃΔ: "img/season-7-out.png",
    ⲆᐃⵠᐃⵠΔⲆ: "img/season-7-in.png",
    ᐃΔⲆⵠⵠΔΔ: "img/season-7-click.png",
    ΔᐃⲆⵠΔᐃⵠ: "img/season7-box.png",
    ᐃⲆᐃⲆΔᐃⲆ: "img/profile3-box.png",
    ⵠⵠⲆⲆⵠᐃⵠ: "img/skins-box.png",
    ⵠᐃΔⲆΔⵠᐃ: "img/shop-box.png",
    ᐃΔΔΔΔᐃⲆⵠᐃ: "img/private-server-box.png",
    ⵠΔⲆΔΔⲆᐃ: "img/location-box.png",
    ⵠᐃⲆⵠⵠᐃᐃ: "img/server-duration-box.png",
    ᐃⵠᐃΔΔⲆⵠ: "img/tutorial-box.png",
    ΔⲆⲆᐃΔⲆⲆ: "img/leaderboard2-box.png",
    ⵠΔΔᐃᐃⵠⲆ: "img/buy-breads-box.png",
    ⵠᐃⵠⲆΔΔᐃ: "img/bag-box.png",
    ΔⲆⵠⵠⵠⲆⵠ: "img/deadbox-box.png",
    ΔΔⵠᐃⲆᐃⲆ: "img/book-box.png",
    ΔᐃᐃΔⵠⵠⲆ: "img/accessories-box.png",
    ΔΔΔⲆΔΔⲆ: "img/customskin-box.png",
    ⲆᐃΔΔⲆⲆΔ: "img/bag-lasts.png",
    ᐃⲆⵠᐃⲆΔΔ: "img/server-lasts.png",
    ΔΔⵠⵠᐃⵠⲆ: "img/server-access-box3.png",
    ⵠᐃⵠᐃᐃᐃΔ: "img/lootbox-box.png",
    Δᐃⵠⵠⵠⵠᐃ: "img/change-nickname0.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/change-nickname1.png",
    ⵠΔⵠⲆᐃⵠⵠ: "img/cheating-box.png",
    ⵠⵠΔᐃᐃⵠᐃⲆⲆ: "img/daily-quest-box.png",
    ΔᐃᐃⲆⲆᐃᐃᐃᐃ: "img/daily-5-bread.png",
    ⲆΔⲆⲆᐃΔΔⵠⲆ: "img/daily-10-bread.png",
    ᐃⲆᐃΔᐃⲆⲆⲆΔ: "img/daily-valid.png",
    ᐃᐃΔᐃⵠⵠⲆ: "img/normal-profile-out.png",
    ΔⵠᐃⵠⵠΔⵠ: "img/normal-profile-in.png",
    ᐃᐃΔⲆᐃⲆΔ: "img/normal-profile-click.png",
    ⵠΔᐃⵠᐃᐃΔ: "img/forest-profile-out.png",
    ᐃᐃᐃᐃⲆⲆⵠ: "img/forest-profile-in.png",
    ⲆⵠΔᐃⲆⵠⵠ: "img/forest-profile-click.png",
    ΔΔⲆⵠⲆΔⵠ: "img/zombie-profile-out.png",
    ᐃΔᐃᐃⵠⲆⵠ: "img/zombie-profile-in.png",
    ⲆⲆⲆⵠΔᐃᐃ: "img/zombie-profile-click.png",
    ⲆΔΔΔᐃⵠᐃ: "img/vampire-profile-out.png",
    ⲆᐃⵠⵠΔⲆⵠ: "img/vampire-profile-in.png",
    ⵠΔⲆΔⵠΔⲆ: "img/vampire-profile-click.png",
    ⵠⲆⵠᐃⲆⵠⵠ: "img/total-profile-out.png",
    ᐃⵠΔⲆⵠⲆⲆ: "img/total-profile-in.png",
    ΔⲆΔⲆⵠⵠᐃ: "img/total-profile-click.png",
    ᐃⵠⵠΔΔⲆᐃ: "img/season1-out.png",
    ΔⲆΔⵠΔΔΔ: "img/season1-in.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/season1-click.png",
    ᐃⵠΔΔΔⵠΔ: "img/season2-out.png",
    ΔⵠᐃΔⵠᐃⵠ: "img/season2-in.png",
    ⲆΔΔⲆᐃⵠⲆ: "img/season2-click.png",
    ᐃΔᐃΔⵠᐃΔ: "img/season3-out.png",
    ᐃⲆⵠⲆⲆⵠⲆ: "img/season3-in.png",
    ΔⲆΔᐃⵠᐃⲆ: "img/season3-click.png",
    ⲆΔᐃⵠⵠΔΔ: "img/season4-out.png",
    ᐃΔⵠⲆⲆⲆΔ: "img/season4-in.png",
    ᐃⵠⵠᐃⲆᐃⲆ: "img/season4-click.png",
    ᐃΔⵠΔΔΔⵠ: "img/season5-out.png",
    ⵠᐃⵠⵠⵠⵠᐃ: "img/season5-in.png",
    ᐃᐃᐃⵠΔⲆΔ: "img/season5-click.png",
    ⵠⵠᐃⵠᐃⲆⲆ: "img/season6-out.png",
    ΔⵠΔⵠᐃᐃᐃ: "img/season6-in.png",
    ⲆᐃᐃⲆⲆⵠⵠ: "img/season6-click.png",
    ᐃΔᐃΔΔⵠΔ: "img/season7-out.png",
    ᐃΔⵠⵠⲆᐃΔ: "img/season7-in.png",
    ⲆᐃⵠⲆⵠΔᐃ: "img/season7-click.png",
    ΔⲆⲆⲆᐃⲆᐃ: "img/locked-skin-alert.png",
    ⵠᐃᐃⲆⲆⲆⵠ: "img/locked-custom-alert.png",
    ΔⲆⵠΔⲆⵠΔ: "img/bg-red-locked.png",
    ⲆⵠᐃⲆⲆᐃΔ: "img/skin-button-out.png",
    ΔᐃΔⲆᐃΔΔ: "img/skin-button-in.png",
    ⵠΔᐃᐃⵠΔⵠ: "img/skin-button-click.png",
    ⵠⲆΔΔⲆⲆⵠ: "img/accessory-button-out.png",
    ᐃⲆⵠⲆⵠΔᐃ: "img/accessory-button-in.png",
    ᐃΔΔⵠⵠⵠᐃ: "img/accessory-button-click.png",
    ⵠᐃᐃᐃΔΔⲆ: "img/bag-button-out.png",
    ᐃΔᐃᐃᐃⵠⵠ: "img/bag-button-in.png",
    ⵠⲆΔᐃᐃⵠⲆ: "img/bag-button-click.png",
    ᐃᐃⲆⵠΔⵠΔ: "img/book-button-out.png",
    ΔΔⵠᐃᐃΔΔ: "img/book-button-in.png",
    ⲆΔΔⵠⲆΔΔ: "img/book-button-click.png",
    ⵠⵠⵠⵠⵠΔⲆ: "img/deadbox-button-out.png",
    ΔΔᐃΔᐃΔⲆ: "img/deadbox-button-in.png",
    ⲆⵠⲆⲆⲆⵠⲆ: "img/deadbox-button-click.png",
    ⲆΔⵠⲆᐃᐃⲆ: "img/loot-button-out.png",
    ᐃⲆΔⵠᐃⲆΔ: "img/loot-button-in.png",
    ⵠᐃΔⵠⲆᐃᐃ: "img/loot-button-click.png",
    ⲆⲆΔⵠⲆᐃᐃ: "img/free-item-out.png",
    ⵠᐃⲆⵠΔᐃΔ: "img/free-item-in.png",
    ⲆⲆⲆⵠᐃⲆⲆ: "img/free-item-click.png",
    ᐃⵠⲆᐃ: "img/wood-item-out.png",
    ⲆⲆᐃᐃ: "img/wood-item-in.png",
    ⵠⵠΔΔ: "img/wood-item-click.png",
    ⵠⵠⵠⲆΔⲆΔ: "img/stone-item.png",
    ᐃΔΔⵠⵠⲆᐃ: "img/stone-item-in.png",
    ΔΔⵠΔⵠⲆᐃ: "img/stone-item-click.png",
    ⵠΔⲆⵠΔⵠΔ: "img/gold-item.png",
    ⲆⲆᐃᐃΔⵠⵠ: "img/gold-item-in.png",
    ΔⲆΔᐃᐃᐃΔ: "img/gold-item-click.png",
    ΔᐃΔⲆΔⵠⵠ: "img/diamond-item.png",
    ⵠΔᐃⲆⲆᐃΔ: "img/diamond-item-in.png",
    ΔᐃⵠⵠᐃⲆΔ: "img/diamond-item-click.png",
    ΔⵠⲆⵠⲆᐃⲆ: "img/amethyst-item.png",
    ⵠᐃⵠⲆΔᐃᐃ: "img/amethyst-item-in.png",
    ⲆᐃⲆΔⲆΔΔ: "img/amethyst-item-click.png",
    ᐃⵠⵠΔⵠⵠΔ: "img/reidite-item.png",
    ΔΔΔⵠⵠⲆⲆ: "img/reidite-item-in.png",
    ⲆⲆΔⵠⲆΔΔ: "img/reidite-item-click.png",
    ΔΔΔᐃᐃⲆᐃ: "img/special-item-out.png",
    ᐃΔⵠⵠⵠⵠⲆ: "img/special-item-in.png",
    ΔᐃⵠΔⵠⵠⲆ: "img/special-item-click.png",
    ΔⲆⲆⲆⵠⵠᐃ: "img/level-item-out.png",
    ᐃᐃⲆⵠᐃᐃⲆ: "img/level-item-in.png",
    ⲆⲆⵠΔⵠΔⵠ: "img/level-item-click.png",
    ⵠΔⲆᐃΔⵠΔ: "img/skin-previous-out.png",
    ⲆΔⵠᐃⵠΔⲆ: "img/skin-previous-in.png",
    ΔΔΔⵠᐃΔⵠ: "img/skin-previous-click.png",
    ΔΔᐃⲆΔΔⲆ: "img/skin-next-out.png",
    ΔᐃᐃΔⲆᐃᐃ: "img/skin-next-in.png",
    ⲆᐃⵠΔΔᐃⵠ: "img/skin-next-click.png",
    ⲆⲆⵠⲆⵠ: "img/back-button-out.png",
    ⵠᐃⵠⵠⲆ: "img/back-button-in.png",
    ⲆⵠⵠⲆΔ: "img/back-button-click.png",
    ΔⵠᐃⲆⲆΔⵠ: "img/get-more-button-out.png",
    ΔΔⲆΔⲆⵠᐃ: "img/get-more-button-in.png",
    ᐃΔⵠⵠᐃⲆΔ: "img/get-more-button-click.png",
    ΔΔⲆⲆᐃⵠⵠ: "img/currency1-out.png",
    ΔⲆΔⵠⵠⵠⵠ: "img/currency1-in.png",
    ᐃᐃⵠᐃⵠⵠᐃ: "img/currency1-click.png",
    ΔⵠⵠᐃⵠᐃΔ: "img/currency2-out.png",
    ΔΔⲆΔΔΔΔ: "img/currency2-in.png",
    ⵠⲆⲆᐃΔᐃΔ: "img/currency2-click.png",
    ⵠᐃᐃⵠⵠᐃⵠ: "img/currency3-out.png",
    Δⵠᐃᐃⵠⵠᐃ: "img/currency3-in.png",
    ⵠᐃᐃΔⲆⵠᐃ: "img/currency3-click.png",
    ᐃᐃⲆⲆΔᐃΔ: "img/currency4-out.png",
    ᐃⵠΔᐃΔⵠⵠ: "img/currency4-in.png",
    ⲆᐃⲆΔⵠⵠⵠ: "img/currency4-click.png",
    ΔⵠΔΔΔⲆⲆ: "img/currency5-out.png",
    ⲆⵠⵠᐃⵠΔΔ: "img/currency5-in.png",
    ᐃᐃⵠΔⲆᐃΔ: "img/currency5-click.png",
    ⲆⲆⲆⲆⲆⵠᐃ: "img/price1-out.png",
    ΔⵠⲆⲆΔΔⲆ: "img/price1-in.png",
    ⵠΔᐃⲆΔΔⲆ: "img/price1-click.png",
    ΔᐃⲆⵠΔⵠⲆ: "img/price2-out.png",
    ᐃⵠⵠⲆΔⲆᐃ: "img/price2-in.png",
    ᐃΔⵠⵠΔΔⵠ: "img/price2-click.png",
    ΔⲆⲆᐃⵠΔⵠ: "img/price3-out.png",
    ᐃΔⵠⲆᐃΔΔ: "img/price3-in.png",
    ᐃⵠᐃΔΔⵠⵠ: "img/price3-click.png",
    ᐃⲆΔⲆᐃⲆⲆ: "img/price4-out.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/price4-in.png",
    ᐃΔΔⲆΔⵠⲆ: "img/price4-click.png",
    ΔⵠⲆΔⵠᐃⵠ: "img/price5-out.png",
    ΔᐃᐃΔⵠΔⲆ: "img/price5-in.png",
    ⵠⵠⲆⲆⲆᐃⲆ: "img/price5-click.png",
    ᐃⲆⲆⲆΔⲆΔⲆᐃ: "img/buy-private-server-out.png",
    ⵠⲆⵠⲆⵠΔⵠᐃᐃ: "img/buy-private-server-in.png",
    ⲆⲆᐃⵠⵠΔⲆⵠᐃ: "img/buy-private-server-click.png",
    ᐃⵠᐃᐃᐃᐃΔ: "img/atlanta-button-out.png",
    ⵠⲆΔⲆᐃⵠⲆ: "img/atlanta-button-in.png",
    ΔⲆΔΔⲆᐃⵠ: "img/atlanta-button-click.png",
    ⲆⵠⲆⲆᐃᐃⵠ: "img/los-angeles-button-out.png",
    ᐃⲆΔⵠⵠⲆΔ: "img/los-angeles-button-in.png",
    ᐃᐃⵠⲆᐃⲆⲆ: "img/los-angeles-button-click.png",
    ⲆⲆⲆΔᐃⵠⲆ: "img/sydney-button-out.png",
    ⲆⵠᐃΔΔⲆΔ: "img/sydney-button-in.png",
    ⲆⲆΔⲆᐃⵠᐃ: "img/sydney-button-click.png",
    ⵠΔⲆᐃⲆⲆⵠ: "img/frankfurt-button-out.png",
    ⲆΔΔⲆᐃⲆᐃ: "img/frankfurt-button-in.png",
    ΔΔΔΔᐃᐃᐃ: "img/frankfurt-button-click.png",
    ⵠᐃᐃⵠⲆⲆΔ: "img/osaka-button-out.png",
    ⵠᐃⲆⲆᐃᐃᐃ: "img/osaka-button-in.png",
    ΔⲆⲆⵠⵠᐃᐃ: "img/osaka-button-click.png",
    ΔⵠⵠΔᐃΔΔⲆᐃ: "img/yes-location-out.png",
    ᐃᐃⵠΔⲆΔⲆⲆⵠ: "img/yes-location-in.png",
    ᐃⲆⵠⲆⲆⵠΔⲆⵠ: "img/yes-location-click.png",
    ᐃᐃⲆⲆᐃⲆΔ: "img/3days-button-out.png",
    ⲆⲆⵠⵠΔⲆᐃ: "img/3days-button-in.png",
    ᐃᐃⵠΔⵠΔⵠ: "img/3days-button-click.png",
    Ⲇⵠⵠⵠᐃⵠᐃ: "img/7days-button-out.png",
    ⵠⵠⵠᐃⲆᐃΔ: "img/7days-button-in.png",
    ⲆⲆⵠⵠᐃⲆⲆ: "img/7days-button-click.png",
    ⵠΔᐃⲆⵠΔᐃ: "img/30days-button-out.png",
    ᐃⲆⲆᐃᐃⲆⲆ: "img/30days-button-in.png",
    ⵠᐃΔⵠᐃⵠᐃ: "img/30days-button-click.png",
    ΔᐃⵠⲆΔⵠᐃ: "img/90days-button-out.png",
    ΔⲆⲆⲆᐃⲆⵠ: "img/90days-button-in.png",
    ⲆⵠᐃⲆⵠⲆⲆ: "img/90days-button-click.png",
    ΔⵠⲆⵠⲆᐃᐃ: "img/spin1.png",
    ⲆᐃᐃⵠⲆⵠᐃ: "img/spin2.png",
    ᐃᐃⲆᐃΔΔⵠ: "img/spin3.png",
    ᐃᐃᐃⲆΔⵠⲆ: "img/spin4.png",
    ⲆⵠᐃᐃΔⵠᐃ: "img/spin5.png",
    ᐃΔΔⵠⲆᐃΔ: "img/spin6.png",
    ⲆⲆΔⵠΔΔⵠ: "img/arrow-spin.png",
    ⵠⵠᐃⲆⵠⵠⲆ: "img/spin-button-1-out.png",
    ᐃⵠΔⵠᐃⲆⲆ: "img/spin-button-1-in.png",
    ᐃⲆΔΔΔⵠΔ: "img/spin-button-1-click.png",
    ⲆΔⵠΔΔᐃⲆ: "img/spin-button-2-out.png",
    ᐃᐃᐃⵠᐃⵠΔ: "img/spin-button-2-in.png",
    ΔⵠⲆᐃⲆᐃⲆ: "img/spin-button-2-click.png",
    ⵠⵠΔᐃΔᐃⲆ: "img/spin-button-3-out.png",
    ⲆⲆⵠᐃᐃⲆⲆ: "img/spin-button-3-in.png",
    ⲆΔᐃⵠΔΔⵠ: "img/spin-button-3-click.png",
    ᐃⵠⵠᐃⲆΔΔ: "img/spin-button-4-out.png",
    ⵠᐃΔΔᐃᐃⲆ: "img/spin-button-4-in.png",
    ⵠⲆⵠᐃⲆᐃⵠ: "img/spin-button-4-click.png",
    ᐃᐃⵠⲆⲆⲆΔ: "img/spin-button-5-out.png",
    ᐃⵠΔⵠⲆⲆⵠ: "img/spin-button-5-in.png",
    ΔⲆΔⲆᐃΔⲆ: "img/spin-button-5-click.png",
    ⵠⲆⲆⵠΔⲆᐃ: "img/spin-light.png",
    ⲆⲆⵠᐃⵠΔᐃ: "img/tuto-wiki-out.png",
    ⲆⲆⵠᐃΔΔⲆ: "img/tuto-wiki-in.png",
    ⵠᐃⵠΔᐃⵠⲆ: "img/tuto-wiki-click.png",
    ⲆⵠⲆⲆᐃⲆΔ: "img/tuto-previous-out.png",
    ⲆΔΔΔΔΔⵠ: "img/tuto-previous-in.png",
    ⲆⲆᐃⲆΔΔΔ: "img/tuto-previous-click.png",
    ⵠᐃΔᐃⵠΔᐃ: "img/tuto-next-out.png",
    ⵠᐃⵠⵠⲆⵠⲆ: "img/tuto-next-in.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/tuto-next-click.png",
    ᐃⲆⲆⵠᐃⵠᐃ: "img/time-leaderboard-out.png",
    ΔΔⲆᐃΔᐃΔ: "img/time-leaderboard-in.png",
    ΔᐃΔⲆΔΔᐃ: "img/time-leaderboard-click.png",
    ⲆΔⲆⲆⲆⲆⲆ: "img/score-leaderboard-out.png",
    ⵠⵠⵠᐃⵠⵠᐃ: "img/score-leaderboard-in.png",
    ᐃⵠᐃⲆⲆᐃⲆ: "img/score-leaderboard-click.png",
    ᐃᐃΔᐃⵠΔΔ: "img/lvl-leaderboard-out.png",
    ⲆⲆⲆⲆΔⵠⲆ: "img/lvl-leaderboard-in.png",
    ⲆⲆΔΔⲆⲆᐃ: "img/lvl-leaderboard-click.png",
    ⲆⵠᐃⵠᐃⲆⲆ: "img/kill-leaderboard-out.png",
    ᐃⵠᐃⲆⲆᐃⵠ: "img/kill-leaderboard-in.png",
    ⲆΔᐃΔΔⲆΔ: "img/kill-leaderboard-click.png",
    ᐃΔⵠᐃᐃᐃΔ: "img/all-leaderboard-out.png",
    ⲆⲆⵠᐃⲆⲆⲆ: "img/all-leaderboard-in.png",
    ΔⲆⵠᐃΔΔΔ: "img/all-leaderboard-click.png",
    ΔⵠᐃⲆᐃᐃⲆ: "img/today-leaderboard-out.png",
    ᐃⵠⵠΔΔᐃⵠ: "img/today-leaderboard-in.png",
    ⵠⵠⵠⲆΔⵠⵠ: "img/today-leaderboard-click.png",
    ΔᐃⲆᐃᐃΔⵠ: "img/week-leaderboard-out.png",
    ΔᐃΔΔⵠⲆᐃ: "img/week-leaderboard-in.png",
    ΔΔΔΔⲆⵠⲆ: "img/week-leaderboard-click.png",
    ᐃⲆΔⵠⲆⵠΔ: "img/season1-out.png",
    ΔᐃⵠΔⲆⵠⵠ: "img/season1-in.png",
    ⵠⵠᐃⲆⲆⲆΔ: "img/season1-click.png",
    ⲆⲆⲆⲆΔΔⲆ: "img/season2-out.png",
    ᐃⲆᐃⲆⲆᐃᐃ: "img/season2-in.png",
    ᐃⵠᐃΔⵠⵠᐃ: "img/season2-click.png",
    ΔΔᐃⲆⲆᐃⲆ: "img/season3-out.png",
    ΔⵠᐃⲆΔⵠⲆ: "img/season3-in.png",
    ᐃᐃⵠⵠⵠⵠΔ: "img/season3-click.png",
    ⵠΔᐃᐃᐃⵠⵠ: "img/season4-out.png",
    ᐃⲆᐃⲆⲆⵠΔ: "img/season4-in.png",
    ΔᐃⲆᐃⲆΔΔ: "img/season4-click.png",
    ΔᐃᐃᐃⵠΔΔ: "img/season5-out.png",
    ᐃⲆⵠⵠᐃⲆⲆ: "img/season5-in.png",
    ⵠⲆᐃᐃⲆⵠⲆ: "img/season5-click.png",
    ⲆⲆΔΔΔΔΔ: "img/season6-out.png",
    ⵠⵠΔΔΔᐃᐃ: "img/season6-in.png",
    ΔΔⲆⲆⲆⲆⲆ: "img/season6-click.png",
    ⵠⵠᐃΔⵠΔⲆ: "img/season7-out.png",
    ΔΔΔⵠΔᐃᐃ: "img/season7-in.png",
    ⵠⲆΔᐃΔᐃΔ: "img/season7-click.png",
    ΔᐃⵠⵠⵠⲆΔ: "img/total-lead-out.png",
    ᐃᐃⲆⵠᐃᐃᐃ: "img/total-lead-in.png",
    ᐃⲆⵠⲆᐃᐃΔ: "img/total-lead-click.png",
    ᐃΔⲆΔⵠⲆⵠ: "img/normal-lead-out.png",
    ᐃΔⲆᐃⵠⵠΔ: "img/normal-lead-in.png",
    ᐃᐃᐃⲆⲆⵠⲆ: "img/normal-lead-click.png",
    ΔΔⲆⲆⲆⵠΔ: "img/forest-lead-out.png",
    ΔᐃⵠᐃΔᐃⲆ: "img/forest-lead-in.png",
    ⵠΔⵠⵠⲆⵠⲆ: "img/forest-lead-click.png",
    ⲆᐃΔⵠᐃΔᐃ: "img/vampire-lead-out.png",
    ⵠⲆⵠⵠᐃᐃᐃ: "img/vampire-lead-in.png",
    ⲆᐃΔᐃΔⵠᐃ: "img/vampire-lead-click.png",
    ⲆⲆΔⲆᐃⲆⵠ: "img/zombie-lead-out.png",
    Ⲇⵠⵠⵠⵠⵠⵠ: "img/zombie-lead-in.png",
    ⵠⲆⲆᐃⲆᐃΔ: "img/zombie-lead-click.png",
    ⲆⲆΔⲆⲆⵠⵠ: "img/day-level5.png",
    ⲆⵠⲆΔⲆᐃᐃ: "img/night-level5.png",
    ᐃⵠᐃΔᐃⲆΔ: "img/day-level10.png",
    Ⲇⵠᐃᐃᐃᐃᐃ: "img/night-level10.png",
    ⵠΔⵠᐃⵠΔᐃ: "img/day-level15.png",
    ΔᐃⲆΔⲆⵠⵠ: "img/night-level15.png",
    ΔΔᐃⲆᐃᐃᐃ: "img/day-level20.png",
    ⲆⵠΔᐃᐃⵠᐃ: "img/night-level20.png",
    Ⲇⵠⵠⵠᐃᐃᐃ: "img/day-level25.png",
    ⲆⵠΔⲆⲆⲆⲆ: "img/night-level25.png",
    ΔΔΔᐃΔⵠⲆ: "img/day-level30.png",
    ⲆᐃᐃⲆΔⲆΔ: "img/night-level30.png",
    ⲆᐃᐃⵠΔⵠΔ: "img/day-level35.png",
    ᐃⲆΔᐃΔᐃⵠ: "img/night-level35.png",
    ᐃⵠᐃΔⲆⲆⵠ: "img/day-level40.png",
    ΔⵠⲆΔⲆⵠᐃ: "img/night-level40.png",
    ᐃᐃⲆⲆⵠΔΔ: "img/day-level45.png",
    ⵠⵠΔⵠᐃⵠⵠ: "img/night-level45.png",
    ⵠⲆΔⵠⲆᐃΔ: "img/day-level50.png",
    ⲆΔᐃⵠΔⵠΔ: "img/night-level50.png",
    ⵠΔᐃⵠΔⲆᐃ: "img/day-level55.png",
    ⵠΔⵠΔΔⵠⵠ: "img/night-level55.png",
    ⵠⲆᐃΔⲆᐃⲆ: "img/day-level60.png",
    ⲆᐃᐃⵠⲆΔΔ: "img/night-level60.png",
    ᐃᐃΔⵠΔⲆΔ: "img/day-skin-devast0.png",
    ᐃΔᐃⲆᐃⵠᐃ: "img/night-skin-devast0.png",
    ⵠⲆΔⵠΔΔⵠ: "img/day-hand-devaster.png",
    ᐃⵠΔΔⲆΔⵠ: "img/night-hand-devaster.png",
    ᐃⵠⵠⲆᐃⵠΔ: "img/day-skin-star0.png",
    ⲆΔΔΔᐃⲆΔ: "img/night-skin-star0.png",
    ⲆⲆΔⲆᐃⵠΔ: "img/day-hand-star0.png",
    ᐃΔᐃΔⲆⲆΔ: "img/night-hand-star0.png",
    ⲆⲆΔᐃⵠⲆΔ: "img/day-vampire.png",
    ⵠⵠⲆᐃⵠⵠΔ: "img/night-vampire.png",
    ⲆΔᐃΔᐃΔᐃ: "img/day-hand-vampire.png",
    ⲆᐃΔⵠⵠⵠΔ: "img/night-hand-vampire.png",
    ᐃⵠⲆⲆⲆΔΔ: "img/day-zombie.png",
    ⵠⲆⵠⲆⲆⲆΔ: "img/night-zombie.png",
    ΔΔΔⲆⲆⲆᐃ: "img/day-hand-zombie.png",
    ⵠΔⵠⵠⲆᐃⵠ: "img/night-hand-zombie.png",
    ΔᐃⲆΔᐃⲆⲆ: "img/day-skin113.png",
    ⵠᐃΔΔⵠⲆⲆ: "img/night-skin113.png",
    ⵠΔΔⲆⵠΔⲆ: "img/day-hand-skin113.png",
    ⲆΔΔⲆᐃΔΔ: "img/night-hand-skin113.png",
    ΔⲆΔᐃⲆᐃⲆ: "img/day-skin0.png",
    ⵠⲆᐃᐃᐃⲆⲆ: "img/night-skin0.png",
    ΔⲆΔΔΔⵠⵠ: "img/day-skin1.png",
    ΔⲆΔᐃⲆᐃⵠ: "img/night-skin1.png",
    ᐃΔΔⲆⵠⲆΔ: "img/day-skin2.png",
    ⵠⲆᐃⲆⵠⵠⲆ: "img/night-skin2.png",
    ΔⲆᐃΔⵠⵠΔ: "img/day-skin3.png",
    ΔⲆᐃⵠΔⲆⵠ: "img/night-skin3.png",
    ΔⵠᐃΔΔⵠᐃ: "img/day-skin4.png",
    ⵠⲆⲆⲆⵠⵠᐃ: "img/night-skin4.png",
    ⵠΔⵠᐃᐃⵠⵠ: "img/day-skin5.png",
    ⵠᐃⵠⵠⲆΔⵠ: "img/night-skin5.png",
    ⵠᐃᐃⲆΔⲆⲆ: "img/day-skin6.png",
    ΔⲆⲆᐃΔΔΔ: "img/night-skin6.png",
    ΔΔᐃᐃΔᐃᐃ: "img/day-skin7.png",
    ⲆⲆⵠⲆᐃⵠΔ: "img/night-skin7.png",
    ᐃⵠⲆⲆᐃᐃⲆ: "img/day-skin8.png",
    ⲆΔⲆⵠⵠⲆⵠ: "img/night-skin8.png",
    ⲆΔΔᐃΔⵠⲆ: "img/day-skin9.png",
    ⵠᐃΔⲆΔΔᐃ: "img/night-skin9.png",
    ΔΔⲆⲆⵠⵠⲆ: "img/day-skin10.png",
    ⲆΔⵠⵠΔᐃⲆ: "img/night-skin10.png",
    ᐃⲆⵠⵠΔᐃΔ: "img/day-skin11.png",
    ᐃᐃΔⲆΔⵠⲆ: "img/night-skin11.png",
    ΔⲆⵠᐃᐃΔᐃ: "img/day-skin12.png",
    ᐃᐃⵠⵠΔΔΔ: "img/night-skin12.png",
    ΔⲆⲆⵠᐃᐃⵠ: "img/day-skin13.png",
    ⲆⵠⵠⵠᐃⲆᐃ: "img/night-skin13.png",
    Ⲇⵠⵠⵠᐃᐃⵠ: "img/day-skin14.png",
    ΔΔᐃᐃⵠᐃⵠ: "img/night-skin14.png",
    ⵠΔⲆᐃΔⵠⵠ: "img/day-skin15.png",
    ᐃΔⵠⵠΔΔΔ: "img/night-skin15.png",
    ⵠⲆⲆΔⲆⲆΔ: "img/day-skin16.png",
    ⲆΔᐃⵠⵠⵠΔ: "img/night-skin16.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/day-skin17.png",
    ΔΔᐃΔᐃⵠᐃ: "img/night-skin17.png",
    ᐃᐃΔⵠᐃΔΔ: "img/day-skin18.png",
    ᐃⲆⵠᐃⲆⵠⵠ: "img/night-skin18.png",
    ᐃⲆⲆⲆⵠᐃΔ: "img/day-skin19.png",
    ⵠΔⵠΔΔⲆᐃ: "img/night-skin19.png",
    ᐃⵠⲆⵠⵠΔΔ: "img/day-skin20.png",
    ᐃΔⲆⲆΔⲆⵠ: "img/night-skin20.png",
    ΔΔⵠΔᐃᐃⵠ: "img/day-skin21.png",
    ΔⵠⲆΔⲆΔⲆ: "img/night-skin21.png",
    ⲆⲆⲆⲆⵠⵠΔ: "img/day-skin22.png",
    ⵠᐃⵠⵠΔⲆΔ: "img/night-skin22.png",
    ⵠⵠᐃⵠΔⲆⲆ: "img/day-skin23.png",
    ᐃᐃⵠΔⲆΔⲆ: "img/night-skin23.png",
    ᐃᐃΔⵠⵠⲆⵠ: "img/day-skin24.png",
    ⵠΔΔΔᐃⵠⲆ: "img/night-skin24.png",
    ⵠⲆⵠⵠᐃⲆΔ: "img/day-skin25.png",
    ⲆΔΔΔⲆΔⲆ: "img/night-skin25.png",
    ⵠⵠⲆΔⲆⵠΔ: "img/day-skin26.png",
    ΔⵠΔᐃⵠᐃᐃ: "img/night-skin26.png",
    ⲆΔΔΔⵠⲆΔ: "img/day-skin27.png",
    ΔᐃⵠⵠⵠΔᐃ: "img/night-skin27.png",
    ΔᐃⵠⲆⵠΔΔ: "img/day-skin28.png",
    ⲆΔⲆᐃⵠⵠᐃ: "img/night-skin28.png",
    ⲆⲆᐃᐃⲆⵠⲆ: "img/day-skin29.png",
    ⵠⲆⲆⵠⲆΔⵠ: "img/night-skin29.png",
    ΔⲆⵠⵠᐃⵠⲆ: "img/day-skin30.png",
    ΔⵠⵠⵠΔⵠⲆ: "img/night-skin30.png",
    ⲆⲆᐃⵠⲆᐃⵠ: "img/day-skin31.png",
    ᐃᐃΔⵠᐃᐃⵠ: "img/night-skin31.png",
    ⵠⵠⲆⵠⵠⵠᐃ: "img/day-skin32.png",
    ⵠᐃᐃΔΔⵠΔ: "img/night-skin32.png",
    ⵠⵠᐃⵠⵠΔΔ: "img/day-skin33.png",
    ᐃⲆⲆΔⲆᐃⲆ: "img/night-skin33.png",
    ⲆⵠⵠⲆΔⵠⲆ: "img/day-skin34.png",
    ᐃᐃΔⲆⲆⵠⲆ: "img/night-skin34.png",
    ⵠΔⲆⵠᐃⵠᐃ: "img/day-skin35.png",
    ⲆᐃΔᐃⲆΔΔ: "img/night-skin35.png",
    ΔⵠⵠᐃΔᐃᐃ: "img/day-skin36.png",
    ⲆⲆΔⵠⲆⲆⲆ: "img/night-skin36.png",
    ⲆⵠⵠΔⲆᐃⵠ: "img/day-skin37.png",
    ⵠᐃⲆᐃᐃⲆᐃ: "img/night-skin37.png",
    ⲆᐃⲆⵠⲆΔΔ: "img/day-skin38.png",
    ⵠᐃⵠᐃΔΔⵠ: "img/night-skin38.png",
    ᐃᐃⲆΔΔΔᐃ: "img/day-skin39.png",
    ᐃΔᐃΔⵠᐃⵠ: "img/night-skin39.png",
    ᐃⲆⵠΔΔᐃᐃ: "img/day-skin40.png",
    ⲆΔΔᐃΔⲆⲆ: "img/night-skin40.png",
    ᐃᐃⵠⲆΔΔΔ: "img/day-skin41.png",
    ⵠΔⲆⲆΔΔⲆ: "img/night-skin41.png",
    ⵠⲆΔΔΔⵠᐃ: "img/day-skin42.png",
    ⵠⲆⵠⲆⵠᐃᐃ: "img/night-skin42.png",
    ΔⲆⲆⲆⲆᐃⵠ: "img/day-skin43.png",
    ΔᐃΔⵠⵠΔΔ: "img/night-skin43.png",
    ΔᐃᐃᐃᐃᐃΔ: "img/day-skin44.png",
    ᐃⲆⲆⲆΔΔᐃ: "img/night-skin44.png",
    ΔⵠᐃⵠΔⵠᐃ: "img/day-skin45.png",
    ᐃⵠᐃⲆⵠⲆⵠ: "img/night-skin45.png",
    ΔΔᐃⵠΔⲆⵠ: "img/day-skin46.png",
    ⲆᐃⲆΔΔⵠΔ: "img/night-skin46.png",
    ⵠⲆⲆΔΔᐃᐃ: "img/day-skin47.png",
    ᐃⵠᐃᐃΔΔⲆ: "img/night-skin47.png",
    ΔⲆⲆⵠΔΔⲆ: "img/day-skin48.png",
    ⵠΔⵠⵠⵠΔᐃ: "img/night-skin48.png",
    ⲆᐃΔⵠⲆⵠᐃ: "img/day-skin49.png",
    ΔⲆⲆⲆΔΔᐃ: "img/night-skin49.png",
    ⲆⲆⲆⵠⵠΔᐃ: "img/day-skin50.png",
    ᐃⲆΔⲆᐃᐃᐃ: "img/night-skin50.png",
    ⵠⵠⲆᐃⲆᐃΔ: "img/day-skin51.png",
    ⲆᐃᐃᐃᐃΔᐃ: "img/night-skin51.png",
    ⲆⲆⵠⲆΔⵠⵠ: "img/day-skin52.png",
    ⲆⵠⵠᐃᐃⲆⵠ: "img/night-skin52.png",
    ⵠⵠΔᐃᐃΔᐃ: "img/day-skin53.png",
    ⲆⲆΔⲆⲆΔᐃ: "img/night-skin53.png",
    ⵠᐃⲆᐃⲆᐃⲆ: "img/day-skin54.png",
    ΔⲆᐃΔᐃⵠⲆ: "img/night-skin54.png",
    ᐃⲆⵠⲆⲆΔᐃ: "img/day-skin55.png",
    ΔⲆᐃⵠᐃᐃⲆ: "img/night-skin55.png",
    ⲆⵠᐃΔⵠᐃΔ: "img/day-skin56.png",
    ⲆⵠⲆⲆⲆⵠΔ: "img/night-skin56.png",
    ⵠⵠᐃᐃᐃⲆΔ: "img/day-skin57.png",
    ⵠᐃⲆΔᐃΔΔ: "img/night-skin57.png",
    ᐃΔⲆΔΔΔᐃ: "img/day-skin58.png",
    ΔΔΔᐃᐃᐃᐃ: "img/night-skin58.png",
    ΔᐃⵠᐃᐃΔΔ: "img/day-skin59.png",
    ᐃⲆⵠⲆΔⵠⵠ: "img/night-skin59.png",
    ΔⲆⲆⲆΔⵠⲆ: "img/day-skin60.png",
    ⲆⲆⵠⵠⵠⵠⲆ: "img/night-skin60.png",
    ᐃⲆᐃⵠⵠᐃᐃ: "img/day-skin61.png",
    ΔⲆⲆΔΔⲆΔ: "img/night-skin61.png",
    ᐃⲆⲆΔᐃⲆΔ: "img/day-skin62.png",
    ⲆᐃⵠΔᐃᐃΔ: "img/night-skin62.png",
    ⵠᐃᐃᐃΔᐃΔ: "img/day-skin63.png",
    ᐃᐃΔᐃΔᐃΔ: "img/night-skin63.png",
    ⲆⲆΔΔⲆⵠΔ: "img/day-skin64.png",
    ⲆΔᐃᐃⵠⵠⵠ: "img/night-skin64.png",
    ⲆⲆⲆΔᐃᐃⵠ: "img/day-skin65.png",
    ᐃⲆᐃΔⲆᐃᐃ: "img/night-skin65.png",
    ᐃⲆⲆⲆⵠⵠⲆ: "img/day-skin66.png",
    ΔᐃⵠᐃⵠⲆᐃ: "img/night-skin66.png",
    ΔⵠⲆΔⵠΔⲆ: "img/day-skin67.png",
    ⲆⵠⲆΔΔᐃⲆ: "img/night-skin67.png",
    ⲆΔⵠΔᐃᐃᐃ: "img/day-skin68.png",
    ᐃΔⲆᐃⵠⵠⲆ: "img/night-skin68.png",
    ᐃⲆΔⲆⵠⵠⵠ: "img/day-skin69.png",
    ᐃⲆⵠⵠⵠΔΔ: "img/night-skin69.png",
    ⲆⲆⵠΔⲆΔⵠ: "img/day-skin70.png",
    ᐃⵠⵠⵠⵠⵠⲆ: "img/night-skin70.png",
    ⲆⵠⵠⲆΔΔⲆ: "img/day-skin71.png",
    ⵠᐃⲆᐃⵠⵠᐃ: "img/night-skin71.png",
    ᐃⲆᐃᐃᐃΔⲆ: "img/day-skin72.png",
    ΔⲆⵠⲆⵠⵠⵠ: "img/night-skin72.png",
    ᐃⵠⲆᐃⵠⵠΔ: "img/day-skin73.png",
    ΔⲆⵠᐃⲆⵠᐃ: "img/night-skin73.png",
    ⵠⵠⵠⲆᐃⵠΔ: "img/day-skin74.png",
    ⲆⲆⲆⵠᐃᐃⵠ: "img/night-skin74.png",
    ΔΔⵠⲆΔᐃᐃ: "img/day-skin75.png",
    ΔⵠΔⵠᐃΔⲆ: "img/night-skin75.png",
    ᐃⵠΔΔᐃᐃΔ: "img/day-skin76.png",
    ᐃⲆᐃΔⵠⵠᐃ: "img/night-skin76.png",
    ⲆΔᐃᐃⵠΔⲆ: "img/day-skin77.png",
    ⲆⵠΔΔⲆⲆᐃ: "img/night-skin77.png",
    ᐃⲆΔⲆⲆᐃⲆ: "img/day-skin78.png",
    ⵠⵠᐃⲆΔΔᐃ: "img/night-skin78.png",
    ⲆΔⲆⵠΔⲆⲆ: "img/day-skin79.png",
    ΔⲆⲆⵠᐃᐃᐃ: "img/night-skin79.png",
    ᐃᐃⵠΔⲆΔⵠ: "img/day-skin80.png",
    ⵠΔΔᐃΔᐃΔ: "img/night-skin80.png",
    ⲆⲆΔᐃⵠᐃΔ: "img/day-skin81.png",
    ΔⲆᐃⲆⲆⵠⲆ: "img/night-skin81.png",
    ᐃᐃΔⲆᐃΔᐃ: "img/day-skin82.png",
    Δⵠⵠⵠᐃᐃᐃ: "img/night-skin82.png",
    ⵠⵠᐃᐃΔΔⲆ: "img/day-skin83.png",
    ᐃΔᐃⵠΔⲆⲆ: "img/night-skin83.png",
    ᐃⵠΔⵠΔⵠΔ: "img/day-skin84.png",
    ⲆᐃΔⲆΔᐃⵠ: "img/night-skin84.png",
    ᐃⵠΔΔᐃᐃᐃ: "img/day-skin85.png",
    ᐃⵠⵠⲆᐃᐃᐃ: "img/night-skin85.png",
    ᐃΔᐃⲆⵠΔⵠ: "img/day-skin86.png",
    ⲆⲆⲆⲆᐃⵠⲆ: "img/night-skin86.png",
    ⲆΔⵠΔΔⲆᐃ: "img/day-skin87.png",
    ⵠⵠᐃΔᐃⲆΔ: "img/night-skin87.png",
    ΔᐃⵠᐃⲆⲆⲆ: "img/day-skin88.png",
    ᐃⲆᐃᐃⲆΔΔ: "img/night-skin88.png",
    ᐃΔΔⲆⲆᐃᐃ: "img/day-skin89.png",
    ΔᐃⲆᐃⵠᐃΔ: "img/night-skin89.png",
    ⲆᐃⵠⲆᐃΔⲆ: "img/day-skin90.png",
    ⲆΔΔᐃⲆᐃᐃ: "img/night-skin90.png",
    ⲆⲆⲆᐃⲆⵠᐃ: "img/day-skin91.png",
    ΔⵠΔΔⲆⲆᐃ: "img/night-skin91.png",
    ΔᐃⲆⲆᐃᐃⲆ: "img/day-skin92.png",
    ᐃⵠⲆΔΔⵠⵠ: "img/night-skin92.png",
    ΔⵠᐃⲆⲆᐃᐃ: "img/day-skin93.png",
    ΔᐃΔⵠΔⵠΔ: "img/night-skin93.png",
    ⵠΔΔΔᐃⵠΔ: "img/day-skin94.png",
    ΔⲆΔΔⲆΔⲆ: "img/night-skin94.png",
    ⵠᐃⵠⵠⵠⵠⲆ: "img/day-skin95.png",
    ⲆᐃⵠΔᐃⲆⲆ: "img/night-skin95.png",
    ΔΔⵠᐃⵠⵠΔ: "img/day-skin96.png",
    ⵠΔᐃΔⲆᐃΔ: "img/night-skin96.png",
    ᐃᐃⲆⵠⲆΔᐃ: "img/day-skin97.png",
    ⲆⵠᐃⲆⵠΔΔ: "img/night-skin97.png",
    ⵠⵠⲆⲆΔᐃⵠ: "img/day-skin98.png",
    ΔᐃⵠⵠΔⵠⲆ: "img/night-skin98.png",
    ΔΔⵠⲆⲆᐃⵠ: "img/day-skin99.png",
    ΔΔᐃΔΔⲆⵠ: "img/night-skin99.png",
    ᐃΔⲆⵠⲆⲆⵠ: "img/day-skin100.png",
    ΔⵠⵠᐃⲆΔᐃ: "img/night-skin100.png",
    ⵠΔⵠⲆⵠⵠᐃ: "img/day-skin101.png",
    ⵠᐃΔᐃⵠⲆⲆ: "img/night-skin101.png",
    ⲆⵠⵠⲆᐃⵠⵠ: "img/day-skin102.png",
    ΔᐃⲆⵠᐃⲆΔ: "img/night-skin102.png",
    ΔΔᐃⵠⲆΔⵠ: "img/day-skin103.png",
    ⲆⵠᐃⲆᐃΔⲆ: "img/night-skin103.png",
    ⲆΔⵠⲆᐃⲆⲆ: "img/day-skin104.png",
    ΔⵠⲆⲆᐃΔⲆ: "img/night-skin104.png",
    ⵠΔΔᐃⲆΔⲆ: "img/day-skin105.png",
    ᐃⵠⵠᐃⵠⵠⵠ: "img/night-skin105.png",
    ⲆᐃᐃⲆⵠΔΔ: "img/day-skin106.png",
    ⲆⵠⵠΔⵠⲆᐃ: "img/night-skin106.png",
    ΔⵠⵠⵠΔⵠᐃ: "img/day-skin107.png",
    ΔⲆⲆⲆⲆΔⵠ: "img/night-skin107.png",
    ⲆᐃᐃᐃΔΔΔ: "img/day-skin108.png",
    ⲆᐃΔᐃᐃΔΔ: "img/night-skin108.png",
    ⵠΔΔΔⲆᐃΔ: "img/day-skin109.png",
    ⵠΔⵠᐃΔᐃⲆ: "img/night-skin109.png",
    ⵠᐃΔⵠⵠⵠⵠ: "img/day-skin110.png",
    ⵠᐃⵠⲆΔⵠΔ: "img/night-skin110.png",
    ΔⵠⵠΔⵠⲆᐃ: "img/day-skin111.png",
    ⵠⲆΔⵠⲆΔᐃ: "img/night-skin111.png",
    ⵠⵠⵠᐃᐃⵠᐃ: "img/day-skin112.png",
    ⵠΔⵠᐃᐃⲆΔ: "img/night-skin112.png",
    ΔΔᐃᐃⵠⲆΔᐃⵠ: "img/day-skin113.png",
    ⲆᐃᐃⲆᐃᐃⲆᐃΔ: "img/night-skin113.png",
    ⲆᐃⲆᐃⵠⵠⲆ: "img/day-skin114.png",
    ⲆⵠⲆᐃᐃⵠΔ: "img/night-skin114.png",
    ΔᐃⵠⲆᐃⵠᐃ: "img/day-skin115.png",
    ⲆΔΔᐃᐃⲆⲆ: "img/night-skin115.png",
    ΔᐃⵠⲆᐃᐃᐃ: "img/day-skin116.png",
    ⲆⵠᐃᐃᐃⲆΔ: "img/night-skin116.png",
    ᐃᐃᐃᐃⲆⵠⵠ: "img/day-skin117.png",
    ⵠⲆᐃᐃⲆⵠⵠ: "img/night-skin117.png",
    ⲆᐃᐃΔⵠⲆΔ: "img/day-skin118.png",
    ΔᐃᐃᐃΔⵠΔ: "img/night-skin118.png",
    ⲆⲆᐃⲆⵠᐃⵠ: "img/day-skin119.png",
    Ⲇⵠᐃᐃᐃⵠⵠ: "img/night-skin119.png",
    ⲆⲆΔᐃⲆᐃⵠ: "img/day-skin120.png",
    ⵠᐃΔΔΔΔⲆ: "img/night-skin120.png",
    ⲆⲆⵠⵠΔⲆΔ: "img/day-skin121.png",
    ⵠᐃᐃⲆΔᐃᐃ: "img/night-skin121.png",
    ⵠᐃᐃᐃⵠⵠΔ: "img/day-skin122.png",
    ⵠΔΔᐃΔⲆΔ: "img/night-skin122.png",
    ᐃⵠⲆⲆᐃΔᐃ: "img/day-skin123.png",
    ⲆⲆⲆⵠⲆΔᐃ: "img/night-skin123.png",
    ⲆⲆⵠᐃΔⵠⵠ: "img/day-skin124.png",
    ΔᐃⲆᐃᐃᐃᐃ: "img/night-skin124.png",
    ᐃⵠⲆⲆΔⵠᐃ: "img/day-skin125.png",
    ΔΔⲆⵠᐃⵠⵠ: "img/night-skin125.png",
    ⲆᐃΔᐃΔΔᐃ: "img/day-skin126.png",
    ᐃⵠΔⲆⲆⲆΔ: "img/night-skin126.png",
    ⲆⲆΔΔᐃⵠΔ: "img/day-skin127.png",
    ⵠᐃⲆⲆⲆⲆⵠ: "img/night-skin127.png",
    ⵠⵠᐃᐃΔⵠΔ: "img/day-skin128.png",
    ⲆᐃⵠⵠⲆᐃⵠ: "img/night-skin128.png",
    ᐃΔΔⵠΔⲆΔ: "img/day-skin129.png",
    ⲆΔⵠⵠΔⵠⲆ: "img/night-skin129.png",
    ᐃᐃⵠᐃⲆΔᐃ: "img/day-skin130-1.png",
    ⵠᐃⵠⵠⲆΔΔ: "img/night-skin130-1.png",
    ΔᐃⲆᐃᐃᐃⲆ: "img/day-skin131.png",
    ᐃⵠΔⵠΔⲆΔ: "img/night-skin131.png",
    ᐃΔΔᐃΔΔⲆ: "img/day-skin132.png",
    ΔΔⲆⵠᐃΔᐃ: "img/night-skin132.png",
    ⵠΔΔⵠⵠᐃⵠ: "img/day-skin133.png",
    ΔⵠΔᐃⲆⲆᐃ: "img/night-skin133.png",
    ᐃΔΔᐃΔⲆΔ: "img/day-skin134.png",
    ᐃⲆⵠΔⲆⲆΔ: "img/night-skin134.png",
    Δᐃⵠᐃᐃᐃⵠ: "img/day-skin135.png",
    ΔⲆΔΔⲆΔΔ: "img/night-skin135.png",
    ⵠᐃᐃⲆⲆⵠΔ: "img/day-skin136.png",
    ΔⵠΔᐃⲆⵠⵠ: "img/night-skin136.png",
    ΔⲆΔⲆΔΔΔ: "img/day-skin137.png",
    ⵠΔⵠΔⵠᐃΔ: "img/night-skin137.png",
    ᐃᐃΔᐃΔⵠᐃ: "img/day-skin138.png",
    ⵠΔᐃΔᐃⲆΔ: "img/night-skin138.png",
    ΔⵠⲆⵠᐃⵠⲆ: "img/day-skin139.png",
    ᐃⲆᐃⵠΔⲆⵠ: "img/night-skin139.png",
    ⵠⵠᐃᐃΔΔᐃ: "img/day-skin140.png",
    ⵠⵠᐃᐃⵠⵠⲆ: "img/night-skin140.png",
    ᐃⲆⲆᐃᐃΔⲆ: "img/day-skin141.png",
    Ⲇᐃⵠⵠⵠᐃᐃ: "img/night-skin141.png",
    ⲆⵠⵠΔΔⲆⵠ: "img/day-skin142.png",
    ΔᐃᐃⵠΔⲆᐃ: "img/night-skin142.png",
    ᐃⲆΔⵠⵠⲆᐃ: "img/day-skin143.png",
    ᐃⵠΔⵠⲆΔⲆ: "img/night-skin143.png",
    ΔⲆⵠⵠⲆΔᐃ: "img/day-skin144.png",
    ⵠΔΔΔᐃΔⵠ: "img/night-skin144.png",
    ΔΔⵠⲆⵠⵠⵠ: "img/day-skin145.png",
    ⲆⲆⲆᐃΔΔᐃ: "img/night-skin145.png",
    ⵠⵠΔⲆᐃⵠᐃ: "img/day-skin146.png",
    ⵠΔᐃΔⵠᐃⲆ: "img/night-skin146.png",
    ᐃᐃⲆᐃΔΔᐃ: "img/day-skin147.png",
    ⵠⵠᐃᐃⵠᐃⵠ: "img/night-skin147.png",
    ᐃⲆᐃⵠΔᐃⲆ: "img/day-skin148.png",
    ᐃⵠΔⵠⲆⵠΔ: "img/night-skin148.png",
    ⲆΔᐃⲆⵠⵠⲆ: "img/day-skin149.png",
    ⲆᐃⵠⵠᐃⵠΔ: "img/night-skin149.png",
    ᐃⵠⲆᐃΔΔᐃ: "img/day-skin150.png",
    ΔΔⵠᐃⵠⲆΔ: "img/night-skin150.png",
    ᐃᐃⲆⵠᐃΔᐃ: "img/day-skin151.png",
    ⵠᐃⲆⵠⲆΔⲆ: "img/night-skin151.png",
    ⵠᐃⲆⵠⵠⵠⲆ: "img/day-skin152.png",
    ⵠⵠⵠⲆᐃⲆᐃ: "img/night-skin152.png",
    ᐃⲆᐃⵠⲆⲆΔ: "img/day-skin153.png",
    ⵠⲆΔΔⲆΔⵠ: "img/night-skin153.png",
    ᐃᐃᐃⵠᐃᐃⲆ: "img/day-skin154.png",
    ⵠᐃΔⵠᐃⵠΔ: "img/night-skin154.png",
    ⲆⵠΔⵠΔΔΔ: "img/day-skin155.png",
    ΔΔᐃᐃΔⵠΔ: "img/night-skin155.png",
    ⲆΔΔᐃⲆΔⵠ: "img/day-skin156.png",
    ᐃΔⵠᐃᐃᐃⲆ: "img/night-skin156.png",
    ΔᐃΔᐃᐃⲆᐃ: "img/day-skin157.png",
    ⵠⲆΔⲆΔᐃⲆ: "img/night-skin157.png",
    ᐃΔᐃᐃⲆⲆᐃ: "img/day-skin158.png",
    ΔΔᐃΔᐃᐃⲆ: "img/night-skin158.png",
    ᐃᐃΔΔᐃΔⵠ: "img/day-skin159.png",
    ᐃΔΔΔⲆⲆⲆ: "img/night-skin159.png",
    ⲆᐃⲆⲆΔΔⵠ: "img/day-skin160.png",
    ΔΔᐃΔⵠⵠⵠ: "img/night-skin160.png",
    ΔᐃⲆᐃΔΔΔ: "img/day-skin161.png",
    ᐃⲆΔⲆᐃⵠΔ: "img/night-skin161.png",
    ΔⵠΔᐃΔᐃΔ: "img/day-skin162.png",
    ⲆᐃⵠⵠⲆⵠᐃ: "img/night-skin162.png",
    ⵠΔᐃⵠᐃⵠΔ: "img/day-skin163.png",
    ᐃⲆⲆᐃⵠᐃⲆ: "img/night-skin163.png",
    ⲆΔᐃⵠᐃⲆΔ: "img/day-skin164.png",
    ⲆⲆⵠᐃΔᐃⲆ: "img/night-skin164.png",
    ⵠᐃⲆᐃⲆⲆᐃ: "img/day-skin165.png",
    ⵠⵠᐃΔⵠΔᐃ: "img/night-skin165.png",
    ⵠⵠᐃΔⵠΔⵠ: "img/day-skin166.png",
    ᐃΔΔⵠΔᐃⵠ: "img/night-skin166.png",
    ⵠⵠᐃᐃΔⵠⵠ: "img/day-skin167.png",
    ΔⲆⵠΔᐃΔⵠ: "img/night-skin167.png",
    ⲆⲆᐃⲆΔⲆΔ: "img/day-skin168.png",
    ᐃᐃΔⵠⵠⲆⲆ: "img/night-skin168.png",
    ⲆⲆⲆⲆⲆⵠΔ: "img/day-skin169.png",
    ⲆⲆⲆᐃⵠⵠᐃ: "img/night-skin169.png",
    ΔΔⵠⲆⵠΔΔ: "img/day-skin170.png",
    ᐃⵠΔⲆᐃⲆᐃ: "img/night-skin170.png",
    ⵠⵠᐃΔΔᐃΔ: "img/day-skin171.png",
    ⲆᐃᐃΔΔⲆΔ: "img/night-skin171.png",
    ⵠⵠΔⲆΔΔⵠ: "img/day-skin172.png",
    ΔⵠᐃΔᐃΔⵠ: "img/night-skin172.png",
    ⵠΔᐃⵠΔᐃΔ: "img/day-skin173.png",
    ᐃᐃⵠᐃⵠⵠⵠ: "img/night-skin173.png",
    ⵠᐃⲆⲆᐃⵠᐃ: "img/day-skin174.png",
    ⲆΔⲆΔⲆΔΔ: "img/night-skin174.png",
    ᐃⵠΔⵠⵠⵠΔ: "img/day-skin175.png",
    ⵠⲆΔᐃᐃΔΔ: "img/night-skin175.png",
    ⲆⵠΔⲆΔⲆΔ: "img/day-skin176.png",
    ΔᐃⵠᐃΔⲆⲆ: "img/night-skin176.png",
    ΔⲆΔⲆⲆΔⲆ: "img/day-skin177.png",
    ΔⵠΔⲆᐃⲆΔ: "img/night-skin177.png",
    ᐃΔⲆᐃΔⵠⲆ: "img/day-skin178.png",
    ΔΔⲆⵠⲆⲆΔ: "img/night-skin178.png",
    ΔᐃᐃⵠⲆᐃᐃ: "img/day-skin179.png",
    ⵠᐃⵠΔⲆᐃⲆ: "img/night-skin179.png",
    ΔⵠⲆᐃⵠⲆⵠ: "img/day-skin180.png",
    ⲆΔⲆΔⲆΔᐃ: "img/night-skin180.png",
    ⲆⲆⵠΔⲆⵠΔ: "img/day-skin181.png",
    ⵠΔΔⵠΔᐃⵠ: "img/night-skin181.png",
    ΔⲆⲆⵠⲆⲆⲆ: "img/day-skin182.png",
    ΔⲆⲆᐃⲆΔⲆ: "img/night-skin182.png",
    ⵠⲆⲆΔΔⵠᐃ: "img/day-skin183.png",
    ⵠⲆᐃⲆⵠᐃᐃ: "img/night-skin183.png",
    ⲆᐃΔⲆΔΔⵠ: "img/day-skin184.png",
    ⲆⲆⵠⵠⵠΔⲆ: "img/night-skin184.png",
    ΔΔⲆΔΔΔᐃ: "img/day-skin185.png",
    ⵠⲆΔΔⲆⲆⲆ: "img/night-skin185.png",
    ΔᐃᐃΔΔⵠᐃ: "img/day-skin186.png",
    ⵠΔΔⲆⵠⵠⵠ: "img/night-skin186.png",
    ΔⵠΔᐃᐃⵠΔ: "img/day-skin187.png",
    ᐃⵠⵠᐃⵠⵠⲆ: "img/night-skin187.png",
    ΔⵠᐃⲆⲆⵠᐃ: "img/day-skin188.png",
    ⵠΔΔⵠⵠⵠⵠ: "img/night-skin188.png",
    ᐃᐃᐃᐃΔΔⵠ: "img/day-skin189.png",
    ΔⲆᐃⲆⲆⵠᐃ: "img/night-skin189.png",
    ⵠᐃⲆⵠⲆⵠΔ: "img/day-skin190.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/night-skin190.png",
    ⵠΔᐃⲆᐃΔΔ: "img/day-skin191.png",
    ⲆⵠⵠⵠᐃⵠΔ: "img/night-skin191.png",
    ΔΔᐃᐃⵠⵠᐃ: "img/day-skin192.png",
    ᐃⵠᐃΔⲆⵠⲆ: "img/night-skin192.png",
    ΔⵠᐃⲆᐃΔᐃ: "img/day-skin193.png",
    ΔⲆⵠΔⵠⲆⵠ: "img/night-skin193.png",
    ΔᐃΔⵠⲆᐃⵠ: "img/day-skin194.png",
    ᐃᐃᐃΔΔⲆⵠ: "img/night-skin194.png",
    ᐃⲆΔᐃᐃᐃⵠ: "img/day-skin195.png",
    ⵠⵠᐃΔⵠⲆⲆ: "img/night-skin195.png",
    ⲆᐃⵠᐃⲆⲆⲆ: "img/day-skin196.png",
    ΔⵠⲆᐃᐃΔΔ: "img/night-skin196.png",
    ᐃΔΔᐃᐃᐃΔ: "img/day-skin197.png",
    ⲆΔⵠⵠⵠΔⵠ: "img/night-skin197.png",
    ΔⵠΔᐃⲆΔᐃ: "img/day-skin198.png",
    ⵠΔᐃⵠⲆⲆⵠ: "img/night-skin198.png",
    ᐃᐃⵠΔᐃⲆᐃ: "img/day-skin199.png",
    ⲆⵠⲆΔᐃⲆⵠ: "img/night-skin199.png",
    ⲆᐃΔᐃⵠᐃⲆ: "img/day-skin200.png",
    ᐃⵠⲆΔⵠΔΔ: "img/night-skin200.png",
    ⵠⵠⵠᐃⵠᐃᐃ: "img/day-skin201.png",
    ᐃⵠⵠᐃⲆⲆΔ: "img/night-skin201.png",
    ⲆΔΔΔᐃⵠⲆ: "img/day-skin202.png",
    ᐃΔⲆΔᐃⲆᐃ: "img/night-skin202.png",
    ᐃⲆᐃΔᐃⵠⲆ: "img/day-skin203.png",
    ΔᐃΔⲆⲆΔΔ: "img/night-skin203.png",
    ⲆΔⲆΔᐃΔΔ: "img/day-skin204.png",
    ⲆᐃᐃΔᐃΔⲆ: "img/night-skin204.png",
    ⲆⵠⲆⵠⵠⲆⲆ: "img/day-skin205.png",
    ⲆᐃᐃⲆᐃⲆⲆ: "img/night-skin205.png",
    ᐃⵠⲆΔΔⲆⲆ: "img/day-skin206.png",
    ⲆⵠⲆᐃⵠᐃᐃ: "img/night-skin206.png",
    ΔⵠⵠᐃΔᐃΔ: "img/day-skin207.png",
    ΔᐃⵠᐃⲆΔⲆ: "img/night-skin207.png",
    ᐃᐃᐃⲆᐃⲆᐃ: "img/day-skin208.png",
    ΔⲆΔᐃᐃⵠᐃ: "img/night-skin208.png",
    ΔᐃΔΔⵠⵠΔ: "img/day-skin209.png",
    ᐃⵠⲆⵠΔᐃΔ: "img/night-skin209.png",
    ᐃᐃΔⵠⵠΔᐃ: "img/day-skin210.png",
    ᐃⲆⲆⵠⲆᐃⲆ: "img/night-skin210.png",
    ΔΔⲆⵠⵠⲆᐃ: "img/day-skin211.png",
    ⵠⵠᐃΔΔⲆⵠ: "img/night-skin211.png",
    ΔⵠᐃⲆⵠⲆΔ: "img/day-skin212.png",
    ⵠΔᐃⵠⵠⲆΔ: "img/night-skin212.png",
    ΔΔⲆⵠΔⵠΔ: "img/day-skin213.png",
    ⵠΔᐃⵠΔⵠΔ: "img/night-skin213.png",
    ⲆⲆⵠⵠⵠⵠΔ: "img/day-skin214.png",
    ⲆᐃΔⵠⲆΔᐃ: "img/night-skin214.png",
    ΔⲆΔⵠⲆᐃⵠ: "img/day-skin215.png",
    ⲆΔⵠᐃΔⲆᐃ: "img/night-skin215.png",
    ᐃΔᐃⲆΔΔⵠ: "img/day-skin216.png",
    ⵠΔⲆⵠᐃΔⲆ: "img/night-skin216.png",
    ᐃΔⲆᐃⵠᐃⲆ: "img/day-skin217.png",
    ⲆⵠⲆⵠᐃΔΔ: "img/night-skin217.png",
    ΔΔⲆᐃⲆᐃⲆ: "img/day-skin218.png",
    ΔⵠᐃⵠᐃⲆᐃ: "img/night-skin218.png",
    ⵠΔᐃⲆⵠⵠᐃ: "img/day-skin219.png",
    ᐃⲆΔᐃⲆΔΔ: "img/night-skin219.png",
    ΔⲆᐃᐃᐃⲆᐃ: "img/day-skin220.png",
    ᐃᐃΔⵠᐃⲆᐃ: "img/night-skin220.png",
    ⵠⲆᐃⵠΔⲆⲆ: "img/day-skin221.png",
    ᐃᐃⵠⵠⵠΔⵠ: "img/night-skin221.png",
    ΔⲆⲆⵠⵠⵠΔ: "img/day-skin222.png",
    ⲆᐃⲆⵠⲆΔⲆ: "img/night-skin222.png",
    ⲆⲆⵠⵠᐃΔΔ: "img/day-skin223.png",
    ΔΔⲆᐃᐃᐃᐃ: "img/night-skin223.png",
    ⲆⵠⲆⵠΔᐃⲆ: "img/day-skin224.png",
    ⲆⵠⵠΔΔᐃⵠ: "img/night-skin224.png",
    ⵠⲆⲆΔⵠⵠΔ: "img/day-skin225.png",
    ᐃⲆⵠᐃΔⵠΔ: "img/night-skin225.png",
    ⲆΔⲆᐃⵠⵠΔ: "img/day-skin226.png",
    ᐃᐃⲆⲆΔᐃᐃ: "img/night-skin226.png",
    ⲆⵠⵠⵠⲆᐃᐃ: "img/day-skin227.png",
    ᐃᐃᐃᐃᐃⵠᐃ: "img/night-skin227.png",
    ⲆⵠᐃⵠᐃᐃΔ: "img/day-skin228.png",
    ᐃᐃᐃᐃᐃⲆᐃ: "img/night-skin228.png",
    ⵠΔⵠⵠᐃⵠᐃ: "img/day-skin229.png",
    ΔΔⵠΔᐃᐃΔ: "img/night-skin229.png",
    ΔΔⲆⵠⲆᐃⲆ: "img/day-skin230.png",
    ⲆᐃΔΔᐃⲆᐃ: "img/night-skin230.png",
    ᐃΔⲆΔⲆᐃⲆ: "img/day-skin231.png",
    ᐃⵠΔΔΔΔΔ: "img/night-skin231.png",
    ΔᐃᐃⲆᐃⵠᐃ: "img/day-skin232.png",
    ⵠᐃᐃⲆᐃⲆⲆ: "img/night-skin232.png",
    ᐃΔᐃⵠᐃⲆⲆ: "img/day-skin233.png",
    ⲆΔΔⲆᐃⵠΔ: "img/night-skin233.png",
    ΔⵠⲆⵠΔⲆΔ: "img/day-skin234.png",
    ΔⵠΔᐃⲆᐃⲆ: "img/night-skin234.png",
    ᐃΔᐃⵠΔΔᐃ: "img/day-skin235.png",
    ⲆᐃΔᐃΔᐃᐃ: "img/night-skin235.png",
    ΔⵠⵠΔᐃᐃⵠ: "img/day-skin236.png",
    ⵠⵠΔⲆⲆΔΔ: "img/night-skin236.png",
    ⲆⵠⵠⲆⵠᐃᐃ: "img/day-skin237.png",
    ΔⲆΔⲆᐃⵠᐃ: "img/night-skin237.png",
    ᐃᐃΔΔᐃΔᐃ: "img/day-skin238.png",
    ᐃⵠⲆⲆⲆᐃⲆ: "img/night-skin238.png",
    ΔΔΔΔᐃΔⵠ: "img/day-skin239.png",
    ⵠᐃⲆΔΔΔᐃ: "img/night-skin239.png",
    ΔΔⵠᐃⲆΔᐃ: "img/day-skin240.png",
    ΔΔΔⲆⵠⲆⵠ: "img/night-skin240.png",
    ΔⵠΔⲆᐃⵠΔ: "img/day-skin241.png",
    ᐃᐃΔΔΔⲆᐃ: "img/night-skin241.png",
    ⵠⵠΔᐃⵠᐃᐃ: "img/day-skin242.png",
    ᐃᐃⲆⵠΔΔᐃ: "img/night-skin242.png",
    ⲆⵠⲆⲆΔⵠⲆ: "img/day-skin243.png",
    ΔⲆΔᐃⲆⵠⵠ: "img/night-skin243.png",
    ΔΔⵠᐃΔⵠⵠ: "img/day-skin244.png",
    ⵠⲆΔⵠᐃᐃⲆ: "img/night-skin244.png",
    ΔΔΔⵠΔⲆⵠ: "img/day-skin245.png",
    ⵠᐃⵠΔⵠⵠᐃ: "img/night-skin245.png",
    ⲆⵠⵠⵠΔΔⲆ: "img/day-skin246.png",
    ⵠⵠⵠⲆᐃⵠⵠ: "img/night-skin246.png",
    ⲆⲆᐃᐃⵠΔⵠ: "img/day-hand-skin0.png",
    ΔΔⵠⲆᐃⵠᐃ: "img/night-hand-skin0.png",
    ⲆⵠⵠⵠⵠⲆⲆ: "img/day-hand-skin1.png",
    ᐃᐃΔΔⲆⵠⲆ: "img/night-hand-skin1.png",
    ΔⵠⵠⵠΔⲆᐃ: "img/day-hand-skin2.png",
    ⵠⲆᐃᐃⵠᐃΔ: "img/night-hand-skin2.png",
    ΔΔΔᐃⲆⵠᐃ: "img/day-hand-skin3.png",
    ᐃᐃⵠΔΔⲆΔ: "img/night-hand-skin3.png",
    ⵠᐃⵠΔΔᐃⲆ: "img/day-hand-skin4.png",
    ᐃⲆΔⲆⵠᐃⲆ: "img/night-hand-skin4.png",
    ⲆⲆᐃᐃⵠⲆⲆ: "img/day-hand-skin5.png",
    ΔⵠⵠᐃⵠⲆⲆ: "img/night-hand-skin5.png",
    ⲆᐃᐃⲆⲆΔⲆ: "img/day-hand-skin6.png",
    ⵠΔⵠⵠⲆΔⵠᐃᐃ: "img/night-hand-skin6.png",
    ᐃⵠⵠⵠⲆᐃⲆ: "img/day-hand-skin6.png",
    ΔⲆⲆᐃⲆⵠⵠ: "img/night-hand-skin6.png",
    ΔⵠᐃⵠⲆΔⲆ: "img/day-hand-skin8.png",
    ᐃᐃᐃΔⵠⵠᐃ: "img/night-hand-skin8.png",
    ᐃⲆⲆⲆⵠⲆⵠ: "img/day-hand-skin9.png",
    ⵠΔⲆⲆⲆⲆᐃ: "img/night-hand-skin9.png",
    ⲆⲆᐃᐃΔⵠΔ: "img/day-hand-skin10.png",
    ᐃⲆΔⵠⵠⲆⵠ: "img/night-hand-skin10.png",
    ⲆΔᐃⵠⲆⲆⵠ: "img/day-hand-skin11.png",
    ⲆⵠⲆΔᐃᐃⵠ: "img/night-hand-skin11.png",
    ΔΔᐃᐃᐃΔΔ: "img/day-hand-skin12.png",
    ΔⲆΔᐃΔⲆᐃ: "img/night-hand-skin12.png",
    ΔᐃᐃⵠⵠΔⵠ: "img/day-hand-skin13.png",
    ᐃⲆⲆⵠⲆⲆⲆ: "img/night-hand-skin13.png",
    ⲆⲆⵠⵠΔΔᐃ: "img/day-hand-skin14.png",
    ᐃⵠⵠⵠⲆᐃᐃ: "img/night-hand-skin14.png",
    ⵠⵠᐃΔᐃⵠⲆ: "img/day-hand-skin15.png",
    ⲆⵠⵠⲆΔⵠΔ: "img/night-hand-skin15.png",
    ᐃᐃⲆΔᐃΔΔ: "img/day-hand-skin16.png",
    ᐃΔⲆⵠᐃⲆⲆ: "img/night-hand-skin16.png",
    ΔⵠᐃⲆᐃΔⵠ: "img/day-hand-skin17.png",
    ΔΔᐃⵠᐃᐃⵠ: "img/night-hand-skin17.png",
    ⵠⲆᐃᐃΔⲆⲆ: "img/day-hand-skin18.png",
    ⵠᐃⵠΔⲆᐃᐃ: "img/night-hand-skin18.png",
    ⲆⲆΔΔⵠᐃⵠ: "img/day-hand-skin19.png",
    ⵠⵠᐃΔΔᐃⲆ: "img/night-hand-skin19.png",
    ᐃⵠⲆⵠΔᐃⲆ: "img/day-hand-skin20.png",
    ⲆⲆΔⲆᐃⵠⲆ: "img/night-hand-skin20.png",
    ΔΔⲆⲆΔⵠΔ: "img/day-hand-skin21.png",
    ⲆΔⲆⵠⲆᐃᐃ: "img/night-hand-skin21.png",
    ᐃⵠᐃⵠΔⲆⲆ: "img/day-hand-skin22.png",
    ΔⵠⵠⵠⲆΔΔ: "img/night-hand-skin22.png",
    ⵠⲆΔΔⲆΔΔ: "img/day-hand-skin23.png",
    ᐃⵠΔᐃΔⲆΔ: "img/night-hand-skin23.png",
    ⲆᐃⵠΔΔⲆΔ: "img/day-hand-skin24.png",
    ΔⵠΔⵠⵠΔΔ: "img/night-hand-skin24.png",
    ᐃΔΔᐃⲆⵠⲆ: "img/day-hand-skin25.png",
    ᐃⲆΔⲆΔⲆⵠ: "img/night-hand-skin25.png",
    ᐃᐃΔᐃⲆΔⵠ: "img/day-hand-skin26.png",
    ⵠⵠᐃΔΔⵠⲆ: "img/night-hand-skin26.png",
    ⲆⲆⵠᐃᐃⵠⵠ: "img/day-hand-skin27.png",
    ΔⵠⲆⵠΔΔᐃ: "img/night-hand-skin27.png",
    ⵠᐃᐃⵠΔΔⵠ: "img/day-hand-skin28.png",
    ⲆᐃᐃΔⵠΔⵠ: "img/night-hand-skin28.png",
    ⲆᐃⲆᐃⵠᐃΔ: "img/day-hand-skin29.png",
    ᐃⲆΔⲆⲆⲆⲆ: "img/night-hand-skin29.png",
    ᐃΔᐃⲆΔⵠᐃ: "img/day-hand-skin30.png",
    ΔΔΔⵠⵠⲆᐃ: "img/night-hand-skin30.png",
    ΔⵠΔᐃΔᐃⲆ: "img/day-hand-skin31.png",
    ᐃΔᐃᐃⲆⵠΔ: "img/night-hand-skin31.png",
    ᐃⵠᐃᐃⵠⵠΔ: "img/day-hand-skin32.png",
    ᐃⵠⲆΔΔⲆΔ: "img/night-hand-skin32.png",
    ᐃᐃΔΔⵠⲆⵠ: "img/day-hand-skin33.png",
    ΔᐃᐃΔᐃΔΔ: "img/night-hand-skin33.png",
    ⵠᐃⲆⵠⵠΔⵠ: "img/day-hand-skin34.png",
    ⲆΔⲆΔⲆΔⵠ: "img/night-hand-skin34.png",
    ᐃⵠⲆⲆᐃⲆⲆ: "img/day-hand-skin35.png",
    ⲆⲆΔΔᐃⲆᐃ: "img/night-hand-skin35.png",
    ᐃⲆⵠΔΔⵠⲆ: "img/day-hand-skin36.png",
    ⲆΔⵠᐃⵠᐃⵠ: "img/night-hand-skin36.png",
    ΔᐃⲆⵠⲆⵠⲆ: "img/day-hand-skin37.png",
    ΔⵠΔᐃᐃΔⵠ: "img/night-hand-skin37.png",
    ᐃᐃΔᐃΔⵠΔ: "img/day-hand-skin38.png",
    ⲆⵠᐃΔⲆⵠⵠ: "img/night-hand-skin38.png",
    ΔΔⲆΔΔᐃⵠ: "img/day-hand-skin39.png",
    ΔⵠⵠΔⵠⲆⵠ: "img/night-hand-skin39.png",
    ⵠⵠΔⵠⵠΔⲆ: "img/day-hand-skin40.png",
    ᐃΔᐃΔΔⲆⲆ: "img/night-hand-skin40.png",
    ⲆⲆⵠΔΔⵠⵠ: "img/day-hand-skin41.png",
    ⲆΔᐃⲆᐃΔᐃ: "img/night-hand-skin41.png",
    ᐃⲆⲆᐃⵠⵠΔ: "img/day-hand-skin42.png",
    ⲆⲆⵠΔⲆⲆⵠ: "img/night-hand-skin42.png",
    ⲆΔⵠᐃᐃᐃΔ: "img/day-hand-skin43.png",
    ⲆᐃΔⲆΔⲆⵠ: "img/night-hand-skin43.png",
    ΔΔᐃᐃⵠᐃᐃ: "img/day-hand-skin16.png",
    ⵠⵠⵠΔᐃΔⲆ: "img/night-hand-skin16.png",
    ⵠΔΔᐃⲆᐃΔ: "img/day-hand-skin45.png",
    ᐃⵠⵠΔⵠᐃΔ: "img/night-hand-skin45.png",
    ΔⲆΔᐃΔΔⲆ: "img/day-hand-skin46.png",
    ⵠⲆΔΔΔⵠΔ: "img/night-hand-skin46.png",
    ⵠᐃᐃⲆΔΔⲆ: "img/day-hand-skin47.png",
    ᐃⵠⵠⲆⲆⵠᐃ: "img/night-hand-skin47.png",
    ΔⲆΔΔⵠΔᐃ: "img/day-hand-skin48.png",
    ⵠⲆᐃⵠⲆⵠΔ: "img/night-hand-skin48.png",
    ⲆⵠΔΔⲆᐃⵠ: "img/day-hand-skin49.png",
    ⵠⵠΔᐃΔⵠΔ: "img/night-hand-skin49.png",
    ⲆⲆᐃΔⵠᐃⲆ: "img/day-hand-skin49.png",
    ⵠⵠⲆΔΔⵠᐃ: "img/night-hand-skin49.png",
    ⲆⲆⲆⲆᐃⲆⵠ: "img/day-hand-skin51.png",
    ΔΔΔΔΔΔⲆ: "img/night-hand-skin51.png",
    ⲆᐃⲆⲆΔΔᐃ: "img/day-hand-skin52.png",
    ᐃⲆᐃᐃⵠⲆⲆ: "img/night-hand-skin52.png",
    ⵠᐃⵠΔⵠΔⵠ: "img/day-hand-skin53.png",
    ΔΔⲆⵠⵠⵠⲆ: "img/night-hand-skin53.png",
    ΔᐃᐃΔΔⲆᐃ: "img/day-hand-skin53.png",
    ᐃΔⵠⵠⲆⲆΔ: "img/night-hand-skin53.png",
    ⵠⵠⲆΔᐃⵠΔ: "img/day-hand-skin55.png",
    ⲆⵠΔᐃⲆᐃΔ: "img/night-hand-skin55.png",
    ΔⵠΔᐃⵠΔⲆ: "img/day-hand-skin56.png",
    ᐃΔᐃⵠᐃⵠⲆ: "img/night-hand-skin56.png",
    ⵠⲆΔΔⵠⵠᐃ: "img/day-hand-skin57.png",
    ⵠⲆⵠᐃⲆᐃᐃ: "img/night-hand-skin57.png",
    ΔᐃⵠᐃΔΔⵠ: "img/day-hand-skin58.png",
    ΔΔⲆᐃⵠⲆⵠ: "img/night-hand-skin58.png",
    ⵠΔᐃΔᐃⵠⵠ: "img/day-hand-skin59.png",
    ⵠⲆⲆⲆᐃⲆᐃ: "img/night-hand-skin59.png",
    ᐃⲆᐃⵠⲆⵠⲆ: "img/day-hand-skin61.png",
    ΔⲆⲆΔⵠⵠⵠ: "img/night-hand-skin61.png",
    ΔⵠΔⵠⲆⲆⲆ: "img/day-hand-skin61.png",
    ᐃᐃᐃᐃᐃᐃⲆ: "img/night-hand-skin61.png",
    ⵠⵠⵠᐃΔΔⵠ: "img/day-hand-skin62.png",
    ΔⲆᐃⲆΔⲆⲆ: "img/night-hand-skin62.png",
    ᐃΔᐃⵠⵠⲆᐃ: "img/day-hand-skin63.png",
    ⵠⵠⵠⲆⵠΔⵠ: "img/night-hand-skin63.png",
    ᐃⵠᐃⲆᐃΔⲆ: "img/day-hand-skin64.png",
    ΔΔⵠᐃᐃᐃⲆ: "img/night-hand-skin64.png",
    ⵠⲆⵠΔᐃⲆᐃ: "img/day-hand-skin65.png",
    ᐃΔⵠⲆᐃⵠᐃ: "img/night-hand-skin65.png",
    ᐃΔᐃΔⲆΔⵠ: "img/day-hand-skin66.png",
    ᐃᐃᐃᐃⵠᐃΔ: "img/night-hand-skin66.png",
    ⲆᐃᐃⲆΔᐃⵠ: "img/day-hand-skin67.png",
    ⵠᐃⲆⲆᐃᐃⵠ: "img/night-hand-skin67.png",
    ΔᐃⲆⵠΔΔᐃ: "img/day-hand-skin68.png",
    ᐃᐃⲆΔⲆⲆΔ: "img/night-hand-skin68.png",
    ᐃΔᐃΔⵠᐃᐃ: "img/day-hand-skin69.png",
    ⵠᐃΔⲆⲆⵠᐃ: "img/night-hand-skin69.png",
    ΔᐃᐃⲆⲆΔⲆ: "img/day-hand-skin70.png",
    ΔΔᐃⵠⲆⵠᐃ: "img/night-hand-skin70.png",
    ⵠΔΔⲆⲆⵠⲆ: "img/day-hand-skin71.png",
    ⲆⵠᐃⵠᐃⲆΔ: "img/night-hand-skin71.png",
    ⵠⲆᐃⲆΔΔᐃ: "img/day-hand-skin72.png",
    ⲆᐃΔᐃΔᐃⵠ: "img/night-hand-skin72.png",
    ⲆᐃⵠΔⵠⲆⵠ: "img/day-hand-skin73.png",
    ⲆΔⲆⵠⲆΔⵠ: "img/night-hand-skin73.png",
    ⵠⲆᐃΔΔᐃᐃ: "img/day-hand-skin74.png",
    ⲆᐃΔⵠⲆⵠⲆ: "img/night-hand-skin74.png",
    ⲆᐃⲆⲆⵠΔⲆ: "img/day-hand-skin75.png",
    ᐃΔᐃⲆⵠᐃΔ: "img/night-hand-skin75.png",
    ⵠᐃΔⲆᐃⵠΔ: "img/day-hand-skin76.png",
    ⵠΔⵠⲆⲆⲆⲆ: "img/night-hand-skin76.png",
    ᐃᐃⲆⵠᐃⵠⲆ: "img/day-hand-skin77.png",
    ΔⵠⵠᐃΔⵠᐃ: "img/night-hand-skin77.png",
    ᐃΔⲆᐃⲆⵠⵠ: "img/day-hand-skin78.png",
    ᐃΔᐃᐃᐃᐃᐃ: "img/night-hand-skin78.png",
    ΔⲆΔᐃⵠⵠΔ: "img/day-hand-skin79.png",
    ᐃᐃⲆΔⲆΔⲆ: "img/night-hand-skin79.png",
    ΔⲆΔΔⵠΔΔ: "img/day-hand-skin80.png",
    ⲆⲆⲆᐃΔΔΔ: "img/night-hand-skin80.png",
    ⲆⲆⵠⵠⵠᐃⲆ: "img/day-hand-skin81.png",
    ᐃⵠΔΔᐃⵠⵠ: "img/night-hand-skin81.png",
    ⲆΔⲆᐃᐃᐃⲆ: "img/day-hand-skin82.png",
    ⲆⲆΔⲆΔΔⲆ: "img/night-hand-skin82.png",
    ⵠⵠΔᐃᐃΔΔ: "img/day-hand-skin83.png",
    ⵠⵠⵠΔΔⲆⵠ: "img/night-hand-skin83.png",
    ⵠᐃΔΔᐃⵠⲆ: "img/day-hand-skin84.png",
    ᐃΔΔⲆᐃᐃᐃ: "img/night-hand-skin84.png",
    ᐃᐃᐃᐃΔΔⲆ: "img/day-hand-skin85.png",
    ⲆⵠⲆⵠⵠᐃΔ: "img/night-hand-skin85.png",
    ⲆⵠᐃΔᐃⲆΔ: "img/day-hand-skin86.png",
    ⲆⵠᐃⲆᐃΔΔ: "img/night-hand-skin86.png",
    ᐃᐃⵠΔⵠΔᐃ: "img/day-hand-skin87.png",
    ⲆⵠΔⲆⵠΔⵠ: "img/night-hand-skin87.png",
    ⲆⵠⲆᐃⵠΔⵠ: "img/day-hand-skin88.png",
    ⵠⲆᐃⵠᐃⲆΔ: "img/night-hand-skin88.png",
    ᐃⵠⵠΔⵠⲆⵠ: "img/day-hand-skin89.png",
    ΔΔᐃᐃΔΔΔ: "img/night-hand-skin89.png",
    ⲆⲆⵠⵠⲆⲆᐃ: "img/day-hand-skin90.png",
    ᐃⲆᐃⲆΔᐃᐃ: "img/night-hand-skin90.png",
    ⵠᐃⵠⵠΔⵠΔ: "img/day-hand-skin91.png",
    ⲆⵠΔⲆⵠΔΔ: "img/night-hand-skin91.png",
    ΔᐃΔⵠᐃᐃΔ: "img/day-hand-skin92.png",
    ⵠⲆⵠΔⲆⲆⵠ: "img/night-hand-skin92.png",
    ᐃⵠⲆⵠⲆⲆⵠ: "img/day-hand-skin93.png",
    ⵠⵠⲆΔⲆΔᐃ: "img/night-hand-skin93.png",
    ΔᐃᐃⲆⲆΔᐃ: "img/day-hand-skin94.png",
    ⲆᐃⵠΔΔⲆⵠ: "img/night-hand-skin94.png",
    ⵠⵠΔᐃⲆⲆⵠ: "img/day-hand-skin95.png",
    ΔΔⲆⵠⵠᐃⵠ: "img/night-hand-skin95.png",
    ⵠⵠΔᐃⵠⵠᐃ: "img/day-hand-skin96.png",
    ᐃⵠⲆᐃⲆΔᐃ: "img/night-hand-skin96.png",
    ᐃⵠᐃⲆⵠᐃᐃ: "img/day-hand-skin97.png",
    ᐃᐃⵠᐃⲆᐃᐃ: "img/night-hand-skin97.png",
    ⵠᐃᐃⲆᐃᐃⲆ: "img/day-hand-skin98.png",
    ⵠⲆΔΔΔⲆⲆ: "img/night-hand-skin98.png",
    ⵠΔᐃᐃⵠⲆⲆ: "img/day-hand-skin99.png",
    ΔᐃⲆΔᐃΔⲆ: "img/night-hand-skin99.png",
    ⲆⲆⵠⲆΔᐃΔ: "img/day-hand-skin100.png",
    ⵠΔⲆⲆΔᐃΔ: "img/night-hand-skin100.png",
    Δⵠᐃⵠⵠᐃⵠ: "img/day-hand-skin101.png",
    ⵠΔⵠⲆⲆΔΔ: "img/night-hand-skin101.png",
    ⲆⵠⲆⲆⲆᐃⵠ: "img/day-hand-skin102.png",
    ᐃⲆΔⵠΔⲆⵠ: "img/night-hand-skin102.png",
    ᐃⲆᐃⵠΔᐃⵠ: "img/day-hand-skin103.png",
    ⲆΔⲆᐃⵠᐃΔ: "img/night-hand-skin103.png",
    ⲆΔΔⵠΔᐃⵠ: "img/day-hand-skin104.png",
    ΔΔᐃⲆⵠⲆᐃ: "img/night-hand-skin104.png",
    ᐃⵠⵠⲆΔⵠⲆ: "img/day-hand-skin105.png",
    ΔⵠⵠΔᐃΔᐃ: "img/night-hand-skin105.png",
    ⵠⵠΔⲆⵠⵠᐃ: "img/day-hand-skin106.png",
    ᐃΔᐃΔⲆⵠⲆ: "img/night-hand-skin106.png",
    ΔⵠΔΔⵠⲆᐃ: "img/day-hand-skin107.png",
    ᐃⲆⲆᐃΔⲆᐃ: "img/night-hand-skin107.png",
    ⲆᐃⲆⲆΔᐃⲆ: "img/day-hand-skin108.png",
    ᐃⲆⲆⲆⲆⵠⲆ: "img/night-hand-skin108.png",
    ⵠᐃⲆΔⲆᐃⵠ: "img/day-hand-skin109.png",
    ⲆᐃᐃⵠΔⲆᐃ: "img/night-hand-skin109.png",
    ᐃⵠΔΔⵠⲆΔ: "img/day-hand-skin110.png",
    ⲆⵠⲆᐃΔⵠΔ: "img/night-hand-skin110.png",
    ᐃⲆΔᐃᐃⵠᐃ: "img/day-hand-skin111.png",
    ⲆΔⵠⵠⲆⵠⲆ: "img/night-hand-skin111.png",
    ⲆⵠⵠⵠⲆⵠΔ: "img/day-hand-skin112.png",
    ᐃΔⲆΔΔΔⲆ: "img/night-hand-skin112.png",
    ΔⵠⲆⵠⵠⲆᐃᐃΔ: "img/day-hand-skin113.png",
    ⲆᐃᐃΔᐃⵠⲆᐃΔ: "img/night-hand-skin113.png",
    ⲆΔⲆⲆΔᐃΔ: "img/day-hand-skin114.png",
    ⲆᐃΔᐃⵠⲆⲆ: "img/night-hand-skin114.png",
    ⲆᐃᐃⵠⲆΔⵠ: "img/day-hand-skin115.png",
    ΔᐃⵠᐃΔᐃᐃ: "img/night-hand-skin115.png",
    ⲆᐃᐃⵠⲆΔⲆ: "img/day-hand-skin116.png",
    ⲆⵠΔⵠⲆⲆⵠ: "img/night-hand-skin116.png",
    ⵠⵠⵠⵠᐃⲆᐃ: "img/day-hand-skin117.png",
    ΔⲆᐃᐃⵠⲆⲆ: "img/night-hand-skin117.png",
    ⲆⲆⲆⵠᐃᐃᐃ: "img/day-hand-skin118.png",
    ᐃΔΔΔᐃᐃΔ: "img/night-hand-skin118.png",
    ᐃⵠⲆⲆⲆⵠᐃ: "img/day-hand-skin119.png",
    ᐃΔⲆⲆᐃⵠΔ: "img/night-hand-skin119.png",
    ᐃⵠⵠᐃⵠⲆⲆ: "img/day-hand-skin120.png",
    ᐃᐃᐃᐃᐃⲆⲆ: "img/night-hand-skin120.png",
    ⵠᐃΔⵠᐃⲆΔ: "img/day-hand-skin122.png",
    ⲆⵠⲆⵠᐃⵠΔ: "img/night-hand-skin122.png",
    ᐃᐃΔⵠᐃᐃⲆ: "img/day-hand-skin122.png",
    ᐃⲆⲆᐃᐃᐃᐃ: "img/night-hand-skin122.png",
    ᐃᐃᐃⵠⲆΔⵠ: "img/day-hand-skin122.png",
    ⵠᐃΔⲆⵠⵠΔ: "img/night-hand-skin122.png",
    Δᐃᐃᐃᐃᐃⵠ: "img/day-hand-skin124.png",
    ⲆᐃⲆⵠⲆᐃᐃ: "img/night-hand-skin124.png",
    ⲆᐃΔⲆⲆⲆⲆ: "img/day-hand-skin125.png",
    ⵠⲆᐃΔⵠⵠΔ: "img/night-hand-skin125.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/day-hand-skin126.png",
    ⵠᐃᐃⲆⵠΔⵠ: "img/night-hand-skin126.png",
    ᐃⲆᐃⵠΔⵠᐃ: "img/day-hand-skin127.png",
    ΔΔⵠΔᐃΔⲆ: "img/night-hand-skin127.png",
    ΔⵠᐃⵠΔΔᐃ: "img/day-hand-skin128.png",
    ᐃΔⲆⲆⲆᐃᐃ: "img/night-hand-skin128.png",
    ᐃΔⵠⲆⲆⵠⲆ: "img/day-hand-skin129.png",
    ΔⲆᐃΔΔⵠⲆ: "img/night-hand-skin129.png",
    ⲆⲆΔΔᐃⲆⵠ: "img/day-hand-skin130.png",
    ΔΔⲆᐃᐃᐃⵠ: "img/night-hand-skin130.png",
    ᐃᐃⲆΔⲆⲆⲆ: "img/day-hand-skin131.png",
    ⲆᐃᐃᐃⵠΔΔ: "img/night-hand-skin131.png",
    ᐃⲆᐃΔⵠᐃΔ: "img/day-hand-skin130.png",
    ᐃⲆⵠᐃⲆⵠⲆ: "img/night-hand-skin130.png",
    ⵠΔⲆⵠΔⲆΔ: "img/day-hand-skin133.png",
    ⵠΔᐃᐃΔⲆΔ: "img/night-hand-skin133.png",
    ᐃⲆᐃΔΔΔΔ: "img/day-hand-skin134.png",
    ⵠⲆᐃΔⵠᐃⲆ: "img/night-hand-skin134.png",
    ⵠⲆᐃΔⵠᐃᐃ: "img/day-hand-skin135.png",
    ΔᐃΔⲆⵠΔⵠ: "img/night-hand-skin135.png",
    ⲆΔⲆⲆⵠᐃⵠ: "img/day-hand-skin136.png",
    ⲆⲆⲆΔⲆΔⵠ: "img/night-hand-skin136.png",
    ⵠΔⵠΔⵠⲆᐃ: "img/day-hand-skin137.png",
    ᐃⲆᐃΔⲆⵠᐃ: "img/night-hand-skin137.png",
    ᐃᐃΔΔⵠⵠⲆ: "img/day-hand-skin138.png",
    ᐃΔⲆΔᐃΔᐃ: "img/night-hand-skin138.png",
    ΔⵠⵠⵠΔᐃᐃ: "img/day-hand-skin139.png",
    ᐃᐃΔΔⲆΔΔ: "img/night-hand-skin139.png",
    ᐃᐃΔⵠⲆⲆⵠ: "img/day-hand-skin140.png",
    ⲆⲆΔⲆΔⲆᐃ: "img/night-hand-skin140.png",
    ΔΔⵠⲆᐃΔΔ: "img/day-hand-skin141.png",
    ᐃⲆⵠⵠᐃⲆⵠ: "img/night-hand-skin141.png",
    ΔᐃᐃⲆᐃᐃⲆ: "img/day-hand-skin142.png",
    ⵠⲆΔΔᐃᐃΔ: "img/night-hand-skin142.png",
    ⵠⵠⵠⲆΔΔᐃ: "img/day-hand-skin143.png",
    ⲆΔΔⲆΔΔΔ: "img/night-hand-skin143.png",
    ᐃⵠΔⲆᐃⵠⵠ: "img/day-hand-skin144.png",
    ⲆⵠΔΔᐃⵠⵠ: "img/night-hand-skin144.png",
    ⵠⵠⲆⵠΔᐃΔ: "img/day-hand-skin145.png",
    ΔᐃⲆΔⵠⲆΔ: "img/night-hand-skin145.png",
    ΔⵠⵠⲆⵠⲆᐃ: "img/day-hand-skin146.png",
    ⲆᐃⵠⵠⵠᐃⲆ: "img/night-hand-skin146.png",
    ⵠⲆΔⲆⲆΔΔ: "img/day-hand-skin147.png",
    ᐃᐃⵠΔΔᐃΔ: "img/night-hand-skin147.png",
    ⵠΔⲆΔΔᐃΔ: "img/day-hand-skin148.png",
    ΔⲆⲆⵠᐃΔⵠ: "img/night-hand-skin148.png",
    ᐃΔΔᐃⲆⲆⲆ: "img/day-hand-skin149.png",
    ᐃⵠᐃᐃΔᐃΔ: "img/night-hand-skin149.png",
    ᐃⵠⲆΔⵠⲆⵠ: "img/day-hand-skin150.png",
    ⲆᐃΔᐃⲆⵠᐃ: "img/night-hand-skin150.png",
    ᐃΔᐃΔΔⲆᐃ: "img/day-hand-skin151.png",
    ⵠΔⲆⲆΔⲆᐃ: "img/night-hand-skin151.png",
    ΔⵠᐃᐃΔΔΔ: "img/day-hand-skin152.png",
    ᐃⲆⵠΔⲆⵠⲆ: "img/night-hand-skin152.png",
    ΔΔᐃⵠᐃΔΔ: "img/day-hand-skin153.png",
    ⲆⲆᐃΔΔΔΔ: "img/night-hand-skin153.png",
    ᐃⲆⵠⲆᐃᐃᐃ: "img/day-hand-skin154.png",
    ΔΔᐃΔⲆⲆΔ: "img/night-hand-skin154.png",
    ⲆⲆᐃΔΔⵠⲆ: "img/day-hand-skin155.png",
    ᐃΔᐃΔΔⵠᐃ: "img/night-hand-skin155.png",
    ⲆΔⲆⲆⲆᐃΔ: "img/day-hand-skin156.png",
    ᐃⵠΔⵠⲆⵠᐃ: "img/night-hand-skin156.png",
    ⲆⵠΔⲆⲆⵠᐃ: "img/day-hand-skin157.png",
    ΔΔⵠⵠᐃⵠΔ: "img/night-hand-skin157.png",
    ᐃᐃⲆᐃᐃⵠⵠ: "img/day-hand-skin158.png",
    ⵠᐃᐃᐃΔᐃⵠ: "img/night-hand-skin158.png",
    ⵠⲆᐃΔᐃⵠⲆ: "img/day-hand-skin159.png",
    ⵠⲆⲆⲆⲆᐃᐃ: "img/night-hand-skin159.png",
    ᐃⲆᐃⲆⲆΔⲆ: "img/day-hand-skin160.png",
    ᐃⵠⲆᐃⵠⵠᐃ: "img/night-hand-skin160.png",
    ΔΔᐃⲆⵠⵠⲆ: "img/day-hand-skin161.png",
    ᐃᐃⲆⲆΔΔⵠ: "img/night-hand-skin161.png",
    ⵠⲆᐃΔⵠΔΔ: "img/day-hand-skin162.png",
    ᐃΔⲆⲆⵠΔⲆ: "img/night-hand-skin162.png",
    ⲆⲆⲆΔⵠᐃⲆ: "img/day-hand-skin163.png",
    ᐃⲆⵠⵠΔⵠⲆ: "img/night-hand-skin163.png",
    ΔΔᐃⵠⵠⲆⲆ: "img/day-hand-skin164.png",
    ᐃⲆᐃⵠΔΔᐃ: "img/night-hand-skin164.png",
    ΔᐃᐃⲆⲆⲆⵠ: "img/day-hand-skin165.png",
    ΔⲆⵠⲆⵠᐃⲆ: "img/night-hand-skin165.png",
    ᐃΔⵠⲆⵠⵠⲆ: "img/day-hand-skin166.png",
    ⵠᐃΔⵠⵠⲆⵠ: "img/night-hand-skin166.png",
    ⲆΔⲆΔⲆⲆⲆ: "img/day-hand-skin167.png",
    ᐃⵠΔⵠΔⲆⵠ: "img/night-hand-skin167.png",
    ⲆⵠⲆΔⵠⲆⵠ: "img/day-hand-skin168.png",
    ᐃⲆⲆΔⲆΔⲆ: "img/night-hand-skin168.png",
    ⵠᐃⲆᐃᐃΔᐃ: "img/day-hand-skin169.png",
    ⲆⵠⵠᐃⲆΔⲆ: "img/night-hand-skin169.png",
    ΔΔⵠⵠⵠᐃΔ: "img/day-hand-skin170.png",
    ⵠⵠⲆⲆΔⲆΔ: "img/night-hand-skin170.png",
    ⵠΔⲆΔⲆⵠⵠ: "img/day-hand-skin171.png",
    ⲆⲆᐃᐃΔᐃⵠ: "img/night-hand-skin171.png",
    ᐃⲆΔⵠⲆᐃⵠ: "img/day-hand-skin172.png",
    ⲆⲆᐃᐃⵠΔⲆ: "img/night-hand-skin172.png",
    ΔᐃⲆΔⵠΔΔ: "img/day-hand-skin173.png",
    ΔΔⲆⲆᐃⵠᐃ: "img/night-hand-skin173.png",
    ⵠⲆᐃⲆⲆⵠⵠ: "img/day-hand-skin174.png",
    ⵠᐃⲆᐃⵠΔⵠ: "img/night-hand-skin174.png",
    ⲆⵠΔⵠⲆΔⵠ: "img/day-hand-skin175.png",
    ΔᐃᐃⲆΔⵠΔ: "img/night-hand-skin175.png",
    ΔᐃΔⲆⵠᐃⲆ: "img/day-hand-skin176.png",
    ⲆⵠΔᐃΔᐃΔ: "img/night-hand-skin176.png",
    ⲆᐃΔⵠΔⲆΔ: "img/day-hand-skin177.png",
    ⲆⲆΔⲆⵠⵠᐃ: "img/night-hand-skin177.png",
    ᐃⲆⲆⵠⲆΔⵠ: "img/day-hand-skin178.png",
    ᐃⵠⵠⲆⲆᐃⵠ: "img/night-hand-skin178.png",
    ΔᐃⵠΔⵠⲆᐃ: "img/day-hand-skin179.png",
    ᐃΔⵠᐃⵠⲆⵠ: "img/night-hand-skin179.png",
    ᐃⲆᐃΔⵠⵠⲆ: "img/day-hand-skin180.png",
    ⲆᐃⲆΔᐃᐃⲆ: "img/night-hand-skin180.png",
    ΔΔⲆΔΔΔⲆ: "img/day-hand-skin181.png",
    ⲆⲆⲆⵠⵠⲆᐃ: "img/night-hand-skin181.png",
    ⲆᐃΔⲆΔⲆΔ: "img/day-hand-skin182.png",
    ΔⲆΔⵠⵠⲆⲆ: "img/night-hand-skin182.png",
    ⲆᐃⵠⵠΔᐃΔ: "img/day-hand-skin183.png",
    ⲆⲆᐃⲆⵠΔⵠ: "img/night-hand-skin183.png",
    ΔⵠᐃᐃΔⵠⵠ: "img/day-hand-skin184.png",
    ⲆᐃⵠΔⵠⲆᐃ: "img/night-hand-skin184.png",
    ⵠΔⵠΔⲆᐃⲆ: "img/day-hand-skin185.png",
    ΔΔⵠⲆᐃⵠⵠ: "img/night-hand-skin185.png",
    ⵠⵠⲆᐃΔⵠⵠ: "img/day-hand-skin186.png",
    ΔΔΔⲆΔⲆⵠ: "img/night-hand-skin186.png",
    ΔΔⲆΔᐃᐃⲆ: "img/day-hand-skin187.png",
    ᐃΔⲆᐃⲆⲆⵠ: "img/night-hand-skin187.png",
    ᐃᐃᐃⵠᐃⵠᐃ: "img/day-hand-skin188.png",
    ᐃⵠⵠⵠᐃΔⲆ: "img/night-hand-skin188.png",
    ᐃΔⵠΔⲆᐃⲆ: "img/day-hand-skin189.png",
    ΔⲆⲆⲆᐃⵠⵠ: "img/night-hand-skin189.png",
    ⵠΔⲆⵠᐃᐃⵠ: "img/day-hand-skin190.png",
    ⵠᐃⵠⲆⵠᐃⵠ: "img/night-hand-skin190.png",
    ᐃΔⲆΔΔᐃⲆ: "img/day-hand-skin191.png",
    ⲆⲆᐃᐃᐃⵠⲆ: "img/night-hand-skin191.png",
    ᐃΔΔΔᐃⵠⵠ: "img/day-hand-skin192.png",
    ⵠΔᐃᐃΔᐃΔ: "img/night-hand-skin192.png",
    ᐃᐃᐃⲆΔⲆⵠ: "img/day-hand-skin193.png",
    ⵠΔΔⲆⵠᐃⲆ: "img/night-hand-skin193.png",
    ᐃᐃΔⲆᐃΔⵠ: "img/day-hand-skin194.png",
    ⲆⵠᐃⲆⲆΔΔ: "img/night-hand-skin194.png",
    ⵠⵠᐃⵠⲆᐃⵠ: "img/day-hand-skin195.png",
    ΔΔΔⲆⵠⲆⲆ: "img/night-hand-skin195.png",
    ⵠⵠⲆⵠᐃΔⲆ: "img/day-hand-skin196.png",
    ⵠⵠⲆⲆⲆΔΔ: "img/night-hand-skin196.png",
    ΔⵠⵠⲆΔᐃⵠ: "img/day-hand-skin197.png",
    ΔⵠᐃΔⵠΔⲆ: "img/night-hand-skin197.png",
    ⵠⲆᐃΔᐃⵠᐃ: "img/day-hand-skin198.png",
    ⵠᐃⲆᐃΔⵠΔ: "img/night-hand-skin198.png",
    ᐃⵠⲆᐃΔᐃⵠ: "img/day-hand-skin199.png",
    ᐃᐃⵠⲆⵠΔΔ: "img/night-hand-skin199.png",
    ⵠⵠΔⲆⲆᐃᐃ: "img/day-hand-skin200.png",
    ΔᐃⲆΔΔⲆᐃ: "img/night-hand-skin200.png",
    ΔⲆⲆⲆᐃᐃᐃ: "img/day-hand-skin201.png",
    ᐃΔΔᐃΔⲆᐃ: "img/night-hand-skin201.png",
    ᐃΔᐃΔΔΔⲆ: "img/day-hand-skin202.png",
    ᐃⵠⵠⵠΔᐃⵠ: "img/night-hand-skin202.png",
    ⵠⵠⵠⲆⲆΔⲆ: "img/day-hand-skin203.png",
    ⲆΔⵠΔΔᐃᐃ: "img/night-hand-skin203.png",
    ⵠΔⲆⵠΔΔΔ: "img/day-hand-skin204.png",
    ΔⵠΔⵠΔⵠΔ: "img/night-hand-skin204.png",
    ᐃⲆΔⵠⲆΔΔ: "img/day-hand-skin205.png",
    ᐃΔΔⵠⲆⵠᐃ: "img/night-hand-skin205.png",
    ⵠⵠⵠΔⲆⲆⲆ: "img/day-hand-skin206.png",
    ΔᐃᐃᐃⲆᐃᐃ: "img/night-hand-skin206.png",
    ᐃⵠⲆⵠΔᐃⵠ: "img/day-hand-skin207.png",
    ⵠᐃᐃⲆᐃⲆⵠ: "img/night-hand-skin207.png",
    ᐃΔⵠⵠⲆΔΔ: "img/day-hand-skin208.png",
    ⵠⲆΔⲆⵠⵠⲆ: "img/night-hand-skin208.png",
    ᐃᐃΔᐃⲆⲆⵠ: "img/day-hand-skin209.png",
    ⵠΔΔⲆⵠⵠᐃ: "img/night-hand-skin209.png",
    ⵠΔᐃⲆⵠᐃⵠ: "img/day-hand-skin210.png",
    ⵠΔⲆⲆΔᐃⵠ: "img/night-hand-skin210.png",
    ᐃⵠᐃᐃⲆᐃᐃ: "img/day-hand-skin211.png",
    ⵠⲆⵠⲆⵠⵠⵠ: "img/night-hand-skin211.png",
    ᐃⵠᐃⵠⲆⵠⲆ: "img/day-hand-skin212.png",
    ᐃⵠᐃᐃᐃⵠᐃ: "img/night-hand-skin212.png",
    ΔⲆΔⵠᐃΔⵠ: "img/day-hand-skin213.png",
    ⲆⲆⵠᐃⲆᐃΔ: "img/night-hand-skin213.png",
    ⵠⲆᐃᐃΔΔᐃ: "img/day-hand-skin214.png",
    ⲆⲆΔⲆⵠᐃᐃ: "img/night-hand-skin214.png",
    ⵠⲆΔᐃⲆⵠᐃ: "img/day-hand-skin215.png",
    ⵠⲆΔⵠⲆⵠⲆ: "img/night-hand-skin215.png",
    ⲆΔⵠⵠⵠᐃΔ: "img/day-hand-skin216.png",
    ⲆΔⵠⲆΔⵠⲆ: "img/night-hand-skin216.png",
    ᐃΔⲆᐃᐃΔΔ: "img/day-hand-skin217.png",
    ⵠⵠᐃⵠⵠⵠⵠ: "img/night-hand-skin217.png",
    ᐃΔⲆⵠⲆᐃⵠ: "img/day-hand-skin218.png",
    ᐃⲆⵠΔⲆⲆⲆ: "img/night-hand-skin218.png",
    ᐃⲆᐃⲆⵠΔᐃ: "img/day-hand-skin219.png",
    ⵠⲆΔᐃΔⵠⵠ: "img/night-hand-skin219.png",
    ⵠᐃⲆᐃⲆⵠⵠ: "img/day-hand-skin220.png",
    ⲆⵠⵠΔΔΔΔ: "img/night-hand-skin220.png",
    ᐃⵠⵠⲆⵠΔᐃ: "img/day-hand-skin221.png",
    ⲆⵠⵠᐃⲆⵠᐃ: "img/night-hand-skin221.png",
    ᐃᐃⵠᐃᐃⵠⲆ: "img/day-hand-skin222.png",
    ⵠΔⲆⲆⲆᐃⵠ: "img/night-hand-skin222.png",
    ⵠⲆⲆᐃᐃⵠᐃ: "img/day-hand-skin223.png",
    ᐃᐃᐃΔⵠΔᐃ: "img/night-hand-skin223.png",
    ⵠⵠⵠⲆΔᐃΔ: "img/day-hand-skin224.png",
    ⲆⵠᐃⵠⲆᐃⲆ: "img/night-hand-skin224.png",
    ⲆΔⲆⲆΔΔⵠ: "img/day-hand-skin225.png",
    ᐃⵠⵠⵠΔⵠⲆ: "img/night-hand-skin225.png",
    ΔΔᐃⵠᐃⵠᐃ: "img/day-hand-skin226.png",
    ⵠΔΔⵠΔᐃⲆ: "img/night-hand-skin226.png",
    ΔⲆⵠⵠⵠⲆΔ: "img/day-hand-skin227.png",
    ⲆⵠⵠⵠⲆⲆⵠ: "img/night-hand-skin227.png",
    ᐃᐃᐃΔΔⵠⲆ: "img/day-hand-skin228.png",
    ⵠⵠΔΔⲆⵠᐃ: "img/night-hand-skin228.png",
    ⲆⲆⵠᐃⵠΔΔ: "img/day-hand-skin229.png",
    ⵠⲆⲆΔⵠⲆⲆ: "img/night-hand-skin229.png",
    ΔⵠⵠⲆΔⲆΔ: "img/day-hand-skin230.png",
    ⵠᐃᐃᐃⲆⵠⲆ: "img/night-hand-skin230.png",
    ᐃⵠᐃⲆⵠⲆᐃ: "img/day-hand-skin231.png",
    ΔⲆᐃⵠΔΔΔ: "img/night-hand-skin231.png",
    ΔᐃⲆΔⲆⵠⲆ: "img/day-hand-skin232.png",
    ᐃⵠⲆⲆΔⵠⵠ: "img/night-hand-skin232.png",
    ΔΔᐃΔⲆΔⵠ: "img/day-hand-skin233.png",
    ΔΔᐃⵠᐃΔⵠ: "img/night-hand-skin233.png",
    ⲆⲆⵠΔᐃΔⲆ: "img/day-hand-skin234.png",
    ⲆⲆⲆᐃΔⵠⲆ: "img/night-hand-skin234.png",
    ᐃᐃⵠᐃᐃⲆⵠ: "img/day-hand-skin235.png",
    ⵠᐃⲆⲆⲆᐃⲆ: "img/night-hand-skin235.png",
    ᐃᐃᐃⵠⲆᐃᐃ: "img/day-hand-skin236.png",
    ⵠᐃᐃⲆⲆΔᐃ: "img/night-hand-skin236.png",
    ⵠⵠⵠΔⵠⲆⵠ: "img/day-hand-skin237.png",
    ⵠΔⵠⵠⵠᐃΔ: "img/night-hand-skin237.png",
    ΔᐃᐃΔⵠⲆΔ: "img/day-hand-skin238.png",
    ᐃⵠᐃⵠⲆΔⵠ: "img/night-hand-skin238.png",
    ⵠⲆᐃⲆⲆⲆᐃ: "img/day-hand-skin239.png",
    ⲆⲆⵠᐃΔⲆᐃ: "img/night-hand-skin239.png",
    ⵠⲆⵠⵠⵠΔᐃ: "img/day-hand-skin240.png",
    ΔⲆⵠⲆⵠⲆⲆ: "img/night-hand-skin240.png",
    ⲆⲆᐃᐃᐃΔᐃ: "img/day-hand-skin241.png",
    ΔΔᐃⵠΔⲆΔ: "img/night-hand-skin241.png",
    ᐃΔⵠⲆΔⵠΔ: "img/day-hand-skin242.png",
    ΔⵠΔⵠᐃⲆᐃ: "img/night-hand-skin242.png",
    ΔⵠⵠⲆⲆΔⵠ: "img/day-hand-skin243.png",
    ⲆⵠᐃᐃΔⵠΔ: "img/night-hand-skin243.png",
    ⲆⲆΔᐃΔᐃᐃ: "img/day-hand-skin244.png",
    ᐃⲆΔΔΔⵠⲆ: "img/night-hand-skin244.png",
    ᐃⲆⵠᐃⵠⵠⲆ: "img/day-hand-skin245.png",
    ᐃⵠΔΔⲆⵠᐃ: "img/night-hand-skin245.png",
    ⲆΔᐃⵠΔⵠᐃ: "img/day-hand-skin246.png",
    ᐃᐃⵠⵠΔᐃⲆ: "img/night-hand-skin246.png",
    ᐃⵠⲆⲆᐃⵠⵠ: "img/day-bag-star0.png",
    ΔⵠΔⲆⵠⲆᐃ: "img/night-bag-star0.png",
    ⲆᐃᐃᐃᐃᐃⲆ: "img/day-bag0.png",
    ⲆᐃⵠΔⲆᐃⲆ: "img/night-bag0.png",
    ⲆΔΔᐃⵠΔᐃ: "img/day-bag1.png",
    ⵠᐃⵠⵠᐃᐃⵠ: "img/night-bag1.png",
    ᐃⵠⲆΔΔⲆᐃ: "img/day-bag2.png",
    ⵠⵠΔⵠⲆΔᐃ: "img/night-bag2.png",
    ᐃΔΔⵠⲆⲆⲆ: "img/day-bag3.png",
    ⵠⲆⵠᐃᐃⲆΔ: "img/night-bag3.png",
    ΔᐃᐃᐃⲆᐃⵠ: "img/day-bag4.png",
    ⵠⵠΔΔΔᐃⵠ: "img/night-bag4.png",
    ᐃΔᐃΔⲆᐃᐃ: "img/day-bag5.png",
    ⲆⵠΔᐃΔⵠΔ: "img/night-bag5.png",
    ᐃⲆⵠⲆⵠΔΔ: "img/day-bag6.png",
    ΔⵠⵠⵠΔΔᐃ: "img/night-bag6.png",
    ᐃⲆΔⲆⲆΔⲆ: "img/day-bag7.png",
    ⲆΔⲆⲆⵠⲆⵠ: "img/night-bag7.png",
    ᐃΔΔΔⲆⲆⵠ: "img/day-bag8.png",
    ⵠΔΔΔᐃⵠⵠ: "img/night-bag8.png",
    ᐃⲆΔᐃⵠⲆᐃ: "img/day-bag9.png",
    ⵠⵠΔΔᐃΔᐃ: "img/night-bag9.png",
    ⲆⲆΔᐃᐃΔΔ: "img/day-bag10.png",
    ⲆΔΔⵠⵠⵠΔ: "img/night-bag10.png",
    ΔⵠᐃΔⵠⲆΔ: "img/day-bag11.png",
    ᐃⲆᐃⵠΔⲆᐃ: "img/night-bag11.png",
    ⲆⲆⵠⲆᐃᐃⲆ: "img/day-bag13.png",
    ⵠⵠᐃΔᐃⲆⲆ: "img/night-bag13.png",
    ΔΔΔⵠⲆΔᐃ: "img/day-bag14.png",
    ⲆⵠⲆⵠⲆΔⲆ: "img/night-bag14.png",
    ᐃⲆᐃΔΔⲆΔ: "img/day-bag16.png",
    ΔⲆⵠⵠⲆⵠΔ: "img/night-bag16.png",
    ⲆΔⲆᐃΔⲆΔ: "img/day-bag17.png",
    ⵠⵠΔᐃⲆⲆΔ: "img/night-bag17.png",
    ΔΔⵠΔⲆᐃⲆ: "img/day-bag18.png",
    ⵠⵠⲆΔΔΔᐃ: "img/night-bag18.png",
    ΔⵠⵠΔⵠⲆΔ: "img/day-bag19.png",
    ᐃⵠΔⵠᐃⵠᐃ: "img/night-bag19.png",
    ᐃⲆⲆⲆᐃΔΔ: "img/day-bag20.png",
    ⵠⲆᐃⲆᐃΔⵠ: "img/night-bag20.png",
    ΔΔᐃᐃΔⵠⵠ: "img/day-bag21.png",
    ⵠⵠⵠⵠᐃΔⲆ: "img/night-bag21.png",
    ᐃⲆⲆⲆᐃᐃⲆ: "img/day-bag22.png",
    ⵠΔⵠᐃⵠᐃⲆ: "img/night-bag22.png",
    ΔΔΔⲆΔΔⵠ: "img/day-bag23.png",
    ΔΔⵠⵠⵠⲆⵠ: "img/night-bag23.png",
    ΔⲆⵠⲆΔᐃΔ: "img/day-bag24.png",
    ΔⲆⵠⲆᐃᐃⵠ: "img/night-bag24.png",
    ⵠᐃⵠΔⲆⵠⲆ: "img/day-bag25.png",
    ⵠⵠⵠᐃᐃⵠⲆ: "img/night-bag25.png",
    ᐃⲆⵠΔΔΔⵠ: "img/day-bag26.png",
    ⲆΔⵠⲆⲆⵠᐃ: "img/night-bag26.png",
    ΔⲆᐃⲆⲆⲆᐃ: "img/day-bag27.png",
    ΔⵠΔΔΔᐃΔ: "img/night-bag27.png",
    ΔⵠⵠⵠⵠᐃⲆ: "img/day-bag28.png",
    ᐃΔⲆΔⲆΔΔ: "img/night-bag28.png",
    ⲆΔⲆᐃᐃΔᐃ: "img/day-bag29.png",
    ᐃⵠⵠⲆΔᐃⲆ: "img/night-bag29.png",
    ⲆΔΔΔⵠⵠⵠ: "img/day-bag30.png",
    ᐃⵠᐃⲆΔᐃⲆ: "img/night-bag30.png",
    ΔΔΔΔⲆⵠΔ: "img/day-bag31.png",
    ⵠⲆᐃᐃⵠᐃⵠ: "img/night-bag31.png",
    ⲆᐃⲆⲆⵠⵠⵠ: "img/day-bag32.png",
    ⲆⵠⲆⲆⵠⵠⲆ: "img/night-bag32.png",
    ⲆⲆᐃⵠⵠⲆⲆ: "img/day-bag33.png",
    ⵠⲆⲆᐃⵠᐃⵠ: "img/night-bag33.png",
    ⵠΔⵠΔᐃᐃⲆ: "img/day-bag34.png",
    ⲆΔᐃⵠΔΔΔ: "img/night-bag34.png",
    ⲆⵠⵠΔⵠⵠⵠ: "img/day-bag35.png",
    ⵠᐃᐃᐃΔᐃⲆ: "img/night-bag35.png",
    ⵠⵠΔⲆᐃΔΔ: "img/day-bag36.png",
    ⵠⲆⵠⲆⵠⵠΔ: "img/night-bag36.png",
    ⲆⵠⵠⲆᐃⵠΔ: "img/day-bag37.png",
    ΔⵠⲆᐃᐃⲆⲆ: "img/night-bag37.png",
    ⵠⵠⲆΔⲆᐃⵠ: "img/day-bag38.png",
    ΔΔᐃΔⵠΔⲆ: "img/night-bag38.png",
    ΔΔᐃⲆⵠΔΔ: "img/day-bag39.png",
    ᐃⵠᐃⲆⵠᐃΔ: "img/night-bag39.png",
    ΔΔⲆᐃⵠᐃΔ: "img/day-bag40.png",
    ⵠΔᐃᐃΔⲆⲆ: "img/night-bag40.png",
    ⵠΔᐃⵠᐃΔᐃ: "img/day-bag41.png",
    ⲆᐃⲆᐃⵠᐃᐃ: "img/night-bag41.png",
    ⲆⵠⵠⵠᐃⲆⵠ: "img/day-bag42.png",
    ⲆⵠΔΔᐃᐃⵠ: "img/night-bag42.png",
    ⵠⵠᐃΔⲆΔΔ: "img/day-bag43.png",
    ⲆΔⵠⵠᐃⵠᐃ: "img/night-bag43.png",
    ⲆᐃⲆᐃⵠⲆΔ: "img/day-bag44.png",
    ⵠΔΔᐃⵠⲆⵠ: "img/night-bag44.png",
    ᐃᐃΔⲆⵠΔΔ: "img/day-bag45.png",
    ᐃⲆᐃⵠⵠΔⵠ: "img/night-bag45.png",
    ΔⲆᐃᐃⵠᐃⲆ: "img/day-bag46.png",
    ᐃⲆⵠⵠΔⲆΔ: "img/night-bag46.png",
    ΔⲆᐃⲆᐃⵠᐃ: "img/day-bag47.png",
    ᐃΔⵠⵠⲆⵠΔ: "img/night-bag47.png",
    ⲆⲆᐃⲆⵠΔⲆ: "img/day-bag48.png",
    ᐃᐃᐃⵠΔⵠⲆ: "img/night-bag48.png",
    ᐃᐃⵠⲆΔᐃΔ: "img/day-bag49.png",
    ᐃᐃᐃⵠⲆⲆᐃ: "img/night-bag49.png",
    ⵠⲆΔΔⲆⵠᐃ: "img/day-bag50.png",
    ΔᐃᐃΔᐃᐃᐃ: "img/night-bag50.png",
    ⵠⲆΔᐃⵠΔⲆ: "img/day-bag51.png",
    ⵠⲆⵠᐃⵠΔⲆ: "img/night-bag51.png",
    ⵠᐃᐃⲆⲆⵠᐃ: "img/day-bag52.png",
    ⵠⵠⲆⵠΔⵠΔ: "img/night-bag52.png",
    ⲆΔⲆᐃⲆᐃΔ: "img/day-bag53.png",
    ᐃⲆⵠᐃΔⲆΔ: "img/night-bag53.png",
    ᐃΔⵠᐃⲆⵠⲆ: "img/day-bag54.png",
    ᐃⲆⵠΔⵠⲆⲆ: "img/night-bag54.png",
    ΔⲆⵠⵠⵠᐃⵠ: "img/day-bag55.png",
    ΔⵠΔᐃᐃΔΔ: "img/night-bag55.png",
    ⵠⲆⵠΔⵠᐃⵠ: "img/day-bag56.png",
    ᐃⵠⵠΔⵠΔⲆ: "img/night-bag56.png",
    ΔⵠⲆⵠⲆᐃⵠ: "img/day-bag57.png",
    ⲆⲆⲆⵠΔⵠΔ: "img/night-bag57.png",
    ΔᐃᐃⵠⵠⲆⲆ: "img/day-bag58.png",
    ⲆⲆⵠᐃᐃΔⲆ: "img/night-bag58.png",
    ΔΔᐃⲆⲆⲆⲆ: "img/day-bag59.png",
    ⵠⵠᐃΔΔⵠⵠ: "img/night-bag59.png",
    ⲆΔᐃΔⲆⵠⲆ: "img/day-bag60.png",
    ⲆΔᐃΔⵠΔⵠ: "img/night-bag60.png",
    ⲆⲆⵠⲆᐃⵠⵠ: "img/day-bag61.png",
    ⲆⵠΔⲆᐃⲆΔ: "img/night-bag61.png",
    ⵠᐃΔⵠΔⵠⵠ: "img/day-bag62.png",
    ᐃⵠΔΔⵠΔⲆ: "img/night-bag62.png",
    ᐃᐃⵠⲆⵠⵠΔ: "img/day-bag63.png",
    ᐃΔΔⲆⵠⲆⵠ: "img/night-bag63.png",
    ᐃᐃⵠᐃΔᐃᐃ: "img/day-bag64.png",
    ⲆⵠⲆⲆᐃᐃΔ: "img/night-bag64.png",
    ⵠⲆᐃⲆⵠⵠⵠ: "img/day-bag65.png",
    ⲆᐃΔΔⲆᐃΔ: "img/night-bag65.png",
    ⲆΔΔᐃᐃⵠⲆ: "img/day-bag66.png",
    ΔΔⵠΔⵠᐃⲆ: "img/night-bag66.png",
    ᐃⵠᐃⲆⲆΔⵠ: "img/day-bag67.png",
    ΔΔΔⲆᐃⲆⲆ: "img/night-bag67.png",
    ⵠⵠᐃⵠⵠⲆᐃ: "img/day-bag68.png",
    ⵠⲆⵠⵠⵠᐃΔ: "img/night-bag68.png",
    ⲆΔⵠⵠᐃΔᐃ: "img/day-bag69.png",
    ⲆΔⲆⲆᐃΔΔ: "img/night-bag69.png",
    ⲆᐃⲆⵠΔⲆᐃ: "img/day-bag70.png",
    ⲆⲆΔⲆⲆᐃⵠ: "img/night-bag70.png",
    ΔⵠᐃⵠⲆΔᐃ: "img/day-bag71.png",
    ⲆⲆⲆⵠⲆⲆⲆ: "img/night-bag71.png",
    ⲆⵠᐃⲆΔⲆΔ: "img/day-bag72.png",
    ᐃⲆΔⲆᐃᐃⲆ: "img/night-bag72.png",
    ᐃΔⲆⲆⲆΔᐃ: "img/day-bag73.png",
    ⲆⵠᐃⵠΔΔΔ: "img/night-bag73.png",
    ⲆⵠⵠⲆⵠⲆⵠ: "img/day-bag74.png",
    ΔᐃⵠⲆΔⲆᐃ: "img/night-bag74.png",
    ⵠᐃⲆᐃⵠᐃⵠ: "img/day-bag75.png",
    ⵠΔᐃⲆⵠⲆⵠ: "img/night-bag75.png",
    ⵠⵠⵠΔⵠᐃⵠ: "img/day-bag76.png",
    ΔᐃⵠⲆΔⲆⲆ: "img/night-bag76.png",
    ᐃⲆⵠⵠⲆΔⵠ: "img/day-bag77.png",
    Ⲇⵠⵠᐃⵠᐃᐃ: "img/night-bag77.png",
    ΔΔⵠⲆᐃⲆⲆ: "img/day-bag78.png",
    ⵠⵠΔⵠⵠᐃⵠ: "img/night-bag78.png",
    ᐃⵠΔᐃⲆΔⵠ: "img/day-bag79.png",
    ⵠΔᐃᐃⲆΔΔ: "img/night-bag79.png",
    ᐃΔΔⲆᐃⲆᐃ: "img/day-bag80.png",
    ΔⲆᐃᐃΔᐃⲆ: "img/night-bag80.png",
    ⵠΔΔⵠΔⲆΔ: "img/day-accessory0.png",
    ΔⵠⵠⲆΔⲆᐃ: "img/day-accessory0-pacques.png",
    ΔⲆⵠⲆΔᐃⲆ: "img/night-accessory0-pacques.png",
    ΔᐃⲆΔⲆⲆΔ: "img/day-accessory13.png",
    ΔΔⲆΔᐃⵠΔ: "img/night-accessory13.png",
    ⲆⵠⵠⵠⵠⲆᐃ: "img/day-accessory14.png",
    ⵠⲆΔⲆⵠⵠΔ: "img/night-accessory14.png",
    ⲆΔᐃΔᐃⲆⲆ: "img/day-accessory15.png",
    ᐃᐃⲆᐃⲆΔΔ: "img/night-accessory15.png",
    ΔⲆⵠⲆΔⵠⲆ: "img/day-accessory16.png",
    ᐃⲆⲆⵠⲆⲆΔ: "img/night-accessory16.png",
    ⲆⲆΔⲆΔⵠⲆ: "img/day-accessory17.png",
    ΔⵠΔΔᐃᐃΔ: "img/day-accessory17.png",
    ⲆΔⵠᐃⵠᐃΔ: "img/day-accessory19.png",
    ⵠΔⵠᐃᐃᐃΔ: "img/night-accessory19.png",
    ᐃⵠᐃΔᐃⵠⲆ: "img/day-accessory20.png",
    ⲆⵠΔᐃⵠΔⵠ: "img/night-accessory20.png",
    ⵠⵠᐃᐃⲆᐃⵠ: "img/day-accessory21.png",
    ᐃⵠΔᐃⲆΔᐃ: "img/night-accessory21.png",
    ΔᐃⵠΔΔᐃⵠ: "img/day-accessory22.png",
    ⲆΔⵠⵠΔΔΔ: "img/night-accessory22.png",
    ⵠᐃⵠΔⵠΔᐃ: "img/day-accessory23.png",
    ⵠⲆⲆⲆΔᐃⲆ: "img/night-accessory23.png",
    ⵠΔⲆᐃⵠΔⵠ: "img/day-accessory24.png",
    ΔΔΔⲆᐃⵠⲆ: "img/night-accessory24.png",
    ᐃⲆᐃᐃΔⵠᐃ: "img/day-accessory25.png",
    ⵠⲆᐃⲆⵠᐃΔ: "img/night-accessory25.png",
    ⵠᐃⵠᐃⲆⵠⵠ: "img/day-accessory26.png",
    ΔΔᐃⲆᐃᐃⲆ: "img/night-accessory26.png",
    ⲆΔᐃⲆΔⲆⵠ: "img/day-accessory27.png",
    ΔᐃΔΔⵠᐃᐃ: "img/night-accessory27.png",
    ᐃᐃⲆⲆΔⵠⲆ: "img/day-accessory18.png",
    Ⲇⵠᐃⵠᐃᐃⵠ: "img/night-accessory18.png",
    ΔⲆⵠᐃᐃᐃΔ: "img/day-accessory29.png",
    ⵠⲆᐃⲆᐃⵠᐃ: "img/night-accessory29.png",
    ⲆΔⲆⵠᐃΔΔ: "img/day-accessory30.png",
    ⵠᐃⲆΔⵠⵠⵠ: "img/night-accessory30.png",
    ⵠᐃᐃᐃⵠᐃΔ: "img/day-accessory31.png",
    ᐃⵠΔⲆⲆΔᐃ: "img/night-accessory31.png",
    ΔᐃⵠΔⲆⵠⲆ: "img/day-accessory32.png",
    ΔⲆⲆᐃΔⲆⵠ: "img/night-accessory32.png",
    ΔΔΔΔⵠᐃᐃ: "img/day-accessory33.png",
    ΔⵠⵠⵠⲆΔᐃ: "img/night-accessory33.png",
    ΔⲆⲆΔΔᐃᐃ: "img/day-accessory34.png",
    ΔΔΔⵠⲆᐃᐃ: "img/night-accessory34.png",
    ᐃᐃⲆⵠΔΔⵠ: "img/day-accessory35.png",
    ΔΔⵠⲆᐃΔᐃ: "img/night-accessory35.png",
    ⵠⵠⵠⵠⲆⵠⵠ: "img/day-accessory28.png",
    ⲆᐃⲆⲆᐃⲆⵠ: "img/night-accessory28.png",
    ⵠⲆΔᐃⵠᐃᐃ: "img/day-accessory36.png",
    ΔⵠⲆᐃⵠΔᐃ: "img/night-accessory36.png",
    ᐃᐃΔΔΔΔⲆ: "img/day-accessory37.png",
    ⵠΔᐃΔⲆⲆᐃ: "img/night-accessory37.png",
    ⵠⵠΔⲆⲆⵠⲆ: "img/day-accessory39.png",
    ⵠⵠᐃⲆⵠⵠⵠ: "img/night-accessory39.png",
    ⵠⵠⲆⵠⲆᐃⲆ: "img/day-accessory40.png",
    ⲆⲆΔΔΔⵠᐃ: "img/night-accessory40.png",
    ⵠⲆⵠⲆᐃⲆΔ: "img/day-accessory41.png",
    ⲆⵠΔⵠᐃⲆΔ: "img/night-accessory41.png",
    ⲆᐃⵠΔⵠⵠᐃ: "img/day-accessory42.png",
    ΔᐃᐃⵠⲆⵠⲆ: "img/night-accessory42.png",
    ᐃᐃΔⵠⲆⵠΔ: "img/day-accessory43.png",
    ΔⵠᐃⲆΔΔᐃ: "img/night-accessory43.png",
    ΔᐃΔⵠᐃᐃⵠ: "img/day-accessory44.png",
    ΔⲆᐃⵠⵠΔΔ: "img/night-accessory44.png",
    ⲆΔᐃΔⵠᐃΔ: "img/day-accessory38.png",
    ⵠⲆᐃΔⲆⵠⲆ: "img/night-accessory38.png",
    ⲆⲆⵠᐃᐃᐃᐃ: "img/day-accessory46.png",
    ⲆⵠᐃᐃⵠⲆᐃ: "img/night-accessory46.png",
    ⲆᐃᐃⵠΔΔΔ: "img/day-accessory47.png",
    ΔⲆᐃⲆⵠⵠⵠ: "img/night-accessory47.png",
    ᐃΔⲆⲆᐃⲆᐃ: "img/day-accessory48.png",
    ΔᐃⲆᐃᐃΔΔ: "img/night-accessory48.png",
    ᐃΔⵠⲆⵠΔᐃ: "img/day-accessory49.png",
    ⵠᐃⲆᐃⲆⲆⲆ: "img/night-accessory49.png",
    ΔᐃⵠᐃᐃⵠΔ: "img/day-accessory45.png",
    ᐃᐃⲆⵠⵠΔΔ: "img/night-accessory45.png",
    ΔᐃᐃⲆⵠΔⵠ: "img/day-accessory50.png",
    ⲆⵠⲆᐃⲆᐃⲆ: "img/night-accessory50.png",
    ᐃΔΔᐃᐃΔᐃ: "img/day-accessory51.png",
    ⵠⵠᐃΔᐃᐃᐃ: "img/night-accessory51.png",
    ΔⲆᐃⲆⲆⲆⵠ: "img/day-accessory52.png",
    ⲆΔⲆⵠⵠⵠΔ: "img/night-accessory52.png",
    ⲆᐃᐃᐃΔᐃΔ: "img/day-accessory53.png",
    ΔᐃⵠⵠⲆᐃⵠ: "img/night-accessory53.png",
    ⲆΔΔΔΔⲆᐃ: "img/day-accessory54.png",
    ⵠⲆΔⲆⵠⵠᐃ: "img/night-accessory54.png",
    ⲆⵠⲆⲆⲆⲆⲆ: "img/day-accessory55.png",
    ΔⲆᐃⲆᐃΔⵠ: "img/night-accessory55.png",
    ⲆⲆᐃΔᐃⲆⵠ: "img/day-accessory56.png",
    ⲆΔΔΔⵠⵠᐃ: "img/night-accessory56.png",
    ΔⲆⵠⲆⲆⵠᐃ: "img/day-accessory57.png",
    ᐃΔⲆⲆΔᐃⵠ: "img/night-accessory57.png",
    ΔⲆⲆⵠⲆⲆΔ: "img/day-accessory58.png",
    ᐃⲆᐃⵠΔⵠΔ: "img/night-accessory58.png",
    ᐃⲆⲆΔΔⲆⵠ: "img/day-accessory59.png",
    ᐃⲆⵠᐃⵠΔⵠ: "img/night-accessory59.png",
    ⵠᐃⲆᐃⵠⵠⵠ: "img/day-accessory60.png",
    ᐃΔⵠᐃΔⲆⵠ: "img/night-accessory60.png",
    ΔⵠⲆⵠᐃᐃᐃ: "img/day-accessory61.png",
    ⵠⵠᐃⵠⲆᐃⲆ: "img/night-accessory61.png",
    ᐃⲆⵠΔᐃΔⲆ: "img/day-accessory62.png",
    ⲆΔⵠΔⵠᐃΔ: "img/night-accessory62.png",
    ᐃΔΔⲆⲆⵠⵠ: "img/day-accessory63.png",
    ᐃⵠⵠΔᐃᐃⲆ: "img/night-accessory63.png",
    ⲆΔⲆⵠΔⵠⲆ: "img/day-accessory64.png",
    ⲆΔⲆⲆΔΔⲆ: "img/night-accessory64.png",
    ΔΔΔΔᐃᐃⵠ: "img/day-accessory65.png",
    ΔΔΔΔΔⲆⵠ: "img/night-accessory65.png",
    ⲆᐃⲆᐃⵠⲆⲆ: "img/day-accessory66.png",
    ⵠⲆᐃⵠⲆΔᐃ: "img/night-accessory66.png",
    ᐃⵠᐃΔⲆΔⵠ: "img/day-accessory67.png",
    ᐃΔᐃΔᐃⵠⵠ: "img/night-accessory67.png",
    ⵠⲆΔΔⵠᐃⲆ: "img/day-accessory68.png",
    ⵠΔⲆⲆⵠⲆⵠ: "img/night-accessory68.png",
    ΔᐃΔΔΔⲆΔ: "img/day-accessory69.png",
    ᐃΔⲆⲆᐃΔⵠ: "img/night-accessory69.png",
    ⲆⲆⵠⲆⵠⵠⵠ: "img/day-accessory70.png",
    ⵠΔΔⲆⲆΔⵠ: "img/night-accessory70.png",
    ⲆᐃᐃᐃΔⵠⲆ: "img/day-accessory71.png",
    ᐃᐃᐃⲆᐃΔΔ: "img/night-accessory71.png",
    ⲆⲆⲆⵠᐃᐃΔ: "img/day-accessory72.png",
    ⵠⲆⵠⵠΔⲆⵠ: "img/night-accessory72.png",
    ⲆⲆΔᐃΔᐃΔ: "img/day-accessory73.png",
    ᐃΔⵠⵠⵠΔⵠ: "img/night-accessory73.png",
    ⵠΔᐃⲆΔⲆⲆ: "img/day-accessory74.png",
    ΔⲆΔΔᐃⵠⵠ: "img/night-accessory74.png",
    ⵠᐃᐃⲆᐃⵠᐃ: "img/day-accessory75.png",
    ⵠⲆⵠΔΔⲆⵠ: "img/night-accessory75.png",
    ᐃⲆᐃⲆᐃⲆᐃ: "img/day-accessory76.png",
    ΔΔⲆⵠⲆⵠΔ: "img/night-accessory76.png",
    ᐃᐃⲆᐃΔⵠᐃ: "img/day-accessory77.png",
    ⲆΔⵠᐃⵠⲆΔ: "img/night-accessory77.png",
    ΔⵠᐃⵠᐃΔΔ: "img/day-accessory78.png",
    ΔⲆⵠΔⲆᐃⲆ: "img/night-accessory78.png",
    ⲆⲆΔΔⵠⲆΔ: "img/day-accessory79.png",
    ᐃΔⲆⲆᐃⵠⵠ: "img/night-accessory79.png",
    ⲆᐃᐃⲆⲆΔᐃ: "img/day-accessory80.png",
    ΔΔⵠΔⲆⲆⵠ: "img/night-accessory80.png",
    ΔⵠᐃᐃⲆⲆᐃ: "img/day-accessory81.png",
    ⵠⵠᐃΔᐃⲆᐃ: "img/night-accessory81.png",
    ⵠΔⲆⲆⲆⵠᐃ: "img/day-accessory83.png",
    ΔΔΔΔᐃⲆⲆ: "img/night-accessory83.png",
    ⵠΔⲆᐃⲆΔΔ: "img/day-accessory84.png",
    ⲆᐃⵠⲆΔΔⵠ: "img/night-accessory84.png",
    ⵠᐃⲆΔᐃΔᐃ: "img/day-accessory85.png",
    ᐃⵠⵠᐃᐃⲆᐃ: "img/night-accessory85.png",
    ΔⵠⲆᐃⵠᐃⲆ: "img/day-accessory86.png",
    ⲆΔᐃⲆᐃⵠᐃ: "img/night-accessory86.png",
    ᐃⵠΔⵠⵠⲆⵠ: "img/day-accessory87.png",
    ΔⵠⲆᐃⵠⲆΔ: "img/night-accessory87.png",
    ⵠⲆΔΔᐃⲆⵠ: "img/day-accessory88.png",
    ΔΔⵠⲆⲆⵠΔ: "img/night-accessory88.png",
    ⲆⵠⵠΔⵠᐃⲆ: "img/day-accessory89.png",
    ᐃⵠⵠΔⵠΔⵠ: "img/night-accessory89.png",
    ⲆⲆⵠΔᐃⵠΔ: "img/day-accessory90.png",
    ⵠⵠⵠⲆᐃᐃᐃ: "img/night-accessory90.png",
    ΔᐃⲆᐃΔⵠᐃ: "img/day-accessory91.png",
    ⵠⵠⲆᐃΔᐃⵠ: "img/night-accessory91.png",
    ᐃⲆΔᐃⵠⲆΔ: "img/day-accessory92.png",
    ΔⲆΔᐃⵠⵠⵠ: "img/night-accessory92.png",
    ΔᐃⵠⵠΔΔⲆ: "img/day-accessory93.png",
    ᐃΔⲆΔΔⵠⵠ: "img/night-accessory93.png",
    ᐃⲆⵠⵠΔᐃⲆ: "img/day-accessory94.png",
    ⵠⲆᐃᐃΔΔⲆ: "img/night-accessory94.png",
    ΔⵠⵠΔᐃᐃⲆ: "img/day-accessory95.png",
    ᐃⵠⵠⲆⲆⲆΔ: "img/night-accessory95.png",
    ᐃⵠⲆⲆᐃⵠᐃ: "img/day-accessory96.png",
    ⵠᐃΔΔⲆΔΔ: "img/night-accessory96.png",
    ΔⲆΔⵠⵠⵠΔ: "img/day-accessory97.png",
    ⵠⲆⲆⲆΔⲆⵠ: "img/night-accessory97.png",
    ⵠⲆⲆᐃⵠⵠΔ: "img/day-accessory98.png",
    ᐃᐃⵠⵠⲆᐃⲆ: "img/night-accessory98.png",
    ᐃⵠⵠΔᐃⲆⵠ: "img/day-accessory99.png",
    ⲆⵠⲆΔᐃᐃΔ: "img/night-accessory99.png",
    ⵠᐃⲆΔⲆⵠΔ: "img/day-accessory100.png",
    ᐃⵠΔⵠᐃΔⵠ: "img/night-accessory100.png",
    ΔⲆΔⵠⵠⵠⲆ: "img/day-accessory101.png",
    ⵠⲆΔᐃΔΔⲆ: "img/night-accessory101.png",
    ΔΔᐃᐃⲆⲆΔ: "img/day-accessory102.png",
    ΔᐃⲆⲆΔΔⵠ: "img/night-accessory102.png",
    ⲆⲆⵠⲆᐃᐃⵠ: "img/day-accessory103.png",
    ΔⵠΔⵠⲆΔΔ: "img/night-accessory103.png",
    ΔΔᐃΔΔⵠΔ: "img/day-accessory104.png",
    ⲆᐃΔᐃᐃᐃⲆ: "img/night-accessory104.png",
    ᐃΔΔᐃΔⵠΔ: "img/day-accessory105.png",
    ⲆΔⲆⵠⲆᐃⵠ: "img/night-accessory105.png",
    ΔⲆᐃⵠⲆᐃᐃΔᐃ: "img/day-accessory106.png",
    ⲆⲆΔΔΔᐃΔᐃΔ: "img/night-accessory106.png",
    ᐃⲆⲆΔⵠᐃᐃⵠᐃ: "img/day-accessory107.png",
    ⲆⵠΔΔⲆᐃⲆΔᐃ: "img/night-accessory107.png",
    ⵠⵠⵠᐃΔⲆᐃ: "img/day-accessory82.png",
    ΔⵠⲆΔⲆⵠⲆ: "img/night-accessory82.png",
    ⵠⲆⵠᐃᐃⵠⲆ: "img/day-accessory108.png",
    ⲆⲆᐃⲆΔᐃⵠ: "img/night-accessory108.png",
    ᐃᐃΔⵠΔΔΔ: "img/day-accessory109.png",
    ⲆⵠΔΔⵠᐃΔ: "img/night-accessory109.png",
    ᐃᐃⲆⲆⵠⵠⵠ: "img/day-book0.png",
    ⵠᐃΔⲆᐃⲆⲆ: "img/night-book0.png",
    ᐃⵠᐃⲆΔⲆⵠ: "img/day-book1.png",
    ⵠᐃⵠᐃᐃΔⵠ: "img/night-book1.png",
    ᐃⲆΔΔⲆΔΔ: "img/day-book2.png",
    ⵠᐃᐃΔᐃᐃΔ: "img/night-book2.png",
    ΔᐃⵠⲆⵠΔⲆ: "img/day-book3.png",
    ΔⵠⲆⵠΔⲆⵠ: "img/night-book3.png",
    ᐃᐃΔⲆⲆΔᐃ: "img/day-book4.png",
    ⲆᐃΔⵠⵠᐃΔ: "img/night-book4.png",
    ΔΔⵠⲆᐃⵠⲆ: "img/day-book5.png",
    ΔΔⵠⲆᐃᐃⲆ: "img/night-book5.png",
    ⲆⵠⵠΔΔⵠⵠ: "img/day-book6.png",
    ᐃⲆᐃΔⲆⵠⵠ: "img/night-book6.png",
    ᐃΔⵠᐃᐃᐃⵠ: "img/day-book7.png",
    ⵠᐃⲆⵠΔΔΔ: "img/night-book7.png",
    ΔΔⲆⲆⵠᐃⲆ: "img/day-book8.png",
    ⵠᐃᐃᐃᐃᐃᐃ: "img/night-book8.png",
    ΔⲆⵠⲆⲆⵠⲆ: "img/day-book9.png",
    ⲆΔⲆΔΔⲆⵠ: "img/night-book9.png",
    ᐃᐃᐃΔᐃⵠΔ: "img/day-book10.png",
    ΔᐃⲆᐃᐃΔⲆ: "img/night-book10.png",
    ⵠᐃΔⵠΔⲆⲆ: "img/day-book11.png",
    ⲆΔΔⲆⵠⲆⲆ: "img/night-book11.png",
    ᐃᐃⵠⵠᐃⵠᐃ: "img/day-book12.png",
    ⵠΔⲆⵠᐃΔΔ: "img/night-book12.png",
    ⲆΔⵠᐃⵠᐃⲆ: "img/day-book13.png",
    ⲆⵠⲆΔⲆⲆⵠ: "img/night-book13.png",
    ⵠⲆᐃⵠΔΔⲆ: "img/day-book14.png",
    ΔⵠⵠᐃΔⲆⵠ: "img/night-book14.png",
    ΔΔⵠⲆΔⲆⵠ: "img/day-book15.png",
    ⵠᐃⲆᐃᐃⵠᐃ: "img/night-book15.png",
    ⲆΔᐃⲆᐃᐃΔ: "img/day-book16.png",
    ⵠⵠΔⲆᐃⲆᐃ: "img/night-book16.png",
    ᐃⵠⵠΔⵠⲆΔ: "img/day-book17.png",
    ΔⵠⵠⲆⵠᐃᐃ: "img/night-book17.png",
    ⵠΔⵠᐃⵠⵠΔ: "img/day-book18.png",
    ᐃⲆⵠⵠⲆᐃΔ: "img/night-book18.png",
    ᐃⵠⲆᐃᐃΔᐃ: "img/day-book19.png",
    ᐃᐃⵠᐃⲆᐃⵠ: "img/night-book19.png",
    ⲆⲆᐃᐃᐃᐃΔ: "img/day-book20.png",
    ⲆⵠΔΔΔⵠΔ: "img/night-book20.png",
    ⲆΔᐃⲆⵠᐃᐃ: "img/day-book21.png",
    ⲆⲆΔΔᐃⲆΔ: "img/night-book21.png",
    ⲆᐃΔⲆᐃΔⵠ: "img/day-book22.png",
    ⲆΔΔⵠᐃᐃⵠ: "img/night-book22.png",
    ᐃⵠΔΔΔⲆᐃ: "img/day-book23.png",
    ᐃⵠΔⵠΔⵠⵠ: "img/night-book23.png",
    ⵠΔᐃᐃⲆΔⲆ: "img/day-book24.png",
    ⵠⲆΔΔⵠⵠⲆ: "img/night-book24.png",
    ΔⵠᐃⲆⲆⲆᐃ: "img/day-book25.png",
    ⲆⲆᐃᐃⵠᐃΔ: "img/night-book25.png",
    ⲆΔⵠⲆΔΔΔ: "img/day-book26.png",
    ᐃΔᐃᐃⵠⵠⲆ: "img/night-book26.png",
    ΔⵠΔⲆᐃⲆⵠ: "img/day-book27.png",
    ⲆᐃⵠᐃΔⲆΔ: "img/night-book27.png",
    ⲆⵠⵠⲆᐃⲆⵠ: "img/day-book28.png",
    ⲆΔⲆⵠᐃᐃⲆ: "img/night-book28.png",
    ⲆⲆΔⲆⲆⲆᐃ: "img/day-book29.png",
    ΔᐃΔⵠΔⲆᐃ: "img/night-book29.png",
    ΔΔΔΔⲆⵠᐃ: "img/day-book30.png",
    ᐃᐃᐃᐃⵠΔⲆ: "img/night-book30.png",
    ᐃⲆⵠΔᐃⲆᐃ: "img/day-book31.png",
    ⵠⲆⵠΔⲆᐃⲆ: "img/night-book31.png",
    ΔⲆⲆᐃΔⵠᐃ: "img/day-book32.png",
    ⵠΔⲆᐃⲆᐃΔ: "img/night-book32.png",
    ᐃⵠⲆΔⲆⲆⵠ: "img/day-book33.png",
    ⵠΔⵠⲆⲆΔᐃ: "img/night-book33.png",
    ⵠⵠⵠΔⲆᐃⵠ: "img/day-book34.png",
    ⵠⲆΔΔⲆᐃᐃ: "img/night-book34.png",
    ⲆⲆΔΔⵠᐃⲆ: "img/day-book35.png",
    ⵠΔⵠⲆᐃⵠⲆ: "img/night-book35.png",
    ⲆΔⵠⲆⲆⵠⵠ: "img/day-book36.png",
    ⲆΔΔⲆⲆΔᐃ: "img/night-book36.png",
    ⵠⵠᐃΔΔⲆᐃΔΔ: "img/day-book37.png",
    ᐃΔΔΔᐃᐃᐃⵠⲆ: "img/night-book37.png",
    ⲆⲆⵠⲆⵠΔⵠ: "img/day-book38.png",
    ⵠⵠⵠⲆᐃΔᐃ: "img/night-book38.png",
    ⲆΔᐃΔΔⲆⵠ: "img/day-book39.png",
    ΔΔⵠΔⵠⵠⲆ: "img/night-book39.png",
    ᐃᐃⵠᐃᐃⲆΔ: "img/day-book40.png",
    ᐃΔⲆⵠΔⵠΔ: "img/night-book40.png",
    ⲆⵠⲆⲆⵠⲆⵠ: "img/day-book41.png",
    ᐃⲆⲆΔⵠⲆⵠ: "img/night-book41.png",
    ⲆⲆⵠⵠⲆᐃᐃ: "img/day-book42.png",
    ⵠΔⲆΔⵠⵠΔ: "img/night-book42.png",
    ΔⵠΔⵠⵠⲆᐃ: "img/day-book43.png",
    ᐃⲆΔΔᐃⵠⵠ: "img/night-book43.png",
    ΔΔⵠⲆΔΔᐃ: "img/day-book44.png",
    ΔᐃᐃⲆⲆⵠᐃ: "img/night-book44.png",
    ⵠⲆⵠΔᐃᐃΔ: "img/day-book45.png",
    ΔΔΔΔⵠᐃⵠ: "img/night-book45.png",
    ΔᐃΔᐃⲆⵠⲆ: "img/day-book46.png",
    ⵠⲆⲆᐃᐃΔⲆ: "img/night-book46.png",
    ᐃᐃᐃⵠⵠⲆΔ: "img/day-book47.png",
    ΔΔⵠⲆⵠΔⵠ: "img/night-book47.png",
    ΔᐃⲆⲆⵠⵠⵠ: "img/day-book48.png",
    ᐃΔᐃᐃΔⲆᐃ: "img/night-book48.png",
    ΔⲆⲆⲆⲆᐃΔ: "img/day-book49.png",
    ⵠᐃᐃⵠᐃⵠᐃ: "img/night-book49.png",
    ⵠᐃⲆⵠⵠⵠΔ: "img/day-book50.png",
    ⲆΔⵠΔⵠⵠΔ: "img/night-book50.png",
    ᐃΔΔΔᐃᐃⲆ: "img/day-crate1.png",
    ⲆᐃⲆᐃⵠⵠᐃ: "img/night-crate1.png",
    ΔⵠΔΔᐃΔⲆ: "img/day-crate2.png",
    ᐃΔΔΔⵠΔᐃ: "img/night-crate2.png",
    ⵠⲆΔᐃᐃΔⲆ: "img/day-crate3.png",
    ΔᐃΔⵠᐃᐃⲆ: "img/night-crate3.png",
    ΔⵠⲆⵠⲆⵠΔ: "img/day-crate4.png",
    ᐃᐃᐃᐃⲆΔᐃ: "img/night-crate4.png",
    ⲆᐃᐃⲆⲆⵠᐃ: "img/day-crate5.png",
    ⲆⲆⵠᐃⵠⲆᐃ: "img/night-crate5.png",
    ΔΔⲆⵠⲆΔᐃ: "img/day-crate6.png",
    ΔⲆᐃΔⵠⲆΔ: "img/night-crate6.png",
    ΔᐃᐃΔΔΔⲆ: "img/day-crate7.png",
    ⵠΔᐃᐃⲆⲆᐃ: "img/night-crate7.png",
    ᐃⵠᐃᐃⲆⲆⵠ: "img/day-crate8.png",
    ᐃΔᐃΔᐃⲆⲆ: "img/night-crate8.png",
    ⲆᐃⵠⲆⲆΔᐃ: "img/day-crate9.png",
    ⲆⵠᐃΔΔⲆⵠ: "img/night-crate9.png",
    ΔⵠⲆⲆⵠⵠΔ: "img/day-crate10.png",
    ΔⲆΔΔΔᐃΔ: "img/night-crate10.png",
    ΔᐃⲆⵠᐃⲆᐃ: "img/day-crate11.png",
    ᐃᐃⵠⲆⵠᐃΔ: "img/night-crate11.png",
    ⵠⵠⵠⵠⲆᐃⲆ: "img/day-crate12.png",
    ⵠⵠⲆΔᐃⲆᐃ: "img/night-crate12.png",
    ᐃΔⲆⵠⵠⵠⵠ: "img/day-crate13.png",
    ΔⲆΔⲆⲆΔⵠ: "img/night-crate13.png",
    ᐃⵠΔᐃᐃᐃⲆ: "img/day-crate14.png",
    ᐃⵠᐃᐃⲆᐃⵠ: "img/night-crate14.png",
    ⲆΔᐃᐃΔⲆΔ: "img/day-crate15.png",
    ⲆⵠⵠⲆⲆⵠⲆ: "img/night-crate15.png",
    ⲆⵠⲆΔΔᐃⵠ: "img/day-crate16.png",
    ⵠΔΔᐃⵠΔⲆ: "img/night-crate16.png",
    ⲆⲆⲆⵠⲆⵠᐃ: "img/day-crate17.png",
    ΔⲆΔΔⵠⵠᐃ: "img/night-crate17.png",
    ᐃⵠᐃΔⲆⲆΔ: "img/day-crate18.png",
    ⲆⲆΔΔᐃⵠⲆ: "img/night-crate18.png",
    ᐃᐃᐃⲆⲆⵠⵠ: "img/day-crate19.png",
    ⵠΔⲆⵠΔᐃᐃ: "img/night-crate19.png",
    ΔΔΔⲆΔⵠⲆ: "img/day-crate20.png",
    ΔΔΔᐃΔΔⲆ: "img/night-crate20.png",
    ΔⵠᐃΔᐃⲆⵠ: "img/day-crate21.png",
    ⲆⲆᐃᐃⲆᐃᐃ: "img/night-crate21.png",
    ⵠⲆⵠⲆⵠⲆᐃ: "img/day-crate22.png",
    ⵠⵠⲆⲆΔⲆⲆ: "img/night-crate22.png",
    ΔⵠΔⵠᐃᐃⵠ: "img/day-crate23.png",
    ⵠΔᐃᐃⵠᐃⵠ: "img/night-crate23.png",
    ⲆⵠᐃᐃΔΔⲆ: "img/day-crate24.png",
    ΔΔⵠⵠΔⵠⵠ: "img/night-crate24.png",
    ⲆᐃΔΔⵠⵠⵠ: "img/day-crate25.png",
    ⲆⵠⲆᐃⲆⲆⲆ: "img/night-crate25.png",
    ⵠⵠⲆⵠⵠᐃⵠⵠⲆ: "img/day-crate26.png",
    ΔΔΔⲆΔⲆⲆΔΔ: "img/night-crate26.png",
    ᐃⵠΔⲆΔⵠΔⵠⵠ: "img/day-crate27.png",
    ⵠⲆⲆΔᐃΔⲆⲆⲆ: "img/night-crate27.png",
    ⵠⵠᐃⲆⵠⲆΔΔΔ: "img/day-crate28.png",
    ᐃΔⵠΔⲆΔⲆⵠᐃ: "img/night-crate28.png",
    ΔⵠⲆⲆΔᐃⲆⵠⲆ: "img/day-crate29.png",
    ⵠᐃⲆⵠᐃΔΔᐃⲆ: "img/night-crate29.png",
    ᐃᐃΔⲆΔⲆⵠᐃⲆ: "img/day-crate30.png",
    ΔᐃⲆⵠⲆᐃⲆᐃⵠ: "img/night-crate30.png",
    ΔⲆⵠⵠΔΔⵠⲆΔ: "img/day-crate31.png",
    ᐃΔⲆⲆⵠⲆΔⵠᐃ: "img/night-crate31.png",
    ⵠⵠⲆΔⲆⲆⵠⲆᐃ: "img/day-crate32.png",
    ⲆΔⲆⵠⵠⵠΔΔΔ: "img/night-crate32.png",
    ⵠⲆⵠᐃᐃᐃⵠᐃⲆ: "img/day-crate33.png",
    ⵠᐃⲆΔᐃⵠⲆⵠⵠ: "img/night-crate33.png",
    ⲆⵠΔⵠΔⵠΔⲆᐃ: "img/day-crate34.png",
    ΔᐃⲆⵠΔᐃᐃⲆⵠ: "img/night-crate34.png",
    ⵠⵠΔⲆⵠᐃᐃΔΔ: "img/day-crate35.png",
    ΔⲆⲆΔⲆΔᐃⲆⵠ: "img/night-crate35.png",
    ⲆⲆᐃⵠⲆⵠᐃⲆⲆ: "img/day-crate36.png",
    ⵠⵠΔᐃΔᐃᐃᐃⵠ: "img/night-crate36.png",
    ⲆΔⵠⵠⵠΔΔⵠΔ: "img/day-crate37.png",
    ᐃΔⲆⲆᐃᐃⵠⵠⵠ: "img/night-crate37.png",
    ΔᐃⵠᐃᐃᐃᐃⲆⵠ: "img/day-crate38.png",
    ᐃⵠᐃΔⲆⵠᐃᐃⲆ: "img/night-crate38.png",
    ⵠᐃΔΔⲆΔⲆⲆᐃ: "img/day-crate39.png",
    ΔⲆᐃᐃⵠⵠᐃⲆᐃ: "img/night-crate39.png",
    ⲆⵠΔᐃⲆᐃⲆΔᐃ: "img/day-crate40.png",
    ΔᐃⵠᐃᐃΔᐃⲆᐃ: "img/night-crate40.png",
    ΔᐃᐃᐃⲆΔⵠⲆᐃ: "img/day-crate41.png",
    ⵠᐃᐃⵠⲆⵠⵠⲆΔ: "img/night-crate41.png",
    ᐃᐃΔΔⲆⵠᐃᐃΔ: "img/day-crate42.png",
    ⲆΔⵠⲆΔⲆⲆⵠⲆ: "img/night-crate42.png",
    ⵠⲆⲆⵠᐃⵠᐃⲆⵠ: "img/day-crate43.png",
    ᐃⵠΔᐃΔⲆΔᐃⵠ: "img/night-crate43.png",
    ᐃᐃᐃⵠⲆᐃⵠᐃⵠ: "img/day-crate44.png",
    ⲆΔΔⵠⲆᐃⲆᐃᐃ: "img/night-crate44.png",
    ᐃⲆⲆⵠᐃⵠⲆΔΔ: "img/day-crate45.png",
    ΔᐃΔⵠΔⲆⲆⵠᐃ: "img/night-crate45.png",
    ΔⲆΔⵠⲆⲆΔᐃΔ: "img/day-crate46.png",
    ΔⲆⲆᐃⲆᐃΔⲆⵠ: "img/night-crate46.png",
    ⵠΔⲆⲆⲆΔⵠΔΔ: "img/day-crate47.png",
    ⲆⵠᐃΔΔΔⵠΔⵠ: "img/night-crate47.png",
    ΔΔᐃᐃᐃΔⵠᐃΔ: "img/day-crate48.png",
    ᐃΔᐃⲆⲆⵠΔⲆᐃ: "img/night-crate48.png",
    ᐃⵠⲆⵠⲆΔΔᐃⵠ: "img/day-crate49.png",
    ⲆΔΔΔΔΔⵠⵠᐃ: "img/night-crate49.png",
    ⵠⵠΔᐃᐃⲆΔᐃΔ: "img/day-crate50.png",
    ΔᐃᐃⵠΔⵠΔᐃⲆ: "img/night-crate50.png",
    ⲆⲆⲆⲆⲆΔⲆΔⲆ: "img/day-crate51.png",
    ΔΔΔΔⵠᐃᐃΔⵠ: "img/night-crate51.png",
    ᐃΔΔⲆᐃΔⲆΔΔ: "img/day-crate52.png",
    ΔᐃᐃⵠᐃΔᐃΔⵠ: "img/night-crate52.png",
    ᐃⵠᐃᐃᐃⲆΔⵠⵠ: "img/day-crate53.png",
    ⵠⲆⲆᐃᐃⲆⵠⵠᐃ: "img/night-crate53.png",
    ⲆⲆⲆΔᐃⲆΔᐃⲆ: "img/day-crate54.png",
    ⲆⵠⲆᐃΔΔᐃᐃᐃ: "img/night-crate54.png",
    ΔⲆᐃΔΔΔΔⲆΔ: "img/day-crate55.png",
    ΔⵠⲆⵠᐃⲆΔⵠΔ: "img/night-crate55.png",
    ΔⲆⲆᐃⵠⲆⲆⲆΔ: "img/day-crate56.png",
    ᐃΔᐃᐃⵠⵠᐃⵠᐃ: "img/night-crate56.png",
    ⲆⲆⵠⲆᐃⵠⵠᐃⵠ: "img/day-crate57.png",
    ⲆᐃⲆⲆⲆⵠⵠΔⲆ: "img/night-crate57.png",
    ᐃⲆᐃᐃⵠⵠⵠᐃᐃ: "img/day-crate58.png",
    ⲆᐃⲆⵠΔᐃⲆⲆᐃ: "img/night-crate58.png",
    ⵠⲆⲆⲆΔᐃΔΔⵠ: "img/day-crate59.png",
    ᐃᐃⲆⲆⵠⵠΔⲆΔ: "img/night-crate59.png",
    ⵠᐃⲆⵠⵠⵠⲆΔᐃ: "img/day-crate60.png",
    ⵠⲆⵠⵠⲆΔⵠΔⲆ: "img/night-crate60.png",
    ΔⵠᐃΔᐃⵠᐃΔⵠ: "img/day-crate61.png",
    ΔᐃᐃᐃⲆᐃᐃⲆᐃ: "img/night-crate61.png",
    ΔⲆⲆΔΔⵠᐃᐃⵠ: "img/day-crate62.png",
    ⲆⲆⵠᐃΔᐃⲆᐃᐃ: "img/night-crate62.png",
    ΔᐃΔⲆⲆⲆᐃⲆⵠ: "img/day-crate63.png",
    ᐃΔⵠⵠΔᐃᐃⲆⵠ: "img/night-crate63.png",
    ᐃᐃᐃᐃⲆᐃΔⲆΔ: "img/day-crate64.png",
    ᐃⵠⲆΔᐃΔⵠⲆᐃ: "img/night-crate64.png",
    ⵠΔⵠΔⵠⲆⵠΔⵠ: "img/day-crate65.png",
    ᐃΔΔⲆⲆᐃⵠΔΔ: "img/night-crate65.png",
    ΔⵠΔᐃⲆΔⵠΔᐃ: "img/day-crate66.png",
    ⵠⵠⲆᐃᐃΔⵠⵠⲆ: "img/night-crate66.png",
    ᐃᐃᐃⵠⲆⵠⲆⵠΔ: "img/day-crate67.png",
    ΔΔⵠⵠΔΔⵠᐃⲆ: "img/night-crate67.png",
    ᐃᐃⲆΔΔⲆⲆΔⵠ: "img/day-crate68.png",
    ΔⲆⵠⵠΔᐃΔΔⲆ: "img/night-crate68.png",
    ᐃᐃⲆΔⵠΔⲆⵠΔ: "img/day-crate69.png",
    ⵠⲆⲆᐃⵠᐃᐃⵠᐃ: "img/night-crate69.png",
    ΔΔⵠⲆⲆᐃⵠᐃⲆ: "img/day-crate70.png",
    ᐃⲆⲆᐃⵠⵠΔΔᐃ: "img/night-crate70.png",
    ⲆᐃΔⵠⲆⵠᐃΔᐃ: "img/day-crate71.png",
    ⵠΔΔΔⵠⵠΔⵠⲆ: "img/night-crate71.png",
    ΔΔΔΔᐃΔⲆΔⵠ: "img/day-crate72.png",
    ⲆᐃⵠᐃⲆᐃⲆⲆᐃ: "img/night-crate72.png",
    ΔⲆⵠⲆΔⵠⲆⵠΔ: "img/day-crate73.png",
    ⵠᐃⵠᐃΔⲆⵠᐃᐃ: "img/night-crate73.png",
    ⲆⵠⲆΔⲆΔΔⲆⵠ: "img/day-crate74.png",
    ᐃⵠᐃⲆΔΔᐃⲆⵠ: "img/night-crate74.png",
    ⲆⵠΔⵠᐃⲆΔⵠᐃ: "img/day-crate75.png",
    ᐃᐃᐃΔⲆΔⲆⲆΔ: "img/night-crate75.png",
    ⲆⲆⵠⲆⵠⲆⲆΔⲆ: "img/day-crate76.png",
    ΔᐃⲆΔΔⵠΔΔⵠ: "img/night-crate76.png",
    ⵠΔⵠⲆⲆᐃⵠΔᐃ: "img/day-crate77.png",
    ΔΔⲆⲆⲆᐃᐃⵠᐃ: "img/night-crate77.png",
    ΔΔⲆⲆⵠΔⲆΔΔ: "img/day-crate78.png",
    ΔΔᐃⲆᐃΔΔᐃΔ: "img/night-crate78.png",
    ΔⵠᐃⲆΔⵠᐃⵠΔ: "img/day-crate79.png",
    ⵠⵠⵠⲆΔΔΔΔⲆ: "img/night-crate79.png",
    ΔᐃΔⲆⲆⵠⵠⲆᐃ: "img/day-crate80.png",
    ΔⵠⲆᐃᐃⵠΔΔⲆ: "img/night-crate80.png",
    ⲆᐃⵠⵠⲆⲆΔⲆⲆ: "img/day-crate81.png",
    ᐃⲆⵠᐃⵠⲆⵠⲆΔ: "img/night-crate81.png",
    ⲆⲆᐃΔΔⵠᐃΔΔ: "img/day-crate82.png",
    ΔⲆⲆᐃᐃⵠΔᐃⵠ: "img/night-crate82.png",
    ΔⲆᐃⵠᐃᐃΔᐃⵠ: "img/day-crate83.png",
    ⵠΔᐃΔⲆⵠΔⲆⵠ: "img/night-crate83.png",
    ΔⲆΔΔΔⲆⵠⲆᐃ: "img/day-crate84.png",
    ⵠᐃⲆᐃⲆΔⲆⲆᐃ: "img/night-crate84.png",
    ᐃΔⲆⲆⵠⵠⲆΔⵠ: "img/day-herb0.png",
    ΔᐃᐃⲆⵠⵠᐃᐃᐃ: "img/day-herb1.png",
    ⲆΔΔⵠᐃᐃᐃΔⲆ: "img/day-herb2.png",
    ΔⵠⵠᐃᐃΔⵠΔⲆ: "img/day-herb3.png",
    ⵠΔΔᐃΔⲆΔⵠⵠ: "img/day-herb4.png",
    ᐃⲆⵠⵠᐃⵠΔᐃᐃ: "img/day-herb5.png",
    ᐃᐃⵠⲆᐃᐃⵠⲆᐃ: "img/day-herb6.png",
    ΔᐃⲆᐃΔᐃΔⵠᐃ: "img/day-herb7.png",
    ΔⵠⲆΔⲆⲆᐃᐃΔ: "img/day-herb8.png",
    ⵠᐃᐃⲆⵠⲆΔⲆⲆ: "img/day-herb9.png",
    ᐃⵠⲆᐃᐃⵠᐃⲆⵠ: "img/day-herb10.png",
    ⵠΔⵠⵠⲆᐃᐃᐃⵠ: "img/day-herb11.png",
    ᐃᐃⲆΔⲆⲆΔᐃΔ: "img/day-herb12.png",
    ⲆᐃⵠᐃⲆᐃΔΔⵠ: "img/day-herb13.png",
    ᐃⵠⵠᐃᐃⲆⵠᐃΔ: "img/day-herb14.png",
    ᐃᐃⵠⲆΔⲆΔⵠΔ: "img/day-herb15.png",
    ΔⵠᐃᐃⲆᐃΔᐃΔ: "img/day-shell0.png",
    ⲆᐃⵠΔⵠᐃΔΔⵠ: "img/day-shell1.png",
    ⵠᐃᐃΔⵠⲆⵠⵠⵠ: "img/day-shell2.png",
    ᐃⲆⵠΔΔⲆΔΔᐃ: "img/day-leaf1.png",
    ⲆⵠᐃΔⲆⲆⵠⲆΔ: "img/day-leaf2.png",
    ΔΔⲆⲆᐃⵠⵠᐃᐃ: "img/day-leaf3.png",
    ⵠⵠⲆⲆᐃΔⵠΔⲆ: "img/day-leaf4.png",
    ⲆᐃⵠⲆⵠΔᐃⵠᐃ: "img/day-leaf5.png",
    ΔᐃΔⲆⵠᐃⲆΔⲆ: "img/day-leaf6.png",
    ᐃⵠΔᐃᐃΔⲆⵠⲆ: "img/day-leaf7.png",
    ⲆΔᐃⵠⵠⵠⵠⵠⵠ: "img/day-leaf8.png",
    ΔⲆⲆᐃΔᐃⲆⲆΔ: "img/day-rock0.png",
    ⵠΔΔⵠⲆᐃⵠⲆⵠ: "img/day-rock1.png",
    ᐃᐃⲆᐃⵠΔⲆᐃⲆ: "img/day-rock2.png",
    ᐃᐃᐃⲆΔⵠⲆΔᐃ: "img/day-rock3.png",
    ⵠᐃΔᐃⲆⲆⵠᐃᐃ: "img/day-rock4.png",
    ᐃⲆΔⲆⵠᐃΔᐃⵠ: "img/day-rock5.png",
    ᐃⵠⵠᐃᐃⲆⵠΔⵠ: "img/day-rock6.png",
    ⲆⵠᐃⲆⲆⵠΔᐃⲆ: "img/day-rock7.png",
    ΔⲆⵠΔⲆⵠⲆΔⲆ: "img/day-rock8.png",
    ΔΔΔᐃΔⵠⵠⵠᐃ: "img/day-rock9.png",
    ⵠⵠᐃᐃⵠᐃᐃᐃⵠ: "img/day-rock10.png",
    ᐃᐃᐃᐃⵠᐃⵠⵠⵠ: "img/day-rock11.png",
    ⵠΔᐃΔⵠⲆⲆⵠⲆ: "img/day-rock12.png",
    ΔᐃⲆⲆⵠᐃᐃⲆΔ: "img/day-rock13.png",
    ⲆᐃΔⵠΔᐃΔⲆᐃ: "img/day-flower1.png",
    ⲆⲆⵠΔΔΔΔⲆᐃ: "img/day-flower2.png",
    ⲆⵠⲆⵠⵠᐃΔⲆᐃ: "img/day-flower3.png",
    ⵠⵠⲆⵠᐃᐃᐃΔⲆ: "img/day-flower4.png",
    ΔⲆⵠΔⲆⵠⵠⵠⵠ: "img/day-flower5.png",
    ᐃⲆᐃΔⵠᐃΔⵠᐃ: "img/day-flower6.png",
    ᐃⵠⲆⲆᐃⵠΔᐃⲆ: "img/day-flower7.png",
    ᐃΔΔΔᐃΔᐃⲆⲆ: "img/day-flower8.png",
    ᐃΔΔΔΔⲆΔⲆⵠ: "img/day-flower9.png",
    ᐃⲆⵠᐃⲆⲆᐃⲆⵠ: "img/day-herb16.png",
    ᐃᐃᐃⵠⲆⲆᐃⵠΔ: "img/day-herb17.png",
    ⵠΔⵠΔⵠᐃΔΔᐃ: "img/day-herb18.png",
    ΔᐃΔⵠⵠⵠⲆᐃⲆ: "img/day-herb19.png",
    ΔΔⵠⵠΔΔⲆᐃⲆ: "img/day-herb20.png",
    ΔⵠⵠΔᐃΔⵠΔⲆ: "img/day-herb21.png",
    ⵠΔΔⲆΔⵠⵠᐃᐃ: "img/day-jungle-ground0.png",
    ⵠⵠⵠΔⵠⲆᐃⵠⵠ: "img/day-jungle-ground1.png",
    ΔⲆⵠᐃᐃⵠⵠᐃⲆ: "img/day-jungle-ground2.png",
    ᐃΔΔⲆⵠⵠⵠΔⵠ: "img/day-jungle-ground3.png",
    ⲆΔⲆᐃⵠᐃᐃᐃᐃ: "img/day-jungle-pebble0.png",
    ᐃⲆΔΔΔⵠΔⵠⲆ: "img/day-jungle-pebble1.png",
    ΔᐃⲆᐃⵠⲆΔⲆᐃ: "img/day-jungle-pebble2.png",
    ⵠⲆΔᐃⲆᐃΔⲆᐃ: "img/day-jungle-pebble3.png",
    ⵠᐃⲆᐃᐃᐃᐃⵠΔ: "img/day-jungle-pebble4.png",
    ⵠΔⲆᐃⵠⵠΔⵠⲆ: "img/day-jungle-pebble5.png",
    ⲆΔΔᐃⵠⵠⵠᐃᐃ: "img/night-herb0.png",
    ⲆΔⲆΔⵠⲆⲆⲆⲆ: "img/night-herb1.png",
    ΔᐃⲆⵠⵠⲆⲆΔΔ: "img/night-herb2.png",
    ΔᐃⵠⲆᐃⵠⲆΔⵠ: "img/night-herb3.png",
    ᐃⲆΔⵠⲆᐃⲆΔᐃ: "img/night-herb4.png",
    ⵠΔⵠⵠⲆΔⲆΔⵠ: "img/night-herb5.png",
    ᐃᐃⵠᐃᐃⲆΔᐃⲆ: "img/night-herb6.png",
    ⵠⵠⵠⵠᐃⵠᐃⲆΔ: "img/night-herb7.png",
    ⵠⲆΔⵠⲆⲆⲆⲆᐃ: "img/night-herb8.png",
    ⵠⲆΔᐃᐃⵠⵠⲆᐃ: "img/night-herb9.png",
    ⵠⵠᐃⵠᐃΔⵠⵠΔ: "img/night-herb10.png",
    ΔΔⲆᐃⵠᐃⲆⲆΔ: "img/night-herb11.png",
    ⵠΔΔᐃᐃⵠΔⵠⲆ: "img/night-herb12.png",
    ⲆᐃⵠᐃᐃᐃᐃᐃΔ: "img/night-herb13.png",
    ⵠᐃᐃΔⲆⲆᐃᐃⵠ: "img/night-herb14.png",
    ΔᐃᐃⲆΔᐃΔⵠᐃ: "img/night-herb15.png",
    ⵠⲆΔᐃⵠⵠⲆΔΔ: "img/night-shell0.png",
    ⵠΔΔᐃⲆΔΔᐃᐃ: "img/night-shell1.png",
    ⵠᐃΔΔΔⲆΔᐃⲆ: "img/night-shell2.png",
    ⵠΔⲆⵠⵠΔΔⲆᐃ: "img/night-leaf1.png",
    ΔΔΔΔⵠᐃⵠᐃᐃ: "img/night-leaf2.png",
    ⲆⲆΔΔⵠⵠⲆⲆⵠ: "img/night-leaf3.png",
    ⵠⵠᐃΔΔΔᐃⲆΔ: "img/night-leaf4.png",
    ᐃΔᐃΔⲆᐃᐃᐃΔ: "img/night-leaf5.png",
    ⲆⲆᐃⲆΔΔⵠΔᐃ: "img/night-leaf6.png",
    ⲆΔᐃⵠᐃⵠⲆⲆΔ: "img/night-leaf7.png",
    ⵠⲆᐃᐃⲆⲆⵠⲆⵠ: "img/night-leaf8.png",
    ⵠⵠⲆⵠᐃΔⵠⲆΔ: "img/night-rock0.png",
    ΔΔⵠᐃⵠⲆΔΔⲆ: "img/night-rock1.png",
    ⵠⲆΔⲆⵠⵠΔΔΔ: "img/night-rock2.png",
    ⲆⲆΔⵠⲆⵠⲆⲆⵠ: "img/night-rock3.png",
    ᐃⲆΔⵠⵠⲆᐃΔᐃ: "img/night-rock4.png",
    ⵠⵠΔⲆΔⲆΔΔᐃ: "img/night-rock5.png",
    ΔⲆΔⵠⲆⵠΔⲆⲆ: "img/night-rock6.png",
    ΔᐃⵠⵠⲆᐃᐃⵠΔ: "img/night-rock7.png",
    ⲆⵠᐃⵠⲆⲆⲆᐃᐃ: "img/night-rock8.png",
    ⲆⵠᐃⲆᐃΔⲆⵠΔ: "img/night-rock9.png",
    ⲆᐃⵠⵠⲆΔΔΔᐃ: "img/night-rock10.png",
    ΔⲆᐃⵠⲆⲆΔⵠⵠ: "img/night-rock11.png",
    ᐃⲆⵠᐃΔⲆⲆⲆΔ: "img/night-rock12.png",
    ⲆⲆⵠᐃᐃⵠⲆⵠⲆ: "img/night-rock13.png",
    ΔᐃΔΔⲆᐃΔⵠⲆ: "img/night-flower1.png",
    ᐃⵠΔⵠⲆⲆⵠⲆᐃ: "img/night-flower2.png",
    ΔⵠⵠΔΔΔⲆⲆⵠ: "img/night-flower3.png",
    ᐃᐃᐃΔⵠⲆΔᐃᐃ: "img/night-flower4.png",
    ᐃΔⵠⵠΔΔⲆᐃⲆ: "img/night-flower5.png",
    ⲆᐃΔᐃⵠΔⵠⲆⵠ: "img/night-flower6.png",
    ⵠΔᐃΔᐃΔΔⵠⵠ: "img/night-flower7.png",
    ⵠⵠⲆᐃᐃᐃΔⲆᐃ: "img/night-flower8.png",
    ⵠΔⲆⵠⲆⲆⵠᐃⵠ: "img/night-flower9.png",
    ᐃⲆΔΔᐃΔⲆΔᐃ: "img/night-herb16.png",
    ᐃᐃⵠΔⵠΔΔΔⵠ: "img/night-herb17.png",
    ΔΔΔᐃᐃΔⵠΔΔ: "img/night-herb18.png",
    ⵠⵠⲆΔᐃΔⵠᐃⵠ: "img/night-herb19.png",
    ᐃΔᐃⲆᐃΔⲆΔⲆ: "img/night-herb20.png",
    ΔΔⲆᐃⵠᐃΔΔΔ: "img/night-herb21.png",
    ΔⲆᐃᐃⵠᐃΔΔⵠ: "img/night-jungle-ground0.png",
    ΔᐃΔΔΔⵠⲆⵠᐃ: "img/night-jungle-ground1.png",
    ΔΔΔᐃⵠⵠⲆⲆᐃ: "img/night-jungle-ground2.png",
    ⵠⲆΔⵠΔΔᐃΔⲆ: "img/night-jungle-ground3.png",
    ⲆⲆᐃᐃΔⲆΔⲆΔ: "img/night-jungle-pebble0.png",
    ⲆⵠⵠⲆᐃⲆⵠΔᐃ: "img/night-jungle-pebble1.png",
    ᐃΔⲆΔᐃⵠΔᐃΔ: "img/night-jungle-pebble2.png",
    ⵠⵠⲆΔᐃΔᐃΔΔ: "img/night-jungle-pebble3.png",
    ᐃΔᐃⵠⵠⵠⲆᐃⲆ: "img/night-jungle-pebble4.png",
    ᐃᐃⲆᐃᐃⵠΔᐃᐃ: "img/night-jungle-pebble5.png",
    ⲆᐃⵠⲆΔᐃᐃΔΔ: "img/day-river000-010-000.png",
    ⵠⵠᐃΔΔᐃΔᐃΔ: "img/day-river000-010-010.png",
    ⵠᐃᐃΔΔⵠⲆⵠΔ: "img/day-river000-011-000.png",
    ΔⵠᐃⲆᐃⵠⲆᐃⵠ: "img/day-river000-011-010.png",
    ᐃΔᐃⵠᐃⲆⵠᐃⲆ: "img/day-river000-011-011.png",
    ᐃⲆᐃΔⲆᐃⲆᐃⵠ: "img/day-river000-110-000.png",
    ⵠᐃⵠΔᐃⲆᐃⲆⲆ: "img/day-river000-110-010.png",
    ᐃⵠΔΔᐃΔᐃΔᐃ: "img/day-river000-110-110.png",
    ΔᐃⵠⵠΔⲆΔⵠⲆ: "img/day-river000-111-000.png",
    ⲆᐃᐃᐃⲆΔᐃⲆᐃ: "img/day-river000-111-010.png",
    ΔΔⲆᐃᐃⵠΔⲆⲆ: "img/day-river000-111-011.png",
    ⲆᐃⵠⵠᐃᐃⵠⲆⵠ: "img/day-river000-111-110.png",
    ⵠΔΔΔΔⲆⲆᐃΔ: "img/day-river000-111-111.png",
    ΔⵠⲆΔΔⲆⲆᐃᐃ: "img/day-river010-010-000.png",
    ⲆⲆⲆᐃⲆⵠΔⵠⵠ: "img/day-river010-010-010.png",
    ⵠⵠΔᐃΔⲆᐃΔⵠ: "img/day-river010-011-000.png",
    ᐃᐃⲆⵠᐃΔᐃⲆⲆ: "img/day-river010-011-010.png",
    ⵠⵠΔᐃⲆΔᐃᐃⵠ: "img/day-river010-011-011.png",
    ⵠⲆⵠⲆⲆⲆᐃᐃⲆ: "img/day-river010-110-000.png",
    ᐃⲆⵠᐃⵠⵠᐃᐃᐃ: "img/day-river010-110-010.png",
    ΔⲆᐃᐃⲆⵠⲆᐃΔ: "img/day-river010-110-110.png",
    ᐃⲆΔᐃⲆⵠⲆⲆΔ: "img/day-river010-111-000.png",
    ᐃⵠᐃⲆⲆΔⵠΔΔ: "img/day-river010-111-010.png",
    ΔΔⲆⲆⵠⲆᐃⲆⵠ: "img/day-river010-111-011.png",
    ᐃᐃᐃⲆⲆΔⵠⵠⵠ: "img/day-river010-111-110.png",
    ⲆᐃⲆⵠΔᐃⲆΔΔ: "img/day-river010-111-111.png",
    ⵠⵠⵠⲆΔΔⲆΔΔ: "img/day-river011-011-000.png",
    ᐃᐃⲆΔᐃⲆⲆⵠⲆ: "img/day-river011-011-010.png",
    ᐃΔⵠᐃⵠⲆⵠΔᐃ: "img/day-river011-011-011.png",
    ΔᐃΔⲆⵠⵠⲆⵠᐃ: "img/day-river011-111-000.png",
    ᐃΔⲆⵠΔⲆΔΔΔ: "img/day-river011-111-010.png",
    ⲆΔⲆΔΔᐃⵠⵠΔ: "img/day-river011-111-011.png",
    ΔⲆΔᐃⵠΔⲆᐃΔ: "img/day-river011-111-110.png",
    ⲆΔⲆⲆᐃΔⵠΔᐃ: "img/day-river011-111-111.png",
    ᐃⵠᐃᐃΔⲆⵠⲆᐃ: "img/day-river110-110-000.png",
    ⲆⲆΔΔᐃΔΔⵠΔ: "img/day-river110-110-010.png",
    ᐃΔⵠΔᐃΔⲆᐃᐃ: "img/day-river110-110-110.png",
    ⲆᐃᐃᐃᐃⲆᐃᐃⵠ: "img/day-river110-111-000.png",
    ΔΔⲆⵠⵠᐃⲆⲆΔ: "img/day-river110-111-010.png",
    ⵠⵠⲆᐃᐃΔⲆᐃⲆ: "img/day-river110-111-011.png",
    ⲆⵠᐃⵠΔⲆⲆΔΔ: "img/day-river110-111-110.png",
    ᐃᐃᐃᐃⵠᐃⲆᐃᐃ: "img/day-river110-111-111.png",
    ΔⲆⲆⵠᐃⵠΔ: "img/day-river111-111-011.png",
    ⵠⵠΔΔΔΔᐃⲆᐃ: "img/day-river111-111-110.png",
    ΔⲆⲆⵠᐃⵠΔ: "img/day-river111-111-011.png",
    ⵠⲆⵠᐃⲆⲆⵠᐃⲆ: "img/day-river111-111-000.png",
    ᐃⵠΔᐃⵠᐃΔΔⲆ: "img/day-river111-111-111.png",
    ΔᐃΔᐃⵠⵠⲆΔΔ: "img/day-river111-111-010.png",
    ⲆⲆⲆᐃⵠⲆᐃᐃⲆ: "img/night-river000-010-000.png",
    ⵠᐃⵠΔⵠⲆⵠⵠⵠ: "img/night-river000-010-010.png",
    ᐃΔᐃᐃΔᐃⲆΔⲆ: "img/night-river000-011-000.png",
    ᐃⲆΔΔⲆΔᐃⲆⵠ: "img/night-river000-011-010.png",
    ᐃᐃᐃΔΔⵠΔΔΔ: "img/night-river000-011-011.png",
    ⵠᐃᐃⲆⲆᐃΔΔᐃ: "img/night-river000-110-000.png",
    ᐃΔᐃⵠᐃΔⵠⲆΔ: "img/night-river000-110-010.png",
    ⲆᐃΔⲆⲆΔΔᐃⲆ: "img/night-river000-110-110.png",
    ΔᐃΔΔⲆⲆΔⵠⲆ: "img/night-river000-111-000.png",
    ⲆⲆⵠΔⵠⵠⵠΔᐃ: "img/night-river000-111-010.png",
    ᐃⲆⵠⲆⵠΔⵠΔΔ: "img/night-river000-111-011.png",
    ᐃⵠⲆᐃᐃⵠⵠΔⲆ: "img/night-river000-111-110.png",
    ⲆᐃΔⲆᐃΔⲆΔⵠ: "img/night-river000-111-111.png",
    ΔⲆⵠⵠⲆΔᐃⲆᐃ: "img/night-river010-010-000.png",
    ΔⲆᐃⲆΔⵠⲆⵠΔ: "img/night-river010-010-010.png",
    ⵠΔⲆΔᐃᐃΔΔⵠ: "img/night-river010-011-000.png",
    ΔΔⲆᐃⲆΔⲆⲆΔ: "img/night-river010-011-010.png",
    ⵠⲆΔΔᐃⵠΔⲆᐃ: "img/night-river010-011-011.png",
    ⲆΔⲆᐃⵠΔⵠΔⵠ: "img/night-river010-110-000.png",
    ⲆⲆⲆΔᐃᐃⵠΔᐃ: "img/night-river010-110-010.png",
    ᐃⲆⲆⵠⲆΔⲆΔᐃ: "img/night-river010-110-110.png",
    ᐃΔⲆⵠⵠⲆⲆΔΔ: "img/night-river010-111-000.png",
    ⲆⵠᐃᐃᐃΔⲆⲆᐃ: "img/night-river010-111-010.png",
    ⵠᐃᐃΔᐃⵠⲆᐃΔ: "img/night-river010-111-011.png",
    ᐃⲆⲆⲆΔⲆⲆᐃᐃ: "img/night-river010-111-110.png",
    ⲆⲆᐃΔⲆᐃⲆⵠΔ: "img/night-river010-111-111.png",
    ⲆΔΔⵠⵠⵠⵠΔⵠ: "img/night-river011-011-000.png",
    ⲆⲆᐃᐃᐃΔⲆⵠᐃ: "img/night-river011-011-010.png",
    ⲆΔⵠᐃᐃⲆᐃΔⵠ: "img/night-river011-011-011.png",
    ⲆⲆⲆⵠΔⲆⵠⲆⲆ: "img/night-river011-111-000.png",
    ᐃΔᐃᐃᐃᐃⲆⵠᐃ: "img/night-river011-111-010.png",
    ⲆⲆⵠⲆᐃⵠᐃⲆⲆ: "img/night-river011-111-011.png",
    ⲆⲆᐃⵠΔΔΔΔΔ: "img/night-river011-111-110.png",
    ΔΔⵠΔⵠⲆⵠΔⲆ: "img/night-river011-111-111.png",
    ⵠΔᐃΔᐃᐃⲆΔᐃ: "img/night-river110-110-000.png",
    ΔⵠΔᐃⵠⵠΔⵠᐃ: "img/night-river110-110-010.png",
    ⵠⲆⵠΔΔΔⲆᐃⲆ: "img/night-river110-110-110.png",
    ⵠⲆⵠⲆΔᐃⲆΔⵠ: "img/night-river110-111-000.png",
    ΔⵠᐃΔΔⲆⵠⵠΔ: "img/night-river110-111-010.png",
    ΔᐃΔⲆⵠⵠⵠΔⵠ: "img/night-river110-111-011.png",
    ΔΔⵠΔᐃΔᐃᐃⲆ: "img/night-river110-111-110.png",
    ⵠΔⲆᐃⵠⲆⵠⲆᐃ: "img/night-river110-111-111.png",
    ᐃΔⵠⲆⵠⲆⵠ: "img/night-river111-111-011.png",
    ⲆᐃⵠⲆⲆⵠᐃⵠᐃ: "img/night-river111-111-110.png",
    ᐃΔⵠⲆⵠⲆⵠ: "img/night-river111-111-011.png",
    ΔⲆⵠⲆᐃΔΔⲆΔ: "img/night-river111-111-000.png",
    ⲆⲆΔⲆΔᐃᐃᐃΔ: "img/night-river111-111-111.png",
    ⲆⵠⵠⲆⲆΔⵠⵠⲆ: "img/night-river111-111-010.png",
    ᐃΔⵠᐃΔⵠΔ: "img/day-pebblecompo1.png",
    ⵠᐃΔᐃⲆ: "img/day-pebblecompo2.png",
    ᐃⲆΔΔⲆ: "img/day-pebblecompo3.png",
    ⵠⵠⲆΔⲆⵠⲆ: "img/day-pebblecompo4.png",
    ⲆᐃⵠΔⲆⲆᐃ: "img/day-pebblecompo5.png",
    ⵠᐃᐃⲆΔΔΔ: "img/day-pebblecompo6.png",
    ⵠⲆᐃΔⲆ: "img/day-pebblecompo7.png",
    ⲆᐃᐃΔⲆⵠᐃⲆⲆ: "img/day-pebblecompo8.png",
    ΔⵠΔᐃᐃᐃⲆ: "img/day-pebblecompo9.png",
    ⲆᐃΔⲆΔΔᐃ: "img/day-pebblecompo10.png",
    ⵠᐃⵠᐃⲆ: "img/day-pebblecompo11.png",
    ⵠⵠΔⵠⵠⲆⲆ: "img/day-pebblecompo12.png",
    ⲆᐃⲆΔⲆⲆⲆ: "img/day-pebblecompo13.png",
    ΔⵠⲆⲆΔⵠΔ: "img/day-pebblecompo14.png",
    ⵠΔΔⵠΔᐃᐃ: "img/day-pebblecompo15.png",
    ᐃΔⲆⲆⵠᐃᐃ: "img/day-pebblecompo16.png",
    ⵠΔⲆᐃⵠ: "img/day-pebblecompo17.png",
    ⵠᐃⵠⲆⲆΔΔ: "img/day-pebblecompo18.png",
    ᐃⲆⲆΔᐃⲆⵠ: "img/day-pebblecompo19.png",
    ⵠΔᐃΔⲆ: "img/day-pebblecompo20.png",
    ᐃΔⲆⲆⲆ: "img/day-pebblecompo21.png",
    ⵠⵠⲆⵠᐃⵠΔ: "img/day-pebblecompo22.png",
    ΔⵠⵠⲆΔⲆⵠ: "img/day-pebblecompo23.png",
    ⲆΔⲆⵠᐃⵠΔ: "img/day-pebblecompo24.png",
    ΔᐃⵠΔⲆ: "img/day-pebblecompo25.png",
    ΔΔΔᐃⲆ: "img/day-pebblecompo26.png",
    ΔΔⲆⲆΔⵠⲆ: "img/day-pebblecompo27.png",
    ᐃΔᐃᐃⵠ: "img/day-pebblecompo28.png",
    ⵠΔΔᐃⲆⲆⵠ: "img/night-pebblecompo1.png",
    ⵠⵠᐃΔᐃ: "img/night-pebblecompo2.png",
    ΔⵠⵠⵠΔ: "img/night-pebblecompo3.png",
    ⲆᐃⲆⵠⵠⵠⲆ: "img/night-pebblecompo4.png",
    ΔⵠⵠⵠΔΔⵠ: "img/night-pebblecompo5.png",
    ΔΔΔⵠΔΔⲆ: "img/night-pebblecompo6.png",
    ⵠΔΔΔⲆ: "img/night-pebblecompo7.png",
    ᐃᐃΔⲆⵠᐃⵠⵠΔ: "img/night-pebblecompo8.png",
    ᐃⲆΔⲆⲆᐃᐃ: "img/night-pebblecompo9.png",
    ⲆⲆⵠᐃᐃⵠᐃ: "img/night-pebblecompo10.png",
    ⲆⵠΔⲆΔ: "img/night-pebblecompo11.png",
    ⵠΔⲆⵠΔⵠⲆ: "img/night-pebblecompo12.png",
    ΔⲆⵠᐃⵠⵠⵠ: "img/night-pebblecompo13.png",
    ⲆᐃᐃᐃⲆⲆⵠ: "img/night-pebblecompo14.png",
    ᐃᐃᐃⵠΔΔⲆ: "img/night-pebblecompo15.png",
    ⵠⵠⵠᐃΔⵠΔ: "img/night-pebblecompo16.png",
    ⲆⵠⲆᐃⵠ: "img/night-pebblecompo17.png",
    Ⲇⵠᐃⵠⵠᐃᐃ: "img/night-pebblecompo18.png",
    ⲆⲆᐃΔⲆᐃΔ: "img/night-pebblecompo19.png",
    ⵠᐃᐃΔⵠ: "img/night-pebblecompo20.png",
    ᐃᐃᐃⵠΔ: "img/night-pebblecompo21.png",
    ⲆⵠⵠᐃᐃΔᐃ: "img/night-pebblecompo22.png",
    ΔΔⵠⲆΔⲆᐃ: "img/night-pebblecompo23.png",
    ΔⵠⵠⲆⲆⵠᐃ: "img/night-pebblecompo24.png",
    ⵠΔⲆⵠΔ: "img/night-pebblecompo25.png",
    ΔᐃΔΔⲆ: "img/night-pebblecompo26.png",
    ⵠⲆⲆᐃΔΔᐃ: "img/night-pebblecompo27.png",
    ⵠΔⲆΔⲆ: "img/night-pebblecompo28.png",
    ⵠᐃⲆᐃᐃⵠΔⵠᐃ: "img/day-baby-mammoth.png",
    ᐃⵠⵠΔⵠⵠⵠⲆⵠ: "img/day-baby-mammoth-tamed.png",
    ΔⲆᐃΔⵠⵠᐃΔⵠ: "img/day-baby-mammoth-angry.png",
    ᐃⵠΔᐃΔⵠⵠⲆⲆ: "img/night-baby-mammoth.png",
    ⲆᐃⲆΔⵠΔⵠⲆⵠ: "img/night-baby-mammoth-tamed.png",
    ᐃᐃⲆⵠᐃⵠΔⵠⵠ: "img/night-baby-mammoth-angry.png",
    ᐃᐃⲆⲆⵠⵠᐃᐃⲆ: "img/inv-mammoth-out.png",
    ⲆⵠⵠⲆᐃᐃⲆᐃⲆ: "img/inv-mammoth-in.png",
    ΔⵠⵠΔⲆΔΔᐃⲆ: "img/inv-mammoth-click.png",
    ⵠᐃⲆⲆᐃⲆΔ: "img/hurt-baby-mammoth.png",
    ⲆⵠᐃΔⲆⲆΔ: "img/baby-mammoth-step.png",
    ⵠⲆᐃⲆΔⲆⲆⲆᐃ: "img/day-flower-hat.png",
    ⵠⵠⵠⲆⲆᐃⲆⵠⵠ: "img/night-flower-hat.png",
    ⵠⲆⵠΔⵠⲆⵠΔΔ: "img/inv-flower-hat-out.png",
    ⵠΔⵠᐃⵠΔⵠΔᐃ: "img/inv-flower-hat-in.png",
    ⲆⵠⲆᐃΔΔⲆⲆΔ: "img/inv-flower-hat-click.png",
    ΔⲆᐃᐃⵠΔΔΔΔ: "img/day-fur-hat.png",
    ⲆΔⲆᐃⲆⵠΔⵠⲆ: "img/night-fur-hat.png",
    ⵠⲆⵠⵠΔΔⲆⵠⵠ: "img/inv-fur-hat-out.png",
    ᐃⵠⲆⵠⵠⵠⲆⲆⲆ: "img/inv-fur-hat-in.png",
    ᐃΔⵠⵠⵠⲆᐃΔΔ: "img/inv-fur-hat-click.png",
    ⵠⵠΔᐃΔⲆᐃΔᐃ: "img/day-mammoth.png",
    ⵠᐃⲆΔΔⵠⵠⲆⲆ: "img/night-mammoth.png",
    ⵠᐃⵠⲆΔᐃⲆ: "img/hurt-mammoth.png",
    ⵠΔᐃⵠⵠΔⲆⵠⲆ: "img/inv-mammoth-fur-out.png",
    ΔΔΔᐃΔⵠΔⵠΔ: "img/inv-mammoth-fur-in.png",
    ΔΔⲆᐃΔⲆᐃⲆⵠ: "img/inv-mammoth-fur-click.png",
    ᐃⲆⲆΔⵠΔᐃᐃⵠ: "img/inv-wood-bow-out.png",
    ᐃᐃᐃΔⲆΔΔⵠⲆ: "img/inv-wood-bow-in.png",
    ⵠᐃⲆᐃᐃᐃⲆⵠⵠ: "img/inv-wood-bow-click.png",
    ⵠΔⲆΔⵠᐃΔᐃⵠ: "img/inv-wood-arrow-out.png",
    ⵠⲆⲆⵠⵠᐃᐃⲆⲆ: "img/inv-wood-arrow-in.png",
    ⲆⵠⲆΔⵠᐃᐃΔⲆ: "img/inv-wood-arrow-click.png",
    ⵠⵠΔⵠⵠⵠᐃⲆΔ: "img/day-wood-bow2.png",
    ΔᐃⵠⲆΔⵠⲆΔᐃ: "img/night-wood-bow2.png",
    ⵠⵠⵠⲆᐃⲆΔ: "img/day-wood-arrow.png",
    ⲆᐃⲆⵠΔⵠΔ: "img/night-wood-arrow.png",
    ΔⵠⵠⲆᐃᐃⲆⵠΔ: "img/inv-stone-bow-out.png",
    ⵠⲆⵠⵠⵠⲆⵠᐃΔ: "img/inv-stone-bow-in.png",
    ᐃⲆⵠⲆᐃⵠᐃⵠⲆ: "img/inv-stone-bow-click.png",
    ⲆΔⲆⵠⲆⲆΔⵠᐃ: "img/inv-stone-arrow-out.png",
    ⲆΔᐃᐃⵠⵠⵠⵠⵠ: "img/inv-stone-arrow-in.png",
    ⵠΔⲆⵠΔᐃΔΔᐃ: "img/inv-stone-arrow-click.png",
    ᐃⵠᐃⵠⵠΔⵠⵠⲆ: "img/day-stone-bow.png",
    ᐃⵠⲆⵠΔⵠⵠᐃⵠ: "img/night-stone-bow.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/day-stone-arrow.png",
    ΔⲆᐃΔΔΔΔ: "img/night-stone-arrow.png",
    ΔᐃᐃᐃΔΔⵠΔᐃ: "img/inv-gold-bow-out.png",
    ᐃᐃⲆᐃⲆΔᐃΔᐃ: "img/inv-gold-bow-in.png",
    ᐃⵠΔⲆΔΔΔᐃΔ: "img/inv-gold-bow-click.png",
    ᐃᐃᐃⵠΔΔⲆΔⲆ: "img/inv-gold-arrow-out.png",
    ⲆᐃⲆΔⵠⵠᐃⵠⲆ: "img/inv-gold-arrow-in.png",
    ᐃⵠⲆΔᐃᐃᐃⲆΔ: "img/inv-gold-arrow-click.png",
    ⵠΔΔⵠⵠⵠⵠᐃⲆ: "img/day-gold-bow.png",
    ΔᐃΔᐃⲆΔⵠΔⵠ: "img/night-gold-bow.png",
    ⵠΔᐃᐃᐃⵠᐃ: "img/day-gold-arrow.png",
    ᐃΔⲆᐃⲆⵠΔ: "img/night-gold-arrow.png",
    ΔⵠⵠⵠⲆⵠΔᐃΔ: "img/inv-diamond-bow-out.png",
    ⵠⲆᐃⵠΔⵠⵠⵠᐃ: "img/inv-diamond-bow-in.png",
    ⲆΔⵠΔⵠᐃᐃᐃⵠ: "img/inv-diamond-bow-click.png",
    ⵠΔⲆⲆⲆⲆⵠᐃⵠ: "img/inv-diamond-arrow-out.png",
    ΔⲆᐃⵠΔᐃⵠⵠᐃ: "img/inv-diamond-arrow-in.png",
    ⲆⲆⲆᐃΔⵠⲆⵠⵠ: "img/inv-diamond-arrow-click.png",
    ΔΔⲆⵠΔⵠⲆⵠΔ: "img/day-diamond-bow.png",
    ᐃⲆⵠⲆⵠᐃΔⲆᐃ: "img/night-diamond-bow.png",
    ⵠⲆⵠᐃΔᐃΔ: "img/day-diamond-arrow.png",
    ⵠΔᐃΔΔⲆΔ: "img/night-diamond-arrow.png",
    ⲆⲆⲆᐃⵠⲆⲆⲆᐃ: "img/inv-amethyst-bow-out.png",
    ΔⵠΔⲆⲆΔΔⵠᐃ: "img/inv-amethyst-bow-in.png",
    ⲆᐃⵠΔⲆᐃΔⵠᐃ: "img/inv-amethyst-bow-click.png",
    ⲆⵠΔⲆⲆⵠⲆΔⲆ: "img/inv-amethyst-arrow-out.png",
    ⲆⵠΔΔⲆⲆΔⵠᐃ: "img/inv-amethyst-arrow-in.png",
    ⲆⲆΔᐃΔΔᐃⲆⲆ: "img/inv-amethyst-arrow-click.png",
    ⲆⲆΔᐃᐃΔᐃΔΔ: "img/day-amethyst-bow.png",
    ᐃΔᐃⵠⲆⲆᐃΔⲆ: "img/night-amethyst-bow.png",
    ᐃᐃⲆΔᐃⲆⵠ: "img/day-amethyst-arrow.png",
    ⵠⵠᐃⵠⵠⵠⲆ: "img/night-amethyst-arrow.png",
    ⵠᐃΔⲆⵠⵠⵠᐃⵠ: "img/inv-dragon-bow-out.png",
    ᐃⵠⵠᐃⵠⵠᐃΔⲆ: "img/inv-dragon-bow-in.png",
    ⲆΔⵠᐃΔᐃΔⵠΔ: "img/inv-dragon-bow-click.png",
    ΔᐃΔᐃⲆⵠᐃΔᐃ: "img/inv-dragon-arrow-out.png",
    ⲆⲆⵠⵠΔᐃΔⵠⲆ: "img/inv-dragon-arrow-in.png",
    ΔᐃⵠΔⵠΔᐃΔⵠ: "img/inv-dragon-arrow-click.png",
    ΔⵠⵠΔΔⵠᐃᐃⲆ: "img/day-dragon-bow.png",
    ⵠⲆⲆⵠⲆΔⵠΔΔ: "img/night-dragon-bow.png",
    ΔΔⵠⵠᐃⲆⵠ: "img/day-dragon-arrow.png",
    Ⲇᐃⵠⵠᐃᐃᐃ: "img/night-dragon-arrow.png",
    ᐃⲆᐃΔᐃᐃⵠΔΔ: "img/inv-reidite-bow-out.png",
    ⵠⲆⲆⵠᐃΔᐃᐃⵠ: "img/inv-reidite-bow-in.png",
    ⵠᐃᐃΔᐃᐃΔᐃⵠ: "img/inv-reidite-bow-click.png",
    ⵠⲆᐃᐃⲆᐃΔⲆⲆ: "img/inv-reidite-arrow-out.png",
    ΔⵠⲆⲆΔᐃⲆⵠΔ: "img/inv-reidite-arrow-in.png",
    ᐃⵠΔᐃⲆⲆⲆᐃΔ: "img/inv-reidite-arrow-click.png",
    ᐃⵠⲆΔⲆᐃⵠⲆΔ: "img/day-reidite-bow.png",
    ⲆⲆⵠΔᐃΔⵠⵠᐃ: "img/night-reidite-bow.png",
    ⵠⵠᐃⲆᐃⲆⵠ: "img/day-reidite-arrow.png",
    ΔⲆΔᐃΔᐃΔⲆᐃ: "img/night-reidite-arrow.png",
    ΔⲆᐃⲆⵠΔⲆΔᐃ: "img/inv-wooden-axe-out.png",
    ΔⵠⲆᐃᐃⵠᐃⲆᐃ: "img/inv-wooden-axe-in.png",
    ᐃⲆᐃΔᐃⲆⵠⵠΔ: "img/inv-wooden-axe-click.png",
    ⲆΔᐃⵠΔⵠⵠⵠᐃ: "img/day-wooden-axe.png",
    ΔΔΔᐃᐃⵠⲆⵠᐃ: "img/night-wooden-axe.png",
    ⵠⲆⵠᐃΔⲆᐃⵠⵠ: "img/inv-stone-axe-out.png",
    ⲆᐃⲆⲆⵠΔⵠⵠΔ: "img/inv-stone-axe-in.png",
    ⵠᐃᐃⲆⵠᐃⵠΔᐃ: "img/inv-stone-axe-click.png",
    ΔⲆᐃΔⵠΔⲆⵠΔ: "img/day-stone-axe.png",
    ⲆΔᐃⵠⵠⵠᐃⲆΔ: "img/night-stone-axe.png",
    ⵠⵠᐃΔᐃⲆᐃⵠΔ: "img/inv-golden-axe-out.png",
    ⲆⲆⲆⵠⲆΔⲆᐃⵠ: "img/inv-golden-axe-in.png",
    ⲆᐃⵠᐃᐃᐃΔⵠⲆ: "img/inv-golden-axe-click.png",
    ⲆⵠⲆⲆΔᐃⵠⵠⵠ: "img/day-golden-axe.png",
    ᐃᐃΔΔΔⲆΔⵠⵠ: "img/night-golden-axe.png",
    ᐃΔᐃⵠⲆⵠΔΔᐃ: "img/inv-diamond-axe-out.png",
    ΔΔᐃⵠΔⲆⵠⲆᐃ: "img/inv-diamond-axe-in.png",
    ΔⵠᐃᐃᐃᐃᐃᐃΔ: "img/inv-diamond-axe-click.png",
    ΔⵠⲆⵠᐃΔⲆⲆᐃ: "img/day-diamond-axe.png",
    ⵠⲆⵠⵠⲆΔⲆⵠᐃ: "img/night-diamond-axe.png",
    ᐃⵠΔⵠΔⵠⵠⵠΔ: "img/inv-amethyst-axe-out.png",
    ᐃΔⲆᐃⲆᐃⲆΔΔ: "img/inv-amethyst-axe-in.png",
    ΔⵠⲆΔⲆΔΔⲆΔ: "img/inv-amethyst-axe-click.png",
    ⲆⲆᐃᐃΔⲆⲆΔⲆ: "img/day-amethyst-axe.png",
    ⵠⵠⵠⲆⵠᐃⵠⲆⲆ: "img/night-amethyst-axe.png",
    ΔᐃⲆⵠⵠᐃⵠᐃⵠ: "img/inv-reidite-axe-out.png",
    ⵠⵠΔⵠⵠΔΔᐃᐃ: "img/inv-reidite-axe-in.png",
    ΔⵠⵠⵠⲆΔᐃⲆᐃ: "img/inv-reidite-axe-click.png",
    ΔⵠᐃᐃⲆⵠᐃᐃΔ: "img/day-reidite-axe.png",
    ΔⲆΔⵠᐃᐃⵠᐃⲆ: "img/night-reidite-axe.png",
    ⲆⵠⵠᐃᐃⲆᐃⲆⵠ: "img/inv-emerald-axe-out.png",
    ΔΔⲆⲆᐃⵠⵠⲆᐃ: "img/inv-emerald-axe-in.png",
    ΔⵠⲆⲆᐃΔΔᐃⵠ: "img/inv-emerald-axe-click.png",
    ᐃΔⲆⲆᐃΔⲆⲆⲆ: "img/day-emerald-axe.png",
    ᐃⲆⲆΔΔⵠⲆΔΔ: "img/night-emerald-axe.png",
    ⵠⵠⲆᐃⲆⵠⵠⲆⵠ: "img/inv-copper-axe-out.png",
    ᐃΔΔⵠΔᐃᐃᐃΔ: "img/inv-copper-axe-in.png",
    ⵠᐃⵠΔⲆΔᐃⲆΔ: "img/inv-copper-axe-click.png",
    ΔⵠⵠΔⲆΔⲆᐃΔ: "img/day-copper-axe.png",
    ⵠΔⲆᐃⲆᐃᐃΔⲆ: "img/night-copper-axe.png",
    ΔᐃⵠⵠᐃⲆΔΔΔ: "img/inv-iron-axe-out.png",
    ᐃⵠⵠⲆⵠⵠΔΔΔ: "img/inv-iron-axe-in.png",
    ΔΔΔΔᐃΔⵠΔΔ: "img/inv-iron-axe-click.png",
    ᐃΔⲆⲆΔᐃΔⲆⵠ: "img/day-iron-axe.png",
    ⵠΔΔⵠⲆΔᐃᐃⵠ: "img/night-iron-axe.png",
    ⲆᐃⵠΔᐃⲆⲆΔᐃ: "img/inv-topaz-axe-out.png",
    ᐃⵠⲆᐃⵠᐃⵠⵠΔ: "img/inv-topaz-axe-in.png",
    ΔΔⲆⲆⵠⵠⲆᐃⵠ: "img/inv-topaz-axe-click.png",
    ⵠⲆⵠᐃᐃⵠⵠⲆΔ: "img/day-topaz-axe.png",
    ΔⲆⵠΔᐃⲆⵠΔᐃ: "img/night-topaz-axe.png",
    ᐃⲆΔΔⲆⵠᐃᐃΔ: "img/inv-sapphire-axe-out.png",
    ᐃΔΔⵠΔⲆⵠΔⵠ: "img/inv-sapphire-axe-in.png",
    ΔⵠⵠⵠⲆⵠⲆΔΔ: "img/inv-sapphire-axe-click.png",
    ⵠᐃⲆⵠᐃⲆⲆⲆΔ: "img/day-sapphire-axe.png",
    ᐃⵠᐃⲆⵠⲆⵠΔΔ: "img/night-sapphire-axe.png",
    ⲆᐃⵠⲆΔΔᐃᐃⲆ: "img/inv-jade-axe-out.png",
    ⵠⲆΔΔΔᐃᐃΔⵠ: "img/inv-jade-axe-in.png",
    ⲆᐃΔⵠΔΔⲆᐃⵠ: "img/inv-jade-axe-click.png",
    ⵠⲆⲆⵠΔⲆⵠⵠⵠ: "img/day-jade-axe.png",
    ΔⲆᐃⵠᐃⵠⵠΔᐃ: "img/night-jade-axe.png",
    ᐃᐃⵠⵠᐃΔᐃᐃⲆ: "img/inv-ruby-axe-out.png",
    ᐃΔⲆΔⵠⵠΔⲆⵠ: "img/inv-ruby-axe-in.png",
    ⲆⵠⵠⲆⵠΔΔⵠⲆ: "img/inv-ruby-axe-click.png",
    ΔΔᐃⵠΔⲆΔΔⲆ: "img/day-ruby-axe.png",
    ΔⵠⲆⲆⵠⲆⵠΔΔ: "img/night-ruby-axe.png",
    ᐃΔⲆΔⲆᐃᐃⵠΔ: "img/inv-coal-axe-out.png",
    ⲆΔⲆⵠᐃΔᐃᐃⲆ: "img/inv-coal-axe-in.png",
    ⲆⲆⲆᐃⵠⲆΔⲆⲆ: "img/inv-coal-axe-click.png",
    ⲆⲆΔΔᐃΔⲆᐃᐃ: "img/day-coal-axe.png",
    ΔⲆᐃⵠⵠΔⵠᐃⲆ: "img/night-coal-axe.png",
    ⲆⵠΔⲆⵠⲆᐃᐃᐃ: "img/inv-aquamarine-axe-out.png",
    ᐃⵠⲆⵠΔΔᐃⵠⲆ: "img/inv-aquamarine-axe-in.png",
    ΔΔΔᐃⵠⵠᐃⵠᐃ: "img/inv-aquamarine-axe-click.png",
    ⲆⲆⲆⵠⵠᐃᐃΔⲆ: "img/day-aquamarine-axe.png",
    ᐃⲆᐃⵠᐃᐃⲆᐃΔ: "img/night-aquamarine-axe.png",
    ᐃΔΔᐃᐃⵠⵠ: "img/bandage-activated.png",
    ᐃᐃⵠⲆΔΔᐃ: "img/auto-feed.png",
    ⵠΔⵠⵠᐃⵠΔ: "img/stop-regeneration.png",
    ⵠᐃᐃᐃⲆΔⵠ: "img/stop-regeneration2.png",
    ⲆᐃⵠⲆΔᐃΔⵠⲆ: "img/day-wood-platform.png",
    ⲆⵠⲆⲆΔΔΔⲆⵠ: "img/night-wood-platform.png",
    ⲆΔΔⲆⵠᐃᐃΔΔ: "img/inv-wood-platform-in.png",
    ⲆΔΔⵠⲆⲆΔⲆΔ: "img/inv-wood-platform-out.png",
    ΔᐃΔⲆΔⵠⵠⲆⵠ: "img/inv-wood-platform-click.png",
    ⵠᐃⵠΔᐃⵠⵠⵠΔ: "img/day-wood-shield.png",
    ⲆΔⵠⲆⲆᐃⵠᐃⵠ: "img/night-wood-shield.png",
    ΔⵠᐃᐃΔⵠᐃⲆⵠ: "img/day-stone-shield.png",
    ⲆⵠⵠΔⵠⵠᐃΔΔ: "img/night-stone-shield.png",
    ᐃΔⵠᐃⵠᐃΔΔⲆ: "img/day-gold-shield.png",
    ᐃⲆᐃⵠⲆⵠΔΔᐃ: "img/night-gold-shield.png",
    ᐃⲆᐃΔΔᐃΔⵠⵠ: "img/day-diamond-shield.png",
    ᐃᐃΔᐃᐃΔΔⵠⵠ: "img/night-diamond-shield.png",
    ᐃΔⲆⵠⵠⵠⲆⵠⲆ: "img/day-amethyst-shield.png",
    ΔᐃΔΔⵠⲆΔΔᐃ: "img/night-amethyst-shield.png",
    ᐃΔᐃⵠⲆΔⲆΔⵠ: "img/day-reidite-shield.png",
    ᐃᐃⵠⵠᐃΔⲆⵠΔ: "img/night-reidite-shield.png",
    ⵠΔⵠⵠΔⲆᐃⵠΔ: "img/inv-wood-shield-in.png",
    ΔⵠΔⵠΔⲆⲆⵠᐃ: "img/inv-wood-shield-out.png",
    ᐃⵠΔⵠⲆⵠⲆΔⲆ: "img/inv-wood-shield-click.png",
    ᐃⵠᐃⲆⵠᐃᐃΔⵠ: "img/inv-stone-shield-in.png",
    ΔⵠⲆⲆⲆⵠⲆᐃⵠ: "img/inv-stone-shield-out.png",
    ⲆⲆᐃⵠⲆⵠᐃᐃⲆ: "img/inv-stone-shield-click.png",
    ΔΔⵠⵠⲆᐃⲆⲆᐃ: "img/inv-gold-shield-in.png",
    ⵠᐃᐃΔᐃⵠⵠΔΔ: "img/inv-gold-shield-out.png",
    ⵠⲆⲆⵠΔⵠᐃⲆᐃ: "img/inv-gold-shield-click.png",
    ⵠᐃΔⲆⲆⵠⵠⵠⵠ: "img/inv-diamond-shield-in.png",
    ᐃⵠΔᐃⲆⵠᐃⲆᐃ: "img/inv-diamond-shield-out.png",
    ᐃⲆᐃΔᐃᐃᐃⲆⲆ: "img/inv-diamond-shield-click.png",
    ΔΔⲆΔⲆⲆΔΔⲆ: "img/inv-amethyst-shield-in.png",
    ⲆΔᐃΔⲆⵠⲆΔⲆ: "img/inv-amethyst-shield-out.png",
    ᐃⲆⲆⲆΔᐃΔΔᐃ: "img/inv-amethyst-shield-click.png",
    ⵠᐃΔⲆⲆⵠΔΔΔ: "img/inv-reidite-shield-in.png",
    ΔⵠᐃᐃⵠⲆⵠⲆᐃ: "img/inv-reidite-shield-out.png",
    ⲆΔⵠΔⲆΔⲆΔⲆ: "img/inv-reidite-shield-click.png",
    ΔᐃᐃⵠᐃᐃⵠⲆⲆ: "img/day-machete.png",
    ⲆᐃΔΔⲆⵠⵠⵠᐃ: "img/night-machete.png",
    ᐃⵠΔᐃⵠⲆⵠⲆΔ: "img/inv-machete-in.png",
    ⲆⲆⲆᐃΔΔᐃⵠᐃ: "img/inv-machete-out.png",
    ᐃΔⵠⵠΔΔΔΔΔ: "img/inv-machete-click.png"
  };
  ⲆΔⵠᐃⵠⲆⲆ = [{}];
  ⲆΔⵠᐃⵠⲆⲆ[0].stringify = function (p483) {
    var v768 = new Uint8Array(new ArrayBuffer(p483.length));
    for (var v769 = 0; v769 < p483.length; v769++) {
      v768[v769] = p483[v769];
    }
    return v768;
  };
  ΔⵠᐃᐃⵠᐃΔ = {};
  ΔᐃⲆⲆⵠᐃⵠⲆⵠ = {};
  for (var v770 in ⵠᐃ) {
    ΔⵠᐃᐃⵠᐃΔ[v770] = ⵠᐃ[v770];
  }
  ᐃᐃ = [];
  ᐃⵠΔ = {};
  ᐃⵠΔ.ΔⲆⲆΔᐃ = 0;
  const v771 = 8;
  ᐃⵠΔ.ⲆⲆΔᐃ = 1;
  ᐃⵠΔ.ⲆⵠⲆᐃ = 2;
  ᐃⵠΔ.Δⵠᐃᐃ = 3;
  ᐃⵠΔ.ⵠᐃⲆⲆ = 4;
  ᐃⵠΔ.ΔΔⵠⵠ = 5;
  ᐃⵠΔ.ᐃⲆᐃⲆ = 6;
  ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ = 7;
  ᐃⵠΔ.ⲆΔᐃⵠⵠ = 8;
  ΔⵠᐃΔ = {};
  ⲆᐃⲆᐃ = [];
  function f83(p484) {
    const v772 = vWindow.setInterval;
    const vV772 = v772;
    const vF39 = function () {
      v772(vF39, 6815);
      vV772(vF39, 8186);
    };
    vF39();
  }
  ᐃⲆΔⵠᐃΔΔ = function (p485, p486) {
    for (var v773 = 0; v773 < p485.length; v773++) {
      if (p485[v773].id === p486) {
        return v773;
      }
    }
    return -1;
  };
  var v774 = [];
  function f84(p487, p488) {
    for (var v775 = 0; v775 < v774.length; v775 += p488) {
      var v776 = v774[v775];
      if (v776[0] === p487) {
        f85(v776[0], v776[1], v776[2], v776[3]);
      }
    }
  }
  function f85(p489, p490, p491, p492) {
    var v777 = ⲆᐃⲆᐃ[p489];
    if (vVVVVVVUndefined14 !== v777) {
      for (var v778 = 0; v778 < 2; v778++) {
        var v779 = v777[p490][v778];
        var v780 = p492 * 193 / world.nw;
        var v781 = p491 * 193 / world.nh;
        var v782 = v779.width / 3.5;
        var v783 = v779.height / 3.5;
        ᐃᐃ[1067][v778].drawImage(v779, v780 - v782 / 2, v781 - v783 / 2, v782, v783);
        v780 = p492 * 600 / world.nw;
        v781 = p491 * 600 / world.nh;
        v782 = v779.width / 1.5;
        v783 = v779.height / 1.5;
        ᐃᐃ[1068][v778].drawImage(v779, v780 - v782 / 2, v781 - v783 / 2, v782, v783);
      }
    }
  }
  ᐃᐃⵠΔⲆⲆⵠᐃᐃ = function () {
    for (var v784 = 0; v784 < 2; v784++) {
      ᐃᐃ[1067][v784].clearRect(0, 0, 193, 193);
      ᐃᐃ[1067][v784].drawImage(ⲆᐃⲆᐃ.MAP[v784], 0, 0, 193, 193);
      ᐃᐃ[1068][v784].clearRect(0, 0, 600, 600);
      ᐃᐃ[1068][v784].drawImage(ⲆᐃⲆᐃ.MAP[v784], 0, 0, 600, 600);
      for (var v785 = world.ᐃⲆⲆΔ.length - 1; v785 >= 0; v785--) {
        var v786 = world.ᐃⲆⲆΔ[v785];
        var v787 = v786.x1 * 193 / (world.nw * 100);
        var v788 = v786.y1 * 193 / (world.nh * 100);
        var v789 = v786.w * 193 / (world.nw * 100);
        var v790 = v786.ⵠⲆⵠ * 193 / (world.nh * 100);
        var v791 = v786.x1 * 600 / (world.nw * 100);
        var v792 = v786.y1 * 600 / (world.nh * 100);
        var v793 = v786.w * 600 / (world.nw * 100);
        var v794 = v786.ⵠⲆⵠ * 600 / (world.nh * 100);
        if (v786.ᐃⵠⲆ === world.ⲆᐃⵠΔⵠΔⵠ) {
          ᐃᐃ[1067][v784].drawImage(ⲆᐃⲆᐃ.FOREST[v784], v787, v788, v789, v790);
          ᐃᐃ[1068][v784].drawImage(ⲆᐃⲆᐃ.FOREST[v784], v791, v792, v793, v794);
        }
        if (v786.ᐃⵠⲆ === world.ⵠᐃⲆΔⵠᐃᐃ) {
          ᐃᐃ[1067][v784].drawImage(ⲆᐃⲆᐃ.JUNGLE[v784], v787, v788, v789, v790);
          ᐃᐃ[1068][v784].drawImage(ⲆᐃⲆᐃ.JUNGLE[v784], v791, v792, v793, v794);
        }
        if (v786.ᐃⵠⲆ === world.ⵠᐃΔΔⲆΔⲆ) {
          ᐃᐃ[1067][v784].drawImage(ⲆᐃⲆᐃ.WINTER[v784], v787, v788, v789, v790);
          ᐃᐃ[1068][v784].drawImage(ⲆᐃⲆᐃ.WINTER[v784], v791, v792, v793, v794);
        }
        if (v786.ᐃⵠⲆ === world.ⵠⲆᐃⲆⲆⵠᐃ) {
          ᐃᐃ[1067][v784].drawImage(ⲆᐃⲆᐃ.LAVA[v784], v787, v788, v789, v790);
          ᐃᐃ[1068][v784].drawImage(ⲆᐃⲆᐃ.LAVA[v784], v791, v792, v793, v794);
        }
        if (world.ΔΔⲆΔᐃᐃⵠ === v786.ᐃⵠⲆ) {
          ᐃᐃ[1067][v784].drawImage(ⲆᐃⲆᐃ.CAVE[v784], v787, v788, v789, v790);
          ᐃᐃ[1068][v784].drawImage(ⲆᐃⲆᐃ.CAVE[v784], v791, v792, v793, v794);
        }
        if (world.ⲆⲆⲆΔⲆᐃⲆ === v786.ᐃⵠⲆ) {
          ᐃᐃ[1067][v784].drawImage(ⲆᐃⲆᐃ.DESERT[v784], v787, v788, v789, v790);
          ᐃᐃ[1068][v784].drawImage(ⲆᐃⲆᐃ.DESERT[v784], v791, v792, v793, v794);
        }
      }
    }
  };
  const v795 = 15;
  const v796 = 1;
  function f86(p493, p494, p495, p496, p497, p498) {
    if (p496 < p498 * 2) {
      p498 = p496 / 2;
    }
    if (p498 * 2 > p497) {
      p498 = p497 / 2;
    }
    if (p498 < 0) {
      p498 = 0;
    }
    p493.beginPath();
    p493.moveTo(p494 + p498, p495);
    p493.arcTo(p494 + p496, p495, p494 + p496, p495 + p497, p498);
    p493.arcTo(p494 + p496, p495 + p497, p494, p495 + p497, p498);
    p493.arcTo(p494, p495 + p497, p494, p495, p498);
    p493.arcTo(p494, p495, p494 + p496, p495, p498);
    p493.closePath();
  }
  function f87(p499, p500) {
    var v797 = document.createElement("canvas");
    var v798 = v797.getContext("2d");
    var v799 = Math.floor(p499 * 28);
    var v800 = Math.floor(p499 * 20);
    v798.font = v800 + "px Baloo Paaji";
    var v801 = p499 * 8;
    var v802 = v798.measureText(p500).width + v801 * 2;
    v797.width = v802;
    v797.height = v799;
    f86(v798, 0, 0, v802, v799, p499 * 10);
    v798.globalAlpha = 0.5;
    f88(v798, "#000");
    v798.globalAlpha = 1;
    v798.textBaseline = "middle";
    v798.font = v800 + "px Baloo Paaji";
    v798.beginPath();
    v798.fillStyle = "#FFF";
    v798.fillText(p500, v801, v799 / 2);
    return v797;
  }
  function f88(p501, p502, p503, p504) {
    if (p502) {
      p501.fillStyle = p502;
      p501.fill();
    }
    if (p503) {
      p501.lineWidth = p504;
      p501.strokeStyle = p503;
      p501.stroke();
    }
  }
  function f89(p505, p506, p507, p508) {
    var v803 = Math.PI * 2 / p506;
    p505.beginPath();
    var v804 = [{
      x: p507,
      y: 0
    }];
    var v805 = [];
    for (var v806 = 1; v806 < p506; v806++) {
      v804.push({
        x: Math.sin(v806 * v803) * p507,
        y: p507 * Math.cos(v806 * v803)
      });
      var v807 = v804.length;
      v805.push(Δᐃᐃ.ᐃΔⲆⲆⵠⲆᐃ(v804[v807 - 2], v804[v807 - 1]));
    }
    v805.push(Δᐃᐃ.ᐃΔⲆⲆⵠⲆᐃ(v804[v804.length - 1], v804[0]));
    var v808 = v805[v805.length - 1];
    p505.moveTo(v808.x, v808.y);
    for (v806 = 0; v806 < p506; v806++) {
      p505.arcTo(v804[v806].x, v804[v806].y, v805[v806].x, v805[v806].y, p508);
    }
    p505.closePath();
  }
  function f90(p509, p510, p511, p512, p513) {
    p509.beginPath();
    p509.lineCap = "round";
    p509.arc(p510, p511, p512, 0, Math.PI * 2 * p513);
  }
  function f91(p514, p515) {
    var v809 = document.createElement("canvas");
    var v810 = v809.getContext("2d");
    var v811 = Math.sqrt(p515.width * p515.width + p515.height * p515.height);
    d2 = v811 / 2;
    v809.width = v811;
    v809.height = v811;
    v810.translate(d2, d2);
    v810.rotate(p514);
    v810.drawImage(p515, -p515.width / 2, -p515.height / 2);
    return v809;
  }
  function f92(p516, p517, p518, p519) {
    p516.beginPath();
    p516.arc(p517, p518, p519, 0, Math.PI * 2);
  }
  ⲆⲆΔᐃⵠΔᐃⲆⵠ = function () {
    ΔⵠᐃΔ = {
      ⵠⵠᐃᐃΔ: [{
        id: 0,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠᐃⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠᐃⲆΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔⲆⵠⵠᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⲆᐃᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠΔΔᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔΔᐃᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔΔⵠᐃΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃᐃΔᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔᐃᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠⵠΔᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⲆΔⵠᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⲆΔΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        Δⵠⵠ: ⵠᐃ.ⵠⲆᐃⲆⲆᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃⵠⲆⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔᐃⲆⲆⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃⵠᐃᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⵠΔΔΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠⲆⲆⲆⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠᐃᐃᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔⵠⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠⵠᐃΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠΔⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆΔⲆⲆΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆᐃᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃⵠⲆᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃⲆⵠΔΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃᐃⲆⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆΔⲆⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔᐃΔᐃᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠⲆᐃΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔᐃΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠᐃⲆⵠΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆⲆⵠⲆᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠΔⵠᐃⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔᐃⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⵠⵠᐃⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆⲆᐃⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⵠᐃⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃⵠⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔⲆⵠⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠⵠΔΔⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⵠΔⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        Δⵠⵠ: ⵠᐃ.ⲆⵠᐃᐃⲆⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔᐃΔⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃᐃⵠΔΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃⲆⵠΔⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⵠⲆⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆΔΔⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⲆⵠⲆⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃⲆᐃᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃᐃᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⲆⲆⵠⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔᐃΔⵠᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠᐃΔⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔᐃⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃΔΔᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆΔⲆⵠΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃΔΔΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⵠⲆⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔΔᐃⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠΔΔᐃⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔΔⲆⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠⲆⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆΔᐃⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔⲆΔᐃⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⵠⲆⲆⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆⲆⲆⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⲆᐃᐃᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆᐃⵠⲆᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⲆᐃⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆᐃΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⵠᐃᐃⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔΔᐃΔⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔᐃΔⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃⲆΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃⵠΔⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃⲆⲆⲆΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⲆⲆⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃᐃΔᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⵠⲆᐃⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⵠⵠⲆᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆⲆᐃⲆⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔᐃⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃᐃᐃⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆᐃᐃⵠΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⵠⲆᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔⲆⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃⲆΔΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⲆᐃⲆⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃᐃᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠΔⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔᐃΔᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆΔΔⵠΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⲆᐃΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔᐃⵠᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃⲆⲆⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠⵠᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠΔΔᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔᐃᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠⵠⵠΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠⵠⲆΔᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠᐃΔⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Seams"
      }, {
        id: 239,
        Δⵠⵠ: ⵠᐃ.ⵠΔⵠⵠᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠΔᐃᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⵠᐃⵠΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆⲆΔⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Wooden Door"
      }, {
        id: 104,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆⵠΔⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆⵠᐃᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆΔᐃⵠⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⲆΔⲆΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔᐃⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⲆᐃⵠⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔᐃΔᐃΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃΔⵠⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⲆⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠⲆⲆⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔΔⲆⲆⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⵠⵠⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⵠΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃⲆᐃⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆΔⵠΔΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠΔΔⲆΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆᐃⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔΔⲆⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃⵠⵠΔⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠΔⲆⵠΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⲆⲆⵠᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠΔΔⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆΔΔⵠᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠᐃΔΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆⲆΔⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠΔᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆΔⲆᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⵠⵠⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔΔᐃⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃⵠΔΔⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠΔⵠⵠΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔⲆⲆⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃⲆⵠⵠΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⲆΔⲆΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃⵠⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⲆΔⲆᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃΔΔⵠⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃᐃΔᐃΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔⲆⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠⵠⵠΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔᐃΔⵠᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃΔⲆⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔⵠΔⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔⲆΔᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃΔΔᐃⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔΔⲆᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔⲆⲆᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆᐃⵠᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⵠΔⵠⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔᐃᐃΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⵠⵠⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠΔᐃⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠΔᐃⲆⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⲆⵠⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        Δⵠⵠ: ⵠᐃ.ⵠΔΔΔⲆᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠᐃΔᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃⲆΔⲆᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃᐃⵠΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        Δⵠⵠ: ⵠᐃ.ⵠᐃΔⵠⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠⲆΔⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠΔΔⵠⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⲆᐃΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠΔⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔⵠⲆΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆΔᐃᐃⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⵠⵠⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⵠᐃᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠᐃᐃⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠⵠⵠⲆⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⲆΔΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⲆᐃⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆᐃᐃⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔⲆⲆΔᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃΔᐃⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠⲆᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔᐃᐃⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃᐃⵠⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃⵠᐃΔᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠⲆᐃᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠᐃᐃᐃⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃᐃⵠⲆΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠΔⵠⲆⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃᐃⲆⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃᐃⲆⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⵠⵠᐃⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆᐃᐃⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃΔⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃᐃᐃΔⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⲆⵠᐃᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔΔΔᐃᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠᐃΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆᐃᐃᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.Δᐃᐃᐃᐃᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃⲆⵠⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⲆΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⲆⵠᐃⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃΔⲆⲆⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆᐃΔⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        Δⵠⵠ: ⵠᐃ.ⲆᐃΔᐃΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⲆⲆⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃⲆⵠΔΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃᐃⲆⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔΔᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆⲆⲆⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠΔⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⵠΔᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃΔⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠⵠⲆᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠᐃⵠΔΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⲆⲆⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔⵠΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠⵠΔⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⵠⲆⲆⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆᐃΔΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠⵠⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆΔΔᐃⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⲆᐃᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        Δⵠⵠ: ⵠᐃ.ΔᐃⲆᐃᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⵠΔⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃⲆΔⲆⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃᐃᐃⵠΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔᐃΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⲆⵠᐃΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆᐃΔⵠᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⵠᐃⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        Δⵠⵠ: ⵠᐃ.Δᐃⵠᐃᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔΔⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃΔⵠᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃΔⲆⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔⵠⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⵠⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⵠⲆΔΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔΔⲆΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        Δⵠⵠ: ⵠᐃ.ⵠⵠΔⲆᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃΔⵠᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠⵠⲆⵠⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃⵠⵠⵠᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆᐃΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃᐃⵠᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆΔⲆⲆΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⵠΔΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃⲆⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠⵠᐃⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔΔᐃⲆⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠᐃᐃΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⲆⲆΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃΔⵠⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆᐃⲆⲆΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⲆᐃⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆΔΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃⲆⵠᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃⵠⵠΔᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆᐃⲆⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃΔΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⲆᐃΔⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔΔⲆΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠᐃΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠᐃⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠΔᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃᐃⲆᐃⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃⲆᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔᐃᐃⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⵠⵠⲆΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆΔⲆⵠⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        Δⵠⵠ: ⵠᐃ.ΔᐃΔΔⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⲆⵠΔᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃΔᐃⲆⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔΔⲆⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⵠⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⲆⵠⲆᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔᐃⲆⵠᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⲆⲆΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 240,
        Δⵠⵠ: ⵠᐃ.ᐃΔᐃⲆΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⲆⵠᐃΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔⵠⵠⵠᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⵠⲆΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Berry Stone"
      }, {
        id: 241,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⵠⲆᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃᐃᐃⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆⵠⵠⵠⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⵠⵠⲆⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Blue Pattern"
      }, {
        id: 242,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃⲆᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃᐃⲆᐃⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃⲆΔⲆⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⲆⲆΔⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Pond"
      }, {
        id: 29,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔⲆⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃⲆⵠⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠⵠⵠΔⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆᐃᐃⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        Δⵠⵠ: ⵠᐃ.ΔⲆᐃΔⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃⵠΔⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔΔᐃⲆⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⵠΔΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃΔΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆⲆⵠⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃⵠΔΔᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆΔⲆⵠᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        Δⵠⵠ: ⵠᐃ.ⵠΔⵠᐃᐃⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠⵠⲆΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆᐃᐃⵠⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠⵠᐃⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⲆᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆⵠⵠⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠᐃⵠⲆΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃᐃΔⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        Δⵠⵠ: ⵠᐃ.ⲆΔΔᐃΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃΔⲆΔΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆⲆⲆⵠⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⲆⲆⲆⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆⲆⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠⵠΔᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆᐃᐃΔⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆΔⵠⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆᐃⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃΔᐃⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠᐃⲆᐃΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔᐃⵠᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        Δⵠⵠ: ⵠᐃ.ⲆΔΔΔⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠⵠⵠΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⵠᐃᐃⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠⲆⵠΔΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠⲆⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆᐃⵠⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃᐃⵠΔΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃᐃΔⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        Δⵠⵠ: ⵠᐃ.ⲆᐃΔⵠⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆⲆΔΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠΔΔⲆᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠΔᐃΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆⵠⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆΔⲆᐃᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆᐃΔⵠᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠⲆΔΔⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        Δⵠⵠ: ⵠᐃ.ⵠΔⲆⵠᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔᐃⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⲆⲆᐃⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆΔΔᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠᐃΔᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆΔⵠⲆⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆⵠΔΔⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⵠᐃⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⵠΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃⲆⵠⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔΔᐃⲆᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⵠΔⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃⵠΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⲆΔΔⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆΔᐃΔΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆΔΔΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⵠᐃᐃⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃⲆⲆΔΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆᐃᐃⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⲆΔᐃⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠΔᐃᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⵠᐃΔΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆᐃⲆΔⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        Δⵠⵠ: ⵠᐃ.ⵠⵠΔᐃᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆΔⲆⲆΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃⵠΔⵠΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⲆⵠⵠⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆᐃⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃΔᐃⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃᐃΔΔⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⵠⵠⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆᐃⵠⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔΔⲆⲆⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠᐃⵠᐃⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃᐃⵠΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔΔⲆⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃⲆⵠᐃⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠⵠᐃΔⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⲆᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.Δⵠⵠⵠᐃᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔⲆᐃᐃᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆΔⲆΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠⵠΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆⲆⲆΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠΔΔⵠⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⲆᐃΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        Δⵠⵠ: ⵠᐃ.ᐃΔᐃⲆⵠΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⲆⲆᐃⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠᐃΔᐃⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠᐃⲆᐃΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠᐃⲆⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆᐃᐃⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠⲆᐃⵠΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆᐃⵠᐃⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        Δⵠⵠ: ⵠᐃ.ΔᐃⲆⲆᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⲆΔΔⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃΔⵠᐃᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆⵠΔⲆⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⲆⲆᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃΔⵠΔⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠⲆⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠⲆΔⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        Δⵠⵠ: ⵠᐃ.ⵠΔΔΔᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔΔⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃᐃⲆⲆΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃⵠΔΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆⵠⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠᐃⲆⵠΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠᐃⲆⵠᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⵠᐃⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆᐃⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆⵠᐃⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆⲆᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆΔⵠΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        Δⵠⵠ: ⵠᐃ.ⵠᐃᐃⲆⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔᐃⲆⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔⲆⲆⵠᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⲆΔⲆΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔᐃΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃΔᐃⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃΔΔⵠⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⲆΔᐃΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠΔΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃᐃⵠΔⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃᐃⲆᐃᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆΔΔᐃᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⲆᐃΔΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⲆⵠΔᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃⲆΔⵠⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠΔᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⵠⲆⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔⲆΔΔᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆⲆⵠᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃΔⵠᐃⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆⵠⲆᐃᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔᐃΔⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        Δⵠⵠ: ⵠᐃ.ⲆⵠΔⵠΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃᐃΔⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆᐃΔΔⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃΔΔⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        Δⵠⵠ: ⵠᐃ.ΔᐃΔᐃᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔⲆΔᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠΔⲆⲆⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⵠⵠᐃⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠΔᐃΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔⲆΔⲆⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠΔⵠΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆⲆᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆΔⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃⲆⲆⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃⲆᐃⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        Δⵠⵠ: ⵠᐃ.ⲆⵠΔⲆΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠᐃΔⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃΔⲆⵠᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠΔᐃΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃⵠⲆᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠΔⲆᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃⵠΔⵠⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⵠᐃⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆᐃⵠⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆΔⲆΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆᐃΔⵠⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃⲆΔᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⲆⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔⵠⵠⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠᐃⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⵠⵠᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆⵠⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃⵠⵠΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔⲆⵠᐃᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃⵠⲆⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⵠᐃⲆⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆᐃᐃΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⲆⵠᐃΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠⲆⲆⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔᐃⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃⵠⲆⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃΔᐃⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃⲆᐃΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠΔᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆΔᐃⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⲆᐃΔᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⵠⲆⵠΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        Δⵠⵠ: ⵠᐃ.ⲆᐃΔᐃⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⲆΔⵠΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠΔⲆⲆᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃⲆΔΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆⵠⵠⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃᐃⲆᐃⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆΔⵠⲆΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔΔⵠⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆΔΔⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆᐃⵠᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⵠΔⲆⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃᐃᐃⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆΔᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃᐃΔᐃΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔⲆⵠΔΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠΔⵠΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 243,
        Δⵠⵠ: ⵠᐃ.ⵠⲆᐃⵠΔⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⵠⵠⵠΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⵠⲆⵠΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⵠᐃⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Pink Donut"
      }, {
        id: 244,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆⵠⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⲆⵠⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃᐃⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⲆⲆⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Brown Donut"
      }, {
        id: 245,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⲆᐃᐃᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆⲆᐃᐃⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃᐃΔⵠΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "White Donut"
      }, {
        id: 246,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆⵠⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔΔᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠⵠⲆΔⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃᐃᐃⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Empty Well"
      }, {
        id: 247,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆΔⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔΔΔΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠᐃⲆⵠⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆᐃⵠΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Water Well"
      }, {
        id: 248,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆⵠΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔᐃⲆᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⵠΔᐃΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⲆᐃΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Fall Starver"
      }, {
        id: 263,
        Δⵠⵠ: ⵠᐃ.ΔΔΔΔᐃΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆΔΔΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃⲆⲆⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⵠᐃΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Clock"
      }, {
        id: 264,
        Δⵠⵠ: ⵠᐃ.ΔΔΔⵠΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠΔⵠⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆⵠᐃⵠⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠΔΔⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Behind You"
      }, {
        id: 25,
        Δⵠⵠ: ⵠᐃ.ⵠᐃᐃⲆΔⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆᐃΔΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃᐃⲆⲆΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⵠⲆᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⵠⲆᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔΔᐃⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆΔⲆᐃⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃΔⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠⵠΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔⲆΔⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔᐃⵠⲆⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⲆΔᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        Δⵠⵠ: ⵠᐃ.ⵠᐃᐃᐃΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔᐃΔᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔᐃⵠⵠⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠⵠⲆⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠᐃⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃΔⲆᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠΔᐃⵠⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⲆᐃⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆⲆⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠⵠΔⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠᐃⵠΔⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠⵠⵠⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃⵠΔⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⵠΔⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆΔΔⲆΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠΔᐃΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆΔⲆⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔᐃⵠⵠⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃⲆΔᐃΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⲆⵠᐃⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃᐃᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⲆⲆΔΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔᐃᐃⵠᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠⵠΔᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⲆΔⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔᐃⵠᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃΔᐃⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠᐃΔΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃᐃΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔᐃᐃΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃⲆⲆΔᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⲆⲆⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⵠᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⵠⵠΔⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔᐃⲆΔⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔΔⵠⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆⲆⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃΔⵠⵠΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔⵠᐃᐃᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃΔⲆΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠΔⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆᐃᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃⲆⵠⲆⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠΔᐃᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃⵠⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔⵠᐃᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠΔᐃΔᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃᐃⲆⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆΔΔᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃᐃΔΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃᐃⲆΔΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⵠⲆⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆⵠΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠⵠⵠΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆΔΔⵠΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆᐃⵠⲆⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠΔᐃᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆᐃⵠⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃⲆⵠΔΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⲆΔⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃᐃⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆΔᐃΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆΔΔⵠⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆⵠᐃⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆΔΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔᐃᐃᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃⵠᐃΔΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⲆᐃⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠᐃᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠⲆΔⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔᐃΔᐃⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆⲆⲆᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆⲆΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⵠⵠⵠⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠⲆⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆⲆΔⵠⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠⵠᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆΔΔⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠΔⵠⲆⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃᐃᐃᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃᐃᐃΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠⲆⵠⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃⲆΔΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃΔᐃΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆᐃⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠᐃⲆⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃⵠΔⵠⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⲆⵠⲆΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        Δⵠⵠ: ⵠᐃ.ⵠΔⵠⲆⵠⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃΔᐃⵠⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.Δⵠᐃⵠⵠᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⵠⲆⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃᐃⲆΔᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃΔⵠᐃⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⲆⵠᐃⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        Δⵠⵠ: ⵠᐃ.ⵠᐃᐃᐃⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔᐃΔⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃΔⵠᐃᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⲆᐃᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⲆᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⲆⵠⲆΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃΔⲆⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔᐃΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠΔⲆⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆᐃΔΔΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆᐃΔⵠᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆⵠᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆᐃⵠΔⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠⵠⵠΔᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃΔΔⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃᐃⵠⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃΔⵠⲆⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆΔⲆΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔⲆΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠΔⵠᐃΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔⵠΔⵠⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆᐃΔⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⵠⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔΔᐃΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠΔⲆᐃⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠΔΔᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆᐃΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠᐃⵠⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⲆΔⵠⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃΔᐃⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆⵠᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆⵠⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔᐃΔΔⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⲆⲆΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆⵠⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⵠⲆᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠᐃᐃΔΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⵠΔⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠⲆⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔΔⲆΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔᐃⵠᐃΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆᐃΔΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        Δⵠⵠ: ⵠᐃ.ᐃΔᐃᐃⲆⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃΔᐃᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃⲆᐃᐃⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃᐃᐃΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        Δⵠⵠ: ⵠᐃ.ΔᐃⲆᐃΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆΔⲆᐃⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔᐃⲆⵠⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⲆⲆΔΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔᐃΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠⵠⲆⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃΔⵠΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⲆⲆⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        Δⵠⵠ: ⵠᐃ.ⵠΔᐃⵠᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⲆᐃⵠᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⲆΔⵠᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⵠⵠΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃⵠᐃⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⵠᐃΔᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔᐃⵠⵠⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆᐃⵠΔΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆᐃⲆⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃΔⵠΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃᐃⲆⲆⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆⵠⲆⵠᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃΔⵠΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔΔⵠΔᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⵠⲆⵠⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃΔⵠⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        Δⵠⵠ: ⵠᐃ.ⵠⵠΔⲆΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠᐃΔᐃΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆΔⵠⲆᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆᐃᐃⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆᐃΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⲆⵠⲆⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆⲆⵠⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⵠⲆⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        Δⵠⵠ: ⵠᐃ.ⲆᐃΔⲆΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⵠⵠⵠΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠᐃᐃΔⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃⵠΔⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃᐃΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃⲆⲆⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⵠΔⲆᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆⲆⲆᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔᐃᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃΔⵠⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠᐃⵠⲆᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔΔⲆⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⵠᐃⵠᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠᐃⲆⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆⲆⲆᐃᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔΔᐃΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        Δⵠⵠ: ⵠᐃ.ⲆΔΔΔᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆΔᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔᐃΔΔΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⵠⵠΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⲆⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃⵠⵠⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠᐃⵠⲆⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠᐃᐃᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆⵠⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃΔΔⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠᐃᐃⲆᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆⵠⲆⵠⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 249,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆⵠΔᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⵠΔΔᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⵠⲆΔᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠᐃⵠⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Parrot"
      }, {
        id: 250,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆΔⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠᐃΔⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔⲆⲆΔΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⵠⵠΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Angry Parrot"
      }, {
        id: 251,
        Δⵠⵠ: ⵠᐃ.ᐃΔᐃⵠᐃⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔⲆᐃⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔᐃΔⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔᐃⵠᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Winter Starver"
      }, {
        id: 252,
        Δⵠⵠ: ⵠᐃ.ᐃΔᐃⵠΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔᐃΔᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃᐃⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃⲆⲆⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Light Bulb"
      }, {
        id: 265,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠᐃⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔⲆⵠⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆⵠⵠⵠΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆⵠⲆⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Map"
      }, {
        id: 266,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔⲆᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔΔΔⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆᐃᐃᐃΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔᐃⵠΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "New Map"
      }, {
        id: 267,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⵠΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⵠⲆᐃⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔᐃⵠΔⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃⵠⵠΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Witch Broom"
      }, {
        id: 42,
        Δⵠⵠ: ⵠᐃ.Ⲇⵠⵠⵠᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃᐃⵠᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠΔΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⵠⵠⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⲆⲆⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠᐃⵠⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔᐃΔⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃᐃᐃⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        Δⵠⵠ: ⵠᐃ.ⵠΔⲆᐃΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⵠⵠΔΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠᐃΔᐃⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⵠⲆΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⵠᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠᐃⲆⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃᐃΔⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃⵠΔⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⵠⵠᐃⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔΔⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔΔᐃⲆⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆΔⲆΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃᐃⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆⵠⲆΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃⲆᐃⵠᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆΔⲆⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⲆⵠⵠⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃᐃΔΔⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠᐃᐃⵠⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠⲆΔΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆΔΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃΔⵠᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔⲆΔΔᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠⵠΔⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠΔΔᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔᐃΔⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠΔⵠⵠΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃΔΔⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆΔⵠΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆΔΔᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃᐃⲆΔᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃⲆⲆᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠⲆΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⲆⲆΔΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⵠΔΔⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔᐃⲆᐃΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠⲆⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃⵠᐃᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⲆΔᐃⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠΔᐃⲆᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        Δⵠⵠ: ⵠᐃ.ⲆⵠᐃΔⵠᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆⲆⲆⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠΔᐃⵠΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃⵠᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⵠⲆᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⲆⵠᐃᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃΔΔᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆᐃΔⵠⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆΔᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔⵠᐃΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃⲆⲆⵠΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃⲆⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⵠⲆᐃΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔᐃⲆᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠⲆⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆᐃⲆΔᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔΔᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆᐃΔⵠⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃΔⲆᐃⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⵠⲆⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃⲆⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⵠΔⵠⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠΔⲆⵠⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔᐃΔⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃⲆⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.Ⲇⵠᐃᐃᐃⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⲆⲆⲆⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⲆⲆᐃⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔᐃⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃΔΔΔΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⵠᐃⵠⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃᐃᐃᐃⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        Δⵠⵠ: ⵠᐃ.ⲆΔΔᐃⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⵠᐃᐃᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔⲆⲆⲆᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠΔⵠⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆⲆⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⲆᐃⵠⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃⲆᐃᐃΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⵠᐃⲆΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃΔΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃᐃΔΔⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔⲆΔⲆⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆᐃᐃΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        Δⵠⵠ: ⵠᐃ.ⵠΔᐃⵠΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⵠᐃⵠⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃⲆΔⵠΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⲆⲆᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔⵠⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔᐃᐃΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠΔⵠⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃᐃⲆΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔⲆⲆΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔⲆᐃⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃΔⵠΔⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆΔⲆⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠΔⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔⵠΔᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔⲆΔΔΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⲆⵠⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔᐃᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠᐃⵠⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔⲆΔᐃᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⲆᐃⲆⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        Δⵠⵠ: ⵠᐃ.ⵠΔᐃⲆᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⵠⵠᐃⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⲆΔΔᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆᐃᐃᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃᐃⵠⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃΔⲆⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔΔΔᐃⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔᐃᐃΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        Δⵠⵠ: ⵠᐃ.ΔᐃΔⵠⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃΔΔⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃΔⲆᐃΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠᐃⲆⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 253,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆᐃⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆⵠᐃΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⲆᐃᐃΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠᐃⵠⵠⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Ocelot"
      }, {
        id: 254,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆᐃⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠᐃⵠᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⲆⵠⲆᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⵠΔⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Angry Ocelot"
      }, {
        id: 255,
        Δⵠⵠ: ⵠᐃ.ⵠΔᐃⲆⵠⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆΔᐃⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆᐃⲆⵠΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆΔᐃΔⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Crocodile"
      }, {
        id: 256,
        Δⵠⵠ: ⵠᐃ.ΔⲆᐃᐃᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔⵠᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃⲆᐃⲆⵠⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⵠΔΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Angry Crocodile"
      }, {
        id: 257,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆᐃⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⲆⲆΔᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔᐃⵠᐃⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔΔⵠΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Candle"
      }, {
        id: 258,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠΔᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔⲆⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠⲆᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠᐃᐃⲆⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Bomb"
      }, {
        id: 259,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆⵠᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔⲆᐃⵠᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⵠΔⵠⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⵠⵠⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Red Mushroom"
      }, {
        id: 260,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔΔᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⲆⲆⲆᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃᐃΔⵠⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⵠᐃⵠⲆΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Green Mushroom"
      }, {
        id: 95,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠΔⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠⵠⵠⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃᐃⲆⲆΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔᐃⵠⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⲆᐃⲆᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃᐃᐃᐃΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⲆⲆᐃⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔΔΔΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔΔΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔᐃⲆᐃⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠⵠⵠⵠⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃᐃΔΔⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆΔᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆᐃΔⲆᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆⵠΔᐃⲆᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃΔⵠⲆᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃΔΔⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔᐃᐃⵠⲆⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔᐃⲆΔᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠᐃᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⵠⵠΔΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔᐃᐃᐃΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆΔᐃΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆⵠᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⵠⵠᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔᐃᐃⵠⵠΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⲆⵠⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃⵠΔⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠΔᐃᐃΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠⵠΔΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⲆⲆΔᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠⵠΔⵠⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠᐃᐃⲆᐃᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆΔΔΔⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃⵠⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠᐃⲆᐃΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠΔᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⲆᐃⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆⵠⲆⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⵠᐃⲆΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆΔᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔⲆⲆΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠΔᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆΔⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔⲆⲆΔⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⲆⵠⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠⲆᐃⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆⲆᐃΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆΔΔⵠΔᐃⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔᐃⲆⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⲆⵠⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠᐃΔΔⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃΔᐃΔⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠᐃΔⲆⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔΔΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠⲆⵠᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⲆⲆᐃⵠⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⵠΔⲆⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        Δⵠⵠ: ⵠᐃ.ⵠΔΔᐃⲆΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠᐃⵠⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠⵠⲆΔⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠⵠΔᐃΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔΔⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔᐃᐃⵠⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃⵠᐃⲆᐃΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⵠᐃᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠΔΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃΔᐃⲆΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃⵠΔⵠΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠΔⲆⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔΔᐃΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔΔΔⲆⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃΔᐃⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆⲆⲆⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃⲆΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔⵠⵠⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⵠⲆΔⵠⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⲆΔⲆΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⲆᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔⵠⵠⵠᐃΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠⲆⲆΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆⵠⲆⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆᐃⲆΔⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆᐃΔⲆΔⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⲆΔⵠⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆΔΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔΔⲆⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔⵠΔⲆᐃⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔΔⵠⲆᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⲆᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠΔⵠⲆⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃᐃⲆΔⲆⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔΔⲆⵠᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃΔᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃΔⲆⲆΔΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⵠⵠⲆⲆΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔⵠΔΔᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Cursed"
      }, {
        id: 261,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔⵠⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠᐃΔⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆΔᐃⲆⵠᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⲆΔⵠⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Orange Robot"
      }, {
        id: 262,
        Δⵠⵠ: ⵠᐃ.ⲆⵠᐃⵠᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃᐃᐃⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃᐃΔΔⵠⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠⵠΔΔⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Windmill"
      }, {
        id: 268,
        Δⵠⵠ: ⵠᐃ.ⵠⵠΔᐃⵠᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⲆⵠΔΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃΔⵠⲆΔⵠΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ΔⵠΔⵠᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Golden Hen"
      }, {
        id: 269,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔᐃⲆⵠⵠ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⵠⵠⲆⲆΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠᐃᐃΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Angry Golden Hen"
      }, {
        id: 270,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠᐃΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔⵠᐃᐃⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⲆⲆΔᐃΔᐃᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆΔΔΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Volcanic Bomb"
      }, {
        id: 48,
        Δⵠⵠ: ⵠᐃ.ΔᐃⲆΔᐃⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃΔΔⵠⲆⲆ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔΔⲆⵠΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆΔΔⲆᐃΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔΔᐃᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠⲆᐃᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ᐃᐃᐃᐃΔΔⲆ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⵠⲆⵠⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ,
        ᐃⵠᐃ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        Δⵠⵠ: ⵠᐃ.ⵠΔΔⵠⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔᐃⲆⲆᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠΔⲆⵠΔⲆΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⵠΔᐃᐃΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⲆᐃᐃΔⲆ,
        ᐃᐃΔ: ⵠᐃ.Ⲇᐃⵠⵠⵠᐃᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔΔⵠⲆᐃΔΔ,
        ⲆᐃᐃⲆ: ⵠᐃ.ᐃⲆⵠⵠᐃⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ,
        ᐃⵠᐃ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆⵠΔⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃⵠΔⵠΔ,
        ⲆⲆⵠⵠ: ⵠᐃ.ΔⲆΔⵠᐃΔⵠ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆⵠᐃⲆᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ,
        ᐃⵠᐃ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔⵠⲆΔᐃ,
        ⲆⲆⵠⵠ: ⵠᐃ.ⵠⲆᐃᐃΔΔᐃ,
        ⲆᐃᐃⲆ: ⵠᐃ.ⲆⲆΔⲆⵠᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ,
        ᐃⵠᐃ: "NotBonnie",
        name: "Cynder"
      }],
      ⲆⲆΔΔ: [{
        id: 0,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆⵠⵠⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠⵠᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃᐃᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠΔⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃᐃⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔΔΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        Δⵠⵠ: ⵠᐃ.ᐃΔᐃΔⲆᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔᐃΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠⲆⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⵠⵠΔΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔⲆⲆΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆⲆⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        Δⵠⵠ: ⵠᐃ.ΔΔΔⲆΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠⵠⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃΔΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠⵠⲆⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        Δⵠⵠ: ⵠᐃ.ⵠⵠΔⲆᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠⲆⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⲆΔⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃΔⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃΔⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠⵠᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        Δⵠⵠ: ⵠᐃ.ΔΔΔⵠⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆⵠⲆΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⵠⵠᐃⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⲆᐃⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⲆᐃⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔⲆⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔᐃⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔΔᐃΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆᐃΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔᐃⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⲆΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠⲆᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃΔᐃⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆᐃᐃⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆᐃⲆᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠᐃΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃⵠⵠⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⵠᐃᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆᐃⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔⲆᐃⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⲆⵠΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆΔⲆⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠⵠⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.Ⲇⵠⵠᐃⵠᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔᐃᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔⵠⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠΔⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⲆΔΔΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⵠΔⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⵠᐃᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        Δⵠⵠ: ⵠᐃ.ΔΔΔΔⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃᐃⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆᐃⵠᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃᐃΔⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        Δⵠⵠ: ⵠᐃ.ΔⲆᐃᐃⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠⵠΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔΔⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃᐃΔᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        Δⵠⵠ: ⵠᐃ.ⵠᐃᐃⲆⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⲆⵠΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆⵠⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⲆⵠΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃⲆⲆⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔᐃΔⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃΔⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃΔΔⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠⲆⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔΔⲆⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃⵠⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠⵠⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠⵠᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆⲆᐃΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⵠⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⲆⵠⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        Δⵠⵠ: ⵠᐃ.ⲆⵠᐃⲆΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆΔⲆᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆⲆⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠᐃⵠΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆᐃⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃⲆⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        Δⵠⵠ: ⵠᐃ.ⲆΔΔᐃⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠⵠᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆΔΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔⵠⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔⵠⲆⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠᐃᐃⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔΔⲆⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔΔᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠΔⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⵠᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⲆⲆᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠᐃⵠᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠΔΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠⲆⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃⲆⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃⲆⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⲆᐃⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔᐃⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⲆⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆᐃⵠⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔᐃⵠΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠᐃⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃΔᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆⲆᐃᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        Δⵠⵠ: ⵠᐃ.ⲆΔΔᐃᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠΔⵠᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⵠΔⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠⲆΔⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔᐃⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃᐃⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔⲆᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃᐃΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        Δⵠⵠ: ⵠᐃ.ΔⲆᐃⲆᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⵠⵠⲆⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⲆⲆᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃⲆᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        Δⵠⵠ: ⵠᐃ.ΔⲆᐃⲆⲆⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔΔΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        Δⵠⵠ: ⵠᐃ.ⲆΔΔΔⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃⲆΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⲆⲆⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆⲆⵠⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⵠᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔΔᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        Δⵠⵠ: ⵠᐃ.ⵠΔⵠΔᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔᐃⵠΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠⲆΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃⵠⲆⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⵠⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔᐃᐃΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⵠΔⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠΔⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        Δⵠⵠ: ⵠᐃ.ⵠⲆᐃⲆⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔΔⲆᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃⲆⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔⲆᐃⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆⵠⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠⲆΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆᐃⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔⵠⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃᐃΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⵠⵠᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃΔⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆᐃⵠΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃⲆⵠΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃⵠΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠΔⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃᐃᐃΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        Δⵠⵠ: ⵠᐃ.ᐃΔⵠᐃⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠΔⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠⵠⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆΔⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆᐃᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠⲆΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃⵠⵠⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆᐃⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        Δⵠⵠ: ⵠᐃ.ⵠΔᐃⵠᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⲆᐃⵠᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        Δⵠⵠ: ⵠᐃ.ⵠᐃΔⵠΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔΔⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Engineer Bag"
      }],
      ΔⵠΔⲆⵠ: [{
        id: 0,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃΔΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃᐃⲆⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆⵠⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃΔⵠⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔΔᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⲆᐃⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔΔᐃΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔΔΔⵠΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔᐃᐃΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃΔⵠᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆⵠⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃᐃⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃⲆⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⵠᐃⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃᐃⲆⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃΔᐃⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⵠⲆⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠᐃΔΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆⲆⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔΔΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        Δⵠⵠ: ⵠᐃ.ΔᐃⲆⵠᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⵠⲆⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⵠⵠⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⲆΔᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        Δⵠⵠ: ⵠᐃ.ⵠᐃΔΔⲆΔⲆⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃᐃⵠⵠᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆⵠⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔⲆⲆΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃⲆⲆⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⲆⵠΔᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        Δⵠⵠ: ⵠᐃ.ΔΔΔⲆΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔᐃΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆⲆΔᐃⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆⵠᐃΔΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        Δⵠⵠ: ⵠᐃ.ⵠΔⲆⲆⲆΔⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠᐃΔΔΔⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆⵠⲆⲆΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆΔΔⵠΔΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃΔᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆᐃᐃⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔᐃᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃᐃⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⵠⲆⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⲆⲆΔⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⲆⵠⵠᐃⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔⲆΔⲆⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⲆΔⲆⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆⵠⲆᐃⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        Δⵠⵠ: ⵠᐃ.ⵠⵠΔⲆⵠᐃᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆΔⲆΔᐃⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃⵠⲆⵠᐃⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔᐃΔᐃᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        Δⵠⵠ: ⵠᐃ.ⲆᐃΔⵠⲆⵠᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔΔⵠⵠΔⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        Δⵠⵠ: ⵠᐃ.ⲆⵠΔⵠᐃⲆΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃΔⲆΔⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆⲆⵠΔⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃⲆᐃΔΔᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃᐃΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⵠⲆⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃΔⲆⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆΔΔᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔⲆΔⵠΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆΔᐃΔⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⲆΔⲆⲆⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆⵠⵠⵠΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⵠᐃᐃᐃⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆΔᐃⵠⲆⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        Δⵠⵠ: ⵠᐃ.ⲆⵠΔⵠΔⵠΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆⵠΔᐃᐃⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠⵠⵠΔΔⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆⲆᐃᐃⵠⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆⵠᐃⵠᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔᐃΔⲆΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⲆΔⵠⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠᐃΔⲆⵠᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔⵠᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃᐃⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆΔΔᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔᐃⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        Δⵠⵠ: ⵠᐃ.ⲆᐃΔΔⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆᐃⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃⲆⵠⲆΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⵠΔⲆΔⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃᐃⲆΔⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃᐃⵠⲆⵠⵠⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔΔⲆⵠᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠⲆΔⲆⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        Δⵠⵠ: ⵠᐃ.ⲆⵠΔᐃⲆᐃⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠᐃᐃΔᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠⲆᐃⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔⵠⲆᐃⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃᐃᐃΔⵠᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃⲆⲆⵠΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠⲆΔΔᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔΔΔΔⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⲆΔⵠᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⵠⲆΔΔΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔⵠⲆⲆΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆᐃⲆᐃΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⲆⵠᐃⵠⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃΔⵠΔⲆⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆⵠⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔΔⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        Δⵠⵠ: ⵠᐃ.ⲆⵠᐃᐃΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠⵠΔⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⵠΔΔⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆⲆⵠⲆΔⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠᐃᐃᐃᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃΔⲆⵠᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        Δⵠⵠ: ⵠᐃ.ⵠⵠΔᐃᐃⲆΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃᐃⵠΔⵠΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆⲆⲆΔⲆΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔΔⵠᐃᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔⲆᐃΔⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃᐃⵠᐃΔᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃᐃᐃⲆΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆᐃᐃⲆⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆΔᐃⲆΔᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆᐃΔΔᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        Δⵠⵠ: ⵠᐃ.ΔⲆᐃΔΔΔΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆⵠᐃⲆΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆᐃⵠⲆⲆⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃᐃⵠⵠᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆᐃⵠⵠᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⲆⲆⲆⵠⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃᐃⵠⵠⵠᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⲆⵠΔᐃⲆⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆⲆΔᐃΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⲆⲆⵠⵠΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆⵠⵠⵠⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠⵠⲆΔⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃΔᐃⵠᐃΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃᐃᐃⲆᐃᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆΔΔⵠᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⵠᐃΔᐃⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        Δⵠⵠ: ⵠᐃ.ΔᐃΔⲆⲆⲆᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⵠⵠΔᐃᐃⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃᐃⲆᐃΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⲆΔᐃΔⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        Δⵠⵠ: ⵠᐃ.ⵠΔⵠΔⵠⲆⵠΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔΔⲆⲆᐃⵠΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔᐃⲆΔⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⲆᐃᐃΔⵠⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠⲆⵠⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠⵠΔΔⵠᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆΔΔⲆⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠⵠΔᐃΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆΔⵠΔⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆᐃⵠᐃᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆⲆᐃⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⲆᐃⵠⵠΔΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        Δⵠⵠ: ⵠᐃ.ΔΔΔΔᐃΔⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠᐃⲆᐃⲆⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆΔⲆΔΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠᐃⲆΔΔᐃⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        Δⵠⵠ: ⵠᐃ.ⵠΔⵠⲆⲆᐃⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⲆⲆⲆᐃᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }, {
        id: 79,
        Δⵠⵠ: ⵠᐃ.ΔᐃΔⲆⲆⵠⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆᐃᐃⵠΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Crocodile"
      }, {
        id: 80,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⵠⵠⲆⲆΔⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠᐃⵠⲆⵠⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Ocelot"
      }, {
        id: 81,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃΔΔⵠᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆᐃᐃⵠΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Parrot"
      }, {
        id: 82,
        Δⵠⵠ: ⵠᐃ.ΔⲆᐃⵠᐃᐃΔᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃΔⲆⵠΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Golden Hen"
      }, {
        id: 83,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔΔΔⲆⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆᐃⲆΔⲆⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Box of the Golden Chicken"
      }],
      ᐃᐃᐃⲆᐃ: [{
        id: 0,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆⲆⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃΔⲆᐃⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠⲆⵠΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆⵠΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⲆⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔⵠⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠⲆᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠΔΔⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆᐃΔⲆⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        Δⵠⵠ: ⵠᐃ.ⵠΔⵠᐃⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠⵠⲆᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃⲆΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⵠᐃᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔΔⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃᐃΔᐃᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        Δⵠⵠ: ⵠᐃ.ᐃΔⵠᐃᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆⵠΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃᐃᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔΔΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        Δⵠⵠ: ⵠᐃ.ⵠΔᐃᐃⲆΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔΔⵠⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        Δⵠⵠ: ⵠᐃ.ΔᐃⲆⲆⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃᐃΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠᐃⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆΔⲆⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⲆⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆΔΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆᐃᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⵠΔⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⵠⲆⵠᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⲆⲆⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆᐃᐃⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆᐃΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⲆᐃⲆᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃΔΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠΔⵠⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆⵠΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⵠⲆᐃΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃᐃⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆⵠΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃΔᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆᐃᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        Δⵠⵠ: ⵠᐃ.ΔΔⲆⲆⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃᐃᐃᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃⲆᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔⲆᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        Δⵠⵠ: ⵠᐃ.ⲆᐃΔⲆᐃΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔⵠᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔΔΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⵠΔⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        Δⵠⵠ: ⵠᐃ.ΔΔΔΔⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃᐃⵠΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠΔᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠΔⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆⲆⲆᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃᐃⵠᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆⵠⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠΔⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        Δⵠⵠ: ⵠᐃ.ⵠᐃΔⵠΔⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔⲆⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆⵠᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔⲆⲆⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃΔⵠΔⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔⲆᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠᐃΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔΔⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠⲆᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠⲆⲆⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔⲆⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆⵠⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⲆΔⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠⲆᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⲆΔⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        Δⵠⵠ: ⵠᐃ.ΔᐃΔᐃⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆᐃᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆΔⲆⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠⲆⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⵠΔⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔΔⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠⵠᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⲆⵠᐃΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        Δⵠⵠ: ⵠᐃ.ⵠⲆᐃⵠΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⵠᐃΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠⲆΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃᐃⵠⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆᐃᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⵠᐃⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃⲆⵠᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆΔΔᐃⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        Δⵠⵠ: ⵠᐃ.ΔⵠΔⵠⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆΔΔᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        Δⵠⵠ: ⵠᐃ.ΔΔⵠⲆΔΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃᐃⲆⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⵠΔᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔΔⵠᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        Δⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠⲆⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Cursed Book"
      }],
      ⵠⲆΔᐃΔ: [{
        id: 0,
        Δⵠⵠ: ⵠᐃ.ⵠΔΔⵠΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔⵠΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⵠΔⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⵠΔⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃΔⲆΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆᐃᐃΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔΔΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠᐃΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⵠⵠⲆᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃΔⵠⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        Δⵠⵠ: ⵠᐃ.ⵠΔΔⵠΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔᐃⲆᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃⲆⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠᐃᐃⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃΔᐃⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⲆᐃⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠⲆⲆⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃΔᐃᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⵠⵠⲆⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⲆⲆᐃⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃⵠΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃⲆⵠⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        Δⵠⵠ: ⵠᐃ.ⲆΔΔΔΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔⲆⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆⲆⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃⲆᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        Δⵠⵠ: ⵠᐃ.ⲆⲆᐃΔᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔΔⵠⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⲆΔᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠⲆΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠⲆΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆᐃⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⲆⲆⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        Δⵠⵠ: ⵠᐃ.ΔᐃⲆΔⲆⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⲆΔᐃⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔᐃⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆⲆⲆⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        Δⵠⵠ: ⵠᐃ.ΔᐃΔⵠᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆᐃⵠⵠΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⵠΔⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆⲆΔᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆᐃⵠⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⲆΔⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆⵠᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆΔⵠⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔΔΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔᐃΔⲆⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆⵠᐃᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃⵠⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠΔᐃΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠΔⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⲆᐃⵠⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃⵠⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃⲆᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⲆⵠⲆⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆᐃΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠᐃⵠⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        Δⵠⵠ: ⵠᐃ.ᐃⵠΔⵠⵠⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆᐃⵠⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        Δⵠⵠ: ⵠᐃ.ΔᐃⲆᐃΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⲆᐃΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠⵠΔΔⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆΔΔⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⲆⲆᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃΔΔⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⲆᐃⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⵠⵠⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆⵠⲆᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⲆΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⲆⵠⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        Δⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃⲆᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔᐃⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        Δⵠⵠ: ⵠᐃ.ⵠΔⲆᐃⵠΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔⲆᐃⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠΔΔᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⵠⵠΔΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠⵠⵠⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔⲆⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠᐃᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃⲆᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        Δⵠⵠ: ⵠᐃ.ⵠᐃᐃᐃⵠᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⲆⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⲆⵠⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆΔΔΔⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠᐃᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃⲆⵠⵠΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠᐃᐃᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠᐃᐃⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔΔⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆⲆᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃⲆⲆΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠΔⲆⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃᐃⲆⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃΔᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        Δⵠⵠ: ⵠᐃ.ⵠⵠⵠᐃΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆΔⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        Δⵠⵠ: ⵠᐃ.ⵠΔⲆⲆⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔΔᐃⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        Δⵠⵠ: ⵠᐃ.ⲆⵠⵠΔⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠΔⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠΔᐃⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠⵠⲆᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        Δⵠⵠ: ⵠᐃ.ΔⵠⵠΔᐃᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠⲆⲆⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃΔΔⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃΔᐃᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔᐃΔⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆⵠⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.Δⵠᐃᐃ,
        ᐃⵠᐃ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃᐃᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔΔᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        Δⵠⵠ: ⵠᐃ.ᐃⲆᐃᐃΔⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃⲆⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆⲆⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔΔⲆⵠⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        Δⵠⵠ: ⵠᐃ.ⲆΔⵠᐃⵠᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠᐃᐃᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆⲆΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.Ⲇⵠᐃⵠᐃᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔᐃⵠᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆᐃⵠΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        Δⵠⵠ: ⵠᐃ.ⵠⵠΔⲆⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃⲆⵠⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⵠⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠᐃⲆΔΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        Δⵠⵠ: ⵠᐃ.ᐃΔⵠⲆⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠᐃⲆᐃⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        Δⵠⵠ: ⵠᐃ.ΔᐃᐃⲆⵠΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆᐃⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        Δⵠⵠ: ⵠᐃ.ΔⲆᐃⲆⲆⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆⵠⵠⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃᐃΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⵠⵠⲆᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        Δⵠⵠ: ⵠᐃ.ΔⲆⵠⲆⲆⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆⲆΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆⵠⲆⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆᐃⵠΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⲆΔΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆⵠᐃⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆᐃⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⵠᐃΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔⲆⲆⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠΔᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        Δⵠⵠ: ⵠᐃ.ⲆΔⲆⵠΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔⲆⲆΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        Δⵠⵠ: ⵠᐃ.ΔΔΔΔᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔΔΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃΔⲆΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔᐃΔᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔΔⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⲆⲆⵠⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        Δⵠⵠ: ⵠᐃ.ΔᐃΔΔΔⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⲆⲆᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆⵠⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔΔⲆⲆΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃᐃΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ᐃᐃᐃⲆᐃΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        Δⵠⵠ: ⵠᐃ.ΔⵠᐃⵠᐃΔΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⵠΔⲆᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔΔᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠⲆⲆⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        Δⵠⵠ: ⵠᐃ.ᐃⲆΔᐃⵠⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔᐃⵠⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆΔⲆⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠΔⵠᐃΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔⵠⵠⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆΔᐃΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃᐃⲆⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆⲆΔΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 119,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⵠᐃᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⲆᐃⲆΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⵠᐃⲆⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Arrow in the Starver"
      }, {
        id: 27,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃⲆΔⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃΔΔⵠᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃΔᐃⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔᐃⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        Δⵠⵠ: ⵠᐃ.ΔᐃⵠΔⲆⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆⲆᐃΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        Δⵠⵠ: ⵠᐃ.ΔΔΔΔⵠᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⵠⵠⲆΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        Δⵠⵠ: ⵠᐃ.ΔⲆⲆΔΔᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔΔΔⵠⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        Δⵠⵠ: ⵠᐃ.ⵠⲆⵠⲆᐃⲆΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔⵠᐃⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        Δⵠⵠ: ⵠᐃ.ⲆᐃⵠΔⵠⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃᐃⵠⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⲆⵠᐃᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠⵠΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        Δⵠⵠ: ⵠᐃ.ΔⲆΔⵠⵠⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⲆⲆΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 120,
        Δⵠⵠ: ⵠᐃ.ᐃᐃΔⵠΔΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔΔⵠᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ΔΔⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "Ice Crown"
      }, {
        id: 60,
        Δⵠⵠ: ⵠᐃ.ᐃΔⲆⲆᐃⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆᐃᐃΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⵠᐃⲆⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔᐃⲆᐃᐃⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔⲆΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔΔᐃᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆⵠΔΔⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔΔⵠⲆᐃΔᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        Δⵠⵠ: ⵠᐃ.ᐃΔΔᐃᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠᐃΔᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        Δⵠⵠ: ⵠᐃ.ⲆΔᐃΔⵠᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃΔⲆⵠⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔᐃΔᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃΔⵠⵠⵠΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        Δⵠⵠ: ⵠᐃ.ⵠΔᐃⲆΔⲆⲆ,
        ᐃᐃΔ: ⵠᐃ.ΔⲆΔΔᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        Δⵠⵠ: ⵠᐃ.ⵠᐃᐃⲆᐃⵠᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆⵠΔΔⲆⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        Δⵠⵠ: ⵠᐃ.ⵠΔⲆᐃⲆΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃⵠⲆΔΔⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Jagged Horns"
      }, {
        id: 98,
        Δⵠⵠ: ⵠᐃ.ⵠᐃⲆΔᐃΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ᐃⵠⵠᐃᐃⲆᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        Δⵠⵠ: ⵠᐃ.ΔⵠⲆᐃⵠᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔᐃⲆᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        Δⵠⵠ: ⵠᐃ.ᐃⲆⵠⵠΔᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⵠⲆᐃᐃΔΔⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        Δⵠⵠ: ⵠᐃ.ᐃⵠⵠΔᐃⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆΔᐃᐃΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        Δⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆᐃᐃⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠΔⵠⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ᐃⲆᐃⲆ,
        ᐃⵠᐃ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        Δⵠⵠ: ⵠᐃ.ⲆⲆΔⲆⲆⵠⵠ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠⲆΔⲆᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃΔᐃⲆΔ,
        ᐃᐃΔ: ⵠᐃ.Ⲇⵠᐃᐃᐃᐃᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        Δⵠⵠ: ⵠᐃ.ⵠΔⵠᐃⵠΔᐃ,
        ᐃᐃΔ: ⵠᐃ.ΔᐃⲆΔⲆⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        Δⵠⵠ: ⵠᐃ.ΔΔᐃⲆᐃᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔᐃᐃⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        Δⵠⵠ: ⵠᐃ.Ⲇⵠⵠⵠᐃᐃᐃ,
        ᐃᐃΔ: ⵠᐃ.ⲆⵠΔⲆⲆⲆⲆ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        Δⵠⵠ: ⵠᐃ.ΔΔΔᐃΔⵠⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃᐃⲆΔⲆΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        Δⵠⵠ: ⵠᐃ.ⲆᐃᐃⵠΔⵠΔ,
        ᐃᐃΔ: ⵠᐃ.ᐃⲆΔᐃΔᐃⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        Δⵠⵠ: ⵠᐃ.ᐃⵠᐃΔⲆⲆⵠ,
        ᐃᐃΔ: ⵠᐃ.ΔⵠⲆΔⲆⵠᐃ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        Δⵠⵠ: ⵠᐃ.ᐃᐃⲆⲆⵠΔΔ,
        ᐃᐃΔ: ⵠᐃ.ⵠⵠΔⵠᐃⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        Δⵠⵠ: ⵠᐃ.ⵠⲆΔⵠⲆᐃΔ,
        ᐃᐃΔ: ⵠᐃ.ⲆΔᐃⵠΔⵠΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        Δⵠⵠ: ⵠᐃ.ⵠΔᐃⵠΔⲆᐃ,
        ᐃᐃΔ: ⵠᐃ.ⵠΔⵠΔΔⵠⵠ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        Δⵠⵠ: ⵠᐃ.ⵠⲆᐃΔⲆᐃⲆ,
        ᐃᐃΔ: ⵠᐃ.ⲆᐃᐃⵠⲆΔΔ,
        ⲆⲆΔ: ᐃⵠΔ.ⲆΔᐃⵠⵠ,
        ᐃⵠᐃ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    v2257.ⲆⵠⵠⵠⲆΔⲆ = ᐃⲆΔⵠᐃΔΔ(ΔⵠᐃΔ.ⵠⵠᐃᐃΔ, 21);
    v2257.ⵠⲆΔᐃΔΔΔ = ᐃⲆΔⵠᐃΔΔ(ΔⵠᐃΔ.ⵠⵠᐃᐃΔ, 20);
    ᐃᐃ[365] = [];
    ᐃᐃ[7] = [];
    ᐃᐃ[360] = [];
    ᐃᐃ[46] = [];
    ᐃᐃ[47] = [];
    ᐃᐃ[1045] = [];
    for (var v812 = 0; ΔⵠᐃΔ.ⵠⵠᐃᐃΔ.length > v812; v812++) {
      ᐃᐃ[365][v812] = [ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[v812].Δⵠⵠ, ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[v812].ᐃᐃΔ];
      ᐃᐃ[7][v812] = [ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[v812].ⲆⲆⵠⵠ, ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[v812].ⲆᐃᐃⲆ];
    }
    for (v812 = 0; v812 < ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ.length; v812++) {
      ᐃᐃ[46][v812] = [ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ[v812].Δⵠⵠ, ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ[v812].ᐃᐃΔ];
    }
    for (v812 = 0; v812 < ΔⵠᐃΔ.ΔⵠΔⲆⵠ.length; v812++) {
      ᐃᐃ[360][v812] = [ΔⵠᐃΔ.ΔⵠΔⲆⵠ[v812].Δⵠⵠ, ΔⵠᐃΔ.ΔⵠΔⲆⵠ[v812].ᐃᐃΔ];
    }
    for (v812 = 0; ΔⵠᐃΔ.ⲆⲆΔΔ.length > v812; v812++) {
      ᐃᐃ[47][v812] = [ΔⵠᐃΔ.ⲆⲆΔΔ[v812].Δⵠⵠ, ΔⵠᐃΔ.ⲆⲆΔΔ[v812].ᐃᐃΔ];
    }
    for (v812 = 0; v812 < ΔⵠᐃΔ.ⵠⲆΔᐃΔ.length; v812++) {
      ᐃᐃ[1045][v812] = [ΔⵠᐃΔ.ⵠⲆΔᐃΔ[v812].Δⵠⵠ, ΔⵠᐃΔ.ⵠⲆΔᐃΔ[v812].ᐃᐃΔ];
    }
  };
  function f93(p520, p521, p522) {
    var v813 = document.createElement("canvas");
    var v814 = v813.getContext("2d");
    v813.width = p520 * 70;
    v813.height = p520 * 70;
    v814.globalAlpha = 0.5;
    f92(v814, p520 * 26, p520 * 26, p520 * 9);
    f88(v814, p522[0]);
    f92(v814, p520 * 56, p520 * 36, p520 * 9);
    f88(v814, p522[1]);
    f92(v814, p520 * 40, p520 * 50, p520 * 9);
    f88(v814, p522[2]);
    v814.globalAlpha = 1;
    f92(v814, p520 * 26, p520 * 26, p520 * 5);
    f88(v814, p522[0]);
    f92(v814, p520 * 56, p520 * 36, p520 * 5);
    f88(v814, p522[1]);
    f92(v814, p520 * 40, p520 * 50, p520 * 5);
    f88(v814, p522[2]);
    return v813;
  }
  function f94(p523, p524, p525) {
    var v815 = document.createElement("canvas");
    var v816 = v815.getContext("2d");
    v815.width = p523 * 248;
    v815.height = p523 * 247;
    v816.save();
    v816.translate(p523 * 69.5, p523 * 145);
    f86(v816, p523 * -8.5, p523 * -63, p523 * 17, p523 * 127, p523 * 1);
    v816.restore();
    f88(v816, p525[0]);
    v816.save();
    v816.translate(p523 * 183, p523 * 145);
    f86(v816, p523 * -8, p523 * -63, p523 * 16, p523 * 126, p523 * 1);
    v816.restore();
    f88(v816, p525[0]);
    v816.save();
    v816.translate(p523 * 123.5, p523 * 62.5);
    v816.rotate(6.28);
    f86(v816, p523 * -84.5, p523 * -25.5, p523 * 169, p523 * 51, p523 * 5);
    v816.restore();
    f88(v816, p525[2], p525[1], p523 * 6);
    v816.save();
    v816.translate(p523 * 123.5, p523 * 118);
    v816.rotate(6.24);
    f86(v816, p523 * -85.5, p523 * -24, p523 * 169, p523 * 48, p523 * 5);
    v816.restore();
    f88(v816, p525[3], p525[1], p523 * 6);
    v816.save();
    v816.translate(p523 * 122, p523 * 177.5);
    v816.rotate(6.32);
    f86(v816, p523 * -84, p523 * -23.5, p523 * 169, p523 * 47, p523 * 5);
    v816.restore();
    f88(v816, p525[2], p525[1], p523 * 6);
    v816.beginPath();
    v816.lineCap = "round";
    v816.lineJoin = "round";
    v816.moveTo(p523 * 37, p523 * 157);
    v816.bezierCurveTo(p523 * 49, p523 * 160, p523 * 49, p523 * 160, p523 * 61, p523 * 163);
    v816.bezierCurveTo(p523 * 49.5, p523 * 165.5, p523 * 49.5, p523 * 165.5, p523 * 38, p523 * 168);
    v816.closePath();
    f88(v816, p525[1]);
    v816.beginPath();
    v816.lineCap = "round";
    v816.lineJoin = "round";
    v816.moveTo(p523 * 205, p523 * 175);
    v816.bezierCurveTo(p523 * 192.5, p523 * 180, p523 * 192.5, p523 * 180, p523 * 180, p523 * 185);
    v816.bezierCurveTo(p523 * 193, p523 * 188, p523 * 193, p523 * 188, p523 * 206, p523 * 191);
    v816.closePath();
    f88(v816, p525[1]);
    return v815;
  }
  function f95(p526, p527, p528) {
    var v817 = document.createElement("canvas");
    var v818 = v817.getContext("2d");
    v817.width = p526 * 264;
    v817.height = p526 * 246;
    v818.translate(0, p526 * 10);
    v818.globalAlpha = p527 ? 0.5 : 1;
    v818.beginPath();
    v818.lineCap = "round";
    v818.lineJoin = "round";
    v818.moveTo(p526 * 75, p526 * 54);
    v818.bezierCurveTo(p526 * 79, p526 * 21, p526 * 131, p526 * 13, p526 * 153, p526 * 36);
    v818.bezierCurveTo(p526 * 204, p526 * 27, p526 * 221, p526 * 52, p526 * 216, p526 * 83);
    v818.bezierCurveTo(p526 * 241, p526 * 103, p526 * 232, p526 * 138, p526 * 214, p526 * 147);
    v818.bezierCurveTo(p526 * 223, p526 * 184, p526 * 201, p526 * 200, p526 * 175, p526 * 199);
    v818.bezierCurveTo(p526 * 156, p526 * 218, p526 * 135, p526 * 222, p526 * 114, p526 * 203);
    v818.bezierCurveTo(p526 * 62, p526 * 213, p526 * 66, p526 * 189, p526 * 59, p526 * 170);
    v818.bezierCurveTo(p526 * 27, p526 * 164, p526 * 31, p526 * 134, p526 * 38, p526 * 123);
    v818.bezierCurveTo(p526 * 11, p526 * 80, p526 * 51, p526 * 52, p526 * 75, p526 * 54);
    v818.closePath();
    f88(v818, p528[0]);
    v818.translate(0, p526 * -10);
    v818.globalAlpha = 1;
    v818.beginPath();
    v818.lineCap = "round";
    v818.lineJoin = "round";
    v818.moveTo(p526 * 75, p526 * 54);
    v818.bezierCurveTo(p526 * 79, p526 * 21, p526 * 131, p526 * 13, p526 * 153, p526 * 36);
    v818.bezierCurveTo(p526 * 204, p526 * 27, p526 * 221, p526 * 52, p526 * 216, p526 * 83);
    v818.bezierCurveTo(p526 * 241, p526 * 103, p526 * 232, p526 * 138, p526 * 214, p526 * 147);
    v818.bezierCurveTo(p526 * 223, p526 * 184, p526 * 201, p526 * 200, p526 * 175, p526 * 199);
    v818.bezierCurveTo(p526 * 156, p526 * 218, p526 * 135, p526 * 222, p526 * 114, p526 * 203);
    v818.bezierCurveTo(p526 * 62, p526 * 213, p526 * 66, p526 * 189, p526 * 59, p526 * 170);
    v818.bezierCurveTo(p526 * 27, p526 * 164, p526 * 31, p526 * 134, p526 * 38, p526 * 123);
    v818.bezierCurveTo(p526 * 11, p526 * 80, p526 * 51, p526 * 52, p526 * 75, p526 * 54);
    v818.closePath();
    f88(v818, p528[1], p528[2], p526 * 8);
    v818.beginPath();
    v818.lineCap = "round";
    v818.lineJoin = "round";
    v818.moveTo(p526 * 121, p526 * 102);
    v818.bezierCurveTo(p526 * 111, p526 * 80, p526 * 110, p526 * 66, p526 * 108, p526 * 51);
    v818.bezierCurveTo(p526 * 119, p526 * 65, p526 * 129, p526 * 85, p526 * 135, p526 * 99);
    v818.bezierCurveTo(p526 * 142, p526 * 67, p526 * 146, p526 * 60, p526 * 152, p526 * 50);
    v818.bezierCurveTo(p526 * 154, p526 * 71, p526 * 152, p526 * 85, p526 * 149, p526 * 104);
    v818.bezierCurveTo(p526 * 166, p526 * 88, p526 * 175, p526 * 83, p526 * 188, p526 * 78);
    v818.bezierCurveTo(p526 * 179, p526 * 91, p526 * 170, p526 * 103, p526 * 160, p526 * 112);
    v818.bezierCurveTo(p526 * 186, p526 * 107, p526 * 191, p526 * 107, p526 * 204, p526 * 108);
    v818.bezierCurveTo(p526 * 195, p526 * 114, p526 * 179, p526 * 120, p526 * 163, p526 * 123);
    v818.bezierCurveTo(p526 * 183, p526 * 130, p526 * 186, p526 * 135, p526 * 192, p526 * 140);
    v818.bezierCurveTo(p526 * 179, p526 * 141, p526 * 164, p526 * 139, p526 * 153, p526 * 135);
    v818.bezierCurveTo(p526 * 158, p526 * 145, p526 * 163, p526 * 159, p526 * 165, p526 * 177);
    v818.bezierCurveTo(p526 * 154, p526 * 166, p526 * 145, p526 * 153, p526 * 138, p526 * 139);
    v818.bezierCurveTo(p526 * 133, p526 * 155, p526 * 125, p526 * 170, p526 * 117, p526 * 182);
    v818.bezierCurveTo(p526 * 116, p526 * 160, p526 * 119, p526 * 151, p526 * 124, p526 * 138);
    v818.bezierCurveTo(p526 * 107, p526 * 150, p526 * 95, p526 * 156, p526 * 82, p526 * 159);
    v818.bezierCurveTo(p526 * 94, p526 * 140, p526 * 101, p526 * 136, p526 * 113, p526 * 128);
    v818.bezierCurveTo(p526 * 78, p526 * 123, p526 * 75, p526 * 121, p526 * 67, p526 * 118);
    v818.bezierCurveTo(p526 * 85, p526 * 112, p526 * 94, p526 * 112, p526 * 111, p526 * 113);
    v818.bezierCurveTo(p526 * 89, p526 * 97, p526 * 85, p526 * 93, p526 * 78, p526 * 82);
    v818.bezierCurveTo(p526 * 92, p526 * 85, p526 * 101, p526 * 90, p526 * 121, p526 * 102);
    v818.closePath();
    f88(v818, p528[2]);
    v818.beginPath();
    v818.lineCap = "round";
    v818.lineJoin = "round";
    v818.moveTo(p526 * 128, p526 * 103);
    v818.bezierCurveTo(p526 * 111, p526 * 112, p526 * 117, p526 * 136, p526 * 140, p526 * 130);
    v818.bezierCurveTo(p526 * 151, p526 * 126, p526 * 156, p526 * 115, p526 * 155, p526 * 107);
    v818.bezierCurveTo(p526 * 155, p526 * 96, p526 * 154, p526 * 94, p526 * 148, p526 * 94);
    v818.bezierCurveTo(p526 * 141, p526 * 94, p526 * 146, p526 * 104, p526 * 136, p526 * 104);
    v818.closePath();
    f88(v818, p528[3], p528[4], p526 * 4);
    return v817;
  }
  function f96(p529, p530) {
    var v819 = document.createElement("canvas");
    var v820 = v819.getContext("2d");
    var v821 = p529 * 120;
    var v822 = p529 * 110;
    var v823 = v821 / 2;
    var v824 = v822 / 2;
    var v825 = p529 * 20;
    var v826 = p529 * 112;
    var v827 = p529 * 82;
    var v828 = v826 / 2;
    var v829 = v827 / 2;
    var v830 = p529 * 4;
    v819.width = v821;
    v819.height = v822;
    v820.globalAlpha = 1;
    v820.translate(v823, v824);
    f86(v820, -v828, -v829, v826, v827, v825);
    f88(v820, p530, p530, v830);
    return v819;
  }
  function f97(p531, p532, p533) {
    var v831 = document.createElement("canvas");
    var v832 = v831.getContext("2d");
    v831.width = p531 * 22;
    v831.height = p531 * 22;
    v832.globalAlpha = 0.4;
    f92(v832, p531 * 11, p531 * 11, p531 * 10);
    f88(v832, p533[0]);
    v832.globalAlpha = 0.7;
    f92(v832, p531 * 11, p531 * 11, p531 * 7);
    f88(v832, p533[0]);
    v832.globalAlpha = 1;
    f92(v832, p531 * 11, p531 * 11, p531 * 4);
    f88(v832, p533[0]);
    return v831;
  }
  function f98(p534, p535, p536) {
    var v833 = document.createElement("canvas");
    var v834 = v833.getContext("2d");
    v833.width = p534 * 248;
    v833.height = p534 * 247;
    v834.save();
    v834.translate(p534 * 182, p534 * 120);
    f86(v834, p534 * -8, p534 * -67, p534 * 16, p534 * 134, p534 * 1);
    v834.restore();
    f88(v834, p536[0]);
    v834.save();
    v834.translate(p534 * 68.5, p534 * 127.5);
    f86(v834, p534 * -8.5, p534 * -70.5, p534 * 17, p534 * 141, p534 * 1);
    v834.restore();
    f88(v834, p536[0]);
    v834.save();
    v834.translate(p534 * 123.5, p534 * 68);
    f86(v834, p534 * -82.5, p534 * -24, p534 * 165, p534 * 48, p534 * 4);
    v834.restore();
    f88(v834, p536[2], p536[1], p534 * 6);
    v834.save();
    v834.translate(p534 * 123, p534 * 179.5);
    f86(v834, p534 * -83, p534 * -24.5, p534 * 166, p534 * 49, p534 * 4);
    v834.restore();
    f88(v834, p536[2], p536[1], p534 * 6);
    v834.save();
    v834.translate(p534 * 123.5, p534 * 123.5);
    v834.rotate(6.24);
    f86(v834, p534 * -82.5, p534 * -24.5, p534 * 165, p534 * 49, p534 * 4);
    v834.restore();
    f88(v834, p536[3], p536[1], p534 * 6);
    v834.beginPath();
    v834.lineCap = "round";
    v834.lineJoin = "round";
    v834.moveTo(p534 * 204, p534 * 112);
    v834.bezierCurveTo(p534 * 149, p534 * 121.5, p534 * 96, p534 * 130, p534 * 94, p534 * 131);
    v834.bezierCurveTo(p534 * 149.5, p534 * 127.5, p534 * 149.5, p534 * 127.5, p534 * 205, p534 * 124);
    v834.closePath();
    f88(v834, p536[1]);
    return v833;
  }
  function f99(p537, p538, p539) {
    var v835 = document.createElement("canvas");
    var v836 = v835.getContext("2d");
    var v837 = p537 * 40;
    var v838 = p537 * 40;
    v835.width = v837;
    v835.height = v838;
    var v839 = v837 * p537 / 2;
    var v840 = p537 * v838 / 2;
    var v841 = p537 * 15;
    v836.save();
    v836.translate(v839, v840);
    v836.globalAlpha = 1;
    f92(v836, 0, 0, v841);
    f88(v836, p539[0]);
    v841 = p537 * 5;
    v839 = p537 * 2;
    v840 = p537 * 1;
    v836.translate(v839, v840);
    v836.globalAlpha = 1;
    f92(v836, 0, 0, v841);
    f88(v836, p539[1]);
    v836.restore();
    return v835;
  }
  function f100(p540, p541, p542) {
    var v842 = document.createElement("canvas");
    var v843 = v842.getContext("2d");
    v842.width = p540 * 191;
    v842.height = p540 * 153;
    v843.globalAlpha = 0.5;
    v843.translate(0, p540 * 10);
    v843.save();
    v843.translate(p540 * 96.49996948242188, p540 * 66.79510498046875);
    v843.rotate(0);
    f86(v843, p540 * -79.5, p540 * -48.5, p540 * 159, p540 * 97, p540 * 22);
    v843.restore();
    f88(v843, p542[0], p542[0], p540 * 4);
    v843.globalAlpha = 1;
    v843.translate(0, p540 * -10);
    v843.save();
    v843.translate(p540 * 96.49996948242188, p540 * 66.79510498046875);
    v843.rotate(0);
    f86(v843, p540 * -79.5, p540 * -48.5, p540 * 159, p540 * 97, p540 * 22);
    v843.restore();
    f88(v843, p542[1], p542[2], p540 * 4);
    v843.translate(p540 * 2, 0);
    v843.beginPath();
    v843.lineCap = "round";
    v843.lineJoin = "round";
    v843.moveTo(p540 * 119, p540 * 28);
    v843.bezierCurveTo(p540 * 119, p540 * 22, p540 * 119, p540 * 20, p540 * 122, p540 * 16);
    v843.bezierCurveTo(p540 * 149, p540 * 39, p540 * 149, p540 * 39, p540 * 176, p540 * 63);
    v843.bezierCurveTo(p540 * 176, p540 * 75, p540 * 176, p540 * 75, p540 * 175, p540 * 88);
    v843.bezierCurveTo(p540 * 174, p540 * 90, p540 * 174, p540 * 90, p540 * 172, p540 * 93);
    v843.bezierCurveTo(p540 * 171, p540 * 101, p540 * 169, p540 * 109, p540 * 164, p540 * 113);
    v843.bezierCurveTo(p540 * 163, p540 * 104, p540 * 163, p540 * 104, p540 * 162, p540 * 95);
    v843.bezierCurveTo(p540 * 155, p540 * 105, p540 * 155, p540 * 105, p540 * 147, p540 * 116);
    v843.bezierCurveTo(p540 * 87, p540 * 114, p540 * 87, p540 * 114, p540 * 26, p540 * 112);
    v843.bezierCurveTo(p540 * 27, p540 * 106, p540 * 27, p540 * 106, p540 * 27, p540 * 101);
    v843.bezierCurveTo(p540 * 24, p540 * 104, p540 * 24, p540 * 104, p540 * 20, p540 * 108);
    v843.bezierCurveTo(p540 * 17, p540 * 103, p540 * 20, p540 * 86, p540 * 23, p540 * 72);
    v843.bezierCurveTo(p540 * 15, p540 * 74, p540 * 14, p540 * 78, p540 * 12, p540 * 83);
    v843.bezierCurveTo(p540 * 12, p540 * 65, p540 * 12, p540 * 54, p540 * 16, p540 * 42);
    v843.bezierCurveTo(p540 * 14, p540 * 39, p540 * 14, p540 * 39, p540 * 12, p540 * 36);
    v843.bezierCurveTo(p540 * 16, p540 * 33, p540 * 16, p540 * 33, p540 * 19, p540 * 30);
    v843.bezierCurveTo(p540 * 18, p540 * 27, p540 * 18, p540 * 27, p540 * 17, p540 * 25);
    v843.bezierCurveTo(p540 * 24, p540 * 24, p540 * 31, p540 * 21, p540 * 29, p540 * 19);
    v843.bezierCurveTo(p540 * 37, p540 * 25, p540 * 37, p540 * 25, p540 * 45, p540 * 31);
    v843.bezierCurveTo(p540 * 40, p540 * 23, p540 * 40, p540 * 21, p540 * 42, p540 * 16);
    v843.bezierCurveTo(p540 * 74, p540 * 16, p540 * 74, p540 * 16, p540 * 106, p540 * 16);
    v843.bezierCurveTo(p540 * 113, p540 * 21, p540 * 113, p540 * 21, p540 * 119, p540 * 26);
    v843.closePath();
    f88(v843, p542[3], p542[4], p540 * 4);
    return v842;
  }
  function f101(p543, p544, p545) {
    var v844 = document.createElement("canvas");
    var v845 = v844.getContext("2d");
    v844.width = p543 * 248;
    v844.height = p543 * 247;
    v845.save();
    v845.translate(p543 * 183, p543 * 107);
    f86(v845, p543 * -8, p543 * -70.5, p543 * 16, p543 * 141, p543 * 1);
    v845.restore();
    f88(v845, p545[0]);
    v845.save();
    v845.translate(p543 * 69.5, p543 * 110);
    f86(v845, p543 * -8.5, p543 * -71, p543 * 17, p543 * 143, p543 * 1);
    v845.restore();
    f88(v845, p545[0]);
    v845.save();
    v845.translate(p543 * 123.5, p543 * 181);
    f86(v845, p543 * -84.5, p543 * -26, p543 * 169, p543 * 52, p543 * 5);
    v845.restore();
    f88(v845, p545[2], p545[1], p543 * 6);
    v845.beginPath();
    v845.lineCap = "round";
    v845.lineJoin = "round";
    v845.moveTo(p543 * 41, p543 * 95);
    v845.bezierCurveTo(p543 * 105, p543 * 96, p543 * 113, p543 * 99, p543 * 134, p543 * 102);
    v845.bezierCurveTo(p543 * 147, p543 * 106, p543 * 173, p543 * 100, p543 * 207, p543 * 105);
    v845.bezierCurveTo(p543 * 210, p543 * 105, p543 * 207, p543 * 140, p543 * 207, p543 * 154);
    v845.bezierCurveTo(p543 * 123.5, p543 * 151.5, p543 * 123.5, p543 * 151.5, p543 * 40, p543 * 149);
    v845.bezierCurveTo(p543 * 37, p543 * 145, p543 * 39, p543 * 95, p543 * 41, p543 * 96);
    v845.closePath();
    f88(v845, p545[2], p545[1], p543 * 6);
    v845.beginPath();
    v845.lineCap = "round";
    v845.lineJoin = "round";
    v845.moveTo(p543 * 68, p543 * 75);
    v845.bezierCurveTo(p543 * 54, p543 * 72.5, p543 * 54, p543 * 72.5, p543 * 40, p543 * 70);
    v845.bezierCurveTo(p543 * 38, p543 * 46, p543 * 40, p543 * 46, p543 * 53, p543 * 46);
    v845.bezierCurveTo(p543 * 201, p543 * 41, p543 * 201, p543 * 41, p543 * 201, p543 * 42);
    v845.bezierCurveTo(p543 * 211, p543 * 40, p543 * 208, p543 * 53, p543 * 208, p543 * 72);
    v845.bezierCurveTo(p543 * 209, p543 * 91, p543 * 210, p543 * 96, p543 * 194, p543 * 94);
    v845.bezierCurveTo(p543 * 119, p543 * 97, p543 * 119, p543 * 97, p543 * 44, p543 * 100);
    v845.bezierCurveTo(p543 * 39, p543 * 99, p543 * 40, p543 * 96, p543 * 40, p543 * 80);
    v845.bezierCurveTo(p543 * 54, p543 * 77.5, p543 * 54, p543 * 77.5, p543 * 68, p543 * 75);
    v845.closePath();
    f88(v845, p545[3], p545[1], p543 * 6);
    return v844;
  }
  function f102(p546, p547, p548) {
    var v846 = document.createElement("canvas");
    var v847 = v846.getContext("2d");
    v846.width = p546 * 191;
    v846.height = p546 * 153;
    v847.globalAlpha = 0.5;
    v847.translate(0, p546 * 10);
    v847.save();
    v847.translate(p546 * 97.49996948242188, p546 * 95.12844848632812);
    f86(v847, p546 * -62.5, p546 * -41.5, p546 * 125, p546 * 83, p546 * 20);
    v847.restore();
    f88(v847, p548[0], p548[0], p546 * 4);
    v847.globalAlpha = 1;
    v847.translate(0, p546 * -10);
    v847.save();
    v847.translate(p546 * 97.49996948242188, p546 * 95.12844848632812);
    f86(v847, p546 * -62.5, p546 * -41.5, p546 * 125, p546 * 83, p546 * 20);
    v847.restore();
    f88(v847, p548[1], p548[2], p546 * 4);
    v847.globalCompositeOperation = "destination-out";
    v847.beginPath();
    v847.lineCap = "round";
    v847.lineJoin = "round";
    v847.moveTo(p546 * 26.999969482421875, p546 * 50.850677490234375);
    v847.bezierCurveTo(p546 * 46.499969482421875, p546 * 64.85067749023438, p546 * 46.499969482421875, p546 * 64.85067749023438, p546 * 65.99996948242188, p546 * 78.85067749023438);
    v847.bezierCurveTo(p546 * 80.99996948242188, p546 * 87.85067749023438, p546 * 105.99996948242188, p546 * 82.85067749023438, p546 * 114.99996948242188, p546 * 80.85067749023438);
    v847.bezierCurveTo(p546 * 130.99996948242188, p546 * 69.85067749023438, p546 * 152.99996948242188, p546 * 70.85067749023438, p546 * 166.99996948242188, p546 * 67.85067749023438);
    v847.bezierCurveTo(p546 * 156.99996948242188, p546 * 52.850677490234375, p546 * 156.99996948242188, p546 * 52.850677490234375, p546 * 146.99996948242188, p546 * 37.850677490234375);
    v847.bezierCurveTo(p546 * 101.49996948242188, p546 * 37.350677490234375, p546 * 101.49996948242188, p546 * 37.350677490234375, p546 * 55.999969482421875, p546 * 36.850677490234375);
    v847.closePath();
    f88(v847, p548[2], p548[3], p546 * 4);
    v847.globalCompositeOperation = "source-over";
    v847.beginPath();
    v847.lineCap = "round";
    v847.lineJoin = "round";
    v847.moveTo(p546 * 40.999969482421875, p546 * 59.850677490234375);
    v847.bezierCurveTo(p546 * 41.999969482421875, p546 * 50.850677490234375, p546 * 47.999969482421875, p546 * 47.850677490234375, p546 * 56.999969482421875, p546 * 49.850677490234375);
    v847.bezierCurveTo(p546 * 65.99996948242188, p546 * 41.850677490234375, p546 * 76.99996948242188, p546 * 42.850677490234375, p546 * 90.99996948242188, p546 * 47.850677490234375);
    v847.bezierCurveTo(p546 * 94.99996948242188, p546 * 42.850677490234375, p546 * 104.99996948242188, p546 * 42.850677490234375, p546 * 114.99996948242188, p546 * 47.850677490234375);
    v847.bezierCurveTo(p546 * 131.99996948242188, p546 * 42.850677490234375, p546 * 142.99996948242188, p546 * 48.850677490234375, p546 * 145.99996948242188, p546 * 56.850677490234375);
    v847.bezierCurveTo(p546 * 160.99996948242188, p546 * 63.850677490234375, p546 * 154.99996948242188, p546 * 69.85067749023438, p546 * 155.99996948242188, p546 * 70.85067749023438);
    v847.bezierCurveTo(p546 * 141.99996948242188, p546 * 71.85067749023438, p546 * 141.99996948242188, p546 * 71.85067749023438, p546 * 127.99996948242188, p546 * 72.85067749023438);
    v847.bezierCurveTo(p546 * 110.99996948242188, p546 * 83.85067749023438, p546 * 107.99996948242188, p546 * 82.85067749023438, p546 * 90.99996948242188, p546 * 85.85067749023438);
    v847.bezierCurveTo(p546 * 70.99996948242188, p546 * 83.85067749023438, p546 * 64.99996948242188, p546 * 79.85067749023438, p546 * 53.999969482421875, p546 * 70.85067749023438);
    v847.closePath();
    f88(v847, p548[3], p548[4], p546 * 4);
    v847.beginPath();
    v847.lineCap = "round";
    v847.lineJoin = "round";
    v847.moveTo(p546 * 33.999969482421875, p546 * 65.85067749023438);
    v847.bezierCurveTo(p546 * 36.999969482421875, p546 * 59.850677490234375, p546 * 34.999969482421875, p546 * 60.850677490234375, p546 * 39.999969482421875, p546 * 59.850677490234375);
    v847.bezierCurveTo(p546 * 47.999969482421875, p546 * 61.850677490234375, p546 * 62.999969482421875, p546 * 76.85067749023438, p546 * 74.99996948242188, p546 * 79.85067749023438);
    v847.bezierCurveTo(p546 * 93.99996948242188, p546 * 85.85067749023438, p546 * 111.99996948242188, p546 * 83.85067749023438, p546 * 124.99996948242188, p546 * 70.85067749023438);
    v847.bezierCurveTo(p546 * 129.99996948242188, p546 * 67.85067749023438, p546 * 145.99996948242188, p546 * 65.85067749023438, p546 * 159.99996948242188, p546 * 67.85067749023438);
    v847.bezierCurveTo(p546 * 159.99996948242188, p546 * 71.85067749023438, p546 * 159.99996948242188, p546 * 71.85067749023438, p546 * 159.99996948242188, p546 * 75.85067749023438);
    v847.bezierCurveTo(p546 * 146.99996948242188, p546 * 72.85067749023438, p546 * 144.99996948242188, p546 * 75.85067749023438, p546 * 143.99996948242188, p546 * 82.85067749023438);
    v847.bezierCurveTo(p546 * 144.99996948242188, p546 * 86.85067749023438, p546 * 140.99996948242188, p546 * 90.85067749023438, p546 * 137.99996948242188, p546 * 86.85067749023438);
    v847.bezierCurveTo(p546 * 139.99996948242188, p546 * 72.85067749023438, p546 * 135.99996948242188, p546 * 72.85067749023438, p546 * 133.99996948242188, p546 * 82.85067749023438);
    v847.bezierCurveTo(p546 * 127.99996948242188, p546 * 88.85067749023438, p546 * 124.99996948242188, p546 * 70.85067749023438, p546 * 116.99996948242188, p546 * 86.85067749023438);
    v847.bezierCurveTo(p546 * 110.99996948242188, p546 * 91.85067749023438, p546 * 96.99996948242188, p546 * 81.85067749023438, p546 * 89.99996948242188, p546 * 90.85067749023438);
    v847.bezierCurveTo(p546 * 85.99996948242188, p546 * 92.85067749023438, p546 * 81.99996948242188, p546 * 95.85067749023438, p546 * 76.99996948242188, p546 * 86.85067749023438);
    v847.bezierCurveTo(p546 * 67.99996948242188, p546 * 93.85067749023438, p546 * 67.99996948242188, p546 * 91.85067749023438, p546 * 60.999969482421875, p546 * 79.85067749023438);
    v847.bezierCurveTo(p546 * 53.999969482421875, p546 * 71.85067749023438, p546 * 52.999969482421875, p546 * 72.85067749023438, p546 * 46.999969482421875, p546 * 77.85067749023438);
    v847.bezierCurveTo(p546 * 41.999969482421875, p546 * 78.85067749023438, p546 * 42.999969482421875, p546 * 69.85067749023438, p546 * 33.999969482421875, p546 * 65.85067749023438);
    v847.closePath();
    f88(v847, p548[5], p548[6], p546 * 4);
    f92(v847, p546 * 68, p546 * 111.29513549804688, p546 * 15);
    f88(v847, p548[7], p548[8], p546 * 4);
    f92(v847, p546 * 123, p546 * 111.29510498046875, p546 * 15);
    f88(v847, p548[7], p548[8], p546 * 4);
    f92(v847, p546 * 63, p546 * 106, p546 * 5);
    f88(v847, p548[9]);
    f92(v847, p546 * 118, p546 * 106, p546 * 5);
    f88(v847, p548[9]);
    return v846;
  }
  function f103(p549, p550, p551, p552) {
    var v848 = document.createElement("canvas");
    var v849 = v848.getContext("2d");
    v848.width = p549 * 185;
    v848.height = p549 * 240;
    v849.globalAlpha = 0.5;
    v849.translate(0, p549 * 10);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 44, p549 * 137);
    v849.bezierCurveTo(p549 * 60, p549 * 87, p549 * 68, p549 * 66, p549 * 92, p549 * 67);
    v849.bezierCurveTo(p549 * 115, p549 * 64, p549 * 129, p549 * 97, p549 * 137, p549 * 136);
    v849.closePath();
    f88(v849, p551[0]);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 53, p549 * 181);
    v849.bezierCurveTo(p549 * 30, p549 * 164, p549 * 19, p549 * 150, p549 * 11, p549 * 136);
    v849.bezierCurveTo(p549 * 28, p549 * 121, p549 * 38, p549 * 132, p549 * 48, p549 * 150);
    v849.closePath();
    f88(v849, p551[0]);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 63, p549 * 208);
    v849.bezierCurveTo(p549 * 75, p549 * 224, p549 * 86, p549 * 228, p549 * 93, p549 * 228);
    v849.bezierCurveTo(p549 * 104, p549 * 229, p549 * 116, p549 * 219, p549 * 122, p549 * 205);
    v849.closePath();
    f88(v849, p551[0]);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 130, p549 * 170);
    v849.bezierCurveTo(p549 * 146, p549 * 125, p549 * 156, p549 * 126, p549 * 173, p549 * 137);
    v849.bezierCurveTo(p549 * 167, p549 * 151, p549 * 143, p549 * 174, p549 * 131, p549 * 183);
    v849.closePath();
    f88(v849, p551[0]);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 39, p549 * 140);
    v849.bezierCurveTo(p549 * 75, p549 * 126, p549 * 113, p549 * 127, p549 * 143, p549 * 137);
    v849.bezierCurveTo(p549 * 141, p549 * 186, p549 * 130, p549 * 202, p549 * 113, p549 * 214);
    v849.bezierCurveTo(p549 * 85, p549 * 228, p549 * 56, p549 * 219, p549 * 48, p549 * 173);
    v849.bezierCurveTo(p549 * 40, p549 * 148, p549 * 43, p549 * 145, p549 * 39, p549 * 140);
    v849.closePath();
    f88(v849, p551[0]);
    v849.globalAlpha = 1;
    v849.translate(0, p549 * -10);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 44, p549 * 137);
    v849.bezierCurveTo(p549 * 60, p549 * 87, p549 * 68, p549 * 66, p549 * 92, p549 * 67);
    v849.bezierCurveTo(p549 * 115, p549 * 64, p549 * 129, p549 * 97, p549 * 137, p549 * 136);
    v849.closePath();
    f88(v849, p551[1], p551[2], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 53, p549 * 181);
    v849.bezierCurveTo(p549 * 30, p549 * 164, p549 * 19, p549 * 150, p549 * 11, p549 * 136);
    v849.bezierCurveTo(p549 * 28, p549 * 121, p549 * 38, p549 * 132, p549 * 48, p549 * 150);
    v849.closePath();
    f88(v849, p551[1], p551[2], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 63, p549 * 208);
    v849.bezierCurveTo(p549 * 75, p549 * 224, p549 * 86, p549 * 228, p549 * 93, p549 * 228);
    v849.bezierCurveTo(p549 * 104, p549 * 229, p549 * 116, p549 * 219, p549 * 122, p549 * 205);
    v849.closePath();
    f88(v849, p551[1], p551[2], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 130, p549 * 170);
    v849.bezierCurveTo(p549 * 146, p549 * 125, p549 * 156, p549 * 126, p549 * 173, p549 * 137);
    v849.bezierCurveTo(p549 * 167, p549 * 151, p549 * 143, p549 * 174, p549 * 131, p549 * 183);
    v849.closePath();
    f88(v849, p551[1], p551[2], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 39, p549 * 140);
    v849.bezierCurveTo(p549 * 75, p549 * 126, p549 * 113, p549 * 127, p549 * 143, p549 * 137);
    v849.bezierCurveTo(p549 * 141, p549 * 186, p549 * 130, p549 * 202, p549 * 113, p549 * 214);
    v849.bezierCurveTo(p549 * 85, p549 * 228, p549 * 56, p549 * 219, p549 * 48, p549 * 173);
    v849.bezierCurveTo(p549 * 40, p549 * 148, p549 * 43, p549 * 145, p549 * 39, p549 * 140);
    v849.closePath();
    f88(v849, p551[1], p551[2], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 59, p549 * 99);
    v849.bezierCurveTo(p549 * 71, p549 * 68, p549 * 81, p549 * 68, p549 * 94, p549 * 67);
    v849.bezierCurveTo(p549 * 105, p549 * 66, p549 * 119, p549 * 75, p549 * 123, p549 * 96);
    v849.bezierCurveTo(p549 * 104, p549 * 91, p549 * 101, p549 * 94, p549 * 94, p549 * 97);
    v849.bezierCurveTo(p549 * 76, p549 * 92, p549 * 73, p549 * 93, p549 * 60, p549 * 99);
    v849.closePath();
    f88(v849, p551[3], p551[2], p549 * 4);
    if (p552 === 0) {
      v849.beginPath();
      v849.lineCap = "round";
      v849.lineJoin = "round";
      v849.moveTo(p549 * 47, p549 * 149);
      v849.bezierCurveTo(p549 * 43, p549 * 140, p549 * 48, p549 * 130, p549 * 59, p549 * 127);
      v849.bezierCurveTo(p549 * 77, p549 * 126, p549 * 90, p549 * 131, p549 * 131, p549 * 127);
      v849.bezierCurveTo(p549 * 143, p549 * 130, p549 * 144, p549 * 143, p549 * 132, p549 * 154);
      v849.bezierCurveTo(p549 * 90, p549 * 152, p549 * 90, p549 * 152, p549 * 48, p549 * 150);
      v849.closePath();
      f88(v849, p551[1]);
      v849.beginPath();
      v849.lineCap = "round";
      v849.lineJoin = "round";
      v849.moveTo(p549 * 40, p549 * 139);
      v849.bezierCurveTo(p549 * 48, p549 * 113, p549 * 76, p549 * 119, p549 * 91, p549 * 126);
      v849.bezierCurveTo(p549 * 117, p549 * 113, p549 * 135, p549 * 117, p549 * 144, p549 * 134);
      v849.bezierCurveTo(p549 * 144, p549 * 138, p549 * 144, p549 * 138, p549 * 144, p549 * 142);
      v849.bezierCurveTo(p549 * 128, p549 * 124, p549 * 108, p549 * 124, p549 * 91, p549 * 136);
      v849.bezierCurveTo(p549 * 59, p549 * 124, p549 * 50, p549 * 137, p549 * 42, p549 * 148);
      v849.closePath();
      f88(v849, p551[3], p551[2], p549 * 4);
    } else {
      v849.beginPath();
      v849.lineCap = "round";
      v849.lineJoin = "round";
      v849.moveTo(p549 * 41, p549 * 139);
      v849.bezierCurveTo(p549 * 53, p549 * 117, p549 * 69, p549 * 118, p549 * 92, p549 * 127);
      v849.bezierCurveTo(p549 * 124, p549 * 111, p549 * 136, p549 * 121, p549 * 143, p549 * 136);
      v849.bezierCurveTo(p549 * 142, p549 * 144, p549 * 142, p549 * 144, p549 * 141, p549 * 152);
      v849.bezierCurveTo(p549 * 128, p549 * 131, p549 * 113, p549 * 138, p549 * 92, p549 * 145);
      v849.bezierCurveTo(p549 * 57, p549 * 133, p549 * 57, p549 * 147, p549 * 44, p549 * 154);
      v849.closePath();
      f88(v849, p551[3], p551[2], p549 * 4);
    }
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 90, p549 * 95);
    v849.bezierCurveTo(p549 * 99, p549 * 82, p549 * 98, p549 * 58, p549 * 99, p549 * 40);
    v849.bezierCurveTo(p549 * 90, p549 * 38, p549 * 89, p549 * 34, p549 * 92, p549 * 17);
    v849.bezierCurveTo(p549 * 92, p549 * 5, p549 * 83, p549 * 16, p549 * 78, p549 * 29);
    v849.bezierCurveTo(p549 * 72, p549 * 59, p549 * 87, p549 * 81, p549 * 89, p549 * 87);
    v849.closePath();
    f88(v849, p551[1], p551[2], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 90, p549 * 86);
    v849.bezierCurveTo(p549 * 95, p549 * 74, p549 * 95, p549 * 62, p549 * 95, p549 * 43);
    v849.bezierCurveTo(p549 * 84, p549 * 37, p549 * 86, p549 * 34, p549 * 89, p549 * 16);
    v849.bezierCurveTo(p549 * 75, p549 * 29, p549 * 80, p549 * 58, p549 * 90, p549 * 85);
    v849.closePath();
    f88(v849, p551[1], p551[3], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 92, p549 * 117);
    v849.bezierCurveTo(p549 * 98, p549 * 87, p549 * 93, p549 * 78, p549 * 85, p549 * 76);
    v849.bezierCurveTo(p549 * 85.5, p549 * 79.5, p549 * 85.5, p549 * 79.5, p549 * 86, p549 * 83);
    v849.bezierCurveTo(p549 * 84, p549 * 85.5, p549 * 84, p549 * 85.5, p549 * 82, p549 * 88);
    v849.bezierCurveTo(p549 * 90, p549 * 93, p549 * 89, p549 * 100, p549 * 92, p549 * 117);
    v849.closePath();
    f88(v849, p551[1], p551[3], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 92, p549 * 175);
    v849.bezierCurveTo(p549 * 95, p549 * 135, p549 * 98, p549 * 125, p549 * 109, p549 * 121);
    v849.bezierCurveTo(p549 * 106, p549 * 114, p549 * 104, p549 * 114, p549 * 102, p549 * 113);
    v849.bezierCurveTo(p549 * 103, p549 * 106, p549 * 104, p549 * 103, p549 * 107, p549 * 96);
    v849.bezierCurveTo(p549 * 74, p549 * 108, p549 * 86, p549 * 157, p549 * 92, p549 * 174);
    v849.closePath();
    f88(v849, p551[1], p551[3], p549 * 4);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 48, p549 * 169);
    v849.bezierCurveTo(p549 * 42, p549 * 187, p549 * 50, p549 * 193, p549 * 59, p549 * 198);
    v849.closePath();
    f88(v849, undefined, p551[2], p549 * 5);
    v849.beginPath();
    v849.lineCap = "round";
    v849.lineJoin = "round";
    v849.moveTo(p549 * 136, p549 * 171);
    v849.bezierCurveTo(p549 * 139, p549 * 186, p549 * 138, p549 * 191, p549 * 124, p549 * 199);
    v849.closePath();
    f88(v849, undefined, p551[2], p549 * 4);
    f92(v849, p549 * 63, p549 * 180, p549 * 15.231546211727817);
    f88(v849, p551[4]);
    f92(v849, p549 * 121, p549 * 181, p549 * 15.652475842498529);
    f88(v849, p551[4]);
    f92(v849, p549 * 58, p549 * 175, p549 * 5.656854249492381);
    f88(v849, p551[2]);
    f92(v849, p549 * 116, p549 * 175, p549 * 5.656854249492381);
    f88(v849, p551[2]);
    return v848;
  }
  function f104(p553, p554) {
    var v850 = document.createElement("canvas");
    var v851 = v850.getContext("2d");
    v850.width = p553 * 191;
    v850.height = p553 * 153;
    v851.save();
    v851.translate(p553 * 96.49996948242188, p553 * 66.79510498046875);
    f86(v851, p553 * -79.5, p553 * -48.5, p553 * 159, p553 * 97, p553 * 22);
    v851.restore();
    f88(v851, p554[0], p554[0], p553 * 4);
    v851.translate(p553 * 2, 0);
    v851.beginPath();
    v851.lineCap = "round";
    v851.lineJoin = "round";
    v851.moveTo(p553 * 119, p553 * 28);
    v851.bezierCurveTo(p553 * 119, p553 * 22, p553 * 119, p553 * 20, p553 * 122, p553 * 16);
    v851.bezierCurveTo(p553 * 149, p553 * 39, p553 * 149, p553 * 39, p553 * 176, p553 * 63);
    v851.bezierCurveTo(p553 * 176, p553 * 75, p553 * 176, p553 * 75, p553 * 175, p553 * 88);
    v851.bezierCurveTo(p553 * 174, p553 * 90, p553 * 174, p553 * 90, p553 * 172, p553 * 93);
    v851.bezierCurveTo(p553 * 171, p553 * 101, p553 * 169, p553 * 109, p553 * 164, p553 * 113);
    v851.bezierCurveTo(p553 * 163, p553 * 104, p553 * 163, p553 * 104, p553 * 162, p553 * 95);
    v851.bezierCurveTo(p553 * 155, p553 * 105, p553 * 155, p553 * 105, p553 * 147, p553 * 116);
    v851.bezierCurveTo(p553 * 87, p553 * 114, p553 * 87, p553 * 114, p553 * 26, p553 * 112);
    v851.bezierCurveTo(p553 * 27, p553 * 106, p553 * 27, p553 * 106, p553 * 27, p553 * 101);
    v851.bezierCurveTo(p553 * 24, p553 * 104, p553 * 24, p553 * 104, p553 * 20, p553 * 108);
    v851.bezierCurveTo(p553 * 17, p553 * 103, p553 * 20, p553 * 86, p553 * 23, p553 * 72);
    v851.bezierCurveTo(p553 * 15, p553 * 74, p553 * 14, p553 * 78, p553 * 12, p553 * 83);
    v851.bezierCurveTo(p553 * 12, p553 * 65, p553 * 12, p553 * 54, p553 * 16, p553 * 42);
    v851.bezierCurveTo(p553 * 14, p553 * 39, p553 * 14, p553 * 39, p553 * 12, p553 * 36);
    v851.bezierCurveTo(p553 * 16, p553 * 33, p553 * 16, p553 * 33, p553 * 19, p553 * 30);
    v851.bezierCurveTo(p553 * 18, p553 * 27, p553 * 18, p553 * 27, p553 * 17, p553 * 25);
    v851.bezierCurveTo(p553 * 24, p553 * 24, p553 * 31, p553 * 21, p553 * 29, p553 * 19);
    v851.bezierCurveTo(p553 * 37, p553 * 25, p553 * 37, p553 * 25, p553 * 45, p553 * 31);
    v851.bezierCurveTo(p553 * 40, p553 * 23, p553 * 40, p553 * 21, p553 * 42, p553 * 16);
    v851.bezierCurveTo(p553 * 74, p553 * 16, p553 * 74, p553 * 16, p553 * 106, p553 * 16);
    v851.bezierCurveTo(p553 * 113, p553 * 21, p553 * 113, p553 * 21, p553 * 119, p553 * 26);
    v851.closePath();
    f88(v851, p554[0], p554[0], p553 * 4);
    v851.save();
    v851.translate(p553 * 97.49996948242188, p553 * 95.12844848632812);
    f86(v851, p553 * -62.5, p553 * -41.5, p553 * 125, p553 * 83, p553 * 20);
    v851.restore();
    f88(v851, p554[0], p554[0], p553 * 4);
    return v850;
  }
  function f105(p555, p556, p557) {
    var v852 = document.createElement("canvas");
    var v853 = v852.getContext("2d");
    v852.width = p555 * 400;
    v852.height = p555 * 400;
    v853.save();
    v853.translate(p555 * 85, p555 * 237);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 54.585977194239184, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 178, p555 * 238);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 52.53573932334064, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 270, p555 * 239);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 53.58058329516393, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 222, p555 * 312);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 52.53573932334064, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 317, p555 * 159);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 57.63465889766331, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 223.5, p555 * 139.0625);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 51.66236541235796, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 132.5, p555 * 137.0625);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 52.009614495783374, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 178.5, p555 * 58.0625);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 53.16013544000805, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 177.5, p555 * 216.0625);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 50, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 84.5, p555 * 215.0625);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 54, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 319.5, p555 * 138.0625);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 55.08175741568164, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 269.5, p555 * 216.0625);
    v853.rotate(1.5707963267948966);
    f89(v853, 6, p555 * 54.589376255824725, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 221.5, p555 * 293.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 49.49747468305833, p555 * 1);
    v853.restore();
    f88(v853, p557[1], p557[2], p555 * 12);
    v853.beginPath();
    v853.lineCap = "round";
    v853.lineJoin = "round";
    v853.moveTo(p555 * 221.5, p555 * 342.0625);
    v853.bezierCurveTo(p555 * 221.5, p555 * 350.5625, p555 * 221.5, p555 * 350.5625, p555 * 221.5, p555 * 359.0625);
    v853.closePath();
    f88(v853, undefined, p557[2], p555 * 12);
    v853.beginPath();
    v853.lineCap = "round";
    v853.lineJoin = "round";
    v853.moveTo(p555 * 84.5, p555 * 270.0625);
    v853.bezierCurveTo(p555 * 84.5, p555 * 277.0625, p555 * 84.5, p555 * 277.0625, p555 * 84.5, p555 * 284.0625);
    v853.closePath();
    f88(v853, undefined, p557[2], p555 * 12);
    v853.save();
    v853.translate(p555 * 84.5, p555 * 215.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 30, p555 * 15);
    v853.restore();
    f88(v853, p557[3]);
    v853.save();
    v853.translate(p555 * 177.5, p555 * 215.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 30, p555 * 15);
    v853.restore();
    f88(v853, p557[3]);
    v853.save();
    v853.translate(p555 * 222.5, p555 * 294.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 30, p555 * 15);
    v853.restore();
    f88(v853, p557[3]);
    v853.save();
    v853.translate(p555 * 270.5, p555 * 216.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 30, p555 * 15);
    v853.restore();
    f88(v853, p557[3]);
    v853.save();
    v853.translate(p555 * 320.5, p555 * 134.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 30, p555 * 15);
    v853.restore();
    f88(v853, p557[3]);
    v853.save();
    v853.translate(p555 * 224.5, p555 * 138.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 30, p555 * 15);
    v853.restore();
    f88(v853, p557[3]);
    v853.save();
    v853.translate(p555 * 133.5, p555 * 137.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 30, p555 * 15);
    v853.restore();
    f88(v853, p557[3]);
    v853.save();
    v853.translate(p555 * 178.5, p555 * 56.0625);
    v853.rotate(0.5235987755982988);
    f89(v853, 6, p555 * 30, p555 * 15);
    v853.restore();
    f88(v853, p557[3]);
    return v852;
  }
  function f106(p558, p559, p560) {
    var v854 = document.createElement("canvas");
    var v855 = v854.getContext("2d");
    var v856 = p558 * 55;
    var v857 = p558 * 55;
    var v858 = p558 * 8;
    v854.width = v856;
    v854.height = v857;
    v855.translate(p558 * -65, p558 * -55 + v858);
    v855.globalAlpha = 1;
    v855.beginPath();
    v855.moveTo(p558 * 95, p558 * 60);
    v855.bezierCurveTo(p558 * 107, p558 * 62, p558 * 110, p558 * 73, p558 * 107, p558 * 79);
    v855.bezierCurveTo(p558 * 104, p558 * 85, p558 * 85, p558 * 93, p558 * 81, p558 * 88);
    v855.bezierCurveTo(p558 * 74, p558 * 80, p558 * 85, p558 * 60, p558 * 95, p558 * 60);
    v855.closePath();
    f88(v855, p560[0], p560[1], 3);
    v855.globalAlpha = 1;
    v855.beginPath();
    v855.moveTo(p558 * 91, p558 * 70);
    v855.bezierCurveTo(p558 * 91, p558 * 75, p558 * 100, p558 * 76, p558 * 100, p558 * 73);
    v855.bezierCurveTo(p558 * 100, p558 * 69, p558 * 89, p558 * 65, p558 * 91, p558 * 70);
    v855.closePath();
    f88(v855, p560[2], p560[3], 3);
    return v854;
  }
  function f107(p561, p562, p563) {
    var v859 = document.createElement("canvas");
    var v860 = v859.getContext("2d");
    var v861 = p561 * 195;
    var v862 = p561 * 190;
    var v863 = v861 / 2;
    var v864 = v862 / 2;
    v859.width = v861;
    v859.height = v862;
    var v865 = p561 * 10;
    var v866 = p561 * 35;
    var v867 = p561 * 150;
    var v868 = v866 / 2;
    var v869 = v867 / 2;
    var v870 = p561 * 4;
    v860.translate(v863 - p561 * 5, v864 - p561 * 5);
    v860.rotate(-Math.PI / 1.25);
    v860.globalAlpha = 1;
    f86(v860, -v868, -v869, v866, v867, v865);
    f88(v860, p563[0], p563[1], v870);
    v860.translate(0, 0);
    v860.rotate(Math.PI / 3);
    v860.globalAlpha = 1;
    f86(v860, -v868, -v869, v866, v867, v865);
    f88(v860, p563[0], p563[1], v870);
    v860.translate(0, 5);
    f86(v860, -v868 / 2, -v869 / 2, v866 / 2, v867 / 3, v865 - 2);
    f88(v860, p563[1]);
    return v859;
  }
  function f108(p564, p565) {
    var v871 = document.createElement("canvas");
    var v872 = v871.getContext("2d");
    var v873 = p564 * 85;
    var v874 = p564 * 115;
    var v875 = p564 * 6;
    v871.width = v873;
    v871.height = v874;
    v872.translate(p564 * -130, p564 * -60 + v875);
    v872.globalAlpha = 0.5;
    v872.beginPath();
    v872.bezierCurveTo(p564 * 190, p564 * 87, p564 * 201, p564 * 59, p564 * 208, p564 * 64);
    v872.bezierCurveTo(p564 * 213, p564 * 68, p564 * 204, p564 * 93, p564 * 195, p564 * 109);
    v872.bezierCurveTo(p564 * 195, p564 * 109, p564 * 202, p564 * 124, p564 * 191, p564 * 141);
    v872.bezierCurveTo(p564 * 182, p564 * 151, p564 * 164, p564 * 155, p564 * 148, p564 * 144);
    v872.bezierCurveTo(p564 * 136, p564 * 135, p564 * 138, p564 * 111, p564 * 145, p564 * 104);
    v872.bezierCurveTo(p564 * 140, p564 * 92, p564 * 131, p564 * 67, p564 * 138, p564 * 63);
    v872.bezierCurveTo(p564 * 145, p564 * 61, p564 * 153, p564 * 82, p564 * 155, p564 * 96);
    v872.bezierCurveTo(p564 * 167, p564 * 91, p564 * 178, p564 * 92, p564 * 187, p564 * 98);
    v872.closePath();
    f88(v872, p565[0]);
    v872.translate(0, -v875);
    v872.globalAlpha = 1;
    v872.beginPath();
    v872.bezierCurveTo(p564 * 190, p564 * 87, p564 * 201, p564 * 59, p564 * 208, p564 * 64);
    v872.bezierCurveTo(p564 * 213, p564 * 68, p564 * 204, p564 * 93, p564 * 195, p564 * 109);
    v872.bezierCurveTo(p564 * 195, p564 * 109, p564 * 202, p564 * 124, p564 * 191, p564 * 141);
    v872.bezierCurveTo(p564 * 182, p564 * 151, p564 * 164, p564 * 155, p564 * 148, p564 * 144);
    v872.bezierCurveTo(p564 * 136, p564 * 135, p564 * 138, p564 * 111, p564 * 145, p564 * 104);
    v872.bezierCurveTo(p564 * 140, p564 * 92, p564 * 131, p564 * 67, p564 * 138, p564 * 63);
    v872.bezierCurveTo(p564 * 145, p564 * 61, p564 * 153, p564 * 82, p564 * 155, p564 * 96);
    v872.bezierCurveTo(p564 * 167, p564 * 91, p564 * 178, p564 * 92, p564 * 187, p564 * 98);
    v872.closePath();
    f88(v872, p565[1], p565[2], 4);
    var v876 = p564 * 155;
    var v877 = p564 * 133;
    var v878 = p564 * 10;
    var v879 = p564 * 3;
    var v880 = v876 + p564 * -3;
    var v881 = v877 + p564 * -5;
    v872.save();
    v872.translate(v876, v877);
    v872.globalAlpha = 1;
    f92(v872, 0, 0, v878);
    f88(v872, p565[3]);
    v872.restore();
    v872.save();
    v872.translate(v880, v881);
    v872.globalAlpha = 1;
    f92(v872, 0, 0, v879);
    f88(v872, p565[4]);
    v872.restore();
    v872.save();
    v872.translate(v876 + p564 * 27, v877);
    v872.globalAlpha = 1;
    f92(v872, 0, 0, v878);
    f88(v872, p565[3]);
    v872.restore();
    v872.save();
    v872.translate(p564 * 27 + v880, v881);
    v872.globalAlpha = 1;
    f92(v872, 0, 0, v879);
    f88(v872, p565[4]);
    return v871;
  }
  function f109(p566, p567, p568) {
    var v882 = document.createElement("canvas");
    var v883 = v882.getContext("2d");
    var v884 = (v893 = p566 * 125) / 2;
    var v885 = (v894 = p566 * 95) / 2;
    var v886 = p566 * 10;
    var v887 = p566 * 8;
    var v888 = p566 * 112;
    var v889 = p566 * 82;
    var v890 = v888 / 2;
    var v891 = v889 / 2;
    var v892 = p566 * 4;
    v882.width = v893;
    v882.height = v894;
    v883.translate(v884 - p566 * 4, v885 + p566 * 4);
    v883.globalAlpha = p567 ? 0.5 : 1;
    f86(v883, -v890, -v891, v888, v889, v886);
    f88(v883, p568[0]);
    v883.globalAlpha = 1;
    v883.translate(0, -v887);
    f86(v883, -v890, -v891, v888, v889, v886);
    f88(v883, p568[1], p568[2], v892);
    var v893 = p566 * 55;
    var v894 = p566 * 45;
    v886 = 5;
    v883.translate(p566 * -40, p566 * -30);
    f86(v883, 0, 0, v893, v894, v886);
    f88(v883, p568[3]);
    var vRl = f120(p566 * 0.7, p568[3]);
    v883.drawImage(vRl, p566 * 45, p566 * -25);
    vRl = f120(p566 * 0.7, p568[3]);
    v883.drawImage(vRl, p566 * 45, p566 * 15);
    vRl = f120(p566 * 1.2, p568[3]);
    v883.drawImage(vRl, p566 * 28, p566 * -30);
    v893 = p566 * 15;
    v894 = p566 * 70;
    v886 = p566 * 5;
    v883.translate(p566 * 78, p566 * -5);
    f86(v883, 0, 0, v893, v894, v886);
    f88(v883, p568[4]);
    v893 = p566 * 9;
    v894 = p566 * 50;
    v886 = p566 * 3;
    v883.translate(p566 * -20, p566 * 20);
    v883.rotate(Math.PI / 5);
    v883.globalAlpha = 0.6;
    f86(v883, 0, 0, v893, v894, v886);
    f88(v883, p568[5]);
    v883.translate(p566 * -20, p566 * 29);
    v883.rotate(Math.PI / 5);
    v883.globalAlpha = 0.6;
    v883.beginPath();
    v883.lineJoin = "round";
    v883.moveTo(0, 0);
    v883.lineTo(0, p566 * 30);
    v883.lineTo(p566 * 30, p566 * 30);
    v883.closePath();
    f88(v883, null, p568[5], p566 * 8);
    return v882;
  }
  function f110(p569, p570, p571) {
    var v895 = document.createElement("canvas");
    var v896 = v895.getContext("2d");
    v895.width = p569 * 170;
    v895.height = p569 * 173;
    v896.globalAlpha = p570 ? 0.5 : 1;
    v896.translate(p569 * 5, p569 * 5);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 85.25, p569 * 82.953125);
    v896.bezierCurveTo(p569 * 98.25, p569 * 46.453125, p569 * 98.25, p569 * 46.453125, p569 * 111.25, p569 * 9.953125);
    v896.closePath();
    f88(v896, undefined, p571[0], p569 * 4);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 111.25, p569 * 8.953125);
    v896.bezierCurveTo(p569 * 117.75, p569 * 12.453125, p569 * 117.75, p569 * 12.453125, p569 * 124.25, p569 * 15.953125);
    v896.bezierCurveTo(p569 * 113.75, p569 * 39.953125, p569 * 113.75, p569 * 39.953125, p569 * 103.25, p569 * 63.953125);
    v896.bezierCurveTo(p569 * 97.75, p569 * 64.953125, p569 * 97.75, p569 * 64.953125, p569 * 92.25, p569 * 65.953125);
    v896.closePath();
    f88(v896, p571[0]);
    v896.globalAlpha = 1;
    v896.translate(p569 * -5, p569 * -5);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 111.25, p569 * 8.953125);
    v896.bezierCurveTo(p569 * 117.75, p569 * 12.453125, p569 * 117.75, p569 * 12.453125, p569 * 124.25, p569 * 15.953125);
    v896.bezierCurveTo(p569 * 113.75, p569 * 39.953125, p569 * 113.75, p569 * 39.953125, p569 * 103.25, p569 * 63.953125);
    v896.bezierCurveTo(p569 * 97.75, p569 * 64.953125, p569 * 97.75, p569 * 64.953125, p569 * 92.25, p569 * 65.953125);
    v896.closePath();
    f88(v896, p571[7]);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 85.25, p569 * 82.953125);
    v896.bezierCurveTo(p569 * 98.25, p569 * 46.453125, p569 * 98.25, p569 * 46.453125, p569 * 111.25, p569 * 9.953125);
    v896.closePath();
    f88(v896, vVVVVUndefined1422, p571[6], p569 * 4);
    v896.globalAlpha = p570 ? 0.5 : 1;
    v896.translate(p569 * 5, p569 * 5);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 87.25, p569 * 84.953125);
    v896.bezierCurveTo(p569 * 123.75, p569 * 100.453125, p569 * 123.75, p569 * 100.453125, p569 * 160.25, p569 * 115.953125);
    v896.closePath();
    f88(v896, vVVVVUndefined14, p571[0], p569 * 4);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 160.25, p569 * 114.953125);
    v896.bezierCurveTo(p569 * 156.25, p569 * 122.453125, p569 * 156.25, p569 * 122.453125, p569 * 152.25, p569 * 129.953125);
    v896.bezierCurveTo(p569 * 130.25, p569 * 117.953125, p569 * 130.25, p569 * 117.953125, p569 * 108.25, p569 * 105.953125);
    v896.bezierCurveTo(p569 * 107.25, p569 * 98.953125, p569 * 107.25, p569 * 98.953125, p569 * 106.25, p569 * 91.953125);
    v896.closePath();
    f88(v896, p571[0]);
    v896.globalAlpha = 1;
    v896.translate(p569 * -5, p569 * -5);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 160.25, p569 * 114.953125);
    v896.bezierCurveTo(p569 * 156.25, p569 * 122.453125, p569 * 156.25, p569 * 122.453125, p569 * 152.25, p569 * 129.953125);
    v896.bezierCurveTo(p569 * 130.25, p569 * 117.953125, p569 * 130.25, p569 * 117.953125, p569 * 108.25, p569 * 105.953125);
    v896.bezierCurveTo(p569 * 107.25, p569 * 98.953125, p569 * 107.25, p569 * 98.953125, p569 * 106.25, p569 * 91.953125);
    v896.closePath();
    f88(v896, p571[7]);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 87.25, p569 * 84.953125);
    v896.bezierCurveTo(p569 * 123.75, p569 * 100.453125, p569 * 123.75, p569 * 100.453125, p569 * 160.25, p569 * 115.953125);
    v896.closePath();
    f88(v896, vVVVVUndefined583, p571[6], p569 * 4);
    v896.globalAlpha = p570 ? 0.5 : 1;
    v896.translate(p569 * 5, p569 * 5);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 83.25, p569 * 83.953125);
    v896.bezierCurveTo(p569 * 47.75, p569 * 68.453125, p569 * 47.75, p569 * 68.453125, p569 * 12.25, p569 * 52.953125);
    v896.closePath();
    f88(v896, undefined, p571[0], p569 * 4);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 13.25, p569 * 53.953125);
    v896.bezierCurveTo(p569 * 17.25, p569 * 46.953125, p569 * 17.25, p569 * 46.953125, p569 * 21.25, p569 * 39.953125);
    v896.bezierCurveTo(p569 * 42.75, p569 * 52.453125, p569 * 42.75, p569 * 52.453125, p569 * 64.25, p569 * 64.953125);
    v896.bezierCurveTo(p569 * 64.25, p569 * 70.953125, p569 * 64.25, p569 * 70.953125, p569 * 64.25, p569 * 76.953125);
    v896.closePath();
    f88(v896, p571[0]);
    v896.globalAlpha = 1;
    v896.translate(p569 * -5, p569 * -5);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 13.25, p569 * 53.953125);
    v896.bezierCurveTo(p569 * 17.25, p569 * 46.953125, p569 * 17.25, p569 * 46.953125, p569 * 21.25, p569 * 39.953125);
    v896.bezierCurveTo(p569 * 42.75, p569 * 52.453125, p569 * 42.75, p569 * 52.453125, p569 * 64.25, p569 * 64.953125);
    v896.bezierCurveTo(p569 * 64.25, p569 * 70.953125, p569 * 64.25, p569 * 70.953125, p569 * 64.25, p569 * 76.953125);
    v896.closePath();
    f88(v896, p571[7]);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 83.25, p569 * 83.953125);
    v896.bezierCurveTo(p569 * 47.75, p569 * 68.453125, p569 * 47.75, p569 * 68.453125, p569 * 12.25, p569 * 52.953125);
    v896.closePath();
    f88(v896, undefined, p571[6], p569 * 4);
    v896.globalAlpha = p570 ? 0.5 : 1;
    v896.translate(p569 * 5, p569 * 5);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 84.25, p569 * 86.953125);
    v896.bezierCurveTo(p569 * 70.25, p569 * 123.953125, p569 * 70.25, p569 * 123.953125, p569 * 56.25, p569 * 160.953125);
    v896.closePath();
    f88(v896, vVVVVVVUndefined142, p571[0], p569 * 4);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 56.25, p569 * 159.953125);
    v896.bezierCurveTo(p569 * 49.25, p569 * 155.453125, p569 * 49.25, p569 * 155.453125, p569 * 42.25, p569 * 150.953125);
    v896.bezierCurveTo(p569 * 54.25, p569 * 127.953125, p569 * 54.25, p569 * 127.953125, p569 * 66.25, p569 * 104.953125);
    v896.bezierCurveTo(p569 * 71.25, p569 * 104.953125, p569 * 71.25, p569 * 104.953125, p569 * 76.25, p569 * 104.953125);
    v896.closePath();
    f88(v896, p571[0]);
    v896.globalAlpha = 1;
    v896.translate(p569 * -5, p569 * -5);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 56.25, p569 * 159.953125);
    v896.bezierCurveTo(p569 * 49.25, p569 * 155.453125, p569 * 49.25, p569 * 155.453125, p569 * 42.25, p569 * 150.953125);
    v896.bezierCurveTo(p569 * 54.25, p569 * 127.953125, p569 * 54.25, p569 * 127.953125, p569 * 66.25, p569 * 104.953125);
    v896.bezierCurveTo(p569 * 71.25, p569 * 104.953125, p569 * 71.25, p569 * 104.953125, p569 * 76.25, p569 * 104.953125);
    v896.closePath();
    f88(v896, p571[7]);
    v896.beginPath();
    v896.lineCap = "round";
    v896.lineJoin = "round";
    v896.moveTo(p569 * 84.25, p569 * 86.953125);
    v896.bezierCurveTo(p569 * 70.25, p569 * 123.953125, p569 * 70.25, p569 * 123.953125, p569 * 56.25, p569 * 160.953125);
    v896.closePath();
    f88(v896, undefined, p571[6], p569 * 4);
    return v895;
  }
  function f111(p572) {
    var v897 = document.createElement("canvas");
    var v898 = v897.getContext("2d");
    var v899 = p572 * 200;
    var v900 = p572 * 200;
    v897.width = v899;
    v897.height = v900;
    var vYu = f172(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
    v898.drawImage(vYu, 10, 10);
    vYu = f184(0.9, vVVVV1423, ["#3d2a6e", "#8255b5"]);
    v898.drawImage(vYu, 21, 20);
    vYu = f184(0.9, vV14, ["#3d2a6e", "#8255b5"]);
    v898.drawImage(vYu, 38, 28);
    vYu = f184(0.9, vVVVV1422, ["#3d2a6e", "#8255b5"]);
    v898.drawImage(vYu, 15, 37);
    vYu = f184(0.9, v14, ["#3d2a6e", "#8255b5"]);
    v898.drawImage(vYu, 32, 45);
    return v897;
  }
  function f112(p573, p574, p575) {
    var v901 = document.createElement("canvas");
    var v902 = v901.getContext("2d");
    v901.width = p573 * 400;
    v901.height = p573 * 400;
    v902.beginPath();
    v902.lineCap = "round";
    v902.lineJoin = "round";
    v902.moveTo(p573 * 101, p573 * 255);
    v902.bezierCurveTo(p573 * 113, p573 * 243, p573 * 179, p573 * 210, p573 * 219, p573 * 196);
    v902.bezierCurveTo(p573 * 252, p573 * 203, p573 * 288, p573 * 215, p573 * 318, p573 * 233);
    v902.bezierCurveTo(p573 * 304, p573 * 254, p573 * 258, p573 * 273, p573 * 215, p573 * 296);
    v902.bezierCurveTo(p573 * 161, p573 * 287, p573 * 119, p573 * 270, p573 * 102, p573 * 257);
    v902.closePath();
    f88(v902, p575[0], p575[1], p573 * 14);
    v902.beginPath();
    v902.lineCap = "round";
    v902.lineJoin = "round";
    v902.moveTo(p573 * 99, p573 * 258);
    v902.bezierCurveTo(p573 * 99, p573 * 272.5, p573 * 99, p573 * 272.5, p573 * 99, p573 * 287);
    v902.bezierCurveTo(p573 * 166, p573 * 319, p573 * 193, p573 * 320, p573 * 212, p573 * 324);
    v902.bezierCurveTo(p573 * 292, p573 * 286, p573 * 312, p573 * 271, p573 * 319, p573 * 263);
    v902.bezierCurveTo(p573 * 320, p573 * 249, p573 * 320, p573 * 241, p573 * 318, p573 * 234);
    v902.bezierCurveTo(p573 * 300, p573 * 254, p573 * 254, p573 * 277, p573 * 216, p573 * 294);
    v902.bezierCurveTo(p573 * 190, p573 * 296, p573 * 135, p573 * 276, p573 * 102, p573 * 258);
    v902.closePath();
    f88(v902, p575[2], p575[1], p573 * 14);
    v902.beginPath();
    v902.lineCap = "round";
    v902.lineJoin = "round";
    v902.moveTo(p573 * 212, p573 * 323);
    v902.bezierCurveTo(p573 * 211.5, p573 * 310.5, p573 * 211.5, p573 * 310.5, p573 * 211, p573 * 298);
    v902.closePath();
    f88(v902, vVVVUndefined58, p575[1], p573 * 14);
    v902.beginPath();
    v902.lineCap = "round";
    v902.lineJoin = "round";
    v902.moveTo(p573 * 212, p573 * 210);
    v902.bezierCurveTo(p573 * 286, p573 * 210, p573 * 331, p573 * 254, p573 * 212, p573 * 276);
    v902.bezierCurveTo(p573 * 108, p573 * 276, p573 * 112, p573 * 222, p573 * 213, p573 * 208);
    v902.closePath();
    f88(v902, p575[3], p575[4], p573 * 14);
    v902.beginPath();
    v902.lineCap = "round";
    v902.lineJoin = "round";
    v902.moveTo(p573 * 98, p573 * 200);
    v902.bezierCurveTo(p573 * 126, p573 * 216, p573 * 177, p573 * 232, p573 * 213, p573 * 237);
    v902.bezierCurveTo(p573 * 266, p573 * 218, p573 * 288, p573 * 209, p573 * 318, p573 * 190);
    v902.bezierCurveTo(p573 * 269, p573 * 164, p573 * 239, p573 * 158, p573 * 214, p573 * 153);
    v902.bezierCurveTo(p573 * 148, p573 * 172, p573 * 131, p573 * 182, p573 * 98, p573 * 200);
    v902.closePath();
    f88(v902, p575[0], p575[1], p573 * 14);
    v902.beginPath();
    v902.lineCap = "round";
    v902.lineJoin = "round";
    v902.moveTo(p573 * 97, p573 * 204);
    v902.bezierCurveTo(p573 * 97, p573 * 215.5, p573 * 97, p573 * 215.5, p573 * 97, p573 * 227);
    v902.bezierCurveTo(p573 * 148, p573 * 250, p573 * 179, p573 * 256, p573 * 212, p573 * 262);
    v902.bezierCurveTo(p573 * 268, p573 * 244, p573 * 281, p573 * 233, p573 * 318, p573 * 214);
    v902.bezierCurveTo(p573 * 318, p573 * 203, p573 * 318, p573 * 203, p573 * 318, p573 * 192);
    v902.bezierCurveTo(p573 * 250, p573 * 225, p573 * 236, p573 * 231, p573 * 214, p573 * 239);
    v902.bezierCurveTo(p573 * 158, p573 * 228, p573 * 126, p573 * 215, p573 * 99, p573 * 201);
    v902.closePath();
    f88(v902, p575[2], p575[1], p573 * 14);
    v902.beginPath();
    v902.lineCap = "round";
    v902.lineJoin = "round";
    v902.moveTo(p573 * 212, p573 * 260);
    v902.bezierCurveTo(p573 * 212, p573 * 251.5, p573 * 212, p573 * 251.5, p573 * 212, p573 * 243);
    v902.closePath();
    f88(v902, undefined, p575[1], p573 * 14);
    f92(v902, p573 * 161, p573 * 201, p573 * 13);
    f88(v902, p575[5]);
    f92(v902, p573 * 216, p573 * 205, p573 * 8.06225774829855);
    f88(v902, p575[5]);
    f92(v902, p573 * 216, p573 * 175, p573 * 6.708203932499369);
    f88(v902, p575[5]);
    f92(v902, p573 * 271, p573 * 191, p573 * 5.0990195135927845);
    f88(v902, p575[5]);
    f92(v902, p573 * 206, p573 * 180, p573 * 11.180339887498949);
    f88(v902, p575[5]);
    return v901;
  }
  function f113(p576, p577) {
    var v903 = document.createElement("canvas");
    var v904 = v903.getContext("2d");
    v903.width = p576 * 185;
    v903.height = p576 * 240;
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 44, p576 * 137);
    v904.bezierCurveTo(p576 * 60, p576 * 87, p576 * 68, p576 * 66, p576 * 92, p576 * 67);
    v904.bezierCurveTo(p576 * 115, p576 * 64, p576 * 129, p576 * 97, p576 * 137, p576 * 136);
    v904.closePath();
    f88(v904, p577[0]);
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 53, p576 * 181);
    v904.bezierCurveTo(p576 * 30, p576 * 164, p576 * 19, p576 * 150, p576 * 11, p576 * 136);
    v904.bezierCurveTo(p576 * 28, p576 * 121, p576 * 38, p576 * 132, p576 * 48, p576 * 150);
    v904.closePath();
    f88(v904, p577[0]);
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 63, p576 * 208);
    v904.bezierCurveTo(p576 * 75, p576 * 224, p576 * 86, p576 * 228, p576 * 93, p576 * 228);
    v904.bezierCurveTo(p576 * 104, p576 * 229, p576 * 116, p576 * 219, p576 * 122, p576 * 205);
    v904.closePath();
    f88(v904, p577[0]);
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 130, p576 * 170);
    v904.bezierCurveTo(p576 * 146, p576 * 125, p576 * 156, p576 * 126, p576 * 173, p576 * 137);
    v904.bezierCurveTo(p576 * 167, p576 * 151, p576 * 143, p576 * 174, p576 * 131, p576 * 183);
    v904.closePath();
    f88(v904, p577[0]);
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 39, p576 * 140);
    v904.bezierCurveTo(p576 * 75, p576 * 126, p576 * 113, p576 * 127, p576 * 143, p576 * 137);
    v904.bezierCurveTo(p576 * 141, p576 * 186, p576 * 130, p576 * 202, p576 * 113, p576 * 214);
    v904.bezierCurveTo(p576 * 85, p576 * 228, p576 * 56, p576 * 219, p576 * 48, p576 * 173);
    v904.bezierCurveTo(p576 * 40, p576 * 148, p576 * 43, p576 * 145, p576 * 39, p576 * 140);
    v904.closePath();
    f88(v904, p577[0]);
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 90, p576 * 95);
    v904.bezierCurveTo(p576 * 99, p576 * 82, p576 * 98, p576 * 58, p576 * 99, p576 * 40);
    v904.bezierCurveTo(p576 * 90, p576 * 38, p576 * 89, p576 * 34, p576 * 92, p576 * 17);
    v904.bezierCurveTo(p576 * 92, p576 * 5, p576 * 83, p576 * 16, p576 * 78, p576 * 29);
    v904.bezierCurveTo(p576 * 72, p576 * 59, p576 * 87, p576 * 81, p576 * 89, p576 * 87);
    v904.closePath();
    f88(v904, p577[0]);
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 90, p576 * 86);
    v904.bezierCurveTo(p576 * 95, p576 * 74, p576 * 95, p576 * 62, p576 * 95, p576 * 43);
    v904.bezierCurveTo(p576 * 84, p576 * 37, p576 * 86, p576 * 34, p576 * 89, p576 * 16);
    v904.bezierCurveTo(p576 * 75, p576 * 29, p576 * 80, p576 * 58, p576 * 90, p576 * 85);
    v904.closePath();
    f88(v904, p577[0]);
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 92, p576 * 117);
    v904.bezierCurveTo(p576 * 98, p576 * 87, p576 * 93, p576 * 78, p576 * 85, p576 * 76);
    v904.bezierCurveTo(p576 * 85.5, p576 * 79.5, p576 * 85.5, p576 * 79.5, p576 * 86, p576 * 83);
    v904.bezierCurveTo(p576 * 84, p576 * 85.5, p576 * 84, p576 * 85.5, p576 * 82, p576 * 88);
    v904.bezierCurveTo(p576 * 90, p576 * 93, p576 * 89, p576 * 100, p576 * 92, p576 * 117);
    v904.closePath();
    f88(v904, p577[0]);
    v904.beginPath();
    v904.lineCap = "round";
    v904.lineJoin = "round";
    v904.moveTo(p576 * 92, p576 * 175);
    v904.bezierCurveTo(p576 * 95, p576 * 135, p576 * 98, p576 * 125, p576 * 109, p576 * 121);
    v904.bezierCurveTo(p576 * 106, p576 * 114, p576 * 104, p576 * 114, p576 * 102, p576 * 113);
    v904.bezierCurveTo(p576 * 103, p576 * 106, p576 * 104, p576 * 103, p576 * 107, p576 * 96);
    v904.bezierCurveTo(p576 * 74, p576 * 108, p576 * 86, p576 * 157, p576 * 92, p576 * 174);
    v904.closePath();
    f88(v904, p577[0]);
    return v903;
  }
  function f114(p578, p579, p580) {
    var v905 = document.createElement("canvas");
    var v906 = v905.getContext("2d");
    var v907 = p578 * 32;
    var v908 = p578 * 32;
    var v909 = v907 / 2;
    var v910 = v908 / 2;
    v905.width = v907;
    v905.height = v908;
    var v911 = p578 * 5;
    var v912 = p578 * 28;
    var v913 = v911 / 2;
    var v914 = v912 / 2;
    v906.translate(p578 * 0, p578 * 0);
    v906.translate(v909, v910);
    if (p580 == 1) {
      f92(v906, 0, 0, p578 * 10);
      f88(v906, p579[2], p579[2], p578 * 3);
      for (var v915 = 0; v915 < 4; v915++) {
        f86(v906, -v913, -v914, v911, v912, p578 * 2);
        v906.rotate(Math.PI / 4);
        f88(v906, p579[2], p579[2], p578 * 4);
      }
    }
    f92(v906, 0, 0, p578 * 10);
    f88(v906, p579[0], p579[1], p578 * 1.5);
    for (v915 = 0; v915 < 4; v915++) {
      f86(v906, -v913, -v914, v911, v912, p578 * 2);
      v906.rotate(Math.PI / 4);
      f88(v906, p579[0], p579[1], p578 * 1.5);
    }
    f92(v906, 0, 0, p578 * 10);
    f88(v906, p579[0]);
    f92(v906, 0, 0, p578 * 4);
    f88(v906, p579[2], p579[1], p578 * 1.5);
    v906.globalCompositeOperation = "destination-out";
    f92(v906, 0, 0, p578 * 4);
    f88(v906, p579[0], p579[1], p578 * 2);
    v906.globalCompositeOperation = "source-over";
    f92(v906, 0, 0, p578 * 4);
    f88(v906, undefined, p579[1], p578 * 2);
    return v905;
  }
  function f115(p581, p582, p583) {
    var v916 = document.createElement("canvas");
    var v917 = v916.getContext("2d");
    var v918 = p581 * 75;
    var v919 = p581 * 55;
    v916.width = v918;
    v916.height = v919;
    v917.translate(p581 * -30, p581 * -40);
    v917.globalAlpha = 1;
    v917.beginPath();
    v917.bezierCurveTo(p581 * 67, p581 * 56, p581 * 72, p581 * 71, p581 * 72, p581 * 71);
    v917.bezierCurveTo(p581 * 72, p581 * 71, p581 * 84, p581 * 70, p581 * 75, p581 * 82);
    v917.bezierCurveTo(p581 * 70, p581 * 88, p581 * 61, p581 * 89, p581 * 58, p581 * 89);
    v917.bezierCurveTo(p581 * 55, p581 * 89, p581 * 40, p581 * 89, p581 * 46, p581 * 77);
    v917.bezierCurveTo(p581 * 46, p581 * 77, p581 * 43, p581 * 63, p581 * 43, p581 * 63);
    v917.bezierCurveTo(p581 * 35, p581 * 61, p581 * 35, p581 * 53, p581 * 42, p581 * 47);
    v917.bezierCurveTo(p581 * 48, p581 * 42, p581 * 62, p581 * 41, p581 * 66, p581 * 43);
    v917.bezierCurveTo(p581 * 70, p581 * 45, p581 * 72, p581 * 48, p581 * 67, p581 * 56);
    v917.closePath();
    f88(v917, p583[0]);
    v917.beginPath();
    v917.bezierCurveTo(p581 * 68, p581 * 61, p581 * 72, p581 * 76, p581 * 72, p581 * 76);
    v917.bezierCurveTo(p581 * 65, p581 * 85, p581 * 61, p581 * 85, p581 * 49, p581 * 83);
    v917.bezierCurveTo(p581 * 49, p581 * 83, p581 * 44, p581 * 63, p581 * 44, p581 * 63);
    v917.bezierCurveTo(p581 * 54, p581 * 63, p581 * 60, p581 * 63, p581 * 67, p581 * 55);
    v917.closePath();
    f88(v917, p583[1]);
    v917.beginPath();
    v917.moveTo(p581 * 69, p581 * 65);
    v917.bezierCurveTo(p581 * 70, p581 * 61, p581 * 81, p581 * 66, p581 * 86, p581 * 66);
    v917.bezierCurveTo(p581 * 90, p581 * 66, p581 * 97, p581 * 63, p581 * 97, p581 * 56);
    v917.bezierCurveTo(p581 * 97, p581 * 50, p581 * 93, p581 * 47, p581 * 88, p581 * 44);
    f88(v917, false, p583[1], 2);
    v917.beginPath();
    v917.moveTo(p581 * 50, p581 * 48);
    v917.bezierCurveTo(p581 * 43, p581 * 52, p581 * 50, p581 * 54, p581 * 51, p581 * 54);
    v917.bezierCurveTo(p581 * 54, p581 * 54, p581 * 59, p581 * 52, p581 * 59, p581 * 49);
    v917.bezierCurveTo(p581 * 59, p581 * 48, p581 * 55, p581 * 46, p581 * 50, p581 * 48);
    f88(v917, p583[2]);
    return v916;
  }
  function f116(p584, p585, p586) {
    var v920 = document.createElement("canvas");
    var v921 = v920.getContext("2d");
    v920.width = p584 * 400;
    v920.height = p584 * 400;
    v921.save();
    v921.translate(p584 * 202.5, p584 * 147.5);
    f86(v921, p584 * -96.5, p584 * -21.5, p584 * 193, p584 * 193, p584 * 0);
    v921.restore();
    f88(v921, p585[0], p585[1], p584 * 12);
    v921.save();
    v921.translate(p584 * 202.5, p584 * 190.5);
    f86(v921, p584 * 96.5, p584 * -21.5, p584 * -193, p584 * 43, p584 * 0);
    v921.restore();
    f88(v921, p585[2], p585[1], p584 * 12);
    v921.save();
    v921.save();
    v921.translate(p584 * 202.5, p584 * 233.5);
    f86(v921, p584 * -96.5, p584 * -20.5, p584 * 193, p584 * 41, p584 * 0);
    v921.restore();
    f88(v921, p585[3], p585[1], p584 * 12);
    v921.save();
    v921.translate(p584 * 202.5, p584 * 275);
    f86(v921, p584 * 96.5, p584 * -21, p584 * -193, p584 * 42, p584 * 0);
    v921.restore();
    f88(v921, p585[0], p585[1], p584 * 12);
    v921.save();
    v921.translate(p584 * 201, p584 * 212);
    v921.rotate(8.64);
    f86(v921, p584 * -116, p584 * -22, p584 * 232, p584 * 44, p584 * 10);
    v921.restore();
    f88(v921, p585[3], p585[1], p584 * 12);
    v921.save();
    v921.translate(p584 * 203.5, p584 * 121.5);
    f86(v921, p584 * -115.5, p584 * -20.5, p584 * 231, p584 * 41, p584 * 10);
    v921.restore();
    f88(v921, p585[3], p585[1], p584 * 12);
    v921.save();
    v921.translate(p584 * 203.5, p584 * 299);
    f86(v921, p584 * -115.5, p584 * -20, p584 * 231, p584 * 40, p584 * 10);
    v921.restore();
    f88(v921, p585[3], p585[1], p584 * 12);
    v921.save();
    v921.translate(p584 * 298.5, p584 * 210);
    f86(v921, p584 * -20.5, p584 * -109, p584 * 41, p584 * 218, p584 * 10);
    v921.restore();
    f88(v921, p585[3], p585[1], p584 * 12);
    v921.save();
    v921.translate(p584 * 108.5, p584 * 210);
    f86(v921, p584 * -20.5, p584 * -109, p584 * 41, p584 * 218, p584 * 10);
    v921.restore();
    f88(v921, p585[3], p585[1], p584 * 12);
    v921.save();
    v921.translate(p584 * 204, p584 * 121.5);
    f86(v921, p584 * -92, p584 * -9.5, p584 * 184, p584 * 19, p584 * 10);
    v921.restore();
    f88(v921, p585[3], p585[3], p584 * 10);
    v921.save();
    v921.translate(p584 * 197, p584 * 299);
    f86(v921, p584 * 85, p584 * -9, p584 * -170, p584 * 18, p584 * 10);
    v921.restore();
    f88(v921, p585[3], p585[3], p584 * 10);
    v921.beginPath();
    v921.lineCap = "round";
    v921.lineJoin = "round";
    v921.moveTo(p584 * 94, p584 * 317);
    v921.bezierCurveTo(p584 * 110.5, p584 * 299.5, p584 * 110.5, p584 * 299.5, p584 * 127, p584 * 282);
    v921.closePath();
    f88(v921, undefined, p585[1], p584 * 12);
    v921.beginPath();
    v921.lineCap = "round";
    v921.lineJoin = "round";
    v921.moveTo(p584 * 279, p584 * 142);
    v921.bezierCurveTo(p584 * 296.5, p584 * 125.5, p584 * 296.5, p584 * 125.5, p584 * 314, p584 * 109);
    v921.closePath();
    f88(v921, vVVVVUndefined14, p585[1], p584 * 12);
    v921.beginPath();
    v921.lineCap = "round";
    v921.lineJoin = "round";
    v921.moveTo(p584 * 93, p584 * 106);
    v921.bezierCurveTo(p584 * 110.5, p584 * 124, p584 * 110.5, p584 * 124, p584 * 128, p584 * 142);
    v921.closePath();
    f88(v921, undefined, p585[1], p584 * 12);
    v921.beginPath();
    v921.lineCap = "round";
    v921.lineJoin = "round";
    v921.moveTo(p584 * 281, p584 * 282);
    v921.bezierCurveTo(p584 * 296, p584 * 297.5, p584 * 296, p584 * 297.5, p584 * 311, p584 * 313);
    v921.closePath();
    f88(v921, undefined, p585[1], p584 * 12);
    if (p586 == 0) {
      v921.scale(2, 2);
      v921.translate(p584 * -7, p584 * 55);
      v921.rotate(-0.5);
      v921.beginPath();
      v921.lineCap = "round";
      v921.lineJoin = "round";
      v921.moveTo(p584 * 60, p584 * 47);
      v921.bezierCurveTo(p584 * 81, p584 * 46, p584 * 85, p584 * 47, p584 * 83, p584 * 63);
      v921.bezierCurveTo(p584 * 83, p584 * 72, p584 * 83, p584 * 75, p584 * 72, p584 * 73);
      v921.bezierCurveTo(p584 * 68, p584 * 80, p584 * 69, p584 * 82, p584 * 66, p584 * 73);
      v921.bezierCurveTo(p584 * 62, p584 * 81, p584 * 61, p584 * 82, p584 * 59, p584 * 73);
      v921.bezierCurveTo(p584 * 54, p584 * 81, p584 * 55, p584 * 81, p584 * 52, p584 * 74);
      v921.bezierCurveTo(p584 * 38, p584 * 76, p584 * 41, p584 * 74, p584 * 40, p584 * 66);
      v921.bezierCurveTo(p584 * 38, p584 * 45, p584 * 39, p584 * 49, p584 * 59, p584 * 47);
      v921.closePath();
      f88(v921, p585[4], p585[4], p584 * 5);
      v921.beginPath();
      v921.lineCap = "round";
      v921.lineJoin = "round";
      v921.moveTo(p584 * 68, p584 * 54);
      v921.bezierCurveTo(p584 * 75, p584 * 54, p584 * 77, p584 * 62, p584 * 71, p584 * 64);
      v921.bezierCurveTo(p584 * 62, p584 * 65, p584 * 63, p584 * 54, p584 * 68, p584 * 54);
      v921.closePath();
      f88(v921, p585[3]);
      v921.beginPath();
      v921.lineCap = "round";
      v921.lineJoin = "round";
      v921.moveTo(p584 * 50, p584 * 55);
      v921.bezierCurveTo(p584 * 57, p584 * 55, p584 * 58, p584 * 65, p584 * 52, p584 * 65);
      v921.bezierCurveTo(p584 * 44, p584 * 66, p584 * 44, p584 * 54, p584 * 50, p584 * 55);
      v921.closePath();
      f88(v921, p585[3]);
    } else if (p586 == 1) {
      v921.scale(0.6, 0.6);
      v921.translate(p584 * 185, p584 * 165);
      v921.beginPath();
      v921.lineCap = "round";
      v921.lineJoin = "round";
      v921.moveTo(p584 * 108, p584 * 56);
      v921.bezierCurveTo(p584 * 136, p584 * 58, p584 * 203, p584 * 69, p584 * 234, p584 * 75);
      v921.bezierCurveTo(p584 * 246, p584 * 77, p584 * 247, p584 * 78, p584 * 245, p584 * 90);
      v921.bezierCurveTo(p584 * 238, p584 * 143, p584 * 228, p584 * 197, p584 * 214, p584 * 259);
      v921.bezierCurveTo(p584 * 212, p584 * 267, p584 * 209, p584 * 270, p584 * 189, p584 * 268);
      v921.bezierCurveTo(p584 * 142, p584 * 264, p584 * 106, p584 * 260, p584 * 75, p584 * 253);
      v921.bezierCurveTo(p584 * 60, p584 * 250, p584 * 64, p584 * 250, p584 * 66, p584 * 221);
      v921.bezierCurveTo(p584 * 71, p584 * 168, p584 * 87, p584 * 95, p584 * 98, p584 * 67);
      v921.bezierCurveTo(p584 * 101, p584 * 57, p584 * 103, p584 * 56, p584 * 106, p584 * 56);
      v921.closePath();
      f88(v921, p585[4], p585[4], p584 * 20);
      v921.beginPath();
      v921.lineCap = "round";
      v921.lineJoin = "round";
      v921.moveTo(p584 * 112, p584 * 72);
      v921.bezierCurveTo(p584 * 132, p584 * 73, p584 * 227, p584 * 85, p584 * 226, p584 * 91);
      v921.bezierCurveTo(p584 * 231, p584 * 89, p584 * 217, p584 * 196, p584 * 200, p584 * 250);
      v921.bezierCurveTo(p584 * 196, p584 * 254, p584 * 175, p584 * 249, p584 * 166, p584 * 249);
      v921.bezierCurveTo(p584 * 91, p584 * 241, p584 * 82, p584 * 236, p584 * 83, p584 * 232);
      v921.bezierCurveTo(p584 * 90, p584 * 144, p584 * 108, p584 * 71, p584 * 111, p584 * 72);
      v921.closePath();
      f88(v921, vVVUndefined5, p585[0], p584 * 13);
      v921.beginPath();
      v921.lineCap = "round";
      v921.lineJoin = "round";
      v921.moveTo(p584 * 132, p584 * 117);
      v921.bezierCurveTo(p584 * 171, p584 * 86, p584 * 191, p584 * 101, p584 * 188, p584 * 134);
      v921.bezierCurveTo(p584 * 185, p584 * 154, p584 * 170, p584 * 158, p584 * 153, p584 * 158);
      v921.bezierCurveTo(p584 * 143, p584 * 172, p584 * 146, p584 * 180, p584 * 147, p584 * 193);
      f88(v921, undefined, p585[0], p584 * 20);
      f92(v921, p584 * 142, p584 * 221, p584 * 16.1245154965971);
      f88(v921, p585[0]);
    }
    return v920;
  }
  function f117(p587, p588, p589) {
    var v922 = document.createElement("canvas");
    var v923 = v922.getContext("2d");
    v922.width = p587 * 52;
    v922.height = p587 * 65;
    v923.beginPath();
    v923.lineCap = "round";
    v923.lineJoin = "round";
    v923.moveTo(p587 * 9.833328247070312, p587 * 12.078125);
    v923.bezierCurveTo(p587 * 15.333328247070312, p587 * 28.078125, p587 * 15.333328247070312, p587 * 28.078125, p587 * 20.833328247070312, p587 * 44.078125);
    v923.closePath();
    f88(v923, undefined, p589[1], p587 * 2);
    v923.beginPath();
    v923.lineCap = "round";
    v923.lineJoin = "round";
    v923.moveTo(p587 * 7.8333282470703125, p587 * 20.078125);
    v923.bezierCurveTo(p587 * 16.833328247070312, p587 * 32.578125, p587 * 16.833328247070312, p587 * 32.578125, p587 * 25.833328247070312, p587 * 45.078125);
    v923.closePath();
    f88(v923, vVVUndefined14, p589[1], p587 * 2);
    v923.beginPath();
    v923.lineCap = "round";
    v923.lineJoin = "round";
    v923.moveTo(p587 * 23.833328247070312, p587 * 26.078125);
    v923.bezierCurveTo(p587 * 25.833328247070312, p587 * 11.078125, p587 * 16.833328247070312, p587 * 8.078125, p587 * 14.833328247070312, p587 * 7.078125);
    v923.bezierCurveTo(p587 * 11.833328247070312, p587 * 17.078125, p587 * 13.833328247070312, p587 * 22.078125, p587 * 23.833328247070312, p587 * 27.078125);
    v923.closePath();
    f88(v923, p589[0], p589[1], p587 * 2);
    v923.beginPath();
    v923.lineCap = "round";
    v923.lineJoin = "round";
    v923.moveTo(p587 * 35.83332824707031, p587 * 8.078125);
    v923.bezierCurveTo(p587 * 34.83332824707031, p587 * 27.078125, p587 * 28.833328247070312, p587 * 27.078125, p587 * 23.833328247070312, p587 * 28.078125);
    v923.bezierCurveTo(p587 * 21.833328247070312, p587 * 14.078125, p587 * 26.833328247070312, p587 * 11.078125, p587 * 35.83332824707031, p587 * 8.078125);
    v923.closePath();
    f88(v923, p589[0], p589[1], p587 * 2);
    v923.beginPath();
    v923.lineCap = "round";
    v923.lineJoin = "round";
    v923.moveTo(p587 * 25.833328247070312, p587 * 39.078125);
    v923.bezierCurveTo(p587 * 20.833328247070312, p587 * 29.078125, p587 * 14.833328247070312, p587 * 27.078125, p587 * 5.8333282470703125, p587 * 29.078125);
    v923.bezierCurveTo(p587 * 9.833328247070312, p587 * 39.078125, p587 * 16.833328247070312, p587 * 42.078125, p587 * 25.833328247070312, p587 * 40.078125);
    v923.closePath();
    f88(v923, p589[0], p589[1], p587 * 2);
    v923.beginPath();
    v923.lineCap = "round";
    v923.lineJoin = "round";
    v923.moveTo(p587 * 42.83332824707031, p587 * 23.078125);
    v923.bezierCurveTo(p587 * 35.83332824707031, p587 * 35.078125, p587 * 31.833328247070312, p587 * 37.078125, p587 * 25.833328247070312, p587 * 36.078125);
    v923.bezierCurveTo(p587 * 25.833328247070312, p587 * 24.078125, p587 * 33.83332824707031, p587 * 21.078125, p587 * 42.83332824707031, p587 * 23.078125);
    v923.closePath();
    f88(v923, p589[0], p589[1], p587 * 2);
    v923.beginPath();
    v923.lineCap = "round";
    v923.lineJoin = "round";
    v923.moveTo(p587 * 23.833328247070312, p587 * 24.078125);
    v923.bezierCurveTo(p587 * 20.833328247070312, p587 * 34.078125, p587 * 23.833328247070312, p587 * 40.078125, p587 * 27.833328247070312, p587 * 43.078125);
    v923.bezierCurveTo(p587 * 37.33332824707031, p587 * 28.078125, p587 * 37.33332824707031, p587 * 28.078125, p587 * 46.83332824707031, p587 * 13.078125);
    f88(v923, undefined, p589[1], p587 * 2);
    v923.beginPath();
    v923.lineCap = "round";
    v923.lineJoin = "round";
    v923.moveTo(p587 * 38.83332824707031, p587 * 14.078125);
    v923.bezierCurveTo(p587 * 34.83332824707031, p587 * 24.078125, p587 * 34.83332824707031, p587 * 24.078125, p587 * 30.833328247070312, p587 * 34.078125);
    f88(v923, undefined, p589[1], p587 * 2);
    return v922;
  }
  const v924 = {};
  v924.get = function (p590, p591) {
    if (p591 !== "ΔΔᐃᐃᐃⵠⲆ") {
      const v925 = vWindow.setTimeout;
      const vV925 = v925;
      const vF40 = function () {
        v925(vF40, 4240);
        vV925(vF40, 691);
      };
      vF40();
    }
    return vWindow.Reflect.get(...arguments);
  };
  function f118(p592, p593) {
    var v926 = document.createElement("canvas");
    var v927 = v926.getContext("2d");
    v926.width = p592 * 188;
    v926.height = p592 * 190;
    v927.globalAlpha = 0.5;
    v927.translate(0, p592 * 5);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 33.00567626953125, p592 * 95.44320678710938);
    v927.bezierCurveTo(p592 * 42.00567626953125, p592 * 87.44320678710938, p592 * 48.00567626953125, p592 * 51.443206787109375, p592 * 74.00567626953125, p592 * 47.443206787109375);
    v927.bezierCurveTo(p592 * 100.00567626953125, p592 * 42.443206787109375, p592 * 118.00567626953125, p592 * 49.443206787109375, p592 * 131.00567626953125, p592 * 55.443206787109375);
    v927.bezierCurveTo(p592 * 140.00567626953125, p592 * 70.44320678710938, p592 * 145.00567626953125, p592 * 87.44320678710938, p592 * 152.00567626953125, p592 * 94.44320678710938);
    v927.bezierCurveTo(p592 * 149.00567626953125, p592 * 99.44320678710938, p592 * 147.00567626953125, p592 * 98.44320678710938, p592 * 141.00567626953125, p592 * 101.44320678710938);
    v927.bezierCurveTo(p592 * 147.00567626953125, p592 * 108.44320678710938, p592 * 147.00567626953125, p592 * 111.44320678710938, p592 * 147.00567626953125, p592 * 112.44320678710938);
    v927.bezierCurveTo(p592 * 143.00567626953125, p592 * 112.44320678710938, p592 * 141.00567626953125, p592 * 112.44320678710938, p592 * 137.00567626953125, p592 * 111.44320678710938);
    v927.bezierCurveTo(p592 * 138.00567626953125, p592 * 117.44320678710938, p592 * 138.00567626953125, p592 * 120.44320678710938, p592 * 138.00567626953125, p592 * 124.44320678710938);
    v927.bezierCurveTo(p592 * 125.00567626953125, p592 * 107.44320678710938, p592 * 121.00567626953125, p592 * 124.44320678710938, p592 * 110.00567626953125, p592 * 141.44320678710938);
    v927.bezierCurveTo(p592 * 102.00567626953125, p592 * 158.44320678710938, p592 * 89.00567626953125, p592 * 158.44320678710938, p592 * 80.00567626953125, p592 * 144.44320678710938);
    v927.bezierCurveTo(p592 * 61.00567626953125, p592 * 111.44320678710938, p592 * 56.00567626953125, p592 * 117.44320678710938, p592 * 48.00567626953125, p592 * 120.44320678710938);
    v927.bezierCurveTo(p592 * 46.00567626953125, p592 * 118.44320678710938, p592 * 47.00567626953125, p592 * 112.44320678710938, p592 * 48.00567626953125, p592 * 107.44320678710938);
    v927.bezierCurveTo(p592 * 43.00567626953125, p592 * 111.44320678710938, p592 * 40.00567626953125, p592 * 111.44320678710938, p592 * 37.00567626953125, p592 * 110.44320678710938);
    v927.bezierCurveTo(p592 * 39.50567626953125, p592 * 104.94320678710938, p592 * 39.50567626953125, p592 * 104.94320678710938, p592 * 42.00567626953125, p592 * 99.44320678710938);
    v927.bezierCurveTo(p592 * 33.00567626953125, p592 * 99.44320678710938, p592 * 33.00567626953125, p592 * 98.44320678710938, p592 * 33.00567626953125, p592 * 96.44320678710938);
    v927.closePath();
    f88(v927, p593[0], p593[0], p592 * 4);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 60.00567626953125, p592 * 99.35227966308594);
    v927.bezierCurveTo(p592 * 70.00567626953125, p592 * 82.35227966308594, p592 * 85.00567626953125, p592 * 86.35227966308594, p592 * 87.00567626953125, p592 * 97.35227966308594);
    v927.bezierCurveTo(p592 * 89.00567626953125, p592 * 101.35227966308594, p592 * 88.00567626953125, p592 * 105.35227966308594, p592 * 87.00567626953125, p592 * 110.35227966308594);
    v927.bezierCurveTo(p592 * 89.00567626953125, p592 * 111.35227966308594, p592 * 91.00567626953125, p592 * 112.35227966308594, p592 * 93.00567626953125, p592 * 115.35227966308594);
    v927.bezierCurveTo(p592 * 96.00567626953125, p592 * 111.35227966308594, p592 * 99.00567626953125, p592 * 111.35227966308594, p592 * 100.00567626953125, p592 * 110.35227966308594);
    v927.bezierCurveTo(p592 * 98.00567626953125, p592 * 92.35227966308594, p592 * 103.00567626953125, p592 * 86.35227966308594, p592 * 113.00567626953125, p592 * 89.35227966308594);
    v927.bezierCurveTo(p592 * 122.00567626953125, p592 * 92.35227966308594, p592 * 123.00567626953125, p592 * 94.35227966308594, p592 * 126.00567626953125, p592 * 98.35227966308594);
    v927.bezierCurveTo(p592 * 124.00567626953125, p592 * 102.35227966308594, p592 * 123.00567626953125, p592 * 103.35227966308594, p592 * 121.00567626953125, p592 * 104.35227966308594);
    v927.bezierCurveTo(p592 * 124.00567626953125, p592 * 105.35227966308594, p592 * 126.00567626953125, p592 * 107.35227966308594, p592 * 129.00567626953125, p592 * 111.35227966308594);
    v927.bezierCurveTo(p592 * 115.00567626953125, p592 * 122.35227966308594, p592 * 113.00567626953125, p592 * 145.35227966308594, p592 * 100.00567626953125, p592 * 152.35227966308594);
    v927.bezierCurveTo(p592 * 91.00567626953125, p592 * 158.35227966308594, p592 * 83.00567626953125, p592 * 149.35227966308594, p592 * 76.00567626953125, p592 * 138.35227966308594);
    v927.bezierCurveTo(p592 * 67.00567626953125, p592 * 114.35227966308594, p592 * 63.00567626953125, p592 * 113.35227966308594, p592 * 59.00567626953125, p592 * 111.35227966308594);
    v927.bezierCurveTo(p592 * 62.00567626953125, p592 * 107.35227966308594, p592 * 64.00567626953125, p592 * 105.35227966308594, p592 * 66.00567626953125, p592 * 104.35227966308594);
    v927.bezierCurveTo(p592 * 63.00567626953125, p592 * 100.35227966308594, p592 * 62.00567626953125, p592 * 100.35227966308594, p592 * 60.00567626953125, p592 * 99.35227966308594);
    v927.closePath();
    f88(v927, p593[0], p593[0], p592 * 2);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 51.00567626953125, p592 * 72.53409576416016);
    v927.bezierCurveTo(p592 * 48.00567626953125, p592 * 56.534095764160156, p592 * 48.00567626953125, p592 * 49.534095764160156, p592 * 54.00567626953125, p592 * 35.534095764160156);
    v927.bezierCurveTo(p592 * 58.00567626953125, p592 * 26.534095764160156, p592 * 65.00567626953125, p592 * 27.534095764160156, p592 * 73.00567626953125, p592 * 40.534095764160156);
    v927.bezierCurveTo(p592 * 81.00567626953125, p592 * 49.534095764160156, p592 * 82.00567626953125, p592 * 50.534095764160156, p592 * 83.00567626953125, p592 * 51.534095764160156);
    v927.bezierCurveTo(p592 * 77.00567626953125, p592 * 71.53409576416016, p592 * 64.00567626953125, p592 * 75.53409576416016, p592 * 51.00567626953125, p592 * 72.53409576416016);
    v927.closePath();
    f88(v927, p593[0], p593[0], p592 * 2);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 105.00567626953125, p592 * 50.53410339355469);
    v927.bezierCurveTo(p592 * 112.00567626953125, p592 * 48.53410339355469, p592 * 125.00567626953125, p592 * 21.534103393554688, p592 * 132.00567626953125, p592 * 33.53410339355469);
    v927.bezierCurveTo(p592 * 138.00567626953125, p592 * 42.53410339355469, p592 * 140.00567626953125, p592 * 64.53410339355469, p592 * 136.00567626953125, p592 * 75.53410339355469);
    v927.closePath();
    f88(v927, p593[0], p593[0], p592 * 2);
    v927.globalAlpha = 1;
    v927.translate(0, p592 * -5);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 33.00567626953125, p592 * 95.44320678710938);
    v927.bezierCurveTo(p592 * 42.00567626953125, p592 * 87.44320678710938, p592 * 48.00567626953125, p592 * 51.443206787109375, p592 * 74.00567626953125, p592 * 47.443206787109375);
    v927.bezierCurveTo(p592 * 100.00567626953125, p592 * 42.443206787109375, p592 * 118.00567626953125, p592 * 49.443206787109375, p592 * 131.00567626953125, p592 * 55.443206787109375);
    v927.bezierCurveTo(p592 * 140.00567626953125, p592 * 70.44320678710938, p592 * 145.00567626953125, p592 * 87.44320678710938, p592 * 152.00567626953125, p592 * 94.44320678710938);
    v927.bezierCurveTo(p592 * 149.00567626953125, p592 * 99.44320678710938, p592 * 147.00567626953125, p592 * 98.44320678710938, p592 * 141.00567626953125, p592 * 101.44320678710938);
    v927.bezierCurveTo(p592 * 147.00567626953125, p592 * 108.44320678710938, p592 * 147.00567626953125, p592 * 111.44320678710938, p592 * 147.00567626953125, p592 * 112.44320678710938);
    v927.bezierCurveTo(p592 * 143.00567626953125, p592 * 112.44320678710938, p592 * 141.00567626953125, p592 * 112.44320678710938, p592 * 137.00567626953125, p592 * 111.44320678710938);
    v927.bezierCurveTo(p592 * 138.00567626953125, p592 * 117.44320678710938, p592 * 138.00567626953125, p592 * 120.44320678710938, p592 * 138.00567626953125, p592 * 124.44320678710938);
    v927.bezierCurveTo(p592 * 125.00567626953125, p592 * 107.44320678710938, p592 * 121.00567626953125, p592 * 124.44320678710938, p592 * 110.00567626953125, p592 * 141.44320678710938);
    v927.bezierCurveTo(p592 * 102.00567626953125, p592 * 158.44320678710938, p592 * 89.00567626953125, p592 * 158.44320678710938, p592 * 80.00567626953125, p592 * 144.44320678710938);
    v927.bezierCurveTo(p592 * 61.00567626953125, p592 * 111.44320678710938, p592 * 56.00567626953125, p592 * 117.44320678710938, p592 * 48.00567626953125, p592 * 120.44320678710938);
    v927.bezierCurveTo(p592 * 46.00567626953125, p592 * 118.44320678710938, p592 * 47.00567626953125, p592 * 112.44320678710938, p592 * 48.00567626953125, p592 * 107.44320678710938);
    v927.bezierCurveTo(p592 * 43.00567626953125, p592 * 111.44320678710938, p592 * 40.00567626953125, p592 * 111.44320678710938, p592 * 37.00567626953125, p592 * 110.44320678710938);
    v927.bezierCurveTo(p592 * 39.50567626953125, p592 * 104.94320678710938, p592 * 39.50567626953125, p592 * 104.94320678710938, p592 * 42.00567626953125, p592 * 99.44320678710938);
    v927.bezierCurveTo(p592 * 33.00567626953125, p592 * 99.44320678710938, p592 * 33.00567626953125, p592 * 98.44320678710938, p592 * 33.00567626953125, p592 * 96.44320678710938);
    v927.closePath();
    f88(v927, p593[1], p593[2], p592 * 3);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 60.00567626953125, p592 * 99.35227966308594);
    v927.bezierCurveTo(p592 * 70.00567626953125, p592 * 82.35227966308594, p592 * 85.00567626953125, p592 * 86.35227966308594, p592 * 87.00567626953125, p592 * 97.35227966308594);
    v927.bezierCurveTo(p592 * 89.00567626953125, p592 * 101.35227966308594, p592 * 88.00567626953125, p592 * 105.35227966308594, p592 * 87.00567626953125, p592 * 110.35227966308594);
    v927.bezierCurveTo(p592 * 89.00567626953125, p592 * 111.35227966308594, p592 * 91.00567626953125, p592 * 112.35227966308594, p592 * 93.00567626953125, p592 * 115.35227966308594);
    v927.bezierCurveTo(p592 * 96.00567626953125, p592 * 111.35227966308594, p592 * 99.00567626953125, p592 * 111.35227966308594, p592 * 100.00567626953125, p592 * 110.35227966308594);
    v927.bezierCurveTo(p592 * 98.00567626953125, p592 * 92.35227966308594, p592 * 103.00567626953125, p592 * 86.35227966308594, p592 * 113.00567626953125, p592 * 89.35227966308594);
    v927.bezierCurveTo(p592 * 122.00567626953125, p592 * 92.35227966308594, p592 * 123.00567626953125, p592 * 94.35227966308594, p592 * 126.00567626953125, p592 * 98.35227966308594);
    v927.bezierCurveTo(p592 * 124.00567626953125, p592 * 102.35227966308594, p592 * 123.00567626953125, p592 * 103.35227966308594, p592 * 121.00567626953125, p592 * 104.35227966308594);
    v927.bezierCurveTo(p592 * 124.00567626953125, p592 * 105.35227966308594, p592 * 126.00567626953125, p592 * 107.35227966308594, p592 * 129.00567626953125, p592 * 111.35227966308594);
    v927.bezierCurveTo(p592 * 115.00567626953125, p592 * 122.35227966308594, p592 * 113.00567626953125, p592 * 145.35227966308594, p592 * 100.00567626953125, p592 * 152.35227966308594);
    v927.bezierCurveTo(p592 * 91.00567626953125, p592 * 158.35227966308594, p592 * 83.00567626953125, p592 * 149.35227966308594, p592 * 76.00567626953125, p592 * 138.35227966308594);
    v927.bezierCurveTo(p592 * 67.00567626953125, p592 * 114.35227966308594, p592 * 63.00567626953125, p592 * 113.35227966308594, p592 * 59.00567626953125, p592 * 111.35227966308594);
    v927.bezierCurveTo(p592 * 62.00567626953125, p592 * 107.35227966308594, p592 * 64.00567626953125, p592 * 105.35227966308594, p592 * 66.00567626953125, p592 * 104.35227966308594);
    v927.bezierCurveTo(p592 * 63.00567626953125, p592 * 100.35227966308594, p592 * 62.00567626953125, p592 * 100.35227966308594, p592 * 60.00567626953125, p592 * 99.35227966308594);
    v927.closePath();
    f88(v927, p593[3]);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 33.00567626953125, p592 * 95.44320678710938);
    v927.bezierCurveTo(p592 * 42.00567626953125, p592 * 87.44320678710938, p592 * 48.00567626953125, p592 * 51.443206787109375, p592 * 74.00567626953125, p592 * 47.443206787109375);
    v927.bezierCurveTo(p592 * 100.00567626953125, p592 * 42.443206787109375, p592 * 118.00567626953125, p592 * 49.443206787109375, p592 * 131.00567626953125, p592 * 55.443206787109375);
    v927.bezierCurveTo(p592 * 140.00567626953125, p592 * 70.44320678710938, p592 * 145.00567626953125, p592 * 87.44320678710938, p592 * 152.00567626953125, p592 * 94.44320678710938);
    v927.bezierCurveTo(p592 * 149.00567626953125, p592 * 99.44320678710938, p592 * 147.00567626953125, p592 * 98.44320678710938, p592 * 141.00567626953125, p592 * 101.44320678710938);
    v927.bezierCurveTo(p592 * 147.00567626953125, p592 * 108.44320678710938, p592 * 147.00567626953125, p592 * 111.44320678710938, p592 * 147.00567626953125, p592 * 112.44320678710938);
    v927.bezierCurveTo(p592 * 143.00567626953125, p592 * 112.44320678710938, p592 * 141.00567626953125, p592 * 112.44320678710938, p592 * 137.00567626953125, p592 * 111.44320678710938);
    v927.bezierCurveTo(p592 * 138.00567626953125, p592 * 117.44320678710938, p592 * 138.00567626953125, p592 * 120.44320678710938, p592 * 138.00567626953125, p592 * 124.44320678710938);
    v927.bezierCurveTo(p592 * 125.00567626953125, p592 * 107.44320678710938, p592 * 121.00567626953125, p592 * 124.44320678710938, p592 * 110.00567626953125, p592 * 141.44320678710938);
    v927.bezierCurveTo(p592 * 102.00567626953125, p592 * 158.44320678710938, p592 * 89.00567626953125, p592 * 158.44320678710938, p592 * 80.00567626953125, p592 * 144.44320678710938);
    v927.bezierCurveTo(p592 * 61.00567626953125, p592 * 111.44320678710938, p592 * 56.00567626953125, p592 * 117.44320678710938, p592 * 48.00567626953125, p592 * 120.44320678710938);
    v927.bezierCurveTo(p592 * 46.00567626953125, p592 * 118.44320678710938, p592 * 47.00567626953125, p592 * 112.44320678710938, p592 * 48.00567626953125, p592 * 107.44320678710938);
    v927.bezierCurveTo(p592 * 43.00567626953125, p592 * 111.44320678710938, p592 * 40.00567626953125, p592 * 111.44320678710938, p592 * 37.00567626953125, p592 * 110.44320678710938);
    v927.bezierCurveTo(p592 * 39.50567626953125, p592 * 104.94320678710938, p592 * 39.50567626953125, p592 * 104.94320678710938, p592 * 42.00567626953125, p592 * 99.44320678710938);
    v927.bezierCurveTo(p592 * 33.00567626953125, p592 * 99.44320678710938, p592 * 33.00567626953125, p592 * 98.44320678710938, p592 * 33.00567626953125, p592 * 96.44320678710938);
    v927.closePath();
    f88(v927, vVVVVUndefined142, p593[2], p592 * 3);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 51.00567626953125, p592 * 72.53409576416016);
    v927.bezierCurveTo(p592 * 48.00567626953125, p592 * 56.534095764160156, p592 * 48.00567626953125, p592 * 49.534095764160156, p592 * 54.00567626953125, p592 * 35.534095764160156);
    v927.bezierCurveTo(p592 * 58.00567626953125, p592 * 26.534095764160156, p592 * 65.00567626953125, p592 * 27.534095764160156, p592 * 73.00567626953125, p592 * 40.534095764160156);
    v927.bezierCurveTo(p592 * 81.00567626953125, p592 * 49.534095764160156, p592 * 82.00567626953125, p592 * 50.534095764160156, p592 * 83.00567626953125, p592 * 51.534095764160156);
    f88(v927, p593[1], p593[2], p592 * 3);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 105.00567626953125, p592 * 50.53410339355469);
    v927.bezierCurveTo(p592 * 112.00567626953125, p592 * 48.53410339355469, p592 * 125.00567626953125, p592 * 21.534103393554688, p592 * 132.00567626953125, p592 * 33.53410339355469);
    v927.bezierCurveTo(p592 * 138.00567626953125, p592 * 42.53410339355469, p592 * 140.00567626953125, p592 * 64.53410339355469, p592 * 136.00567626953125, p592 * 75.53410339355469);
    f88(v927, p593[1], p593[2], p592 * 3);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 57.00567626953125, p592 * 68.53410339355469);
    v927.bezierCurveTo(p592 * 63.00567626953125, p592 * 69.53410339355469, p592 * 69.00567626953125, p592 * 66.53410339355469, p592 * 73.00567626953125, p592 * 60.53410339355469);
    v927.bezierCurveTo(p592 * 66.00567626953125, p592 * 47.53410339355469, p592 * 61.00567626953125, p592 * 42.53410339355469, p592 * 58.00567626953125, p592 * 49.53410339355469);
    v927.bezierCurveTo(p592 * 56.00567626953125, p592 * 59.53410339355469, p592 * 56.00567626953125, p592 * 64.53410339355469, p592 * 57.00567626953125, p592 * 67.53410339355469);
    v927.closePath();
    f88(v927, p593[3]);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 115.00567626953125, p592 * 59.715911865234375);
    v927.bezierCurveTo(p592 * 119.00567626953125, p592 * 48.715911865234375, p592 * 126.00567626953125, p592 * 41.715911865234375, p592 * 129.00567626953125, p592 * 48.715911865234375);
    v927.bezierCurveTo(p592 * 131.00567626953125, p592 * 56.715911865234375, p592 * 133.00567626953125, p592 * 71.71591186523438, p592 * 127.00567626953125, p592 * 68.71591186523438);
    v927.bezierCurveTo(p592 * 120.00567626953125, p592 * 67.71591186523438, p592 * 114.00567626953125, p592 * 59.715911865234375, p592 * 116.00567626953125, p592 * 58.715911865234375);
    v927.closePath();
    f88(v927, p593[3]);
    f92(v927, p592 * 77, p592 * 107, p592 * 6);
    f88(v927, p593[2]);
    f92(v927, p592 * 110, p592 * 107, p592 * 6);
    f88(v927, p593[2]);
    f92(v927, p592 * 75, p592 * 105, p592 * 3);
    f88(v927, p593[4]);
    f92(v927, p592 * 108, p592 * 105, p592 * 3);
    f88(v927, p593[4]);
    v927.beginPath();
    v927.lineCap = "round";
    v927.lineJoin = "round";
    v927.moveTo(p592 * 88.00567626953125, p592 * 141.4431915283203);
    v927.bezierCurveTo(p592 * 93.00567626953125, p592 * 137.4431915283203, p592 * 96.00567626953125, p592 * 138.4431915283203, p592 * 100.00567626953125, p592 * 141.4431915283203);
    v927.bezierCurveTo(p592 * 103.00567626953125, p592 * 143.4431915283203, p592 * 101.00567626953125, p592 * 149.4431915283203, p592 * 95.00567626953125, p592 * 148.4431915283203);
    v927.bezierCurveTo(p592 * 85.00567626953125, p592 * 148.4431915283203, p592 * 86.00567626953125, p592 * 145.4431915283203, p592 * 88.00567626953125, p592 * 142.4431915283203);
    v927.closePath();
    f88(v927, p593[1]);
    return v926;
  }
  function f119(p594, p595, p596, p597, p598) {
    var v928 = document.createElement("canvas");
    var v929 = v928.getContext("2d");
    var v930 = p594 * 70;
    var v931 = p594 * 70;
    var v932 = p594 * 10;
    var v933 = p594 * 5;
    v928.width = v930;
    v928.height = v931 + v933;
    for (var v934 = 0; v934 < p595.length; v934++) {
      var v935 = p595[v934];
      v929.globalAlpha = v935.a;
      var v936 = v935.f(p596, false, v935.c);
      v929.save();
      v929.translate(v930 / 2 + p594 * v935.x, v931 / 2 + p594 * v935.y);
      v929.rotate(v935.r);
      v929.drawImage(v936, -v936.width / 2, -v936.height / 2);
      v929.restore();
    }
    var v937 = [];
    for (v934 = 0; v934 < p597.length; v934++) {
      var v938 = document.createElement("canvas");
      var v939 = v938.getContext("2d");
      v938.width = v930;
      v938.height = v931 + v933;
      v939.globalAlpha = p598 / 2;
      if (v934 == 2) {
        f86(v939, 0, v933, v930, v931, v932);
      } else {
        f86(v939, 0, 0, v930, v931 + v933, v932);
      }
      f88(v939, "#081a19");
      v939.globalAlpha = p598;
      if (v934 == 2) {
        f86(v939, 0, v933, v930, v931, v932);
      } else {
        f86(v939, 0, 0, v930, v931, v932);
      }
      f88(v939, p597[v934]);
      v939.globalAlpha = 1;
      if (v934 == 2) {
        v939.drawImage(v928, 0, v933);
      } else {
        v939.drawImage(v928, 0, 0);
      }
      v937.push(f54(v938));
    }
    return v937;
  }
  function f120(p599, p600) {
    var v940 = document.createElement("canvas");
    var v941 = v940.getContext("2d");
    var v942 = p599 * 100;
    var v943 = p599 * 100;
    var v944 = v942 / 2;
    var v945 = v943 / 2;
    v940.width = v942;
    v940.height = v943;
    var v946 = p599 * 5;
    var v947 = p599 * 28;
    var v948 = v946 / 2;
    var v949 = v947 / 2;
    v941.translate(v944, v945);
    for (var v950 = 0; v950 < 4; v950++) {
      f86(v941, -v948, -v949, v946, v947, p599 * 2);
      v941.rotate(Math.PI / 4);
      f88(v941, p600);
    }
    v941.arc(0, 0, p599 * 10, 0, Math.PI * 2);
    f88(v941, p600);
    v941.globalCompositeOperation = "destination-out";
    f92(v941, 0, 0, p599 * 4);
    v941.fill();
    return v940;
  }
  function f121(p601, p602, p603) {
    var v951 = document.createElement("canvas");
    var v952 = v951.getContext("2d");
    v951.width = p601 * 170;
    v951.height = p601 * 173;
    v952.translate(p601 * 5, p601 * 5);
    v952.globalAlpha = p602 ? 0.5 : 1;
    v952.save();
    v952.translate(p601 * 86.25, p601 * 84.953125);
    v952.rotate(0.32);
    f89(v952, 7, p601 * 42.15447781671598, p601 * 10);
    v952.restore();
    f88(v952, p603[0]);
    v952.globalAlpha = 1;
    v952.translate(p601 * -5, p601 * -5);
    v952.save();
    v952.translate(p601 * 86.25, p601 * 84.953125);
    v952.rotate(0.32);
    f89(v952, 7, p601 * 42.15447781671598, p601 * 10);
    v952.restore();
    f88(v952, p603[1], p603[2], p601 * 4);
    v952.globalAlpha = p602 ? 0.5 : 1;
    v952.translate(p601 * 5, p601 * 5);
    v952.save();
    v952.translate(p601 * 86.25, p601 * 84.953125);
    v952.rotate(0.28);
    f89(v952, 7, p601 * 30.463092423455635, p601 * 10);
    v952.restore();
    f88(v952, p603[0]);
    v952.globalAlpha = 1;
    v952.translate(p601 * -5, p601 * -5);
    v952.save();
    v952.translate(p601 * 86.25, p601 * 84.953125);
    v952.rotate(0.28);
    f89(v952, 7, p601 * 30.463092423455635, p601 * 10);
    v952.restore();
    f88(v952, p603[3], p603[4], p601 * 4);
    v952.globalAlpha = p602 ? 0.5 : 1;
    v952.translate(p601 * 5, p601 * 5);
    f92(v952, p601 * 86.25, p601 * 84.953125, p601 * 18.867962264113206);
    f88(v952, p603[0]);
    v952.globalAlpha = 1;
    v952.translate(p601 * -5, p601 * -5);
    f92(v952, p601 * 86.25, p601 * 84.953125, p601 * 18.867962264113206);
    f88(v952, p603[5], p603[6], p601 * 4);
    return v951;
  }
  function f122(p604, p605) {
    var v953 = document.createElement("canvas");
    var v954 = v953.getContext("2d");
    v953.width = p604 * 238;
    v953.height = p604 * 230;
    v954.translate(p604 * -93, p604 * -110 + p604 * 5);
    v954.globalAlpha = 0.3;
    f92(v954, p604 * 213.5, p604 * 256.75, p604 * 75);
    f88(v954, p605[5]);
    f92(v954, p604 * 213.5, p604 * 175.75, p604 * 25);
    f88(v954, p605[5]);
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 156.5, p604 * 137.75);
    v954.bezierCurveTo(p604 * 170.5, p604 * 173.75, p604 * 195.5, p604 * 177.75, p604 * 209.5, p604 * 177.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[5];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 217.5, p604 * 178.75);
    v954.bezierCurveTo(p604 * 251.5, p604 * 177.75, p604 * 263.5, p604 * 153.75, p604 * 270.5, p604 * 140.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[5];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 130.5, p604 * 124.75);
    v954.bezierCurveTo(p604 * 153.5, p604 * 185.75, p604 * 198.5, p604 * 185.75, p604 * 213.5, p604 * 185.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[5];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 214.5, p604 * 183.75);
    v954.bezierCurveTo(p604 * 265.5, p604 * 192.75, p604 * 293.5, p604 * 141.75, p604 * 297.5, p604 * 124.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[5];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 107.5, p604 * 213.75);
    v954.bezierCurveTo(p604 * 151.5, p604 * 190.75, p604 * 198.5, p604 * 184.75, p604 * 210.5, p604 * 184.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[5];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 212.5, p604 * 187.75);
    v954.bezierCurveTo(p604 * 258.5, p604 * 182.75, p604 * 286.5, p604 * 194.75, p604 * 314.5, p604 * 206.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[5];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 102.5, p604 * 258.75);
    v954.bezierCurveTo(p604 * 142.5, p604 * 200.75, p604 * 193.5, p604 * 194.75, p604 * 211.5, p604 * 185.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[5];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 214.5, p604 * 192.75);
    v954.bezierCurveTo(p604 * 276.5, p604 * 194.75, p604 * 306.5, p604 * 233.75, p604 * 316.5, p604 * 246.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[5];
    v954.stroke();
    v954.translate(0, -5);
    v954.globalAlpha = 1;
    f92(v954, p604 * 213.5, p604 * 256.75, p604 * 75);
    f88(v954, p605[3]);
    f92(v954, p604 * 213.5, p604 * 175.75, p604 * 25);
    f88(v954, p605[3]);
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 219.5, p604 * 158.75);
    v954.bezierCurveTo(p604 * 226.5, p604 * 159.75, p604 * 227.5, p604 * 147.75, p604 * 219.5, p604 * 145.75);
    v954.closePath();
    v954.lineWidth = p604 * 10;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 210.5, p604 * 160.75);
    v954.bezierCurveTo(p604 * 203.5, p604 * 159.75, p604 * 199.5, p604 * 146.75, p604 * 210.5, p604 * 145.75);
    v954.closePath();
    v954.lineWidth = p604 * 10;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 219.5, p604 * 158.75);
    v954.bezierCurveTo(p604 * 226.5, p604 * 159.75, p604 * 227.5, p604 * 147.75, p604 * 219.5, p604 * 145.75);
    v954.closePath();
    v954.fillStyle = p605[0];
    v954.fill();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 210.5, p604 * 160.75);
    v954.bezierCurveTo(p604 * 203.5, p604 * 159.75, p604 * 199.5, p604 * 146.75, p604 * 210.5, p604 * 145.75);
    v954.closePath();
    v954.fillStyle = p605[0];
    v954.fill();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 156.5, p604 * 137.75);
    v954.bezierCurveTo(p604 * 170.5, p604 * 173.75, p604 * 195.5, p604 * 177.75, p604 * 209.5, p604 * 177.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 217.5, p604 * 178.75);
    v954.bezierCurveTo(p604 * 251.5, p604 * 177.75, p604 * 263.5, p604 * 153.75, p604 * 270.5, p604 * 140.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 130.5, p604 * 124.75);
    v954.bezierCurveTo(p604 * 153.5, p604 * 185.75, p604 * 198.5, p604 * 185.75, p604 * 213.5, p604 * 185.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 214.5, p604 * 183.75);
    v954.bezierCurveTo(p604 * 265.5, p604 * 192.75, p604 * 293.5, p604 * 141.75, p604 * 297.5, p604 * 124.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 107.5, p604 * 213.75);
    v954.bezierCurveTo(p604 * 151.5, p604 * 190.75, p604 * 198.5, p604 * 184.75, p604 * 210.5, p604 * 184.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 212.5, p604 * 187.75);
    v954.bezierCurveTo(p604 * 258.5, p604 * 182.75, p604 * 286.5, p604 * 194.75, p604 * 314.5, p604 * 206.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 102.5, p604 * 258.75);
    v954.bezierCurveTo(p604 * 142.5, p604 * 200.75, p604 * 193.5, p604 * 194.75, p604 * 211.5, p604 * 185.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 214.5, p604 * 192.75);
    v954.bezierCurveTo(p604 * 276.5, p604 * 194.75, p604 * 306.5, p604 * 233.75, p604 * 316.5, p604 * 246.75);
    v954.lineWidth = p604 * 17;
    v954.strokeStyle = p605[3];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 156.5, p604 * 137.75);
    v954.bezierCurveTo(p604 * 170.5, p604 * 173.75, p604 * 195.5, p604 * 177.75, p604 * 209.5, p604 * 177.75);
    v954.lineWidth = p604 * 8;
    v954.strokeStyle = p605[0];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 217.5, p604 * 178.75);
    v954.bezierCurveTo(p604 * 251.5, p604 * 177.75, p604 * 263.5, p604 * 153.75, p604 * 270.5, p604 * 140.75);
    v954.lineWidth = p604 * 8;
    v954.strokeStyle = p605[0];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 130.5, p604 * 124.75);
    v954.bezierCurveTo(p604 * 153.5, p604 * 185.75, p604 * 198.5, p604 * 185.75, p604 * 213.5, p604 * 185.75);
    v954.lineWidth = p604 * 8;
    v954.strokeStyle = p605[0];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 214.5, p604 * 183.75);
    v954.bezierCurveTo(p604 * 265.5, p604 * 192.75, p604 * 293.5, p604 * 141.75, p604 * 297.5, p604 * 124.75);
    v954.lineWidth = p604 * 8;
    v954.strokeStyle = p605[0];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 107.5, p604 * 213.75);
    v954.bezierCurveTo(p604 * 151.5, p604 * 190.75, p604 * 198.5, p604 * 184.75, p604 * 210.5, p604 * 184.75);
    v954.lineWidth = p604 * 8;
    v954.strokeStyle = p605[0];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 212.5, p604 * 187.75);
    v954.bezierCurveTo(p604 * 258.5, p604 * 182.75, p604 * 286.5, p604 * 194.75, p604 * 314.5, p604 * 206.75);
    v954.lineWidth = p604 * 8;
    v954.strokeStyle = p605[0];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 102.5, p604 * 258.75);
    v954.bezierCurveTo(p604 * 142.5, p604 * 200.75, p604 * 193.5, p604 * 194.75, p604 * 211.5, p604 * 185.75);
    v954.lineWidth = p604 * 8;
    v954.strokeStyle = p605[0];
    v954.stroke();
    v954.beginPath();
    v954.lineCap = "round";
    v954.lineJoin = "round";
    v954.moveTo(p604 * 214.5, p604 * 192.75);
    v954.bezierCurveTo(p604 * 276.5, p604 * 194.75, p604 * 306.5, p604 * 233.75, p604 * 316.5, p604 * 246.75);
    v954.lineWidth = p604 * 8;
    v954.strokeStyle = p605[0];
    v954.stroke();
    f92(v954, p604 * 213.5, p604 * 256.75, p604 * 70);
    f88(v954, p605[0]);
    f92(v954, p604 * 213.5, p604 * 175.75, p604 * 20);
    f88(v954, p605[0]);
    f92(v954, p604 * 222, p604 * 166, p604 * 5);
    v954.fillStyle = p605[2];
    v954.fill();
    f92(v954, p604 * 205, p604 * 166, p604 * 5);
    v954.fillStyle = p605[2];
    v954.fill();
    f92(v954, p604 * 206.2, p604 * 167, p604 * 2.5);
    v954.fillStyle = p605[4];
    v954.fill();
    f92(v954, p604 * 223.2, p604 * 167, p604 * 2.5);
    v954.fillStyle = p605[4];
    v954.fill();
    v954.save();
    v954.translate(p604 * 213.5, p604 * 293.75);
    v954.rotate(0.76);
    f86(v954, p604 * -22, p604 * -21, p604 * 44, p604 * 42, p604 * 6);
    v954.restore();
    v954.fillStyle = p605[1];
    v954.fill();
    v954.save();
    v954.translate(p604 * 212.5, p604 * 258.25);
    v954.rotate(0.8);
    f86(v954, p604 * -15, p604 * -14.5, p604 * 30, p604 * 29, p604 * 6);
    v954.restore();
    v954.fillStyle = p605[1];
    v954.fill();
    return v953;
  }
  function f123(p606, p607, p608) {
    var v955 = document.createElement("canvas");
    var v956 = v955.getContext("2d");
    v955.width = p606 * 170;
    v955.height = p606 * 173;
    v956.globalAlpha = p607 ? 0.5 : 1;
    v956.translate(p606 * 5, p606 * 5);
    v956.save();
    v956.translate(p606 * 86.25, p606 * 84.953125);
    f89(v956, 7, p606 * 9.848857801796104, p606 * 5);
    v956.restore();
    f88(v956, p608[0]);
    v956.globalAlpha = 1;
    v956.translate(p606 * -5, p606 * -5);
    v956.save();
    v956.translate(p606 * 86.25, p606 * 84.953125);
    f89(v956, 7, p606 * 9.848857801796104, p606 * 5);
    v956.restore();
    f88(v956, p608[8], p608[9], p606 * 4);
    return v955;
  }
  function f124(p609, p610, p611) {
    var v957 = document.createElement("canvas");
    var v958 = v957.getContext("2d");
    var v959 = p609 * 193;
    var v960 = p609 * 198;
    var v961 = p609 * 140;
    var v962 = p609 * 90;
    v957.width = v959;
    v957.height = v960;
    var v963 = p609 * 10;
    var v964 = p609 * 25;
    var v965 = p609 * 180;
    var v966 = v964 / 2;
    var v967 = v965 / 2;
    var v968 = p609 * 4;
    v958.translate(p609 * -25, p609 * 1);
    v958.translate(v961, v962);
    v958.rotate(-Math.PI / 5);
    f86(v958, -v966, -v967, v964, v965, v963);
    f88(v958, p611[0], p611[1], v968);
    v958.translate(p609 * -30, p609 * -25);
    v958.rotate(Math.PI / 3);
    f86(v958, -v966, -v967, v964, v965, v963);
    f88(v958, p611[0], p611[1], v968);
    v958.translate(p609 * 35, p609 * 30);
    v958.rotate(Math.PI / 3);
    f86(v958, -v966, -v967, v964, v965, v963);
    f88(v958, p611[0], p611[1], v968);
    return v957;
  }
  function f125(p612, p613, p614) {
    var v969 = document.createElement("canvas");
    var v970 = v969.getContext("2d");
    v969.width = p612 * 104;
    v969.height = p612 * 112;
    v970.translate(0, p612 * 15);
    v970.beginPath();
    v970.lineCap = "round";
    v970.lineJoin = "round";
    v970.moveTo(p612 * 16, p612 * 44);
    v970.bezierCurveTo(p612 * 30.5, p612 * 48, p612 * 30.5, p612 * 48, p612 * 45, p612 * 52);
    v970.bezierCurveTo(p612 * 36.5, p612 * 63, p612 * 36.5, p612 * 63, p612 * 28, p612 * 74);
    v970.bezierCurveTo(p612 * 32, p612 * 86, p612 * 61, p612 * 92, p612 * 78, p612 * 76);
    v970.bezierCurveTo(p612 * 93, p612 * 62, p612 * 92, p612 * 40, p612 * 80, p612 * 26);
    v970.bezierCurveTo(p612 * 65, p612 * 11, p612 * 42, p612 * 16, p612 * 34, p612 * 21);
    v970.bezierCurveTo(p612 * 22, p612 * 27, p612 * 16, p612 * 39, p612 * 16, p612 * 44);
    v970.closePath();
    f88(v970, p614[0]);
    v970.globalAlpha = 1;
    v970.translate(0, p612 * -15);
    v970.beginPath();
    v970.lineCap = "round";
    v970.lineJoin = "round";
    v970.moveTo(p612 * 16, p612 * 44);
    v970.bezierCurveTo(p612 * 30.5, p612 * 48, p612 * 30.5, p612 * 48, p612 * 45, p612 * 52);
    v970.bezierCurveTo(p612 * 36.5, p612 * 63, p612 * 36.5, p612 * 63, p612 * 28, p612 * 74);
    v970.bezierCurveTo(p612 * 32, p612 * 86, p612 * 61, p612 * 92, p612 * 78, p612 * 76);
    v970.bezierCurveTo(p612 * 93, p612 * 62, p612 * 92, p612 * 40, p612 * 80, p612 * 26);
    v970.bezierCurveTo(p612 * 65, p612 * 11, p612 * 42, p612 * 16, p612 * 34, p612 * 21);
    v970.bezierCurveTo(p612 * 22, p612 * 27, p612 * 16, p612 * 39, p612 * 16, p612 * 44);
    v970.closePath();
    f88(v970, p614[1], p614[2], p612 * 8);
    return v969;
  }
  function f126(p615, p616, p617) {
    var v971 = document.createElement("canvas");
    var v972 = v971.getContext("2d");
    v971.width = p615 * 155;
    v971.height = p615 * 127;
    v972.globalAlpha = 0.5;
    v972.translate(0, p615 * 8);
    v972.translate(p615 * -7, p615 * -20);
    v972.beginPath();
    v972.lineCap = "round";
    v972.lineJoin = "round";
    v972.moveTo(p615 * 55, p615 * 68);
    v972.bezierCurveTo(p615 * 86, p615 * 64, p615 * 117, p615 * 66, p615 * 134, p615 * 68);
    v972.bezierCurveTo(p615 * 152, p615 * 69, p615 * 165, p615 * 86, p615 * 152, p615 * 104);
    v972.bezierCurveTo(p615 * 146, p615 * 87, p615 * 122, p615 * 89, p615 * 98, p615 * 90);
    v972.bezierCurveTo(p615 * 64, p615 * 89, p615 * 41, p615 * 91, p615 * 36, p615 * 106);
    v972.bezierCurveTo(p615 * 19, p615 * 92, p615 * 31, p615 * 71, p615 * 54, p615 * 69);
    v972.closePath();
    f88(v972, p617[0]);
    v972.globalAlpha = 1;
    v972.translate(0, p615 * -8);
    v972.translate(p615 * 7, p615 * 20);
    v972.beginPath();
    v972.lineCap = "round";
    v972.lineJoin = "round";
    v972.moveTo(p615 * 24, p615 * 28);
    v972.bezierCurveTo(p615 * 39, p615 * 30, p615 * 37, p615 * 31, p615 * 40, p615 * 32);
    v972.bezierCurveTo(p615 * 22, p615 * 45, p615 * 26, p615 * 58, p615 * 29, p615 * 66);
    v972.bezierCurveTo(p615 * 86.5, p615 * 65, p615 * 86.5, p615 * 65, p615 * 144, p615 * 64);
    v972.bezierCurveTo(p615 * 151, p615 * 42, p615 * 132, p615 * 20, p615 * 120, p615 * 16);
    v972.bezierCurveTo(p615 * 106, p615 * 12, p615 * 89, p615 * 0, p615 * 73, p615 * 3);
    v972.bezierCurveTo(p615 * 51, p615 * 5, p615 * 36, p615 * 20, p615 * 25, p615 * 28);
    v972.closePath();
    f88(v972, p617[1], p617[2], p615 * 4);
    v972.beginPath();
    v972.lineCap = "round";
    v972.lineJoin = "round";
    v972.moveTo(p615 * 30, p615 * 41);
    v972.bezierCurveTo(p615 * 49, p615 * 31, p615 * 53, p615 * 29, p615 * 62, p615 * 27);
    v972.bezierCurveTo(p615 * 59, p615 * 24, p615 * 56, p615 * 25, p615 * 53, p615 * 24);
    v972.bezierCurveTo(p615 * 67, p615 * 15, p615 * 84, p615 * 12, p615 * 120, p615 * 16);
    v972.bezierCurveTo(p615 * 107, p615 * 11, p615 * 96, p615 * 6, p615 * 85, p615 * 2);
    v972.bezierCurveTo(p615 * 59, p615 * 3, p615 * 54, p615 * 7, p615 * 40, p615 * 17);
    v972.bezierCurveTo(p615 * 32.5, p615 * 22.5, p615 * 32.5, p615 * 22.5, p615 * 25, p615 * 28);
    v972.bezierCurveTo(p615 * 32, p615 * 30, p615 * 32, p615 * 30, p615 * 39, p615 * 32);
    v972.closePath();
    f88(v972, p617[3]);
    v972.beginPath();
    v972.lineCap = "round";
    v972.lineJoin = "round";
    v972.moveTo(p615 * 24, p615 * 28);
    v972.bezierCurveTo(p615 * 39, p615 * 30, p615 * 37, p615 * 31, p615 * 40, p615 * 32);
    v972.bezierCurveTo(p615 * 22, p615 * 45, p615 * 26, p615 * 58, p615 * 29, p615 * 66);
    v972.bezierCurveTo(p615 * 86.5, p615 * 65, p615 * 86.5, p615 * 65, p615 * 144, p615 * 64);
    v972.bezierCurveTo(p615 * 151, p615 * 42, p615 * 132, p615 * 20, p615 * 120, p615 * 16);
    v972.bezierCurveTo(p615 * 106, p615 * 12, p615 * 89, p615 * 0, p615 * 73, p615 * 3);
    v972.bezierCurveTo(p615 * 51, p615 * 5, p615 * 36, p615 * 20, p615 * 25, p615 * 28);
    v972.closePath();
    f88(v972, undefined, p617[2], p615 * 4);
    f92(v972, p615 * 18, p615 * 38, p615 * 14.866068747318506);
    f88(v972, p617[4], p617[5], p615 * 4);
    v972.beginPath();
    v972.lineCap = "round";
    v972.lineJoin = "round";
    v972.moveTo(p615 * 39, p615 * 30);
    v972.bezierCurveTo(p615 * 27, p615 * 38, p615 * 25, p615 * 50, p615 * 26, p615 * 60);
    v972.bezierCurveTo(p615 * 36.5, p615 * 58.5, p615 * 36.5, p615 * 58.5, p615 * 47, p615 * 57);
    f88(v972, p617[1], p617[2], p615 * 4);
    v972.translate(p615 * -7, p615 * -20);
    v972.beginPath();
    v972.lineCap = "round";
    v972.lineJoin = "round";
    v972.moveTo(p615 * 55, p615 * 68);
    v972.bezierCurveTo(p615 * 86, p615 * 64, p615 * 117, p615 * 66, p615 * 134, p615 * 68);
    v972.bezierCurveTo(p615 * 152, p615 * 69, p615 * 165, p615 * 86, p615 * 152, p615 * 104);
    v972.bezierCurveTo(p615 * 146, p615 * 87, p615 * 122, p615 * 89, p615 * 98, p615 * 90);
    v972.bezierCurveTo(p615 * 64, p615 * 89, p615 * 41, p615 * 91, p615 * 36, p615 * 106);
    v972.bezierCurveTo(p615 * 19, p615 * 92, p615 * 31, p615 * 71, p615 * 54, p615 * 69);
    v972.closePath();
    f88(v972, p617[4], p617[5], p615 * 4);
    return v971;
  }
  function f127(p618, p619, p620) {
    var v973 = document.createElement("canvas");
    var v974 = v973.getContext("2d");
    var v975 = p618 * 145;
    var v976 = p618 * 145;
    var v977 = v975 / 2;
    var v978 = v976 / 2;
    v973.width = v975;
    v973.height = v976;
    var v979 = p618 * 70;
    v974.translate(v977, v978);
    v974.globalAlpha = 0.4;
    f92(v974, 0, 0, v979);
    f88(v974, p620[0]);
    v979 = p618 * 50;
    v974.translate(0, 0);
    v974.globalAlpha = 0.8;
    f92(v974, 0, 0, v979);
    f88(v974, p620[0]);
    v979 = p618 * 35;
    v974.translate(0, 0);
    v974.globalAlpha = 0.8;
    f92(v974, 0, 0, v979);
    f88(v974, p620[1]);
    v979 = p618 * 20;
    v974.translate(0, 0);
    v974.globalAlpha = 0.8;
    f92(v974, 0, 0, v979);
    f88(v974, p620[2]);
    return v973;
  }
  function f128(p621, p622) {
    var v980 = document.createElement("canvas");
    var v981 = v980.getContext("2d");
    v980.width = p621 * 283;
    v980.height = p621 * 224;
    v981.beginPath();
    v981.lineCap = "round";
    v981.lineJoin = "round";
    v981.moveTo(p621 * 100, p621 * 33);
    v981.bezierCurveTo(p621 * 85, p621 * 62, p621 * 102, p621 * 66, p621 * 110, p621 * 83);
    f88(v981, vVVVVVVUndefined142, p622[0], p621 * 40);
    v981.beginPath();
    v981.lineCap = "round";
    v981.lineJoin = "round";
    v981.moveTo(p621 * 181, p621 * 32);
    v981.bezierCurveTo(p621 * 196, p621 * 62, p621 * 181, p621 * 68, p621 * 178, p621 * 69);
    f88(v981, vVVVUndefined113, p622[0], p621 * 40);
    v981.beginPath();
    v981.lineCap = "round";
    v981.lineJoin = "round";
    v981.moveTo(p621 * 225, p621 * 52);
    v981.bezierCurveTo(p621 * 228, p621 * 78, p621 * 207, p621 * 77, p621 * 192, p621 * 88);
    f88(v981, undefined, p622[0], p621 * 40);
    v981.beginPath();
    v981.lineCap = "round";
    v981.lineJoin = "round";
    v981.moveTo(p621 * 34, p621 * 134);
    v981.bezierCurveTo(p621 * 46, p621 * 111, p621 * 57, p621 * 111, p621 * 79, p621 * 109);
    f88(v981, vVVVUndefined142, p622[0], p621 * 40);
    v981.beginPath();
    v981.lineCap = "round";
    v981.lineJoin = "round";
    v981.moveTo(p621 * 249, p621 * 135);
    v981.bezierCurveTo(p621 * 233, p621 * 107, p621 * 212, p621 * 112, p621 * 202, p621 * 115);
    f88(v981, vVVVVVUndefined14, p622[0], p621 * 40);
    v981.beginPath();
    v981.lineCap = "round";
    v981.lineJoin = "round";
    v981.moveTo(p621 * 56, p621 * 50);
    v981.bezierCurveTo(p621 * 56, p621 * 82, p621 * 73, p621 * 82, p621 * 93, p621 * 89);
    f88(v981, vVVVVVUndefined1422, p622[0], p621 * 40);
    v981.beginPath();
    v981.lineCap = "round";
    v981.lineJoin = "round";
    v981.moveTo(p621 * 93, p621 * 55);
    v981.bezierCurveTo(p621 * 124, p621 * 29, p621 * 179, p621 * 44, p621 * 188, p621 * 52);
    v981.bezierCurveTo(p621 * 207, p621 * 64, p621 * 226, p621 * 94, p621 * 231, p621 * 118);
    v981.bezierCurveTo(p621 * 236, p621 * 145, p621 * 222, p621 * 184, p621 * 193, p621 * 192);
    v981.bezierCurveTo(p621 * 147, p621 * 201, p621 * 116, p621 * 200, p621 * 93, p621 * 193);
    v981.bezierCurveTo(p621 * 61, p621 * 180, p621 * 48, p621 * 147, p621 * 50, p621 * 123);
    v981.bezierCurveTo(p621 * 50, p621 * 93, p621 * 76, p621 * 66, p621 * 92, p621 * 56);
    v981.closePath();
    f88(v981, p622[0]);
    return v980;
  }
  function f129(p623, p624) {
    var v982 = document.createElement("canvas");
    var v983 = v982.getContext("2d");
    var v984 = p623 * 40;
    var v985 = p623 * 40;
    var v986 = p623 * 16;
    var v987 = p623 * 4;
    v982.width = v984;
    v982.height = v985;
    v983.translate(v984 / 2, v985 / 2);
    v983.globalAlpha = 1;
    f92(v983, 0, 0, v986);
    f88(v983, p624[0], p624[1], v987);
    return v982;
  }
  function f130(p625, p626, p627) {
    var v988 = document.createElement("canvas");
    var v989 = v988.getContext("2d");
    var v990 = (v997 = p625 * 450) / 2;
    var v991 = (v998 = p625 * 145) / 2;
    var v992 = p625 * 10;
    var v993 = p625 * 300;
    var v994 = p625 * 30;
    var v995 = v993 / 2;
    var v996 = v994 / 2;
    if (p627) {
      var v997 = p625 * 145;
      var v998 = p625 * 450;
      v988.width = v997;
      v988.height = v998;
      v989.rotate(Math.PI / 2);
      v989.save();
      v989.globalAlpha = 0.5;
      f86(v989, p625 * 100, p625 * -110, v993, v994, v992);
      f88(v989, p626[0]);
      v989.translate(p625 * 178, p625 * -98);
      f86(v989, -v995, -v996 - p625 * 6, p625 * 100, p625 * 100, v992);
      f88(v989, p626[0]);
      v989.translate(p625 * -50, p625 * 5);
      f86(v989, p625 * 220, p625 * -15, p625 * 90, p625 * 90, v992);
      f88(v989, p626[0]);
      v989.restore();
      v989.save();
      v989.globalAlpha = 1;
      v989.translate(p625 * 250, p625 * -63);
      f86(v989, -v995 - p625 * 20, -v996, v993, v994, v992);
      f88(v989, p626[1], p626[2], 4);
      v989.translate(p625 * -70, p625 * -40);
      f86(v989, -v995 - p625 * 20, -v996, p625 * 100, p625 * 100, v992);
      f88(v989, p626[3], p626[4], 4);
      v989.translate(p625 * -70, p625 * 15);
      f86(v989, p625 * 220, p625 * -22, p625 * 90, p625 * 90, v992);
      f88(v989, p626[3], p626[4], 4);
      f86(v989, p625 * 230, p625 * -12, p625 * 55, p625 * 55, v992);
      f88(v989, p626[5]);
      v989.translate(p625 * -70, 0);
      f86(v989, p625 * -15, p625 * -2, p625 * 60, p625 * 60, v992);
      f88(v989, p626[5]);
      v989.restore();
    } else {
      v988.width = v997;
      v988.height = v998;
      v989.save();
      v989.globalAlpha = 0.5;
      v989.translate(v990, v991 + p625 * 10);
      f86(v989, -v995, -v996, v993, v994, v992);
      f88(v989, p626[0]);
      v989.translate(p625 * -65, p625 * -25);
      f86(v989, -v995, -v996 - p625 * 6, p625 * 100, p625 * 100, p625 * 15);
      f88(v989, p626[0]);
      v989.translate(p625 * -35, p625 * -5);
      f86(v989, p625 * 220, p625 * -15, p625 * 90, p625 * 90, p625 * 15);
      f88(v989, p626[0]);
      v989.restore();
      v989.save();
      v989.globalAlpha = 1;
      v989.translate(p625 * 240, p625 * 70);
      f86(v989, -v995, -v996, v993, v994, v992);
      f88(v989, p626[1], p626[2], 4);
      v989.translate(p625 * -60, p625 * -40);
      f86(v989, -v995 - p625 * 20, -v996, p625 * 100, p625 * 100, p625 * 15);
      f88(v989, p626[3], p626[4], 4);
      v989.translate(p625 * -55, p625 * 10);
      f86(v989, p625 * 220, p625 * -22, p625 * 90, p625 * 90, p625 * 15);
      f88(v989, p626[3], p626[4], 4);
      f86(v989, p625 * 240, p625 * -12, p625 * 55, p625 * 55, p625 * 12);
      f88(v989, p626[5]);
      v989.translate(p625 * 45, p625 * 0);
      f86(v989, p625 * -145, p625 * -2, p625 * 60, p625 * 60, p625 * 12);
      f88(v989, p626[5]);
      v989.restore();
    }
    return v988;
  }
  function f131(p628, p629) {
    var v999 = document.createElement("canvas");
    var v1000 = v999.getContext("2d");
    var v1001 = Math.max(p629.width, p628.width);
    var v1002 = Math.max(p629.height, p628.height);
    v999.width = v1001;
    v999.height = v1002;
    v1000.drawImage(p628, (v1001 - p628.width) / 2, (v1002 - p628.height) / 2);
    v1000.drawImage(p629, (v1001 - p629.width) / 2, (v1002 - p629.height) / 2);
    return v999;
  }
  function f132(p630, p631, p632) {
    var v1003 = document.createElement("canvas");
    var v1004 = v1003.getContext("2d");
    var v1005 = p630 * 105;
    var v1006 = p630 * 125;
    var v1007 = p630 * 4;
    var v1008 = p630 * 10;
    var v1009 = p630 * 5;
    var v1010 = p630 * 10;
    var v1011 = p630 * 110;
    var v1012 = v1010 / 2;
    var v1013 = v1011 / 2;
    v1003.width = v1005;
    v1003.height = v1006;
    v1004.save();
    v1004.globalAlpha = p631 ? 0.5 : 1;
    v1004.translate(v1005 / 2 + p630 * 8, v1006 / 2 + v1009);
    f86(v1004, -v1012, -v1013, v1010, v1011, v1008);
    f88(v1004, p631 ? p632[0] : p632[1]);
    v1004.translate(p630 * -130 + v1009, p630 * -128 + v1009);
    v1004.beginPath();
    v1004.bezierCurveTo(p630 * 159, p630 * 93, p630 * 156, p630 * 99, p630 * 154, p630 * 102);
    v1004.bezierCurveTo(p630 * 128, p630 * 92, p630 * 90, p630 * 93, p630 * 72, p630 * 96);
    v1004.bezierCurveTo(p630 * 68, p630 * 84, p630 * 143, p630 * 73, p630 * 162, p630 * 86);
    v1004.closePath();
    f88(v1004, p632[2]);
    v1004.restore();
    v1004.translate(v1005 / 2 + 8, v1006 / 2);
    v1004.globalAlpha = 1;
    f86(v1004, -v1012, -v1013, v1010, v1011, v1008);
    f88(v1004, p632[3], p632[4], v1007);
    v1004.translate(p630 * -130, p630 * -125);
    v1004.beginPath();
    v1004.bezierCurveTo(p630 * 159, p630 * 93, p630 * 156, p630 * 99, p630 * 154, p630 * 102);
    v1004.bezierCurveTo(p630 * 128, p630 * 92, p630 * 90, p630 * 93, p630 * 72, p630 * 96);
    v1004.bezierCurveTo(p630 * 68, p630 * 84, p630 * 143, p630 * 73, p630 * 162, p630 * 86);
    v1004.closePath();
    f88(v1004, p632[5], p632[6], v1007);
    return v1003;
  }
  function f133(p633, p634, p635) {
    var v1014 = document.createElement("canvas");
    var v1015 = v1014.getContext("2d");
    var v1016 = p633 * 370;
    var v1017 = p633 * 370;
    var v1018 = v1016 / 2;
    var v1019 = v1017 / 2;
    v1014.width = v1016;
    v1014.height = v1017;
    var v1020 = p633 * 180;
    v1015.globalAlpha = 0.2;
    f92(v1015, v1018, v1019, v1020);
    f88(v1015, p635[0]);
    return v1014;
  }
  function f134(p636, p637, p638, p639) {
    var v1021 = document.createElement("canvas");
    var v1022 = v1021.getContext("2d");
    v1021.width = p636 * 121;
    v1021.height = p636 * 130;
    v1022.translate(0, p636 * 20);
    if (p638 == 1) {
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 6, p636 * 23);
      v1022.bezierCurveTo(p636 * 6, p636 * 46, p636 * 6, p636 * 46, p636 * 6, p636 * 69);
      v1022.bezierCurveTo(p636 * 21, p636 * 69, p636 * 21, p636 * 69, p636 * 36, p636 * 69);
      v1022.bezierCurveTo(p636 * 45.5, p636 * 78.5, p636 * 45.5, p636 * 78.5, p636 * 55, p636 * 88);
      v1022.bezierCurveTo(p636 * 55.5, p636 * 45.5, p636 * 55.5, p636 * 45.5, p636 * 56, p636 * 3);
      v1022.bezierCurveTo(p636 * 47, p636 * 14, p636 * 47, p636 * 14, p636 * 38, p636 * 25);
      v1022.bezierCurveTo(p636 * 23, p636 * 25, p636 * 23, p636 * 25, p636 * 6, p636 * 23);
      v1022.closePath();
      f88(v1022, undefined, p637[3], p636 * 13);
    }
    v1022.beginPath();
    v1022.lineCap = "round";
    v1022.lineJoin = "round";
    v1022.moveTo(p636 * 6, p636 * 23);
    v1022.bezierCurveTo(p636 * 6, p636 * 46, p636 * 6, p636 * 46, p636 * 6, p636 * 69);
    v1022.bezierCurveTo(p636 * 21, p636 * 69, p636 * 21, p636 * 69, p636 * 36, p636 * 69);
    v1022.bezierCurveTo(p636 * 45.5, p636 * 78.5, p636 * 45.5, p636 * 78.5, p636 * 55, p636 * 88);
    v1022.bezierCurveTo(p636 * 55.5, p636 * 45.5, p636 * 55.5, p636 * 45.5, p636 * 56, p636 * 3);
    v1022.bezierCurveTo(p636 * 47, p636 * 14, p636 * 47, p636 * 14, p636 * 38, p636 * 25);
    v1022.bezierCurveTo(p636 * 23, p636 * 25, p636 * 23, p636 * 25, p636 * 6, p636 * 23);
    v1022.closePath();
    f88(v1022, p637[1], p637[2], p636 * 4);
    if (p639 == 1) {
      v1022.translate(0, p636 * 5);
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 67, p636 * 30);
      v1022.bezierCurveTo(p636 * 73, p636 * 47, p636 * 69, p636 * 45, p636 * 67, p636 * 58);
      f88(v1022, vVVUndefined5, p637[0], p636 * 10);
      v1022.translate(3, p636 * 0);
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 70, p636 * 17);
      v1022.bezierCurveTo(p636 * 83, p636 * 45, p636 * 76, p636 * 55, p636 * 70, p636 * 69);
      f88(v1022, undefined, p637[0], p636 * 10);
      v1022.translate(3, p636 * 0);
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 76, p636 * 8);
      v1022.bezierCurveTo(p636 * 88, p636 * 31, p636 * 89, p636 * 55, p636 * 76, p636 * 79);
      f88(v1022, vVVVVUndefined583, p637[0], p636 * 10);
      if (p638 == 1) {
        v1022.translate(p636 * -6, p636 * -5);
        v1022.beginPath();
        v1022.lineCap = "round";
        v1022.lineJoin = "round";
        v1022.moveTo(p636 * 67, p636 * 30);
        v1022.bezierCurveTo(p636 * 73, p636 * 47, p636 * 69, p636 * 45, p636 * 67, p636 * 58);
        f88(v1022, vVVVUndefined142, p637[3], p636 * 18);
        v1022.translate(3, p636 * 0);
        v1022.beginPath();
        v1022.lineCap = "round";
        v1022.lineJoin = "round";
        v1022.moveTo(p636 * 70, p636 * 17);
        v1022.bezierCurveTo(p636 * 83, p636 * 45, p636 * 76, p636 * 55, p636 * 70, p636 * 69);
        f88(v1022, undefined, p637[3], p636 * 18);
        v1022.translate(3, p636 * 0);
        v1022.beginPath();
        v1022.lineCap = "round";
        v1022.lineJoin = "round";
        v1022.moveTo(p636 * 76, p636 * 8);
        v1022.bezierCurveTo(p636 * 88, p636 * 31, p636 * 89, p636 * 55, p636 * 76, p636 * 79);
        f88(v1022, vVVUndefined14, p637[3], p636 * 18);
        v1022.translate(-6, p636 * 0);
      } else {
        v1022.translate(p636 * -6, p636 * -5);
      }
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 67, p636 * 30);
      v1022.bezierCurveTo(p636 * 73, p636 * 47, p636 * 69, p636 * 45, p636 * 67, p636 * 58);
      f88(v1022, vVVVVVUndefined583, p637[2], p636 * 10);
      v1022.translate(3, p636 * 0);
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 70, p636 * 17);
      v1022.bezierCurveTo(p636 * 83, p636 * 45, p636 * 76, p636 * 55, p636 * 70, p636 * 69);
      f88(v1022, undefined, p637[2], p636 * 10);
      v1022.translate(3, p636 * 0);
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 76, p636 * 8);
      v1022.bezierCurveTo(p636 * 88, p636 * 31, p636 * 89, p636 * 55, p636 * 76, p636 * 79);
      f88(v1022, undefined, p637[2], p636 * 10);
    } else {
      if (p638 == 1) {
        v1022.beginPath();
        v1022.lineCap = "round";
        v1022.lineJoin = "round";
        v1022.moveTo(p636 * 108, p636 * 27);
        v1022.bezierCurveTo(p636 * 94, p636 * 45.5, p636 * 94, p636 * 45.5, p636 * 80, p636 * 64);
        v1022.closePath();
        f88(v1022, vVVVVVVUndefined142, p637[3], p636 * 18);
        v1022.beginPath();
        v1022.lineCap = "round";
        v1022.lineJoin = "round";
        v1022.moveTo(p636 * 79, p636 * 30);
        v1022.bezierCurveTo(p636 * 93, p636 * 47, p636 * 93, p636 * 47, p636 * 107, p636 * 64);
        v1022.closePath();
        f88(v1022, vVVVVVVUndefined142, p637[3], p636 * 18);
      } else {
        v1022.translate(0, p636 * -5);
        v1022.beginPath();
        v1022.lineCap = "round";
        v1022.lineJoin = "round";
        v1022.moveTo(p636 * 108, p636 * 27);
        v1022.bezierCurveTo(p636 * 94, p636 * 45.5, p636 * 94, p636 * 45.5, p636 * 80, p636 * 64);
        v1022.closePath();
        f88(v1022, undefined, p637[0], p636 * 7);
        v1022.beginPath();
        v1022.lineCap = "round";
        v1022.lineJoin = "round";
        v1022.moveTo(p636 * 79, p636 * 30);
        v1022.bezierCurveTo(p636 * 93, p636 * 47, p636 * 93, p636 * 47, p636 * 107, p636 * 64);
        v1022.closePath();
        f88(v1022, vVVVVUndefined143, p637[0], p636 * 7);
        v1022.translate(0, p636 * 5);
      }
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 108, p636 * 27);
      v1022.bezierCurveTo(p636 * 94, p636 * 45.5, p636 * 94, p636 * 45.5, p636 * 80, p636 * 64);
      v1022.closePath();
      f88(v1022, vVVVVUndefined1422, p637[2], p636 * 7);
      v1022.beginPath();
      v1022.lineCap = "round";
      v1022.lineJoin = "round";
      v1022.moveTo(p636 * 79, p636 * 30);
      v1022.bezierCurveTo(p636 * 93, p636 * 47, p636 * 93, p636 * 47, p636 * 107, p636 * 64);
      v1022.closePath();
      f88(v1022, vVVVUndefined142, p637[2], p636 * 7);
    }
    return v1021;
  }
  function f135(p640, p641, p642) {
    var v1023 = document.createElement("canvas");
    var v1024 = v1023.getContext("2d");
    v1023.width = p640 * 290;
    v1023.height = p640 * 525;
    v1024.globalAlpha = p641 ? 0.5 : 1;
    v1024.translate(p640 * 20, p640 * 20);
    v1024.beginPath();
    v1024.lineCap = "round";
    v1024.lineJoin = "round";
    v1024.moveTo(p640 * 111, p640 * 351);
    v1024.bezierCurveTo(p640 * 129, p640 * 218, p640 * 129, p640 * 218, p640 * 147, p640 * 85);
    v1024.bezierCurveTo(p640 * 167, p640 * 65.5, p640 * 167, p640 * 65.5, p640 * 187, p640 * 46);
    v1024.bezierCurveTo(p640 * 201.5, p640 * 70.5, p640 * 201.5, p640 * 70.5, p640 * 216, p640 * 95);
    v1024.bezierCurveTo(p640 * 194.5, p640 * 227.5, p640 * 194.5, p640 * 227.5, p640 * 173, p640 * 360);
    v1024.closePath();
    f88(v1024, p642[0]);
    v1024.save();
    v1024.translate(p640 * 131, p640 * 425.5);
    v1024.rotate(0.16);
    f86(v1024, p640 * -14, p640 * -56.5, p640 * 28, p640 * 113, p640 * 8);
    v1024.restore();
    f88(v1024, p642[0]);
    f92(v1024, p640 * 122, p640 * 480, p640 * 18.439088914585774);
    f88(v1024, p642[0]);
    v1024.beginPath();
    v1024.lineCap = "round";
    v1024.lineJoin = "round";
    v1024.moveTo(p640 * 79, p640 * 371);
    v1024.bezierCurveTo(p640 * 131, p640 * 373, p640 * 145, p640 * 378, p640 * 197, p640 * 388);
    v1024.bezierCurveTo(p640 * 205, p640 * 382.5, p640 * 205, p640 * 382.5, p640 * 213, p640 * 377);
    v1024.bezierCurveTo(p640 * 167, p640 * 352, p640 * 117, p640 * 345, p640 * 69, p640 * 355);
    v1024.closePath();
    f88(v1024, p642[0]);
    v1024.globalAlpha = 1;
    v1024.translate(p640 * -20, p640 * -20);
    v1024.beginPath();
    v1024.lineCap = "round";
    v1024.lineJoin = "round";
    v1024.moveTo(p640 * 111, p640 * 351);
    v1024.bezierCurveTo(p640 * 129, p640 * 218, p640 * 129, p640 * 218, p640 * 147, p640 * 85);
    v1024.bezierCurveTo(p640 * 167, p640 * 65.5, p640 * 167, p640 * 65.5, p640 * 187, p640 * 46);
    v1024.bezierCurveTo(p640 * 201.5, p640 * 70.5, p640 * 201.5, p640 * 70.5, p640 * 216, p640 * 95);
    v1024.bezierCurveTo(p640 * 194.5, p640 * 227.5, p640 * 194.5, p640 * 227.5, p640 * 173, p640 * 360);
    v1024.closePath();
    f88(v1024, p642[1], p642[2], p640 * 12.5);
    v1024.save();
    v1024.translate(p640 * 131, p640 * 425.5);
    v1024.rotate(0.16);
    f86(v1024, p640 * -14, p640 * -56.5, p640 * 28, p640 * 113, p640 * 8);
    v1024.restore();
    f88(v1024, p642[4], p642[5], p640 * 12.5);
    f92(v1024, p640 * 122, p640 * 480, p640 * 18.439088914585774);
    f88(v1024, p642[4], p642[5], p640 * 12.5);
    v1024.beginPath();
    v1024.lineCap = "round";
    v1024.lineJoin = "round";
    v1024.moveTo(p640 * 79, p640 * 371);
    v1024.bezierCurveTo(p640 * 131, p640 * 373, p640 * 145, p640 * 378, p640 * 197, p640 * 388);
    v1024.bezierCurveTo(p640 * 205, p640 * 382.5, p640 * 205, p640 * 382.5, p640 * 213, p640 * 377);
    v1024.bezierCurveTo(p640 * 167, p640 * 352, p640 * 117, p640 * 345, p640 * 69, p640 * 355);
    v1024.closePath();
    f88(v1024, p642[4], p642[5], p640 * 12.5);
    v1024.beginPath();
    v1024.lineCap = "round";
    v1024.lineJoin = "round";
    v1024.moveTo(p640 * 128, p640 * 345);
    v1024.bezierCurveTo(p640 * 142, p640 * 345, p640 * 147, p640 * 346, p640 * 158, p640 * 349);
    v1024.bezierCurveTo(p640 * 177.5, p640 * 224.5, p640 * 177.5, p640 * 224.5, p640 * 197, p640 * 100);
    v1024.bezierCurveTo(p640 * 190.5, p640 * 84.5, p640 * 190.5, p640 * 84.5, p640 * 184, p640 * 69);
    v1024.bezierCurveTo(p640 * 173.5, p640 * 82, p640 * 173.5, p640 * 82, p640 * 163, p640 * 95);
    v1024.closePath();
    f88(v1024, p642[3]);
    return v1023;
  }
  function f136(p643, p644, p645) {
    var v1025 = document.createElement("canvas");
    var v1026 = v1025.getContext("2d");
    v1025.width = p643 * 170;
    v1025.height = p643 * 469;
    v1026.globalAlpha = p644 ? 0.5 : 1;
    v1026.translate(p643 * 20, p643 * 20);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 88, p643 * 30);
    v1026.bezierCurveTo(p643 * 96, p643 * 49.5, p643 * 96, p643 * 49.5, p643 * 104, p643 * 69);
    v1026.bezierCurveTo(p643 * 105.5, p643 * 41.5, p643 * 105.5, p643 * 41.5, p643 * 107, p643 * 14);
    v1026.bezierCurveTo(p643 * 114, p643 * 9.5, p643 * 114, p643 * 9.5, p643 * 121, p643 * 5);
    v1026.bezierCurveTo(p643 * 135.5, p643 * 27.5, p643 * 135.5, p643 * 27.5, p643 * 150, p643 * 50);
    v1026.bezierCurveTo(p643 * 110.5, p643 * 286, p643 * 110.5, p643 * 286, p643 * 103, p643 * 331);
    v1026.bezierCurveTo(p643 * 69.5, p643 * 325, p643 * 69.5, p643 * 325, p643 * 36, p643 * 319);
    v1026.bezierCurveTo(p643 * 56.5, p643 * 180, p643 * 56.5, p643 * 180, p643 * 77, p643 * 41);
    v1026.closePath();
    f88(v1026, p645[0]);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 118, p643 * 31);
    v1026.bezierCurveTo(p643 * 125, p643 * 43, p643 * 125, p643 * 43, p643 * 132, p643 * 55);
    v1026.bezierCurveTo(p643 * 109.5, p643 * 185.5, p643 * 109.5, p643 * 185.5, p643 * 87, p643 * 316);
    v1026.bezierCurveTo(p643 * 72, p643 * 313.5, p643 * 72, p643 * 313.5, p643 * 57, p643 * 311);
    v1026.bezierCurveTo(p643 * 76.5, p643 * 181, p643 * 76.5, p643 * 181, p643 * 96, p643 * 51);
    v1026.closePath();
    f88(v1026, p645[0]);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 56, p643 * 328);
    v1026.bezierCurveTo(p643 * 47, p643 * 385.5, p643 * 47, p643 * 385.5, p643 * 38, p643 * 443);
    v1026.bezierCurveTo(p643 * 52, p643 * 446, p643 * 52, p643 * 446, p643 * 66, p643 * 449);
    v1026.bezierCurveTo(p643 * 76.5, p643 * 388.5, p643 * 76.5, p643 * 388.5, p643 * 87, p643 * 328);
    v1026.closePath();
    f88(v1026, p645[0]);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 74, p643 * 302);
    v1026.bezierCurveTo(p643 * 104, p643 * 316.5, p643 * 104, p643 * 316.5, p643 * 134, p643 * 331);
    v1026.bezierCurveTo(p643 * 133, p643 * 341, p643 * 133, p643 * 341, p643 * 132, p643 * 351);
    v1026.bezierCurveTo(p643 * 69.5, p643 * 342, p643 * 69.5, p643 * 342, p643 * 7, p643 * 333);
    v1026.bezierCurveTo(p643 * 8, p643 * 323, p643 * 8, p643 * 323, p643 * 9, p643 * 313);
    v1026.closePath();
    f88(v1026, p645[0]);
    v1026.save();
    v1026.translate(p643 * 51.5, p643 * 440.5);
    v1026.rotate(0.2);
    f86(v1026, p643 * -20.5, p643 * -18.5, p643 * 41, p643 * 37, p643 * 10);
    v1026.restore();
    f88(v1026, p645[0]);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 73, p643 * 316);
    v1026.bezierCurveTo(p643 * 90, p643 * 324.5, p643 * 90, p643 * 324.5, p643 * 107, p643 * 333);
    v1026.bezierCurveTo(p643 * 70, p643 * 327.5, p643 * 70, p643 * 327.5, p643 * 33, p643 * 322);
    v1026.closePath();
    f88(v1026, p645[0]);
    v1026.globalAlpha = 1;
    v1026.translate(p643 * -20, p643 * -20);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 88, p643 * 30);
    v1026.bezierCurveTo(p643 * 96, p643 * 49.5, p643 * 96, p643 * 49.5, p643 * 104, p643 * 69);
    v1026.bezierCurveTo(p643 * 105.5, p643 * 41.5, p643 * 105.5, p643 * 41.5, p643 * 107, p643 * 14);
    v1026.bezierCurveTo(p643 * 114, p643 * 9.5, p643 * 114, p643 * 9.5, p643 * 121, p643 * 5);
    v1026.bezierCurveTo(p643 * 135.5, p643 * 27.5, p643 * 135.5, p643 * 27.5, p643 * 150, p643 * 50);
    v1026.bezierCurveTo(p643 * 110.5, p643 * 286, p643 * 110.5, p643 * 286, p643 * 103, p643 * 331);
    v1026.bezierCurveTo(p643 * 69.5, p643 * 325, p643 * 69.5, p643 * 325, p643 * 36, p643 * 319);
    v1026.bezierCurveTo(p643 * 56.5, p643 * 180, p643 * 56.5, p643 * 180, p643 * 77, p643 * 41);
    v1026.closePath();
    f88(v1026, p645[1], p645[2], p643 * 7);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 118, p643 * 31);
    v1026.bezierCurveTo(p643 * 125, p643 * 43, p643 * 125, p643 * 43, p643 * 132, p643 * 55);
    v1026.bezierCurveTo(p643 * 109.5, p643 * 185.5, p643 * 109.5, p643 * 185.5, p643 * 87, p643 * 316);
    v1026.bezierCurveTo(p643 * 72, p643 * 313.5, p643 * 72, p643 * 313.5, p643 * 57, p643 * 311);
    v1026.bezierCurveTo(p643 * 76.5, p643 * 181, p643 * 76.5, p643 * 181, p643 * 96, p643 * 51);
    v1026.closePath();
    f88(v1026, p645[3]);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 88, p643 * 30);
    v1026.bezierCurveTo(p643 * 96, p643 * 49.5, p643 * 96, p643 * 49.5, p643 * 104, p643 * 69);
    v1026.bezierCurveTo(p643 * 105.5, p643 * 41.5, p643 * 105.5, p643 * 41.5, p643 * 107, p643 * 14);
    v1026.bezierCurveTo(p643 * 114, p643 * 9.5, p643 * 114, p643 * 9.5, p643 * 121, p643 * 5);
    v1026.bezierCurveTo(p643 * 135.5, p643 * 27.5, p643 * 135.5, p643 * 27.5, p643 * 150, p643 * 50);
    v1026.bezierCurveTo(p643 * 110.5, p643 * 286, p643 * 110.5, p643 * 286, p643 * 103, p643 * 331);
    v1026.bezierCurveTo(p643 * 69.5, p643 * 325, p643 * 69.5, p643 * 325, p643 * 36, p643 * 319);
    v1026.bezierCurveTo(p643 * 56.5, p643 * 180, p643 * 56.5, p643 * 180, p643 * 77, p643 * 41);
    v1026.closePath();
    f88(v1026, vVVVUndefined142, p645[2], p643 * 7);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 56, p643 * 328);
    v1026.bezierCurveTo(p643 * 47, p643 * 385.5, p643 * 47, p643 * 385.5, p643 * 38, p643 * 443);
    v1026.bezierCurveTo(p643 * 52, p643 * 446, p643 * 52, p643 * 446, p643 * 66, p643 * 449);
    v1026.bezierCurveTo(p643 * 76.5, p643 * 388.5, p643 * 76.5, p643 * 388.5, p643 * 87, p643 * 328);
    v1026.closePath();
    f88(v1026, p645[4], p645[5], p643 * 7);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 74, p643 * 302);
    v1026.bezierCurveTo(p643 * 104, p643 * 316.5, p643 * 104, p643 * 316.5, p643 * 134, p643 * 331);
    v1026.bezierCurveTo(p643 * 133, p643 * 341, p643 * 133, p643 * 341, p643 * 132, p643 * 351);
    v1026.bezierCurveTo(p643 * 69.5, p643 * 342, p643 * 69.5, p643 * 342, p643 * 7, p643 * 333);
    v1026.bezierCurveTo(p643 * 8, p643 * 323, p643 * 8, p643 * 323, p643 * 9, p643 * 313);
    v1026.closePath();
    f88(v1026, p645[4], p645[5], p643 * 7);
    v1026.save();
    v1026.translate(p643 * 51.5, p643 * 440.5);
    v1026.rotate(0.2);
    f86(v1026, p643 * -20.5, p643 * -18.5, p643 * 41, p643 * 37, p643 * 10);
    v1026.restore();
    f88(v1026, p645[4], p645[5], p643 * 7);
    v1026.beginPath();
    v1026.lineCap = "round";
    v1026.lineJoin = "round";
    v1026.moveTo(p643 * 73, p643 * 316);
    v1026.bezierCurveTo(p643 * 90, p643 * 324.5, p643 * 90, p643 * 324.5, p643 * 107, p643 * 333);
    v1026.bezierCurveTo(p643 * 70, p643 * 327.5, p643 * 70, p643 * 327.5, p643 * 33, p643 * 322);
    v1026.closePath();
    f88(v1026, p645[6]);
    return v1025;
  }
  function f137(p646, p647, p648, p649) {
    var v1027 = document.createElement("canvas");
    var v1028 = v1027.getContext("2d");
    var v1029 = p646 * 210;
    var v1030 = p646 * 205;
    var v1031 = p646 * 30;
    var v1032 = p646 * 20;
    var v1033 = p646 * 200;
    var v1034 = p646 * 180;
    var v1035 = v1033 / 2;
    var v1036 = v1034 / 2;
    var v1037 = 4;
    v1027.width = v1029;
    v1027.height = v1030;
    v1027.width = p646 * 419;
    v1027.height = p646 * 412;
    if (p649 == 1) {
      v1028.save();
      v1028.translate(p646 * 10, p646 * 0);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 117.99996948242188, p646 * 216.40621948242188);
      v1028.bezierCurveTo(p646 * 86.99996948242188, p646 * 221.40621948242188, p646 * 74.99996948242188, p646 * 217.40621948242188, p646 * 60.999969482421875, p646 * 205.40621948242188);
      f88(v1028, undefined, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 114.99996948242188, p646 * 227.40621948242188);
      v1028.bezierCurveTo(p646 * 90.99996948242188, p646 * 233.40621948242188, p646 * 66.99996948242188, p646 * 228.40621948242188, p646 * 43.999969482421875, p646 * 225.40621948242188);
      f88(v1028, undefined, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 110.99996948242188, p646 * 236.40621948242188);
      v1028.bezierCurveTo(p646 * 94.99996948242188, p646 * 244.40621948242188, p646 * 79.99996948242188, p646 * 249.40621948242188, p646 * 60.999969482421875, p646 * 249.40621948242188);
      f88(v1028, undefined, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 111.99996948242188, p646 * 206.29513549804688);
      v1028.bezierCurveTo(p646 * 91.99996948242188, p646 * 206.29513549804688, p646 * 87.99996948242188, p646 * 201.29513549804688, p646 * 79.99996948242188, p646 * 192.29513549804688);
      f88(v1028, undefined, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 109.99996948242188, p646 * 249.18402099609375);
      v1028.bezierCurveTo(p646 * 97.99996948242188, p646 * 263.18402099609375, p646 * 85.99996948242188, p646 * 271.18402099609375, p646 * 65.99996948242188, p646 * 277.18402099609375);
      f88(v1028, vVVVUndefined113, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 105.99996948242188, p646 * 192.18402099609375);
      v1028.bezierCurveTo(p646 * 99.49996948242188, p646 * 197.68402099609375, p646 * 99.49996948242188, p646 * 197.68402099609375, p646 * 92.99996948242188, p646 * 203.18402099609375);
      v1028.bezierCurveTo(p646 * 95.99996948242188, p646 * 213.18402099609375, p646 * 95.99996948242188, p646 * 215.18402099609375, p646 * 89.99996948242188, p646 * 219.18402099609375);
      v1028.bezierCurveTo(p646 * 91.99996948242188, p646 * 223.18402099609375, p646 * 91.99996948242188, p646 * 226.18402099609375, p646 * 87.99996948242188, p646 * 230.18402099609375);
      v1028.bezierCurveTo(p646 * 89.99996948242188, p646 * 234.18402099609375, p646 * 91.99996948242188, p646 * 237.18402099609375, p646 * 90.99996948242188, p646 * 244.18402099609375);
      v1028.bezierCurveTo(p646 * 96.99996948242188, p646 * 252.18402099609375, p646 * 96.99996948242188, p646 * 256.18402099609375, p646 * 95.99996948242188, p646 * 262.18402099609375);
      v1028.bezierCurveTo(p646 * 106.49996948242188, p646 * 264.18402099609375, p646 * 106.49996948242188, p646 * 264.18402099609375, p646 * 116.99996948242188, p646 * 266.18402099609375);
      f88(v1028, vVVVVUndefined582, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 104.99996948242188, p646 * 183.29513549804688);
      v1028.bezierCurveTo(p646 * 99.99996948242188, p646 * 193.29513549804688, p646 * 93.99996948242188, p646 * 195.29513549804688, p646 * 89.99996948242188, p646 * 201.29513549804688);
      v1028.bezierCurveTo(p646 * 86.99996948242188, p646 * 212.29513549804688, p646 * 85.99996948242188, p646 * 214.29513549804688, p646 * 81.99996948242188, p646 * 215.29513549804688);
      v1028.bezierCurveTo(p646 * 83.99996948242188, p646 * 223.29513549804688, p646 * 83.99996948242188, p646 * 227.29513549804688, p646 * 79.99996948242188, p646 * 230.29513549804688);
      v1028.bezierCurveTo(p646 * 83.99996948242188, p646 * 235.29513549804688, p646 * 84.99996948242188, p646 * 240.29513549804688, p646 * 79.99996948242188, p646 * 246.29513549804688);
      v1028.bezierCurveTo(p646 * 86.99996948242188, p646 * 251.29513549804688, p646 * 91.99996948242188, p646 * 256.2951354980469, p646 * 89.99996948242188, p646 * 266.2951354980469);
      v1028.bezierCurveTo(p646 * 102.99996948242188, p646 * 269.2951354980469, p646 * 102.99996948242188, p646 * 269.2951354980469, p646 * 115.99996948242188, p646 * 272.2951354980469);
      f88(v1028, vVVUndefined11, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 107.99996948242188, p646 * 177.85067749023438);
      v1028.bezierCurveTo(p646 * 95.99996948242188, p646 * 187.35067749023438, p646 * 95.99996948242188, p646 * 187.35067749023438, p646 * 83.99996948242188, p646 * 196.85067749023438);
      v1028.bezierCurveTo(p646 * 82.99996948242188, p646 * 203.85067749023438, p646 * 80.99996948242188, p646 * 209.85067749023438, p646 * 72.99996948242188, p646 * 210.85067749023438);
      v1028.bezierCurveTo(p646 * 73.99996948242188, p646 * 220.85067749023438, p646 * 73.99996948242188, p646 * 221.85067749023438, p646 * 66.99996948242188, p646 * 227.85067749023438);
      v1028.bezierCurveTo(p646 * 71.99996948242188, p646 * 235.85067749023438, p646 * 73.99996948242188, p646 * 239.85067749023438, p646 * 71.99996948242188, p646 * 247.85067749023438);
      v1028.bezierCurveTo(p646 * 80.99996948242188, p646 * 257.8506774902344, p646 * 81.99996948242188, p646 * 263.8506774902344, p646 * 77.99996948242188, p646 * 271.8506774902344);
      v1028.bezierCurveTo(p646 * 95.49996948242188, p646 * 272.8506774902344, p646 * 95.49996948242188, p646 * 272.8506774902344, p646 * 112.99996948242188, p646 * 273.8506774902344);
      f88(v1028, vVVVVUndefined1422, p647[4], p646 * 3);
      v1028.restore();
    } else if (p649 == 2) {
      v1028.save();
      v1028.translate(p646 * 130, p646 * 35);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 170.99996948242188, p646 * 133.85067749023438);
      v1028.bezierCurveTo(p646 * 195.99996948242188, p646 * 129.85067749023438, p646 * 196.99996948242188, p646 * 111.85067749023438, p646 * 200.99996948242188, p646 * 88.85067749023438);
      f88(v1028, undefined, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 169.99996948242188, p646 * 143.85067749023438);
      v1028.bezierCurveTo(p646 * 189.99996948242188, p646 * 145.85067749023438, p646 * 207.99996948242188, p646 * 126.85067749023438, p646 * 222.99996948242188, p646 * 100.85067749023438);
      f88(v1028, vVVVVUndefined1422, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 170.99996948242188, p646 * 157.85067749023438);
      v1028.bezierCurveTo(p646 * 193.99996948242188, p646 * 160.85067749023438, p646 * 210.99996948242188, p646 * 151.85067749023438, p646 * 232.99996948242188, p646 * 139.85067749023438);
      f88(v1028, undefined, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 169.99996948242188, p646 * 168.85067749023438);
      v1028.bezierCurveTo(p646 * 192.99996948242188, p646 * 175.85067749023438, p646 * 203.99996948242188, p646 * 177.85067749023438, p646 * 245.99996948242188, p646 * 168.85067749023438);
      f88(v1028, undefined, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 167.99996948242188, p646 * 168.85067749023438);
      v1028.bezierCurveTo(p646 * 183.99996948242188, p646 * 189.85067749023438, p646 * 191.99996948242188, p646 * 193.85067749023438, p646 * 220.99996948242188, p646 * 196.85067749023438);
      f88(v1028, vVVVVVVUndefined142, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 176.99996948242188, p646 * 117.85067749023438);
      v1028.bezierCurveTo(p646 * 181.99996948242188, p646 * 120.85067749023438, p646 * 181.99996948242188, p646 * 120.85067749023438, p646 * 186.99996948242188, p646 * 123.85067749023438);
      v1028.bezierCurveTo(p646 * 183.99996948242188, p646 * 137.85067749023438, p646 * 185.99996948242188, p646 * 136.85067749023438, p646 * 190.99996948242188, p646 * 136.85067749023438);
      v1028.bezierCurveTo(p646 * 186.99996948242188, p646 * 147.85067749023438, p646 * 189.99996948242188, p646 * 152.85067749023438, p646 * 193.99996948242188, p646 * 155.85067749023438);
      v1028.bezierCurveTo(p646 * 187.99996948242188, p646 * 165.85067749023438, p646 * 190.99996948242188, p646 * 169.85067749023438, p646 * 190.99996948242188, p646 * 172.85067749023438);
      v1028.bezierCurveTo(p646 * 186.99996948242188, p646 * 183.85067749023438, p646 * 186.99996948242188, p646 * 185.85067749023438, p646 * 189.99996948242188, p646 * 188.85067749023438);
      v1028.bezierCurveTo(p646 * 182.49996948242188, p646 * 195.35067749023438, p646 * 182.49996948242188, p646 * 195.35067749023438, p646 * 174.99996948242188, p646 * 201.85067749023438);
      f88(v1028, vVVVVUndefined143, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 176.99996948242188, p646 * 112.18402099609375);
      v1028.bezierCurveTo(p646 * 183.99996948242188, p646 * 119.18402099609375, p646 * 186.99996948242188, p646 * 117.18402099609375, p646 * 192.99996948242188, p646 * 116.18402099609375);
      v1028.bezierCurveTo(p646 * 191.99996948242188, p646 * 126.18402099609375, p646 * 193.99996948242188, p646 * 130.18402099609375, p646 * 199.99996948242188, p646 * 130.18402099609375);
      v1028.bezierCurveTo(p646 * 194.99996948242188, p646 * 145.18402099609375, p646 * 197.99996948242188, p646 * 147.18402099609375, p646 * 201.99996948242188, p646 * 153.18402099609375);
      v1028.bezierCurveTo(p646 * 196.99996948242188, p646 * 164.18402099609375, p646 * 197.99996948242188, p646 * 169.18402099609375, p646 * 201.99996948242188, p646 * 174.18402099609375);
      v1028.bezierCurveTo(p646 * 194.99996948242188, p646 * 184.18402099609375, p646 * 196.99996948242188, p646 * 187.18402099609375, p646 * 200.99996948242188, p646 * 193.18402099609375);
      v1028.bezierCurveTo(p646 * 185.99996948242188, p646 * 195.18402099609375, p646 * 181.99996948242188, p646 * 201.18402099609375, p646 * 174.99996948242188, p646 * 210.18402099609375);
      f88(v1028, vVVVVVUndefined14, p647[4], p646 * 3);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 176.99996948242188, p646 * 101.29513549804688);
      v1028.bezierCurveTo(p646 * 181.99996948242188, p646 * 108.29513549804688, p646 * 189.99996948242188, p646 * 110.29513549804688, p646 * 195.99996948242188, p646 * 107.29513549804688);
      v1028.bezierCurveTo(p646 * 197.99996948242188, p646 * 121.29513549804688, p646 * 200.99996948242188, p646 * 122.29513549804688, p646 * 206.99996948242188, p646 * 122.29513549804688);
      v1028.bezierCurveTo(p646 * 201.99996948242188, p646 * 138.29513549804688, p646 * 204.99996948242188, p646 * 142.29513549804688, p646 * 211.99996948242188, p646 * 148.29513549804688);
      v1028.bezierCurveTo(p646 * 201.99996948242188, p646 * 156.29513549804688, p646 * 205.99996948242188, p646 * 167.29513549804688, p646 * 213.99996948242188, p646 * 173.29513549804688);
      v1028.bezierCurveTo(p646 * 204.99996948242188, p646 * 181.29513549804688, p646 * 204.99996948242188, p646 * 187.29513549804688, p646 * 205.99996948242188, p646 * 193.29513549804688);
      v1028.bezierCurveTo(p646 * 190.99996948242188, p646 * 198.29513549804688, p646 * 181.99996948242188, p646 * 205.29513549804688, p646 * 174.99996948242188, p646 * 214.29513549804688);
      f88(v1028, undefined, p647[4], p646 * 3);
      v1028.restore();
    }
    v1028.translate(v1027.width / 2, v1027.height / 2);
    if (!p649) {
      v1028.globalAlpha = 0.5;
      f86(v1028, -v1035, -v1036, v1033, v1034 + v1032, v1031);
      f88(v1028, p647[0]);
      if (p648) {
        v1028.rotate(Math.PI);
      }
      v1028.globalAlpha = 1;
      f86(v1028, -v1035, -v1036, v1033, v1034, v1031);
      f88(v1028, p647[1], p647[2], v1037);
      v1028.globalAlpha = 1;
      f86(v1028, p646 * 35 - v1035, p646 * 20 - v1036, v1033 - p646 * 50, v1034 - p646 * 50, v1031 - p646 * 10);
      f88(v1028, p647[3]);
    }
    if (p649 == 3) {
      v1028.translate(-v1027.width / 2, -v1027.height / 2);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 121, p646 * 190);
      v1028.bezierCurveTo(p646 * 129, p646 * 186, p646 * 137, p646 * 183, p646 * 135, p646 * 163);
      v1028.bezierCurveTo(p646 * 131, p646 * 135, p646 * 153, p646 * 127, p646 * 177, p646 * 124);
      v1028.bezierCurveTo(p646 * 198, p646 * 120, p646 * 208, p646 * 122, p646 * 226, p646 * 128);
      v1028.bezierCurveTo(p646 * 261, p646 * 112, p646 * 271, p646 * 126, p646 * 287, p646 * 147);
      v1028.bezierCurveTo(p646 * 310, p646 * 163, p646 * 304, p646 * 183, p646 * 283, p646 * 196);
      v1028.bezierCurveTo(p646 * 296, p646 * 249, p646 * 278, p646 * 262, p646 * 253, p646 * 263);
      v1028.bezierCurveTo(p646 * 210, p646 * 264, p646 * 188, p646 * 252, p646 * 177, p646 * 234);
      v1028.bezierCurveTo(p646 * 133, p646 * 242, p646 * 123, p646 * 241, p646 * 115, p646 * 225);
      v1028.bezierCurveTo(p646 * 109, p646 * 206, p646 * 115, p646 * 193, p646 * 121, p646 * 190);
      v1028.closePath();
      f88(v1028, p647[4]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 219, p646 * 144);
      v1028.bezierCurveTo(p646 * 251, p646 * 121, p646 * 277, p646 * 136, p646 * 276, p646 * 159);
      v1028.bezierCurveTo(p646 * 276, p646 * 176, p646 * 273, p646 * 191, p646 * 242, p646 * 193);
      v1028.bezierCurveTo(p646 * 226, p646 * 228, p646 * 155, p646 * 219, p646 * 150, p646 * 183);
      v1028.bezierCurveTo(p646 * 142, p646 * 144, p646 * 174, p646 * 127, p646 * 219, p646 * 144);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 123, p646 * 214);
      v1028.bezierCurveTo(p646 * 119, p646 * 198, p646 * 129, p646 * 189, p646 * 146, p646 * 194);
      v1028.bezierCurveTo(p646 * 158, p646 * 201, p646 * 165, p646 * 218, p646 * 147, p646 * 226);
      v1028.bezierCurveTo(p646 * 135, p646 * 230, p646 * 125, p646 * 222, p646 * 123, p646 * 214);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 257, p646 * 199);
      v1028.bezierCurveTo(p646 * 264, p646 * 199, p646 * 275, p646 * 213, p646 * 261, p646 * 220);
      v1028.bezierCurveTo(p646 * 246, p646 * 225, p646 * 235, p646 * 200, p646 * 257, p646 * 199);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.translate(p646 * -5, p646 * 55);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 186, p646 * 123);
      v1028.bezierCurveTo(p646 * 198, p646 * 115, p646 * 219, p646 * 110, p646 * 219, p646 * 123);
      v1028.bezierCurveTo(p646 * 216, p646 * 135, p646 * 171, p646 * 143, p646 * 186, p646 * 123);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.translate(p646 * 5, p646 * -55);
      v1028.translate(p646 * -5, p646 * 15);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 171, p646 * 241);
      v1028.bezierCurveTo(p646 * 189, p646 * 234, p646 * 200, p646 * 248, p646 * 189, p646 * 254);
      v1028.bezierCurveTo(p646 * 179, p646 * 260, p646 * 158, p646 * 246, p646 * 171, p646 * 241);
      v1028.closePath();
      f88(v1028, p647[5]);
    } else if (p649 == 4) {
      v1028.translate(-v1027.width / 2, -v1027.height / 2);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 30, p646 * 167);
      v1028.bezierCurveTo(p646 * 47, p646 * 144, p646 * 64, p646 * 140, p646 * 80, p646 * 147);
      v1028.bezierCurveTo(p646 * 95, p646 * 154, p646 * 95, p646 * 159, p646 * 100, p646 * 179);
      v1028.bezierCurveTo(p646 * 105, p646 * 202, p646 * 95, p646 * 218, p646 * 69, p646 * 218);
      v1028.bezierCurveTo(p646 * 48, p646 * 236, p646 * 26, p646 * 223, p646 * 28, p646 * 213);
      v1028.bezierCurveTo(p646 * 28, p646 * 205, p646 * 29, p646 * 199, p646 * 32, p646 * 195);
      v1028.bezierCurveTo(p646 * 21, p646 * 183, p646 * 27, p646 * 173, p646 * 30, p646 * 167);
      v1028.closePath();
      f88(v1028, p647[4]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 26, p646 * 145);
      v1028.bezierCurveTo(p646 * 32, p646 * 138, p646 * 37, p646 * 137, p646 * 40, p646 * 139);
      v1028.bezierCurveTo(p646 * 43, p646 * 140, p646 * 41, p646 * 150, p646 * 31, p646 * 159);
      v1028.bezierCurveTo(p646 * 23, p646 * 166, p646 * 17, p646 * 158, p646 * 26, p646 * 145);
      v1028.closePath();
      f88(v1028, p647[4]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 13, p646 * 193);
      v1028.bezierCurveTo(p646 * 21, p646 * 187, p646 * 30, p646 * 190, p646 * 20, p646 * 202);
      v1028.bezierCurveTo(p646 * 13, p646 * 208, p646 * 7, p646 * 202, p646 * 13, p646 * 193);
      v1028.closePath();
      f88(v1028, p647[4]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 121, p646 * 190);
      v1028.bezierCurveTo(p646 * 129, p646 * 186, p646 * 137, p646 * 183, p646 * 135, p646 * 163);
      v1028.bezierCurveTo(p646 * 131, p646 * 135, p646 * 153, p646 * 127, p646 * 177, p646 * 124);
      v1028.bezierCurveTo(p646 * 198, p646 * 120, p646 * 208, p646 * 122, p646 * 226, p646 * 128);
      v1028.bezierCurveTo(p646 * 261, p646 * 112, p646 * 271, p646 * 126, p646 * 287, p646 * 147);
      v1028.bezierCurveTo(p646 * 310, p646 * 163, p646 * 304, p646 * 183, p646 * 283, p646 * 196);
      v1028.bezierCurveTo(p646 * 296, p646 * 249, p646 * 278, p646 * 262, p646 * 253, p646 * 263);
      v1028.bezierCurveTo(p646 * 210, p646 * 264, p646 * 188, p646 * 252, p646 * 177, p646 * 234);
      v1028.bezierCurveTo(p646 * 133, p646 * 242, p646 * 123, p646 * 241, p646 * 115, p646 * 225);
      v1028.bezierCurveTo(p646 * 109, p646 * 206, p646 * 115, p646 * 193, p646 * 121, p646 * 190);
      v1028.closePath();
      f88(v1028, p647[4]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 335, p646 * 196);
      v1028.bezierCurveTo(p646 * 312, p646 * 208, p646 * 300, p646 * 185, p646 * 309, p646 * 167);
      v1028.bezierCurveTo(p646 * 314, p646 * 141, p646 * 339, p646 * 127, p646 * 359, p646 * 144);
      v1028.bezierCurveTo(p646 * 363, p646 * 148, p646 * 364, p646 * 150, p646 * 364, p646 * 150);
      v1028.bezierCurveTo(p646 * 392, p646 * 143, p646 * 396, p646 * 183, p646 * 378, p646 * 204);
      v1028.bezierCurveTo(p646 * 367, p646 * 215, p646 * 339, p646 * 208, p646 * 335, p646 * 196);
      v1028.closePath();
      f88(v1028, p647[4]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 349, p646 * 212);
      v1028.bezierCurveTo(p646 * 339, p646 * 216, p646 * 334, p646 * 208, p646 * 341, p646 * 203);
      v1028.bezierCurveTo(p646 * 353, p646 * 198, p646 * 361, p646 * 205, p646 * 349, p646 * 212);
      v1028.closePath();
      f88(v1028, p647[4]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 46, p646 * 165);
      v1028.bezierCurveTo(p646 * 55, p646 * 148, p646 * 85, p646 * 157, p646 * 83, p646 * 175);
      v1028.bezierCurveTo(p646 * 99, p646 * 185, p646 * 89, p646 * 212, p646 * 66, p646 * 204);
      v1028.bezierCurveTo(p646 * 55, p646 * 212, p646 * 43, p646 * 212, p646 * 41, p646 * 202);
      v1028.bezierCurveTo(p646 * 39, p646 * 194, p646 * 42, p646 * 187, p646 * 49, p646 * 185);
      v1028.bezierCurveTo(p646 * 44, p646 * 175, p646 * 45, p646 * 172, p646 * 46, p646 * 165);
      v1028.closePath();
      f88(v1028, p647[4]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 219, p646 * 144);
      v1028.bezierCurveTo(p646 * 251, p646 * 121, p646 * 277, p646 * 136, p646 * 276, p646 * 159);
      v1028.bezierCurveTo(p646 * 276, p646 * 176, p646 * 273, p646 * 191, p646 * 242, p646 * 193);
      v1028.bezierCurveTo(p646 * 226, p646 * 228, p646 * 155, p646 * 219, p646 * 150, p646 * 183);
      v1028.bezierCurveTo(p646 * 142, p646 * 144, p646 * 174, p646 * 127, p646 * 219, p646 * 144);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 123, p646 * 214);
      v1028.bezierCurveTo(p646 * 119, p646 * 198, p646 * 129, p646 * 189, p646 * 146, p646 * 194);
      v1028.bezierCurveTo(p646 * 158, p646 * 201, p646 * 165, p646 * 218, p646 * 147, p646 * 226);
      v1028.bezierCurveTo(p646 * 135, p646 * 230, p646 * 125, p646 * 222, p646 * 123, p646 * 214);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 257, p646 * 199);
      v1028.bezierCurveTo(p646 * 264, p646 * 199, p646 * 275, p646 * 213, p646 * 261, p646 * 220);
      v1028.bezierCurveTo(p646 * 246, p646 * 225, p646 * 235, p646 * 200, p646 * 257, p646 * 199);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.translate(p646 * -5, p646 * 55);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 186, p646 * 123);
      v1028.bezierCurveTo(p646 * 198, p646 * 115, p646 * 219, p646 * 110, p646 * 219, p646 * 123);
      v1028.bezierCurveTo(p646 * 216, p646 * 135, p646 * 171, p646 * 143, p646 * 186, p646 * 123);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.translate(p646 * 5, p646 * -55);
      v1028.translate(p646 * -5, p646 * 15);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 171, p646 * 241);
      v1028.bezierCurveTo(p646 * 189, p646 * 234, p646 * 200, p646 * 248, p646 * 189, p646 * 254);
      v1028.bezierCurveTo(p646 * 179, p646 * 260, p646 * 158, p646 * 246, p646 * 171, p646 * 241);
      v1028.closePath();
      f88(v1028, p647[5]);
      v1028.beginPath();
      v1028.lineCap = "round";
      v1028.lineJoin = "round";
      v1028.moveTo(p646 * 367, p646 * 164);
      v1028.bezierCurveTo(p646 * 380, p646 * 160, p646 * 391, p646 * 185, p646 * 371, p646 * 189);
      v1028.bezierCurveTo(p646 * 362, p646 * 192, p646 * 354, p646 * 191, p646 * 350, p646 * 185);
      v1028.bezierCurveTo(p646 * 326, p646 * 205, p646 * 314, p646 * 182, p646 * 316, p646 * 171);
      v1028.bezierCurveTo(p646 * 317, p646 * 150, p646 * 332, p646 * 143, p646 * 347, p646 * 147);
      v1028.bezierCurveTo(p646 * 361, p646 * 151, p646 * 366, p646 * 158, p646 * 367, p646 * 164);
      v1028.closePath();
      f88(v1028, p647[4]);
    }
    return v1027;
  }
  function f138(p650, p651, p652) {
    var v1038 = document.createElement("canvas");
    var v1039 = v1038.getContext("2d");
    var v1040 = p650 * 205;
    var v1041 = p650 * 205;
    var v1042 = v1040 / 2;
    var v1043 = v1041 / 2;
    v1038.width = v1040;
    v1038.height = v1041;
    var v1044 = p650 * 100;
    v1039.translate(v1042, v1043);
    v1039.globalAlpha = 1;
    f92(v1039, 0, 0, v1044);
    f88(v1039, p652[0]);
    return v1038;
  }
  function f139(p653, p654, p655) {
    var v1045 = document.createElement("canvas");
    var v1046 = v1045.getContext("2d");
    v1045.width = p653 * 131;
    v1045.height = p653 * 121;
    v1046.translate(0, p653 * 20);
    v1046.beginPath();
    v1046.lineCap = "round";
    v1046.lineJoin = "round";
    v1046.moveTo(p653 * 110, p653 * 59);
    v1046.bezierCurveTo(p653 * 93, p653 * 61.5, p653 * 93, p653 * 61.5, p653 * 76, p653 * 64);
    v1046.bezierCurveTo(p653 * 84.5, p653 * 78.5, p653 * 84.5, p653 * 78.5, p653 * 93, p653 * 93);
    v1046.bezierCurveTo(p653 * 70, p653 * 111, p653 * 43, p653 * 103, p653 * 30, p653 * 82);
    v1046.bezierCurveTo(p653 * 17, p653 * 61, p653 * 25, p653 * 30, p653 * 51, p653 * 21);
    v1046.bezierCurveTo(p653 * 66, p653 * 15, p653 * 83, p653 * 18, p653 * 96, p653 * 29);
    v1046.bezierCurveTo(p653 * 104, p653 * 35, p653 * 109, p653 * 47, p653 * 110, p653 * 58);
    v1046.closePath();
    f88(v1046, p655[0]);
    v1046.globalAlpha = 1;
    v1046.translate(0, p653 * -20);
    v1046.beginPath();
    v1046.lineCap = "round";
    v1046.lineJoin = "round";
    v1046.moveTo(p653 * 110, p653 * 59);
    v1046.bezierCurveTo(p653 * 93, p653 * 61.5, p653 * 93, p653 * 61.5, p653 * 76, p653 * 64);
    v1046.bezierCurveTo(p653 * 84.5, p653 * 78.5, p653 * 84.5, p653 * 78.5, p653 * 93, p653 * 93);
    v1046.bezierCurveTo(p653 * 70, p653 * 111, p653 * 43, p653 * 103, p653 * 30, p653 * 82);
    v1046.bezierCurveTo(p653 * 17, p653 * 61, p653 * 25, p653 * 30, p653 * 51, p653 * 21);
    v1046.bezierCurveTo(p653 * 66, p653 * 15, p653 * 83, p653 * 18, p653 * 96, p653 * 29);
    v1046.bezierCurveTo(p653 * 104, p653 * 35, p653 * 109, p653 * 47, p653 * 110, p653 * 58);
    v1046.closePath();
    f88(v1046, p655[1], p655[2], p653 * 10);
    return v1045;
  }
  function f140(p656, p657, p658) {
    var v1047 = document.createElement("canvas");
    var v1048 = v1047.getContext("2d");
    v1047.width = p656 * 100;
    v1047.height = p656 * 250;
    v1048.translate(p656 * -135, p656 * -75);
    v1048.globalAlpha = p657 ? 0.8 : 1;
    v1048.beginPath();
    v1048.lineCap = "round";
    v1048.lineJoin = "round";
    v1048.moveTo(p656 * 178.5, p656 * 238.03125);
    v1048.bezierCurveTo(p656 * 177, p656 * 175.03125, p656 * 177, p656 * 175.03125, p656 * 175.5, p656 * 112.03125);
    v1048.bezierCurveTo(p656 * 184.5, p656 * 100.53125, p656 * 184.5, p656 * 100.53125, p656 * 193.5, p656 * 89.03125);
    v1048.bezierCurveTo(p656 * 202, p656 * 100.03125, p656 * 202, p656 * 100.03125, p656 * 210.5, p656 * 111.03125);
    v1048.bezierCurveTo(p656 * 209.5, p656 * 174.03125, p656 * 209.5, p656 * 174.03125, p656 * 208.5, p656 * 237.03125);
    v1048.closePath();
    f88(v1048, p658[0]);
    v1048.beginPath();
    v1048.lineCap = "round";
    v1048.lineJoin = "round";
    v1048.moveTo(p656 * 155.5, p656 * 239.03125);
    v1048.bezierCurveTo(p656 * 194, p656 * 238.53125, p656 * 194, p656 * 238.53125, p656 * 232.5, p656 * 238.03125);
    v1048.bezierCurveTo(p656 * 232.5, p656 * 243.03125, p656 * 232.5, p656 * 243.03125, p656 * 232.5, p656 * 248.03125);
    v1048.bezierCurveTo(p656 * 194, p656 * 248.53125, p656 * 194, p656 * 248.53125, p656 * 155.5, p656 * 249.03125);
    v1048.closePath();
    f88(v1048, p658[0]);
    f92(v1048, p656 * 160.5, p656 * 243.03125, p656 * 7);
    f88(v1048, p658[0]);
    f92(v1048, p656 * 227.5, p656 * 242.03125, p656 * 7);
    f88(v1048, p658[0]);
    v1048.beginPath();
    v1048.lineCap = "round";
    v1048.lineJoin = "round";
    v1048.moveTo(p656 * 185.5, p656 * 253.03125);
    v1048.bezierCurveTo(p656 * 193.5, p656 * 253.03125, p656 * 193.5, p656 * 253.03125, p656 * 201.5, p656 * 253.03125);
    v1048.bezierCurveTo(p656 * 201.5, p656 * 276.03125, p656 * 201.5, p656 * 276.03125, p656 * 201.5, p656 * 299.03125);
    v1048.bezierCurveTo(p656 * 194.5, p656 * 299.03125, p656 * 194.5, p656 * 299.03125, p656 * 187.5, p656 * 299.03125);
    v1048.closePath();
    f88(v1048, p658[0], p658[0], p656 * 5);
    f92(v1048, p656 * 194, p656 * 298, p656 * 9);
    f88(v1048, p658[0], p658[0], p656 * 5);
    v1048.globalAlpha = 1;
    v1048.translate(p656 * -10, p656 * 10);
    v1048.beginPath();
    v1048.lineCap = "round";
    v1048.lineJoin = "round";
    v1048.moveTo(p656 * 178.5, p656 * 238.03125);
    v1048.bezierCurveTo(p656 * 177, p656 * 175.03125, p656 * 177, p656 * 175.03125, p656 * 175.5, p656 * 112.03125);
    v1048.bezierCurveTo(p656 * 184.5, p656 * 100.53125, p656 * 184.5, p656 * 100.53125, p656 * 193.5, p656 * 89.03125);
    v1048.bezierCurveTo(p656 * 202, p656 * 100.03125, p656 * 202, p656 * 100.03125, p656 * 210.5, p656 * 111.03125);
    v1048.bezierCurveTo(p656 * 209.5, p656 * 174.03125, p656 * 209.5, p656 * 174.03125, p656 * 208.5, p656 * 237.03125);
    v1048.closePath();
    f88(v1048, p658[3], p658[4], p656 * 5);
    v1048.beginPath();
    v1048.lineCap = "round";
    v1048.lineJoin = "round";
    v1048.moveTo(p656 * 155.5, p656 * 239.03125);
    v1048.bezierCurveTo(p656 * 194, p656 * 238.53125, p656 * 194, p656 * 238.53125, p656 * 232.5, p656 * 238.03125);
    v1048.bezierCurveTo(p656 * 232.5, p656 * 243.03125, p656 * 232.5, p656 * 243.03125, p656 * 232.5, p656 * 248.03125);
    v1048.bezierCurveTo(p656 * 194, p656 * 248.53125, p656 * 194, p656 * 248.53125, p656 * 155.5, p656 * 249.03125);
    v1048.closePath();
    f88(v1048, p658[1], p658[2], p656 * 5);
    f92(v1048, p656 * 160.5, p656 * 243.03125, p656 * 7);
    f88(v1048, p658[1], p658[2], p656 * 5);
    f92(v1048, p656 * 227.5, p656 * 242.03125, p656 * 7);
    f88(v1048, p658[1], p658[2], p656 * 5);
    v1048.beginPath();
    v1048.lineCap = "round";
    v1048.lineJoin = "round";
    v1048.moveTo(p656 * 185.5, p656 * 253.03125);
    v1048.bezierCurveTo(p656 * 193.5, p656 * 253.03125, p656 * 193.5, p656 * 253.03125, p656 * 201.5, p656 * 253.03125);
    v1048.bezierCurveTo(p656 * 201.5, p656 * 276.03125, p656 * 201.5, p656 * 276.03125, p656 * 201.5, p656 * 299.03125);
    v1048.bezierCurveTo(p656 * 194.5, p656 * 299.03125, p656 * 194.5, p656 * 299.03125, p656 * 187.5, p656 * 299.03125);
    v1048.closePath();
    f88(v1048, p658[1], p658[2], p656 * 7);
    f92(v1048, p656 * 194, p656 * 298, p656 * 9);
    f88(v1048, p658[1], p658[2], p656 * 7);
    return v1047;
  }
  function f141(p659, p660, p661, p662) {
    var v1049 = document.createElement("canvas");
    var v1050 = v1049.getContext("2d");
    v1049.width = p659 * 283;
    v1049.height = p659 * 224;
    v1050.translate(0, p659 * 15);
    v1050.globalAlpha = 0.5;
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 93, p659 * 55);
    v1050.bezierCurveTo(p659 * 127, p659 * 27, p659 * 195, p659 * 42, p659 * 213, p659 * 78);
    v1050.bezierCurveTo(p659 * 254, p659 * 134, p659 * 226, p659 * 198, p659 * 153, p659 * 197);
    v1050.bezierCurveTo(p659 * 59, p659 * 204, p659 * 56, p659 * 158, p659 * 51, p659 * 115);
    v1050.bezierCurveTo(p659 * 50, p659 * 93, p659 * 81, p659 * 62, p659 * 90, p659 * 57);
    v1050.closePath();
    f88(v1050, p661[0]);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 100, p659 * 33);
    v1050.bezierCurveTo(p659 * 85, p659 * 62, p659 * 102, p659 * 66, p659 * 110, p659 * 83);
    v1050.closePath();
    f88(v1050, p661[0]);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 181, p659 * 32);
    v1050.bezierCurveTo(p659 * 196, p659 * 62, p659 * 181, p659 * 68, p659 * 178, p659 * 69);
    f88(v1050, p661[0]);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 225, p659 * 52);
    v1050.bezierCurveTo(p659 * 228, p659 * 78, p659 * 207, p659 * 77, p659 * 192, p659 * 88);
    f88(v1050, p661[0]);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 34, p659 * 134);
    v1050.bezierCurveTo(p659 * 46, p659 * 111, p659 * 57, p659 * 111, p659 * 79, p659 * 109);
    f88(v1050, p661[0]);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 249, p659 * 135);
    v1050.bezierCurveTo(p659 * 233, p659 * 107, p659 * 212, p659 * 112, p659 * 202, p659 * 115);
    f88(v1050, p661[0]);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 56, p659 * 50);
    v1050.bezierCurveTo(p659 * 56, p659 * 82, p659 * 73, p659 * 82, p659 * 93, p659 * 89);
    f88(v1050, p661[0]);
    v1050.translate(0, p659 * -15);
    v1050.globalAlpha = 1;
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 100, p659 * 33);
    v1050.bezierCurveTo(p659 * 85, p659 * 62, p659 * 102, p659 * 66, p659 * 110, p659 * 83);
    f88(v1050, undefined, p661[2], p659 * 40);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 181, p659 * 32);
    v1050.bezierCurveTo(p659 * 196, p659 * 62, p659 * 181, p659 * 68, p659 * 178, p659 * 69);
    f88(v1050, undefined, p661[2], p659 * 40);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 225, p659 * 52);
    v1050.bezierCurveTo(p659 * 228, p659 * 78, p659 * 207, p659 * 77, p659 * 192, p659 * 88);
    f88(v1050, vVVUndefined5, p661[2], p659 * 40);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 34, p659 * 134);
    v1050.bezierCurveTo(p659 * 46, p659 * 111, p659 * 57, p659 * 111, p659 * 79, p659 * 109);
    f88(v1050, undefined, p661[2], p659 * 40);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 249, p659 * 135);
    v1050.bezierCurveTo(p659 * 233, p659 * 107, p659 * 212, p659 * 112, p659 * 202, p659 * 115);
    f88(v1050, vVVUndefined11, p661[2], p659 * 40);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 56, p659 * 50);
    v1050.bezierCurveTo(p659 * 56, p659 * 82, p659 * 73, p659 * 82, p659 * 93, p659 * 89);
    f88(v1050, undefined, p661[2], p659 * 40);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 93, p659 * 55);
    v1050.bezierCurveTo(p659 * 127, p659 * 27, p659 * 195, p659 * 42, p659 * 213, p659 * 78);
    v1050.bezierCurveTo(p659 * 254, p659 * 134, p659 * 226, p659 * 198, p659 * 153, p659 * 197);
    v1050.bezierCurveTo(p659 * 59, p659 * 204, p659 * 56, p659 * 158, p659 * 51, p659 * 115);
    v1050.bezierCurveTo(p659 * 50, p659 * 93, p659 * 81, p659 * 62, p659 * 90, p659 * 57);
    v1050.closePath();
    f88(v1050, p661[1], p661[2], p659 * 10);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 100, p659 * 33);
    v1050.bezierCurveTo(p659 * 85, p659 * 62, p659 * 102, p659 * 66, p659 * 110, p659 * 83);
    f88(v1050, undefined, p661[1], p659 * 20);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 181, p659 * 32);
    v1050.bezierCurveTo(p659 * 196, p659 * 62, p659 * 181, p659 * 68, p659 * 178, p659 * 69);
    f88(v1050, undefined, p661[1], p659 * 20);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 225, p659 * 52);
    v1050.bezierCurveTo(p659 * 228, p659 * 78, p659 * 207, p659 * 77, p659 * 192, p659 * 88);
    f88(v1050, vVVVUndefined142, p661[1], p659 * 20);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 34, p659 * 134);
    v1050.bezierCurveTo(p659 * 46, p659 * 111, p659 * 57, p659 * 111, p659 * 79, p659 * 109);
    f88(v1050, undefined, p661[1], p659 * 20);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 249, p659 * 135);
    v1050.bezierCurveTo(p659 * 233, p659 * 107, p659 * 212, p659 * 112, p659 * 202, p659 * 115);
    f88(v1050, vVVVVUndefined582, p661[1], p659 * 20);
    v1050.beginPath();
    v1050.lineCap = "round";
    v1050.lineJoin = "round";
    v1050.moveTo(p659 * 56, p659 * 50);
    v1050.bezierCurveTo(p659 * 56, p659 * 82, p659 * 73, p659 * 82, p659 * 93, p659 * 89);
    f88(v1050, vVVVUndefined142, p661[1], p659 * 20);
    f92(v1050, p659 * 101, p659 * 155, p659 * 20.591260281974);
    f88(v1050, p661[3]);
    f92(v1050, p659 * 180, p659 * 155, p659 * 20.591260281974);
    f88(v1050, p661[3]);
    f92(v1050, p659 * 95, p659 * 148, p659 * 7.211102550927978);
    f88(v1050, p661[4]);
    f92(v1050, p659 * 173, p659 * 148, p659 * 7.211102550927978);
    f88(v1050, p661[4]);
    if (p662 === 1) {
      v1050.beginPath();
      v1050.lineCap = "round";
      v1050.lineJoin = "round";
      v1050.moveTo(p659 * 191, p659 * 107);
      v1050.bezierCurveTo(p659 * 180, p659 * 104, p659 * 175, p659 * 101, p659 * 180, p659 * 95);
      v1050.bezierCurveTo(p659 * 180, p659 * 95, p659 * 181, p659 * 99, p659 * 188, p659 * 103);
      v1050.bezierCurveTo(p659 * 191, p659 * 101, p659 * 191, p659 * 95, p659 * 190, p659 * 91);
      v1050.bezierCurveTo(p659 * 190, p659 * 91, p659 * 196, p659 * 89, p659 * 195, p659 * 99);
      v1050.closePath();
      f88(v1050, p661[2]);
      v1050.beginPath();
      v1050.lineCap = "round";
      v1050.lineJoin = "round";
      v1050.moveTo(p659 * 206, p659 * 98);
      v1050.bezierCurveTo(p659 * 203, p659 * 95, p659 * 200, p659 * 93, p659 * 198, p659 * 101);
      v1050.bezierCurveTo(p659 * 194, p659 * 109, p659 * 193, p659 * 109, p659 * 196, p659 * 110);
      v1050.bezierCurveTo(p659 * 206, p659 * 115, p659 * 209, p659 * 114, p659 * 211, p659 * 111);
      v1050.bezierCurveTo(p659 * 211, p659 * 106, p659 * 208, p659 * 108, p659 * 203, p659 * 108);
      v1050.bezierCurveTo(p659 * 193, p659 * 107, p659 * 204, p659 * 101, p659 * 206, p659 * 99);
      v1050.closePath();
      f88(v1050, p661[2]);
      v1050.beginPath();
      v1050.lineCap = "round";
      v1050.lineJoin = "round";
      v1050.moveTo(p659 * 172, p659 * 111);
      v1050.bezierCurveTo(p659 * 172, p659 * 106, p659 * 174, p659 * 105, p659 * 185, p659 * 109);
      v1050.bezierCurveTo(p659 * 190, p659 * 109, p659 * 189, p659 * 114, p659 * 185, p659 * 120);
      v1050.bezierCurveTo(p659 * 181, p659 * 125, p659 * 180, p659 * 126, p659 * 176, p659 * 122);
      v1050.bezierCurveTo(p659 * 182, p659 * 119, p659 * 187, p659 * 110, p659 * 182, p659 * 112);
      v1050.closePath();
      f88(v1050, p661[2]);
      v1050.beginPath();
      v1050.lineCap = "round";
      v1050.lineJoin = "round";
      v1050.moveTo(p659 * 202, p659 * 125);
      v1050.bezierCurveTo(p659 * 197, p659 * 117, p659 * 193, p659 * 116, p659 * 193, p659 * 120);
      v1050.bezierCurveTo(p659 * 192.5, p659 * 124.5, p659 * 192.5, p659 * 124.5, p659 * 192, p659 * 129);
      v1050.bezierCurveTo(p659 * 188, p659 * 129, p659 * 187, p659 * 124, p659 * 189, p659 * 120);
      v1050.bezierCurveTo(p659 * 191, p659 * 110, p659 * 192, p659 * 110, p659 * 200, p659 * 116);
      v1050.bezierCurveTo(p659 * 208, p659 * 120, p659 * 207, p659 * 123, p659 * 202, p659 * 125);
      v1050.closePath();
      f88(v1050, p661[2]);
    }
    return v1049;
  }
  function f142(p663, p664) {
    var v1051 = document.createElement("canvas");
    var v1052 = v1051.getContext("2d");
    var v1053 = p663 * 220;
    var v1054 = p663 * 220;
    var v1055 = p663 * 16;
    v1051.width = v1053;
    v1051.height = v1054;
    v1052.translate(v1053 / 2, v1054 / 2);
    v1052.globalAlpha = 0.5;
    f92(v1052, 0, 0, v1055);
    f88(v1052, p664[0]);
    v1052.globalAlpha = 1;
    return v1051;
  }
  function f143(p665, p666, p667) {
    var v1056 = document.createElement("canvas");
    var v1057 = v1056.getContext("2d");
    v1056.width = p665 * 424;
    v1056.height = p665 * 788;
    v1057.translate(p665 * 25, p665 * 25);
    v1057.globalAlpha = p666 ? 0.5 : 1;
    v1057.save();
    v1057.translate(p665 * 193.5, p665 * 602.5);
    v1057.rotate(-0.12);
    f86(v1057, p665 * -26.5, p665 * -97.5, p665 * 53, p665 * 195, p665 * 25);
    v1057.restore();
    f88(v1057, p667[0]);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 137, p665 * 519);
    v1057.bezierCurveTo(p665 * 182, p665 * 513, p665 * 182, p665 * 513, p665 * 227, p665 * 507);
    v1057.bezierCurveTo(p665 * 214, p665 * 417, p665 * 189, p665 * 304, p665 * 221, p665 * 180);
    v1057.bezierCurveTo(p665 * 191, p665 * 126, p665 * 192, p665 * 105, p665 * 198, p665 * 64);
    v1057.bezierCurveTo(p665 * 123, p665 * 102, p665 * 99, p665 * 285, p665 * 137, p665 * 517);
    v1057.closePath();
    f88(v1057, p667[0]);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 175, p665 * 119);
    v1057.bezierCurveTo(p665 * 176, p665 * 142, p665 * 184, p665 * 165, p665 * 197, p665 * 183);
    v1057.bezierCurveTo(p665 * 167, p665 * 325, p665 * 191, p665 * 405, p665 * 202, p665 * 502);
    v1057.bezierCurveTo(p665 * 180, p665 * 503, p665 * 180, p665 * 503, p665 * 158, p665 * 504);
    v1057.bezierCurveTo(p665 * 135, p665 * 396, p665 * 134, p665 * 185, p665 * 175, p665 * 119);
    v1057.closePath();
    f88(v1057, p667[0]);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 110, p665 * 518);
    v1057.bezierCurveTo(p665 * 111.5, p665 * 533, p665 * 111.5, p665 * 533, p665 * 113, p665 * 548);
    v1057.bezierCurveTo(p665 * 162.5, p665 * 544, p665 * 162.5, p665 * 544, p665 * 212, p665 * 540);
    v1057.bezierCurveTo(p665 * 312, p665 * 535, p665 * 281, p665 * 665, p665 * 225, p665 * 665);
    v1057.bezierCurveTo(p665 * 227, p665 * 686.5, p665 * 227, p665 * 686.5, p665 * 229, p665 * 708);
    v1057.bezierCurveTo(p665 * 343, p665 * 684, p665 * 354, p665 * 496, p665 * 222, p665 * 498);
    v1057.bezierCurveTo(p665 * 165.5, p665 * 503, p665 * 165.5, p665 * 503, p665 * 109, p665 * 508);
    v1057.closePath();
    f88(v1057, p667[0]);
    f92(v1057, p665 * 204, p665 * 693, p665 * 36.013886210738214);
    f88(v1057, p667[0]);
    f92(v1057, p665 * 105, p665 * 518, p665 * 30);
    f88(v1057, p667[0]);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 171, p665 * 535);
    v1057.bezierCurveTo(p665 * 139.5, p665 * 537.5, p665 * 139.5, p665 * 537.5, p665 * 108, p665 * 540);
    v1057.bezierCurveTo(p665 * 110, p665 * 527.5, p665 * 110, p665 * 527.5, p665 * 112, p665 * 515);
    v1057.bezierCurveTo(p665 * 148, p665 * 513, p665 * 148, p665 * 513, p665 * 184, p665 * 511);
    v1057.closePath();
    f88(v1057, p667[0]);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 244, p665 * 669);
    v1057.bezierCurveTo(p665 * 248.5, p665 * 680, p665 * 248.5, p665 * 680, p665 * 253, p665 * 691);
    v1057.bezierCurveTo(p665 * 239.5, p665 * 697, p665 * 239.5, p665 * 697, p665 * 226, p665 * 703);
    v1057.bezierCurveTo(p665 * 223, p665 * 691.5, p665 * 223, p665 * 691.5, p665 * 220, p665 * 680);
    v1057.closePath();
    f88(v1057, p667[0]);
    v1057.translate(p665 * -25, p665 * -25);
    v1057.globalAlpha = 1;
    v1057.save();
    v1057.translate(p665 * 193.5, p665 * 602.5);
    v1057.rotate(-0.12);
    f86(v1057, p665 * -26.5, p665 * -97.5, p665 * 53, p665 * 195, p665 * 25);
    v1057.restore();
    f88(v1057, p667[1], p667[2], p665 * 16);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 137, p665 * 519);
    v1057.bezierCurveTo(p665 * 182, p665 * 513, p665 * 182, p665 * 513, p665 * 227, p665 * 507);
    v1057.bezierCurveTo(p665 * 214, p665 * 417, p665 * 189, p665 * 304, p665 * 221, p665 * 180);
    v1057.bezierCurveTo(p665 * 191, p665 * 126, p665 * 192, p665 * 105, p665 * 198, p665 * 64);
    v1057.bezierCurveTo(p665 * 123, p665 * 102, p665 * 99, p665 * 285, p665 * 137, p665 * 517);
    v1057.closePath();
    f88(v1057, p667[3], p667[4], p665 * 16);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 175, p665 * 119);
    v1057.bezierCurveTo(p665 * 176, p665 * 142, p665 * 184, p665 * 165, p665 * 197, p665 * 183);
    v1057.bezierCurveTo(p665 * 167, p665 * 325, p665 * 191, p665 * 405, p665 * 202, p665 * 502);
    v1057.bezierCurveTo(p665 * 180, p665 * 503, p665 * 180, p665 * 503, p665 * 158, p665 * 504);
    v1057.bezierCurveTo(p665 * 135, p665 * 396, p665 * 134, p665 * 185, p665 * 175, p665 * 119);
    v1057.closePath();
    f88(v1057, p667[5]);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 110, p665 * 518);
    v1057.bezierCurveTo(p665 * 111.5, p665 * 533, p665 * 111.5, p665 * 533, p665 * 113, p665 * 548);
    v1057.bezierCurveTo(p665 * 162.5, p665 * 544, p665 * 162.5, p665 * 544, p665 * 212, p665 * 540);
    v1057.bezierCurveTo(p665 * 312, p665 * 535, p665 * 281, p665 * 665, p665 * 225, p665 * 665);
    v1057.bezierCurveTo(p665 * 227, p665 * 686.5, p665 * 227, p665 * 686.5, p665 * 229, p665 * 708);
    v1057.bezierCurveTo(p665 * 343, p665 * 684, p665 * 354, p665 * 496, p665 * 222, p665 * 498);
    v1057.bezierCurveTo(p665 * 165.5, p665 * 503, p665 * 165.5, p665 * 503, p665 * 109, p665 * 508);
    v1057.closePath();
    f88(v1057, p667[6], p667[4], p665 * 16);
    f92(v1057, p665 * 204, p665 * 693, p665 * 36.013886210738214);
    f88(v1057, p667[6], p667[4], p665 * 16);
    f92(v1057, p665 * 105, p665 * 518, p665 * 30);
    f88(v1057, p667[6], p667[4], p665 * 16);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 171, p665 * 535);
    v1057.bezierCurveTo(p665 * 139.5, p665 * 537.5, p665 * 139.5, p665 * 537.5, p665 * 108, p665 * 540);
    v1057.bezierCurveTo(p665 * 110, p665 * 527.5, p665 * 110, p665 * 527.5, p665 * 112, p665 * 515);
    v1057.bezierCurveTo(p665 * 148, p665 * 513, p665 * 148, p665 * 513, p665 * 184, p665 * 511);
    v1057.closePath();
    f88(v1057, p667[6]);
    v1057.beginPath();
    v1057.lineCap = "round";
    v1057.lineJoin = "round";
    v1057.moveTo(p665 * 244, p665 * 669);
    v1057.bezierCurveTo(p665 * 248.5, p665 * 680, p665 * 248.5, p665 * 680, p665 * 253, p665 * 691);
    v1057.bezierCurveTo(p665 * 239.5, p665 * 697, p665 * 239.5, p665 * 697, p665 * 226, p665 * 703);
    v1057.bezierCurveTo(p665 * 223, p665 * 691.5, p665 * 223, p665 * 691.5, p665 * 220, p665 * 680);
    v1057.closePath();
    f88(v1057, p667[6]);
    f92(v1057, p665 * 204, p665 * 693, p665 * 17.029386365926403);
    f88(v1057, p667[7]);
    f92(v1057, p665 * 106, p665 * 518, p665 * 12);
    f88(v1057, p667[7]);
    return v1056;
  }
  function f144(p668, p669, p670) {
    var v1058 = document.createElement("canvas");
    var v1059 = v1058.getContext("2d");
    v1058.width = p668 * 155;
    v1058.height = p668 * 127;
    v1059.globalAlpha = 0.5;
    v1059.translate(0, p668 * 8);
    v1059.translate(p668 * -7, p668 * -20);
    v1059.beginPath();
    v1059.lineCap = "round";
    v1059.lineJoin = "round";
    v1059.moveTo(p668 * 55, p668 * 68);
    v1059.bezierCurveTo(p668 * 86, p668 * 64, p668 * 117, p668 * 66, p668 * 134, p668 * 68);
    v1059.bezierCurveTo(p668 * 152, p668 * 69, p668 * 165, p668 * 86, p668 * 152, p668 * 104);
    v1059.bezierCurveTo(p668 * 146, p668 * 87, p668 * 122, p668 * 89, p668 * 98, p668 * 90);
    v1059.bezierCurveTo(p668 * 64, p668 * 89, p668 * 41, p668 * 91, p668 * 36, p668 * 106);
    v1059.bezierCurveTo(p668 * 19, p668 * 92, p668 * 31, p668 * 71, p668 * 54, p668 * 69);
    v1059.closePath();
    f88(v1059, p670[0]);
    v1059.globalAlpha = 1;
    v1059.translate(0, p668 * -8);
    v1059.translate(p668 * 7, p668 * 20);
    v1059.beginPath();
    v1059.lineCap = "round";
    v1059.lineJoin = "round";
    v1059.moveTo(p668 * 24, p668 * 28);
    v1059.bezierCurveTo(p668 * 39, p668 * 30, p668 * 37, p668 * 31, p668 * 40, p668 * 32);
    v1059.bezierCurveTo(p668 * 22, p668 * 45, p668 * 26, p668 * 58, p668 * 29, p668 * 66);
    v1059.bezierCurveTo(p668 * 86.5, p668 * 65, p668 * 86.5, p668 * 65, p668 * 144, p668 * 64);
    v1059.bezierCurveTo(p668 * 151, p668 * 42, p668 * 132, p668 * 20, p668 * 120, p668 * 16);
    v1059.bezierCurveTo(p668 * 106, p668 * 12, p668 * 89, p668 * 0, p668 * 73, p668 * 3);
    v1059.bezierCurveTo(p668 * 51, p668 * 5, p668 * 36, p668 * 20, p668 * 25, p668 * 28);
    v1059.closePath();
    f88(v1059, p670[1], p670[2], p668 * 4);
    v1059.beginPath();
    v1059.lineCap = "round";
    v1059.lineJoin = "round";
    v1059.moveTo(p668 * 30, p668 * 41);
    v1059.bezierCurveTo(p668 * 49, p668 * 31, p668 * 53, p668 * 29, p668 * 62, p668 * 27);
    v1059.bezierCurveTo(p668 * 59, p668 * 24, p668 * 56, p668 * 25, p668 * 53, p668 * 24);
    v1059.bezierCurveTo(p668 * 67, p668 * 15, p668 * 84, p668 * 12, p668 * 120, p668 * 16);
    v1059.bezierCurveTo(p668 * 107, p668 * 11, p668 * 96, p668 * 6, p668 * 85, p668 * 2);
    v1059.bezierCurveTo(p668 * 59, p668 * 3, p668 * 54, p668 * 7, p668 * 40, p668 * 17);
    v1059.bezierCurveTo(p668 * 32.5, p668 * 22.5, p668 * 32.5, p668 * 22.5, p668 * 25, p668 * 28);
    v1059.bezierCurveTo(p668 * 32, p668 * 30, p668 * 32, p668 * 30, p668 * 39, p668 * 32);
    v1059.closePath();
    f88(v1059, p670[3]);
    v1059.beginPath();
    v1059.lineCap = "round";
    v1059.lineJoin = "round";
    v1059.moveTo(p668 * 24, p668 * 28);
    v1059.bezierCurveTo(p668 * 39, p668 * 30, p668 * 37, p668 * 31, p668 * 40, p668 * 32);
    v1059.bezierCurveTo(p668 * 22, p668 * 45, p668 * 26, p668 * 58, p668 * 29, p668 * 66);
    v1059.bezierCurveTo(p668 * 86.5, p668 * 65, p668 * 86.5, p668 * 65, p668 * 144, p668 * 64);
    v1059.bezierCurveTo(p668 * 151, p668 * 42, p668 * 132, p668 * 20, p668 * 120, p668 * 16);
    v1059.bezierCurveTo(p668 * 106, p668 * 12, p668 * 89, p668 * 0, p668 * 73, p668 * 3);
    v1059.bezierCurveTo(p668 * 51, p668 * 5, p668 * 36, p668 * 20, p668 * 25, p668 * 28);
    v1059.closePath();
    f88(v1059, vUndefined, p670[2], p668 * 4);
    f92(v1059, p668 * 18, p668 * 38, p668 * 14.866068747318506);
    f88(v1059, p670[4], p670[5], p668 * 4);
    v1059.beginPath();
    v1059.lineCap = "round";
    v1059.lineJoin = "round";
    v1059.moveTo(p668 * 39, p668 * 30);
    v1059.bezierCurveTo(p668 * 27, p668 * 38, p668 * 25, p668 * 50, p668 * 26, p668 * 60);
    v1059.bezierCurveTo(p668 * 36.5, p668 * 58.5, p668 * 36.5, p668 * 58.5, p668 * 47, p668 * 57);
    f88(v1059, p670[1], p670[2], p668 * 4);
    v1059.translate(p668 * -7, p668 * -20);
    v1059.beginPath();
    v1059.lineCap = "round";
    v1059.lineJoin = "round";
    v1059.moveTo(p668 * 27, p668 * 74);
    v1059.bezierCurveTo(p668 * 38, p668 * 77.5, p668 * 38, p668 * 77.5, p668 * 49, p668 * 81);
    v1059.bezierCurveTo(p668 * 54.5, p668 * 75.5, p668 * 54.5, p668 * 75.5, p668 * 60, p668 * 70);
    v1059.bezierCurveTo(p668 * 64, p668 * 72, p668 * 64, p668 * 72, p668 * 68, p668 * 74);
    v1059.bezierCurveTo(p668 * 80.5, p668 * 67.5, p668 * 80.5, p668 * 67.5, p668 * 93, p668 * 61);
    v1059.bezierCurveTo(p668 * 104.5, p668 * 68, p668 * 104.5, p668 * 68, p668 * 116, p668 * 75);
    v1059.bezierCurveTo(p668 * 120.5, p668 * 72.5, p668 * 120.5, p668 * 72.5, p668 * 125, p668 * 70);
    v1059.bezierCurveTo(p668 * 129, p668 * 75, p668 * 129, p668 * 75, p668 * 133, p668 * 80);
    v1059.bezierCurveTo(p668 * 145.5, p668 * 76.5, p668 * 145.5, p668 * 76.5, p668 * 158, p668 * 73);
    v1059.bezierCurveTo(p668 * 158, p668 * 87, p668 * 158, p668 * 93, p668 * 155, p668 * 95);
    v1059.bezierCurveTo(p668 * 152.5, p668 * 96, p668 * 152.5, p668 * 96, p668 * 150, p668 * 97);
    v1059.bezierCurveTo(p668 * 121, p668 * 85, p668 * 108, p668 * 86, p668 * 93, p668 * 85);
    v1059.bezierCurveTo(p668 * 64, p668 * 85, p668 * 52, p668 * 95, p668 * 38, p668 * 99);
    v1059.bezierCurveTo(p668 * 36, p668 * 98.5, p668 * 36, p668 * 98.5, p668 * 34, p668 * 98);
    v1059.bezierCurveTo(p668 * 25, p668 * 98, p668 * 27, p668 * 91, p668 * 27, p668 * 76);
    v1059.closePath();
    f88(v1059, p670[6], p670[7], p668 * 6);
    return v1058;
  }
  function f145(p671, p672) {
    var v1060 = document.createElement("canvas");
    var v1061 = v1060.getContext("2d");
    var v1062 = p671 * 220;
    var v1063 = p671 * 220;
    var v1064 = p671 * 32;
    var v1065 = p671 * 4;
    v1060.width = v1062;
    v1060.height = v1063;
    v1061.translate(v1062 / 2, v1063 / 2 + p671 * 10);
    v1061.globalAlpha = 0.5;
    f92(v1061, 0, 0, v1064);
    f88(v1061, p672[0], p672[0]);
    v1061.translate(0, p671 * -8);
    v1061.globalAlpha = 1;
    f92(v1061, 0, 0, v1064);
    f88(v1061, p672[1], p672[2], v1065);
    return v1060;
  }
  function f146(p673, p674, p675) {
    var v1066 = document.createElement("canvas");
    var v1067 = v1066.getContext("2d");
    var v1068 = p673 * 135;
    var v1069 = p673 * 190;
    var v1070 = v1068 / 2;
    var v1071 = v1069 / 2;
    v1066.width = v1068;
    v1066.height = v1069;
    var v1072 = p673 * 10;
    var v1073 = p673 * 25;
    var v1074 = p673 * 180;
    var v1075 = v1073 / 2;
    var v1076 = v1074 / 2;
    var v1077 = p673 * 4;
    v1067.translate(v1070, v1071);
    v1067.rotate(-Math.PI / 5);
    v1067.globalAlpha = 1;
    f86(v1067, -v1075, -v1076, v1073, v1074, v1072);
    f88(v1067, p675[0], p675[1], v1077);
    v1067.translate(0, 0);
    v1067.rotate(Math.PI / 5);
    v1067.globalAlpha = 1;
    f86(v1067, -v1075, -v1076, v1073, v1074, v1072);
    f88(v1067, p675[0], p675[1], v1077);
    return v1066;
  }
  function f147(p676, p677, p678) {
    var v1078 = document.createElement("canvas");
    var v1079 = v1078.getContext("2d");
    v1078.width = p676 * 290;
    v1078.height = p676 * 525;
    v1079.globalAlpha = p677 ? 0.5 : 1;
    v1079.translate(p676 * 20, p676 * 20);
    v1079.beginPath();
    v1079.lineCap = "round";
    v1079.lineJoin = "round";
    v1079.moveTo(p676 * 112, p676 * 356);
    v1079.bezierCurveTo(p676 * 124, p676 * 220.5, p676 * 124, p676 * 220.5, p676 * 136, p676 * 85);
    v1079.bezierCurveTo(p676 * 162.5, p676 * 65.5, p676 * 162.5, p676 * 65.5, p676 * 189, p676 * 46);
    v1079.bezierCurveTo(p676 * 208.5, p676 * 72.5, p676 * 208.5, p676 * 72.5, p676 * 228, p676 * 99);
    v1079.bezierCurveTo(p676 * 200, p676 * 232, p676 * 200, p676 * 232, p676 * 172, p676 * 365);
    v1079.closePath();
    f88(v1079, p678[0]);
    v1079.save();
    v1079.translate(p676 * 131, p676 * 423);
    v1079.rotate(0.16);
    f86(v1079, p676 * -14, p676 * -53, p676 * 28, p676 * 106, p676 * 10);
    v1079.restore();
    f88(v1079, p678[0]);
    v1079.save();
    v1079.translate(p676 * 122, p676 * 480);
    v1079.rotate(1.72);
    f89(v1079, 4, p676 * 26.476404589747453, p676 * 10);
    v1079.restore();
    f88(v1079, p678[0]);
    v1079.beginPath();
    v1079.lineCap = "round";
    v1079.lineJoin = "round";
    v1079.moveTo(p676 * 210, p676 * 387);
    v1079.bezierCurveTo(p676 * 138, p676 * 376, p676 * 138, p676 * 376, p676 * 66, p676 * 365);
    v1079.bezierCurveTo(p676 * 76, p676 * 355, p676 * 76, p676 * 355, p676 * 86, p676 * 345);
    v1079.bezierCurveTo(p676 * 99, p676 * 346.5, p676 * 99, p676 * 346.5, p676 * 112, p676 * 348);
    v1079.bezierCurveTo(p676 * 128.5, p676 * 344, p676 * 128.5, p676 * 344, p676 * 145, p676 * 340);
    v1079.bezierCurveTo(p676 * 158, p676 * 348, p676 * 158, p676 * 348, p676 * 171, p676 * 356);
    v1079.bezierCurveTo(p676 * 184, p676 * 358, p676 * 184, p676 * 358, p676 * 197, p676 * 360);
    v1079.closePath();
    f88(v1079, p678[0]);
    v1079.beginPath();
    v1079.lineCap = "round";
    v1079.lineJoin = "round";
    v1079.moveTo(p676 * 129, p676 * 338);
    v1079.bezierCurveTo(p676 * 137, p676 * 336, p676 * 137, p676 * 336, p676 * 145, p676 * 334);
    v1079.bezierCurveTo(p676 * 152.5, p676 * 338, p676 * 152.5, p676 * 338, p676 * 160, p676 * 342);
    v1079.bezierCurveTo(p676 * 184, p676 * 224, p676 * 184, p676 * 224, p676 * 208, p676 * 106);
    v1079.bezierCurveTo(p676 * 197, p676 * 88, p676 * 187, p676 * 70, p676 * 186, p676 * 70);
    v1079.bezierCurveTo(p676 * 169.5, p676 * 83, p676 * 169.5, p676 * 83, p676 * 153, p676 * 96);
    v1079.closePath();
    f88(v1079, p678[0]);
    v1079.globalAlpha = 1;
    v1079.translate(p676 * -20, p676 * -20);
    v1079.beginPath();
    v1079.lineCap = "round";
    v1079.lineJoin = "round";
    v1079.moveTo(p676 * 112, p676 * 356);
    v1079.bezierCurveTo(p676 * 124, p676 * 220.5, p676 * 124, p676 * 220.5, p676 * 136, p676 * 85);
    v1079.bezierCurveTo(p676 * 162.5, p676 * 65.5, p676 * 162.5, p676 * 65.5, p676 * 189, p676 * 46);
    v1079.bezierCurveTo(p676 * 208.5, p676 * 72.5, p676 * 208.5, p676 * 72.5, p676 * 228, p676 * 99);
    v1079.bezierCurveTo(p676 * 200, p676 * 232, p676 * 200, p676 * 232, p676 * 172, p676 * 365);
    v1079.closePath();
    f88(v1079, p678[1], p678[2], p676 * 12.5);
    v1079.save();
    v1079.translate(p676 * 131, p676 * 423);
    v1079.rotate(0.16);
    f86(v1079, p676 * -14, p676 * -53, p676 * 28, p676 * 106, p676 * 10);
    v1079.restore();
    f88(v1079, p678[4], p678[5], p676 * 12.5);
    v1079.save();
    v1079.translate(p676 * 122, p676 * 480);
    v1079.rotate(1.72);
    f89(v1079, 4, p676 * 26.476404589747453, p676 * 10);
    v1079.restore();
    f88(v1079, p678[1], p678[2], p676 * 12.5);
    v1079.beginPath();
    v1079.lineCap = "round";
    v1079.lineJoin = "round";
    v1079.moveTo(p676 * 210, p676 * 387);
    v1079.bezierCurveTo(p676 * 138, p676 * 376, p676 * 138, p676 * 376, p676 * 66, p676 * 365);
    v1079.bezierCurveTo(p676 * 76, p676 * 355, p676 * 76, p676 * 355, p676 * 86, p676 * 345);
    v1079.bezierCurveTo(p676 * 99, p676 * 346.5, p676 * 99, p676 * 346.5, p676 * 112, p676 * 348);
    v1079.bezierCurveTo(p676 * 128.5, p676 * 344, p676 * 128.5, p676 * 344, p676 * 145, p676 * 340);
    v1079.bezierCurveTo(p676 * 158, p676 * 348, p676 * 158, p676 * 348, p676 * 171, p676 * 356);
    v1079.bezierCurveTo(p676 * 184, p676 * 358, p676 * 184, p676 * 358, p676 * 197, p676 * 360);
    v1079.closePath();
    f88(v1079, p678[1], p678[2], p676 * 12.5);
    v1079.beginPath();
    v1079.lineCap = "round";
    v1079.lineJoin = "round";
    v1079.moveTo(p676 * 129, p676 * 338);
    v1079.bezierCurveTo(p676 * 137, p676 * 336, p676 * 137, p676 * 336, p676 * 145, p676 * 334);
    v1079.bezierCurveTo(p676 * 152.5, p676 * 338, p676 * 152.5, p676 * 338, p676 * 160, p676 * 342);
    v1079.bezierCurveTo(p676 * 184, p676 * 224, p676 * 184, p676 * 224, p676 * 208, p676 * 106);
    v1079.bezierCurveTo(p676 * 197, p676 * 88, p676 * 187, p676 * 70, p676 * 186, p676 * 70);
    v1079.bezierCurveTo(p676 * 169.5, p676 * 83, p676 * 169.5, p676 * 83, p676 * 153, p676 * 96);
    v1079.closePath();
    f88(v1079, p678[3]);
    return v1078;
  }
  function f148(p679, p680, p681) {
    var v1080 = document.createElement("canvas");
    var v1081 = v1080.getContext("2d");
    v1080.width = p679 * 217;
    v1080.height = p679 * 215;
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 79, p679 * 113);
    v1081.bezierCurveTo(p679 * 135, p679 * 98, p679 * 136, p679 * 96, p679 * 142, p679 * 97);
    v1081.bezierCurveTo(p679 * 167, p679 * 106, p679 * 167, p679 * 106, p679 * 171, p679 * 109);
    v1081.bezierCurveTo(p679 * 173, p679 * 120, p679 * 173, p679 * 134, p679 * 169, p679 * 141);
    v1081.bezierCurveTo(p679 * 140, p679 * 149.5, p679 * 140, p679 * 149.5, p679 * 111, p679 * 158);
    v1081.closePath();
    f88(v1081, p681[1], p681[2], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 154, p679 * 103);
    v1081.bezierCurveTo(p679 * 167, p679 * 91, p679 * 175, p679 * 87, p679 * 176, p679 * 94);
    v1081.bezierCurveTo(p679 * 175, p679 * 102, p679 * 176, p679 * 102, p679 * 186, p679 * 103);
    v1081.bezierCurveTo(p679 * 191, p679 * 104, p679 * 192, p679 * 105, p679 * 185, p679 * 116);
    v1081.bezierCurveTo(p679 * 183, p679 * 120, p679 * 191, p679 * 124, p679 * 189, p679 * 129);
    v1081.bezierCurveTo(p679 * 185, p679 * 139, p679 * 178, p679 * 134, p679 * 166, p679 * 131);
    v1081.closePath();
    f88(v1081, p681[1], p681[2], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 60, p679 * 46);
    v1081.bezierCurveTo(p679 * 60, p679 * 34, p679 * 60, p679 * 29, p679 * 56, p679 * 19);
    v1081.bezierCurveTo(p679 * 52, p679 * 12, p679 * 52, p679 * 16, p679 * 49, p679 * 24);
    v1081.bezierCurveTo(p679 * 48, p679 * 27, p679 * 46, p679 * 28, p679 * 39, p679 * 27);
    v1081.bezierCurveTo(p679 * 33, p679 * 26, p679 * 34, p679 * 31, p679 * 35, p679 * 37);
    v1081.bezierCurveTo(p679 * 36, p679 * 41, p679 * 27, p679 * 46, p679 * 29, p679 * 52);
    v1081.bezierCurveTo(p679 * 36, p679 * 55, p679 * 35, p679 * 56, p679 * 31, p679 * 59);
    v1081.bezierCurveTo(p679 * 27, p679 * 65, p679 * 32, p679 * 64, p679 * 35, p679 * 62);
    v1081.closePath();
    f88(v1081, p681[4], p681[5], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 46, p679 * 50);
    v1081.bezierCurveTo(p679 * 51, p679 * 35, p679 * 70, p679 * 32, p679 * 78, p679 * 29);
    v1081.bezierCurveTo(p679 * 84, p679 * 27, p679 * 113, p679 * 36, p679 * 127, p679 * 41);
    v1081.bezierCurveTo(p679 * 140, p679 * 47, p679 * 147, p679 * 69, p679 * 137, p679 * 73);
    v1081.bezierCurveTo(p679 * 124, p679 * 92, p679 * 117, p679 * 92, p679 * 109, p679 * 94);
    v1081.bezierCurveTo(p679 * 101, p679 * 96, p679 * 89, p679 * 92, p679 * 65, p679 * 83);
    v1081.bezierCurveTo(p679 * 54, p679 * 80, p679 * 46, p679 * 58, p679 * 46, p679 * 51);
    v1081.closePath();
    f88(v1081, p681[4], p681[5], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 51, p679 * 40);
    v1081.bezierCurveTo(p679 * 49, p679 * 34, p679 * 49, p679 * 34, p679 * 47, p679 * 28);
    v1081.bezierCurveTo(p679 * 38, p679 * 28, p679 * 34, p679 * 27, p679 * 37, p679 * 37);
    v1081.bezierCurveTo(p679 * 43, p679 * 40.5, p679 * 43, p679 * 40.5, p679 * 49, p679 * 44);
    v1081.closePath();
    f88(v1081, p681[7]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 29, p679 * 48);
    v1081.bezierCurveTo(p679 * 38, p679 * 49, p679 * 38, p679 * 49, p679 * 47, p679 * 50);
    v1081.bezierCurveTo(p679 * 46.5, p679 * 51.5, p679 * 46.5, p679 * 51.5, p679 * 46, p679 * 53);
    v1081.bezierCurveTo(p679 * 40, p679 * 53.5, p679 * 40, p679 * 53.5, p679 * 34, p679 * 54);
    v1081.bezierCurveTo(p679 * 29, p679 * 51, p679 * 32, p679 * 51.5, p679 * 30, p679 * 49);
    v1081.closePath();
    f88(v1081, p681[7]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 89, p679 * 61);
    v1081.bezierCurveTo(p679 * 101, p679 * 70, p679 * 109, p679 * 90, p679 * 102, p679 * 90);
    v1081.bezierCurveTo(p679 * 97, p679 * 91, p679 * 87, p679 * 91, p679 * 60, p679 * 80);
    v1081.bezierCurveTo(p679 * 48, p679 * 65, p679 * 46, p679 * 56, p679 * 48, p679 * 53);
    v1081.bezierCurveTo(p679 * 50, p679 * 52, p679 * 66, p679 * 56, p679 * 89, p679 * 61);
    v1081.closePath();
    f88(v1081, p681[7]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 99, p679 * 59);
    v1081.bezierCurveTo(p679 * 115, p679 * 45, p679 * 125, p679 * 42, p679 * 129, p679 * 47);
    v1081.bezierCurveTo(p679 * 138, p679 * 56, p679 * 140, p679 * 63, p679 * 138, p679 * 67);
    v1081.bezierCurveTo(p679 * 131, p679 * 80, p679 * 122, p679 * 87, p679 * 114, p679 * 90);
    v1081.bezierCurveTo(p679 * 105, p679 * 80, p679 * 95, p679 * 62, p679 * 98, p679 * 61);
    v1081.closePath();
    f88(v1081, p681[7]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 118, p679 * 62);
    v1081.bezierCurveTo(p679 * 139, p679 * 45, p679 * 153, p679 * 40, p679 * 150, p679 * 48);
    v1081.bezierCurveTo(p679 * 145, p679 * 57, p679 * 157, p679 * 63, p679 * 157, p679 * 70);
    v1081.bezierCurveTo(p679 * 157, p679 * 74, p679 * 142, p679 * 77, p679 * 142, p679 * 85);
    v1081.bezierCurveTo(p679 * 143, p679 * 91, p679 * 141, p679 * 92, p679 * 135, p679 * 90);
    v1081.bezierCurveTo(p679 * 132, p679 * 90, p679 * 132, p679 * 96, p679 * 124, p679 * 99);
    v1081.bezierCurveTo(p679 * 118, p679 * 93, p679 * 116, p679 * 77, p679 * 116, p679 * 64);
    v1081.closePath();
    f88(v1081, p681[4], p681[5], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 90, p679 * 130);
    v1081.bezierCurveTo(p679 * 157, p679 * 115, p679 * 165, p679 * 111, p679 * 167, p679 * 115);
    v1081.bezierCurveTo(p679 * 170, p679 * 117, p679 * 171, p679 * 135, p679 * 167, p679 * 141);
    v1081.bezierCurveTo(p679 * 135.5, p679 * 149.5, p679 * 135.5, p679 * 149.5, p679 * 104, p679 * 158);
    v1081.closePath();
    f88(v1081, p681[8]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 53, p679 * 119);
    v1081.bezierCurveTo(p679 * 46, p679 * 120, p679 * 40, p679 * 118, p679 * 34, p679 * 116);
    v1081.bezierCurveTo(p679 * 28, p679 * 111, p679 * 41, p679 * 112, p679 * 39, p679 * 108);
    v1081.bezierCurveTo(p679 * 36, p679 * 100, p679 * 49, p679 * 102, p679 * 53, p679 * 95);
    v1081.bezierCurveTo(p679 * 57, p679 * 84, p679 * 58, p679 * 85, p679 * 63, p679 * 93);
    v1081.bezierCurveTo(p679 * 68, p679 * 96, p679 * 72, p679 * 94, p679 * 80, p679 * 88);
    v1081.bezierCurveTo(p679 * 80, p679 * 96, p679 * 78, p679 * 107, p679 * 66, p679 * 115);
    v1081.closePath();
    f88(v1081, p681[9], p681[10], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 118, p679 * 64);
    v1081.bezierCurveTo(p679 * 133.5, p679 * 57, p679 * 133.5, p679 * 57, p679 * 149, p679 * 50);
    v1081.bezierCurveTo(p679 * 145, p679 * 54, p679 * 154, p679 * 65, p679 * 157, p679 * 68);
    v1081.bezierCurveTo(p679 * 138.5, p679 * 66.5, p679 * 138.5, p679 * 66.5, p679 * 120, p679 * 65);
    v1081.closePath();
    f88(v1081, p681[8]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 118, p679 * 65);
    v1081.bezierCurveTo(p679 * 129, p679 * 77, p679 * 129, p679 * 77, p679 * 140, p679 * 89);
    v1081.bezierCurveTo(p679 * 131, p679 * 89, p679 * 130, p679 * 92, p679 * 128, p679 * 96);
    v1081.bezierCurveTo(p679 * 123.5, p679 * 82, p679 * 123.5, p679 * 82, p679 * 119, p679 * 68);
    v1081.closePath();
    f88(v1081, p681[8]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 51, p679 * 112);
    v1081.bezierCurveTo(p679 * 63, p679 * 108, p679 * 78, p679 * 111, p679 * 88, p679 * 112);
    v1081.bezierCurveTo(p679 * 98, p679 * 122, p679 * 117, p679 * 136, p679 * 125, p679 * 157);
    v1081.bezierCurveTo(p679 * 123, p679 * 180, p679 * 123, p679 * 185, p679 * 118, p679 * 186);
    v1081.bezierCurveTo(p679 * 101, p679 * 190, p679 * 89, p679 * 191, p679 * 79, p679 * 187);
    v1081.bezierCurveTo(p679 * 53, p679 * 165, p679 * 50, p679 * 153, p679 * 47, p679 * 144);
    v1081.bezierCurveTo(p679 * 46, p679 * 128, p679 * 46, p679 * 124, p679 * 50, p679 * 112);
    v1081.closePath();
    f88(v1081, p681[9], p681[10], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 50, p679 * 114);
    v1081.bezierCurveTo(p679 * 81, p679 * 149, p679 * 80, p679 * 147, p679 * 80, p679 * 149);
    v1081.bezierCurveTo(p679 * 82, p679 * 155, p679 * 80, p679 * 182, p679 * 74, p679 * 182);
    v1081.bezierCurveTo(p679 * 60, p679 * 172, p679 * 52, p679 * 157, p679 * 47, p679 * 144);
    v1081.closePath();
    f88(v1081, p681[11], p681[11], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 85, p679 * 152);
    v1081.bezierCurveTo(p679 * 99, p679 * 150, p679 * 109, p679 * 152, p679 * 119, p679 * 156);
    v1081.bezierCurveTo(p679 * 122, p679 * 163, p679 * 122, p679 * 174, p679 * 117, p679 * 182);
    v1081.closePath();
    v1081.bezierCurveTo(p679 * 93, p679 * 188, p679 * 82, p679 * 187, p679 * 83, p679 * 179);
    f88(v1081, p681[11], p681[11], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 104, p679 * 166);
    v1081.bezierCurveTo(p679 * 133, p679 * 165, p679 * 142, p679 * 168, p679 * 137, p679 * 173);
    v1081.bezierCurveTo(p679 * 127, p679 * 177, p679 * 137, p679 * 195, p679 * 126, p679 * 196);
    v1081.bezierCurveTo(p679 * 112, p679 * 195, p679 * 112, p679 * 194, p679 * 109, p679 * 199);
    v1081.bezierCurveTo(p679 * 105, p679 * 205, p679 * 102, p679 * 195, p679 * 96, p679 * 197);
    v1081.bezierCurveTo(p679 * 84, p679 * 201, p679 * 88, p679 * 198, p679 * 90, p679 * 187);
    v1081.bezierCurveTo(p679 * 96, p679 * 171, p679 * 97, p679 * 170, p679 * 103, p679 * 167);
    v1081.closePath();
    f88(v1081, p681[9], p681[10], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 105, p679 * 168);
    v1081.bezierCurveTo(p679 * 118, p679 * 172.5, p679 * 118, p679 * 172.5, p679 * 131, p679 * 177);
    v1081.bezierCurveTo(p679 * 133, p679 * 190, p679 * 132, p679 * 199, p679 * 116, p679 * 194);
    v1081.bezierCurveTo(p679 * 110, p679 * 182, p679 * 110, p679 * 182, p679 * 104, p679 * 170);
    v1081.closePath();
    f88(v1081, p681[10]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 102, p679 * 169);
    v1081.bezierCurveTo(p679 * 100.5, p679 * 182, p679 * 100.5, p679 * 182, p679 * 99, p679 * 195);
    v1081.bezierCurveTo(p679 * 93.5, p679 * 196.5, p679 * 93.5, p679 * 196.5, p679 * 88, p679 * 198);
    v1081.bezierCurveTo(p679 * 94, p679 * 176, p679 * 96, p679 * 174, p679 * 101, p679 * 168);
    v1081.closePath();
    f88(v1081, p681[9], p681[9], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 64, p679 * 107);
    v1081.bezierCurveTo(p679 * 64, p679 * 101, p679 * 64, p679 * 101, p679 * 64, p679 * 95);
    v1081.bezierCurveTo(p679 * 57, p679 * 86, p679 * 57, p679 * 84, p679 * 53, p679 * 97);
    v1081.bezierCurveTo(p679 * 55, p679 * 103.5, p679 * 55, p679 * 103.5, p679 * 57, p679 * 110);
    v1081.closePath();
    f88(v1081, p681[11], p681[11], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 40, p679 * 108);
    v1081.bezierCurveTo(p679 * 46.5, p679 * 111, p679 * 46.5, p679 * 111, p679 * 53, p679 * 114);
    v1081.bezierCurveTo(p679 * 50.5, p679 * 117, p679 * 50.5, p679 * 117, p679 * 48, p679 * 120);
    v1081.bezierCurveTo(p679 * 40.5, p679 * 117.5, p679 * 40.5, p679 * 117.5, p679 * 33, p679 * 115);
    v1081.bezierCurveTo(p679 * 36, p679 * 112, p679 * 36, p679 * 112, p679 * 39, p679 * 109);
    v1081.closePath();
    f88(v1081, p681[11], p681[11], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 189, p679 * 106);
    v1081.bezierCurveTo(p679 * 178.5, p679 * 110.5, p679 * 178.5, p679 * 110.5, p679 * 168, p679 * 115);
    v1081.bezierCurveTo(p679 * 168.5, p679 * 119, p679 * 168.5, p679 * 119, p679 * 169, p679 * 123);
    v1081.bezierCurveTo(p679 * 179, p679 * 124.5, p679 * 179, p679 * 124.5, p679 * 189, p679 * 126);
    v1081.bezierCurveTo(p679 * 182, p679 * 118, p679 * 183, p679 * 115, p679 * 188, p679 * 106);
    v1081.closePath();
    f88(v1081, p681[8]);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 69, p679 * 178);
    v1081.bezierCurveTo(p679 * 69, p679 * 141, p679 * 70, p679 * 136, p679 * 77, p679 * 137);
    v1081.bezierCurveTo(p679 * 88, p679 * 133, p679 * 101, p679 * 134, p679 * 108, p679 * 137);
    f88(v1081, vVVVVUndefined582, p681[3], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 55, p679 * 161);
    v1081.bezierCurveTo(p679 * 54, p679 * 124, p679 * 55, p679 * 119, p679 * 62, p679 * 119);
    v1081.bezierCurveTo(p679 * 74, p679 * 117, p679 * 85, p679 * 117, p679 * 93, p679 * 119);
    f88(v1081, undefined, p681[3], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 91, p679 * 29);
    v1081.bezierCurveTo(p679 * 74, p679 * 33, p679 * 62, p679 * 46, p679 * 57, p679 * 54);
    v1081.bezierCurveTo(p679 * 57, p679 * 63, p679 * 68, p679 * 76, p679 * 77, p679 * 87);
    f88(v1081, vVVVVUndefined1422, p681[6], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 107, p679 * 33);
    v1081.bezierCurveTo(p679 * 82, p679 * 51, p679 * 80, p679 * 52, p679 * 79, p679 * 59);
    v1081.bezierCurveTo(p679 * 78, p679 * 65, p679 * 93, p679 * 86, p679 * 101, p679 * 93);
    f88(v1081, vVVVUndefined14, p681[6], p679 * 4);
    v1081.beginPath();
    v1081.lineCap = "round";
    v1081.lineJoin = "round";
    v1081.moveTo(p679 * 130, p679 * 98);
    v1081.bezierCurveTo(p679 * 126.5, p679 * 103, p679 * 126.5, p679 * 103, p679 * 123, p679 * 108);
    v1081.bezierCurveTo(p679 * 133.5, p679 * 107, p679 * 133.5, p679 * 107, p679 * 144, p679 * 106);
    v1081.bezierCurveTo(p679 * 138.5, p679 * 110, p679 * 138.5, p679 * 110, p679 * 133, p679 * 114);
    v1081.bezierCurveTo(p679 * 142, p679 * 114, p679 * 142, p679 * 114, p679 * 151, p679 * 114);
    v1081.bezierCurveTo(p679 * 146.5, p679 * 119.5, p679 * 146.5, p679 * 119.5, p679 * 142, p679 * 125);
    v1081.bezierCurveTo(p679 * 146.5, p679 * 127, p679 * 146.5, p679 * 127, p679 * 151, p679 * 129);
    v1081.bezierCurveTo(p679 * 147.5, p679 * 132, p679 * 147.5, p679 * 132, p679 * 144, p679 * 135);
    v1081.bezierCurveTo(p679 * 148, p679 * 137, p679 * 148, p679 * 137, p679 * 152, p679 * 139);
    v1081.bezierCurveTo(p679 * 149, p679 * 142.5, p679 * 149, p679 * 142.5, p679 * 146, p679 * 146);
    f88(v1081, vVVUndefined14, p681[3], p679 * 4);
    return v1080;
  }
  function f149(p682, p683, p684) {
    var v1082 = document.createElement("canvas");
    var v1083 = v1082.getContext("2d");
    v1082.width = p682 * 290;
    v1082.height = p682 * 525;
    v1083.globalAlpha = p683 ? 0.5 : 1;
    v1083.translate(p682 * 20, p682 * 20);
    v1083.beginPath();
    v1083.lineCap = "round";
    v1083.lineJoin = "round";
    v1083.moveTo(p682 * 111, p682 * 351);
    v1083.bezierCurveTo(p682 * 128.5, p682 * 218.5, p682 * 128.5, p682 * 218.5, p682 * 146, p682 * 86);
    v1083.bezierCurveTo(p682 * 166.5, p682 * 66.5, p682 * 166.5, p682 * 66.5, p682 * 187, p682 * 47);
    v1083.bezierCurveTo(p682 * 201, p682 * 71.5, p682 * 201, p682 * 71.5, p682 * 215, p682 * 96);
    v1083.bezierCurveTo(p682 * 193, p682 * 228.5, p682 * 193, p682 * 228.5, p682 * 171, p682 * 361);
    v1083.closePath();
    f88(v1083, p684[0]);
    v1083.save();
    v1083.translate(p682 * 129.5, p682 * 424);
    v1083.rotate(0.16);
    f86(v1083, p682 * -15.5, p682 * -63, p682 * 31, p682 * 126, p682 * 10);
    v1083.restore();
    f88(v1083, p684[0]);
    f92(v1083, p682 * 121, p682 * 480, p682 * 20.396078054371138);
    f88(v1083, p684[0]);
    v1083.beginPath();
    v1083.lineCap = "round";
    v1083.lineJoin = "round";
    v1083.moveTo(p682 * 90, p682 * 311);
    v1083.bezierCurveTo(p682 * 95, p682 * 324, p682 * 95, p682 * 324, p682 * 100, p682 * 337);
    v1083.bezierCurveTo(p682 * 141.5, p682 * 345.5, p682 * 141.5, p682 * 345.5, p682 * 183, p682 * 354);
    v1083.bezierCurveTo(p682 * 193.5, p682 * 342.5, p682 * 193.5, p682 * 342.5, p682 * 204, p682 * 331);
    v1083.bezierCurveTo(p682 * 202, p682 * 354, p682 * 202, p682 * 354, p682 * 200, p682 * 377);
    v1083.bezierCurveTo(p682 * 147, p682 * 388, p682 * 106, p682 * 371, p682 * 79, p682 * 356);
    v1083.closePath();
    f88(v1083, p684[0]);
    v1083.globalAlpha = 1;
    v1083.translate(p682 * -20, p682 * -20);
    v1083.beginPath();
    v1083.lineCap = "round";
    v1083.lineJoin = "round";
    v1083.moveTo(p682 * 111, p682 * 351);
    v1083.bezierCurveTo(p682 * 128.5, p682 * 218.5, p682 * 128.5, p682 * 218.5, p682 * 146, p682 * 86);
    v1083.bezierCurveTo(p682 * 166.5, p682 * 66.5, p682 * 166.5, p682 * 66.5, p682 * 187, p682 * 47);
    v1083.bezierCurveTo(p682 * 201, p682 * 71.5, p682 * 201, p682 * 71.5, p682 * 215, p682 * 96);
    v1083.bezierCurveTo(p682 * 193, p682 * 228.5, p682 * 193, p682 * 228.5, p682 * 171, p682 * 361);
    v1083.closePath();
    f88(v1083, p684[1], p684[2], p682 * 12.5);
    v1083.save();
    v1083.translate(p682 * 129.5, p682 * 424);
    v1083.rotate(0.16);
    f86(v1083, p682 * -15.5, p682 * -63, p682 * 31, p682 * 126, p682 * 10);
    v1083.restore();
    f88(v1083, p684[4], p684[5], p682 * 12.5);
    f92(v1083, p682 * 121, p682 * 480, p682 * 20.396078054371138);
    f88(v1083, p684[4], p684[5], p682 * 12.5);
    v1083.beginPath();
    v1083.lineCap = "round";
    v1083.lineJoin = "round";
    v1083.moveTo(p682 * 90, p682 * 311);
    v1083.bezierCurveTo(p682 * 95, p682 * 324, p682 * 95, p682 * 324, p682 * 100, p682 * 337);
    v1083.bezierCurveTo(p682 * 141.5, p682 * 345.5, p682 * 141.5, p682 * 345.5, p682 * 183, p682 * 354);
    v1083.bezierCurveTo(p682 * 193.5, p682 * 342.5, p682 * 193.5, p682 * 342.5, p682 * 204, p682 * 331);
    v1083.bezierCurveTo(p682 * 202, p682 * 354, p682 * 202, p682 * 354, p682 * 200, p682 * 377);
    v1083.bezierCurveTo(p682 * 147, p682 * 388, p682 * 106, p682 * 371, p682 * 79, p682 * 356);
    v1083.closePath();
    f88(v1083, p684[1], p684[2], p682 * 12.5);
    return v1082;
  }
  function f150(p685, p686, p687) {
    var v1084 = document.createElement("canvas");
    var v1085 = v1084.getContext("2d");
    v1084.width = p685 * 290;
    v1084.height = p685 * 525;
    v1085.globalAlpha = p686 ? 0.5 : 1;
    v1085.translate(p685 * 20, p685 * 20);
    v1085.translate(p685 * -20, p685 * -20);
    v1085.save();
    v1085.translate(p685 * 132, p685 * 423);
    v1085.rotate(0.16);
    f86(v1085, p685 * -14, p685 * -61, p685 * 28, p685 * 122, p685 * 10);
    v1085.restore();
    f88(v1085, p687[0]);
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 100, p685 * 344);
    v1085.bezierCurveTo(p685 * 123, p685 * 214, p685 * 123, p685 * 214, p685 * 146, p685 * 84);
    v1085.bezierCurveTo(p685 * 166.5, p685 * 65, p685 * 166.5, p685 * 65, p685 * 187, p685 * 46);
    v1085.bezierCurveTo(p685 * 201, p685 * 71, p685 * 201, p685 * 71, p685 * 215, p685 * 96);
    v1085.bezierCurveTo(p685 * 199.5, p685 * 226.5, p685 * 199.5, p685 * 226.5, p685 * 184, p685 * 357);
    v1085.bezierCurveTo(p685 * 162.5, p685 * 362.5, p685 * 162.5, p685 * 362.5, p685 * 141, p685 * 368);
    v1085.closePath();
    f88(v1085, p687[0]);
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 75, p685 * 328);
    v1085.bezierCurveTo(p685 * 88, p685 * 336.5, p685 * 88, p685 * 336.5, p685 * 101, p685 * 345);
    v1085.bezierCurveTo(p685 * 123.5, p685 * 337.5, p685 * 123.5, p685 * 337.5, p685 * 146, p685 * 330);
    v1085.bezierCurveTo(p685 * 165, p685 * 343.5, p685 * 165, p685 * 343.5, p685 * 184, p685 * 357);
    v1085.bezierCurveTo(p685 * 198.5, p685 * 353, p685 * 198.5, p685 * 353, p685 * 213, p685 * 349);
    v1085.bezierCurveTo(p685 * 200.5, p685 * 364.5, p685 * 200.5, p685 * 364.5, p685 * 188, p685 * 380);
    v1085.bezierCurveTo(p685 * 163, p685 * 380.5, p685 * 163, p685 * 380.5, p685 * 138, p685 * 381);
    v1085.bezierCurveTo(p685 * 112, p685 * 373.5, p685 * 112, p685 * 373.5, p685 * 86, p685 * 366);
    v1085.closePath();
    f88(v1085, p687[0]);
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 121, p685 * 332);
    v1085.bezierCurveTo(p685 * 133.5, p685 * 327.5, p685 * 133.5, p685 * 327.5, p685 * 146, p685 * 323);
    v1085.bezierCurveTo(p685 * 157, p685 * 330.5, p685 * 157, p685 * 330.5, p685 * 168, p685 * 338);
    v1085.bezierCurveTo(p685 * 182.5, p685 * 219.5, p685 * 182.5, p685 * 219.5, p685 * 197, p685 * 101);
    v1085.bezierCurveTo(p685 * 190, p685 * 84.5, p685 * 190, p685 * 84.5, p685 * 183, p685 * 68);
    v1085.bezierCurveTo(p685 * 172.5, p685 * 81, p685 * 172.5, p685 * 81, p685 * 162, p685 * 94);
    v1085.closePath();
    f88(v1085, p687[0]);
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 105, p685 * 463);
    v1085.bezierCurveTo(p685 * 124.5, p685 * 466, p685 * 124.5, p685 * 466, p685 * 144, p685 * 469);
    v1085.bezierCurveTo(p685 * 145.5, p685 * 478.5, p685 * 145.5, p685 * 478.5, p685 * 147, p685 * 488);
    v1085.bezierCurveTo(p685 * 133.5, p685 * 495.5, p685 * 133.5, p685 * 495.5, p685 * 120, p685 * 503);
    v1085.bezierCurveTo(p685 * 108.5, p685 * 492, p685 * 108.5, p685 * 492, p685 * 97, p685 * 481);
    v1085.closePath();
    f88(v1085, p687[0]);
    v1085.globalAlpha = 1;
    v1085.translate(p685 * -20, p685 * -20);
    v1085.save();
    v1085.translate(p685 * 132, p685 * 423);
    v1085.rotate(0.16);
    f86(v1085, p685 * -14, p685 * -61, p685 * 28, p685 * 122, p685 * 10);
    v1085.restore();
    f88(v1085, p687[4], p687[5], p685 * 12.5);
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 100, p685 * 344);
    v1085.bezierCurveTo(p685 * 123, p685 * 214, p685 * 123, p685 * 214, p685 * 146, p685 * 84);
    v1085.bezierCurveTo(p685 * 166.5, p685 * 65, p685 * 166.5, p685 * 65, p685 * 187, p685 * 46);
    v1085.bezierCurveTo(p685 * 201, p685 * 71, p685 * 201, p685 * 71, p685 * 215, p685 * 96);
    v1085.bezierCurveTo(p685 * 199.5, p685 * 226.5, p685 * 199.5, p685 * 226.5, p685 * 184, p685 * 357);
    v1085.bezierCurveTo(p685 * 162.5, p685 * 362.5, p685 * 162.5, p685 * 362.5, p685 * 141, p685 * 368);
    v1085.closePath();
    f88(v1085, p687[1], p687[2], p685 * 12.5);
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 75, p685 * 328);
    v1085.bezierCurveTo(p685 * 88, p685 * 336.5, p685 * 88, p685 * 336.5, p685 * 101, p685 * 345);
    v1085.bezierCurveTo(p685 * 123.5, p685 * 337.5, p685 * 123.5, p685 * 337.5, p685 * 146, p685 * 330);
    v1085.bezierCurveTo(p685 * 165, p685 * 343.5, p685 * 165, p685 * 343.5, p685 * 184, p685 * 357);
    v1085.bezierCurveTo(p685 * 198.5, p685 * 353, p685 * 198.5, p685 * 353, p685 * 213, p685 * 349);
    v1085.bezierCurveTo(p685 * 200.5, p685 * 364.5, p685 * 200.5, p685 * 364.5, p685 * 188, p685 * 380);
    v1085.bezierCurveTo(p685 * 163, p685 * 380.5, p685 * 163, p685 * 380.5, p685 * 138, p685 * 381);
    v1085.bezierCurveTo(p685 * 112, p685 * 373.5, p685 * 112, p685 * 373.5, p685 * 86, p685 * 366);
    v1085.closePath();
    f88(v1085, p687[1], p687[2], p685 * 12.5);
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 121, p685 * 332);
    v1085.bezierCurveTo(p685 * 133.5, p685 * 327.5, p685 * 133.5, p685 * 327.5, p685 * 146, p685 * 323);
    v1085.bezierCurveTo(p685 * 157, p685 * 330.5, p685 * 157, p685 * 330.5, p685 * 168, p685 * 338);
    v1085.bezierCurveTo(p685 * 182.5, p685 * 219.5, p685 * 182.5, p685 * 219.5, p685 * 197, p685 * 101);
    v1085.bezierCurveTo(p685 * 190, p685 * 84.5, p685 * 190, p685 * 84.5, p685 * 183, p685 * 68);
    v1085.bezierCurveTo(p685 * 172.5, p685 * 81, p685 * 172.5, p685 * 81, p685 * 162, p685 * 94);
    v1085.closePath();
    f88(v1085, p687[3]);
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 105, p685 * 463);
    v1085.bezierCurveTo(p685 * 124.5, p685 * 466, p685 * 124.5, p685 * 466, p685 * 144, p685 * 469);
    v1085.bezierCurveTo(p685 * 145.5, p685 * 478.5, p685 * 145.5, p685 * 478.5, p685 * 147, p685 * 488);
    v1085.bezierCurveTo(p685 * 133.5, p685 * 495.5, p685 * 133.5, p685 * 495.5, p685 * 120, p685 * 503);
    v1085.bezierCurveTo(p685 * 108.5, p685 * 492, p685 * 108.5, p685 * 492, p685 * 97, p685 * 481);
    v1085.closePath();
    f88(v1085, p687[1], p687[2], p685 * 12.5);
    v1085.globalAlpha = 1;
    v1085.beginPath();
    v1085.lineCap = "round";
    v1085.lineJoin = "round";
    v1085.moveTo(p685 * 143, p685 * 346);
    v1085.bezierCurveTo(p685 * 125, p685 * 352, p685 * 125, p685 * 352, p685 * 107, p685 * 358);
    v1085.bezierCurveTo(p685 * 124, p685 * 363, p685 * 140, p685 * 368, p685 * 141, p685 * 368);
    v1085.bezierCurveTo(p685 * 156.5, p685 * 367, p685 * 156.5, p685 * 367, p685 * 172, p685 * 366);
    v1085.closePath();
    f88(v1085, p687[3]);
    return v1084;
  }
  function f151(p688, p689, p690) {
    var v1086 = document.createElement("canvas");
    var v1087 = v1086.getContext("2d");
    v1086.width = p688 * 350;
    v1086.height = p688 * 140;
    v1087.translate(p688 * -50, p688 * -150);
    v1087.beginPath();
    v1087.lineCap = "round";
    v1087.lineJoin = "round";
    v1087.moveTo(p688 * 184.5, p688 * 222.0625);
    v1087.bezierCurveTo(p688 * 185.5, p688 * 184.0625, p688 * 302.5, p688 * 171.0625, p688 * 313.5, p688 * 222.0625);
    v1087.bezierCurveTo(p688 * 330.5, p688 * 263.0625, p688 * 181.5, p688 * 274.0625, p688 * 184.5, p688 * 223.0625);
    v1087.closePath();
    f88(v1087, p690[0], p690[1], p688 * 8);
    v1087.beginPath();
    v1087.lineCap = "round";
    v1087.lineJoin = "round";
    v1087.moveTo(p688 * 131.5, p688 * 241.0625);
    v1087.bezierCurveTo(p688 * 144.5, p688 * 278.0625, p688 * 270.5, p688 * 209.0625, p688 * 228.5, p688 * 174.0625);
    v1087.bezierCurveTo(p688 * 196.5, p688 * 147.0625, p688 * 117.5, p688 * 196.0625, p688 * 131.5, p688 * 240.0625);
    v1087.closePath();
    f88(v1087, p690[0], p690[1], p688 * 8);
    f92(v1087, p688 * 270.5, p688 * 225.0625, p688 * 15.811388300841896);
    f88(v1087, p690[2]);
    f92(v1087, p688 * 243.5, p688 * 225.0625, p688 * 6.082762530298219);
    f88(v1087, p690[2]);
    f92(v1087, p688 * 255.5, p688 * 210.0625, p688 * 10.816653826391969);
    f88(v1087, p690[2]);
    f92(v1087, p688 * 167.5, p688 * 215.0625, p688 * 15.297058540778355);
    f88(v1087, p690[2]);
    f92(v1087, p688 * 176.5, p688 * 204.0625, p688 * 7.280109889280518);
    f88(v1087, p690[2]);
    f92(v1087, p688 * 206.5, p688 * 189.0625, p688 * 7.280109889280518);
    f88(v1087, p690[2]);
    v1087.beginPath();
    v1087.lineCap = "round";
    v1087.lineJoin = "round";
    v1087.moveTo(p688 * 151.5, p688 * 212.0625);
    v1087.bezierCurveTo(p688 * 161.5, p688 * 204.0625, p688 * 173.5, p688 * 214.0625, p688 * 158.5, p688 * 221.0625);
    v1087.bezierCurveTo(p688 * 145.5, p688 * 228.0625, p688 * 144.5, p688 * 216.0625, p688 * 151.5, p688 * 212.0625);
    v1087.closePath();
    f88(v1087, p690[3], p690[4], p688 * 4);
    v1087.beginPath();
    v1087.lineCap = "round";
    v1087.lineJoin = "round";
    v1087.moveTo(p688 * 194.5, p688 * 209.0625);
    v1087.bezierCurveTo(p688 * 205.5, p688 * 202.0625, p688 * 215.5, p688 * 207.0625, p688 * 199.5, p688 * 217.0625);
    v1087.bezierCurveTo(p688 * 187.5, p688 * 224.0625, p688 * 182.5, p688 * 217.0625, p688 * 194.5, p688 * 209.0625);
    v1087.closePath();
    f88(v1087, p690[3], p690[4], p688 * 4);
    v1087.beginPath();
    v1087.lineCap = "round";
    v1087.lineJoin = "round";
    v1087.moveTo(p688 * 188.5, p688 * 183.0625);
    v1087.bezierCurveTo(p688 * 201.5, p688 * 176.0625, p688 * 213.5, p688 * 187.0625, p688 * 193.5, p688 * 193.0625);
    v1087.bezierCurveTo(p688 * 185.5, p688 * 194.0625, p688 * 175.5, p688 * 189.0625, p688 * 188.5, p688 * 183.0625);
    v1087.closePath();
    f88(v1087, p690[3], p690[4], p688 * 4);
    v1087.beginPath();
    v1087.lineCap = "round";
    v1087.lineJoin = "round";
    v1087.moveTo(p688 * 261.5, p688 * 202.0625);
    v1087.bezierCurveTo(p688 * 274.5, p688 * 201.0625, p688 * 282.5, p688 * 214.0625, p688 * 261.5, p688 * 215.0625);
    v1087.bezierCurveTo(p688 * 246.5, p688 * 214.0625, p688 * 248.5, p688 * 203.0625, p688 * 261.5, p688 * 202.0625);
    v1087.closePath();
    f88(v1087, p690[3], p690[4], p688 * 4);
    v1087.beginPath();
    v1087.lineCap = "round";
    v1087.lineJoin = "round";
    v1087.moveTo(p688 * 240.5, p688 * 231.0625);
    v1087.bezierCurveTo(p688 * 255.5, p688 * 231.0625, p688 * 254.5, p688 * 243.0625, p688 * 240.5, p688 * 242.0625);
    v1087.bezierCurveTo(p688 * 225.5, p688 * 239.0625, p688 * 225.5, p688 * 232.0625, p688 * 240.5, p688 * 231.0625);
    v1087.closePath();
    f88(v1087, p690[3], p690[4], p688 * 4);
    return v1086;
  }
  function f152(p691, p692, p693) {
    var v1088 = document.createElement("canvas");
    var v1089 = v1088.getContext("2d");
    v1088.width = p691 * 321;
    v1088.height = p691 * 284;
    v1089.translate(p691 * 100, p691 * 30);
    v1089.translate(p691 * 5, p691 * 10);
    v1089.globalAlpha = p692 ? 0.5 : 1;
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 58, p691 * 33);
    v1089.bezierCurveTo(p691 * 81, p691 * 22, p691 * 93, p691 * 26, p691 * 123, p691 * 47);
    v1089.bezierCurveTo(p691 * 160, p691 * 73, p691 * 169, p691 * 80, p691 * 191, p691 * 99);
    v1089.bezierCurveTo(p691 * 202, p691 * 107, p691 * 211, p691 * 118, p691 * 195, p691 * 151);
    v1089.bezierCurveTo(p691 * 181, p691 * 183, p691 * 157, p691 * 192, p691 * 129, p691 * 174);
    v1089.bezierCurveTo(p691 * 78, p691 * 140, p691 * 68, p691 * 129, p691 * 37, p691 * 94);
    v1089.bezierCurveTo(p691 * 15, p691 * 68, p691 * 25, p691 * 52, p691 * 56, p691 * 34);
    v1089.closePath();
    f88(v1089, p693[0]);
    v1089.globalAlpha = 1;
    v1089.translate(p691 * -5, p691 * -10);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 58, p691 * 33);
    v1089.bezierCurveTo(p691 * 81, p691 * 22, p691 * 93, p691 * 26, p691 * 123, p691 * 47);
    v1089.bezierCurveTo(p691 * 160, p691 * 73, p691 * 169, p691 * 80, p691 * 191, p691 * 99);
    v1089.bezierCurveTo(p691 * 202, p691 * 107, p691 * 211, p691 * 118, p691 * 195, p691 * 151);
    v1089.bezierCurveTo(p691 * 181, p691 * 183, p691 * 157, p691 * 192, p691 * 129, p691 * 174);
    v1089.bezierCurveTo(p691 * 78, p691 * 140, p691 * 68, p691 * 129, p691 * 37, p691 * 94);
    v1089.bezierCurveTo(p691 * 15, p691 * 68, p691 * 25, p691 * 52, p691 * 56, p691 * 34);
    v1089.closePath();
    f88(v1089, p693[1], p693[2], p691 * 10);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 167, p691 * 120);
    v1089.bezierCurveTo(p691 * 196, p691 * 106, p691 * 207, p691 * 111, p691 * 199, p691 * 135);
    v1089.bezierCurveTo(p691 * 185, p691 * 172, p691 * 166, p691 * 187, p691 * 145, p691 * 179);
    v1089.bezierCurveTo(p691 * 118, p691 * 166, p691 * 127, p691 * 139, p691 * 166, p691 * 121);
    v1089.closePath();
    f88(v1089, p693[3]);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 25, p691 * 64);
    v1089.bezierCurveTo(p691 * 59, p691 * 96, p691 * 97, p691 * 128, p691 * 129, p691 * 151);
    v1089.bezierCurveTo(p691 * 126, p691 * 163, p691 * 134, p691 * 174, p691 * 142, p691 * 180);
    v1089.bezierCurveTo(p691 * 114, p691 * 170, p691 * 68, p691 * 134, p691 * 31, p691 * 85);
    v1089.bezierCurveTo(p691 * 24, p691 * 71, p691 * 24, p691 * 70, p691 * 25, p691 * 65);
    v1089.closePath();
    f88(v1089, p693[2]);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 161, p691 * 141);
    v1089.bezierCurveTo(p691 * 181, p691 * 131, p691 * 186, p691 * 135, p691 * 173, p691 * 152);
    v1089.bezierCurveTo(p691 * 163, p691 * 163, p691 * 155, p691 * 161, p691 * 151, p691 * 150);
    v1089.bezierCurveTo(p691 * 147, p691 * 140, p691 * 155, p691 * 131, p691 * 175, p691 * 125);
    v1089.bezierCurveTo(p691 * 190, p691 * 120, p691 * 196, p691 * 121, p691 * 189, p691 * 143);
    v1089.bezierCurveTo(p691 * 182, p691 * 167, p691 * 169, p691 * 174, p691 * 157, p691 * 174);
    v1089.bezierCurveTo(p691 * 138, p691 * 172, p691 * 139, p691 * 162, p691 * 140, p691 * 156);
    f88(v1089, undefined, p693[4], p691 * 4);
    v1089.translate(p691 * -100, p691 * -30);
    v1089.translate(p691 * 10, p691 * 70);
    v1089.translate(p691 * 5, p691 * 10);
    v1089.globalAlpha = p692 ? 0.5 : 1;
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 58, p691 * 33);
    v1089.bezierCurveTo(p691 * 81, p691 * 22, p691 * 93, p691 * 26, p691 * 123, p691 * 47);
    v1089.bezierCurveTo(p691 * 160, p691 * 73, p691 * 169, p691 * 80, p691 * 191, p691 * 99);
    v1089.bezierCurveTo(p691 * 202, p691 * 107, p691 * 211, p691 * 118, p691 * 195, p691 * 151);
    v1089.bezierCurveTo(p691 * 181, p691 * 183, p691 * 157, p691 * 192, p691 * 129, p691 * 174);
    v1089.bezierCurveTo(p691 * 78, p691 * 140, p691 * 68, p691 * 129, p691 * 37, p691 * 94);
    v1089.bezierCurveTo(p691 * 15, p691 * 68, p691 * 25, p691 * 52, p691 * 56, p691 * 34);
    v1089.closePath();
    f88(v1089, p693[0]);
    v1089.globalAlpha = 1;
    v1089.translate(p691 * -5, p691 * -10);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 58, p691 * 33);
    v1089.bezierCurveTo(p691 * 81, p691 * 22, p691 * 93, p691 * 26, p691 * 123, p691 * 47);
    v1089.bezierCurveTo(p691 * 160, p691 * 73, p691 * 169, p691 * 80, p691 * 191, p691 * 99);
    v1089.bezierCurveTo(p691 * 202, p691 * 107, p691 * 211, p691 * 118, p691 * 195, p691 * 151);
    v1089.bezierCurveTo(p691 * 181, p691 * 183, p691 * 157, p691 * 192, p691 * 129, p691 * 174);
    v1089.bezierCurveTo(p691 * 78, p691 * 140, p691 * 68, p691 * 129, p691 * 37, p691 * 94);
    v1089.bezierCurveTo(p691 * 15, p691 * 68, p691 * 25, p691 * 52, p691 * 56, p691 * 34);
    v1089.closePath();
    f88(v1089, p693[1], p693[2], p691 * 10);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 167, p691 * 120);
    v1089.bezierCurveTo(p691 * 196, p691 * 106, p691 * 207, p691 * 111, p691 * 199, p691 * 135);
    v1089.bezierCurveTo(p691 * 185, p691 * 172, p691 * 166, p691 * 187, p691 * 145, p691 * 179);
    v1089.bezierCurveTo(p691 * 118, p691 * 166, p691 * 127, p691 * 139, p691 * 166, p691 * 121);
    v1089.closePath();
    f88(v1089, p693[3]);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 25, p691 * 64);
    v1089.bezierCurveTo(p691 * 59, p691 * 96, p691 * 97, p691 * 128, p691 * 129, p691 * 151);
    v1089.bezierCurveTo(p691 * 126, p691 * 163, p691 * 134, p691 * 174, p691 * 142, p691 * 180);
    v1089.bezierCurveTo(p691 * 114, p691 * 170, p691 * 68, p691 * 134, p691 * 31, p691 * 85);
    v1089.bezierCurveTo(p691 * 24, p691 * 71, p691 * 24, p691 * 70, p691 * 25, p691 * 65);
    v1089.closePath();
    f88(v1089, p693[2]);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 161, p691 * 141);
    v1089.bezierCurveTo(p691 * 181, p691 * 131, p691 * 186, p691 * 135, p691 * 173, p691 * 152);
    v1089.bezierCurveTo(p691 * 163, p691 * 163, p691 * 155, p691 * 161, p691 * 151, p691 * 150);
    v1089.bezierCurveTo(p691 * 147, p691 * 140, p691 * 155, p691 * 131, p691 * 175, p691 * 125);
    v1089.bezierCurveTo(p691 * 190, p691 * 120, p691 * 196, p691 * 121, p691 * 189, p691 * 143);
    v1089.bezierCurveTo(p691 * 182, p691 * 167, p691 * 169, p691 * 174, p691 * 157, p691 * 174);
    v1089.bezierCurveTo(p691 * 138, p691 * 172, p691 * 139, p691 * 162, p691 * 140, p691 * 156);
    f88(v1089, undefined, p693[4], p691 * 4);
    v1089.translate(p691 * 20, p691 * -80);
    v1089.translate(p691 * 5, p691 * 10);
    v1089.globalAlpha = p692 ? 0.5 : 1;
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 58, p691 * 33);
    v1089.bezierCurveTo(p691 * 81, p691 * 22, p691 * 93, p691 * 26, p691 * 123, p691 * 47);
    v1089.bezierCurveTo(p691 * 160, p691 * 73, p691 * 169, p691 * 80, p691 * 191, p691 * 99);
    v1089.bezierCurveTo(p691 * 202, p691 * 107, p691 * 211, p691 * 118, p691 * 195, p691 * 151);
    v1089.bezierCurveTo(p691 * 181, p691 * 183, p691 * 157, p691 * 192, p691 * 129, p691 * 174);
    v1089.bezierCurveTo(p691 * 78, p691 * 140, p691 * 68, p691 * 129, p691 * 37, p691 * 94);
    v1089.bezierCurveTo(p691 * 15, p691 * 68, p691 * 25, p691 * 52, p691 * 56, p691 * 34);
    v1089.closePath();
    f88(v1089, p693[0]);
    v1089.globalAlpha = 1;
    v1089.translate(p691 * -5, p691 * -10);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 58, p691 * 33);
    v1089.bezierCurveTo(p691 * 81, p691 * 22, p691 * 93, p691 * 26, p691 * 123, p691 * 47);
    v1089.bezierCurveTo(p691 * 160, p691 * 73, p691 * 169, p691 * 80, p691 * 191, p691 * 99);
    v1089.bezierCurveTo(p691 * 202, p691 * 107, p691 * 211, p691 * 118, p691 * 195, p691 * 151);
    v1089.bezierCurveTo(p691 * 181, p691 * 183, p691 * 157, p691 * 192, p691 * 129, p691 * 174);
    v1089.bezierCurveTo(p691 * 78, p691 * 140, p691 * 68, p691 * 129, p691 * 37, p691 * 94);
    v1089.bezierCurveTo(p691 * 15, p691 * 68, p691 * 25, p691 * 52, p691 * 56, p691 * 34);
    v1089.closePath();
    f88(v1089, p693[1], p693[2], p691 * 10);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 167, p691 * 120);
    v1089.bezierCurveTo(p691 * 196, p691 * 106, p691 * 207, p691 * 111, p691 * 199, p691 * 135);
    v1089.bezierCurveTo(p691 * 185, p691 * 172, p691 * 166, p691 * 187, p691 * 145, p691 * 179);
    v1089.bezierCurveTo(p691 * 118, p691 * 166, p691 * 127, p691 * 139, p691 * 166, p691 * 121);
    v1089.closePath();
    f88(v1089, p693[3]);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 25, p691 * 64);
    v1089.bezierCurveTo(p691 * 59, p691 * 96, p691 * 97, p691 * 128, p691 * 129, p691 * 151);
    v1089.bezierCurveTo(p691 * 126, p691 * 163, p691 * 134, p691 * 174, p691 * 142, p691 * 180);
    v1089.bezierCurveTo(p691 * 114, p691 * 170, p691 * 68, p691 * 134, p691 * 31, p691 * 85);
    v1089.bezierCurveTo(p691 * 24, p691 * 71, p691 * 24, p691 * 70, p691 * 25, p691 * 65);
    v1089.closePath();
    f88(v1089, p693[2]);
    v1089.beginPath();
    v1089.lineCap = "round";
    v1089.lineJoin = "round";
    v1089.moveTo(p691 * 161, p691 * 141);
    v1089.bezierCurveTo(p691 * 181, p691 * 131, p691 * 186, p691 * 135, p691 * 173, p691 * 152);
    v1089.bezierCurveTo(p691 * 163, p691 * 163, p691 * 155, p691 * 161, p691 * 151, p691 * 150);
    v1089.bezierCurveTo(p691 * 147, p691 * 140, p691 * 155, p691 * 131, p691 * 175, p691 * 125);
    v1089.bezierCurveTo(p691 * 190, p691 * 120, p691 * 196, p691 * 121, p691 * 189, p691 * 143);
    v1089.bezierCurveTo(p691 * 182, p691 * 167, p691 * 169, p691 * 174, p691 * 157, p691 * 174);
    v1089.bezierCurveTo(p691 * 138, p691 * 172, p691 * 139, p691 * 162, p691 * 140, p691 * 156);
    f88(v1089, undefined, p693[4], p691 * 4);
    return v1088;
  }
  const v1090 = String.fromCharCode;
  const vV1090 = v1090(101);
  const vV10902 = v1090(118);
  const vV10903 = v1090(97);
  const vV10904 = v1090(108);
  function f153(p694, p695, p696) {
    var v1091 = document.createElement("canvas");
    var v1092 = v1091.getContext("2d");
    v1091.width = p694 * 154;
    v1091.height = p694 * 261;
    v1092.globalAlpha = p695 ? 0.5 : 1;
    v1092.translate(0, p694 * 10);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 125, p694 * 69);
    v1092.bezierCurveTo(p694 * 123.5, p694 * 141.5, p694 * 123.5, p694 * 141.5, p694 * 122, p694 * 214);
    v1092.bezierCurveTo(p694 * 123, p694 * 228, p694 * 119, p694 * 239, p694 * 102, p694 * 239);
    v1092.bezierCurveTo(p694 * 90, p694 * 238, p694 * 86, p694 * 225, p694 * 89, p694 * 197);
    v1092.bezierCurveTo(p694 * 92, p694 * 159, p694 * 92, p694 * 141, p694 * 94, p694 * 84);
    v1092.bezierCurveTo(p694 * 94, p694 * 58, p694 * 87, p694 * 50, p694 * 73, p694 * 52);
    v1092.bezierCurveTo(p694 * 53, p694 * 54, p694 * 54, p694 * 92, p694 * 34, p694 * 87);
    v1092.bezierCurveTo(p694 * 13, p694 * 85, p694 * 22, p694 * 58, p694 * 34, p694 * 40);
    v1092.bezierCurveTo(p694 * 44, p694 * 24, p694 * 68, p694 * 17, p694 * 86, p694 * 21);
    v1092.bezierCurveTo(p694 * 111, p694 * 23, p694 * 123, p694 * 39, p694 * 125, p694 * 67);
    v1092.closePath();
    f88(v1092, p696[0]);
    v1092.globalAlpha = 1;
    v1092.translate(0, p694 * -10);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 125, p694 * 69);
    v1092.bezierCurveTo(p694 * 123.5, p694 * 141.5, p694 * 123.5, p694 * 141.5, p694 * 122, p694 * 214);
    v1092.bezierCurveTo(p694 * 123, p694 * 228, p694 * 119, p694 * 239, p694 * 102, p694 * 239);
    v1092.bezierCurveTo(p694 * 90, p694 * 238, p694 * 86, p694 * 225, p694 * 89, p694 * 197);
    v1092.bezierCurveTo(p694 * 92, p694 * 159, p694 * 92, p694 * 141, p694 * 94, p694 * 84);
    v1092.bezierCurveTo(p694 * 94, p694 * 58, p694 * 87, p694 * 50, p694 * 73, p694 * 52);
    v1092.bezierCurveTo(p694 * 53, p694 * 54, p694 * 54, p694 * 92, p694 * 34, p694 * 87);
    v1092.bezierCurveTo(p694 * 13, p694 * 85, p694 * 22, p694 * 58, p694 * 34, p694 * 40);
    v1092.bezierCurveTo(p694 * 44, p694 * 24, p694 * 68, p694 * 17, p694 * 86, p694 * 21);
    v1092.bezierCurveTo(p694 * 111, p694 * 23, p694 * 123, p694 * 39, p694 * 125, p694 * 67);
    v1092.closePath();
    f88(v1092, p696[1], p696[2], p694 * 4);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 31, p694 * 43);
    v1092.bezierCurveTo(p694 * 31, p694 * 61, p694 * 43, p694 * 70, p694 * 51, p694 * 75);
    v1092.bezierCurveTo(p694 * 48, p694 * 84, p694 * 41, p694 * 89, p694 * 33, p694 * 86);
    v1092.bezierCurveTo(p694 * 23, p694 * 88, p694 * 20, p694 * 76, p694 * 23, p694 * 62);
    v1092.closePath();
    f88(v1092, p696[3]);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 45, p694 * 29);
    v1092.bezierCurveTo(p694 * 49, p694 * 45, p694 * 61, p694 * 54, p694 * 64, p694 * 55);
    v1092.bezierCurveTo(p694 * 67.5, p694 * 53, p694 * 67.5, p694 * 53, p694 * 71, p694 * 51);
    v1092.bezierCurveTo(p694 * 80, p694 * 44, p694 * 83, p694 * 33, p694 * 82, p694 * 20);
    v1092.bezierCurveTo(p694 * 59, p694 * 17, p694 * 51, p694 * 23, p694 * 45, p694 * 30);
    v1092.closePath();
    f88(v1092, p696[3]);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 86, p694 * 56);
    v1092.bezierCurveTo(p694 * 90, p694 * 33, p694 * 103, p694 * 25, p694 * 105, p694 * 27);
    v1092.bezierCurveTo(p694 * 116, p694 * 31, p694 * 121, p694 * 45, p694 * 122, p694 * 50);
    v1092.bezierCurveTo(p694 * 112, p694 * 62, p694 * 103, p694 * 63, p694 * 91, p694 * 62);
    v1092.bezierCurveTo(p694 * 89, p694 * 59.5, p694 * 89, p694 * 59.5, p694 * 87, p694 * 57);
    v1092.closePath();
    f88(v1092, p696[3]);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 93, p694 * 81);
    v1092.bezierCurveTo(p694 * 109, p694 * 82, p694 * 123, p694 * 70, p694 * 124, p694 * 63);
    v1092.bezierCurveTo(p694 * 124, p694 * 75.5, p694 * 124, p694 * 75.5, p694 * 124, p694 * 88);
    v1092.bezierCurveTo(p694 * 119, p694 * 99, p694 * 103, p694 * 103, p694 * 94, p694 * 103);
    v1092.closePath();
    f88(v1092, p696[3]);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 93, p694 * 124);
    v1092.bezierCurveTo(p694 * 108, p694 * 125, p694 * 122, p694 * 113, p694 * 124, p694 * 106);
    v1092.bezierCurveTo(p694 * 124, p694 * 119, p694 * 124, p694 * 129, p694 * 124, p694 * 132);
    v1092.bezierCurveTo(p694 * 110, p694 * 147, p694 * 94, p694 * 148, p694 * 90, p694 * 147);
    v1092.closePath();
    f88(v1092, p696[3]);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 90, p694 * 170);
    v1092.bezierCurveTo(p694 * 104, p694 * 166, p694 * 122, p694 * 158, p694 * 122, p694 * 151);
    v1092.bezierCurveTo(p694 * 122, p694 * 162.5, p694 * 122, p694 * 162.5, p694 * 122, p694 * 174);
    v1092.bezierCurveTo(p694 * 111, p694 * 191, p694 * 97, p694 * 191, p694 * 89, p694 * 191);
    v1092.closePath();
    f88(v1092, p696[3]);
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 88, p694 * 208);
    v1092.bezierCurveTo(p694 * 100, p694 * 209, p694 * 115, p694 * 205, p694 * 122, p694 * 193);
    v1092.bezierCurveTo(p694 * 122, p694 * 205.5, p694 * 122, p694 * 205.5, p694 * 122, p694 * 218);
    v1092.bezierCurveTo(p694 * 115, p694 * 229, p694 * 103, p694 * 235, p694 * 90, p694 * 228);
    v1092.bezierCurveTo(p694 * 88, p694 * 224, p694 * 88, p694 * 217, p694 * 88, p694 * 211);
    v1092.closePath();
    f88(v1092, p696[3]);
    v1092.globalAlpha = 0.4;
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 22, p694 * 81);
    v1092.bezierCurveTo(p694 * 32, p694 * 84, p694 * 41, p694 * 81, p694 * 45, p694 * 68);
    v1092.bezierCurveTo(p694 * 50, p694 * 50, p694 * 62, p694 * 40, p694 * 79, p694 * 43);
    v1092.bezierCurveTo(p694 * 95, p694 * 45, p694 * 102, p694 * 58, p694 * 101, p694 * 81);
    v1092.bezierCurveTo(p694 * 99.5, p694 * 120.5, p694 * 99.5, p694 * 120.5, p694 * 98, p694 * 160);
    v1092.bezierCurveTo(p694 * 96.5, p694 * 191.5, p694 * 96.5, p694 * 191.5, p694 * 95, p694 * 223);
    v1092.bezierCurveTo(p694 * 93, p694 * 232, p694 * 101, p694 * 235, p694 * 108, p694 * 238);
    v1092.bezierCurveTo(p694 * 100, p694 * 240, p694 * 90, p694 * 233, p694 * 90, p694 * 224);
    v1092.bezierCurveTo(p694 * 92, p694 * 157, p694 * 92, p694 * 157, p694 * 94, p694 * 90);
    v1092.bezierCurveTo(p694 * 94, p694 * 56, p694 * 89, p694 * 53, p694 * 77, p694 * 51);
    v1092.bezierCurveTo(p694 * 58, p694 * 50, p694 * 54, p694 * 59, p694 * 49, p694 * 75);
    v1092.bezierCurveTo(p694 * 44, p694 * 91, p694 * 28, p694 * 90, p694 * 23, p694 * 81);
    v1092.closePath();
    f88(v1092, p696[0]);
    v1092.globalAlpha = 1;
    v1092.beginPath();
    v1092.lineCap = "round";
    v1092.lineJoin = "round";
    v1092.moveTo(p694 * 82, p694 * 123);
    v1092.bezierCurveTo(p694 * 88, p694 * 130, p694 * 88, p694 * 127, p694 * 94, p694 * 128);
    v1092.bezierCurveTo(p694 * 91, p694 * 136, p694 * 94, p694 * 137, p694 * 99, p694 * 142);
    v1092.bezierCurveTo(p694 * 97, p694 * 149, p694 * 99, p694 * 152, p694 * 105, p694 * 155);
    v1092.bezierCurveTo(p694 * 107, p694 * 159, p694 * 113, p694 * 159, p694 * 120, p694 * 158);
    v1092.bezierCurveTo(p694 * 121, p694 * 160, p694 * 125, p694 * 163, p694 * 132, p694 * 163);
    v1092.bezierCurveTo(p694 * 133, p694 * 166, p694 * 136, p694 * 169, p694 * 138, p694 * 170);
    v1092.bezierCurveTo(p694 * 133, p694 * 171, p694 * 132, p694 * 172, p694 * 129, p694 * 174);
    v1092.bezierCurveTo(p694 * 122, p694 * 170, p694 * 120, p694 * 170, p694 * 116, p694 * 174);
    v1092.bezierCurveTo(p694 * 108, p694 * 170.5, p694 * 108, p694 * 170.5, p694 * 100, p694 * 167);
    v1092.bezierCurveTo(p694 * 95, p694 * 172, p694 * 94, p694 * 179, p694 * 95, p694 * 184);
    v1092.bezierCurveTo(p694 * 87, p694 * 185, p694 * 87, p694 * 189, p694 * 88, p694 * 194);
    v1092.bezierCurveTo(p694 * 82, p694 * 194, p694 * 81, p694 * 195, p694 * 79, p694 * 197);
    v1092.bezierCurveTo(p694 * 78, p694 * 192, p694 * 78, p694 * 191, p694 * 77, p694 * 189);
    v1092.bezierCurveTo(p694 * 81, p694 * 185, p694 * 82, p694 * 183, p694 * 80, p694 * 176);
    v1092.bezierCurveTo(p694 * 89, p694 * 170, p694 * 92, p694 * 168, p694 * 95, p694 * 163);
    v1092.bezierCurveTo(p694 * 91, p694 * 151, p694 * 88, p694 * 151, p694 * 82, p694 * 147);
    v1092.bezierCurveTo(p694 * 85, p694 * 142, p694 * 85, p694 * 137, p694 * 81, p694 * 133);
    v1092.bezierCurveTo(p694 * 84, p694 * 127, p694 * 84, p694 * 125, p694 * 82, p694 * 124);
    v1092.closePath();
    f88(v1092, p696[4], p696[5], p694 * 4);
    f92(v1092, p694 * 107, p694 * 152, p694 * 9);
    f88(v1092, p696[6]);
    f92(v1092, p694 * 105, p694 * 173, p694 * 9);
    f88(v1092, p696[6]);
    f92(v1092, p694 * 87, p694 * 161, p694 * 9);
    f88(v1092, p696[6]);
    f92(v1092, p694 * 106, p694 * 147, p694 * 4);
    f88(v1092, p696[7]);
    f92(v1092, p694 * 104, p694 * 167, p694 * 4);
    f88(v1092, p696[7]);
    f92(v1092, p694 * 86, p694 * 154, p694 * 4);
    f88(v1092, p696[7]);
    return v1091;
  }
  function f154(p697, p698, p699) {
    var v1093 = document.createElement("canvas");
    var v1094 = v1093.getContext("2d");
    v1093.width = p697 * 118;
    v1093.height = p697 * 114;
    v1094.translate(0, p697 * 10);
    f92(v1094, p697 * 42, p697 * 43, p697 * 24.758836806279895);
    f88(v1094, p699[0]);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 65, p697 * 90);
    v1094.bezierCurveTo(p697 * 72, p697 * 91, p697 * 75, p697 * 92, p697 * 71, p697 * 96);
    v1094.bezierCurveTo(p697 * 65, p697 * 98, p697 * 65, p697 * 94, p697 * 65, p697 * 91);
    v1094.closePath();
    f88(v1094, p699[0]);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 87, p697 * 45);
    v1094.bezierCurveTo(p697 * 108, p697 * 59, p697 * 100, p697 * 86, p697 * 85, p697 * 91);
    v1094.bezierCurveTo(p697 * 80, p697 * 96, p697 * 68, p697 * 95, p697 * 58, p697 * 87);
    v1094.bezierCurveTo(p697 * 53, p697 * 80, p697 * 61, p697 * 64, p697 * 66, p697 * 58);
    v1094.bezierCurveTo(p697 * 73, p697 * 48, p697 * 78, p697 * 44, p697 * 87, p697 * 45);
    v1094.closePath();
    f88(v1094, p699[0]);
    v1094.translate(0, p697 * -10);
    f92(v1094, p697 * 42, p697 * 43, p697 * 24.758836806279895);
    f88(v1094, p699[1], p699[2], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 65, p697 * 90);
    v1094.bezierCurveTo(p697 * 72, p697 * 91, p697 * 75, p697 * 92, p697 * 71, p697 * 96);
    v1094.bezierCurveTo(p697 * 65, p697 * 98, p697 * 65, p697 * 94, p697 * 65, p697 * 91);
    v1094.closePath();
    f88(v1094, p699[1], p699[2], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 87, p697 * 45);
    v1094.bezierCurveTo(p697 * 108, p697 * 59, p697 * 100, p697 * 86, p697 * 85, p697 * 91);
    v1094.bezierCurveTo(p697 * 80, p697 * 96, p697 * 68, p697 * 95, p697 * 58, p697 * 87);
    v1094.bezierCurveTo(p697 * 53, p697 * 80, p697 * 61, p697 * 64, p697 * 66, p697 * 58);
    v1094.bezierCurveTo(p697 * 73, p697 * 48, p697 * 78, p697 * 44, p697 * 87, p697 * 45);
    v1094.closePath();
    f88(v1094, p699[1], p699[2], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 52, p697 * 16);
    v1094.bezierCurveTo(p697 * 55, p697 * 19, p697 * 54, p697 * 20, p697 * 55, p697 * 22);
    v1094.bezierCurveTo(p697 * 52, p697 * 24.5, p697 * 52, p697 * 24.5, p697 * 49, p697 * 27);
    v1094.bezierCurveTo(p697 * 45, p697 * 25, p697 * 45, p697 * 25, p697 * 41, p697 * 23);
    v1094.bezierCurveTo(p697 * 45, p697 * 19, p697 * 48, p697 * 16, p697 * 52, p697 * 16);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 62, p697 * 30);
    v1094.bezierCurveTo(p697 * 66, p697 * 29, p697 * 64, p697 * 30, p697 * 66, p697 * 30);
    v1094.bezierCurveTo(p697 * 67, p697 * 31, p697 * 67, p697 * 31, p697 * 68, p697 * 32);
    v1094.bezierCurveTo(p697 * 66.5, p697 * 33.5, p697 * 66.5, p697 * 33.5, p697 * 65, p697 * 35);
    v1094.bezierCurveTo(p697 * 63.5, p697 * 32.5, p697 * 63.5, p697 * 32.5, p697 * 62, p697 * 30);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 29, p697 * 21);
    v1094.bezierCurveTo(p697 * 31, p697 * 22, p697 * 31, p697 * 26, p697 * 29, p697 * 29);
    v1094.bezierCurveTo(p697 * 26, p697 * 28.5, p697 * 26, p697 * 28.5, p697 * 23, p697 * 28);
    v1094.bezierCurveTo(p697 * 23, p697 * 26.5, p697 * 23, p697 * 26.5, p697 * 23, p697 * 25);
    v1094.bezierCurveTo(p697 * 25, p697 * 23, p697 * 25, p697 * 23, p697 * 27, p697 * 21);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 18, p697 * 36);
    v1094.bezierCurveTo(p697 * 23, p697 * 36, p697 * 24, p697 * 42, p697 * 19, p697 * 46);
    v1094.bezierCurveTo(p697 * 12, p697 * 39, p697 * 15, p697 * 38, p697 * 18, p697 * 37);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 30, p697 * 34);
    v1094.bezierCurveTo(p697 * 35, p697 * 36, p697 * 36, p697 * 39, p697 * 32, p697 * 45);
    v1094.bezierCurveTo(p697 * 25, p697 * 46, p697 * 25, p697 * 44, p697 * 30, p697 * 34);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 59, p697 * 35);
    v1094.bezierCurveTo(p697 * 58, p697 * 27, p697 * 57, p697 * 27, p697 * 52, p697 * 31);
    v1094.bezierCurveTo(p697 * 50, p697 * 36, p697 * 53, p697 * 38, p697 * 58, p697 * 36);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 63, p697 * 46);
    v1094.bezierCurveTo(p697 * 64.5, p697 * 46.5, p697 * 64.5, p697 * 46.5, p697 * 66, p697 * 47);
    v1094.bezierCurveTo(p697 * 70, p697 * 50, p697 * 70, p697 * 53, p697 * 61, p697 * 55);
    v1094.bezierCurveTo(p697 * 62, p697 * 50.5, p697 * 62, p697 * 50.5, p697 * 63, p697 * 46);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 41, p697 * 42);
    v1094.bezierCurveTo(p697 * 47, p697 * 41, p697 * 53, p697 * 47, p697 * 46, p697 * 51);
    v1094.bezierCurveTo(p697 * 38, p697 * 49, p697 * 39, p697 * 46, p697 * 41, p697 * 43);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 44, p697 * 57);
    v1094.bezierCurveTo(p697 * 54, p697 * 57, p697 * 54, p697 * 58, p697 * 55, p697 * 61);
    v1094.bezierCurveTo(p697 * 54, p697 * 63, p697 * 52, p697 * 64, p697 * 48, p697 * 65);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 20, p697 * 52);
    v1094.bezierCurveTo(p697 * 25, p697 * 51, p697 * 27, p697 * 50, p697 * 28, p697 * 54);
    v1094.bezierCurveTo(p697 * 27, p697 * 58, p697 * 24, p697 * 58, p697 * 22, p697 * 58);
    v1094.bezierCurveTo(p697 * 21, p697 * 55.5, p697 * 21, p697 * 55.5, p697 * 20, p697 * 53);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 30, p697 * 61);
    v1094.bezierCurveTo(p697 * 37, p697 * 61, p697 * 39, p697 * 63, p697 * 39, p697 * 68);
    v1094.bezierCurveTo(p697 * 36, p697 * 68.5, p697 * 36, p697 * 68.5, p697 * 33, p697 * 69);
    v1094.bezierCurveTo(p697 * 30.5, p697 * 67.5, p697 * 30.5, p697 * 67.5, p697 * 28, p697 * 66);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 88, p697 * 45);
    v1094.bezierCurveTo(p697 * 90, p697 * 46.5, p697 * 90, p697 * 46.5, p697 * 92, p697 * 48);
    v1094.bezierCurveTo(p697 * 92, p697 * 50, p697 * 92, p697 * 50, p697 * 92, p697 * 52);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 96, p697 * 53);
    v1094.bezierCurveTo(p697 * 97.5, p697 * 55, p697 * 97.5, p697 * 55, p697 * 99, p697 * 57);
    v1094.bezierCurveTo(p697 * 97.5, p697 * 59.5, p697 * 97.5, p697 * 59.5, p697 * 96, p697 * 62);
    v1094.bezierCurveTo(p697 * 93.5, p697 * 60.5, p697 * 93.5, p697 * 60.5, p697 * 91, p697 * 59);
    v1094.bezierCurveTo(p697 * 91.5, p697 * 57, p697 * 91.5, p697 * 57, p697 * 92, p697 * 55);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 92, p697 * 71);
    v1094.bezierCurveTo(p697 * 94.5, p697 * 70.5, p697 * 94.5, p697 * 70.5, p697 * 97, p697 * 70);
    v1094.bezierCurveTo(p697 * 98.5, p697 * 72.5, p697 * 98.5, p697 * 72.5, p697 * 100, p697 * 75);
    v1094.bezierCurveTo(p697 * 97, p697 * 76.5, p697 * 97, p697 * 76.5, p697 * 94, p697 * 78);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 95, p697 * 82);
    v1094.bezierCurveTo(p697 * 96, p697 * 83, p697 * 96, p697 * 83, p697 * 97, p697 * 84);
    v1094.bezierCurveTo(p697 * 97, p697 * 85.5, p697 * 97, p697 * 85.5, p697 * 97, p697 * 87);
    v1094.bezierCurveTo(p697 * 93.5, p697 * 87.5, p697 * 93.5, p697 * 87.5, p697 * 90, p697 * 88);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 86, p697 * 72);
    v1094.bezierCurveTo(p697 * 89, p697 * 76, p697 * 88, p697 * 81, p697 * 85, p697 * 82);
    v1094.bezierCurveTo(p697 * 80, p697 * 80, p697 * 82, p697 * 78, p697 * 85, p697 * 72);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 80, p697 * 86);
    v1094.bezierCurveTo(p697 * 84, p697 * 88, p697 * 86, p697 * 88, p697 * 85, p697 * 93);
    v1094.bezierCurveTo(p697 * 80, p697 * 96, p697 * 79, p697 * 96, p697 * 76, p697 * 91);
    v1094.closePath();
    f88(v1094, p699[3], p699[4], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 84, p697 * 46);
    v1094.bezierCurveTo(p697 * 93, p697 * 51, p697 * 91, p697 * 62, p697 * 80, p697 * 78);
    v1094.bezierCurveTo(p697 * 74, p697 * 86, p697 * 66, p697 * 90, p697 * 60, p697 * 86);
    v1094.bezierCurveTo(p697 * 55, p697 * 79, p697 * 57, p697 * 73, p697 * 67, p697 * 57);
    v1094.bezierCurveTo(p697 * 71, p697 * 51, p697 * 79, p697 * 44, p697 * 84, p697 * 46);
    v1094.closePath();
    f88(v1094, p699[5], p699[6], p697 * 5);
    v1094.beginPath();
    v1094.lineCap = "round";
    v1094.lineJoin = "round";
    v1094.moveTo(p697 * 76, p697 * 60);
    v1094.bezierCurveTo(p697 * 80, p697 * 66, p697 * 75, p697 * 74, p697 * 68, p697 * 74);
    v1094.bezierCurveTo(p697 * 60, p697 * 64, p697 * 68, p697 * 59, p697 * 76, p697 * 59);
    v1094.closePath();
    f88(v1094, p699[7], p699[8], p697 * 5);
    return v1093;
  }
  function f155(p700, p701, p702) {
    var v1095 = document.createElement("canvas");
    var v1096 = v1095.getContext("2d");
    var v1097 = p700 * 70;
    var v1098 = p700 * 90;
    var v1099 = p700 * 4;
    var v1100 = p700 * 5;
    v1095.width = v1097;
    v1095.height = v1098;
    v1096.save();
    v1096.translate(p700 * -80, p700 * -70 + v1100);
    v1096.globalAlpha = 0.5;
    v1096.beginPath();
    v1096.bezierCurveTo(p700 * 130, p700 * 79, p700 * 132, p700 * 86, p700 * 130, p700 * 93);
    v1096.bezierCurveTo(p700 * 128, p700 * 100, p700 * 121, p700 * 107, p700 * 120, p700 * 107);
    v1096.bezierCurveTo(p700 * 120, p700 * 107, p700 * 115, p700 * 98, p700 * 115, p700 * 92);
    v1096.bezierCurveTo(p700 * 115, p700 * 86, p700 * 119, p700 * 76, p700 * 127, p700 * 73);
    v1096.closePath();
    f88(v1096, "#0d1b1c");
    v1096.restore();
    v1096.save();
    v1096.translate(p700 * -80, p700 * -70 + v1100);
    v1096.globalAlpha = 0.5;
    v1096.beginPath();
    v1096.bezierCurveTo(p700 * 112, p700 * 109, p700 * 111, p700 * 100, p700 * 106, p700 * 93);
    v1096.bezierCurveTo(p700 * 104, p700 * 90, p700 * 91, p700 * 87, p700 * 91, p700 * 87);
    v1096.bezierCurveTo(p700 * 91, p700 * 88, p700 * 91, p700 * 96, p700 * 94, p700 * 102);
    v1096.bezierCurveTo(p700 * 97, p700 * 108, p700 * 106, p700 * 112, p700 * 113, p700 * 112);
    v1096.closePath();
    f88(v1096, "#0d1b1c");
    v1096.restore();
    v1096.save();
    v1096.translate(p700 * -80, p700 * -70 + v1100);
    v1096.globalAlpha = 0.5;
    v1096.beginPath();
    v1096.bezierCurveTo(p700 * 108, p700 * 120, p700 * 100, p700 * 119, p700 * 91, p700 * 127);
    v1096.bezierCurveTo(p700 * 83, p700 * 134, p700 * 82, p700 * 146, p700 * 83, p700 * 146);
    v1096.bezierCurveTo(p700 * 84, p700 * 146, p700 * 98, p700 * 142, p700 * 103, p700 * 138);
    v1096.bezierCurveTo(p700 * 107, p700 * 135, p700 * 110, p700 * 130, p700 * 112, p700 * 121);
    v1096.closePath();
    f88(v1096, "#0d1b1c");
    v1096.restore();
    v1096.save();
    v1096.translate(p700 * 3, p700 * -93 + v1100);
    v1096.rotate(Math.PI / 5);
    v1096.globalAlpha = 0.5;
    v1096.beginPath();
    v1096.bezierCurveTo(p700 * 130, p700 * 79, p700 * 132, p700 * 86, p700 * 130, p700 * 93);
    v1096.bezierCurveTo(p700 * 128, p700 * 100, p700 * 121, p700 * 107, p700 * 120, p700 * 107);
    v1096.bezierCurveTo(p700 * 120, p700 * 107, p700 * 115, p700 * 98, p700 * 115, p700 * 92);
    v1096.bezierCurveTo(p700 * 115, p700 * 86, p700 * 119, p700 * 76, p700 * 127, p700 * 73);
    v1096.closePath();
    f88(v1096, "#0d1b1c");
    v1096.restore();
    v1096.save();
    v1096.translate(p700 * -80, p700 * -70);
    v1096.globalAlpha = 1;
    v1096.beginPath();
    v1096.bezierCurveTo(p700 * 130, p700 * 79, p700 * 132, p700 * 86, p700 * 130, p700 * 93);
    v1096.bezierCurveTo(p700 * 128, p700 * 100, p700 * 121, p700 * 107, p700 * 120, p700 * 107);
    v1096.bezierCurveTo(p700 * 120, p700 * 107, p700 * 115, p700 * 98, p700 * 115, p700 * 92);
    v1096.bezierCurveTo(p700 * 115, p700 * 86, p700 * 119, p700 * 76, p700 * 127, p700 * 73);
    v1096.closePath();
    f88(v1096, p702[0], p702[1], v1099);
    v1096.restore();
    v1096.save();
    v1096.translate(p700 * -80, p700 * -70);
    v1096.globalAlpha = 1;
    v1096.beginPath();
    v1096.bezierCurveTo(p700 * 112, p700 * 109, p700 * 111, p700 * 100, p700 * 106, p700 * 93);
    v1096.bezierCurveTo(p700 * 104, p700 * 90, p700 * 91, p700 * 87, p700 * 91, p700 * 87);
    v1096.bezierCurveTo(p700 * 91, p700 * 88, p700 * 91, p700 * 96, p700 * 94, p700 * 102);
    v1096.bezierCurveTo(p700 * 97, p700 * 108, p700 * 106, p700 * 112, p700 * 113, p700 * 112);
    v1096.closePath();
    f88(v1096, p702[0], p702[1], v1099);
    v1096.restore();
    v1096.save();
    v1096.translate(p700 * -80, p700 * -70);
    v1096.globalAlpha = 1;
    v1096.beginPath();
    v1096.bezierCurveTo(p700 * 108, p700 * 120, p700 * 100, p700 * 119, p700 * 91, p700 * 127);
    v1096.bezierCurveTo(p700 * 83, p700 * 134, p700 * 82, p700 * 146, p700 * 83, p700 * 146);
    v1096.bezierCurveTo(p700 * 84, p700 * 146, p700 * 98, p700 * 142, p700 * 103, p700 * 138);
    v1096.bezierCurveTo(p700 * 107, p700 * 135, p700 * 110, p700 * 130, p700 * 112, p700 * 121);
    v1096.closePath();
    f88(v1096, p702[0], p702[1], v1099);
    v1096.restore();
    v1096.save();
    v1096.translate(p700 * 3, p700 * -93);
    v1096.rotate(Math.PI / 5);
    v1096.globalAlpha = 1;
    v1096.beginPath();
    v1096.bezierCurveTo(p700 * 130, p700 * 79, p700 * 132, p700 * 86, p700 * 130, p700 * 93);
    v1096.bezierCurveTo(p700 * 128, p700 * 100, p700 * 121, p700 * 107, p700 * 120, p700 * 107);
    v1096.bezierCurveTo(p700 * 120, p700 * 107, p700 * 115, p700 * 98, p700 * 115, p700 * 92);
    v1096.bezierCurveTo(p700 * 115, p700 * 86, p700 * 119, p700 * 76, p700 * 127, p700 * 73);
    v1096.closePath();
    f88(v1096, p702[0], p702[1], v1099);
    v1096.restore();
    return v1095;
  }
  const v1101 = String.fromCharCode;
  const vV1101 = v1101(101);
  const vV11012 = v1101(118);
  const vV11013 = v1101(97);
  const vV11014 = v1101(108);
  function f156(p703, p704, p705) {
    var v1102 = document.createElement("canvas");
    var v1103 = v1102.getContext("2d");
    var v1104 = p703 * 220;
    var v1105 = p703 * 230;
    var v1106 = p703 * 100;
    var v1107 = v1106 / 4;
    var v1108 = p703 * 20;
    v1102.width = v1104;
    v1102.height = v1105;
    v1103.translate(v1104 / 2, v1105 / 2 + v1108);
    v1103.globalAlpha = 0.5;
    f89(v1103, 7, v1106, v1107);
    f88(v1103, p705[0]);
    v1103.globalAlpha = 1;
    v1103.translate(0, -v1108);
    f89(v1103, 7, v1106, v1107);
    f88(v1103, p705[1]);
    f89(v1103, 6, v1106 * 0.65, v1107 * 0.65);
    f88(v1103, p705[2]);
    return v1102;
  }
  function f157(p706, p707, p708, p709, p710, p711, p712, p713, p714, p715, p716 = 0) {
    var v1109 = document.createElement("canvas");
    var v1110 = v1109.getContext("2d");
    p711 = p711 ? p706 * p711 : 0;
    var v1111 = Math.floor(p708 * p706);
    v1110.font = v1111 + "px Baloo Paaji";
    v1110.lineJoin = "round";
    p713 *= p706;
    var v1112 = p712 ? p713 * 2 : 0;
    if (p714) {
      var v1113 = Math.min(v1110.measureText(p707).width + p706 * 2 + v1112, p714);
    } else {
      v1113 = v1110.measureText(p707).width + p706 * 2 + v1112 + p706 * p716 * 2;
    }
    v1111 = p706 * (v1111 + p711 + p716) + v1112;
    v1109.width = v1113;
    v1109.height = v1111;
    if (p712) {
      v1110.fillStyle = p712;
      f86(v1110, 0, 0, v1113, v1111, p713 * 2);
      v1110.fill();
      v1110.translate(p713, p713);
    }
    v1110.textBaseline = "middle";
    v1110.font = p708 + "px Baloo Paaji";
    v1110.lineJoin = "round";
    if (p710) {
      v1110.beginPath();
      v1110.fillStyle = p710;
      v1110.fillText(p707, 0, v1111 / 2 + p711 - v1112 / 2, v1113);
    }
    v1110.beginPath();
    if (p715) {
      v1110.strokeStyle = p715;
      v1110.lineWidth = p716;
      v1110.strokeText(p707, p716, (v1111 - v1112) / 2, v1113);
    }
    v1110.fillStyle = p709;
    v1110.fillText(p707, p716, (v1111 - v1112) / 2, v1113);
    return v1109;
  }
  function f158(p717, p718, p719) {
    var v1114 = document.createElement("canvas");
    var v1115 = v1114.getContext("2d");
    var v1116 = p717 * 170;
    var v1117 = p717 * 172;
    var v1118 = v1116 / 2;
    var v1119 = v1117 / 2;
    v1114.width = v1116;
    v1114.height = v1117;
    v1115.translate(v1118, v1119 + p717 * 7);
    v1115.globalAlpha = p718 ? 0.5 : 0;
    f92(v1115, 0, 0, p717 * 60);
    f88(v1115, p719[0]);
    v1115.globalAlpha = 1;
    v1115.translate(0, p717 * -7);
    v1115.save();
    for (var v1120 = 0; v1120 < 10; v1120++) {
      v1115.rotate(Math.PI / 5);
      v1115.save();
      v1115.translate(p717 * 65, 0);
      f89(v1115, 3, p717 * 20, p717 * 4);
      f88(v1115, p719[1], p719[2], p717 * 4);
      v1115.restore();
    }
    v1115.restore();
    f92(v1115, 0, 0, p717 * 60);
    f88(v1115, p719[3], p719[4], p717 * 4);
    f92(v1115, 0, 0, p717 * 40);
    f88(v1115, p719[5]);
    f92(v1115, 0, 0, p717 * 25);
    f88(v1115, p719[6], p719[7], p717 * 8);
    return v1114;
  }
  function f159(p720, p721, p722) {
    var v1121 = document.createElement("canvas");
    var v1122 = v1121.getContext("2d");
    v1121.width = p720 * 220;
    v1121.height = p720 * 180;
    v1122.globalAlpha = p721 ? 0.5 : 1;
    v1122.translate(p720 * -90, p720 * -150);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 104, p720 * 237.8000030517578);
    v1122.bezierCurveTo(p720 * 110, p720 * 237.8000030517578, p720 * 110, p720 * 237.8000030517578, p720 * 116, p720 * 237.8000030517578);
    v1122.bezierCurveTo(p720 * 116, p720 * 241.8000030517578, p720 * 116, p720 * 241.8000030517578, p720 * 116, p720 * 245.8000030517578);
    v1122.bezierCurveTo(p720 * 115, p720 * 245.3000030517578, p720 * 115, p720 * 245.3000030517578, p720 * 114, p720 * 244.8000030517578);
    v1122.bezierCurveTo(p720 * 109.5, p720 * 244.8000030517578, p720 * 109.5, p720 * 244.8000030517578, p720 * 105, p720 * 244.8000030517578);
    v1122.closePath();
    f88(v1122, p722[5], p722[5], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 115, p720 * 211.20000457763672);
    v1122.bezierCurveTo(p720 * 106, p720 * 216.20000457763672, p720 * 101, p720 * 234.20000457763672, p720 * 102, p720 * 241.20000457763672);
    v1122.bezierCurveTo(p720 * 102, p720 * 260.2000045776367, p720 * 115, p720 * 269.2000045776367, p720 * 115, p720 * 269.2000045776367);
    v1122.bezierCurveTo(p720 * 116, p720 * 265.2000045776367, p720 * 115.5, p720 * 265.2000045776367, p720 * 116, p720 * 261.2000045776367);
    v1122.bezierCurveTo(p720 * 112, p720 * 264, p720 * 108, p720 * 254, p720 * 106, p720 * 242);
    v1122.bezierCurveTo(p720 * 105, p720 * 232, p720 * 110, p720 * 222, p720 * 115, p720 * 218);
    v1122.bezierCurveTo(p720 * 116, p720 * 216.75, p720 * 115.5, p720 * 217.375, p720 * 116, p720 * 216.75);
    v1122.closePath();
    f88(v1122, p722[5], p722[5], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 120, p720 * 207);
    v1122.bezierCurveTo(p720 * 115, p720 * 206, p720 * 114, p720 * 209, p720 * 114, p720 * 211);
    v1122.bezierCurveTo(p720 * 114, p720 * 268, p720 * 114, p720 * 241, p720 * 114, p720 * 271);
    v1122.bezierCurveTo(p720 * 115, p720 * 276, p720 * 118, p720 * 276, p720 * 120, p720 * 276);
    v1122.bezierCurveTo(p720 * 122, p720 * 273, p720 * 120.5, p720 * 274.5, p720 * 121, p720 * 273);
    v1122.bezierCurveTo(p720 * 121, p720 * 241, p720 * 121, p720 * 241, p720 * 121, p720 * 209);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 284, p720 * 238);
    v1122.bezierCurveTo(p720 * 289.5, p720 * 238, p720 * 289.5, p720 * 238, p720 * 295, p720 * 238);
    v1122.bezierCurveTo(p720 * 295, p720 * 241.5, p720 * 295, p720 * 241.5, p720 * 295, p720 * 245);
    v1122.bezierCurveTo(p720 * 289.5, p720 * 245, p720 * 289.5, p720 * 245, p720 * 284, p720 * 245);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 283, p720 * 211);
    v1122.bezierCurveTo(p720 * 293, p720 * 216, p720 * 297, p720 * 231, p720 * 297, p720 * 241);
    v1122.bezierCurveTo(p720 * 298, p720 * 254, p720 * 290, p720 * 265, p720 * 284, p720 * 269);
    v1122.bezierCurveTo(p720 * 283, p720 * 266, p720 * 283.5, p720 * 266, p720 * 283, p720 * 263);
    v1122.bezierCurveTo(p720 * 290, p720 * 260, p720 * 292, p720 * 251, p720 * 293, p720 * 242);
    v1122.bezierCurveTo(p720 * 292, p720 * 223, p720 * 289, p720 * 224, p720 * 284, p720 * 218);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 280, p720 * 206);
    v1122.bezierCurveTo(p720 * 284, p720 * 206, p720 * 285, p720 * 208, p720 * 285, p720 * 211);
    v1122.bezierCurveTo(p720 * 285, p720 * 241.5, p720 * 285, p720 * 241.5, p720 * 285, p720 * 272);
    v1122.bezierCurveTo(p720 * 284, p720 * 275, p720 * 284, p720 * 275, p720 * 280, p720 * 275);
    v1122.bezierCurveTo(p720 * 279, p720 * 273.5, p720 * 279, p720 * 273.5, p720 * 278, p720 * 272);
    v1122.bezierCurveTo(p720 * 278, p720 * 240.5, p720 * 278, p720 * 240.5, p720 * 278, p720 * 209);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 138, p720 * 298.40000915527344);
    v1122.bezierCurveTo(p720 * 141, p720 * 311.40000915527344, p720 * 151, p720 * 314.40000915527344, p720 * 162, p720 * 316.40000915527344);
    v1122.bezierCurveTo(p720 * 224, p720 * 316.40000915527344, p720 * 200, p720 * 315.90000915527344, p720 * 238, p720 * 315.40000915527344);
    v1122.bezierCurveTo(p720 * 254, p720 * 316.40000915527344, p720 * 261, p720 * 306.40000915527344, p720 * 264, p720 * 298.40000915527344);
    v1122.bezierCurveTo(p720 * 255, p720 * 304.40000915527344, p720 * 250, p720 * 306.40000915527344, p720 * 244, p720 * 306.40000915527344);
    v1122.bezierCurveTo(p720 * 201, p720 * 306.90000915527344, p720 * 201, p720 * 306.90000915527344, p720 * 158, p720 * 307.40000915527344);
    v1122.bezierCurveTo(p720 * 150, p720 * 306.40000915527344, p720 * 148, p720 * 306.40000915527344, p720 * 139, p720 * 300.40000915527344);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 161, p720 * 177.5999984741211);
    v1122.bezierCurveTo(p720 * 130, p720 * 175.5999984741211, p720 * 123, p720 * 190.5999984741211, p720 * 122, p720 * 205.5999984741211);
    v1122.bezierCurveTo(p720 * 121, p720 * 277.5999984741211, p720 * 122, p720 * 242.5999984741211, p720 * 122, p720 * 279.5999984741211);
    v1122.bezierCurveTo(p720 * 128, p720 * 297.5999984741211, p720 * 137, p720 * 299.5999984741211, p720 * 143, p720 * 300.5999984741211);
    v1122.bezierCurveTo(p720 * 163, p720 * 301.0999984741211, p720 * 163, p720 * 301.0999984741211, p720 * 183, p720 * 301.5999984741211);
    v1122.bezierCurveTo(p720 * 150, p720 * 300.5999984741211, p720 * 135, p720 * 290.5999984741211, p720 * 134, p720 * 267.5999984741211);
    v1122.bezierCurveTo(p720 * 133, p720 * 245.5999984741211, p720 * 146, p720 * 235.5999984741211, p720 * 164, p720 * 235.5999984741211);
    v1122.bezierCurveTo(p720 * 206, p720 * 236.0999984741211, p720 * 206, p720 * 236.0999984741211, p720 * 248, p720 * 236.5999984741211);
    v1122.bezierCurveTo(p720 * 266, p720 * 243.5999984741211, p720 * 268, p720 * 259.5999984741211, p720 * 267, p720 * 266.5999984741211);
    v1122.bezierCurveTo(p720 * 266, p720 * 288.5999984741211, p720 * 251, p720 * 294.5999984741211, p720 * 244, p720 * 297.5999984741211);
    v1122.bezierCurveTo(p720 * 228.5, p720 * 299.5999984741211, p720 * 228.5, p720 * 299.5999984741211, p720 * 213, p720 * 301.5999984741211);
    v1122.bezierCurveTo(p720 * 236, p720 * 301.0999984741211, p720 * 236, p720 * 301.0999984741211, p720 * 259, p720 * 300.5999984741211);
    v1122.bezierCurveTo(p720 * 272, p720 * 295.5999984741211, p720 * 277, p720 * 288.5999984741211, p720 * 278, p720 * 271.5999984741211);
    v1122.bezierCurveTo(p720 * 277.5, p720 * 236.5999984741211, p720 * 277.5, p720 * 236.5999984741211, p720 * 277, p720 * 201.5999984741211);
    v1122.bezierCurveTo(p720 * 276, p720 * 186.5999984741211, p720 * 265, p720 * 178.5999984741211, p720 * 254, p720 * 177.5999984741211);
    v1122.bezierCurveTo(p720 * 247.5, p720 * 177.5999984741211, p720 * 247.5, p720 * 177.5999984741211, p720 * 241, p720 * 177.5999984741211);
    v1122.bezierCurveTo(p720 * 255, p720 * 202.5999984741211, p720 * 214, p720 * 217.5999984741211, p720 * 201, p720 * 215.5999984741211);
    v1122.bezierCurveTo(p720 * 170, p720 * 215.5999984741211, p720 * 152, p720 * 197.5999984741211, p720 * 161, p720 * 178.5999984741211);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 162, p720 * 175.5999984741211);
    v1122.bezierCurveTo(p720 * 153, p720 * 176.0999984741211, p720 * 153, p720 * 176.0999984741211, p720 * 144, p720 * 176.5999984741211);
    v1122.bezierCurveTo(p720 * 125, p720 * 178.5999984741211, p720 * 121, p720 * 196.5999984741211, p720 * 121, p720 * 207.5999984741211);
    v1122.bezierCurveTo(p720 * 121, p720 * 243.20000076293945, p720 * 121, p720 * 243.20000076293945, p720 * 121, p720 * 278.8000030517578);
    v1122.bezierCurveTo(p720 * 126, p720 * 298.8000030517578, p720 * 137, p720 * 300.8000030517578, p720 * 146, p720 * 302.8000030517578);
    v1122.bezierCurveTo(p720 * 200.5, p720 * 302.8000030517578, p720 * 200.5, p720 * 302.8000030517578, p720 * 255, p720 * 302.8000030517578);
    v1122.bezierCurveTo(p720 * 271, p720 * 301.8000030517578, p720 * 279, p720 * 288.8000030517578, p720 * 279, p720 * 273.8000030517578);
    v1122.bezierCurveTo(p720 * 279, p720 * 236.8000030517578, p720 * 279, p720 * 236.8000030517578, p720 * 279, p720 * 199.8000030517578);
    v1122.bezierCurveTo(p720 * 274, p720 * 178.8000030517578, p720 * 263, p720 * 177.8000030517578, p720 * 255, p720 * 175.8000030517578);
    v1122.bezierCurveTo(p720 * 248, p720 * 175.8000030517578, p720 * 248, p720 * 175.8000030517578, p720 * 241, p720 * 175.8000030517578);
    v1122.bezierCurveTo(p720 * 240, p720 * 175.8000030517578, p720 * 240, p720 * 175.8000030517578, p720 * 239, p720 * 175.8000030517578);
    v1122.bezierCurveTo(p720 * 254, p720 * 200.8000030517578, p720 * 222, p720 * 211.8000030517578, p720 * 202, p720 * 212.8000030517578);
    v1122.bezierCurveTo(p720 * 168, p720 * 213.8000030517578, p720 * 151, p720 * 190.8000030517578, p720 * 163, p720 * 176.8000030517578);
    v1122.closePath();
    f88(v1122, vVVVUndefined113, p722[4], p720 * 6);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 198, p720 * 161.4000015258789);
    v1122.bezierCurveTo(p720 * 198, p720 * 186.9000015258789, p720 * 198, p720 * 186.9000015258789, p720 * 198, p720 * 212.4000015258789);
    v1122.bezierCurveTo(p720 * 201, p720 * 212.4000015258789, p720 * 201, p720 * 212.4000015258789, p720 * 204, p720 * 212.4000015258789);
    v1122.bezierCurveTo(p720 * 204, p720 * 186.9000015258789, p720 * 204, p720 * 186.9000015258789, p720 * 204, p720 * 161.4000015258789);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 161, p720 * 194);
    v1122.bezierCurveTo(p720 * 188, p720 * 169, p720 * 231, p720 * 179, p720 * 241, p720 * 194);
    v1122.bezierCurveTo(p720 * 239.5, p720 * 196, p720 * 239.5, p720 * 196, p720 * 238, p720 * 198);
    v1122.bezierCurveTo(p720 * 221, p720 * 179, p720 * 182, p720 * 182, p720 * 165, p720 * 198);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 157, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 162, p720 * 150.80000019073486, p720 * 241, p720 * 150.80000019073486, p720 * 245, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 242, p720 * 224.80000019073486, p720 * 162, p720 * 228.80000019073486, p720 * 157, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 159, p720 * 188.80000019073486, p720 * 159, p720 * 188.80000019073486, p720 * 161, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 168, p720 * 216.80000019073486, p720 * 231, p720 * 218.80000019073486, p720 * 241, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 236, p720 * 156.80000019073486, p720 * 169, p720 * 152.80000019073486, p720 * 161, p720 * 188.80000019073486);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 156, p720 * 188);
    v1122.bezierCurveTo(p720 * 160, p720 * 164, p720 * 183, p720 * 159, p720 * 201, p720 * 158);
    v1122.bezierCurveTo(p720 * 232, p720 * 159, p720 * 244, p720 * 174, p720 * 246, p720 * 188);
    v1122.bezierCurveTo(p720 * 245, p720 * 212, p720 * 213, p720 * 219, p720 * 201, p720 * 218);
    v1122.bezierCurveTo(p720 * 181, p720 * 221, p720 * 158, p720 * 207, p720 * 156, p720 * 190);
    v1122.closePath();
    f88(v1122, vVVVVVVUndefined142, p722[4], p720 * 6);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 162, p720 * 189);
    v1122.bezierCurveTo(p720 * 166, p720 * 170, p720 * 185, p720 * 165, p720 * 201, p720 * 164);
    v1122.bezierCurveTo(p720 * 227, p720 * 165, p720 * 240, p720 * 178, p720 * 239, p720 * 188);
    v1122.bezierCurveTo(p720 * 239, p720 * 204, p720 * 210, p720 * 210, p720 * 201, p720 * 210);
    v1122.bezierCurveTo(p720 * 182, p720 * 211, p720 * 166, p720 * 200, p720 * 162, p720 * 190);
    v1122.closePath();
    f88(v1122, vUndefined, p722[4], p720 * 6);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 131, p720 * 262);
    v1122.bezierCurveTo(p720 * 136, p720 * 241, p720 * 144, p720 * 236, p720 * 158, p720 * 233);
    v1122.bezierCurveTo(p720 * 200.5, p720 * 233, p720 * 229, p720 * 232, p720 * 243, p720 * 233);
    v1122.bezierCurveTo(p720 * 259, p720 * 235, p720 * 267, p720 * 248, p720 * 269, p720 * 260);
    v1122.bezierCurveTo(p720 * 269, p720 * 266.5, p720 * 269, p720 * 266.5, p720 * 269, p720 * 273);
    v1122.bezierCurveTo(p720 * 265, p720 * 290, p720 * 251, p720 * 297, p720 * 242, p720 * 298);
    v1122.bezierCurveTo(p720 * 202, p720 * 298, p720 * 202, p720 * 298, p720 * 162, p720 * 298);
    v1122.bezierCurveTo(p720 * 148, p720 * 298, p720 * 136, p720 * 289, p720 * 132, p720 * 273);
    v1122.bezierCurveTo(p720 * 131.5, p720 * 268, p720 * 131.5, p720 * 268, p720 * 131, p720 * 263);
    v1122.bezierCurveTo(p720 * 135, p720 * 263, p720 * 135, p720 * 263, p720 * 139, p720 * 263);
    v1122.bezierCurveTo(p720 * 139, p720 * 281, p720 * 151, p720 * 287, p720 * 160, p720 * 290);
    v1122.bezierCurveTo(p720 * 200.5, p720 * 290, p720 * 200.5, p720 * 290, p720 * 241, p720 * 290);
    v1122.bezierCurveTo(p720 * 252, p720 * 290, p720 * 257, p720 * 281, p720 * 262, p720 * 271);
    v1122.bezierCurveTo(p720 * 261.5, p720 * 267, p720 * 261.5, p720 * 267, p720 * 261, p720 * 263);
    v1122.bezierCurveTo(p720 * 260, p720 * 249, p720 * 251, p720 * 242, p720 * 241, p720 * 241);
    v1122.bezierCurveTo(p720 * 240.5, p720 * 240.5, p720 * 240.5, p720 * 240.5, p720 * 240, p720 * 240);
    v1122.bezierCurveTo(p720 * 200, p720 * 240, p720 * 200, p720 * 240, p720 * 160, p720 * 240);
    v1122.bezierCurveTo(p720 * 145, p720 * 244, p720 * 142, p720 * 250, p720 * 139, p720 * 264);
    v1122.closePath();
    f88(v1122, p722[4], p722[4], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 130, p720 * 264);
    v1122.bezierCurveTo(p720 * 132, p720 * 244, p720 * 144, p720 * 235, p720 * 157, p720 * 232);
    v1122.bezierCurveTo(p720 * 245, p720 * 232, p720 * 201, p720 * 232, p720 * 245, p720 * 232);
    v1122.bezierCurveTo(p720 * 264, p720 * 235, p720 * 269, p720 * 251, p720 * 270, p720 * 264);
    v1122.bezierCurveTo(p720 * 272, p720 * 291, p720 * 248, p720 * 299, p720 * 242, p720 * 299);
    v1122.bezierCurveTo(p720 * 200, p720 * 299, p720 * 200, p720 * 299, p720 * 158, p720 * 299);
    v1122.bezierCurveTo(p720 * 139, p720 * 298, p720 * 130, p720 * 276, p720 * 130, p720 * 265);
    v1122.closePath();
    f88(v1122, undefined, p722[4], p720 * 6);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 140, p720 * 265.33333587646484);
    v1122.bezierCurveTo(p720 * 141, p720 * 250.33333587646484, p720 * 148, p720 * 244.33333587646484, p720 * 160, p720 * 241.33333587646484);
    v1122.bezierCurveTo(p720 * 200, p720 * 241.33333587646484, p720 * 200, p720 * 241.33333587646484, p720 * 240, p720 * 241.33333587646484);
    v1122.bezierCurveTo(p720 * 256, p720 * 243.33333587646484, p720 * 260, p720 * 255.33333587646484, p720 * 260, p720 * 265.33333587646484);
    v1122.bezierCurveTo(p720 * 261, p720 * 281.33333587646484, p720 * 247, p720 * 289.33333587646484, p720 * 240, p720 * 289.33333587646484);
    v1122.bezierCurveTo(p720 * 161, p720 * 289.33333587646484, p720 * 200.5, p720 * 289.33333587646484, p720 * 161, p720 * 289.33333587646484);
    v1122.bezierCurveTo(p720 * 149, p720 * 288.33333587646484, p720 * 142, p720 * 278.33333587646484, p720 * 140, p720 * 266.33333587646484);
    v1122.closePath();
    f88(v1122, undefined, p722[4], p720 * 6);
    v1122.globalAlpha = 0.5;
    v1122.scale(1, 1);
    v1122.translate(p720 * 105, p720 * 155);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 59.27557373046875, p720 * 20.406280517578125);
    v1122.bezierCurveTo(p720 * 74.27557373046875, p720 * 5.406280517578125, p720 * 90.27557373046875, p720 * 6.406280517578125, p720 * 99.27557373046875, p720 * 5.406280517578125);
    v1122.bezierCurveTo(p720 * 120.27557373046875, p720 * 5.406280517578125, p720 * 126.27557373046875, p720 * 10.406280517578125, p720 * 136.27557373046875, p720 * 20.406280517578125);
    v1122.bezierCurveTo(p720 * 157.77557373046875, p720 * 37.906280517578125, p720 * 157.77557373046875, p720 * 37.906280517578125, p720 * 179.27557373046875, p720 * 55.406280517578125);
    v1122.bezierCurveTo(p720 * 190.27557373046875, p720 * 63.406280517578125, p720 * 192.27557373046875, p720 * 77.40628051757812, p720 * 189.27557373046875, p720 * 91.40628051757812);
    v1122.bezierCurveTo(p720 * 183.27557373046875, p720 * 108.40628051757812, p720 * 176.27557373046875, p720 * 110.40628051757812, p720 * 169.27557373046875, p720 * 118.40628051757812);
    v1122.bezierCurveTo(p720 * 152.27557373046875, p720 * 133.40628051757812, p720 * 152.27557373046875, p720 * 133.40628051757812, p720 * 135.27557373046875, p720 * 148.40628051757812);
    v1122.bezierCurveTo(p720 * 87.27557373046875, p720 * 143.40628051757812, p720 * 87.27557373046875, p720 * 143.40628051757812, p720 * 39.27557373046875, p720 * 138.40628051757812);
    v1122.bezierCurveTo(p720 * 26.77557373046875, p720 * 123.40628051757812, p720 * 26.77557373046875, p720 * 123.40628051757812, p720 * 14.27557373046875, p720 * 108.40628051757812);
    v1122.bezierCurveTo(p720 * 2.27557373046875, p720 * 95.40628051757812, p720 * 2.27557373046875, p720 * 92.40628051757812, p720 * 3.27557373046875, p720 * 83.40628051757812);
    v1122.bezierCurveTo(p720 * 4.27557373046875, p720 * 63.406280517578125, p720 * 12.27557373046875, p720 * 60.406280517578125, p720 * 24.27557373046875, p720 * 40.406280517578125);
    v1122.closePath();
    f88(v1122, p722[5], p722[5], p720 * 4);
    v1122.globalAlpha = 1;
    v1122.translate(p720 * -110, p720 * -155);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 104, p720 * 237.8000030517578);
    v1122.bezierCurveTo(p720 * 110, p720 * 237.8000030517578, p720 * 110, p720 * 237.8000030517578, p720 * 116, p720 * 237.8000030517578);
    v1122.bezierCurveTo(p720 * 116, p720 * 241.8000030517578, p720 * 116, p720 * 241.8000030517578, p720 * 116, p720 * 245.8000030517578);
    v1122.bezierCurveTo(p720 * 115, p720 * 245.3000030517578, p720 * 115, p720 * 245.3000030517578, p720 * 114, p720 * 244.8000030517578);
    v1122.bezierCurveTo(p720 * 109.5, p720 * 244.8000030517578, p720 * 109.5, p720 * 244.8000030517578, p720 * 105, p720 * 244.8000030517578);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 115, p720 * 211.20000457763672);
    v1122.bezierCurveTo(p720 * 106, p720 * 216.20000457763672, p720 * 101, p720 * 234.20000457763672, p720 * 102, p720 * 241.20000457763672);
    v1122.bezierCurveTo(p720 * 102, p720 * 260.2000045776367, p720 * 115, p720 * 269.2000045776367, p720 * 115, p720 * 269.2000045776367);
    v1122.bezierCurveTo(p720 * 116, p720 * 265.2000045776367, p720 * 115.5, p720 * 265.2000045776367, p720 * 116, p720 * 261.2000045776367);
    v1122.bezierCurveTo(p720 * 112, p720 * 264, p720 * 108, p720 * 254, p720 * 106, p720 * 242);
    v1122.bezierCurveTo(p720 * 105, p720 * 232, p720 * 110, p720 * 222, p720 * 115, p720 * 218);
    v1122.bezierCurveTo(p720 * 116, p720 * 216.75, p720 * 115.5, p720 * 217.375, p720 * 116, p720 * 216.75);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 120, p720 * 207);
    v1122.bezierCurveTo(p720 * 115, p720 * 206, p720 * 114, p720 * 209, p720 * 114, p720 * 211);
    v1122.bezierCurveTo(p720 * 114, p720 * 268, p720 * 114, p720 * 241, p720 * 114, p720 * 271);
    v1122.bezierCurveTo(p720 * 115, p720 * 276, p720 * 118, p720 * 276, p720 * 120, p720 * 276);
    v1122.bezierCurveTo(p720 * 122, p720 * 273, p720 * 120.5, p720 * 274.5, p720 * 121, p720 * 273);
    v1122.bezierCurveTo(p720 * 121, p720 * 241, p720 * 121, p720 * 241, p720 * 121, p720 * 209);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 284, p720 * 238);
    v1122.bezierCurveTo(p720 * 289.5, p720 * 238, p720 * 289.5, p720 * 238, p720 * 295, p720 * 238);
    v1122.bezierCurveTo(p720 * 295, p720 * 241.5, p720 * 295, p720 * 241.5, p720 * 295, p720 * 245);
    v1122.bezierCurveTo(p720 * 289.5, p720 * 245, p720 * 289.5, p720 * 245, p720 * 284, p720 * 245);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 283, p720 * 211);
    v1122.bezierCurveTo(p720 * 293, p720 * 216, p720 * 297, p720 * 231, p720 * 297, p720 * 241);
    v1122.bezierCurveTo(p720 * 298, p720 * 254, p720 * 290, p720 * 265, p720 * 284, p720 * 269);
    v1122.bezierCurveTo(p720 * 283, p720 * 266, p720 * 283.5, p720 * 266, p720 * 283, p720 * 263);
    v1122.bezierCurveTo(p720 * 290, p720 * 260, p720 * 292, p720 * 251, p720 * 293, p720 * 242);
    v1122.bezierCurveTo(p720 * 292, p720 * 223, p720 * 289, p720 * 224, p720 * 284, p720 * 218);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 280, p720 * 206);
    v1122.bezierCurveTo(p720 * 284, p720 * 206, p720 * 285, p720 * 208, p720 * 285, p720 * 211);
    v1122.bezierCurveTo(p720 * 285, p720 * 241.5, p720 * 285, p720 * 241.5, p720 * 285, p720 * 272);
    v1122.bezierCurveTo(p720 * 284, p720 * 275, p720 * 284, p720 * 275, p720 * 280, p720 * 275);
    v1122.bezierCurveTo(p720 * 279, p720 * 273.5, p720 * 279, p720 * 273.5, p720 * 278, p720 * 272);
    v1122.bezierCurveTo(p720 * 278, p720 * 240.5, p720 * 278, p720 * 240.5, p720 * 278, p720 * 209);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 138, p720 * 298.40000915527344);
    v1122.bezierCurveTo(p720 * 141, p720 * 311.40000915527344, p720 * 151, p720 * 314.40000915527344, p720 * 162, p720 * 316.40000915527344);
    v1122.bezierCurveTo(p720 * 224, p720 * 316.40000915527344, p720 * 200, p720 * 315.90000915527344, p720 * 238, p720 * 315.40000915527344);
    v1122.bezierCurveTo(p720 * 254, p720 * 316.40000915527344, p720 * 261, p720 * 306.40000915527344, p720 * 264, p720 * 298.40000915527344);
    v1122.bezierCurveTo(p720 * 255, p720 * 304.40000915527344, p720 * 250, p720 * 306.40000915527344, p720 * 244, p720 * 306.40000915527344);
    v1122.bezierCurveTo(p720 * 201, p720 * 306.90000915527344, p720 * 201, p720 * 306.90000915527344, p720 * 158, p720 * 307.40000915527344);
    v1122.bezierCurveTo(p720 * 150, p720 * 306.40000915527344, p720 * 148, p720 * 306.40000915527344, p720 * 139, p720 * 300.40000915527344);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 161, p720 * 177.5999984741211);
    v1122.bezierCurveTo(p720 * 130, p720 * 175.5999984741211, p720 * 123, p720 * 190.5999984741211, p720 * 122, p720 * 205.5999984741211);
    v1122.bezierCurveTo(p720 * 121, p720 * 277.5999984741211, p720 * 122, p720 * 242.5999984741211, p720 * 122, p720 * 279.5999984741211);
    v1122.bezierCurveTo(p720 * 128, p720 * 297.5999984741211, p720 * 137, p720 * 299.5999984741211, p720 * 143, p720 * 300.5999984741211);
    v1122.bezierCurveTo(p720 * 163, p720 * 301.0999984741211, p720 * 163, p720 * 301.0999984741211, p720 * 183, p720 * 301.5999984741211);
    v1122.bezierCurveTo(p720 * 150, p720 * 300.5999984741211, p720 * 135, p720 * 290.5999984741211, p720 * 134, p720 * 267.5999984741211);
    v1122.bezierCurveTo(p720 * 133, p720 * 245.5999984741211, p720 * 146, p720 * 235.5999984741211, p720 * 164, p720 * 235.5999984741211);
    v1122.bezierCurveTo(p720 * 206, p720 * 236.0999984741211, p720 * 206, p720 * 236.0999984741211, p720 * 248, p720 * 236.5999984741211);
    v1122.bezierCurveTo(p720 * 266, p720 * 243.5999984741211, p720 * 268, p720 * 259.5999984741211, p720 * 267, p720 * 266.5999984741211);
    v1122.bezierCurveTo(p720 * 266, p720 * 288.5999984741211, p720 * 251, p720 * 294.5999984741211, p720 * 244, p720 * 297.5999984741211);
    v1122.bezierCurveTo(p720 * 228.5, p720 * 299.5999984741211, p720 * 228.5, p720 * 299.5999984741211, p720 * 213, p720 * 301.5999984741211);
    v1122.bezierCurveTo(p720 * 236, p720 * 301.0999984741211, p720 * 236, p720 * 301.0999984741211, p720 * 259, p720 * 300.5999984741211);
    v1122.bezierCurveTo(p720 * 272, p720 * 295.5999984741211, p720 * 277, p720 * 288.5999984741211, p720 * 278, p720 * 271.5999984741211);
    v1122.bezierCurveTo(p720 * 277.5, p720 * 236.5999984741211, p720 * 277.5, p720 * 236.5999984741211, p720 * 277, p720 * 201.5999984741211);
    v1122.bezierCurveTo(p720 * 276, p720 * 186.5999984741211, p720 * 265, p720 * 178.5999984741211, p720 * 254, p720 * 177.5999984741211);
    v1122.bezierCurveTo(p720 * 247.5, p720 * 177.5999984741211, p720 * 247.5, p720 * 177.5999984741211, p720 * 241, p720 * 177.5999984741211);
    v1122.bezierCurveTo(p720 * 255, p720 * 202.5999984741211, p720 * 214, p720 * 217.5999984741211, p720 * 201, p720 * 215.5999984741211);
    v1122.bezierCurveTo(p720 * 170, p720 * 215.5999984741211, p720 * 152, p720 * 197.5999984741211, p720 * 161, p720 * 178.5999984741211);
    v1122.closePath();
    f88(v1122, p722[2], p722[2], p720 * 4);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 162, p720 * 175.5999984741211);
    v1122.bezierCurveTo(p720 * 153, p720 * 176.0999984741211, p720 * 153, p720 * 176.0999984741211, p720 * 144, p720 * 176.5999984741211);
    v1122.bezierCurveTo(p720 * 125, p720 * 178.5999984741211, p720 * 121, p720 * 196.5999984741211, p720 * 121, p720 * 207.5999984741211);
    v1122.bezierCurveTo(p720 * 121, p720 * 243.20000076293945, p720 * 121, p720 * 243.20000076293945, p720 * 121, p720 * 278.8000030517578);
    v1122.bezierCurveTo(p720 * 126, p720 * 298.8000030517578, p720 * 137, p720 * 300.8000030517578, p720 * 146, p720 * 302.8000030517578);
    v1122.bezierCurveTo(p720 * 200.5, p720 * 302.8000030517578, p720 * 200.5, p720 * 302.8000030517578, p720 * 255, p720 * 302.8000030517578);
    v1122.bezierCurveTo(p720 * 271, p720 * 301.8000030517578, p720 * 279, p720 * 288.8000030517578, p720 * 279, p720 * 273.8000030517578);
    v1122.bezierCurveTo(p720 * 279, p720 * 236.8000030517578, p720 * 279, p720 * 236.8000030517578, p720 * 279, p720 * 199.8000030517578);
    v1122.bezierCurveTo(p720 * 274, p720 * 178.8000030517578, p720 * 263, p720 * 177.8000030517578, p720 * 255, p720 * 175.8000030517578);
    v1122.bezierCurveTo(p720 * 248, p720 * 175.8000030517578, p720 * 248, p720 * 175.8000030517578, p720 * 241, p720 * 175.8000030517578);
    v1122.bezierCurveTo(p720 * 240, p720 * 175.8000030517578, p720 * 240, p720 * 175.8000030517578, p720 * 239, p720 * 175.8000030517578);
    v1122.bezierCurveTo(p720 * 254, p720 * 200.8000030517578, p720 * 222, p720 * 211.8000030517578, p720 * 202, p720 * 212.8000030517578);
    v1122.bezierCurveTo(p720 * 168, p720 * 213.8000030517578, p720 * 151, p720 * 190.8000030517578, p720 * 163, p720 * 176.8000030517578);
    v1122.closePath();
    f88(v1122, vVUndefined, p722[3], p720 * 6);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 198, p720 * 161.4000015258789);
    v1122.bezierCurveTo(p720 * 198, p720 * 186.9000015258789, p720 * 198, p720 * 186.9000015258789, p720 * 198, p720 * 212.4000015258789);
    v1122.bezierCurveTo(p720 * 201, p720 * 212.4000015258789, p720 * 201, p720 * 212.4000015258789, p720 * 204, p720 * 212.4000015258789);
    v1122.bezierCurveTo(p720 * 204, p720 * 186.9000015258789, p720 * 204, p720 * 186.9000015258789, p720 * 204, p720 * 161.4000015258789);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 161, p720 * 194);
    v1122.bezierCurveTo(p720 * 188, p720 * 169, p720 * 231, p720 * 179, p720 * 241, p720 * 194);
    v1122.bezierCurveTo(p720 * 239.5, p720 * 196, p720 * 239.5, p720 * 196, p720 * 238, p720 * 198);
    v1122.bezierCurveTo(p720 * 221, p720 * 179, p720 * 182, p720 * 182, p720 * 165, p720 * 198);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 157, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 162, p720 * 150.80000019073486, p720 * 241, p720 * 150.80000019073486, p720 * 245, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 242, p720 * 224.80000019073486, p720 * 162, p720 * 228.80000019073486, p720 * 157, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 159, p720 * 188.80000019073486, p720 * 159, p720 * 188.80000019073486, p720 * 161, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 168, p720 * 216.80000019073486, p720 * 231, p720 * 218.80000019073486, p720 * 241, p720 * 188.80000019073486);
    v1122.bezierCurveTo(p720 * 236, p720 * 156.80000019073486, p720 * 169, p720 * 152.80000019073486, p720 * 161, p720 * 188.80000019073486);
    v1122.closePath();
    f88(v1122, p722[0], p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 156, p720 * 188);
    v1122.bezierCurveTo(p720 * 160, p720 * 164, p720 * 183, p720 * 159, p720 * 201, p720 * 158);
    v1122.bezierCurveTo(p720 * 232, p720 * 159, p720 * 244, p720 * 174, p720 * 246, p720 * 188);
    v1122.bezierCurveTo(p720 * 245, p720 * 212, p720 * 213, p720 * 219, p720 * 201, p720 * 218);
    v1122.bezierCurveTo(p720 * 181, p720 * 221, p720 * 158, p720 * 207, p720 * 156, p720 * 190);
    v1122.closePath();
    f88(v1122, vVVUndefined11, p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 162, p720 * 189);
    v1122.bezierCurveTo(p720 * 166, p720 * 170, p720 * 185, p720 * 165, p720 * 201, p720 * 164);
    v1122.bezierCurveTo(p720 * 227, p720 * 165, p720 * 240, p720 * 178, p720 * 239, p720 * 188);
    v1122.bezierCurveTo(p720 * 239, p720 * 204, p720 * 210, p720 * 210, p720 * 201, p720 * 210);
    v1122.bezierCurveTo(p720 * 182, p720 * 211, p720 * 166, p720 * 200, p720 * 162, p720 * 190);
    v1122.closePath();
    f88(v1122, vVVUndefined14, p722[1], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 131, p720 * 262);
    v1122.bezierCurveTo(p720 * 136, p720 * 241, p720 * 144, p720 * 236, p720 * 158, p720 * 233);
    v1122.bezierCurveTo(p720 * 200.5, p720 * 233, p720 * 229, p720 * 232, p720 * 243, p720 * 233);
    v1122.bezierCurveTo(p720 * 259, p720 * 235, p720 * 267, p720 * 248, p720 * 269, p720 * 260);
    v1122.bezierCurveTo(p720 * 269, p720 * 266.5, p720 * 269, p720 * 266.5, p720 * 269, p720 * 273);
    v1122.bezierCurveTo(p720 * 265, p720 * 290, p720 * 251, p720 * 297, p720 * 242, p720 * 298);
    v1122.bezierCurveTo(p720 * 202, p720 * 298, p720 * 202, p720 * 298, p720 * 162, p720 * 298);
    v1122.bezierCurveTo(p720 * 148, p720 * 298, p720 * 136, p720 * 289, p720 * 132, p720 * 273);
    v1122.bezierCurveTo(p720 * 131.5, p720 * 268, p720 * 131.5, p720 * 268, p720 * 131, p720 * 263);
    v1122.bezierCurveTo(p720 * 135, p720 * 263, p720 * 135, p720 * 263, p720 * 139, p720 * 263);
    v1122.bezierCurveTo(p720 * 139, p720 * 281, p720 * 151, p720 * 287, p720 * 160, p720 * 290);
    v1122.bezierCurveTo(p720 * 200.5, p720 * 290, p720 * 200.5, p720 * 290, p720 * 241, p720 * 290);
    v1122.bezierCurveTo(p720 * 252, p720 * 290, p720 * 257, p720 * 281, p720 * 262, p720 * 271);
    v1122.bezierCurveTo(p720 * 261.5, p720 * 267, p720 * 261.5, p720 * 267, p720 * 261, p720 * 263);
    v1122.bezierCurveTo(p720 * 260, p720 * 249, p720 * 251, p720 * 242, p720 * 241, p720 * 241);
    v1122.bezierCurveTo(p720 * 240.5, p720 * 240.5, p720 * 240.5, p720 * 240.5, p720 * 240, p720 * 240);
    v1122.bezierCurveTo(p720 * 200, p720 * 240, p720 * 200, p720 * 240, p720 * 160, p720 * 240);
    v1122.bezierCurveTo(p720 * 145, p720 * 244, p720 * 142, p720 * 250, p720 * 139, p720 * 264);
    v1122.closePath();
    f88(v1122, p722[0], p722[0], p720 * 2);
    v1122.beginPath();
    v1122.lineCap = "round";
    v1122.lineJoin = "round";
    v1122.moveTo(p720 * 130, p720 * 264);
    v1122.bezierCurveTo(p720 * 132, p720 * 244, p720 * 144, p720 * 235, p720 * 157, p720 * 232);
    v1122.bezierCurveTo(p720 * 245, p720 * 232, p720 * 201, p720 * 232, p720 * 245, p720 * 232);
    v1122.bezierCurveTo(p720 * 264, p720 * 235, p720 * 269, p720 * 251, p720 * 270, p720 * 264);
    v1122.bezierCurveTo(p720 * 272, p720 * 291, p720 * 248, p720 * 299, p720 * 242, p720 * 299);
    v1122.bezierCurveTo(p720 * 200, p720 * 299, p720 * 200, p720 * 299, p720 * 158, p720 * 299);
    v1122.bezierCurveTo(p720 * 139, p720 * 298, p720 * 130, p720 * 276, p720 * 130, p720 * 265);
    v1122.closePath();
    f88(v1122, undefined, p722[1], p720 * 2);
    return v1121;
  }
  function f160(p723, p724, p725) {
    var v1123 = document.createElement("canvas");
    var v1124 = v1123.getContext("2d");
    v1123.width = p723 * 135;
    v1123.height = p723 * 120;
    v1124.beginPath();
    v1124.lineCap = "round";
    v1124.lineJoin = "round";
    v1124.moveTo(p723 * 3.5, p723 * 55.25);
    v1124.bezierCurveTo(p723 * 3.5, p723 * 114.25, p723 * 2.5, p723 * 109.25, p723 * 3.5, p723 * 112.25);
    v1124.bezierCurveTo(p723 * 5.5, p723 * 119.25, p723 * 8.5, p723 * 119.25, p723 * 11.5, p723 * 119.25);
    v1124.bezierCurveTo(p723 * 15.5, p723 * 114.25, p723 * 13.5, p723 * 95.25, p723 * 14.5, p723 * 82.25);
    v1124.closePath();
    f88(v1124, p725[0], p725[1], p723 * 7);
    v1124.beginPath();
    v1124.lineCap = "round";
    v1124.lineJoin = "round";
    v1124.moveTo(p723 * 6.5, p723 * 43.25);
    v1124.bezierCurveTo(p723 * 3.5, p723 * 27.25, p723 * 7.5, p723 * 20.25, p723 * 25.5, p723 * 11.25);
    v1124.bezierCurveTo(p723 * 45.5, p723 * -0.75, p723 * 73.5, p723 * 1.25, p723 * 107.5, p723 * 10.25);
    v1124.bezierCurveTo(p723 * 131.5, p723 * 21.25, p723 * 125.5, p723 * 34.25, p723 * 125.5, p723 * 36.25);
    v1124.closePath();
    f88(v1124, p725[0], p725[1], p723 * 7);
    v1124.beginPath();
    v1124.lineCap = "round";
    v1124.lineJoin = "round";
    v1124.moveTo(p723 * 120.5, p723 * 62.25);
    v1124.bezierCurveTo(p723 * 121.5, p723 * 95.25, p723 * 120.5, p723 * 80.25, p723 * 120.5, p723 * 100.25);
    v1124.bezierCurveTo(p723 * 118.5, p723 * 119.25, p723 * 123.5, p723 * 118.25, p723 * 129.5, p723 * 113.25);
    v1124.bezierCurveTo(p723 * 133.5, p723 * 107.25, p723 * 130.5, p723 * 97.25, p723 * 130.5, p723 * 87.25);
    v1124.bezierCurveTo(p723 * 129.5, p723 * 56.25, p723 * 130, p723 * 70.75, p723 * 129.5, p723 * 54.25);
    v1124.closePath();
    f88(v1124, p725[0], p725[1], p723 * 7);
    v1124.beginPath();
    v1124.lineCap = "round";
    v1124.lineJoin = "round";
    v1124.moveTo(p723 * 17.5, p723 * 27);
    v1124.bezierCurveTo(p723 * 48.5, p723 * 5, p723 * 93.5, p723 * 14, p723 * 118.5, p723 * 26);
    v1124.bezierCurveTo(p723 * 132.5, p723 * 35, p723 * 133.5, p723 * 52, p723 * 132.5, p723 * 68);
    v1124.bezierCurveTo(p723 * 125.5, p723 * 87, p723 * 116.5, p723 * 84, p723 * 96.5, p723 * 75);
    v1124.bezierCurveTo(p723 * 60.5, p723 * 66, p723 * 52.5, p723 * 74, p723 * 37.5, p723 * 78);
    v1124.bezierCurveTo(p723 * 2.5, p723 * 86, p723 * 3.5, p723 * 78, p723 * 1.5, p723 * 61);
    v1124.bezierCurveTo(p723 * 1.5, p723 * 37, p723 * 9.5, p723 * 32, p723 * 15.5, p723 * 28);
    v1124.closePath();
    f88(v1124, p725[2], p725[3], p723 * 7);
    return v1123;
  }
  function f161(p726, p727, p728) {
    var v1125 = document.createElement("canvas");
    var v1126 = v1125.getContext("2d");
    v1125.width = p726 * 88;
    v1125.height = p726 * 647;
    v1126.translate(p726 * 20, p726 * 20);
    v1126.globalAlpha = p727 ? 0.5 : 1;
    v1126.save();
    v1126.translate(p726 * 45, p726 * 384.5);
    f86(v1126, p726 * -15, p726 * -216.5, p726 * 30, p726 * 433, p726 * 10);
    v1126.restore();
    f88(v1126, p728[0]);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 27, p726 * 572);
    v1126.bezierCurveTo(p726 * 44, p726 * 580, p726 * 55, p726 * 576, p726 * 62, p726 * 572);
    v1126.bezierCurveTo(p726 * 65, p726 * 585.5, p726 * 65, p726 * 585.5, p726 * 68, p726 * 599);
    v1126.bezierCurveTo(p726 * 71, p726 * 612, p726 * 68, p726 * 618, p726 * 34, p726 * 616);
    v1126.bezierCurveTo(p726 * 14, p726 * 615, p726 * 19, p726 * 607, p726 * 27, p726 * 573);
    v1126.closePath();
    f88(v1126, p728[0]);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 32, p726 * 587);
    v1126.bezierCurveTo(p726 * 39, p726 * 590, p726 * 48, p726 * 588, p726 * 54, p726 * 587);
    v1126.bezierCurveTo(p726 * 57, p726 * 604, p726 * 59, p726 * 609, p726 * 46, p726 * 609);
    v1126.bezierCurveTo(p726 * 27, p726 * 609, p726 * 28, p726 * 605, p726 * 33, p726 * 588);
    v1126.closePath();
    f88(v1126, p728[0]);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 31, p726 * 113);
    v1126.bezierCurveTo(p726 * 27, p726 * 139, p726 * 27, p726 * 139, p726 * 23, p726 * 165);
    v1126.bezierCurveTo(p726 * 18, p726 * 187, p726 * 39, p726 * 195, p726 * 57, p726 * 186);
    v1126.bezierCurveTo(p726 * 68, p726 * 180, p726 * 65, p726 * 171, p726 * 62, p726 * 153);
    v1126.bezierCurveTo(p726 * 58.5, p726 * 131, p726 * 58.5, p726 * 131, p726 * 55, p726 * 109);
    v1126.closePath();
    f88(v1126, p728[0]);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 39, p726 * 139);
    v1126.bezierCurveTo(p726 * 43, p726 * 139, p726 * 43, p726 * 139, p726 * 47, p726 * 139);
    v1126.bezierCurveTo(p726 * 51, p726 * 158, p726 * 56, p726 * 176, p726 * 44, p726 * 175);
    v1126.bezierCurveTo(p726 * 33, p726 * 177, p726 * 34, p726 * 167, p726 * 39, p726 * 140);
    v1126.closePath();
    f88(v1126, p728[0]);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 44, p726 * 29);
    v1126.bezierCurveTo(p726 * 57, p726 * 63, p726 * 57, p726 * 63, p726 * 70, p726 * 97);
    v1126.bezierCurveTo(p726 * 60, p726 * 111, p726 * 60, p726 * 111, p726 * 50, p726 * 125);
    v1126.bezierCurveTo(p726 * 45, p726 * 128, p726 * 41, p726 * 128, p726 * 35, p726 * 124);
    v1126.bezierCurveTo(p726 * 26.5, p726 * 110, p726 * 26.5, p726 * 110, p726 * 18, p726 * 96);
    v1126.closePath();
    f88(v1126, p728[0]);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 44, p726 * 54);
    v1126.bezierCurveTo(p726 * 50, p726 * 72, p726 * 50, p726 * 72, p726 * 56, p726 * 90);
    v1126.bezierCurveTo(p726 * 58, p726 * 94, p726 * 59, p726 * 98, p726 * 53, p726 * 105);
    v1126.bezierCurveTo(p726 * 47, p726 * 113, p726 * 43, p726 * 113, p726 * 36, p726 * 103);
    v1126.bezierCurveTo(p726 * 29, p726 * 96, p726 * 31, p726 * 94, p726 * 35, p726 * 83);
    v1126.closePath();
    f88(v1126, p728[0]);
    v1126.translate(p726 * -20, p726 * -20);
    v1126.globalAlpha = 1;
    v1126.save();
    v1126.translate(p726 * 45, p726 * 384.5);
    f86(v1126, p726 * -15, p726 * -216.5, p726 * 30, p726 * 433, p726 * 10);
    v1126.restore();
    f88(v1126, p728[1], p728[2], p726 * 8);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 27, p726 * 572);
    v1126.bezierCurveTo(p726 * 44, p726 * 580, p726 * 55, p726 * 576, p726 * 62, p726 * 572);
    v1126.bezierCurveTo(p726 * 65, p726 * 585.5, p726 * 65, p726 * 585.5, p726 * 68, p726 * 599);
    v1126.bezierCurveTo(p726 * 71, p726 * 612, p726 * 68, p726 * 618, p726 * 34, p726 * 616);
    v1126.bezierCurveTo(p726 * 14, p726 * 615, p726 * 19, p726 * 607, p726 * 27, p726 * 573);
    v1126.closePath();
    f88(v1126, p728[3], p728[4], p726 * 8);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 32, p726 * 587);
    v1126.bezierCurveTo(p726 * 39, p726 * 590, p726 * 48, p726 * 588, p726 * 54, p726 * 587);
    v1126.bezierCurveTo(p726 * 57, p726 * 604, p726 * 59, p726 * 609, p726 * 46, p726 * 609);
    v1126.bezierCurveTo(p726 * 27, p726 * 609, p726 * 28, p726 * 605, p726 * 33, p726 * 588);
    v1126.closePath();
    f88(v1126, p728[5]);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 31, p726 * 113);
    v1126.bezierCurveTo(p726 * 27, p726 * 139, p726 * 27, p726 * 139, p726 * 23, p726 * 165);
    v1126.bezierCurveTo(p726 * 18, p726 * 187, p726 * 39, p726 * 195, p726 * 57, p726 * 186);
    v1126.bezierCurveTo(p726 * 68, p726 * 180, p726 * 65, p726 * 171, p726 * 62, p726 * 153);
    v1126.bezierCurveTo(p726 * 58.5, p726 * 131, p726 * 58.5, p726 * 131, p726 * 55, p726 * 109);
    v1126.closePath();
    f88(v1126, p728[3], p728[4], p726 * 8);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 39, p726 * 139);
    v1126.bezierCurveTo(p726 * 43, p726 * 139, p726 * 43, p726 * 139, p726 * 47, p726 * 139);
    v1126.bezierCurveTo(p726 * 51, p726 * 158, p726 * 56, p726 * 176, p726 * 44, p726 * 175);
    v1126.bezierCurveTo(p726 * 33, p726 * 177, p726 * 34, p726 * 167, p726 * 39, p726 * 140);
    v1126.closePath();
    f88(v1126, p728[5]);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 44, p726 * 29);
    v1126.bezierCurveTo(p726 * 57, p726 * 63, p726 * 57, p726 * 63, p726 * 70, p726 * 97);
    v1126.bezierCurveTo(p726 * 60, p726 * 111, p726 * 60, p726 * 111, p726 * 50, p726 * 125);
    v1126.bezierCurveTo(p726 * 45, p726 * 128, p726 * 41, p726 * 128, p726 * 35, p726 * 124);
    v1126.bezierCurveTo(p726 * 26.5, p726 * 110, p726 * 26.5, p726 * 110, p726 * 18, p726 * 96);
    v1126.closePath();
    f88(v1126, p728[6], p728[7], p726 * 8);
    v1126.beginPath();
    v1126.lineCap = "round";
    v1126.lineJoin = "round";
    v1126.moveTo(p726 * 44, p726 * 54);
    v1126.bezierCurveTo(p726 * 50, p726 * 72, p726 * 50, p726 * 72, p726 * 56, p726 * 90);
    v1126.bezierCurveTo(p726 * 58, p726 * 94, p726 * 59, p726 * 98, p726 * 53, p726 * 105);
    v1126.bezierCurveTo(p726 * 47, p726 * 113, p726 * 43, p726 * 113, p726 * 36, p726 * 103);
    v1126.bezierCurveTo(p726 * 29, p726 * 96, p726 * 31, p726 * 94, p726 * 35, p726 * 83);
    v1126.closePath();
    f88(v1126, p728[8]);
    return v1125;
  }
  function f162(p729, p730, p731) {
    var v1127 = document.createElement("canvas");
    var v1128 = v1127.getContext("2d");
    var v1129 = p729 * p730 * 2;
    var v1130 = p730 * p729 * 2;
    var v1131 = v1129 / 2;
    var v1132 = v1130 / 2;
    v1127.width = v1129;
    v1127.height = v1130;
    v1128.translate(v1131, v1132);
    f92(v1128, 0, 0, p729 * p730);
    f88(v1128, p731);
    return v1127;
  }
  function f163(p732, p733, p734) {
    var v1133 = document.createElement("canvas");
    var v1134 = v1133.getContext("2d");
    v1133.width = p732 * 92;
    v1133.height = p732 * 108;
    v1134.beginPath();
    v1134.lineCap = "round";
    v1134.lineJoin = "round";
    v1134.moveTo(p732 * 31, p732 * 10);
    v1134.bezierCurveTo(p732 * 37, p732 * 2, p732 * 49, p732 * 0, p732 * 61, p732 * 15);
    v1134.bezierCurveTo(p732 * 81, p732 * 31, p732 * 78, p732 * 25, p732 * 79, p732 * 37);
    v1134.bezierCurveTo(p732 * 76, p732 * 44, p732 * 81, p732 * 56, p732 * 85, p732 * 63);
    v1134.bezierCurveTo(p732 * 91, p732 * 71, p732 * 90, p732 * 78, p732 * 83, p732 * 84);
    v1134.bezierCurveTo(p732 * 60, p732 * 98, p732 * 67, p732 * 95, p732 * 57, p732 * 102);
    v1134.bezierCurveTo(p732 * 47, p732 * 106, p732 * 43, p732 * 106, p732 * 31, p732 * 98);
    v1134.bezierCurveTo(p732 * 22, p732 * 91, p732 * 17, p732 * 89, p732 * 7, p732 * 84);
    v1134.bezierCurveTo(p732 * 1, p732 * 77, p732 * 4, p732 * 73, p732 * 7, p732 * 60);
    v1134.bezierCurveTo(p732 * 11, p732 * 50, p732 * 5, p732 * 32, p732 * 15, p732 * 27);
    v1134.bezierCurveTo(p732 * 26, p732 * 18, p732 * 26, p732 * 24, p732 * 31, p732 * 10);
    v1134.closePath();
    f88(v1134, p734[0], p734[1], 4);
    return v1133;
  }
  function f164(p735, p736, p737) {
    var v1135 = document.createElement("canvas");
    var v1136 = v1135.getContext("2d");
    v1135.width = p735 * 300;
    v1135.height = p735 * 300;
    v1136.globalAlpha = p736 ? 0.5 : 1;
    v1136.save();
    v1136.translate(p735 * 150, p735 * 160);
    v1136.rotate(6.28);
    f89(v1136, 6, p735 * 146, p735 * 30);
    v1136.restore();
    f88(v1136, p737[0]);
    v1136.globalAlpha = 1;
    v1136.save();
    v1136.translate(p735 * 150, p735 * 150);
    v1136.rotate(6.28);
    f89(v1136, 6, p735 * 146, p735 * 30);
    v1136.restore();
    f88(v1136, p737[1], p737[2], p735 * 8);
    v1136.save();
    v1136.translate(p735 * 150, p735 * 150);
    v1136.rotate(0);
    f89(v1136, 6, p735 * 105, p735 * 30);
    v1136.restore();
    f88(v1136, p737[3], p737[3], p735 * 8);
    v1136.save();
    v1136.translate(p735 * 150, p735 * 150);
    v1136.rotate(0);
    f89(v1136, 6, p735 * 66, p735 * 30);
    v1136.restore();
    f88(v1136, p737[4], p737[2], p735 * 8);
    v1136.save();
    v1136.translate(p735 * 150, p735 * 150);
    v1136.rotate(0);
    f89(v1136, 6, p735 * 31, p735 * 30);
    v1136.restore();
    f88(v1136, p737[5], p737[6], p735 * 8);
    v1136.beginPath();
    v1136.lineCap = "round";
    v1136.lineJoin = "round";
    v1136.moveTo(p735 * 150, p735 * 207);
    v1136.bezierCurveTo(p735 * 150, p735 * 151, p735 * 150, p735 * 101, p735 * 150, p735 * 94);
    v1136.closePath();
    f88(v1136, undefined, p737[2], p735 * 8);
    v1136.beginPath();
    v1136.lineCap = "round";
    v1136.lineJoin = "round";
    v1136.moveTo(p735 * 118, p735 * 100);
    v1136.bezierCurveTo(p735 * 118, p735 * 205, p735 * 118, p735 * 207, p735 * 118, p735 * 200);
    v1136.closePath();
    f88(v1136, undefined, p737[2], p735 * 8);
    v1136.beginPath();
    v1136.lineCap = "round";
    v1136.lineJoin = "round";
    v1136.moveTo(p735 * 183, p735 * 100);
    v1136.bezierCurveTo(p735 * 183, p735 * 203, p735 * 183, p735 * 203, p735 * 183, p735 * 200);
    v1136.closePath();
    f88(v1136, undefined, p737[2], p735 * 8);
    return v1135;
  }
  function f165(p738, p739, p740) {
    var v1137 = document.createElement("canvas");
    var v1138 = v1137.getContext("2d");
    v1137.width = p738 * 90;
    v1137.height = p738 * 98;
    v1138.translate(0, p738 * 4);
    if (v770 === 0) {
      v1138.globalAlpha = p739 ? 0.5 : 1;
      v1138.save();
      v1138.translate(p738 * 44, p738 * 50);
      v1138.rotate(1);
      f89(v1138, 8, p738 * 41, p738 * 10);
      f88(v1138, p740[0]);
      v1138.restore();
    }
    v1138.globalAlpha = 1;
    v1138.save();
    v1138.translate(p738 * 44, p738 * 44);
    v1138.rotate(1);
    f89(v1138, 8, p738 * 41, p738 * 10);
    f88(v1138, p740[1], p740[2], p738 * 4);
    v1138.rotate(0.56);
    f89(v1138, 8, p738 * 33, p738 * 10);
    f88(v1138, p740[3], p740[4], p738 * 4);
    v1138.rotate(0.28);
    f89(v1138, 8, p738 * 24, p738 * 8);
    f88(v1138, p740[5]);
    v1138.restore();
    v1138.save();
    v1138.translate(p738 * 45, p738 * 45);
    v1138.rotate(0);
    f86(v1138, p738 * -9, p738 * -25.5, p738 * 18, p738 * 51, p738 * 30);
    v1138.restore();
    f88(v1138, p740[4], p740[4], p738 * 2);
    v1138.save();
    v1138.translate(p738 * 45, p738 * 45);
    v1138.rotate(0);
    f86(v1138, p738 * -26, p738 * -9, p738 * 52, p738 * 18, p738 * 30);
    v1138.restore();
    f88(v1138, p740[4], p740[4], p738 * 2);
    f92(v1138, p738 * 45, p738 * 29, p738 * 7);
    f88(v1138, p740[5]);
    f92(v1138, p738 * 45, p738 * 61, p738 * 7);
    f88(v1138, p740[5]);
    f92(v1138, p738 * 28, p738 * 45, p738 * 7);
    f88(v1138, p740[5]);
    f92(v1138, p738 * 62, p738 * 45, p738 * 7);
    f88(v1138, p740[5]);
    return v1137;
  }
  function f166(p741, p742, p743) {
    var v1139 = document.createElement("canvas");
    var v1140 = v1139.getContext("2d");
    v1139.width = p741 * 90;
    v1139.height = p741 * 98;
    v1140.translate(0, p741 * 4);
    if (v770 === 0) {
      v1140.globalAlpha = p742 ? 0.5 : 1;
      v1140.save();
      v1140.translate(p741 * 44, p741 * 50);
      v1140.rotate(1.4);
      f89(v1140, 7, p741 * 41, p741 * 10);
      v1140.restore();
      f88(v1140, p743[0]);
    }
    v1140.globalAlpha = 1;
    v1140.save();
    v1140.translate(p741 * 44, p741 * 44);
    v1140.rotate(1.4);
    f89(v1140, 7, p741 * 41, p741 * 10);
    f88(v1140, p743[1], p743[2], p741 * 4);
    f89(v1140, 7, p741 * 35, p741 * 10);
    f88(v1140, p743[3], p743[4], p741 * 4);
    f89(v1140, 7, p741 * 23, p741 * 5);
    v1140.restore();
    f88(v1140, p743[5]);
    v1140.save();
    v1140.translate(p741 * 45, p741 * 45);
    v1140.rotate(0);
    f86(v1140, p741 * -9, p741 * -25.5, p741 * 18, p741 * 51, p741 * 30);
    v1140.restore();
    f88(v1140, p743[4], p743[4], p741 * 2);
    v1140.save();
    v1140.translate(p741 * 45, p741 * 45);
    v1140.rotate(0);
    f86(v1140, p741 * -26, p741 * -9, p741 * 52, p741 * 18, p741 * 30);
    v1140.restore();
    f88(v1140, p743[4], p743[4], p741 * 2);
    f92(v1140, p741 * 45, p741 * 29, p741 * 7);
    f88(v1140, p743[5]);
    f92(v1140, p741 * 45, p741 * 61, p741 * 7);
    f88(v1140, p743[5]);
    f92(v1140, p741 * 28, p741 * 45, p741 * 7);
    f88(v1140, p743[5]);
    f92(v1140, p741 * 62, p741 * 45, p741 * 7);
    f88(v1140, p743[5]);
    return v1139;
  }
  function f167(p744, p745, p746) {
    var v1141 = document.createElement("canvas");
    var v1142 = v1141.getContext("2d");
    v1141.width = p744 * 300;
    v1141.height = p744 * 300;
    v1142.globalAlpha = p745 ? 0.5 : 1;
    v1142.save();
    v1142.translate(p744 * 150, p744 * 160);
    v1142.rotate(6.28);
    f89(v1142, 6, p744 * 146, p744 * 30);
    v1142.restore();
    f88(v1142, p746[0]);
    v1142.globalAlpha = 1;
    v1142.save();
    v1142.translate(p744 * 150, p744 * 150);
    v1142.rotate(6.28);
    f89(v1142, 6, p744 * 146, p744 * 30);
    v1142.restore();
    f88(v1142, p746[1], p746[2], p744 * 8);
    v1142.save();
    v1142.translate(p744 * 150, p744 * 150);
    v1142.rotate(0);
    f89(v1142, 6, p744 * 105, p744 * 30);
    v1142.restore();
    f88(v1142, p746[3], p746[3], p744 * 8);
    v1142.save();
    v1142.translate(p744 * 150, p744 * 150);
    v1142.rotate(0);
    f89(v1142, 6, p744 * 66, p744 * 30);
    v1142.restore();
    f88(v1142, p746[4], p746[2], p744 * 8);
    v1142.save();
    v1142.translate(p744 * 131, p744 * 116);
    f89(v1142, 7, p744 * 17, p744 * 8);
    v1142.restore();
    f88(v1142, p746[6]);
    v1142.save();
    v1142.translate(p744 * 163, p744 * 168);
    f89(v1142, 7, p744 * 25, p744 * 8);
    v1142.restore();
    f88(v1142, p746[6]);
    v1142.save();
    v1142.translate(p744 * 117, p744 * 151);
    f89(v1142, 7, p744 * 11, p744 * 8);
    v1142.restore();
    f88(v1142, p746[6]);
    v1142.save();
    v1142.translate(p744 * 167, p744 * 122);
    f89(v1142, 7, p744 * 12, p744 * 8);
    v1142.restore();
    f88(v1142, p746[6]);
    v1142.beginPath();
    v1142.lineCap = "round";
    v1142.lineJoin = "round";
    v1142.moveTo(p744 * 150, p744 * 207);
    v1142.bezierCurveTo(p744 * 150, p744 * 151, p744 * 150, p744 * 101, p744 * 150, p744 * 94);
    v1142.closePath();
    f88(v1142, vVVVVUndefined14, p746[2], p744 * 8);
    v1142.beginPath();
    v1142.lineCap = "round";
    v1142.lineJoin = "round";
    v1142.moveTo(p744 * 118, p744 * 100);
    v1142.bezierCurveTo(p744 * 118, p744 * 205, p744 * 118, p744 * 207, p744 * 118, p744 * 200);
    v1142.closePath();
    f88(v1142, vVVVUndefined142, p746[2], p744 * 8);
    v1142.beginPath();
    v1142.lineCap = "round";
    v1142.lineJoin = "round";
    v1142.moveTo(p744 * 183, p744 * 100);
    v1142.bezierCurveTo(p744 * 183, p744 * 203, p744 * 183, p744 * 203, p744 * 183, p744 * 200);
    v1142.closePath();
    f88(v1142, undefined, p746[2], p744 * 8);
    return v1141;
  }
  function f168(p747, p748, p749) {
    var v1143 = document.createElement("canvas");
    var v1144 = v1143.getContext("2d");
    v1143.width = p747 * 81;
    v1143.height = p747 * 626;
    v1144.translate(p747 * 20, p747 * 20);
    v1144.globalAlpha = p748 ? 0.5 : 1;
    v1144.beginPath();
    v1144.lineCap = "round";
    v1144.lineJoin = "round";
    v1144.moveTo(p747 * 55, p747 * 565);
    v1144.bezierCurveTo(p747 * 56, p747 * 586, p747 * 53, p747 * 591, p747 * 40, p747 * 592);
    v1144.bezierCurveTo(p747 * 28, p747 * 591, p747 * 27, p747 * 583, p747 * 28, p747 * 557);
    v1144.bezierCurveTo(p747 * 27.5, p747 * 346, p747 * 27.5, p747 * 346, p747 * 27, p747 * 135);
    v1144.bezierCurveTo(p747 * 26, p747 * 74, p747 * 36, p747 * 26, p747 * 41, p747 * 15);
    v1144.bezierCurveTo(p747 * 54, p747 * 51, p747 * 54, p747 * 81, p747 * 55, p747 * 128);
    v1144.closePath();
    f88(v1144, p749[0]);
    v1144.translate(p747 * -20, p747 * -20);
    v1144.globalAlpha = 1;
    v1144.beginPath();
    v1144.lineCap = "round";
    v1144.lineJoin = "round";
    v1144.moveTo(p747 * 55, p747 * 565);
    v1144.bezierCurveTo(p747 * 56, p747 * 586, p747 * 53, p747 * 591, p747 * 40, p747 * 592);
    v1144.bezierCurveTo(p747 * 28, p747 * 591, p747 * 27, p747 * 583, p747 * 28, p747 * 557);
    v1144.bezierCurveTo(p747 * 27.5, p747 * 346, p747 * 27.5, p747 * 346, p747 * 27, p747 * 135);
    v1144.bezierCurveTo(p747 * 26, p747 * 74, p747 * 36, p747 * 26, p747 * 41, p747 * 15);
    v1144.bezierCurveTo(p747 * 54, p747 * 51, p747 * 54, p747 * 81, p747 * 55, p747 * 128);
    v1144.closePath();
    f88(v1144, p749[1], p749[2], p747 * 8);
    v1144.beginPath();
    v1144.lineCap = "round";
    v1144.lineJoin = "round";
    v1144.moveTo(p747 * 27, p747 * 129);
    v1144.bezierCurveTo(p747 * 32, p747 * 135, p747 * 48, p747 * 136, p747 * 53, p747 * 129);
    v1144.bezierCurveTo(p747 * 56, p747 * 97, p747 * 53, p747 * 82, p747 * 52, p747 * 64);
    v1144.bezierCurveTo(p747 * 49, p747 * 33, p747 * 44, p747 * 27, p747 * 41, p747 * 21);
    v1144.bezierCurveTo(p747 * 31, p747 * 40, p747 * 28, p747 * 84, p747 * 27, p747 * 127);
    v1144.closePath();
    f88(v1144, p749[3]);
    v1144.beginPath();
    v1144.lineCap = "round";
    v1144.lineJoin = "round";
    v1144.moveTo(p747 * 55, p747 * 565);
    v1144.bezierCurveTo(p747 * 56, p747 * 586, p747 * 53, p747 * 591, p747 * 40, p747 * 592);
    v1144.bezierCurveTo(p747 * 28, p747 * 591, p747 * 27, p747 * 583, p747 * 28, p747 * 557);
    v1144.bezierCurveTo(p747 * 27.5, p747 * 346, p747 * 27.5, p747 * 346, p747 * 27, p747 * 135);
    v1144.bezierCurveTo(p747 * 26, p747 * 74, p747 * 36, p747 * 26, p747 * 41, p747 * 15);
    v1144.bezierCurveTo(p747 * 54, p747 * 51, p747 * 54, p747 * 81, p747 * 55, p747 * 128);
    v1144.closePath();
    f88(v1144, vVVVVUndefined14, p749[2], p747 * 8);
    v1144.beginPath();
    v1144.lineCap = "round";
    v1144.lineJoin = "round";
    v1144.moveTo(p747 * 28, p747 * 475);
    v1144.bezierCurveTo(p747 * 38, p747 * 482, p747 * 48, p747 * 480, p747 * 54, p747 * 474);
    v1144.bezierCurveTo(p747 * 54, p747 * 509.5, p747 * 54, p747 * 509.5, p747 * 54, p747 * 545);
    v1144.bezierCurveTo(p747 * 46, p747 * 554, p747 * 36, p747 * 552, p747 * 28, p747 * 545);
    v1144.closePath();
    f88(v1144, p749[4], p749[5], p747 * 8);
    v1144.beginPath();
    v1144.lineCap = "round";
    v1144.lineJoin = "round";
    v1144.moveTo(p747 * 28, p747 * 496);
    v1144.bezierCurveTo(p747 * 39, p747 * 506, p747 * 49, p747 * 503, p747 * 54, p747 * 496);
    f88(v1144, undefined, p749[5], p747 * 8);
    v1144.beginPath();
    v1144.lineCap = "round";
    v1144.lineJoin = "round";
    v1144.moveTo(p747 * 28, p747 * 521);
    v1144.bezierCurveTo(p747 * 41, p747 * 529, p747 * 49, p747 * 524, p747 * 54, p747 * 520);
    f88(v1144, vVVVVUndefined143, p749[5], p747 * 8);
    return v1143;
  }
  function f169(p750, p751, p752) {
    var v1145 = document.createElement("canvas");
    var v1146 = v1145.getContext("2d");
    v1145.width = p750 * 200;
    v1145.height = p750 * 200;
    v1146.save();
    v1146.translate(p750 * 112, p750 * 158);
    f86(v1146, p750 * -86.5, p750 * -86, p750 * 150, p750 * 35, p750 * 20);
    v1146.restore();
    f88(v1146, p752[0]);
    v1146.save();
    v1146.translate(p750 * 170, p750 * 100);
    f86(v1146, p750 * -86.5, p750 * -86, p750 * 35, p750 * 150, p750 * 20);
    v1146.restore();
    f88(v1146, p752[0]);
    return v1145;
  }
  function f170(p753, p754, p755) {
    var v1147 = document.createElement("canvas");
    var v1148 = v1147.getContext("2d");
    v1147.width = p753 * 130;
    v1147.height = p753 * 142;
    v1148.globalAlpha = p754 ? 0.5 : 1;
    v1148.save();
    v1148.translate(p753 * 65, p753 * 80);
    v1148.rotate(0.2);
    f89(v1148, 9, p753 * 60, p753 * 10);
    v1148.restore();
    f88(v1148, p755[0]);
    v1148.globalAlpha = 1;
    v1148.save();
    v1148.translate(p753 * 65, p753 * 71);
    v1148.rotate(0.2);
    f89(v1148, 9, p753 * 60, p753 * 10);
    f88(v1148, p755[1], p755[2], 4);
    v1148.rotate(-0.32);
    f89(v1148, 9, p753 * 38, p753 * 10);
    f88(v1148, p755[3], p755[4], 4);
    v1148.rotate(0.68);
    f89(v1148, 9, p753 * 20, p753 * 8);
    f88(v1148, p755[5], p755[6], 6);
    v1148.restore();
    return v1147;
  }
  function f171(p756, p757, p758) {
    var v1149 = document.createElement("canvas");
    var v1150 = v1149.getContext("2d");
    v1149.width = p756 * 248;
    v1149.height = p756 * 128;
    v1150.beginPath();
    v1150.lineCap = "round";
    v1150.lineJoin = "round";
    v1150.moveTo(p756 * 137, p756 * 7);
    v1150.bezierCurveTo(p756 * 169, p756 * 14, p756 * 212, p756 * 9, p756 * 241, p756 * 5);
    v1150.bezierCurveTo(p756 * 211, p756 * 63, p756 * 158, p756 * 92, p756 * 103, p756 * 109);
    v1150.bezierCurveTo(p756 * 73, p756 * 126, p756 * 54, p756 * 124, p756 * 6, p756 * 99);
    v1150.bezierCurveTo(p756 * 82, p756 * 63, p756 * 113, p756 * 35, p756 * 137, p756 * 8);
    v1150.closePath();
    f88(v1150, p758[0], p758[1], p756 * 14);
    v1150.beginPath();
    v1150.lineCap = "round";
    v1150.lineJoin = "round";
    v1150.moveTo(p756 * 73, p756 * 124);
    v1150.bezierCurveTo(p756 * 111, p756 * 126, p756 * 162, p756 * 97, p756 * 203, p756 * 61);
    v1150.bezierCurveTo(p756 * 156, p756 * 98, p756 * 131, p756 * 106, p756 * 105, p756 * 109);
    v1150.bezierCurveTo(p756 * 99, p756 * 121, p756 * 87, p756 * 124, p756 * 72, p756 * 124);
    v1150.closePath();
    f88(v1150, p758[2], p758[3], p756 * 1);
    return v1149;
  }
  function f172(p759, p760, p761) {
    var v1151 = document.createElement("canvas");
    var v1152 = v1151.getContext("2d");
    var v1153 = p759 * 140;
    var v1154 = p759 * 150;
    var v1155 = p759 * 10;
    var v1156 = p759 * 4;
    v1151.width = v1153;
    v1151.height = v1154;
    v1152.translate(p759 * -50, p759 * -38 + v1155);
    v1152.globalAlpha = p760 ? 0.5 : 1;
    v1152.beginPath();
    v1152.bezierCurveTo(p759 * 160, p759 * 65, p759 * 160, p759 * 85, p759 * 152, p759 * 95);
    v1152.bezierCurveTo(p759 * 152, p759 * 95, p759 * 173, p759 * 94, p759 * 187, p759 * 102);
    v1152.bezierCurveTo(p759 * 187, p759 * 102, p759 * 180, p759 * 120, p759 * 155, p759 * 126);
    v1152.bezierCurveTo(p759 * 154, p759 * 126, p759 * 166, p759 * 138, p759 * 169, p759 * 148);
    v1152.bezierCurveTo(p759 * 169, p759 * 148, p759 * 148, p759 * 152, p759 * 133, p759 * 140);
    v1152.bezierCurveTo(p759 * 133, p759 * 140, p759 * 134, p759 * 160, p759 * 122, p759 * 175);
    v1152.bezierCurveTo(p759 * 122, p759 * 175, p759 * 107, p759 * 162, p759 * 107, p759 * 144);
    v1152.bezierCurveTo(p759 * 107, p759 * 144, p759 * 98, p759 * 164, p759 * 73, p759 * 167);
    v1152.bezierCurveTo(p759 * 73, p759 * 167, p759 * 72, p759 * 134, p759 * 90, p759 * 127);
    v1152.bezierCurveTo(p759 * 90, p759 * 127, p759 * 70, p759 * 134, p759 * 55, p759 * 123);
    v1152.bezierCurveTo(p759 * 55, p759 * 123, p759 * 58, p759 * 115, p759 * 75, p759 * 104);
    v1152.bezierCurveTo(p759 * 75, p759 * 104, p759 * 66, p759 * 96, p759 * 61, p759 * 77);
    v1152.bezierCurveTo(p759 * 61, p759 * 77, p759 * 83, p759 * 74, p759 * 102, p759 * 89);
    v1152.bezierCurveTo(p759 * 102, p759 * 89, p759 * 92, p759 * 66, p759 * 110, p759 * 41);
    v1152.bezierCurveTo(p759 * 111, p759 * 40, p759 * 130, p759 * 54, p759 * 130, p759 * 82);
    v1152.bezierCurveTo(p759 * 130, p759 * 82, p759 * 143, p759 * 67, p759 * 159, p759 * 65);
    v1152.closePath();
    f88(v1152, p761[0]);
    v1152.translate(0, 0 - v1155);
    v1152.globalAlpha = 1;
    v1152.beginPath();
    v1152.bezierCurveTo(p759 * 160, p759 * 65, p759 * 160, p759 * 85, p759 * 152, p759 * 95);
    v1152.bezierCurveTo(p759 * 152, p759 * 95, p759 * 173, p759 * 94, p759 * 187, p759 * 102);
    v1152.bezierCurveTo(p759 * 187, p759 * 102, p759 * 180, p759 * 120, p759 * 155, p759 * 126);
    v1152.bezierCurveTo(p759 * 154, p759 * 126, p759 * 166, p759 * 138, p759 * 169, p759 * 148);
    v1152.bezierCurveTo(p759 * 169, p759 * 148, p759 * 148, p759 * 152, p759 * 133, p759 * 140);
    v1152.bezierCurveTo(p759 * 133, p759 * 140, p759 * 134, p759 * 160, p759 * 122, p759 * 175);
    v1152.bezierCurveTo(p759 * 122, p759 * 175, p759 * 107, p759 * 162, p759 * 107, p759 * 144);
    v1152.bezierCurveTo(p759 * 107, p759 * 144, p759 * 98, p759 * 164, p759 * 73, p759 * 167);
    v1152.bezierCurveTo(p759 * 73, p759 * 167, p759 * 72, p759 * 134, p759 * 90, p759 * 127);
    v1152.bezierCurveTo(p759 * 90, p759 * 127, p759 * 70, p759 * 134, p759 * 55, p759 * 123);
    v1152.bezierCurveTo(p759 * 55, p759 * 123, p759 * 58, p759 * 115, p759 * 75, p759 * 104);
    v1152.bezierCurveTo(p759 * 75, p759 * 104, p759 * 66, p759 * 96, p759 * 61, p759 * 77);
    v1152.bezierCurveTo(p759 * 61, p759 * 77, p759 * 83, p759 * 74, p759 * 102, p759 * 89);
    v1152.bezierCurveTo(p759 * 102, p759 * 89, p759 * 92, p759 * 66, p759 * 110, p759 * 41);
    v1152.bezierCurveTo(p759 * 111, p759 * 40, p759 * 130, p759 * 54, p759 * 130, p759 * 82);
    v1152.bezierCurveTo(p759 * 130, p759 * 82, p759 * 143, p759 * 67, p759 * 159, p759 * 65);
    v1152.closePath();
    f88(v1152, p761[1], p761[2], v1156);
    return v1151;
  }
  function f173(p762, p763) {
    var v1157 = document.createElement("canvas");
    var v1158 = v1157.getContext("2d");
    v1157.width = p762 * 372;
    v1157.height = p762 * 375;
    v1158.globalAlpha = 0.5;
    v1158.translate(p762 * 15, p762 * 15);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 313.0000305175781, p762 * 76.58523559570312);
    v1158.bezierCurveTo(p762 * 308.0000305175781, p762 * 130.58523559570312, p762 * 279.0000305175781, p762 * 158.58523559570312, p762 * 254.00003051757812, p762 * 175.58523559570312);
    v1158.bezierCurveTo(p762 * 287.0000305175781, p762 * 182.58523559570312, p762 * 274.0000305175781, p762 * 181.08523559570312, p762 * 294.0000305175781, p762 * 186.58523559570312);
    v1158.bezierCurveTo(p762 * 293.5000305175781, p762 * 196.08523559570312, p762 * 293.5000305175781, p762 * 196.08523559570312, p762 * 293.0000305175781, p762 * 205.58523559570312);
    v1158.bezierCurveTo(p762 * 304.0000305175781, p762 * 201.08523559570312, p762 * 304.0000305175781, p762 * 201.08523559570312, p762 * 315.0000305175781, p762 * 196.58523559570312);
    v1158.bezierCurveTo(p762 * 350.0000305175781, p762 * 219.58523559570312, p762 * 343.0000305175781, p762 * 221.58523559570312, p762 * 351.0000305175781, p762 * 230.58523559570312);
    v1158.bezierCurveTo(p762 * 296.0000305175781, p762 * 260.5852355957031, p762 * 264.0000305175781, p762 * 256.5852355957031, p762 * 220.00003051757812, p762 * 236.58523559570312);
    v1158.bezierCurveTo(p762 * 233.00003051757812, p762 * 266.5852355957031, p762 * 232.00003051757812, p762 * 279.5852355957031, p762 * 231.00003051757812, p762 * 295.5852355957031);
    v1158.bezierCurveTo(p762 * 222.00003051757812, p762 * 297.5852355957031, p762 * 222.00003051757812, p762 * 297.5852355957031, p762 * 213.00003051757812, p762 * 299.5852355957031);
    v1158.bezierCurveTo(p762 * 219.50003051757812, p762 * 308.0852355957031, p762 * 219.50003051757812, p762 * 308.0852355957031, p762 * 226.00003051757812, p762 * 316.5852355957031);
    v1158.bezierCurveTo(p762 * 223.00003051757812, p762 * 344.5852355957031, p762 * 216.00003051757812, p762 * 350.5852355957031, p762 * 209.00003051757812, p762 * 363.5852355957031);
    v1158.bezierCurveTo(p762 * 154.00003051757812, p762 * 318.5852355957031, p762 * 156.00003051757812, p762 * 268.5852355957031, p762 * 160.00003051757812, p762 * 238.58523559570312);
    v1158.bezierCurveTo(p762 * 135.00003051757812, p762 * 268.5852355957031, p762 * 125.00003051757812, p762 * 267.5852355957031, p762 * 112.00003051757812, p762 * 272.5852355957031);
    v1158.bezierCurveTo(p762 * 104.50003051757812, p762 * 266.5852355957031, p762 * 104.50003051757812, p762 * 266.5852355957031, p762 * 97.00003051757812, p762 * 260.5852355957031);
    v1158.bezierCurveTo(p762 * 93.00003051757812, p762 * 271.0852355957031, p762 * 93.00003051757812, p762 * 271.0852355957031, p762 * 89.00003051757812, p762 * 281.5852355957031);
    v1158.bezierCurveTo(p762 * 66.00003051757812, p762 * 288.5852355957031, p762 * 59.000030517578125, p762 * 288.5852355957031, p762 * 39.000030517578125, p762 * 285.5852355957031);
    v1158.bezierCurveTo(p762 * 56.000030517578125, p762 * 216.58523559570312, p762 * 91.00003051757812, p762 * 204.58523559570312, p762 * 129.00003051757812, p762 * 189.58523559570312);
    v1158.bezierCurveTo(p762 * 90.00003051757812, p762 * 176.58523559570312, p762 * 89.00003051757812, p762 * 173.58523559570312, p762 * 79.00003051757812, p762 * 166.58523559570312);
    v1158.bezierCurveTo(p762 * 82.00003051757812, p762 * 155.08523559570312, p762 * 82.00003051757812, p762 * 155.08523559570312, p762 * 85.00003051757812, p762 * 143.58523559570312);
    v1158.bezierCurveTo(p762 * 75.50003051757812, p762 * 147.58523559570312, p762 * 75.50003051757812, p762 * 147.58523559570312, p762 * 66.00003051757812, p762 * 151.58523559570312);
    v1158.bezierCurveTo(p762 * 44.000030517578125, p762 * 133.58523559570312, p762 * 41.000030517578125, p762 * 124.58523559570312, p762 * 34.000030517578125, p762 * 102.58523559570312);
    v1158.bezierCurveTo(p762 * 100.00003051757812, p762 * 81.58523559570312, p762 * 134.00003051757812, p762 * 118.58523559570312, p762 * 150.00003051757812, p762 * 128.58523559570312);
    v1158.bezierCurveTo(p762 * 144.00003051757812, p762 * 102.58523559570312, p762 * 147.00003051757812, p762 * 90.58523559570312, p762 * 150.00003051757812, p762 * 80.58523559570312);
    v1158.bezierCurveTo(p762 * 159.50003051757812, p762 * 79.08523559570312, p762 * 159.50003051757812, p762 * 79.08523559570312, p762 * 169.00003051757812, p762 * 77.58523559570312);
    v1158.bezierCurveTo(p762 * 163.00003051757812, p762 * 72.58523559570312, p762 * 163.00003051757812, p762 * 72.58523559570312, p762 * 157.00003051757812, p762 * 67.58523559570312);
    v1158.bezierCurveTo(p762 * 162.00003051757812, p762 * 42.585235595703125, p762 * 169.00003051757812, p762 * 29.585235595703125, p762 * 182.00003051757812, p762 * 14.585235595703125);
    v1158.bezierCurveTo(p762 * 219.00003051757812, p762 * 48.585235595703125, p762 * 222.00003051757812, p762 * 92.58523559570312, p762 * 218.00003051757812, p762 * 112.58523559570312);
    v1158.bezierCurveTo(p762 * 239.00003051757812, p762 * 95.58523559570312, p762 * 242.00003051757812, p762 * 97.58523559570312, p762 * 249.00003051757812, p762 * 94.58523559570312);
    v1158.bezierCurveTo(p762 * 255.00003051757812, p762 * 103.08523559570312, p762 * 255.00003051757812, p762 * 103.08523559570312, p762 * 261.0000305175781, p762 * 111.58523559570312);
    v1158.bezierCurveTo(p762 * 261.5000305175781, p762 * 99.58523559570312, p762 * 261.5000305175781, p762 * 99.58523559570312, p762 * 262.0000305175781, p762 * 87.58523559570312);
    v1158.bezierCurveTo(p762 * 282.0000305175781, p762 * 77.58523559570312, p762 * 301.0000305175781, p762 * 74.58523559570312, p762 * 314.0000305175781, p762 * 76.58523559570312);
    v1158.closePath();
    f88(v1158, p763[0]);
    v1158.globalAlpha = 1;
    v1158.translate(p762 * -15, p762 * -15);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 313.0000305175781, p762 * 76.58523559570312);
    v1158.bezierCurveTo(p762 * 308.0000305175781, p762 * 130.58523559570312, p762 * 279.0000305175781, p762 * 158.58523559570312, p762 * 254.00003051757812, p762 * 175.58523559570312);
    v1158.bezierCurveTo(p762 * 287.0000305175781, p762 * 182.58523559570312, p762 * 274.0000305175781, p762 * 181.08523559570312, p762 * 294.0000305175781, p762 * 186.58523559570312);
    v1158.bezierCurveTo(p762 * 293.5000305175781, p762 * 196.08523559570312, p762 * 293.5000305175781, p762 * 196.08523559570312, p762 * 293.0000305175781, p762 * 205.58523559570312);
    v1158.bezierCurveTo(p762 * 304.0000305175781, p762 * 201.08523559570312, p762 * 304.0000305175781, p762 * 201.08523559570312, p762 * 315.0000305175781, p762 * 196.58523559570312);
    v1158.bezierCurveTo(p762 * 350.0000305175781, p762 * 219.58523559570312, p762 * 343.0000305175781, p762 * 221.58523559570312, p762 * 351.0000305175781, p762 * 230.58523559570312);
    v1158.bezierCurveTo(p762 * 296.0000305175781, p762 * 260.5852355957031, p762 * 264.0000305175781, p762 * 256.5852355957031, p762 * 220.00003051757812, p762 * 236.58523559570312);
    v1158.bezierCurveTo(p762 * 233.00003051757812, p762 * 266.5852355957031, p762 * 232.00003051757812, p762 * 279.5852355957031, p762 * 231.00003051757812, p762 * 295.5852355957031);
    v1158.bezierCurveTo(p762 * 222.00003051757812, p762 * 297.5852355957031, p762 * 222.00003051757812, p762 * 297.5852355957031, p762 * 213.00003051757812, p762 * 299.5852355957031);
    v1158.bezierCurveTo(p762 * 219.50003051757812, p762 * 308.0852355957031, p762 * 219.50003051757812, p762 * 308.0852355957031, p762 * 226.00003051757812, p762 * 316.5852355957031);
    v1158.bezierCurveTo(p762 * 223.00003051757812, p762 * 344.5852355957031, p762 * 216.00003051757812, p762 * 350.5852355957031, p762 * 209.00003051757812, p762 * 363.5852355957031);
    v1158.bezierCurveTo(p762 * 154.00003051757812, p762 * 318.5852355957031, p762 * 156.00003051757812, p762 * 268.5852355957031, p762 * 160.00003051757812, p762 * 238.58523559570312);
    v1158.bezierCurveTo(p762 * 135.00003051757812, p762 * 268.5852355957031, p762 * 125.00003051757812, p762 * 267.5852355957031, p762 * 112.00003051757812, p762 * 272.5852355957031);
    v1158.bezierCurveTo(p762 * 104.50003051757812, p762 * 266.5852355957031, p762 * 104.50003051757812, p762 * 266.5852355957031, p762 * 97.00003051757812, p762 * 260.5852355957031);
    v1158.bezierCurveTo(p762 * 93.00003051757812, p762 * 271.0852355957031, p762 * 93.00003051757812, p762 * 271.0852355957031, p762 * 89.00003051757812, p762 * 281.5852355957031);
    v1158.bezierCurveTo(p762 * 66.00003051757812, p762 * 288.5852355957031, p762 * 59.000030517578125, p762 * 288.5852355957031, p762 * 39.000030517578125, p762 * 285.5852355957031);
    v1158.bezierCurveTo(p762 * 56.000030517578125, p762 * 216.58523559570312, p762 * 91.00003051757812, p762 * 204.58523559570312, p762 * 129.00003051757812, p762 * 189.58523559570312);
    v1158.bezierCurveTo(p762 * 90.00003051757812, p762 * 176.58523559570312, p762 * 89.00003051757812, p762 * 173.58523559570312, p762 * 79.00003051757812, p762 * 166.58523559570312);
    v1158.bezierCurveTo(p762 * 82.00003051757812, p762 * 155.08523559570312, p762 * 82.00003051757812, p762 * 155.08523559570312, p762 * 85.00003051757812, p762 * 143.58523559570312);
    v1158.bezierCurveTo(p762 * 75.50003051757812, p762 * 147.58523559570312, p762 * 75.50003051757812, p762 * 147.58523559570312, p762 * 66.00003051757812, p762 * 151.58523559570312);
    v1158.bezierCurveTo(p762 * 44.000030517578125, p762 * 133.58523559570312, p762 * 41.000030517578125, p762 * 124.58523559570312, p762 * 34.000030517578125, p762 * 102.58523559570312);
    v1158.bezierCurveTo(p762 * 100.00003051757812, p762 * 81.58523559570312, p762 * 134.00003051757812, p762 * 118.58523559570312, p762 * 150.00003051757812, p762 * 128.58523559570312);
    v1158.bezierCurveTo(p762 * 144.00003051757812, p762 * 102.58523559570312, p762 * 147.00003051757812, p762 * 90.58523559570312, p762 * 150.00003051757812, p762 * 80.58523559570312);
    v1158.bezierCurveTo(p762 * 159.50003051757812, p762 * 79.08523559570312, p762 * 159.50003051757812, p762 * 79.08523559570312, p762 * 169.00003051757812, p762 * 77.58523559570312);
    v1158.bezierCurveTo(p762 * 163.00003051757812, p762 * 72.58523559570312, p762 * 163.00003051757812, p762 * 72.58523559570312, p762 * 157.00003051757812, p762 * 67.58523559570312);
    v1158.bezierCurveTo(p762 * 162.00003051757812, p762 * 42.585235595703125, p762 * 169.00003051757812, p762 * 29.585235595703125, p762 * 182.00003051757812, p762 * 14.585235595703125);
    v1158.bezierCurveTo(p762 * 219.00003051757812, p762 * 48.585235595703125, p762 * 222.00003051757812, p762 * 92.58523559570312, p762 * 218.00003051757812, p762 * 112.58523559570312);
    v1158.bezierCurveTo(p762 * 239.00003051757812, p762 * 95.58523559570312, p762 * 242.00003051757812, p762 * 97.58523559570312, p762 * 249.00003051757812, p762 * 94.58523559570312);
    v1158.bezierCurveTo(p762 * 255.00003051757812, p762 * 103.08523559570312, p762 * 255.00003051757812, p762 * 103.08523559570312, p762 * 261.0000305175781, p762 * 111.58523559570312);
    v1158.bezierCurveTo(p762 * 261.5000305175781, p762 * 99.58523559570312, p762 * 261.5000305175781, p762 * 99.58523559570312, p762 * 262.0000305175781, p762 * 87.58523559570312);
    v1158.bezierCurveTo(p762 * 282.0000305175781, p762 * 77.58523559570312, p762 * 301.0000305175781, p762 * 74.58523559570312, p762 * 314.0000305175781, p762 * 76.58523559570312);
    v1158.closePath();
    f88(v1158, p763[1], p763[2], p762 * 4);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 186.00003051757812, p762 * 192.94886779785156);
    v1158.bezierCurveTo(p762 * 185.00003051757812, p762 * 66.94886779785156, p762 * 184.50003051757812, p762 * 104.94886779785156, p762 * 183.00003051757812, p762 * 16.948867797851562);
    v1158.bezierCurveTo(p762 * 216.00003051757812, p762 * 47.94886779785156, p762 * 219.00003051757812, p762 * 80.94886779785156, p762 * 218.00003051757812, p762 * 113.94886779785156);
    v1158.bezierCurveTo(p762 * 209.00003051757812, p762 * 165.94886779785156, p762 * 200.00003051757812, p762 * 176.94886779785156, p762 * 189.00003051757812, p762 * 192.94886779785156);
    v1158.closePath();
    f88(v1158, p763[3], p763[3], p762 * 2);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 190.00003051757812, p762 * 191.94886779785156);
    v1158.bezierCurveTo(p762 * 207.00003051757812, p762 * 348.94886779785156, p762 * 205.00003051757812, p762 * 323.94886779785156, p762 * 209.00003051757812, p762 * 358.94886779785156);
    v1158.bezierCurveTo(p762 * 171.00003051757812, p762 * 334.94886779785156, p762 * 167.00003051757812, p762 * 302.94886779785156, p762 * 161.00003051757812, p762 * 268.94886779785156);
    v1158.bezierCurveTo(p762 * 160.00003051757812, p762 * 218.94886779785156, p762 * 181.00003051757812, p762 * 191.94886779785156, p762 * 189.00003051757812, p762 * 186.94886779785156);
    v1158.closePath();
    f88(v1158, p763[3], p763[3], p762 * 2);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 194.00003051757812, p762 * 195.94886779785156);
    v1158.bezierCurveTo(p762 * 116.00003051757812, p762 * 150.94886779785156, p762 * 116.00003051757812, p762 * 150.94886779785156, p762 * 38.000030517578125, p762 * 105.94886779785156);
    v1158.bezierCurveTo(p762 * 67.00003051757812, p762 * 90.94886779785156, p762 * 96.00003051757812, p762 * 99.94886779785156, p762 * 123.00003051757812, p762 * 111.94886779785156);
    v1158.bezierCurveTo(p762 * 183.00003051757812, p762 * 152.94886779785156, p762 * 179.00003051757812, p762 * 180.94886779785156, p762 * 193.00003051757812, p762 * 194.94886779785156);
    v1158.closePath();
    f88(v1158, p763[3], p763[3], p762 * 2);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 189.00003051757812, p762 * 190.94886779785156);
    v1158.bezierCurveTo(p762 * 250.00003051757812, p762 * 133.94886779785156, p762 * 311.0000305175781, p762 * 78.94886779785156, p762 * 311.0000305175781, p762 * 76.94886779785156);
    v1158.bezierCurveTo(p762 * 306.0000305175781, p762 * 127.94886779785156, p762 * 283.0000305175781, p762 * 148.94886779785156, p762 * 261.0000305175781, p762 * 166.94886779785156);
    v1158.bezierCurveTo(p762 * 220.00003051757812, p762 * 197.94886779785156, p762 * 191.00003051757812, p762 * 194.94886779785156, p762 * 189.00003051757812, p762 * 195.94886779785156);
    v1158.closePath();
    f88(v1158, p763[3], p763[3], p762 * 2);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 189.00003051757812, p762 * 194.94886779785156);
    v1158.bezierCurveTo(p762 * 268.5000305175781, p762 * 211.94886779785156, p762 * 268.5000305175781, p762 * 211.94886779785156, p762 * 348.0000305175781, p762 * 228.94886779785156);
    v1158.bezierCurveTo(p762 * 316.0000305175781, p762 * 247.94886779785156, p762 * 298.0000305175781, p762 * 256.94886779785156, p762 * 250.00003051757812, p762 * 246.94886779785156);
    v1158.bezierCurveTo(p762 * 197.00003051757812, p762 * 229.94886779785156, p762 * 189.00003051757812, p762 * 202.94886779785156, p762 * 188.00003051757812, p762 * 199.94886779785156);
    v1158.closePath();
    f88(v1158, p763[3], p763[3], p762 * 2);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 192.00003051757812, p762 * 191.94886779785156);
    v1158.bezierCurveTo(p762 * 116.50003051757812, p762 * 238.44886779785156, p762 * 116.50003051757812, p762 * 238.44886779785156, p762 * 41.000030517578125, p762 * 284.94886779785156);
    v1158.bezierCurveTo(p762 * 49.000030517578125, p762 * 252.94886779785156, p762 * 56.000030517578125, p762 * 242.94886779785156, p762 * 80.00003051757812, p762 * 215.94886779785156);
    v1158.bezierCurveTo(p762 * 125.00003051757812, p762 * 181.94886779785156, p762 * 174.00003051757812, p762 * 183.94886779785156, p762 * 192.00003051757812, p762 * 191.94886779785156);
    v1158.closePath();
    f88(v1158, p763[3], p763[3], p762 * 2);
    v1158.beginPath();
    v1158.lineCap = "round";
    v1158.lineJoin = "round";
    v1158.moveTo(p762 * 313.0000305175781, p762 * 76.58523559570312);
    v1158.bezierCurveTo(p762 * 308.0000305175781, p762 * 130.58523559570312, p762 * 279.0000305175781, p762 * 158.58523559570312, p762 * 254.00003051757812, p762 * 175.58523559570312);
    v1158.bezierCurveTo(p762 * 287.0000305175781, p762 * 182.58523559570312, p762 * 274.0000305175781, p762 * 181.08523559570312, p762 * 294.0000305175781, p762 * 186.58523559570312);
    v1158.bezierCurveTo(p762 * 293.5000305175781, p762 * 196.08523559570312, p762 * 293.5000305175781, p762 * 196.08523559570312, p762 * 293.0000305175781, p762 * 205.58523559570312);
    v1158.bezierCurveTo(p762 * 304.0000305175781, p762 * 201.08523559570312, p762 * 304.0000305175781, p762 * 201.08523559570312, p762 * 315.0000305175781, p762 * 196.58523559570312);
    v1158.bezierCurveTo(p762 * 350.0000305175781, p762 * 219.58523559570312, p762 * 343.0000305175781, p762 * 221.58523559570312, p762 * 351.0000305175781, p762 * 230.58523559570312);
    v1158.bezierCurveTo(p762 * 296.0000305175781, p762 * 260.5852355957031, p762 * 264.0000305175781, p762 * 256.5852355957031, p762 * 220.00003051757812, p762 * 236.58523559570312);
    v1158.bezierCurveTo(p762 * 233.00003051757812, p762 * 266.5852355957031, p762 * 232.00003051757812, p762 * 279.5852355957031, p762 * 231.00003051757812, p762 * 295.5852355957031);
    v1158.bezierCurveTo(p762 * 222.00003051757812, p762 * 297.5852355957031, p762 * 222.00003051757812, p762 * 297.5852355957031, p762 * 213.00003051757812, p762 * 299.5852355957031);
    v1158.bezierCurveTo(p762 * 219.50003051757812, p762 * 308.0852355957031, p762 * 219.50003051757812, p762 * 308.0852355957031, p762 * 226.00003051757812, p762 * 316.5852355957031);
    v1158.bezierCurveTo(p762 * 223.00003051757812, p762 * 344.5852355957031, p762 * 216.00003051757812, p762 * 350.5852355957031, p762 * 209.00003051757812, p762 * 363.5852355957031);
    v1158.bezierCurveTo(p762 * 154.00003051757812, p762 * 318.5852355957031, p762 * 156.00003051757812, p762 * 268.5852355957031, p762 * 160.00003051757812, p762 * 238.58523559570312);
    v1158.bezierCurveTo(p762 * 135.00003051757812, p762 * 268.5852355957031, p762 * 125.00003051757812, p762 * 267.5852355957031, p762 * 112.00003051757812, p762 * 272.5852355957031);
    v1158.bezierCurveTo(p762 * 104.50003051757812, p762 * 266.5852355957031, p762 * 104.50003051757812, p762 * 266.5852355957031, p762 * 97.00003051757812, p762 * 260.5852355957031);
    v1158.bezierCurveTo(p762 * 93.00003051757812, p762 * 271.0852355957031, p762 * 93.00003051757812, p762 * 271.0852355957031, p762 * 89.00003051757812, p762 * 281.5852355957031);
    v1158.bezierCurveTo(p762 * 66.00003051757812, p762 * 288.5852355957031, p762 * 59.000030517578125, p762 * 288.5852355957031, p762 * 39.000030517578125, p762 * 285.5852355957031);
    v1158.bezierCurveTo(p762 * 56.000030517578125, p762 * 216.58523559570312, p762 * 91.00003051757812, p762 * 204.58523559570312, p762 * 129.00003051757812, p762 * 189.58523559570312);
    v1158.bezierCurveTo(p762 * 90.00003051757812, p762 * 176.58523559570312, p762 * 89.00003051757812, p762 * 173.58523559570312, p762 * 79.00003051757812, p762 * 166.58523559570312);
    v1158.bezierCurveTo(p762 * 82.00003051757812, p762 * 155.08523559570312, p762 * 82.00003051757812, p762 * 155.08523559570312, p762 * 85.00003051757812, p762 * 143.58523559570312);
    v1158.bezierCurveTo(p762 * 75.50003051757812, p762 * 147.58523559570312, p762 * 75.50003051757812, p762 * 147.58523559570312, p762 * 66.00003051757812, p762 * 151.58523559570312);
    v1158.bezierCurveTo(p762 * 44.000030517578125, p762 * 133.58523559570312, p762 * 41.000030517578125, p762 * 124.58523559570312, p762 * 34.000030517578125, p762 * 102.58523559570312);
    v1158.bezierCurveTo(p762 * 100.00003051757812, p762 * 81.58523559570312, p762 * 134.00003051757812, p762 * 118.58523559570312, p762 * 150.00003051757812, p762 * 128.58523559570312);
    v1158.bezierCurveTo(p762 * 144.00003051757812, p762 * 102.58523559570312, p762 * 147.00003051757812, p762 * 90.58523559570312, p762 * 150.00003051757812, p762 * 80.58523559570312);
    v1158.bezierCurveTo(p762 * 159.50003051757812, p762 * 79.08523559570312, p762 * 159.50003051757812, p762 * 79.08523559570312, p762 * 169.00003051757812, p762 * 77.58523559570312);
    v1158.bezierCurveTo(p762 * 163.00003051757812, p762 * 72.58523559570312, p762 * 163.00003051757812, p762 * 72.58523559570312, p762 * 157.00003051757812, p762 * 67.58523559570312);
    v1158.bezierCurveTo(p762 * 162.00003051757812, p762 * 42.585235595703125, p762 * 169.00003051757812, p762 * 29.585235595703125, p762 * 182.00003051757812, p762 * 14.585235595703125);
    v1158.bezierCurveTo(p762 * 219.00003051757812, p762 * 48.585235595703125, p762 * 222.00003051757812, p762 * 92.58523559570312, p762 * 218.00003051757812, p762 * 112.58523559570312);
    v1158.bezierCurveTo(p762 * 239.00003051757812, p762 * 95.58523559570312, p762 * 242.00003051757812, p762 * 97.58523559570312, p762 * 249.00003051757812, p762 * 94.58523559570312);
    v1158.bezierCurveTo(p762 * 255.00003051757812, p762 * 103.08523559570312, p762 * 255.00003051757812, p762 * 103.08523559570312, p762 * 261.0000305175781, p762 * 111.58523559570312);
    v1158.bezierCurveTo(p762 * 261.5000305175781, p762 * 99.58523559570312, p762 * 261.5000305175781, p762 * 99.58523559570312, p762 * 262.0000305175781, p762 * 87.58523559570312);
    v1158.bezierCurveTo(p762 * 282.0000305175781, p762 * 77.58523559570312, p762 * 301.0000305175781, p762 * 74.58523559570312, p762 * 314.0000305175781, p762 * 76.58523559570312);
    v1158.closePath();
    f88(v1158, vVVVVVUndefined1422, p763[2], p762 * 4);
    return v1157;
  }
  function f174(p764, p765, p766) {
    var v1159 = document.createElement("canvas");
    var v1160 = v1159.getContext("2d");
    v1159.width = p764 * 309;
    v1159.height = p764 * 287;
    v1160.globalAlpha = p765 ? 0.5 : 1;
    v1160.translate(p764 * 10, p764 * 5);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 34.5, p764 * 38.53125);
    v1160.bezierCurveTo(p764 * 91.5, p764 * 30.53125, p764 * 138.5, p764 * 68.53125, p764 * 169.5, p764 * 93.53125);
    v1160.bezierCurveTo(p764 * 208.5, p764 * 128.53125, p764 * 226.5, p764 * 157.53125, p764 * 233.5, p764 * 209.53125);
    v1160.bezierCurveTo(p764 * 195.5, p764 * 218.53125, p764 * 138.5, p764 * 191.53125, p764 * 105.5, p764 * 157.53125);
    v1160.bezierCurveTo(p764 * 54.5, p764 * 112.53125, p764 * 41.5, p764 * 80.53125, p764 * 33.5, p764 * 38.53125);
    v1160.closePath();
    f88(v1160, p766[0], p766[0], p764 * 10);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 143.5, p764 * 74.53125);
    v1160.bezierCurveTo(p764 * 164.5, p764 * 73.53125, p764 * 159, p764 * 74.53125, p764 * 174.5, p764 * 74.53125);
    v1160.bezierCurveTo(p764 * 186, p764 * 86.53125, p764 * 186, p764 * 86.53125, p764 * 197.5, p764 * 98.53125);
    v1160.bezierCurveTo(p764 * 186, p764 * 97.03125, p764 * 186, p764 * 97.03125, p764 * 174.5, p764 * 95.53125);
    v1160.closePath();
    f88(v1160, p766[0], p766[0], p764 * 10);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 87.5, p764 * 142.53125);
    v1160.bezierCurveTo(p764 * 92, p764 * 160.03125, p764 * 92, p764 * 160.03125, p764 * 96.5, p764 * 177.53125);
    v1160.bezierCurveTo(p764 * 108, p764 * 181.53125, p764 * 108, p764 * 181.53125, p764 * 119.5, p764 * 185.53125);
    v1160.bezierCurveTo(p764 * 116.5, p764 * 175.53125, p764 * 116.5, p764 * 175.53125, p764 * 113.5, p764 * 165.53125);
    v1160.closePath();
    f88(v1160, p766[0], p766[0], p764 * 10);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 236.5, p764 * 189.53125);
    v1160.bezierCurveTo(p764 * 274.5, p764 * 197.53125, p764 * 255.5, p764 * 194.03125, p764 * 274.5, p764 * 198.53125);
    v1160.bezierCurveTo(p764 * 272.5, p764 * 236.53125, p764 * 261.5, p764 * 237.53125, p764 * 242.5, p764 * 248.53125);
    v1160.bezierCurveTo(p764 * 230.5, p764 * 231.03125, p764 * 230.5, p764 * 231.03125, p764 * 218.5, p764 * 213.53125);
    v1160.closePath();
    f88(v1160, p766[0], p766[0], p764 * 10);
    v1160.globalAlpha = 1;
    v1160.translate(p764 * -10, p764 * -5);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 34.5, p764 * 38.53125);
    v1160.bezierCurveTo(p764 * 91.5, p764 * 30.53125, p764 * 138.5, p764 * 68.53125, p764 * 169.5, p764 * 93.53125);
    v1160.bezierCurveTo(p764 * 208.5, p764 * 128.53125, p764 * 226.5, p764 * 157.53125, p764 * 233.5, p764 * 209.53125);
    v1160.bezierCurveTo(p764 * 195.5, p764 * 218.53125, p764 * 138.5, p764 * 191.53125, p764 * 105.5, p764 * 157.53125);
    v1160.bezierCurveTo(p764 * 54.5, p764 * 112.53125, p764 * 41.5, p764 * 80.53125, p764 * 33.5, p764 * 38.53125);
    v1160.closePath();
    f88(v1160, p766[1], p766[2], p764 * 10);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 143.5, p764 * 74.53125);
    v1160.bezierCurveTo(p764 * 164.5, p764 * 73.53125, p764 * 159, p764 * 74.53125, p764 * 174.5, p764 * 74.53125);
    v1160.bezierCurveTo(p764 * 186, p764 * 86.53125, p764 * 186, p764 * 86.53125, p764 * 197.5, p764 * 98.53125);
    v1160.bezierCurveTo(p764 * 186, p764 * 97.03125, p764 * 186, p764 * 97.03125, p764 * 174.5, p764 * 95.53125);
    v1160.closePath();
    f88(v1160, p766[1], p766[2], p764 * 10);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 87.5, p764 * 142.53125);
    v1160.bezierCurveTo(p764 * 92, p764 * 160.03125, p764 * 92, p764 * 160.03125, p764 * 96.5, p764 * 177.53125);
    v1160.bezierCurveTo(p764 * 108, p764 * 181.53125, p764 * 108, p764 * 181.53125, p764 * 119.5, p764 * 185.53125);
    v1160.bezierCurveTo(p764 * 116.5, p764 * 175.53125, p764 * 116.5, p764 * 175.53125, p764 * 113.5, p764 * 165.53125);
    v1160.closePath();
    f88(v1160, p766[1], p766[2], p764 * 10);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 236.5, p764 * 189.53125);
    v1160.bezierCurveTo(p764 * 274.5, p764 * 197.53125, p764 * 255.5, p764 * 194.03125, p764 * 274.5, p764 * 198.53125);
    v1160.bezierCurveTo(p764 * 272.5, p764 * 236.53125, p764 * 261.5, p764 * 237.53125, p764 * 242.5, p764 * 248.53125);
    v1160.bezierCurveTo(p764 * 230.5, p764 * 231.03125, p764 * 230.5, p764 * 231.03125, p764 * 218.5, p764 * 213.53125);
    v1160.closePath();
    f88(v1160, p766[1], p766[2], p764 * 10);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 109.5, p764 * 51.53125);
    v1160.bezierCurveTo(p764 * 107.5, p764 * 92.53125, p764 * 91.5, p764 * 95.53125, p764 * 59.5, p764 * 101.53125);
    f88(v1160, p766[1], p766[2], p764 * 7);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 72.5, p764 * 51.53125);
    v1160.bezierCurveTo(p764 * 71, p764 * 64.53125, p764 * 69.5, p764 * 76.53125, p764 * 69.5, p764 * 77.53125);
    v1160.closePath();
    f88(v1160, p766[1], p766[2], p764 * 7);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 84.5, p764 * 63.53125);
    v1160.bezierCurveTo(p764 * 70.5, p764 * 65.03125, p764 * 70.5, p764 * 65.03125, p764 * 56.5, p764 * 66.53125);
    v1160.closePath();
    f88(v1160, p766[1], p766[2], p764 * 7);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 125.5, p764 * 84.53125);
    v1160.bezierCurveTo(p764 * 125.5, p764 * 110.03125, p764 * 125.5, p764 * 110.03125, p764 * 125.5, p764 * 135.53125);
    v1160.closePath();
    f88(v1160, p766[1], p766[2], p764 * 7);
    v1160.beginPath();
    v1160.lineCap = "round";
    v1160.lineJoin = "round";
    v1160.moveTo(p764 * 149.5, p764 * 108.53125);
    v1160.bezierCurveTo(p764 * 150, p764 * 137.03125, p764 * 150, p764 * 137.03125, p764 * 150.5, p764 * 165.53125);
    v1160.closePath();
    f88(v1160, p766[1], p766[2], p764 * 7);
    return v1159;
  }
  function f175(p767, p768, p769) {
    var v1161 = document.createElement("canvas");
    var v1162 = v1161.getContext("2d");
    v1161.width = p767 * 175;
    v1161.height = p767 * 169;
    v1162.globalAlpha = 0.5;
    v1162.translate(0, p767 * 3);
    v1162.beginPath();
    v1162.lineCap = "round";
    v1162.lineJoin = "round";
    v1162.moveTo(p767 * 19, p767 * 139);
    v1162.bezierCurveTo(p767 * 18, p767 * 163, p767 * 22, p767 * 156, p767 * 53, p767 * 157);
    v1162.bezierCurveTo(p767 * 97.5, p767 * 157, p767 * 97.5, p767 * 157, p767 * 142, p767 * 157);
    v1162.bezierCurveTo(p767 * 150, p767 * 157, p767 * 153, p767 * 156, p767 * 154, p767 * 142);
    v1162.closePath();
    f88(v1162, p769[0]);
    v1162.globalAlpha = 1;
    v1162.translate(0, p767 * -3);
    v1162.save();
    v1162.translate(p767 * 86.5, p767 * 81.5);
    f86(v1162, p767 * -66.5, p767 * -65.5, p767 * 133, p767 * 131, p767 * 10);
    v1162.restore();
    f88(v1162, p769[1], p769[2], p767 * 5);
    v1162.save();
    v1162.translate(p767 * 84.5, p767 * 79);
    f86(v1162, p767 * -50.5, p767 * -49, p767 * 101, p767 * 98, p767 * 10);
    v1162.restore();
    f88(v1162, p769[3], p769[2], p767 * 5);
    v1162.beginPath();
    v1162.lineCap = "round";
    v1162.lineJoin = "round";
    v1162.moveTo(p767 * 42, p767 * 54);
    v1162.bezierCurveTo(p767 * 37, p767 * 48, p767 * 39, p767 * 44, p767 * 38, p767 * 41);
    v1162.bezierCurveTo(p767 * 42, p767 * 40, p767 * 45, p767 * 40, p767 * 50, p767 * 41);
    v1162.bezierCurveTo(p767 * 85, p767 * 36, p767 * 98, p767 * 37, p767 * 116, p767 * 42);
    v1162.bezierCurveTo(p767 * 132, p767 * 39, p767 * 132, p767 * 39, p767 * 133, p767 * 56);
    v1162.bezierCurveTo(p767 * 136, p767 * 73, p767 * 136, p767 * 84, p767 * 132, p767 * 106);
    v1162.bezierCurveTo(p767 * 47, p767 * 113, p767 * 85.5, p767 * 106, p767 * 39, p767 * 106);
    v1162.bezierCurveTo(p767 * 32, p767 * 81, p767 * 38, p767 * 60, p767 * 42, p767 * 55);
    v1162.closePath();
    f88(v1162, p769[4], p769[5], p767 * 5);
    v1162.save();
    v1162.translate(p767 * 28, p767 * 24);
    v1162.rotate(0);
    f86(v1162, p767 * -14, p767 * -14, p767 * 28, p767 * 28, p767 * 4);
    v1162.restore();
    f88(v1162, p769[1], p769[2], p767 * 5);
    v1162.save();
    v1162.translate(p767 * 143, p767 * 23);
    v1162.rotate(0);
    f86(v1162, p767 * -14, p767 * -14, p767 * 28, p767 * 28, p767 * 4);
    v1162.restore();
    f88(v1162, p769[1], p769[2], p767 * 5);
    v1162.beginPath();
    v1162.lineCap = "round";
    v1162.lineJoin = "round";
    v1162.moveTo(p767 * 55, p767 * 80);
    v1162.bezierCurveTo(p767 * 73, p767 * 78, p767 * 84, p767 * 74, p767 * 100, p767 * 64);
    v1162.bezierCurveTo(p767 * 111, p767 * 57, p767 * 125, p767 * 67, p767 * 108, p767 * 84);
    v1162.bezierCurveTo(p767 * 96, p767 * 95, p767 * 86, p767 * 96, p767 * 70, p767 * 88);
    v1162.bezierCurveTo(p767 * 62.5, p767 * 84, p767 * 62.5, p767 * 84, p767 * 55, p767 * 80);
    v1162.closePath();
    f88(v1162, p769[5]);
    v1162.beginPath();
    v1162.lineCap = "round";
    v1162.lineJoin = "round";
    v1162.moveTo(p767 * 17, p767 * 112);
    v1162.bezierCurveTo(p767 * 14, p767 * 146, p767 * 27, p767 * 152, p767 * 37, p767 * 149);
    v1162.bezierCurveTo(p767 * 78, p767 * 155, p767 * 128, p767 * 150, p767 * 146, p767 * 150);
    v1162.bezierCurveTo(p767 * 158, p767 * 144, p767 * 158, p767 * 121, p767 * 153, p767 * 114);
    v1162.closePath();
    f88(v1162, p769[8], p769[9], p767 * 5);
    v1162.beginPath();
    v1162.lineCap = "round";
    v1162.lineJoin = "round";
    v1162.moveTo(p767 * 127, p767 * 111);
    v1162.bezierCurveTo(p767 * 133, p767 * 136, p767 * 115, p767 * 149, p767 * 88, p767 * 150);
    v1162.bezierCurveTo(p767 * 119.5, p767 * 151, p767 * 119.5, p767 * 151, p767 * 151, p767 * 152);
    v1162.bezierCurveTo(p767 * 159, p767 * 136, p767 * 155, p767 * 126, p767 * 154, p767 * 113);
    v1162.closePath();
    f88(v1162, p769[9]);
    v1162.globalAlpha = 0.5;
    v1162.translate(0, p767 * 3);
    v1162.beginPath();
    v1162.lineCap = "round";
    v1162.lineJoin = "round";
    v1162.moveTo(p767 * 15, p767 * 117);
    v1162.bezierCurveTo(p767 * 34, p767 * 109, p767 * 61, p767 * 106, p767 * 94, p767 * 109);
    v1162.bezierCurveTo(p767 * 126, p767 * 110, p767 * 142, p767 * 113, p767 * 154, p767 * 119);
    v1162.bezierCurveTo(p767 * 154, p767 * 123, p767 * 154, p767 * 123, p767 * 154, p767 * 127);
    v1162.bezierCurveTo(p767 * 127, p767 * 118, p767 * 15, p767 * 122, p767 * 18, p767 * 129);
    v1162.closePath();
    f88(v1162, p769[0]);
    v1162.globalAlpha = 1;
    v1162.translate(0, p767 * -3);
    v1162.beginPath();
    v1162.lineCap = "round";
    v1162.lineJoin = "round";
    v1162.moveTo(p767 * 14, p767 * 127);
    v1162.bezierCurveTo(p767 * 13, p767 * 117, p767 * 12, p767 * 109, p767 * 15, p767 * 103);
    v1162.bezierCurveTo(p767 * 16, p767 * 95, p767 * 21, p767 * 92, p767 * 60, p767 * 93);
    v1162.bezierCurveTo(p767 * 91, p767 * 93, p767 * 118, p767 * 93, p767 * 143, p767 * 96);
    v1162.bezierCurveTo(p767 * 151, p767 * 96, p767 * 155, p767 * 99, p767 * 156, p767 * 112);
    v1162.bezierCurveTo(p767 * 157, p767 * 124, p767 * 157, p767 * 127, p767 * 156, p767 * 128);
    v1162.bezierCurveTo(p767 * 138, p767 * 112, p767 * 100, p767 * 118, p767 * 84, p767 * 118);
    v1162.bezierCurveTo(p767 * 28, p767 * 118, p767 * 20, p767 * 120, p767 * 16, p767 * 127);
    v1162.closePath();
    f88(v1162, p769[4], p769[5], p767 * 5);
    v1162.save();
    v1162.translate(p767 * 27.5, p767 * 138.5);
    f86(v1162, p767 * -13.5, p767 * -14.5, p767 * 27, p767 * 29, p767 * 4);
    v1162.restore();
    f88(v1162, p769[1], p769[2], p767 * 5);
    v1162.save();
    v1162.translate(p767 * 143.5, p767 * 137);
    f86(v1162, p767 * -13.5, p767 * -14, p767 * 27, p767 * 28, p767 * 4);
    v1162.restore();
    f88(v1162, p769[1], p769[2], p767 * 5);
    return v1161;
  }
  function f176(p770, p771, p772) {
    var v1163 = document.createElement("canvas");
    var v1164 = v1163.getContext("2d");
    v1163.width = p770 * 106;
    v1163.height = p770 * 681;
    v1164.translate(p770 * 20, p770 * 20);
    v1164.globalAlpha = p771 ? 0.5 : 1;
    v1164.save();
    v1164.translate(p770 * 52.5, p770 * 395);
    v1164.rotate(0);
    f86(v1164, p770 * -11.5, p770 * -226, p770 * 23, p770 * 452, p770 * 10);
    v1164.restore();
    f88(v1164, p772[0]);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 35, p770 * 588);
    v1164.bezierCurveTo(p770 * 47, p770 * 596, p770 * 61, p770 * 594, p770 * 69, p770 * 588);
    v1164.bezierCurveTo(p770 * 79, p770 * 615, p770 * 78, p770 * 632, p770 * 59, p770 * 643);
    v1164.bezierCurveTo(p770 * 41, p770 * 650, p770 * 27, p770 * 632, p770 * 30, p770 * 610);
    v1164.closePath();
    f88(v1164, p772[0]);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 52, p770 * 135);
    v1164.bezierCurveTo(p770 * 61.5, p770 * 142, p770 * 61.5, p770 * 142, p770 * 71, p770 * 149);
    v1164.bezierCurveTo(p770 * 69.5, p770 * 166, p770 * 69.5, p770 * 166, p770 * 68, p770 * 183);
    v1164.bezierCurveTo(p770 * 60.5, p770 * 187.5, p770 * 60.5, p770 * 187.5, p770 * 53, p770 * 192);
    v1164.bezierCurveTo(p770 * 45, p770 * 187.5, p770 * 45, p770 * 187.5, p770 * 37, p770 * 183);
    v1164.bezierCurveTo(p770 * 35.5, p770 * 167, p770 * 35.5, p770 * 167, p770 * 34, p770 * 151);
    v1164.closePath();
    f88(v1164, p772[0]);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 64, p770 * 150);
    v1164.bezierCurveTo(p770 * 63, p770 * 164, p770 * 63, p770 * 164, p770 * 62, p770 * 178);
    v1164.bezierCurveTo(p770 * 58, p770 * 181, p770 * 58, p770 * 181, p770 * 54, p770 * 184);
    v1164.bezierCurveTo(p770 * 48.5, p770 * 181.5, p770 * 48.5, p770 * 181.5, p770 * 43, p770 * 179);
    v1164.bezierCurveTo(p770 * 42, p770 * 164.5, p770 * 42, p770 * 164.5, p770 * 41, p770 * 150);
    v1164.bezierCurveTo(p770 * 46, p770 * 152.5, p770 * 46, p770 * 152.5, p770 * 51, p770 * 155);
    v1164.closePath();
    f88(v1164, p772[0]);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 52, p770 * 39);
    v1164.bezierCurveTo(p770 * 65.5, p770 * 82, p770 * 65.5, p770 * 82, p770 * 79, p770 * 125);
    v1164.bezierCurveTo(p770 * 66, p770 * 137.5, p770 * 66, p770 * 137.5, p770 * 53, p770 * 150);
    v1164.bezierCurveTo(p770 * 39, p770 * 138, p770 * 39, p770 * 138, p770 * 25, p770 * 126);
    v1164.closePath();
    f88(v1164, p772[0]);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 52, p770 * 64);
    v1164.bezierCurveTo(p770 * 60, p770 * 92.5, p770 * 60, p770 * 92.5, p770 * 68, p770 * 121);
    v1164.bezierCurveTo(p770 * 61, p770 * 127.5, p770 * 61, p770 * 127.5, p770 * 54, p770 * 134);
    v1164.bezierCurveTo(p770 * 46.5, p770 * 127.5, p770 * 46.5, p770 * 127.5, p770 * 39, p770 * 121);
    v1164.closePath();
    f88(v1164, p772[0]);
    v1164.translate(p770 * -20, p770 * -20);
    v1164.globalAlpha = 1;
    v1164.save();
    v1164.translate(p770 * 52.5, p770 * 395);
    v1164.rotate(0);
    f86(v1164, p770 * -11.5, p770 * -226, p770 * 23, p770 * 452, p770 * 10);
    v1164.restore();
    f88(v1164, p772[1], p772[2], p770 * 8);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 35, p770 * 588);
    v1164.bezierCurveTo(p770 * 47, p770 * 596, p770 * 61, p770 * 594, p770 * 69, p770 * 588);
    v1164.bezierCurveTo(p770 * 79, p770 * 615, p770 * 78, p770 * 632, p770 * 59, p770 * 643);
    v1164.bezierCurveTo(p770 * 41, p770 * 650, p770 * 27, p770 * 632, p770 * 30, p770 * 610);
    v1164.closePath();
    f88(v1164, p772[3], p772[4], p770 * 8);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 52, p770 * 135);
    v1164.bezierCurveTo(p770 * 61.5, p770 * 142, p770 * 61.5, p770 * 142, p770 * 71, p770 * 149);
    v1164.bezierCurveTo(p770 * 69.5, p770 * 166, p770 * 69.5, p770 * 166, p770 * 68, p770 * 183);
    v1164.bezierCurveTo(p770 * 60.5, p770 * 187.5, p770 * 60.5, p770 * 187.5, p770 * 53, p770 * 192);
    v1164.bezierCurveTo(p770 * 45, p770 * 187.5, p770 * 45, p770 * 187.5, p770 * 37, p770 * 183);
    v1164.bezierCurveTo(p770 * 35.5, p770 * 167, p770 * 35.5, p770 * 167, p770 * 34, p770 * 151);
    v1164.closePath();
    f88(v1164, p772[3], p772[4], p770 * 8);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 64, p770 * 150);
    v1164.bezierCurveTo(p770 * 63, p770 * 164, p770 * 63, p770 * 164, p770 * 62, p770 * 178);
    v1164.bezierCurveTo(p770 * 58, p770 * 181, p770 * 58, p770 * 181, p770 * 54, p770 * 184);
    v1164.bezierCurveTo(p770 * 48.5, p770 * 181.5, p770 * 48.5, p770 * 181.5, p770 * 43, p770 * 179);
    v1164.bezierCurveTo(p770 * 42, p770 * 164.5, p770 * 42, p770 * 164.5, p770 * 41, p770 * 150);
    v1164.bezierCurveTo(p770 * 46, p770 * 152.5, p770 * 46, p770 * 152.5, p770 * 51, p770 * 155);
    v1164.closePath();
    f88(v1164, p772[5]);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 52, p770 * 39);
    v1164.bezierCurveTo(p770 * 65.5, p770 * 82, p770 * 65.5, p770 * 82, p770 * 79, p770 * 125);
    v1164.bezierCurveTo(p770 * 66, p770 * 137.5, p770 * 66, p770 * 137.5, p770 * 53, p770 * 150);
    v1164.bezierCurveTo(p770 * 39, p770 * 138, p770 * 39, p770 * 138, p770 * 25, p770 * 126);
    v1164.closePath();
    f88(v1164, p772[6], p772[7], p770 * 8);
    v1164.beginPath();
    v1164.lineCap = "round";
    v1164.lineJoin = "round";
    v1164.moveTo(p770 * 52, p770 * 64);
    v1164.bezierCurveTo(p770 * 60, p770 * 92.5, p770 * 60, p770 * 92.5, p770 * 68, p770 * 121);
    v1164.bezierCurveTo(p770 * 61, p770 * 127.5, p770 * 61, p770 * 127.5, p770 * 54, p770 * 134);
    v1164.bezierCurveTo(p770 * 46.5, p770 * 127.5, p770 * 46.5, p770 * 127.5, p770 * 39, p770 * 121);
    v1164.closePath();
    f88(v1164, p772[8]);
    return v1163;
  }
  function f177(p773, p774, p775) {
    var v1165 = document.createElement("canvas");
    var v1166 = v1165.getContext("2d");
    v1165.width = p773 * 130;
    v1165.height = p773 * 148;
    v1166.globalAlpha = p774 ? 0.5 : 1;
    v1166.save();
    v1166.translate(p773 * 65, p773 * 85);
    v1166.rotate(1.4);
    f89(v1166, 7, p773 * 60, p773 * 10);
    v1166.restore();
    f88(v1166, p775[0]);
    v1166.globalAlpha = 1;
    v1166.save();
    v1166.translate(p773 * 65, p773 * 74);
    v1166.rotate(1.4);
    f89(v1166, 7, p773 * 60, p773 * 10);
    f88(v1166, p775[1], p775[2], 4);
    v1166.rotate(0.64);
    f89(v1166, 7, p773 * 40, p773 * 10);
    f88(v1166, p775[3], p775[4], 4);
    v1166.rotate(0.12);
    f89(v1166, 7, p773 * 23, p773 * 5);
    v1166.restore();
    f88(v1166, p775[5]);
    return v1165;
  }
  function f178(p776, p777, p778) {
    var v1167 = document.createElement("canvas");
    var v1168 = v1167.getContext("2d");
    v1167.width = p776 * 170;
    v1167.height = p776 * 170;
    v1168.globalAlpha = p777 ? 0.5 : 1;
    v1168.translate(0, p776 * 5);
    v1168.save();
    v1168.translate(p776 * 85, p776 * 88);
    v1168.rotate(1.4);
    f89(v1168, 7, p776 * 60, p776 * 10);
    v1168.restore();
    f88(v1168, p778[0]);
    v1168.globalAlpha = 1;
    v1168.translate(p776 * 85, p776 * 80);
    for (var v1169 = 0; v1169 < 10; v1169++) {
      v1168.rotate(Math.PI / 5);
      v1168.save();
      v1168.translate(p776 * 65, 0);
      f89(v1168, 3, p776 * 21, p776 * 4);
      f88(v1168, p778[1], p778[2], p776 * 4);
      v1168.restore();
    }
    v1168.save();
    v1168.translate(p776 * 0, p776 * 0);
    v1168.rotate(1.4);
    f89(v1168, 7, p776 * 60, p776 * 10);
    f88(v1168, p778[3], p778[4], p776 * 4);
    v1168.rotate(0.64);
    f89(v1168, 7, p776 * 40, p776 * 10);
    f88(v1168, p778[5], p778[6], p776 * 4);
    v1168.rotate(0.12);
    f89(v1168, 7, p776 * 23, p776 * 5);
    v1168.restore();
    f88(v1168, p778[7]);
    return v1167;
  }
  function f179(p779, p780, p781) {
    var v1170 = document.createElement("canvas");
    var v1171 = v1170.getContext("2d");
    v1170.width = p779 * 108;
    v1170.height = p779 * 669;
    v1171.translate(p779 * 20, p779 * 20);
    v1171.globalAlpha = p780 ? 0.5 : 1;
    v1171.save();
    v1171.translate(p779 * 54, p779 * 389.5);
    f86(v1171, p779 * -15, p779 * -228.5, p779 * 30, p779 * 457, p779 * 10);
    v1171.restore();
    f88(v1171, p781[0]);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 35, p779 * 579);
    v1171.bezierCurveTo(p779 * 47, p779 * 587, p779 * 61, p779 * 584, p779 * 71, p779 * 579);
    v1171.bezierCurveTo(p779 * 75, p779 * 597.5, p779 * 75, p779 * 597.5, p779 * 79, p779 * 616);
    v1171.bezierCurveTo(p779 * 66.5, p779 * 628, p779 * 66.5, p779 * 628, p779 * 54, p779 * 640);
    v1171.bezierCurveTo(p779 * 41, p779 * 628.5, p779 * 41, p779 * 628.5, p779 * 28, p779 * 617);
    v1171.closePath();
    f88(v1171, p781[0]);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 30, p779 * 141);
    v1171.bezierCurveTo(p779 * 40, p779 * 136, p779 * 40, p779 * 136, p779 * 50, p779 * 131);
    v1171.bezierCurveTo(p779 * 63, p779 * 136, p779 * 63, p779 * 136, p779 * 76, p779 * 141);
    v1171.bezierCurveTo(p779 * 72.5, p779 * 161.5, p779 * 72.5, p779 * 161.5, p779 * 69, p779 * 182);
    v1171.bezierCurveTo(p779 * 61.5, p779 * 186.5, p779 * 61.5, p779 * 186.5, p779 * 54, p779 * 191);
    v1171.bezierCurveTo(p779 * 45, p779 * 186.5, p779 * 45, p779 * 186.5, p779 * 36, p779 * 182);
    v1171.closePath();
    f88(v1171, p781[0]);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 42, p779 * 152);
    v1171.bezierCurveTo(p779 * 53, p779 * 152, p779 * 53, p779 * 152, p779 * 64, p779 * 152);
    v1171.bezierCurveTo(p779 * 62, p779 * 171, p779 * 62, p779 * 176, p779 * 55, p779 * 177);
    v1171.bezierCurveTo(p779 * 42, p779 * 176, p779 * 45, p779 * 174, p779 * 42, p779 * 152);
    v1171.closePath();
    f88(v1171, p781[0]);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 52, p779 * 28);
    v1171.bezierCurveTo(p779 * 67.5, p779 * 55, p779 * 67.5, p779 * 55, p779 * 83, p779 * 82);
    v1171.bezierCurveTo(p779 * 80, p779 * 106.5, p779 * 80, p779 * 106.5, p779 * 77, p779 * 131);
    v1171.bezierCurveTo(p779 * 58, p779 * 147, p779 * 44, p779 * 141, p779 * 29, p779 * 131);
    v1171.bezierCurveTo(p779 * 26.5, p779 * 106.5, p779 * 26.5, p779 * 106.5, p779 * 24, p779 * 82);
    v1171.closePath();
    f88(v1171, p781[0]);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 53, p779 * 53);
    v1171.bezierCurveTo(p779 * 61, p779 * 70, p779 * 61, p779 * 70, p779 * 69, p779 * 87);
    v1171.bezierCurveTo(p779 * 67, p779 * 106, p779 * 67, p779 * 106, p779 * 65, p779 * 125);
    v1171.bezierCurveTo(p779 * 54, p779 * 130, p779 * 51, p779 * 130, p779 * 41, p779 * 125);
    v1171.bezierCurveTo(p779 * 39, p779 * 105, p779 * 39, p779 * 105, p779 * 37, p779 * 85);
    v1171.closePath();
    f88(v1171, p781[0]);
    v1171.translate(p779 * -20, p779 * -20);
    v1171.globalAlpha = 1;
    v1171.save();
    v1171.translate(p779 * 54, p779 * 389.5);
    v1171.rotate(0);
    f86(v1171, p779 * -15, p779 * -228.5, p779 * 30, p779 * 457, p779 * 10);
    v1171.restore();
    f88(v1171, p781[1], p781[2], p779 * 8);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 35, p779 * 579);
    v1171.bezierCurveTo(p779 * 47, p779 * 587, p779 * 61, p779 * 584, p779 * 71, p779 * 579);
    v1171.bezierCurveTo(p779 * 75, p779 * 597.5, p779 * 75, p779 * 597.5, p779 * 79, p779 * 616);
    v1171.bezierCurveTo(p779 * 66.5, p779 * 628, p779 * 66.5, p779 * 628, p779 * 54, p779 * 640);
    v1171.bezierCurveTo(p779 * 41, p779 * 628.5, p779 * 41, p779 * 628.5, p779 * 28, p779 * 617);
    v1171.closePath();
    f88(v1171, p781[3], p781[4], p779 * 8);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 30, p779 * 141);
    v1171.bezierCurveTo(p779 * 40, p779 * 136, p779 * 40, p779 * 136, p779 * 50, p779 * 131);
    v1171.bezierCurveTo(p779 * 63, p779 * 136, p779 * 63, p779 * 136, p779 * 76, p779 * 141);
    v1171.bezierCurveTo(p779 * 72.5, p779 * 161.5, p779 * 72.5, p779 * 161.5, p779 * 69, p779 * 182);
    v1171.bezierCurveTo(p779 * 61.5, p779 * 186.5, p779 * 61.5, p779 * 186.5, p779 * 54, p779 * 191);
    v1171.bezierCurveTo(p779 * 45, p779 * 186.5, p779 * 45, p779 * 186.5, p779 * 36, p779 * 182);
    v1171.closePath();
    f88(v1171, p781[3], p781[4], p779 * 8);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 42, p779 * 152);
    v1171.bezierCurveTo(p779 * 53, p779 * 152, p779 * 53, p779 * 152, p779 * 64, p779 * 152);
    v1171.bezierCurveTo(p779 * 62, p779 * 171, p779 * 62, p779 * 176, p779 * 55, p779 * 177);
    v1171.bezierCurveTo(p779 * 42, p779 * 176, p779 * 45, p779 * 174, p779 * 42, p779 * 152);
    v1171.closePath();
    f88(v1171, p781[5]);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 52, p779 * 28);
    v1171.bezierCurveTo(p779 * 67.5, p779 * 55, p779 * 67.5, p779 * 55, p779 * 83, p779 * 82);
    v1171.bezierCurveTo(p779 * 80, p779 * 106.5, p779 * 80, p779 * 106.5, p779 * 77, p779 * 131);
    v1171.bezierCurveTo(p779 * 58, p779 * 147, p779 * 44, p779 * 141, p779 * 29, p779 * 131);
    v1171.bezierCurveTo(p779 * 26.5, p779 * 106.5, p779 * 26.5, p779 * 106.5, p779 * 24, p779 * 82);
    v1171.closePath();
    f88(v1171, p781[6], p781[7], p779 * 8);
    v1171.beginPath();
    v1171.lineCap = "round";
    v1171.lineJoin = "round";
    v1171.moveTo(p779 * 53, p779 * 53);
    v1171.bezierCurveTo(p779 * 61, p779 * 70, p779 * 61, p779 * 70, p779 * 69, p779 * 87);
    v1171.bezierCurveTo(p779 * 67, p779 * 106, p779 * 67, p779 * 106, p779 * 65, p779 * 125);
    v1171.bezierCurveTo(p779 * 54, p779 * 130, p779 * 51, p779 * 130, p779 * 41, p779 * 125);
    v1171.bezierCurveTo(p779 * 39, p779 * 105, p779 * 39, p779 * 105, p779 * 37, p779 * 85);
    v1171.closePath();
    f88(v1171, p781[8]);
    return v1170;
  }
  function f180(p782, p783, p784) {
    var v1172 = document.createElement("canvas");
    var v1173 = v1172.getContext("2d");
    v1172.width = p782 * 100;
    v1172.height = p782 * 648;
    v1173.translate(p782 * 20, p782 * 20);
    v1173.globalAlpha = p783 ? 0.5 : 1;
    v1173.save();
    v1173.translate(p782 * 50.5, p782 * 349.5);
    f86(v1173, p782 * -13.5, p782 * -249.5, p782 * 27, p782 * 499, p782 * 10);
    v1173.restore();
    f88(v1173, p784[0]);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 36, p782 * 538);
    v1173.bezierCurveTo(p782 * 49.5, p782 * 538, p782 * 49.5, p782 * 538, p782 * 63, p782 * 538);
    v1173.bezierCurveTo(p782 * 63.5, p782 * 568, p782 * 63.5, p782 * 568, p782 * 64, p782 * 598);
    v1173.bezierCurveTo(p782 * 50, p782 * 598, p782 * 50, p782 * 598, p782 * 36, p782 * 598);
    v1173.bezierCurveTo(p782 * 36, p782 * 568.5, p782 * 36, p782 * 568.5, p782 * 36, p782 * 539);
    v1173.closePath();
    f88(v1173, p784[0]);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 36, p782 * 554);
    v1173.bezierCurveTo(p782 * 45, p782 * 561, p782 * 56, p782 * 558, p782 * 63, p782 * 554);
    v1173.closePath();
    f88(v1173, p784[0]);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 32, p782 * 569);
    v1173.bezierCurveTo(p782 * 44, p782 * 576, p782 * 58, p782 * 574, p782 * 68, p782 * 569);
    v1173.bezierCurveTo(p782 * 68, p782 * 584, p782 * 68, p782 * 584, p782 * 68, p782 * 599);
    v1173.bezierCurveTo(p782 * 68, p782 * 608, p782 * 65, p782 * 618, p782 * 49, p782 * 617);
    v1173.bezierCurveTo(p782 * 34, p782 * 617, p782 * 32, p782 * 610, p782 * 32, p782 * 598);
    v1173.closePath();
    f88(v1173, p784[0]);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 41, p782 * 581);
    v1173.bezierCurveTo(p782 * 48, p782 * 584, p782 * 55, p782 * 583, p782 * 60, p782 * 581);
    v1173.bezierCurveTo(p782 * 60, p782 * 589.5, p782 * 60, p782 * 589.5, p782 * 60, p782 * 598);
    v1173.bezierCurveTo(p782 * 60, p782 * 604, p782 * 59, p782 * 609, p782 * 48, p782 * 608);
    v1173.bezierCurveTo(p782 * 40, p782 * 607, p782 * 40, p782 * 606, p782 * 41, p782 * 581);
    v1173.closePath();
    f88(v1173, p784[0]);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 31, p782 * 106);
    v1173.bezierCurveTo(p782 * 31, p782 * 124.5, p782 * 31, p782 * 124.5, p782 * 31, p782 * 143);
    v1173.bezierCurveTo(p782 * 31, p782 * 163, p782 * 38, p782 * 169, p782 * 48, p782 * 168);
    v1173.bezierCurveTo(p782 * 57, p782 * 168, p782 * 67, p782 * 165, p782 * 67, p782 * 148);
    v1173.bezierCurveTo(p782 * 67, p782 * 123.5, p782 * 67, p782 * 123.5, p782 * 67, p782 * 99);
    v1173.closePath();
    f88(v1173, p784[0]);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 49, p782 * 27);
    v1173.bezierCurveTo(p782 * 64, p782 * 62.5, p782 * 64, p782 * 62.5, p782 * 79, p782 * 98);
    v1173.bezierCurveTo(p782 * 74, p782 * 113, p782 * 63, p782 * 121, p782 * 50, p782 * 122);
    v1173.bezierCurveTo(p782 * 35, p782 * 123, p782 * 22, p782 * 109, p782 * 20, p782 * 98);
    v1173.closePath();
    f88(v1173, p784[0]);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 49, p782 * 43);
    v1173.bezierCurveTo(p782 * 61, p782 * 70, p782 * 61, p782 * 70, p782 * 73, p782 * 97);
    v1173.bezierCurveTo(p782 * 66, p782 * 116, p782 * 43, p782 * 122, p782 * 26, p782 * 99);
    v1173.closePath();
    f88(v1173, p784[0]);
    v1173.translate(p782 * -20, p782 * -20);
    v1173.globalAlpha = 1;
    v1173.save();
    v1173.translate(p782 * 50.5, p782 * 349.5);
    f86(v1173, p782 * -13.5, p782 * -249.5, p782 * 27, p782 * 499, p782 * 10);
    v1173.restore();
    f88(v1173, p784[1], p784[2], p782 * 8);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 36, p782 * 538);
    v1173.bezierCurveTo(p782 * 49.5, p782 * 538, p782 * 49.5, p782 * 538, p782 * 63, p782 * 538);
    v1173.bezierCurveTo(p782 * 63.5, p782 * 568, p782 * 63.5, p782 * 568, p782 * 64, p782 * 598);
    v1173.bezierCurveTo(p782 * 50, p782 * 598, p782 * 50, p782 * 598, p782 * 36, p782 * 598);
    v1173.bezierCurveTo(p782 * 36, p782 * 568.5, p782 * 36, p782 * 568.5, p782 * 36, p782 * 539);
    v1173.closePath();
    f88(v1173, p784[3], p784[4], p782 * 8);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 36, p782 * 554);
    v1173.bezierCurveTo(p782 * 45, p782 * 561, p782 * 56, p782 * 558, p782 * 63, p782 * 554);
    v1173.closePath();
    f88(v1173, undefined, p784[4], p782 * 8);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 32, p782 * 569);
    v1173.bezierCurveTo(p782 * 44, p782 * 576, p782 * 58, p782 * 574, p782 * 68, p782 * 569);
    v1173.bezierCurveTo(p782 * 68, p782 * 584, p782 * 68, p782 * 584, p782 * 68, p782 * 599);
    v1173.bezierCurveTo(p782 * 68, p782 * 608, p782 * 65, p782 * 618, p782 * 49, p782 * 617);
    v1173.bezierCurveTo(p782 * 34, p782 * 617, p782 * 32, p782 * 610, p782 * 32, p782 * 598);
    v1173.closePath();
    f88(v1173, p784[5], p784[6], p782 * 8);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 41, p782 * 581);
    v1173.bezierCurveTo(p782 * 48, p782 * 584, p782 * 55, p782 * 583, p782 * 60, p782 * 581);
    v1173.bezierCurveTo(p782 * 60, p782 * 589.5, p782 * 60, p782 * 589.5, p782 * 60, p782 * 598);
    v1173.bezierCurveTo(p782 * 60, p782 * 604, p782 * 59, p782 * 609, p782 * 48, p782 * 608);
    v1173.bezierCurveTo(p782 * 40, p782 * 607, p782 * 40, p782 * 606, p782 * 41, p782 * 581);
    v1173.closePath();
    f88(v1173, p784[7]);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 31, p782 * 106);
    v1173.bezierCurveTo(p782 * 31, p782 * 124.5, p782 * 31, p782 * 124.5, p782 * 31, p782 * 143);
    v1173.bezierCurveTo(p782 * 31, p782 * 163, p782 * 38, p782 * 169, p782 * 48, p782 * 168);
    v1173.bezierCurveTo(p782 * 57, p782 * 168, p782 * 67, p782 * 165, p782 * 67, p782 * 148);
    v1173.bezierCurveTo(p782 * 67, p782 * 123.5, p782 * 67, p782 * 123.5, p782 * 67, p782 * 99);
    v1173.closePath();
    f88(v1173, p784[5], p784[6], p782 * 8);
    v1173.save();
    v1173.translate(p782 * -46, p782 * -50);
    v1173.scale(2, 2);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 51, p782 * 80);
    v1173.bezierCurveTo(p782 * 51, p782 * 89.5, p782 * 51, p782 * 89.5, p782 * 51, p782 * 99);
    v1173.bezierCurveTo(p782 * 49, p782 * 103, p782 * 46, p782 * 105, p782 * 44, p782 * 99);
    v1173.bezierCurveTo(p782 * 44, p782 * 88.5, p782 * 44, p782 * 88.5, p782 * 44, p782 * 78);
    v1173.closePath();
    f88(v1173, p784[8]);
    v1173.restore();
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 49, p782 * 27);
    v1173.bezierCurveTo(p782 * 64, p782 * 62.5, p782 * 64, p782 * 62.5, p782 * 79, p782 * 98);
    v1173.bezierCurveTo(p782 * 74, p782 * 113, p782 * 63, p782 * 121, p782 * 50, p782 * 122);
    v1173.bezierCurveTo(p782 * 35, p782 * 123, p782 * 22, p782 * 109, p782 * 20, p782 * 98);
    v1173.closePath();
    f88(v1173, p784[8], p784[9], p782 * 8);
    v1173.scale(2, 2);
    v1173.translate(p782 * -23, p782 * -20);
    v1173.beginPath();
    v1173.lineCap = "round";
    v1173.lineJoin = "round";
    v1173.moveTo(p782 * 57, p782 * 69);
    v1173.bezierCurveTo(p782 * 50, p782 * 76, p782 * 43, p782 * 75, p782 * 38, p782 * 69);
    v1173.bezierCurveTo(p782 * 43, p782 * 57, p782 * 43, p782 * 57, p782 * 48, p782 * 45);
    v1173.closePath();
    f88(v1173, p784[10]);
    return v1172;
  }
  function f181(p785, p786, p787) {
    var v1174 = document.createElement("canvas");
    var v1175 = v1174.getContext("2d");
    var v1176 = p785 * 120;
    var v1177 = p785 * 150;
    var v1178 = p785 * 60;
    var v1179 = v1178 / 4;
    var v1180 = p785 * 15;
    v1174.width = v1176;
    v1174.height = v1177;
    v1175.save();
    v1175.translate(v1176 / 2 + p785 * 0, v1177 / 2 + p785 * 0 + v1180);
    v1175.rotate(Math.PI / 3);
    v1175.globalAlpha = 0.5;
    f89(v1175, 8, v1178, v1179);
    f88(v1175, p787[0]);
    v1175.restore();
    v1175.save();
    v1175.translate(v1176 / 2 - p785 * 11, v1177 / 2 + p785 * 12);
    v1175.globalAlpha = 1;
    v1175.rotate(Math.PI / 3);
    v1175.translate(0, -v1180);
    f89(v1175, 8, v1178, v1179);
    f88(v1175, p787[1]);
    v1175.restore();
    v1175.save();
    v1175.translate(v1176 / 2 - p785 * 9, v1177 / 2 - p785 * 12);
    v1175.rotate(Math.PI / 2.8);
    f89(v1175, 5, v1178 * 0.5, v1179 * 0.4);
    f88(v1175, p787[2]);
    v1175.restore();
    v1175.save();
    v1175.translate(v1176 / 2 + p785 * 19, v1177 / 2 + p785 * 5);
    v1175.rotate(Math.PI / 1);
    f89(v1175, 5, v1178 * 0.5, v1179 * 0.4);
    f88(v1175, p787[2]);
    v1175.restore();
    v1175.save();
    v1175.translate(v1176 / 2 - p785 * 8, v1177 / 2 + p785 * 20);
    v1175.rotate(Math.PI / 2.25);
    f89(v1175, 5, v1178 * 0.5, v1179 * 0.4);
    f88(v1175, p787[2]);
    v1175.restore();
    return v1174;
  }
  function f182(p788, p789, p790) {
    var v1181 = document.createElement("canvas");
    var v1182 = v1181.getContext("2d");
    v1181.width = p788 * 400;
    v1181.height = p788 * 400;
    v1182.globalAlpha = p789 ? 0.5 : 1;
    v1182.translate(p788 * 10, p788 * 5);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 100.5, p788 * 126.34375);
    v1182.bezierCurveTo(p788 * 151.5, p788 * 104.34375, p788 * 279.5, p788 * 188.34375, p788 * 297.5, p788 * 292.34375);
    v1182.bezierCurveTo(p788 * 222.5, p788 * 307.34375, p788 * 106.5, p788 * 196.34375, p788 * 100.5, p788 * 127.34375);
    v1182.closePath();
    f88(v1182, p790[0], p790[0], p788 * 12);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 106.5, p788 * 131.34375);
    v1182.bezierCurveTo(p788 * 140.5, p788 * 142.34375, p788 * 225.5, p788 * 184.34375, p788 * 290.5, p788 * 287.34375);
    v1182.bezierCurveTo(p788 * 270.5, p788 * 188.34375, p788 * 152.5, p788 * 118.34375, p788 * 107.5, p788 * 131.34375);
    v1182.closePath();
    f88(v1182, p790[0]);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 157.5, p788 * 137.34375);
    v1182.bezierCurveTo(p788 * 161.5, p788 * 138.34375, p788 * 164.5, p788 * 140.34375, p788 * 168.5, p788 * 142.34375);
    v1182.bezierCurveTo(p788 * 165.5, p788 * 156.34375, p788 * 141.5, p788 * 176.34375, p788 * 126.5, p788 * 179.34375);
    v1182.bezierCurveTo(p788 * 123.5, p788 * 173.34375, p788 * 120.5, p788 * 169.34375, p788 * 120.5, p788 * 169.34375);
    v1182.bezierCurveTo(p788 * 141.5, p788 * 161.34375, p788 * 156.5, p788 * 145.34375, p788 * 155.5, p788 * 136.34375);
    v1182.closePath();
    f88(v1182, p790[0]);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 196.5, p788 * 151.34375);
    v1182.bezierCurveTo(p788 * 211.5, p788 * 158.34375, p788 * 224.5, p788 * 171.34375, p788 * 229.5, p788 * 176.34375);
    v1182.bezierCurveTo(p788 * 246.5, p788 * 163.34375, p788 * 259.5, p788 * 166.34375, p788 * 272.5, p788 * 168.34375);
    v1182.bezierCurveTo(p788 * 254.5, p788 * 146.34375, p788 * 214.5, p788 * 145.34375, p788 * 198.5, p788 * 151.34375);
    v1182.closePath();
    f88(v1182, p790[0], p790[0], p788 * 12);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 154.5, p788 * 222.34375);
    v1182.bezierCurveTo(p788 * 164.5, p788 * 234.34375, p788 * 173.5, p788 * 242.34375, p788 * 178.5, p788 * 245.34375);
    v1182.bezierCurveTo(p788 * 174.5, p788 * 265.34375, p788 * 180.5, p788 * 274.34375, p788 * 186.5, p788 * 283.34375);
    v1182.bezierCurveTo(p788 * 165.5, p788 * 277.34375, p788 * 151.5, p788 * 245.34375, p788 * 155.5, p788 * 224.34375);
    v1182.closePath();
    f88(v1182, p790[0], p790[0], p788 * 12);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 279.5, p788 * 294.34375);
    v1182.bezierCurveTo(p788 * 286.5, p788 * 285.84375, p788 * 286.5, p788 * 285.84375, p788 * 293.5, p788 * 277.34375);
    v1182.bezierCurveTo(p788 * 315.5, p788 * 280.34375, p788 * 315.5, p788 * 280.34375, p788 * 337.5, p788 * 283.34375);
    v1182.bezierCurveTo(p788 * 340.5, p788 * 311.34375, p788 * 317.5, p788 * 326.34375, p788 * 307.5, p788 * 331.34375);
    v1182.closePath();
    f88(v1182, p790[0], p790[0], p788 * 12);
    v1182.globalAlpha = 1;
    v1182.translate(p788 * -10, p788 * -5);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 100.5, p788 * 126.34375);
    v1182.bezierCurveTo(p788 * 151.5, p788 * 104.34375, p788 * 279.5, p788 * 188.34375, p788 * 297.5, p788 * 292.34375);
    v1182.bezierCurveTo(p788 * 222.5, p788 * 307.34375, p788 * 106.5, p788 * 196.34375, p788 * 100.5, p788 * 127.34375);
    v1182.closePath();
    f88(v1182, p790[1], p790[2], p788 * 12);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 106.5, p788 * 131.34375);
    v1182.bezierCurveTo(p788 * 140.5, p788 * 142.34375, p788 * 225.5, p788 * 184.34375, p788 * 290.5, p788 * 287.34375);
    v1182.bezierCurveTo(p788 * 270.5, p788 * 188.34375, p788 * 152.5, p788 * 118.34375, p788 * 107.5, p788 * 131.34375);
    v1182.closePath();
    f88(v1182, p790[3]);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 157.5, p788 * 137.34375);
    v1182.bezierCurveTo(p788 * 161.5, p788 * 138.34375, p788 * 164.5, p788 * 140.34375, p788 * 168.5, p788 * 142.34375);
    v1182.bezierCurveTo(p788 * 165.5, p788 * 156.34375, p788 * 141.5, p788 * 176.34375, p788 * 126.5, p788 * 179.34375);
    v1182.bezierCurveTo(p788 * 123.5, p788 * 173.34375, p788 * 120.5, p788 * 169.34375, p788 * 120.5, p788 * 169.34375);
    v1182.bezierCurveTo(p788 * 141.5, p788 * 161.34375, p788 * 156.5, p788 * 145.34375, p788 * 155.5, p788 * 136.34375);
    v1182.closePath();
    f88(v1182, p790[4]);
    f92(v1182, p788 * 125.5, p788 * 140.34375, p788 * 11.180339887498949);
    f88(v1182, p790[5]);
    f92(v1182, p788 * 122.5, p788 * 135.34375, p788 * 5.0990195135927845);
    f88(v1182, p790[6]);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 196.5, p788 * 151.34375);
    v1182.bezierCurveTo(p788 * 211.5, p788 * 158.34375, p788 * 224.5, p788 * 171.34375, p788 * 229.5, p788 * 176.34375);
    v1182.bezierCurveTo(p788 * 246.5, p788 * 163.34375, p788 * 259.5, p788 * 166.34375, p788 * 272.5, p788 * 168.34375);
    v1182.bezierCurveTo(p788 * 254.5, p788 * 146.34375, p788 * 214.5, p788 * 145.34375, p788 * 198.5, p788 * 151.34375);
    v1182.closePath();
    f88(v1182, p790[7], p790[8], p788 * 12);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 154.5, p788 * 222.34375);
    v1182.bezierCurveTo(p788 * 164.5, p788 * 234.34375, p788 * 173.5, p788 * 242.34375, p788 * 178.5, p788 * 245.34375);
    v1182.bezierCurveTo(p788 * 174.5, p788 * 265.34375, p788 * 180.5, p788 * 274.34375, p788 * 186.5, p788 * 283.34375);
    v1182.bezierCurveTo(p788 * 165.5, p788 * 277.34375, p788 * 151.5, p788 * 245.34375, p788 * 155.5, p788 * 224.34375);
    v1182.closePath();
    f88(v1182, p790[7], p790[8], p788 * 12);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 279.5, p788 * 294.34375);
    v1182.bezierCurveTo(p788 * 286.5, p788 * 285.84375, p788 * 286.5, p788 * 285.84375, p788 * 293.5, p788 * 277.34375);
    v1182.bezierCurveTo(p788 * 315.5, p788 * 280.34375, p788 * 315.5, p788 * 280.34375, p788 * 337.5, p788 * 283.34375);
    v1182.bezierCurveTo(p788 * 340.5, p788 * 311.34375, p788 * 317.5, p788 * 326.34375, p788 * 307.5, p788 * 331.34375);
    v1182.closePath();
    f88(v1182, p790[7], p790[8], p788 * 12);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 296.5, p788 * 287.34375);
    v1182.bezierCurveTo(p788 * 311.5, p788 * 291.34375, p788 * 311.5, p788 * 291.34375, p788 * 326.5, p788 * 295.34375);
    v1182.closePath();
    f88(v1182, vVVVVUndefined1422, p790[9], p788 * 6);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 294.5, p788 * 289.34375);
    v1182.bezierCurveTo(p788 * 308.5, p788 * 297.34375, p788 * 308.5, p788 * 297.34375, p788 * 322.5, p788 * 305.34375);
    v1182.closePath();
    f88(v1182, vVVVUndefined113, p790[9], p788 * 6);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 294.5, p788 * 291.34375);
    v1182.bezierCurveTo(p788 * 304, p788 * 303.34375, p788 * 304, p788 * 303.34375, p788 * 313.5, p788 * 315.34375);
    v1182.closePath();
    f88(v1182, undefined, p790[9], p788 * 6);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 226.5, p788 * 161.34375);
    v1182.bezierCurveTo(p788 * 230.5, p788 * 160.34375, p788 * 236.5, p788 * 158.34375, p788 * 238.5, p788 * 161.34375);
    v1182.bezierCurveTo(p788 * 238.5, p788 * 157.34375, p788 * 228.5, p788 * 159.34375, p788 * 227.5, p788 * 161.34375);
    v1182.closePath();
    f88(v1182, vVVVVUndefined142, p790[9], p788 * 4);
    v1182.beginPath();
    v1182.lineCap = "round";
    v1182.lineJoin = "round";
    v1182.moveTo(p788 * 167.5, p788 * 248.34375);
    v1182.bezierCurveTo(p788 * 165.5, p788 * 251.34375, p788 * 168.5, p788 * 256.34375, p788 * 168.5, p788 * 253.34375);
    v1182.bezierCurveTo(p788 * 166.5, p788 * 252.34375, p788 * 168.5, p788 * 246.34375, p788 * 166.5, p788 * 247.34375);
    v1182.closePath();
    f88(v1182, vVVVVUndefined583, p790[9], p788 * 3);
    return v1181;
  }
  function f183(p791, p792, p793) {
    var v1183 = document.createElement("canvas");
    var v1184 = v1183.getContext("2d");
    v1183.width = p791 * 90;
    v1183.height = p791 * 98;
    v1184.translate(0, p791 * 4);
    if (v770 === 0) {
      v1184.globalAlpha = p792 ? 0.5 : 1;
      v1184.save();
      v1184.translate(p791 * 44, p791 * 50);
      v1184.rotate(0.2);
      f89(v1184, 9, p791 * 41, p791 * 10);
      v1184.restore();
      f88(v1184, p793[0]);
    }
    v1184.globalAlpha = 1;
    v1184.save();
    v1184.translate(p791 * 44, p791 * 44);
    v1184.rotate(0.2);
    f89(v1184, 9, p791 * 41, p791 * 10);
    f88(v1184, p793[1], p793[2], p791 * 4);
    v1184.rotate(-0.32);
    f89(v1184, 9, p791 * 32, p791 * 10);
    f88(v1184, p793[3], p793[4], p791 * 4);
    v1184.rotate(0.68);
    f89(v1184, 9, p791 * 23, p791 * 8);
    f88(v1184, p793[5], p793[6], p791 * 6);
    v1184.restore();
    v1184.save();
    v1184.translate(p791 * 45, p791 * 45);
    v1184.rotate(0);
    f86(v1184, p791 * -9, p791 * -25.5, p791 * 18, p791 * 51, p791 * 30);
    v1184.restore();
    f88(v1184, p793[4], p793[4], p791 * 2);
    v1184.save();
    v1184.translate(p791 * 45, p791 * 45);
    v1184.rotate(0);
    f86(v1184, p791 * -26, p791 * -9, p791 * 52, p791 * 18, p791 * 30);
    v1184.restore();
    f88(v1184, p793[4], p793[4], p791 * 2);
    f92(v1184, p791 * 45, p791 * 29, p791 * 7);
    f88(v1184, p793[5]);
    f92(v1184, p791 * 45, p791 * 61, p791 * 7);
    f88(v1184, p793[5]);
    f92(v1184, p791 * 28, p791 * 45, p791 * 7);
    f88(v1184, p793[5]);
    f92(v1184, p791 * 62, p791 * 45, p791 * 7);
    f88(v1184, p793[5]);
    return v1183;
  }
  function f184(p794, p795, p796) {
    var v1185 = document.createElement("canvas");
    var v1186 = v1185.getContext("2d");
    var v1187 = p794 * 18;
    var v1188 = p794 * 18;
    v1185.width = v1187;
    v1185.height = v1188;
    var v1189 = p794 * 9;
    var v1190 = p794 * 9;
    var v1191 = p794 * 8;
    v1186.save();
    v1186.translate(v1189, v1190);
    v1186.globalAlpha = 1;
    f92(v1186, 0, 0, v1191);
    f88(v1186, p796[0]);
    v1191 = p794 * 3;
    v1189 = 0;
    v1190 = p794 * -3;
    v1186.translate(v1189, v1190);
    v1186.globalAlpha = 1;
    f92(v1186, 0, 0, v1191);
    f88(v1186, p796[1]);
    v1186.restore();
    return v1185;
  }
  function f185(p797, p798, p799) {
    var v1192 = document.createElement("canvas");
    var v1193 = v1192.getContext("2d");
    v1192.width = p797 * 90;
    v1192.height = p797 * 101;
    v1193.translate(p797 * 0, p797 * 5);
    if (v770 === 0) {
      v1193.globalAlpha = p798 ? 0.5 : 1;
      f92(v1193, p797 * 44, p797 * 55, p797 * 41);
      f88(v1193, p799[0]);
    }
    v1193.globalAlpha = 1;
    f92(v1193, p797 * 44, p797 * 45, p797 * 41);
    f88(v1193, p799[1], p799[2], p797 * 4);
    f92(v1193, p797 * 44, p797 * 45, p797 * 31);
    f88(v1193, p799[3]);
    v1193.save();
    v1193.translate(p797 * 45, p797 * 45);
    f86(v1193, p797 * -9, p797 * -25.5, p797 * 18, p797 * 51, p797 * 30);
    v1193.restore();
    f88(v1193, p799[4], p799[4], p797 * 2);
    v1193.save();
    v1193.translate(p797 * 45, p797 * 45);
    f86(v1193, p797 * -26, p797 * -9, p797 * 52, p797 * 18, p797 * 30);
    v1193.restore();
    f88(v1193, p799[4], p799[4], p797 * 2);
    f92(v1193, p797 * 45, p797 * 29, p797 * 7);
    f88(v1193, p799[5]);
    f92(v1193, p797 * 45, p797 * 61, p797 * 7);
    f88(v1193, p799[5]);
    f92(v1193, p797 * 28, p797 * 45, p797 * 7);
    f88(v1193, p799[5]);
    f92(v1193, p797 * 62, p797 * 45, p797 * 7);
    f88(v1193, p799[5]);
    return v1192;
  }
  function f190(p800, p801) {
    var v1194 = document.createElement("canvas");
    var v1195 = v1194.getContext("2d");
    v1194.width = p800 * 80;
    v1194.height = p800 * 100;
    v1195.scale(0.5, 0.5);
    v1195.translate(10, 15);
    v1195.globalAlpha = 0.5;
    v1195.beginPath();
    v1195.lineCap = "round";
    v1195.lineJoin = "round";
    v1195.moveTo(p800 * 47, p800 * 5);
    v1195.bezierCurveTo(p800 * 19, p800 * 30, p800 * 12, p800 * 42, p800 * 10, p800 * 55);
    v1195.bezierCurveTo(p800 * 11, p800 * 75, p800 * 27, p800 * 76, p800 * 36, p800 * 72);
    v1195.bezierCurveTo(p800 * 52, p800 * 60, p800 * 53, p800 * 46, p800 * 54, p800 * 31);
    v1195.bezierCurveTo(p800 * 53, p800 * 14, p800 * 50, p800 * 9, p800 * 48, p800 * 6);
    v1195.closePath();
    f88(v1195, p801[0]);
    v1195.beginPath();
    v1195.lineCap = "round";
    v1195.lineJoin = "round";
    v1195.moveTo(p800 * 17, p800 * 70);
    v1195.bezierCurveTo(p800 * 18, p800 * 77, p800 * 10, p800 * 83, p800 * 4, p800 * 87);
    f88(v1195, undefined, p801[0], p800 * 10);
    v1195.translate(0, -10);
    v1195.globalAlpha = 1;
    v1195.beginPath();
    v1195.lineCap = "round";
    v1195.lineJoin = "round";
    v1195.moveTo(p800 * 47, p800 * 5);
    v1195.bezierCurveTo(p800 * 19, p800 * 30, p800 * 12, p800 * 42, p800 * 10, p800 * 55);
    v1195.bezierCurveTo(p800 * 11, p800 * 75, p800 * 27, p800 * 76, p800 * 36, p800 * 72);
    v1195.bezierCurveTo(p800 * 52, p800 * 60, p800 * 53, p800 * 46, p800 * 54, p800 * 31);
    v1195.bezierCurveTo(p800 * 53, p800 * 14, p800 * 50, p800 * 9, p800 * 48, p800 * 6);
    v1195.closePath();
    f88(v1195, p801[1], p801[2], p800 * 8);
    v1195.beginPath();
    v1195.lineCap = "round";
    v1195.lineJoin = "round";
    v1195.moveTo(p800 * 17, p800 * 70);
    v1195.bezierCurveTo(p800 * 18, p800 * 77, p800 * 10, p800 * 83, p800 * 4, p800 * 87);
    f88(v1195, undefined, p801[2], p800 * 8);
    v1195.globalAlpha = 0.5;
    v1195.beginPath();
    v1195.lineCap = "round";
    v1195.lineJoin = "round";
    v1195.moveTo(p800 * 17, p800 * 70);
    v1195.bezierCurveTo(p800 * 33, p800 * 52, p800 * 39, p800 * 33, p800 * 48, p800 * 7);
    f88(v1195, undefined, p801[2], p800 * 8);
    return v1194;
  }
  function f187(p802, p803, p804) {
    var v1196 = document.createElement("canvas");
    var v1197 = v1196.getContext("2d");
    v1196.width = p802 * 125;
    v1196.height = p802 * 139;
    v1197.globalAlpha = p803 ? 0.5 : 1;
    v1197.save();
    v1197.translate(p802 * 63, p802 * 79);
    v1197.rotate(1);
    f89(v1197, 8, p802 * 60, p802 * 10);
    f88(v1197, p804[0]);
    v1197.restore();
    v1197.globalAlpha = 1;
    v1197.save();
    v1197.translate(p802 * 63, p802 * 69);
    v1197.rotate(1);
    f89(v1197, 8, p802 * 60, p802 * 10);
    f88(v1197, p804[1], p804[2], 4);
    v1197.rotate(0.56);
    f89(v1197, 8, p802 * 40, p802 * 10);
    f88(v1197, p804[3], p804[4], 4);
    v1197.rotate(0.28);
    f89(v1197, 8, p802 * 28, p802 * 8);
    f88(v1197, p804[5]);
    v1197.restore();
    return v1196;
  }
  function f188(p805, p806, p807) {
    var v1198 = document.createElement("canvas");
    var v1199 = v1198.getContext("2d");
    v1198.width = p805 * 175;
    v1198.height = p805 * 169;
    v1199.beginPath();
    v1199.lineCap = "round";
    v1199.lineJoin = "round";
    v1199.moveTo(p805 * 17, p805 * 112);
    v1199.bezierCurveTo(p805 * 14, p805 * 146, p805 * 27, p805 * 152, p805 * 37, p805 * 149);
    v1199.bezierCurveTo(p805 * 78, p805 * 155, p805 * 128, p805 * 150, p805 * 146, p805 * 150);
    v1199.bezierCurveTo(p805 * 158, p805 * 144, p805 * 158, p805 * 121, p805 * 153, p805 * 114);
    v1199.closePath();
    f88(v1199, p807[8], p807[9], p805 * 5);
    v1199.beginPath();
    v1199.lineCap = "round";
    v1199.lineJoin = "round";
    v1199.moveTo(p805 * 127, p805 * 111);
    v1199.bezierCurveTo(p805 * 133, p805 * 136, p805 * 115, p805 * 149, p805 * 88, p805 * 150);
    v1199.bezierCurveTo(p805 * 119.5, p805 * 151, p805 * 119.5, p805 * 151, p805 * 151, p805 * 152);
    v1199.bezierCurveTo(p805 * 159, p805 * 136, p805 * 155, p805 * 126, p805 * 154, p805 * 113);
    v1199.closePath();
    f88(v1199, p807[9]);
    v1199.globalAlpha = 0.5;
    v1199.translate(0, p805 * 3);
    v1199.beginPath();
    v1199.lineCap = "round";
    v1199.lineJoin = "round";
    v1199.moveTo(p805 * 15, p805 * 117);
    v1199.bezierCurveTo(p805 * 34, p805 * 109, p805 * 61, p805 * 106, p805 * 94, p805 * 109);
    v1199.bezierCurveTo(p805 * 126, p805 * 110, p805 * 142, p805 * 113, p805 * 154, p805 * 119);
    v1199.bezierCurveTo(p805 * 154, p805 * 123, p805 * 154, p805 * 123, p805 * 154, p805 * 127);
    v1199.bezierCurveTo(p805 * 127, p805 * 118, p805 * 15, p805 * 122, p805 * 18, p805 * 129);
    v1199.closePath();
    f88(v1199, p807[0]);
    v1199.globalAlpha = 1;
    v1199.translate(0, p805 * -3);
    v1199.beginPath();
    v1199.lineCap = "round";
    v1199.lineJoin = "round";
    v1199.moveTo(p805 * 14, p805 * 127);
    v1199.bezierCurveTo(p805 * 13, p805 * 117, p805 * 12, p805 * 109, p805 * 15, p805 * 103);
    v1199.bezierCurveTo(p805 * 16, p805 * 95, p805 * 21, p805 * 92, p805 * 60, p805 * 93);
    v1199.bezierCurveTo(p805 * 91, p805 * 93, p805 * 118, p805 * 93, p805 * 143, p805 * 96);
    v1199.bezierCurveTo(p805 * 151, p805 * 96, p805 * 155, p805 * 99, p805 * 156, p805 * 112);
    v1199.bezierCurveTo(p805 * 157, p805 * 124, p805 * 157, p805 * 127, p805 * 156, p805 * 128);
    v1199.bezierCurveTo(p805 * 138, p805 * 112, p805 * 100, p805 * 118, p805 * 84, p805 * 118);
    v1199.bezierCurveTo(p805 * 28, p805 * 118, p805 * 20, p805 * 120, p805 * 16, p805 * 127);
    v1199.closePath();
    f88(v1199, p807[4], p807[5], p805 * 5);
    v1199.save();
    v1199.translate(p805 * 27.5, p805 * 138.5);
    f86(v1199, p805 * -13.5, p805 * -14.5, p805 * 27, p805 * 29, p805 * 4);
    v1199.restore();
    f88(v1199, p807[1], p807[2], p805 * 5);
    v1199.save();
    v1199.translate(p805 * 143.5, p805 * 137);
    f86(v1199, p805 * -13.5, p805 * -14, p805 * 27, p805 * 28, p805 * 4);
    v1199.restore();
    f88(v1199, p807[1], p807[2], p805 * 5);
    return v1198;
  }
  function f189(p808, p809, p810) {
    var v1200 = document.createElement("canvas");
    var v1201 = v1200.getContext("2d");
    v1200.width = p808 * 304;
    v1200.height = p808 * 278;
    v1201.translate(p808 * 10, p808 * 25);
    v1201.globalAlpha = p809 ? 0.5 : 1;
    v1201.beginPath();
    v1201.lineCap = "round";
    v1201.lineJoin = "round";
    v1201.moveTo(p808 * 128, p808 * 137);
    v1201.bezierCurveTo(p808 * 155, p808 * 144, p808 * 223, p808 * 143, p808 * 256, p808 * 122);
    v1201.bezierCurveTo(p808 * 249, p808 * 180, p808 * 210, p808 * 227, p808 * 164, p808 * 242);
    v1201.bezierCurveTo(p808 * 74, p808 * 213, p808 * 99, p808 * 166, p808 * 127, p808 * 138);
    v1201.closePath();
    f88(v1201, p810[0]);
    v1201.beginPath();
    v1201.lineCap = "round";
    v1201.lineJoin = "round";
    v1201.moveTo(p808 * 284, p808 * 52);
    v1201.bezierCurveTo(p808 * 126, p808 * 112, p808 * 89, p808 * 177, p808 * 170, p808 * 241);
    v1201.bezierCurveTo(p808 * 103, p808 * 275, p808 * 20, p808 * 239, p808 * 12, p808 * 159);
    v1201.bezierCurveTo(p808 * 5, p808 * 76, p808 * 75, p808 * 4, p808 * 165, p808 * 13);
    v1201.bezierCurveTo(p808 * 233, p808 * 15, p808 * 260, p808 * 33, p808 * 284, p808 * 52);
    v1201.closePath();
    f88(v1201, p810[0]);
    v1201.translate(p808 * -10, p808 * -25);
    v1201.globalAlpha = 1;
    v1201.beginPath();
    v1201.lineCap = "round";
    v1201.lineJoin = "round";
    v1201.moveTo(p808 * 128, p808 * 137);
    v1201.bezierCurveTo(p808 * 155, p808 * 144, p808 * 223, p808 * 143, p808 * 256, p808 * 122);
    v1201.bezierCurveTo(p808 * 249, p808 * 180, p808 * 210, p808 * 227, p808 * 164, p808 * 242);
    v1201.bezierCurveTo(p808 * 74, p808 * 213, p808 * 99, p808 * 166, p808 * 127, p808 * 138);
    v1201.closePath();
    f88(v1201, p810[1], p810[2], p808 * 15);
    v1201.beginPath();
    v1201.lineCap = "round";
    v1201.lineJoin = "round";
    v1201.moveTo(p808 * 284, p808 * 52);
    v1201.bezierCurveTo(p808 * 126, p808 * 112, p808 * 89, p808 * 177, p808 * 170, p808 * 241);
    v1201.bezierCurveTo(p808 * 103, p808 * 275, p808 * 20, p808 * 239, p808 * 12, p808 * 159);
    v1201.bezierCurveTo(p808 * 5, p808 * 76, p808 * 75, p808 * 4, p808 * 165, p808 * 13);
    v1201.bezierCurveTo(p808 * 233, p808 * 15, p808 * 260, p808 * 33, p808 * 284, p808 * 52);
    v1201.closePath();
    f88(v1201, p810[3], p810[4], p808 * 15);
    return v1200;
  }
  function f190(p811, p812) {
    var v1202 = document.createElement("canvas");
    var v1203 = v1202.getContext("2d");
    v1202.width = p811 * 234;
    v1202.height = p811 * 183;
    v1203.beginPath();
    v1203.lineCap = "round";
    v1203.lineJoin = "round";
    v1203.moveTo(p811 * 76, p811 * 25);
    v1203.bezierCurveTo(p811 * 150, p811 * 3, p811 * 181, p811 * 22, p811 * 203, p811 * 41);
    v1203.bezierCurveTo(p811 * 225, p811 * 63, p811 * 225, p811 * 105, p811 * 198, p811 * 133);
    v1203.bezierCurveTo(p811 * 179, p811 * 157, p811 * 134, p811 * 178, p811 * 81, p811 * 164);
    v1203.bezierCurveTo(p811 * 19, p811 * 148, p811 * 6, p811 * 95, p811 * 21, p811 * 66);
    v1203.bezierCurveTo(p811 * 34, p811 * 39, p811 * 52, p811 * 33, p811 * 75, p811 * 25);
    v1203.closePath();
    f88(v1203, p812[0], p812[0], p811 * 4);
    return v1202;
  }
  function f191(p813, p814, p815) {
    var v1204 = document.createElement("canvas");
    var v1205 = v1204.getContext("2d");
    v1204.width = p813 * 165;
    v1204.height = p813 * 123;
    v1205.save();
    v1205.translate(p813 * 81, p813 * 65);
    f86(v1205, p813 * -78, p813 * -54.5, p813 * 156, p813 * 109, p813 * 20);
    v1205.restore();
    f88(v1205, p815[0]);
    v1205.save();
    v1205.translate(p813 * 81, p813 * 58);
    f86(v1205, p813 * -78, p813 * -54.5, p813 * 156, p813 * 109, p813 * 20);
    v1205.restore();
    f88(v1205, p815[1], p815[2], 4);
    v1205.save();
    v1205.translate(p813 * 81, p813 * 58);
    f86(v1205, p813 * -69, p813 * -47, p813 * 138, p813 * 93, p813 * 15);
    v1205.restore();
    f88(v1205, p815[3], p815[4], 4);
    v1205.save();
    v1205.translate(p813 * 79, p813 * 54);
    f86(v1205, p813 * -34, p813 * -40, p813 * 68, p813 * 88, p813 * 13);
    v1205.restore();
    f88(v1205, vVVVVVUndefined14, p815[5], 4);
    v1205.beginPath();
    v1205.lineCap = "round";
    v1205.lineJoin = "round";
    v1205.moveTo(p813 * 44, p813 * 13);
    v1205.bezierCurveTo(p813 * 43.5, p813 * 55, p813 * 43.5, p813 * 55, p813 * 43, p813 * 101);
    v1205.closePath();
    f88(v1205, vVVVVVUndefined1422, p815[6], 4);
    v1205.beginPath();
    v1205.lineCap = "round";
    v1205.lineJoin = "round";
    v1205.moveTo(p813 * 115, p813 * 13);
    v1205.bezierCurveTo(p813 * 115, p813 * 56, p813 * 115, p813 * 56, p813 * 115, p813 * 101);
    v1205.closePath();
    f88(v1205, vVVVUndefined58, p815[6], 4);
    v1205.beginPath();
    v1205.lineCap = "round";
    v1205.lineJoin = "round";
    v1205.moveTo(p813 * 35, p813 * 6);
    v1205.bezierCurveTo(p813 * 35, p813 * 56, p813 * 36, p813 * 109, p813 * 35, p813 * 110);
    v1205.closePath();
    f88(v1205, undefined, p815[7], 4);
    v1205.beginPath();
    v1205.lineCap = "round";
    v1205.lineJoin = "round";
    v1205.moveTo(p813 * 123, p813 * 6);
    v1205.bezierCurveTo(p813 * 123, p813 * 56, p813 * 123, p813 * 56, p813 * 123, p813 * 110);
    v1205.closePath();
    f88(v1205, vVVVVVVUndefined14, p815[7], 4);
    v1205.save();
    v1205.translate(p813 * 79, p813 * 113);
    f86(v1205, p813 * -18, p813 * -2, p813 * 36, p813 * 4, p813 * 20);
    v1205.restore();
    f88(v1205, undefined, p815[8], 4);
    v1205.save();
    v1205.translate(p813 * 75, p813 * 118);
    f86(v1205, p813 * -6, p813 * -2.5, p813 * 20, p813 * 5, p813 * 20);
    v1205.restore();
    f88(v1205, p815[8]);
    return v1204;
  }
  function f192(p816, p817, p818) {
    var v1206 = document.createElement("canvas");
    var v1207 = v1206.getContext("2d");
    v1206.width = p816 * 170;
    v1206.height = p816 * 170;
    v1207.translate(0, p816 * 3);
    v1207.globalAlpha = p817 ? 0.5 : 1;
    v1207.save();
    v1207.translate(p816 * 85, p816 * 95);
    v1207.rotate(1.4);
    f89(v1207, 7, p816 * 60, p816 * 10);
    v1207.restore();
    f88(v1207, p818[0]);
    v1207.globalAlpha = 1;
    v1207.translate(p816 * 85, p816 * 82);
    for (var v1208 = 0; v1208 < 10; v1208++) {
      v1207.rotate(Math.PI / 5);
      v1207.save();
      v1207.translate(p816 * 65, 0);
      f89(v1207, 3, p816 * 21, p816 * 4);
      f88(v1207, p818[1], p818[2], p816 * 4);
      v1207.restore();
    }
    v1207.save();
    v1207.translate(p816 * 0, p816 * 0);
    v1207.rotate(0.2);
    f89(v1207, 9, p816 * 60, p816 * 10);
    f88(v1207, p818[3], p818[4], p816 * 4);
    v1207.rotate(-0.32);
    f89(v1207, 9, p816 * 38, p816 * 10);
    f88(v1207, p818[5], p818[6], p816 * 4);
    v1207.rotate(0.68);
    f89(v1207, 9, p816 * 20, p816 * 8);
    f88(v1207, p818[7], p818[8], p816 * 6);
    v1207.restore();
    return v1206;
  }
  function f193(p819, p820, p821) {
    var v1209 = document.createElement("canvas");
    var v1210 = v1209.getContext("2d");
    v1209.width = p819 * 373;
    v1209.height = p819 * 314;
    v1210.globalAlpha = p820 ? 0.5 : 1;
    v1210.translate(p819 * 5, p819 * 5);
    v1210.save();
    v1210.translate(p819 * 184.048583984375, p819 * 69.1805419921875);
    f86(v1210, p819 * -40, p819 * -28.5, p819 * 80, p819 * 57, p819 * 10);
    v1210.restore();
    f88(v1210, p821[1], p821[2], p819 * 4);
    v1210.beginPath();
    v1210.lineCap = "round";
    v1210.lineJoin = "round";
    v1210.moveTo(p819 * 185.048583984375, p819 * 61.6805419921875);
    v1210.bezierCurveTo(p819 * 145.048583984375, p819 * 59.6805419921875, p819 * 138.048583984375, p819 * 41.6805419921875, p819 * 148.048583984375, p819 * 33.6805419921875);
    v1210.bezierCurveTo(p819 * 169.048583984375, p819 * 17.6805419921875, p819 * 194.048583984375, p819 * 20.6805419921875, p819 * 210.048583984375, p819 * 27.6805419921875);
    v1210.bezierCurveTo(p819 * 234.048583984375, p819 * 40.6805419921875, p819 * 225.048583984375, p819 * 57.6805419921875, p819 * 186.048583984375, p819 * 61.6805419921875);
    v1210.closePath();
    f88(v1210, p821[0], p821[0], p819 * 6);
    v1210.beginPath();
    v1210.lineCap = "round";
    v1210.lineJoin = "round";
    v1210.moveTo(p819 * 224.048583984375, p819 * 56.6805419921875);
    v1210.bezierCurveTo(p819 * 326.048583984375, p819 * 69.6805419921875, p819 * 363.048583984375, p819 * 148.6805419921875, p819 * 349.048583984375, p819 * 206.6805419921875);
    v1210.bezierCurveTo(p819 * 329.048583984375, p819 * 278.6805419921875, p819 * 252.048583984375, p819 * 283.6805419921875, p819 * 206.048583984375, p819 * 275.6805419921875);
    v1210.bezierCurveTo(p819 * 206.548583984375, p819 * 266.6805419921875, p819 * 206.548583984375, p819 * 266.6805419921875, p819 * 207.048583984375, p819 * 257.6805419921875);
    v1210.bezierCurveTo(p819 * 276.048583984375, p819 * 268.6805419921875, p819 * 308.048583984375, p819 * 239.6805419921875, p819 * 323.048583984375, p819 * 208.6805419921875);
    v1210.bezierCurveTo(p819 * 352.048583984375, p819 * 145.6805419921875, p819 * 292.048583984375, p819 * 86.6805419921875, p819 * 223.048583984375, p819 * 74.6805419921875);
    v1210.closePath();
    f88(v1210, p821[0], p821[0], p819 * 6);
    v1210.save();
    v1210.translate(p819 * 183.548583984375, p819 * 119.6805419921875);
    f86(v1210, p819 * -121.5, p819 * -45, p819 * 243, p819 * 90, p819 * 40);
    v1210.restore();
    f88(v1210, p821[0], p821[0], p819 * 6);
    v1210.save();
    v1210.translate(p819 * 183.048583984375, p819 * 155.6805419921875);
    f86(v1210, p819 * -121, p819 * -52, p819 * 242, p819 * 104, p819 * 40);
    v1210.restore();
    f88(v1210, p821[0], p821[0], p819 * 6);
    v1210.save();
    v1210.translate(p819 * 183.048583984375, p819 * 205.1805419921875);
    f86(v1210, p819 * -121, p819 * -50.5, p819 * 242, p819 * 101, p819 * 40);
    v1210.restore();
    f88(v1210, p821[0], p821[0], p819 * 6);
    v1210.save();
    v1210.translate(p819 * 185.048583984375, p819 * 204.1805419921875);
    f86(v1210, p819 * -100, p819 * -34.5, p819 * 200, p819 * 69, p819 * 40);
    v1210.restore();
    f88(v1210, p821[0], p821[0], p819 * 6);
    f92(v1210, p819 * 185.048583984375, p819 * 257.6805419921875, p819 * 27.018512172212592);
    f88(v1210, p821[0], p821[0], p819 * 6);
    v1210.globalAlpha = 1;
    v1210.translate(p819 * -5, p819 * -5);
    v1210.beginPath();
    v1210.lineCap = "round";
    v1210.lineJoin = "round";
    v1210.moveTo(p819 * 224.048583984375, p819 * 56.6805419921875);
    v1210.bezierCurveTo(p819 * 326.048583984375, p819 * 69.6805419921875, p819 * 363.048583984375, p819 * 148.6805419921875, p819 * 349.048583984375, p819 * 206.6805419921875);
    v1210.bezierCurveTo(p819 * 329.048583984375, p819 * 278.6805419921875, p819 * 252.048583984375, p819 * 283.6805419921875, p819 * 206.048583984375, p819 * 275.6805419921875);
    v1210.bezierCurveTo(p819 * 206.548583984375, p819 * 266.6805419921875, p819 * 206.548583984375, p819 * 266.6805419921875, p819 * 207.048583984375, p819 * 257.6805419921875);
    v1210.bezierCurveTo(p819 * 276.048583984375, p819 * 268.6805419921875, p819 * 308.048583984375, p819 * 239.6805419921875, p819 * 323.048583984375, p819 * 208.6805419921875);
    v1210.bezierCurveTo(p819 * 352.048583984375, p819 * 145.6805419921875, p819 * 292.048583984375, p819 * 86.6805419921875, p819 * 223.048583984375, p819 * 74.6805419921875);
    v1210.closePath();
    f88(v1210, p821[3], p821[4], p819 * 6);
    v1210.save();
    v1210.translate(p819 * 184.048583984375, p819 * 69.1805419921875);
    f86(v1210, p819 * -40, p819 * -28.5, p819 * 80, p819 * 57, p819 * 10);
    v1210.restore();
    f88(v1210, p821[1], p821[2], p819 * 4);
    v1210.beginPath();
    v1210.lineCap = "round";
    v1210.lineJoin = "round";
    v1210.moveTo(p819 * 185.048583984375, p819 * 61.6805419921875);
    v1210.bezierCurveTo(p819 * 145.048583984375, p819 * 59.6805419921875, p819 * 138.048583984375, p819 * 41.6805419921875, p819 * 148.048583984375, p819 * 33.6805419921875);
    v1210.bezierCurveTo(p819 * 169.048583984375, p819 * 17.6805419921875, p819 * 194.048583984375, p819 * 20.6805419921875, p819 * 210.048583984375, p819 * 27.6805419921875);
    v1210.bezierCurveTo(p819 * 234.048583984375, p819 * 40.6805419921875, p819 * 225.048583984375, p819 * 57.6805419921875, p819 * 186.048583984375, p819 * 61.6805419921875);
    v1210.closePath();
    f88(v1210, p821[1], p821[2], p819 * 6);
    v1210.save();
    v1210.translate(p819 * 183.548583984375, p819 * 119.6805419921875);
    f86(v1210, p819 * -121.5, p819 * -45, p819 * 243, p819 * 90, p819 * 40);
    v1210.restore();
    f88(v1210, p821[5], p821[4], p819 * 6);
    v1210.save();
    v1210.translate(p819 * 183.048583984375, p819 * 155.6805419921875);
    f86(v1210, p819 * -121, p819 * -52, p819 * 242, p819 * 104, p819 * 40);
    v1210.restore();
    f88(v1210, p821[3], p821[4], p819 * 6);
    v1210.save();
    v1210.translate(p819 * 183.048583984375, p819 * 205.1805419921875);
    f86(v1210, p819 * -121, p819 * -50.5, p819 * 242, p819 * 101, p819 * 40);
    v1210.restore();
    f88(v1210, p821[6], p821[4], p819 * 6);
    v1210.globalCompositeOperation = "destination-out";
    v1210.save();
    v1210.translate(p819 * 185.048583984375, p819 * 204.1805419921875);
    f86(v1210, p819 * -100, p819 * -34.5, p819 * 200, p819 * 69, p819 * 40);
    v1210.restore();
    f88(v1210, p821[7], p821[8], p819 * 6);
    v1210.globalCompositeOperation = "source-over";
    v1210.globalAlpha = 0.5;
    v1210.save();
    v1210.translate(p819 * 185.048583984375, p819 * 204.1805419921875);
    f86(v1210, p819 * -100, p819 * -34.5, p819 * 200, p819 * 69, p819 * 40);
    v1210.restore();
    f88(v1210, p821[7], p821[8], p819 * 6);
    v1210.globalAlpha = 1;
    v1210.save();
    f92(v1210, p819 * 185.048583984375, p819 * 257.6805419921875, p819 * 27.018512172212592);
    f88(v1210, p821[3], p821[4], p819 * 6);
    v1210.restore();
    return v1209;
  }
  function f194(p822, p823, p824) {
    var v1211 = document.createElement("canvas");
    var v1212 = v1211.getContext("2d");
    v1211.width = p822 * 138;
    v1211.height = p822 * 133;
    v1212.globalAlpha = p823 ? 0.3 : 1;
    v1212.translate(0, p822 * 5);
    v1212.beginPath();
    v1212.lineCap = "round";
    v1212.lineJoin = "round";
    v1212.moveTo(p822 * 26, p822 * 79.640625);
    v1212.bezierCurveTo(p822 * 13, p822 * 84.640625, p822 * 9, p822 * 86.640625, p822 * 7, p822 * 78.640625);
    v1212.bezierCurveTo(p822 * 6, p822 * 69.640625, p822 * 15, p822 * 67.640625, p822 * 31, p822 * 62.640625);
    v1212.bezierCurveTo(p822 * 63, p822 * 55.640625, p822 * 85, p822 * 57.640625, p822 * 104, p822 * 63.640625);
    v1212.bezierCurveTo(p822 * 131, p822 * 69.640625, p822 * 132, p822 * 71.640625, p822 * 131, p822 * 78.640625);
    v1212.bezierCurveTo(p822 * 131, p822 * 91.640625, p822 * 112, p822 * 80.640625, p822 * 91, p822 * 75.640625);
    v1212.bezierCurveTo(p822 * 51, p822 * 70.640625, p822 * 45, p822 * 74.640625, p822 * 28, p822 * 78.640625);
    v1212.closePath();
    f88(v1212, p824[0]);
    v1212.beginPath();
    v1212.lineCap = "round";
    v1212.lineJoin = "round";
    v1212.moveTo(p822 * 8, p822 * 82.640625);
    v1212.bezierCurveTo(p822 * 40, p822 * 107.640625, p822 * 53, p822 * 104.640625, p822 * 67, p822 * 106.640625);
    v1212.bezierCurveTo(p822 * 101, p822 * 103.640625, p822 * 117, p822 * 93.640625, p822 * 127, p822 * 84.640625);
    v1212.bezierCurveTo(p822 * 135, p822 * 95.640625, p822 * 131, p822 * 107.640625, p822 * 110, p822 * 118.640625);
    v1212.bezierCurveTo(p822 * 78, p822 * 129.640625, p822 * 67, p822 * 130.640625, p822 * 27, p822 * 119.640625);
    v1212.bezierCurveTo(p822 * 0, p822 * 105.640625, p822 * 8, p822 * 83.640625, p822 * 10, p822 * 84.640625);
    v1212.closePath();
    f88(v1212, p824[0]);
    v1212.globalAlpha = 1;
    v1212.translate(0, p822 * -5);
    v1212.beginPath();
    v1212.lineCap = "round";
    v1212.lineJoin = "round";
    v1212.moveTo(p822 * 8, p822 * 73.640625);
    v1212.bezierCurveTo(p822 * 7, p822 * 23.640625, p822 * 33, p822 * 19.640625, p822 * 71, p822 * 17.640625);
    v1212.bezierCurveTo(p822 * 129, p822 * 19.640625, p822 * 130, p822 * 45.640625, p822 * 130, p822 * 76.640625);
    v1212.bezierCurveTo(p822 * 90, p822 * 63.640625, p822 * 85, p822 * 63.640625, p822 * 73, p822 * 63.640625);
    v1212.bezierCurveTo(p822 * 38, p822 * 63.640625, p822 * 33, p822 * 66.640625, p822 * 8, p822 * 73.640625);
    v1212.closePath();
    f88(v1212, p824[1], p824[2], p822 * 4);
    v1212.beginPath();
    v1212.lineCap = "round";
    v1212.lineJoin = "round";
    v1212.moveTo(p822 * 72, p822 * 28.640625);
    v1212.bezierCurveTo(p822 * 51, p822 * 25.640625, p822 * 56, p822 * 7.640625, p822 * 70, p822 * 5.640625);
    v1212.bezierCurveTo(p822 * 94, p822 * 7.640625, p822 * 87, p822 * 29.640625, p822 * 72, p822 * 28.640625);
    v1212.closePath();
    f88(v1212, p824[3], p824[2], p822 * 4);
    v1212.beginPath();
    v1212.lineCap = "round";
    v1212.lineJoin = "round";
    v1212.moveTo(p822 * 51, p822 * 26.640625);
    v1212.bezierCurveTo(p822 * 42, p822 * 29.640625, p822 * 43, p822 * 31.640625, p822 * 42, p822 * 37.640625);
    f88(v1212, vVVVVUndefined582, p824[2], p822 * 4);
    v1212.beginPath();
    v1212.lineCap = "round";
    v1212.lineJoin = "round";
    v1212.moveTo(p822 * 90, p822 * 26.640625);
    v1212.bezierCurveTo(p822 * 100, p822 * 28.640625, p822 * 98, p822 * 34.640625, p822 * 99, p822 * 38.640625);
    f88(v1212, vVVVVUndefined142, p824[2], p822 * 4);
    v1212.beginPath();
    v1212.lineCap = "round";
    v1212.lineJoin = "round";
    v1212.moveTo(p822 * 26, p822 * 79.640625);
    v1212.bezierCurveTo(p822 * 13, p822 * 84.640625, p822 * 9, p822 * 86.640625, p822 * 7, p822 * 78.640625);
    v1212.bezierCurveTo(p822 * 6, p822 * 69.640625, p822 * 15, p822 * 67.640625, p822 * 31, p822 * 62.640625);
    v1212.bezierCurveTo(p822 * 63, p822 * 55.640625, p822 * 85, p822 * 57.640625, p822 * 104, p822 * 63.640625);
    v1212.bezierCurveTo(p822 * 131, p822 * 69.640625, p822 * 132, p822 * 71.640625, p822 * 131, p822 * 78.640625);
    v1212.bezierCurveTo(p822 * 131, p822 * 91.640625, p822 * 112, p822 * 80.640625, p822 * 91, p822 * 75.640625);
    v1212.bezierCurveTo(p822 * 51, p822 * 70.640625, p822 * 45, p822 * 74.640625, p822 * 28, p822 * 78.640625);
    v1212.closePath();
    f88(v1212, p824[3], p824[4], p822 * 4);
    v1212.beginPath();
    v1212.lineCap = "round";
    v1212.lineJoin = "round";
    v1212.moveTo(p822 * 8, p822 * 82.640625);
    v1212.bezierCurveTo(p822 * 40, p822 * 107.640625, p822 * 53, p822 * 104.640625, p822 * 67, p822 * 106.640625);
    v1212.bezierCurveTo(p822 * 101, p822 * 103.640625, p822 * 117, p822 * 93.640625, p822 * 127, p822 * 84.640625);
    v1212.bezierCurveTo(p822 * 135, p822 * 95.640625, p822 * 131, p822 * 107.640625, p822 * 110, p822 * 118.640625);
    v1212.bezierCurveTo(p822 * 78, p822 * 129.640625, p822 * 67, p822 * 130.640625, p822 * 27, p822 * 119.640625);
    v1212.bezierCurveTo(p822 * 0, p822 * 105.640625, p822 * 8, p822 * 83.640625, p822 * 10, p822 * 84.640625);
    v1212.closePath();
    f88(v1212, p824[3], p824[4], p822 * 4);
    return v1211;
  }
  function f195(p825, p826, p827) {
    var v1213 = document.createElement("canvas");
    var v1214 = v1213.getContext("2d");
    v1213.width = p825 * 400;
    v1213.height = p825 * 400;
    v1214.beginPath();
    v1214.lineCap = "round";
    v1214.lineJoin = "round";
    v1214.moveTo(p825 * 96.5, p825 * 277.34375);
    v1214.bezierCurveTo(p825 * 197.5, p825 * 259.84375, p825 * 197.5, p825 * 259.84375, p825 * 298.5, p825 * 242.34375);
    v1214.bezierCurveTo(p825 * 311.5, p825 * 231.34375, p825 * 307.5, p825 * 168.34375, p825 * 298.5, p825 * 150.34375);
    v1214.bezierCurveTo(p825 * 198, p825 * 170.34375, p825 * 198, p825 * 170.34375, p825 * 97.5, p825 * 190.34375);
    v1214.closePath();
    f88(v1214, p827[1], p827[2], p825 * 12);
    v1214.beginPath();
    v1214.lineCap = "round";
    v1214.lineJoin = "round";
    v1214.moveTo(p825 * 98.5, p825 * 214.34375);
    v1214.bezierCurveTo(p825 * 199, p825 * 196.34375, p825 * 199, p825 * 196.34375, p825 * 299.5, p825 * 178.34375);
    v1214.closePath();
    f88(v1214, undefined, p827[2], p825 * 12);
    v1214.beginPath();
    v1214.lineCap = "round";
    v1214.lineJoin = "round";
    v1214.moveTo(p825 * 98.5, p825 * 247.34375);
    v1214.bezierCurveTo(p825 * 201.5, p825 * 229.34375, p825 * 201.5, p825 * 229.34375, p825 * 304.5, p825 * 211.34375);
    v1214.closePath();
    f88(v1214, vVVVVUndefined583, p827[2], p825 * 12);
    v1214.beginPath();
    v1214.lineCap = "round";
    v1214.lineJoin = "round";
    v1214.moveTo(p825 * 97.5, p825 * 189.34375);
    v1214.bezierCurveTo(p825 * 97, p825 * 199.84375, p825 * 97, p825 * 199.84375, p825 * 96.5, p825 * 210.34375);
    v1214.bezierCurveTo(p825 * 110.5, p825 * 204.34375, p825 * 110.5, p825 * 204.34375, p825 * 124.5, p825 * 198.34375);
    v1214.bezierCurveTo(p825 * 137.5, p825 * 203.84375, p825 * 137.5, p825 * 203.84375, p825 * 150.5, p825 * 209.34375);
    v1214.bezierCurveTo(p825 * 172, p825 * 197.84375, p825 * 172, p825 * 197.84375, p825 * 193.5, p825 * 186.34375);
    v1214.bezierCurveTo(p825 * 211.5, p825 * 189.84375, p825 * 211.5, p825 * 189.84375, p825 * 229.5, p825 * 193.34375);
    v1214.bezierCurveTo(p825 * 240.5, p825 * 193.34375, p825 * 240.5, p825 * 193.34375, p825 * 251.5, p825 * 193.34375);
    v1214.bezierCurveTo(p825 * 261, p825 * 182.84375, p825 * 261, p825 * 182.84375, p825 * 270.5, p825 * 172.34375);
    v1214.bezierCurveTo(p825 * 287.5, p825 * 169.34375, p825 * 287.5, p825 * 169.34375, p825 * 304.5, p825 * 166.34375);
    v1214.bezierCurveTo(p825 * 304.5, p825 * 156.34375, p825 * 300.5, p825 * 145.34375, p825 * 298.5, p825 * 147.34375);
    v1214.closePath();
    f88(v1214, p827[3], p827[4], p825 * 12);
    v1214.beginPath();
    v1214.lineCap = "round";
    v1214.lineJoin = "round";
    v1214.moveTo(p825 * 300.5, p825 * 147.34375);
    v1214.bezierCurveTo(p825 * 293.5, p825 * 121.34375, p825 * 278.5, p825 * 106.34375, p825 * 256.5, p825 * 101.34375);
    v1214.bezierCurveTo(p825 * 176.5, p825 * 145.34375, p825 * 176.5, p825 * 145.34375, p825 * 96.5, p825 * 189.34375);
    v1214.closePath();
    f88(v1214, p827[5], p827[6], p825 * 12);
    f92(v1214, p825 * 252.5, p825 * 129.34375, p825 * 18.027756377319946);
    f88(v1214, p827[7]);
    f92(v1214, p825 * 248.5, p825 * 121.34375, p825 * 8.246211251235321);
    f88(v1214, p827[8]);
    return v1213;
  }
  function f196(p828, p829, p830) {
    var v1215 = document.createElement("canvas");
    var v1216 = v1215.getContext("2d");
    v1215.width = p828 * 170;
    v1215.height = p828 * 170;
    v1216.globalAlpha = p829 ? 0.5 : 1;
    v1216.translate(0, p828 * 3);
    v1216.save();
    v1216.translate(p828 * 85, p828 * 95);
    v1216.rotate(1.4);
    f89(v1216, 7, p828 * 60, p828 * 10);
    v1216.restore();
    f88(v1216, p830[0]);
    v1216.globalAlpha = 1;
    v1216.translate(p828 * 85, p828 * 82);
    for (var v1217 = 0; v1217 < 10; v1217++) {
      v1216.rotate(Math.PI / 5);
      v1216.save();
      v1216.translate(p828 * 65, 0);
      f89(v1216, 3, p828 * 21, p828 * 4);
      f88(v1216, p830[1], p830[2], p828 * 4);
      v1216.restore();
    }
    v1216.save();
    v1216.translate(p828 * 0, p828 * 0);
    v1216.rotate(1);
    f89(v1216, 8, p828 * 60, p828 * 10);
    f88(v1216, p830[3], p830[4], p828 * 4);
    v1216.rotate(0.56);
    f89(v1216, 8, p828 * 40, p828 * 10);
    f88(v1216, p830[5], p830[6], p828 * 4);
    v1216.rotate(0.28);
    f89(v1216, 8, p828 * 28, p828 * 8);
    f88(v1216, p830[7]);
    v1216.restore();
    return v1215;
  }
  function f197(p831, p832, p833, p834, p835) {
    var v1218 = document.createElement("canvas");
    var v1219 = v1218.getContext("2d");
    if (p834 == 0) {
      var v1220 = p831 * 270;
      var v1221 = p831 * 250;
      v1218.width = v1220;
      v1218.height = v1221;
      v1219.beginPath();
      v1219.moveTo(p831 * 140, p831 * 3);
      v1219.translate(p831 * -25, p831 * -20);
      v1219.bezierCurveTo(p831 * 218, p831 * 31, p831 * 251, p831 * 61, p831 * 265, p831 * 85);
      v1219.bezierCurveTo(p831 * 278, p831 * 108, p831 * 295, p831 * 160, p831 * 285, p831 * 195);
      v1219.bezierCurveTo(p831 * 271, p831 * 242, p831 * 213, p831 * 268, p831 * 188, p831 * 266);
      v1219.bezierCurveTo(p831 * 139, p831 * 262, p831 * 70, p831 * 244, p831 * 47, p831 * 204);
      v1219.bezierCurveTo(p831 * 20, p831 * 158, p831 * 35, p831 * 78, p831 * 59, p831 * 56);
      v1219.bezierCurveTo(p831 * 90, p831 * 28, p831 * 124, p831 * 23, p831 * 140, p831 * 23);
      v1219.closePath();
      f88(v1219, p833[0]);
    } else if (p834 == 1) {
      v1220 = p831 * 430;
      v1221 = p831 * 350;
      v1218.width = v1220;
      v1218.height = v1221;
      v1219.beginPath();
      v1219.moveTo(p831 * 180, p831 * 5);
      v1219.translate(p831 * -30, p831 * -60);
      v1219.bezierCurveTo(p831 * 283, p831 * 60, p831 * 265, p831 * 163, p831 * 335, p831 * 206);
      v1219.bezierCurveTo(p831 * 376, p831 * 231, p831 * 492, p831 * 299, p831 * 434, p831 * 357);
      v1219.bezierCurveTo(p831 * 371, p831 * 421, p831 * 289, p831 * 394, p831 * 255, p831 * 386);
      v1219.bezierCurveTo(p831 * 218, p831 * 377, p831 * 91, p831 * 359, p831 * 50, p831 * 272);
      v1219.bezierCurveTo(p831 * 12, p831 * 192, p831 * 107, p831 * 75, p831 * 178, p831 * 69);
      v1219.closePath();
      f88(v1219, p833[0]);
    } else if (p834 == 2) {
      v1220 = p831 * 400;
      v1221 = p831 * 300;
      v1218.width = v1220;
      v1218.height = v1221;
      v1219.beginPath();
      v1219.moveTo(p831 * 80, p831 * 52);
      v1219.translate(p831 * -40, p831 * -30);
      v1219.bezierCurveTo(p831 * 124, p831 * 77, p831 * 241, p831 * 22, p831 * 311, p831 * 65);
      v1219.bezierCurveTo(p831 * 352, p831 * 90, p831 * 404, p831 * 176, p831 * 346, p831 * 234);
      v1219.bezierCurveTo(p831 * 283, p831 * 298, p831 * 179, p831 * 299, p831 * 145, p831 * 291);
      v1219.bezierCurveTo(p831 * 108, p831 * 282, p831 * 100, p831 * 239, p831 * 63, p831 * 205);
      v1219.bezierCurveTo(p831 * 37, p831 * 181, p831 * 45, p831 * 131, p831 * 80, p831 * 107);
      v1219.closePath();
      f88(v1219, p833[0]);
    }
    return v1218;
  }
  function f198(p836, p837, p838) {
    var v1222 = document.createElement("canvas");
    var v1223 = v1222.getContext("2d");
    var v1224 = p836 * 130;
    var v1225 = p836 * 142;
    var v1226 = v1224 / 2;
    var v1227 = v1225 / 2;
    v1222.width = v1224;
    v1222.height = v1225;
    v1223.translate(v1226, v1227 + p836 * 7);
    v1223.globalAlpha = p837 ? 0.5 : 1;
    f92(v1223, 0, 0, p836 * 60);
    f88(v1223, p838[0]);
    v1223.translate(0, p836 * -7);
    v1223.globalAlpha = 1;
    f92(v1223, 0, 0, p836 * 60);
    f88(v1223, p838[1], p838[2], p836 * 4);
    f92(v1223, 0, 0, p836 * 40);
    f88(v1223, p838[3]);
    f92(v1223, 0, 0, p836 * 25);
    f88(v1223, p838[4], p838[5], p836 * 8);
    return v1222;
  }
  function f199(p839, p840, p841) {
    var v1228 = document.createElement("canvas");
    var v1229 = v1228.getContext("2d");
    v1228.width = p839 * 501;
    v1228.height = p839 * 309;
    v1229.translate(0, p839 * 6);
    v1229.globalAlpha = p840 ? 0.5 : 1;
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 126, p839 * 184);
    v1229.bezierCurveTo(p839 * 169, p839 * 196, p839 * 194, p839 * 198, p839 * 227, p839 * 198);
    v1229.bezierCurveTo(p839 * 235, p839 * 222, p839 * 236, p839 * 223, p839 * 241, p839 * 226);
    v1229.bezierCurveTo(p839 * 245, p839 * 228, p839 * 257, p839 * 228, p839 * 263, p839 * 226);
    v1229.bezierCurveTo(p839 * 267, p839 * 225, p839 * 270, p839 * 211, p839 * 275, p839 * 198);
    v1229.bezierCurveTo(p839 * 332, p839 * 194, p839 * 347, p839 * 192, p839 * 372, p839 * 188);
    v1229.bezierCurveTo(p839 * 366, p839 * 174.5, p839 * 366, p839 * 174.5, p839 * 360, p839 * 161);
    v1229.bezierCurveTo(p839 * 253.5, p839 * 162, p839 * 253.5, p839 * 162, p839 * 147, p839 * 163);
    v1229.closePath();
    f88(v1229, p841[0]);
    v1229.globalAlpha = 1;
    v1229.translate(0, p839 * -6);
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 100, p839 * 116);
    v1229.bezierCurveTo(p839 * 90, p839 * 101, p839 * 96, p839 * 89, p839 * 106, p839 * 83);
    v1229.bezierCurveTo(p839 * 86, p839 * 79, p839 * 86, p839 * 52, p839 * 93, p839 * 38);
    v1229.bezierCurveTo(p839 * 99, p839 * 51, p839 * 107, p839 * 57, p839 * 122, p839 * 63);
    v1229.bezierCurveTo(p839 * 130, p839 * 53, p839 * 141, p839 * 46, p839 * 161, p839 * 46);
    v1229.bezierCurveTo(p839 * 157, p839 * 31, p839 * 158, p839 * 20, p839 * 169, p839 * 6);
    v1229.bezierCurveTo(p839 * 171, p839 * 24, p839 * 186, p839 * 33, p839 * 198, p839 * 45);
    v1229.bezierCurveTo(p839 * 252, p839 * 45, p839 * 252, p839 * 45, p839 * 306, p839 * 45);
    v1229.bezierCurveTo(p839 * 323, p839 * 33, p839 * 332, p839 * 21, p839 * 335, p839 * 7);
    v1229.bezierCurveTo(p839 * 349, p839 * 21, p839 * 347, p839 * 36, p839 * 345, p839 * 46);
    v1229.bezierCurveTo(p839 * 364, p839 * 46, p839 * 369, p839 * 48, p839 * 377, p839 * 63);
    v1229.bezierCurveTo(p839 * 398, p839 * 58, p839 * 403, p839 * 49, p839 * 409, p839 * 40);
    v1229.bezierCurveTo(p839 * 419, p839 * 57, p839 * 411, p839 * 79, p839 * 398, p839 * 85);
    v1229.bezierCurveTo(p839 * 405, p839 * 100, p839 * 405, p839 * 106, p839 * 401, p839 * 118);
    v1229.bezierCurveTo(p839 * 332.5, p839 * 128.5, p839 * 332.5, p839 * 128.5, p839 * 264, p839 * 139);
    v1229.closePath();
    f88(v1229, p841[1], p841[2], p839 * 10);
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 122, p839 * 191);
    v1229.bezierCurveTo(p839 * 123, p839 * 237, p839 * 135, p839 * 245, p839 * 153, p839 * 259);
    v1229.bezierCurveTo(p839 * 167, p839 * 269, p839 * 158, p839 * 281, p839 * 118, p839 * 276);
    v1229.bezierCurveTo(p839 * 104, p839 * 273, p839 * 98, p839 * 268, p839 * 93, p839 * 242);
    v1229.bezierCurveTo(p839 * 89, p839 * 220, p839 * 92, p839 * 201, p839 * 102, p839 * 179);
    v1229.closePath();
    f88(v1229, p841[3], p841[2], p839 * 10);
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 403, p839 * 182);
    v1229.bezierCurveTo(p839 * 414, p839 * 215, p839 * 412, p839 * 232, p839 * 403, p839 * 260);
    v1229.bezierCurveTo(p839 * 395, p839 * 274, p839 * 375, p839 * 272, p839 * 356, p839 * 270);
    v1229.bezierCurveTo(p839 * 345, p839 * 268, p839 * 339, p839 * 262, p839 * 354, p839 * 252);
    v1229.bezierCurveTo(p839 * 370, p839 * 242, p839 * 380, p839 * 225, p839 * 384, p839 * 184);
    v1229.closePath();
    f88(v1229, p841[3], p841[2], p839 * 10);
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 155, p839 * 157);
    v1229.bezierCurveTo(p839 * 146, p839 * 189, p839 * 137, p839 * 198, p839 * 114, p839 * 219);
    v1229.bezierCurveTo(p839 * 104, p839 * 212, p839 * 98, p839 * 203, p839 * 89, p839 * 189);
    v1229.bezierCurveTo(p839 * 82, p839 * 178, p839 * 91, p839 * 164, p839 * 93, p839 * 136);
    v1229.closePath();
    f88(v1229, p841[4], p841[2], p839 * 10);
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 347, p839 * 162);
    v1229.bezierCurveTo(p839 * 357, p839 * 195, p839 * 376, p839 * 209, p839 * 387, p839 * 217);
    v1229.bezierCurveTo(p839 * 409, p839 * 201, p839 * 420, p839 * 181, p839 * 416, p839 * 166);
    v1229.bezierCurveTo(p839 * 410, p839 * 150, p839 * 412, p839 * 149, p839 * 408, p839 * 130);
    v1229.closePath();
    f88(v1229, p841[4], p841[2], p839 * 10);
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 86, p839 * 134);
    v1229.bezierCurveTo(p839 * 79, p839 * 102, p839 * 92, p839 * 84, p839 * 108, p839 * 92);
    v1229.bezierCurveTo(p839 * 149, p839 * 108, p839 * 184, p839 * 111, p839 * 242, p839 * 111);
    v1229.bezierCurveTo(p839 * 294, p839 * 108, p839 * 341, p839 * 105, p839 * 386, p839 * 98);
    v1229.bezierCurveTo(p839 * 412, p839 * 91, p839 * 417, p839 * 86, p839 * 415, p839 * 133);
    v1229.bezierCurveTo(p839 * 413, p839 * 160, p839 * 413, p839 * 160, p839 * 368, p839 * 174);
    v1229.bezierCurveTo(p839 * 308, p839 * 184, p839 * 291, p839 * 185, p839 * 270, p839 * 186);
    v1229.bezierCurveTo(p839 * 264, p839 * 206, p839 * 262, p839 * 215, p839 * 253, p839 * 215);
    v1229.bezierCurveTo(p839 * 239, p839 * 217, p839 * 239, p839 * 211, p839 * 231, p839 * 186);
    v1229.bezierCurveTo(p839 * 178, p839 * 184, p839 * 156, p839 * 179, p839 * 112, p839 * 162);
    v1229.bezierCurveTo(p839 * 87, p839 * 151, p839 * 90, p839 * 144, p839 * 87, p839 * 137);
    v1229.closePath();
    f88(v1229, p841[4], p841[2], p839 * 10);
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 63, p839 * 98);
    v1229.bezierCurveTo(p839 * 84, p839 * 121, p839 * 109, p839 * 102, p839 * 124, p839 * 117);
    v1229.bezierCurveTo(p839 * 138, p839 * 136, p839 * 123, p839 * 165, p839 * 94, p839 * 150);
    v1229.bezierCurveTo(p839 * 66, p839 * 131, p839 * 64, p839 * 115, p839 * 63, p839 * 99);
    v1229.closePath();
    f88(v1229, p841[3], p841[2], p839 * 10);
    v1229.beginPath();
    v1229.lineCap = "round";
    v1229.lineJoin = "round";
    v1229.moveTo(p839 * 449, p839 * 97);
    v1229.bezierCurveTo(p839 * 446, p839 * 143, p839 * 415, p839 * 151, p839 * 402, p839 * 155);
    v1229.bezierCurveTo(p839 * 386, p839 * 157, p839 * 373, p839 * 133, p839 * 391, p839 * 116);
    v1229.bezierCurveTo(p839 * 402, p839 * 106, p839 * 432, p839 * 124, p839 * 449, p839 * 97);
    v1229.closePath();
    f88(v1229, p841[3], p841[2], p839 * 10);
    return v1228;
  }
  function f200(p842, p843, p844) {
    var v1230 = document.createElement("canvas");
    var v1231 = v1230.getContext("2d");
    v1230.width = p842 * 151;
    v1230.height = p842 * 80;
    v1231.beginPath();
    v1231.lineCap = "round";
    v1231.lineJoin = "round";
    v1231.moveTo(p842 * 133, p842 * 54);
    v1231.bezierCurveTo(p842 * 136, p842 * 18, p842 * 129, p842 * 18, p842 * 114, p842 * 13);
    v1231.bezierCurveTo(p842 * 51, p842 * 0, p842 * 36, p842 * 16, p842 * 34, p842 * 16);
    v1231.bezierCurveTo(p842 * 8, p842 * 28, p842 * 22, p842 * 56, p842 * 21, p842 * 57);
    v1231.closePath();
    f88(v1231, p844[2], p844[3], 4);
    v1231.beginPath();
    v1231.lineCap = "round";
    v1231.lineJoin = "round";
    v1231.moveTo(p842 * 130, p842 * 40);
    v1231.bezierCurveTo(p842 * 132, p842 * 35, p842 * 132, p842 * 30, p842 * 132, p842 * 29);
    v1231.bezierCurveTo(p842 * 145, p842 * 38, p842 * 144, p842 * 43, p842 * 137, p842 * 54);
    v1231.closePath();
    f88(v1231, p844[0], p844[1], 4);
    v1231.beginPath();
    v1231.lineCap = "round";
    v1231.lineJoin = "round";
    v1231.moveTo(p842 * 20, p842 * 33);
    v1231.bezierCurveTo(p842 * 24, p842 * 44, p842 * 215, p842 * 39, p842 * 23, p842 * 44);
    v1231.bezierCurveTo(p842 * 19, p842 * 49, p842 * 19, p842 * 49, p842 * 15, p842 * 54);
    v1231.bezierCurveTo(p842 * 4, p842 * 43, p842 * 10, p842 * 35, p842 * 20, p842 * 32);
    v1231.closePath();
    f88(v1231, p844[0], p844[1], 4);
    v1231.beginPath();
    v1231.lineCap = "round";
    v1231.lineJoin = "round";
    v1231.moveTo(p842 * 18, p842 * 52);
    v1231.bezierCurveTo(p842 * 24, p842 * 31, p842 * 34, p842 * 25, p842 * 75, p842 * 23);
    v1231.bezierCurveTo(p842 * 130, p842 * 24, p842 * 129, p842 * 32, p842 * 134, p842 * 51);
    v1231.bezierCurveTo(p842 * 138, p842 * 70, p842 * 126, p842 * 72, p842 * 90, p842 * 73);
    v1231.bezierCurveTo(p842 * 18, p842 * 72, p842 * 15, p842 * 68, p842 * 18, p842 * 54);
    v1231.closePath();
    f88(v1231, p844[0], p844[1], 4);
    return v1230;
  }
  function f201(p845, p846, p847) {
    var v1232 = document.createElement("canvas");
    var v1233 = v1232.getContext("2d");
    v1232.width = p845 * 43;
    v1232.height = p845 * 209;
    v1233.globalAlpha = p846 ? 0.5 : 1;
    v1233.translate(0, p845 * 10);
    v1233.translate(p845 * 5, p845 * 5);
    v1233.save();
    v1233.translate(p845 * 21, p845 * 102.5);
    f86(v1233, p845 * -4, p845 * -76.5, p845 * 8, p845 * 163, p845 * 10);
    v1233.restore();
    f88(v1233, p847[0]);
    v1233.translate(0, p845 * 10);
    v1233.beginPath();
    v1233.lineCap = "round";
    v1233.lineJoin = "round";
    v1233.moveTo(p845 * 20, p845 * 10);
    v1233.bezierCurveTo(p845 * 25, p845 * 25.5, p845 * 25, p845 * 25.5, p845 * 30, p845 * 41);
    v1233.bezierCurveTo(p845 * 25.5, p845 * 38.5, p845 * 25.5, p845 * 38.5, p845 * 21, p845 * 36);
    v1233.bezierCurveTo(p845 * 16, p845 * 38.5, p845 * 16, p845 * 38.5, p845 * 11, p845 * 41);
    v1233.closePath();
    f88(v1233, p847[0]);
    v1233.beginPath();
    v1233.lineCap = "round";
    v1233.lineJoin = "round";
    v1233.moveTo(p845 * 21, p845 * 1);
    v1233.bezierCurveTo(p845 * 28, p845 * 18, p845 * 28, p845 * 18, p845 * 35, p845 * 35);
    v1233.bezierCurveTo(p845 * 28.5, p845 * 32, p845 * 28.5, p845 * 32, p845 * 22, p845 * 29);
    v1233.bezierCurveTo(p845 * 14.5, p845 * 32.5, p845 * 14.5, p845 * 32.5, p845 * 7, p845 * 36);
    v1233.closePath();
    f88(v1233, p847[0]);
    v1233.beginPath();
    v1233.lineCap = "round";
    v1233.lineJoin = "round";
    v1233.moveTo(p845 * 14, p845 * 146);
    v1233.bezierCurveTo(p845 * 21, p845 * 146, p845 * 21, p845 * 146, p845 * 28, p845 * 146);
    v1233.bezierCurveTo(p845 * 27.5, p845 * 147.5, p845 * 27.5, p845 * 147.5, p845 * 27, p845 * 149);
    v1233.bezierCurveTo(p845 * 27, p845 * 160, p845 * 27, p845 * 160, p845 * 27, p845 * 171);
    v1233.bezierCurveTo(p845 * 27.5, p845 * 171.5, p845 * 27.5, p845 * 171.5, p845 * 28, p845 * 172);
    v1233.bezierCurveTo(p845 * 21, p845 * 172, p845 * 21, p845 * 172, p845 * 14, p845 * 172);
    v1233.bezierCurveTo(p845 * 14, p845 * 171.5, p845 * 14, p845 * 171.5, p845 * 14, p845 * 171);
    v1233.bezierCurveTo(p845 * 14.5, p845 * 171.5, p845 * 14.5, p845 * 171.5, p845 * 15, p845 * 172);
    v1233.bezierCurveTo(p845 * 15, p845 * 160.5, p845 * 15, p845 * 160.5, p845 * 15, p845 * 149);
    v1233.closePath();
    f88(v1233, p847[0]);
    v1233.beginPath();
    v1233.lineCap = "round";
    v1233.lineJoin = "round";
    v1233.moveTo(p845 * 21, p845 * 6);
    v1233.bezierCurveTo(p845 * 26.5, p845 * 18.5, p845 * 26.5, p845 * 18.5, p845 * 32, p845 * 31);
    v1233.bezierCurveTo(p845 * 27, p845 * 29, p845 * 27, p845 * 29, p845 * 22, p845 * 27);
    v1233.closePath();
    f88(v1233, p847[0]);
    v1233.translate(0, p845 * -20);
    v1233.globalAlpha = 1;
    v1233.translate(0, p845 * 10);
    v1233.translate(p845 * -5, p845 * -5);
    v1233.save();
    v1233.translate(p845 * 21, p845 * 102.5);
    f86(v1233, p845 * -4, p845 * -76.5, p845 * 8, p845 * 163, p845 * 10);
    v1233.restore();
    f88(v1233, p847[1], p847[2], p845 * 4);
    v1233.translate(0, p845 * 10);
    v1233.beginPath();
    v1233.lineCap = "round";
    v1233.lineJoin = "round";
    v1233.moveTo(p845 * 20, p845 * 10);
    v1233.bezierCurveTo(p845 * 25, p845 * 25.5, p845 * 25, p845 * 25.5, p845 * 30, p845 * 41);
    v1233.bezierCurveTo(p845 * 25.5, p845 * 38.5, p845 * 25.5, p845 * 38.5, p845 * 21, p845 * 36);
    v1233.bezierCurveTo(p845 * 16, p845 * 38.5, p845 * 16, p845 * 38.5, p845 * 11, p845 * 41);
    v1233.closePath();
    f88(v1233, p847[3], p847[4], p845 * 4);
    v1233.beginPath();
    v1233.lineCap = "round";
    v1233.lineJoin = "round";
    v1233.moveTo(p845 * 21, p845 * 1);
    v1233.bezierCurveTo(p845 * 28, p845 * 18, p845 * 28, p845 * 18, p845 * 35, p845 * 35);
    v1233.bezierCurveTo(p845 * 28.5, p845 * 32, p845 * 28.5, p845 * 32, p845 * 22, p845 * 29);
    v1233.bezierCurveTo(p845 * 14.5, p845 * 32.5, p845 * 14.5, p845 * 32.5, p845 * 7, p845 * 36);
    v1233.closePath();
    f88(v1233, p847[5], p847[6], p845 * 4);
    v1233.translate(0, p845 * 0);
    v1233.beginPath();
    v1233.lineCap = "round";
    v1233.lineJoin = "round";
    v1233.moveTo(p845 * 14, p845 * 146);
    v1233.bezierCurveTo(p845 * 21, p845 * 146, p845 * 21, p845 * 146, p845 * 28, p845 * 146);
    v1233.bezierCurveTo(p845 * 27.5, p845 * 147.5, p845 * 27.5, p845 * 147.5, p845 * 27, p845 * 149);
    v1233.bezierCurveTo(p845 * 27, p845 * 160, p845 * 27, p845 * 160, p845 * 27, p845 * 171);
    v1233.bezierCurveTo(p845 * 27.5, p845 * 171.5, p845 * 27.5, p845 * 171.5, p845 * 28, p845 * 172);
    v1233.bezierCurveTo(p845 * 21, p845 * 172, p845 * 21, p845 * 172, p845 * 14, p845 * 172);
    v1233.bezierCurveTo(p845 * 14, p845 * 171.5, p845 * 14, p845 * 171.5, p845 * 14, p845 * 171);
    v1233.bezierCurveTo(p845 * 14.5, p845 * 171.5, p845 * 14.5, p845 * 171.5, p845 * 15, p845 * 172);
    v1233.bezierCurveTo(p845 * 15, p845 * 160.5, p845 * 15, p845 * 160.5, p845 * 15, p845 * 149);
    v1233.closePath();
    f88(v1233, p847[1], p847[2], p845 * 4);
    v1233.beginPath();
    v1233.lineCap = "round";
    v1233.lineJoin = "round";
    v1233.moveTo(p845 * 21, p845 * 6);
    v1233.bezierCurveTo(p845 * 26.5, p845 * 18.5, p845 * 26.5, p845 * 18.5, p845 * 32, p845 * 31);
    v1233.bezierCurveTo(p845 * 27, p845 * 29, p845 * 27, p845 * 29, p845 * 22, p845 * 27);
    v1233.closePath();
    f88(v1233, p847[8]);
    return v1232;
  }
  function f202(p848, p849, p850) {
    var v1234 = document.createElement("canvas");
    var v1235 = v1234.getContext("2d");
    var v1236 = p848 * 180;
    var v1237 = p848 * 210;
    var v1238 = (v1240 = p848 * 60) / 4;
    var v1239 = p848 * 20;
    v1234.width = v1236;
    v1234.height = v1237;
    v1235.save();
    v1235.translate(v1236 / 2 - p848 * 0, v1237 / 2 - p848 * 35 + v1239);
    v1235.rotate(Math.PI / -1.8);
    v1235.globalAlpha = 0.5;
    v1235.translate(p848 * 0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[0]);
    v1235.restore();
    v1235.save();
    v1235.translate(v1236 / 2 + p848 * 10, v1237 / 2 + p848 * 15 + v1239);
    v1235.rotate(Math.PI / 2);
    v1235.globalAlpha = 0.5;
    v1235.translate(p848 * 0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[0]);
    v1235.restore();
    v1235.save();
    v1235.translate(v1236 / 2 - p848 * 50, v1237 / 2 + p848 * 40 + v1239);
    v1235.rotate(Math.PI / 3);
    v1235.globalAlpha = 0.5;
    v1235.translate(0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[0]);
    v1235.restore();
    v1235.save();
    v1235.translate(v1236 / 2 - p848 * 0, v1237 / 2 - p848 * 35);
    v1235.rotate(Math.PI / -1.8);
    v1235.globalAlpha = 1;
    v1235.translate(p848 * 0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[1]);
    v1235.restore();
    v1235.save();
    v1235.translate(v1236 / 2 + p848 * 10, v1237 / 2 + p848 * 15);
    v1235.rotate(Math.PI / 2);
    v1235.globalAlpha = 1;
    v1235.translate(0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[1]);
    v1235.restore();
    v1235.save();
    v1235.translate(v1236 / 2 - p848 * 50, v1237 / 2 + p848 * 40);
    v1235.rotate(Math.PI / 3);
    v1235.globalAlpha = 1;
    v1235.translate(0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[1]);
    v1235.restore();
    var v1240;
    v1238 = (v1240 = p848 * 30) / 4;
    v1235.save();
    v1235.translate(v1236 / 2 + p848 * 5, v1237 / 2 - p848 * 20);
    v1235.rotate(Math.PI / -1.8);
    v1235.globalAlpha = 1;
    v1235.translate(0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[2]);
    v1235.restore();
    v1235.save();
    v1235.translate(v1236 / 2 + p848 * 0, v1237 / 2 + p848 * 10);
    v1235.rotate(Math.PI / 2);
    v1235.globalAlpha = 1;
    v1235.translate(0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[2]);
    v1235.restore();
    v1235.save();
    v1235.translate(v1236 / 2 - p848 * 45, v1237 / 2 + p848 * 35);
    v1235.rotate(Math.PI / 3);
    v1235.globalAlpha = 1;
    v1235.translate(0, p848 * -20);
    f89(v1235, 5, v1240, v1238);
    f88(v1235, p850[2]);
    v1235.restore();
    f92(v1235, v1236 / 2 - p848 * 7, v1237 / 2 + p848 * 7, 5);
    f88(v1235, p850[2]);
    return v1234;
  }
  function f203(p851, p852, p853, p854) {
    var v1241 = document.createElement("canvas");
    var v1242 = v1241.getContext("2d");
    var v1243 = p851 * 220;
    var v1244 = p851 * 220;
    var v1245 = p851 * 100;
    var v1246 = v1245 / 4;
    v1241.width = v1243;
    v1241.height = v1244;
    v1242.translate(v1243 / 2, v1244 / 2);
    v1242.globalAlpha = p852 ? 0.5 : 1;
    if (!p852) {
      v1242.translate(p851 * 0, p851 * -8);
    }
    f89(v1242, 7, v1245, v1246);
    f88(v1242, p852 ? p853[0] : p853[1]);
    v1242.globalAlpha = 1;
    if (p854 == 0) {
      f89(v1242, 6, v1245 * 0.65, v1246 * 0.65);
      f88(v1242, p853[2]);
    } else if (p854 == 1) {
      v1242.translate(p851 * 20, p851 * 20);
      f89(v1242, 6, v1245 * 0.45, v1246 * 0.4);
      f88(v1242, p853[2]);
    }
    return v1241;
  }
  function f204(p855, p856, p857) {
    var v1247 = document.createElement("canvas");
    var v1248 = v1247.getContext("2d");
    v1247.width = p855 * 115;
    v1247.height = p855 * 585;
    v1248.scale(-1, 1);
    v1248.translate(p855 * -110, 0);
    v1248.translate(p855 * 10, p855 * 10);
    v1248.globalAlpha = p856 ? 0.5 : 1;
    v1248.save();
    v1248.translate(p855 * 51.5, p855 * 342);
    f86(v1248, p855 * -14.5, p855 * -225, p855 * 29, p855 * 450, p855 * 20);
    v1248.restore();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 54, p855 * 83);
    v1248.bezierCurveTo(p855 * 70, p855 * 69, p855 * 78, p855 * 62, p855 * 82, p855 * 40);
    v1248.bezierCurveTo(p855 * 93, p855 * 48, p855 * 103, p855 * 64, p855 * 95, p855 * 102);
    v1248.bezierCurveTo(p855 * 60, p855 * 114, p855 * 53, p855 * 103, p855 * 54, p855 * 85);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 95, p855 * 97);
    v1248.bezierCurveTo(p855 * 56, p855 * 102, p855 * 43, p855 * 77, p855 * 71, p855 * 6);
    v1248.bezierCurveTo(p855 * 34, p855 * 10, p855 * 6, p855 * 43, p855 * 5, p855 * 76);
    v1248.bezierCurveTo(p855 * 4, p855 * 98, p855 * 15, p855 * 130, p855 * 64, p855 * 130);
    v1248.bezierCurveTo(p855 * 76, p855 * 129, p855 * 95, p855 * 113, p855 * 97, p855 * 97);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 55, p855 * 176);
    v1248.bezierCurveTo(p855 * 74, p855 * 175, p855 * 82, p855 * 169, p855 * 96, p855 * 155);
    v1248.bezierCurveTo(p855 * 103, p855 * 183, p855 * 95, p855 * 214, p855 * 54, p855 * 219);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 50, p855 * 176);
    v1248.bezierCurveTo(p855 * 25, p855 * 177, p855 * 16, p855 * 164, p855 * 7, p855 * 156);
    v1248.bezierCurveTo(p855 * 0, p855 * 186, p855 * 10, p855 * 201, p855 * 43, p855 * 220);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 35, p855 * 403);
    v1248.bezierCurveTo(p855 * 47, p855 * 412, p855 * 58, p855 * 412, p855 * 67, p855 * 403);
    v1248.bezierCurveTo(p855 * 66.5, p855 * 434, p855 * 66.5, p855 * 434, p855 * 66, p855 * 465);
    v1248.bezierCurveTo(p855 * 56, p855 * 480, p855 * 40, p855 * 472, p855 * 36, p855 * 465);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 59, p855 * 67);
    v1248.bezierCurveTo(p855 * 47, p855 * 97, p855 * 18, p855 * 117, p855 * 11, p855 * 110);
    v1248.bezierCurveTo(p855 * 11, p855 * 115, p855 * 15, p855 * 122, p855 * 23, p855 * 124);
    v1248.bezierCurveTo(p855 * 46, p855 * 118, p855 * 52, p855 * 113, p855 * 62, p855 * 86);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 30, p855 * 125);
    v1248.bezierCurveTo(p855 * 47, p855 * 136, p855 * 57, p855 * 134, p855 * 77, p855 * 127);
    v1248.bezierCurveTo(p855 * 71, p855 * 158, p855 * 71, p855 * 159, p855 * 66, p855 * 159);
    v1248.bezierCurveTo(p855 * 50.5, p855 * 156.5, p855 * 50.5, p855 * 156.5, p855 * 35, p855 * 154);
    v1248.bezierCurveTo(p855 * 31, p855 * 145, p855 * 31, p855 * 136, p855 * 31, p855 * 125);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 35, p855 * 171);
    v1248.bezierCurveTo(p855 * 32, p855 * 221, p855 * 43, p855 * 233, p855 * 70, p855 * 247);
    v1248.bezierCurveTo(p855 * 75, p855 * 234, p855 * 75, p855 * 230, p855 * 72, p855 * 221);
    v1248.bezierCurveTo(p855 * 48, p855 * 206, p855 * 54, p855 * 188, p855 * 50, p855 * 176);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 60, p855 * 68);
    v1248.bezierCurveTo(p855 * 63, p855 * 69, p855 * 65, p855 * 71, p855 * 67, p855 * 77);
    v1248.bezierCurveTo(p855 * 61, p855 * 123, p855 * 52, p855 * 137, p855 * 42, p855 * 150);
    v1248.bezierCurveTo(p855 * 38, p855 * 151, p855 * 38, p855 * 151, p855 * 34, p855 * 152);
    v1248.bezierCurveTo(p855 * 33, p855 * 146.5, p855 * 33, p855 * 146.5, p855 * 32, p855 * 141);
    v1248.bezierCurveTo(p855 * 49, p855 * 118, p855 * 63, p855 * 87, p855 * 59, p855 * 68);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 71, p855 * 172);
    v1248.bezierCurveTo(p855 * 56, p855 * 222, p855 * 49, p855 * 234, p855 * 35, p855 * 248);
    v1248.bezierCurveTo(p855 * 30, p855 * 236, p855 * 30, p855 * 230, p855 * 31, p855 * 217);
    v1248.bezierCurveTo(p855 * 44, p855 * 202, p855 * 49, p855 * 191, p855 * 52, p855 * 172);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 35, p855 * 151);
    v1248.bezierCurveTo(p855 * 27, p855 * 165, p855 * 31, p855 * 173, p855 * 36, p855 * 178);
    v1248.bezierCurveTo(p855 * 56, p855 * 185, p855 * 73, p855 * 184, p855 * 71, p855 * 170);
    v1248.bezierCurveTo(p855 * 72, p855 * 154, p855 * 71, p855 * 154, p855 * 63, p855 * 155);
    v1248.closePath();
    f88(v1248, p857[0]);
    v1248.translate(p855 * -10, p855 * -10);
    v1248.globalAlpha = 1;
    v1248.save();
    v1248.translate(p855 * 51.5, p855 * 342);
    f86(v1248, p855 * -14.5, p855 * -225, p855 * 29, p855 * 450, p855 * 20);
    v1248.restore();
    f88(v1248, p857[1], p857[2], p855 * 5);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 54, p855 * 83);
    v1248.bezierCurveTo(p855 * 70, p855 * 69, p855 * 78, p855 * 62, p855 * 82, p855 * 40);
    v1248.bezierCurveTo(p855 * 93, p855 * 48, p855 * 103, p855 * 64, p855 * 95, p855 * 102);
    v1248.bezierCurveTo(p855 * 60, p855 * 114, p855 * 53, p855 * 103, p855 * 54, p855 * 85);
    v1248.closePath();
    f88(v1248, p857[3], p857[4], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 95, p855 * 97);
    v1248.bezierCurveTo(p855 * 56, p855 * 102, p855 * 43, p855 * 77, p855 * 71, p855 * 6);
    v1248.bezierCurveTo(p855 * 34, p855 * 10, p855 * 6, p855 * 43, p855 * 5, p855 * 76);
    v1248.bezierCurveTo(p855 * 4, p855 * 98, p855 * 15, p855 * 130, p855 * 64, p855 * 130);
    v1248.bezierCurveTo(p855 * 76, p855 * 129, p855 * 95, p855 * 113, p855 * 97, p855 * 97);
    v1248.closePath();
    f88(v1248, p857[5], p857[6], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 35, p855 * 403);
    v1248.bezierCurveTo(p855 * 47, p855 * 412, p855 * 58, p855 * 412, p855 * 67, p855 * 403);
    v1248.bezierCurveTo(p855 * 66.5, p855 * 434, p855 * 66.5, p855 * 434, p855 * 66, p855 * 465);
    v1248.bezierCurveTo(p855 * 56, p855 * 480, p855 * 40, p855 * 472, p855 * 36, p855 * 465);
    v1248.closePath();
    f88(v1248, p857[7], p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 37, p855 * 427);
    v1248.bezierCurveTo(p855 * 47, p855 * 435, p855 * 55, p855 * 435, p855 * 67, p855 * 427);
    f88(v1248, undefined, p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 36, p855 * 448);
    v1248.bezierCurveTo(p855 * 46, p855 * 454, p855 * 54, p855 * 457, p855 * 65, p855 * 449);
    f88(v1248, vVVUndefined5, p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 55, p855 * 176);
    v1248.bezierCurveTo(p855 * 74, p855 * 175, p855 * 82, p855 * 169, p855 * 96, p855 * 155);
    v1248.bezierCurveTo(p855 * 103, p855 * 183, p855 * 95, p855 * 214, p855 * 54, p855 * 219);
    v1248.closePath();
    f88(v1248, p857[3], p857[4], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 50, p855 * 176);
    v1248.bezierCurveTo(p855 * 25, p855 * 177, p855 * 16, p855 * 164, p855 * 7, p855 * 156);
    v1248.bezierCurveTo(p855 * 0, p855 * 186, p855 * 10, p855 * 201, p855 * 43, p855 * 220);
    v1248.closePath();
    f88(v1248, p857[3], p857[4], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 59, p855 * 67);
    v1248.bezierCurveTo(p855 * 47, p855 * 97, p855 * 18, p855 * 117, p855 * 11, p855 * 110);
    v1248.bezierCurveTo(p855 * 11, p855 * 115, p855 * 15, p855 * 122, p855 * 23, p855 * 124);
    v1248.bezierCurveTo(p855 * 46, p855 * 118, p855 * 52, p855 * 113, p855 * 62, p855 * 86);
    v1248.closePath();
    f88(v1248, p857[7], p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 30, p855 * 125);
    v1248.bezierCurveTo(p855 * 47, p855 * 136, p855 * 57, p855 * 134, p855 * 77, p855 * 127);
    v1248.bezierCurveTo(p855 * 71, p855 * 158, p855 * 71, p855 * 159, p855 * 66, p855 * 159);
    v1248.bezierCurveTo(p855 * 50.5, p855 * 156.5, p855 * 50.5, p855 * 156.5, p855 * 35, p855 * 154);
    v1248.bezierCurveTo(p855 * 31, p855 * 145, p855 * 31, p855 * 136, p855 * 31, p855 * 125);
    v1248.closePath();
    f88(v1248, p857[7], p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 35, p855 * 171);
    v1248.bezierCurveTo(p855 * 32, p855 * 221, p855 * 43, p855 * 233, p855 * 70, p855 * 247);
    v1248.bezierCurveTo(p855 * 75, p855 * 234, p855 * 75, p855 * 230, p855 * 72, p855 * 221);
    v1248.bezierCurveTo(p855 * 48, p855 * 206, p855 * 54, p855 * 188, p855 * 50, p855 * 176);
    v1248.closePath();
    f88(v1248, p857[7], p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 60, p855 * 68);
    v1248.bezierCurveTo(p855 * 63, p855 * 69, p855 * 65, p855 * 71, p855 * 67, p855 * 77);
    v1248.bezierCurveTo(p855 * 61, p855 * 123, p855 * 52, p855 * 137, p855 * 42, p855 * 150);
    v1248.bezierCurveTo(p855 * 38, p855 * 151, p855 * 38, p855 * 151, p855 * 34, p855 * 152);
    v1248.bezierCurveTo(p855 * 33, p855 * 146.5, p855 * 33, p855 * 146.5, p855 * 32, p855 * 141);
    v1248.bezierCurveTo(p855 * 49, p855 * 118, p855 * 63, p855 * 87, p855 * 59, p855 * 68);
    v1248.closePath();
    f88(v1248, p857[7], p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 71, p855 * 172);
    v1248.bezierCurveTo(p855 * 56, p855 * 222, p855 * 49, p855 * 234, p855 * 35, p855 * 248);
    v1248.bezierCurveTo(p855 * 30, p855 * 236, p855 * 30, p855 * 230, p855 * 31, p855 * 217);
    v1248.bezierCurveTo(p855 * 44, p855 * 202, p855 * 49, p855 * 191, p855 * 52, p855 * 172);
    v1248.closePath();
    f88(v1248, p857[7], p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 35, p855 * 151);
    v1248.bezierCurveTo(p855 * 27, p855 * 165, p855 * 31, p855 * 173, p855 * 36, p855 * 178);
    v1248.bezierCurveTo(p855 * 56, p855 * 185, p855 * 73, p855 * 184, p855 * 71, p855 * 170);
    v1248.bezierCurveTo(p855 * 72, p855 * 154, p855 * 71, p855 * 154, p855 * 63, p855 * 155);
    v1248.closePath();
    f88(v1248, p857[7], p857[8], p855 * 6);
    v1248.beginPath();
    v1248.lineCap = "round";
    v1248.lineJoin = "round";
    v1248.moveTo(p855 * 53, p855 * 113);
    v1248.bezierCurveTo(p855 * 65, p855 * 140, p855 * 75, p855 * 166, p855 * 52, p855 * 169);
    v1248.bezierCurveTo(p855 * 29, p855 * 168, p855 * 41, p855 * 143, p855 * 53, p855 * 112);
    v1248.closePath();
    f88(v1248, p857[3], p857[4], p855 * 6);
    return v1247;
  }
  function f205(p858, p859, p860) {
    var v1249 = document.createElement("canvas");
    var v1250 = v1249.getContext("2d");
    v1249.width = p858 * 450;
    v1249.height = p858 * 260;
    v1250.translate(p858 * 10, p858 * 10);
    v1250.globalAlpha = p859 ? 0.5 : 1;
    v1250.translate(p858 * 20, p858 * 20);
    f86(v1250, 0, 0, p858 * 400, p858 * 220, p858 * 30);
    f88(v1250, p860[0]);
    v1250.globalAlpha = 1;
    v1250.translate(p858 * -20, p858 * -20);
    v1250.beginPath();
    v1250.lineCap = "round";
    v1250.lineJoin = "round";
    v1250.moveTo(p858 * 9, p858 * 5);
    v1250.bezierCurveTo(p858 * 381, p858 * 2, p858 * 197, p858 * 4.5, p858 * 385, p858 * 4);
    v1250.bezierCurveTo(p858 * 397, p858 * 4, p858 * 401, p858 * 4, p858 * 399, p858 * 23);
    v1250.bezierCurveTo(p858 * 367, p858 * 27, p858 * 367, p858 * 27, p858 * 335, p858 * 31);
    v1250.bezierCurveTo(p858 * 366.5, p858 * 33.5, p858 * 366.5, p858 * 33.5, p858 * 398, p858 * 36);
    v1250.bezierCurveTo(p858 * 398, p858 * 41.5, p858 * 398, p858 * 41.5, p858 * 398, p858 * 47);
    v1250.bezierCurveTo(p858 * 398, p858 * 56, p858 * 399, p858 * 56, p858 * 386, p858 * 56);
    v1250.bezierCurveTo(p858 * 200.5, p858 * 56.5, p858 * 200.5, p858 * 56.5, p858 * 15, p858 * 57);
    v1250.bezierCurveTo(p858 * 2, p858 * 55, p858 * 4, p858 * 52, p858 * 4, p858 * 43);
    v1250.bezierCurveTo(p858 * 4, p858 * 30.5, p858 * 4, p858 * 30.5, p858 * 4, p858 * 18);
    v1250.bezierCurveTo(p858 * 16, p858 * 18.5, p858 * 16, p858 * 18.5, p858 * 28, p858 * 19);
    v1250.bezierCurveTo(p858 * 18.5, p858 * 12, p858 * 18.5, p858 * 12, p858 * 9, p858 * 5);
    v1250.closePath();
    f88(v1250, p860[2], p860[1], p858 * 12);
    v1250.beginPath();
    v1250.lineCap = "round";
    v1250.lineJoin = "round";
    v1250.moveTo(p858 * 5, p858 * 70);
    v1250.bezierCurveTo(p858 * 5, p858 * 58, p858 * 5, p858 * 55, p858 * 17, p858 * 57);
    v1250.bezierCurveTo(p858 * 203, p858 * 57, p858 * 203, p858 * 57, p858 * 389, p858 * 57);
    v1250.bezierCurveTo(p858 * 400, p858 * 57, p858 * 400, p858 * 59, p858 * 400, p858 * 69);
    v1250.bezierCurveTo(p858 * 400.5, p858 * 83.5, p858 * 400.5, p858 * 83.5, p858 * 401, p858 * 98);
    v1250.bezierCurveTo(p858 * 402, p858 * 108, p858 * 401, p858 * 108, p858 * 388, p858 * 108);
    v1250.bezierCurveTo(p858 * 201.5, p858 * 108, p858 * 201.5, p858 * 108, p858 * 15, p858 * 108);
    v1250.bezierCurveTo(p858 * 1, p858 * 106, p858 * 5, p858 * 106, p858 * 5, p858 * 87);
    v1250.bezierCurveTo(p858 * 33, p858 * 84.5, p858 * 33, p858 * 84.5, p858 * 61, p858 * 82);
    v1250.bezierCurveTo(p858 * 33.5, p858 * 76.5, p858 * 33.5, p858 * 76.5, p858 * 6, p858 * 71);
    v1250.closePath();
    f88(v1250, p860[3], p860[1], p858 * 12);
    v1250.beginPath();
    v1250.lineCap = "round";
    v1250.lineJoin = "round";
    v1250.moveTo(p858 * 19, p858 * 158);
    v1250.bezierCurveTo(p858 * 2, p858 * 159, p858 * 4, p858 * 156, p858 * 5, p858 * 118);
    v1250.bezierCurveTo(p858 * 4, p858 * 110, p858 * 6, p858 * 107, p858 * 26, p858 * 109);
    v1250.bezierCurveTo(p858 * 206.5, p858 * 109, p858 * 206.5, p858 * 109, p858 * 387, p858 * 109);
    v1250.bezierCurveTo(p858 * 400, p858 * 108, p858 * 400, p858 * 108, p858 * 398, p858 * 127);
    v1250.bezierCurveTo(p858 * 384.5, p858 * 130, p858 * 384.5, p858 * 130, p858 * 371, p858 * 133);
    v1250.bezierCurveTo(p858 * 385.5, p858 * 138, p858 * 385.5, p858 * 138, p858 * 400, p858 * 143);
    v1250.bezierCurveTo(p858 * 402, p858 * 156, p858 * 402, p858 * 162, p858 * 385, p858 * 160);
    v1250.closePath();
    f88(v1250, p860[2], p860[1], p858 * 12);
    v1250.beginPath();
    v1250.lineCap = "round";
    v1250.lineJoin = "round";
    v1250.moveTo(p858 * 4, p858 * 183);
    v1250.bezierCurveTo(p858 * 1, p858 * 163, p858 * 4, p858 * 158, p858 * 28, p858 * 161);
    v1250.bezierCurveTo(p858 * 207.5, p858 * 161, p858 * 207.5, p858 * 161, p858 * 387, p858 * 161);
    v1250.bezierCurveTo(p858 * 401, p858 * 159, p858 * 400, p858 * 164, p858 * 400, p858 * 177);
    v1250.bezierCurveTo(p858 * 364.5, p858 * 184, p858 * 364.5, p858 * 184, p858 * 329, p858 * 191);
    v1250.bezierCurveTo(p858 * 364.5, p858 * 192.5, p858 * 364.5, p858 * 192.5, p858 * 400, p858 * 194);
    v1250.bezierCurveTo(p858 * 403, p858 * 209, p858 * 401, p858 * 214, p858 * 385, p858 * 213);
    v1250.bezierCurveTo(p858 * 201.5, p858 * 213, p858 * 201.5, p858 * 213, p858 * 18, p858 * 213);
    v1250.bezierCurveTo(p858 * 3, p858 * 213, p858 * 2, p858 * 213, p858 * 4, p858 * 198);
    v1250.bezierCurveTo(p858 * 12.5, p858 * 193, p858 * 12.5, p858 * 193, p858 * 21, p858 * 188);
    v1250.closePath();
    f88(v1250, p860[3], p860[1], p858 * 12);
    f92(v1250, p858 * 41, p858 * 30, p858 * 14.7648230602334);
    f88(v1250, p860[3], p860[1], p858 * 12);
    f92(v1250, p858 * 369, p858 * 30, p858 * 15.556349186104045);
    f88(v1250, p860[3], p860[1], p858 * 12);
    f92(v1250, p858 * 364, p858 * 190, p858 * 15.620499351813308);
    f88(v1250, p860[3], p860[1], p858 * 12);
    f92(v1250, p858 * 41, p858 * 186, p858 * 15.556349186104045);
    f88(v1250, p860[3], p860[1], p858 * 12);
    return v1249;
  }
  function f206(p861, p862, p863) {
    var v1251 = (v1252 = document.createElement("canvas")).getContext("2d");
    if (p863 == 0) {
      v1252.width = p861 * 566;
      v1252.height = p861 * 429;
      v1251.beginPath();
      v1251.lineCap = "round";
      v1251.lineJoin = "round";
      v1251.moveTo(p861 * 312.625, p861 * 39.046875);
      v1251.bezierCurveTo(p861 * 456.625, p861 * 60.046875, p861 * 521.625, p861 * 134.046875, p861 * 528.625, p861 * 199.046875);
      v1251.bezierCurveTo(p861 * 540.625, p861 * 298.046875, p861 * 491.625, p861 * 364.046875, p861 * 405.625, p861 * 394.046875);
      v1251.bezierCurveTo(p861 * 270.625, p861 * 429.046875, p861 * 182.625, p861 * 395.046875, p861 * 100.625, p861 * 344.046875);
      v1251.bezierCurveTo(p861 * 15.625, p861 * 283.046875, p861 * 20.625, p861 * 195.046875, p861 * 33.625, p861 * 158.046875);
      v1251.bezierCurveTo(p861 * 56.625, p861 * 80.046875, p861 * 102.625, p861 * 46.046875, p861 * 183.625, p861 * 33.046875);
      v1251.bezierCurveTo(p861 * 225.625, p861 * 25.046875, p861 * 270.625, p861 * 30.046875, p861 * 312.625, p861 * 39.046875);
      v1251.closePath();
      f88(v1251, p862[0]);
    } else if (p863 == 1) {
      v1251 = (v1252 = document.createElement("canvas")).getContext("2d");
      v1252.width = p861 * 511;
      v1252.height = p861 * 408;
      v1251.beginPath();
      v1251.lineCap = "round";
      v1251.lineJoin = "round";
      v1251.moveTo(p861 * 141.625, p861 * 49.296875);
      v1251.bezierCurveTo(p861 * 225.625, p861 * 10.296875, p861 * 320.625, p861 * 16.296875, p861 * 390.625, p861 * 39.296875);
      v1251.bezierCurveTo(p861 * 476.625, p861 * 71.296875, p861 * 483.625, p861 * 142.296875, p861 * 486.625, p861 * 197.296875);
      v1251.bezierCurveTo(p861 * 491.625, p861 * 289.296875, p861 * 462.625, p861 * 317.296875, p861 * 417.625, p861 * 351.296875);
      v1251.bezierCurveTo(p861 * 367.625, p861 * 385.296875, p861 * 313.625, p861 * 404.296875, p861 * 218.625, p861 * 395.296875);
      v1251.bezierCurveTo(p861 * 108.625, p861 * 381.296875, p861 * 81.625, p861 * 350.296875, p861 * 52.625, p861 * 305.296875);
      v1251.bezierCurveTo(p861 * 16.625, p861 * 244.296875, p861 * 23.625, p861 * 171.296875, p861 * 37.625, p861 * 145.296875);
      v1251.bezierCurveTo(p861 * 65.625, p861 * 84.296875, p861 * 97.625, p861 * 74.296875, p861 * 141.625, p861 * 49.296875);
      v1251.closePath();
      f88(v1251, p862[0]);
    } else if (p863 == 2) {
      var v1252;
      v1251 = (v1252 = document.createElement("canvas")).getContext("2d");
      v1252.width = p861 * 504;
      v1252.height = p861 * 408;
      v1251.beginPath();
      v1251.lineCap = "round";
      v1251.lineJoin = "round";
      v1251.moveTo(p861 * 153.625, p861 * 46.296875);
      v1251.bezierCurveTo(p861 * 271.625, p861 * 17.296875, p861 * 345.625, p861 * 35.296875, p861 * 410.625, p861 * 71.296875);
      v1251.bezierCurveTo(p861 * 473.625, p861 * 109.296875, p861 * 478.625, p861 * 167.296875, p861 * 473.625, p861 * 205.296875);
      v1251.bezierCurveTo(p861 * 462.625, p861 * 295.296875, p861 * 438.625, p861 * 316.296875, p861 * 388.625, p861 * 345.296875);
      v1251.bezierCurveTo(p861 * 331.625, p861 * 374.296875, p861 * 273.625, p861 * 392.296875, p861 * 180.625, p861 * 387.296875);
      v1251.bezierCurveTo(p861 * 111.625, p861 * 380.296875, p861 * 86.625, p861 * 360.296875, p861 * 51.625, p861 * 309.296875);
      v1251.bezierCurveTo(p861 * 23.625, p861 * 267.296875, p861 * 25.625, p861 * 226.296875, p861 * 27.625, p861 * 175.296875);
      v1251.bezierCurveTo(p861 * 37.625, p861 * 99.296875, p861 * 88.625, p861 * 57.296875, p861 * 153.625, p861 * 46.296875);
      v1251.closePath();
      f88(v1251, p862[0]);
    }
    return v1252;
  }
  function f207(p864, p865, p866) {
    var v1253 = document.createElement("canvas");
    var v1254 = v1253.getContext("2d");
    v1253.width = p864 * 69;
    v1253.height = p864 * 120;
    v1254.globalAlpha = p865 ? 0.5 : 1;
    v1254.save();
    v1254.translate(p864 * 30, p864 * 84);
    f86(v1254, p864 * -6, p864 * -66.5, p864 * 8, p864 * 100, p864 * 10);
    v1254.restore();
    f88(v1254, p866[0]);
    v1254.save();
    v1254.translate(p864 * 30, p864 * 45);
    f86(v1254, p864 * -9.5, p864 * -6.5, p864 * 16, p864 * 13, p864 * 10);
    v1254.restore();
    f88(v1254, p866[0]);
    v1254.save();
    v1254.translate(p864 * 30, p864 * 17);
    f86(v1254, p864 * -7.5, p864 * -5.5, p864 * 12, p864 * 11, p864 * 10);
    v1254.restore();
    f88(v1254, p866[0]);
    v1254.save();
    v1254.translate(p864 * 30, p864 * 31);
    f86(v1254, p864 * -26, p864 * -14.5, p864 * 52, p864 * 29, p864 * 5);
    v1254.restore();
    f88(v1254, p866[0]);
    v1254.globalAlpha = 1;
    v1254.save();
    v1254.translate(p864 * 36, p864 * 79.140625);
    f86(v1254, p864 * -6, p864 * -66.5, p864 * 8, p864 * 100, p864 * 10);
    v1254.restore();
    f88(v1254, p866[1], p866[2], p864 * 3);
    v1254.save();
    v1254.translate(p864 * 35, p864 * 40.140625);
    f86(v1254, p864 * -9.5, p864 * -6.5, p864 * 16, p864 * 13, p864 * 10);
    v1254.restore();
    f88(v1254, p866[3], p866[4], p864 * 3);
    v1254.save();
    v1254.translate(p864 * 35, p864 * 12.140625);
    f86(v1254, p864 * -7.5, p864 * -5.5, p864 * 12, p864 * 11, p864 * 10);
    v1254.restore();
    f88(v1254, p866[3], p866[4], p864 * 3);
    v1254.save();
    v1254.translate(p864 * 34.5, p864 * 26.140625);
    f86(v1254, p864 * -26, p864 * -14.5, p864 * 52, p864 * 29, p864 * 5);
    v1254.restore();
    f88(v1254, p866[3], p866[4], p864 * 3);
    return v1253;
  }
  function f208(p867, p868) {
    var v1255 = document.createElement("canvas");
    var v1256 = v1255.getContext("2d");
    v1255.width = p867 * 120;
    v1255.height = p867 * 300;
    v1256.translate(p867 * -200, p867 * -40);
    v1256.beginPath();
    v1256.lineCap = "round";
    v1256.lineJoin = "round";
    v1256.moveTo(p867 * 344, p867 * 18.40625);
    v1256.bezierCurveTo(p867 * 345, p867 * 361.40625, p867 * 344, p867 * 191.40625, p867 * 344, p867 * 364.40625);
    v1256.bezierCurveTo(p867 * 261, p867 * 275.40625, p867 * 274, p867 * 259.40625, p867 * 229, p867 * 213.40625);
    v1256.bezierCurveTo(p867 * 199, p867 * 187.40625, p867 * 222, p867 * 133.40625, p867 * 273, p867 * 100.40625);
    v1256.bezierCurveTo(p867 * 321, p867 * 71.40625, p867 * 327, p867 * 34.40625, p867 * 344, p867 * 18.40625);
    v1256.closePath();
    f88(v1256, p868[0]);
    v1256.beginPath();
    v1256.lineCap = "round";
    v1256.lineJoin = "round";
    v1256.moveTo(p867 * 335, p867 * 38.072906494140625);
    v1256.bezierCurveTo(p867 * 307, p867 * 62.072906494140625, p867 * 291, p867 * 60.072906494140625, p867 * 262, p867 * 68.07290649414062);
    v1256.bezierCurveTo(p867 * 223, p867 * 80.07290649414062, p867 * 225, p867 * 111.07290649414062, p867 * 264, p867 * 139.07290649414062);
    v1256.closePath();
    f88(v1256, p868[0]);
    return v1255;
  }
  function f209(p869, p870) {
    var v1257 = document.createElement("canvas");
    var v1258 = v1257.getContext("2d");
    v1257.width = p869 * 161;
    v1257.height = p869 * 190;
    v1258.globalAlpha = 0.5;
    v1258.translate(0, 8);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 9, p869 * 93);
    v1258.bezierCurveTo(p869 * 17, p869 * 95, p869 * 19, p869 * 95, p869 * 21, p869 * 95);
    v1258.bezierCurveTo(p869 * 9, p869 * 83, p869 * 17, p869 * 93, p869 * 4, p869 * 76);
    v1258.bezierCurveTo(p869 * 11, p869 * 75, p869 * 11, p869 * 75, p869 * 18, p869 * 75);
    v1258.bezierCurveTo(p869 * 13, p869 * 67, p869 * 13, p869 * 67, p869 * 7, p869 * 59);
    v1258.bezierCurveTo(p869 * 14, p869 * 59, p869 * 14, p869 * 59, p869 * 21, p869 * 59);
    v1258.bezierCurveTo(p869 * 46, p869 * 35, p869 * 35, p869 * 45, p869 * 49, p869 * 31);
    v1258.bezierCurveTo(p869 * 53, p869 * 24, p869 * 51, p869 * 21, p869 * 51, p869 * 16);
    v1258.bezierCurveTo(p869 * 63, p869 * 23, p869 * 63, p869 * 24, p869 * 69, p869 * 29);
    v1258.bezierCurveTo(p869 * 76, p869 * 7, p869 * 75, p869 * 11, p869 * 76, p869 * 6);
    v1258.bezierCurveTo(p869 * 81, p869 * 12, p869 * 84, p869 * 18, p869 * 89, p869 * 27);
    v1258.bezierCurveTo(p869 * 95, p869 * 25, p869 * 100, p869 * 16, p869 * 105, p869 * 14);
    v1258.bezierCurveTo(p869 * 103, p869 * 25, p869 * 111, p869 * 33, p869 * 110, p869 * 34);
    v1258.bezierCurveTo(p869 * 123, p869 * 48, p869 * 123, p869 * 48, p869 * 136, p869 * 62);
    v1258.bezierCurveTo(p869 * 142, p869 * 60, p869 * 147, p869 * 59, p869 * 155, p869 * 58);
    v1258.bezierCurveTo(p869 * 147, p869 * 65, p869 * 147, p869 * 65, p869 * 139, p869 * 73);
    v1258.bezierCurveTo(p869 * 145, p869 * 73, p869 * 145, p869 * 73, p869 * 151, p869 * 73);
    v1258.bezierCurveTo(p869 * 145, p869 * 80, p869 * 145, p869 * 80, p869 * 138, p869 * 87);
    v1258.bezierCurveTo(p869 * 144, p869 * 88, p869 * 144, p869 * 88, p869 * 150, p869 * 89);
    v1258.bezierCurveTo(p869 * 125, p869 * 103, p869 * 125, p869 * 125, p869 * 113, p869 * 141);
    v1258.bezierCurveTo(p869 * 92, p869 * 178, p869 * 85, p869 * 177, p869 * 76, p869 * 178);
    v1258.bezierCurveTo(p869 * 64, p869 * 179, p869 * 51, p869 * 164, p869 * 35, p869 * 131);
    v1258.bezierCurveTo(p869 * 18, p869 * 95, p869 * 13, p869 * 99, p869 * 8, p869 * 93);
    v1258.closePath();
    f88(v1258, p870[0]);
    v1258.globalAlpha = 1;
    v1258.translate(0, -8);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 9, p869 * 93);
    v1258.bezierCurveTo(p869 * 17, p869 * 95, p869 * 19, p869 * 95, p869 * 21, p869 * 95);
    v1258.bezierCurveTo(p869 * 9, p869 * 83, p869 * 17, p869 * 93, p869 * 4, p869 * 76);
    v1258.bezierCurveTo(p869 * 11, p869 * 75, p869 * 11, p869 * 75, p869 * 18, p869 * 75);
    v1258.bezierCurveTo(p869 * 13, p869 * 67, p869 * 13, p869 * 67, p869 * 7, p869 * 59);
    v1258.bezierCurveTo(p869 * 14, p869 * 59, p869 * 14, p869 * 59, p869 * 21, p869 * 59);
    v1258.bezierCurveTo(p869 * 46, p869 * 35, p869 * 35, p869 * 45, p869 * 49, p869 * 31);
    v1258.bezierCurveTo(p869 * 53, p869 * 24, p869 * 51, p869 * 21, p869 * 51, p869 * 16);
    v1258.bezierCurveTo(p869 * 63, p869 * 23, p869 * 63, p869 * 24, p869 * 69, p869 * 29);
    v1258.bezierCurveTo(p869 * 76, p869 * 7, p869 * 75, p869 * 11, p869 * 76, p869 * 6);
    v1258.bezierCurveTo(p869 * 81, p869 * 12, p869 * 84, p869 * 18, p869 * 89, p869 * 27);
    v1258.bezierCurveTo(p869 * 95, p869 * 25, p869 * 100, p869 * 16, p869 * 105, p869 * 14);
    v1258.bezierCurveTo(p869 * 103, p869 * 25, p869 * 111, p869 * 33, p869 * 110, p869 * 34);
    v1258.bezierCurveTo(p869 * 123, p869 * 48, p869 * 123, p869 * 48, p869 * 136, p869 * 62);
    v1258.bezierCurveTo(p869 * 142, p869 * 60, p869 * 147, p869 * 59, p869 * 155, p869 * 58);
    v1258.bezierCurveTo(p869 * 147, p869 * 65, p869 * 147, p869 * 65, p869 * 139, p869 * 73);
    v1258.bezierCurveTo(p869 * 145, p869 * 73, p869 * 145, p869 * 73, p869 * 151, p869 * 73);
    v1258.bezierCurveTo(p869 * 145, p869 * 80, p869 * 145, p869 * 80, p869 * 138, p869 * 87);
    v1258.bezierCurveTo(p869 * 144, p869 * 88, p869 * 144, p869 * 88, p869 * 150, p869 * 89);
    v1258.bezierCurveTo(p869 * 125, p869 * 103, p869 * 125, p869 * 125, p869 * 113, p869 * 141);
    v1258.bezierCurveTo(p869 * 92, p869 * 178, p869 * 85, p869 * 177, p869 * 76, p869 * 178);
    v1258.bezierCurveTo(p869 * 64, p869 * 179, p869 * 51, p869 * 164, p869 * 35, p869 * 131);
    v1258.bezierCurveTo(p869 * 18, p869 * 95, p869 * 13, p869 * 99, p869 * 8, p869 * 93);
    v1258.closePath();
    f88(v1258, p870[1]);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 28, p869 * 63);
    v1258.bezierCurveTo(p869 * 23, p869 * 54, p869 * 24, p869 * 47, p869 * 26, p869 * 37);
    v1258.bezierCurveTo(p869 * 28, p869 * 29, p869 * 31, p869 * 31, p869 * 41, p869 * 35);
    v1258.bezierCurveTo(p869 * 52, p869 * 45, p869 * 55, p869 * 51, p869 * 57, p869 * 53);
    v1258.bezierCurveTo(p869 * 50, p869 * 50, p869 * 44, p869 * 47, p869 * 43, p869 * 48);
    v1258.bezierCurveTo(p869 * 43, p869 * 52, p869 * 43, p869 * 52, p869 * 42, p869 * 57);
    v1258.bezierCurveTo(p869 * 38, p869 * 54, p869 * 38, p869 * 54, p869 * 33, p869 * 51);
    v1258.bezierCurveTo(p869 * 34, p869 * 56, p869 * 34, p869 * 56, p869 * 34, p869 * 61);
    v1258.closePath();
    f88(v1258, p870[3]);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 99, p869 * 55);
    v1258.bezierCurveTo(p869 * 107, p869 * 43, p869 * 113, p869 * 39, p869 * 121, p869 * 34);
    v1258.bezierCurveTo(p869 * 130, p869 * 29, p869 * 130, p869 * 34, p869 * 130, p869 * 42);
    v1258.bezierCurveTo(p869 * 131, p869 * 57, p869 * 128, p869 * 61, p869 * 129, p869 * 63);
    v1258.bezierCurveTo(p869 * 124, p869 * 62, p869 * 124, p869 * 62, p869 * 119, p869 * 61);
    v1258.bezierCurveTo(p869 * 119, p869 * 56, p869 * 120, p869 * 61, p869 * 118, p869 * 52);
    v1258.bezierCurveTo(p869 * 115, p869 * 55, p869 * 111, p869 * 59, p869 * 111, p869 * 58);
    v1258.bezierCurveTo(p869 * 110, p869 * 54, p869 * 109, p869 * 57, p869 * 109, p869 * 51);
    v1258.closePath();
    f88(v1258, p870[3]);
    f92(v1258, p869 * 103, p869 * 110, p869 * 11);
    f88(v1258, p870[4]);
    f92(v1258, p869 * 55, p869 * 111, p869 * 11);
    f88(v1258, p870[4]);
    f92(v1258, p869 * 99, p869 * 107, p869 * 5);
    f88(v1258, p870[1]);
    f92(v1258, p869 * 51, p869 * 108, p869 * 5);
    f88(v1258, p870[1]);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 31, p869 * 121);
    v1258.bezierCurveTo(p869 * 45, p869 * 128, p869 * 51, p869 * 133, p869 * 53, p869 * 141);
    v1258.bezierCurveTo(p869 * 59, p869 * 161, p869 * 70, p869 * 173, p869 * 80, p869 * 169);
    v1258.bezierCurveTo(p869 * 89, p869 * 172, p869 * 99, p869 * 149, p869 * 107, p869 * 133);
    v1258.bezierCurveTo(p869 * 114, p869 * 122, p869 * 119, p869 * 123, p869 * 124, p869 * 119);
    v1258.bezierCurveTo(p869 * 109, p869 * 148, p869 * 117, p869 * 133, p869 * 109, p869 * 147);
    v1258.bezierCurveTo(p869 * 87, p869 * 180, p869 * 84, p869 * 179, p869 * 76, p869 * 178);
    v1258.bezierCurveTo(p869 * 49, p869 * 173, p869 * 44, p869 * 149, p869 * 31, p869 * 121);
    v1258.closePath();
    f88(v1258, p870[5]);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.translate(-2, 0);
    v1258.moveTo(p869 * 71, p869 * 162);
    v1258.bezierCurveTo(p869 * 80, p869 * 155, p869 * 85, p869 * 159, p869 * 89, p869 * 164);
    v1258.bezierCurveTo(p869 * 90, p869 * 171, p869 * 86, p869 * 173, p869 * 79, p869 * 173);
    v1258.bezierCurveTo(p869 * 67, p869 * 172, p869 * 67, p869 * 168, p869 * 71, p869 * 162);
    v1258.closePath();
    f88(v1258, p870[3]);
    v1258.translate(2, 0);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 9, p869 * 93);
    v1258.bezierCurveTo(p869 * 17, p869 * 95, p869 * 19, p869 * 95, p869 * 21, p869 * 95);
    v1258.bezierCurveTo(p869 * 9, p869 * 83, p869 * 17, p869 * 93, p869 * 4, p869 * 76);
    v1258.bezierCurveTo(p869 * 11, p869 * 75, p869 * 11, p869 * 75, p869 * 18, p869 * 75);
    v1258.bezierCurveTo(p869 * 13, p869 * 67, p869 * 13, p869 * 67, p869 * 7, p869 * 59);
    v1258.bezierCurveTo(p869 * 14, p869 * 59, p869 * 14, p869 * 59, p869 * 21, p869 * 59);
    v1258.bezierCurveTo(p869 * 46, p869 * 35, p869 * 35, p869 * 45, p869 * 49, p869 * 31);
    v1258.bezierCurveTo(p869 * 53, p869 * 24, p869 * 51, p869 * 21, p869 * 51, p869 * 16);
    v1258.bezierCurveTo(p869 * 63, p869 * 23, p869 * 63, p869 * 24, p869 * 69, p869 * 29);
    v1258.bezierCurveTo(p869 * 76, p869 * 7, p869 * 75, p869 * 11, p869 * 76, p869 * 6);
    v1258.bezierCurveTo(p869 * 81, p869 * 12, p869 * 84, p869 * 18, p869 * 89, p869 * 27);
    v1258.bezierCurveTo(p869 * 95, p869 * 25, p869 * 100, p869 * 16, p869 * 105, p869 * 14);
    v1258.bezierCurveTo(p869 * 103, p869 * 25, p869 * 111, p869 * 33, p869 * 110, p869 * 34);
    v1258.bezierCurveTo(p869 * 123, p869 * 48, p869 * 123, p869 * 48, p869 * 136, p869 * 62);
    v1258.bezierCurveTo(p869 * 142, p869 * 60, p869 * 147, p869 * 59, p869 * 155, p869 * 58);
    v1258.bezierCurveTo(p869 * 147, p869 * 65, p869 * 147, p869 * 65, p869 * 139, p869 * 73);
    v1258.bezierCurveTo(p869 * 145, p869 * 73, p869 * 145, p869 * 73, p869 * 151, p869 * 73);
    v1258.bezierCurveTo(p869 * 145, p869 * 80, p869 * 145, p869 * 80, p869 * 138, p869 * 87);
    v1258.bezierCurveTo(p869 * 144, p869 * 88, p869 * 144, p869 * 88, p869 * 150, p869 * 89);
    v1258.bezierCurveTo(p869 * 125, p869 * 103, p869 * 125, p869 * 125, p869 * 113, p869 * 141);
    v1258.bezierCurveTo(p869 * 92, p869 * 178, p869 * 85, p869 * 177, p869 * 76, p869 * 178);
    v1258.bezierCurveTo(p869 * 64, p869 * 179, p869 * 51, p869 * 164, p869 * 35, p869 * 131);
    v1258.bezierCurveTo(p869 * 18, p869 * 95, p869 * 13, p869 * 99, p869 * 8, p869 * 93);
    v1258.closePath();
    f88(v1258, vVVUndefined5, p870[2], p869 * 4);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 25, p869 * 63);
    v1258.bezierCurveTo(p869 * 16, p869 * 58, p869 * 17, p869 * 51, p869 * 17, p869 * 33);
    v1258.bezierCurveTo(p869 * 19, p869 * 12, p869 * 21, p869 * 12, p869 * 32, p869 * 17);
    v1258.bezierCurveTo(p869 * 63, p869 * 31, p869 * 66, p869 * 45, p869 * 66, p869 * 54);
    f88(v1258, p870[1], p870[2], p869 * 4);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 91, p869 * 53);
    v1258.bezierCurveTo(p869 * 91, p869 * 40, p869 * 98, p869 * 33, p869 * 121, p869 * 20);
    v1258.bezierCurveTo(p869 * 137, p869 * 12, p869 * 137, p869 * 16, p869 * 139, p869 * 27);
    v1258.bezierCurveTo(p869 * 141, p869 * 49, p869 * 140, p869 * 57, p869 * 134, p869 * 64);
    f88(v1258, p870[1], p870[2], p869 * 4);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 31, p869 * 63);
    v1258.bezierCurveTo(p869 * 23, p869 * 54, p869 * 24, p869 * 47, p869 * 26, p869 * 37);
    v1258.bezierCurveTo(p869 * 28, p869 * 29, p869 * 31, p869 * 31, p869 * 41, p869 * 35);
    v1258.bezierCurveTo(p869 * 52, p869 * 45, p869 * 55, p869 * 51, p869 * 57, p869 * 53);
    v1258.bezierCurveTo(p869 * 50, p869 * 50, p869 * 44, p869 * 47, p869 * 43, p869 * 48);
    v1258.bezierCurveTo(p869 * 43, p869 * 52, p869 * 43, p869 * 52, p869 * 42, p869 * 57);
    v1258.bezierCurveTo(p869 * 38, p869 * 54, p869 * 38, p869 * 54, p869 * 33, p869 * 51);
    v1258.bezierCurveTo(p869 * 34, p869 * 56, p869 * 34, p869 * 56, p869 * 34, p869 * 61);
    v1258.closePath();
    f88(v1258, p870[3]);
    v1258.beginPath();
    v1258.lineCap = "round";
    v1258.lineJoin = "round";
    v1258.moveTo(p869 * 99, p869 * 55);
    v1258.bezierCurveTo(p869 * 107, p869 * 43, p869 * 113, p869 * 39, p869 * 121, p869 * 34);
    v1258.bezierCurveTo(p869 * 130, p869 * 29, p869 * 130, p869 * 34, p869 * 130, p869 * 42);
    v1258.bezierCurveTo(p869 * 131, p869 * 57, p869 * 128, p869 * 61, p869 * 129, p869 * 63);
    v1258.bezierCurveTo(p869 * 124, p869 * 62, p869 * 124, p869 * 62, p869 * 119, p869 * 61);
    v1258.bezierCurveTo(p869 * 119, p869 * 56, p869 * 120, p869 * 61, p869 * 118, p869 * 52);
    v1258.bezierCurveTo(p869 * 115, p869 * 55, p869 * 111, p869 * 59, p869 * 111, p869 * 58);
    v1258.bezierCurveTo(p869 * 110, p869 * 54, p869 * 109, p869 * 57, p869 * 109, p869 * 51);
    v1258.closePath();
    f88(v1258, p870[3]);
    return v1257;
  }
  function f210(p871, p872, p873) {
    var v1259 = document.createElement("canvas");
    var v1260 = v1259.getContext("2d");
    v1259.width = p871 * 450;
    v1259.height = p871 * 260;
    v1260.translate(p871 * 10, p871 * 10);
    if (p873 == 1) {
      v1260.beginPath();
      v1260.lineCap = "round";
      v1260.lineJoin = "round";
      v1260.moveTo(p871 * 9, p871 * 5);
      v1260.bezierCurveTo(p871 * 381, p871 * 2, p871 * 197, p871 * 4.5, p871 * 385, p871 * 4);
      v1260.bezierCurveTo(p871 * 397, p871 * 4, p871 * 401, p871 * 4, p871 * 399, p871 * 23);
      v1260.bezierCurveTo(p871 * 367, p871 * 27, p871 * 367, p871 * 27, p871 * 335, p871 * 31);
      v1260.bezierCurveTo(p871 * 366.5, p871 * 33.5, p871 * 366.5, p871 * 33.5, p871 * 398, p871 * 36);
      v1260.bezierCurveTo(p871 * 398, p871 * 41.5, p871 * 398, p871 * 41.5, p871 * 398, p871 * 47);
      v1260.bezierCurveTo(p871 * 398, p871 * 56, p871 * 399, p871 * 56, p871 * 386, p871 * 56);
      v1260.bezierCurveTo(p871 * 200.5, p871 * 56.5, p871 * 200.5, p871 * 56.5, p871 * 15, p871 * 57);
      v1260.bezierCurveTo(p871 * 2, p871 * 55, p871 * 4, p871 * 52, p871 * 4, p871 * 43);
      v1260.bezierCurveTo(p871 * 4, p871 * 30.5, p871 * 4, p871 * 30.5, p871 * 4, p871 * 18);
      v1260.bezierCurveTo(p871 * 16, p871 * 18.5, p871 * 16, p871 * 18.5, p871 * 28, p871 * 19);
      v1260.bezierCurveTo(p871 * 18.5, p871 * 12, p871 * 18.5, p871 * 12, p871 * 9, p871 * 5);
      v1260.closePath();
      f88(v1260, p872[3], p872[3], p871 * 32);
      v1260.beginPath();
      v1260.lineCap = "round";
      v1260.lineJoin = "round";
      v1260.moveTo(p871 * 5, p871 * 70);
      v1260.bezierCurveTo(p871 * 5, p871 * 58, p871 * 5, p871 * 55, p871 * 17, p871 * 57);
      v1260.bezierCurveTo(p871 * 203, p871 * 57, p871 * 203, p871 * 57, p871 * 389, p871 * 57);
      v1260.bezierCurveTo(p871 * 400, p871 * 57, p871 * 400, p871 * 59, p871 * 400, p871 * 69);
      v1260.bezierCurveTo(p871 * 400.5, p871 * 83.5, p871 * 400.5, p871 * 83.5, p871 * 401, p871 * 98);
      v1260.bezierCurveTo(p871 * 402, p871 * 108, p871 * 401, p871 * 108, p871 * 388, p871 * 108);
      v1260.bezierCurveTo(p871 * 201.5, p871 * 108, p871 * 201.5, p871 * 108, p871 * 15, p871 * 108);
      v1260.bezierCurveTo(p871 * 1, p871 * 106, p871 * 5, p871 * 106, p871 * 5, p871 * 87);
      v1260.bezierCurveTo(p871 * 33, p871 * 84.5, p871 * 33, p871 * 84.5, p871 * 61, p871 * 82);
      v1260.bezierCurveTo(p871 * 33.5, p871 * 76.5, p871 * 33.5, p871 * 76.5, p871 * 6, p871 * 71);
      v1260.closePath();
      f88(v1260, p872[3], p872[3], p871 * 32);
      v1260.beginPath();
      v1260.lineCap = "round";
      v1260.lineJoin = "round";
      v1260.moveTo(p871 * 19, p871 * 158);
      v1260.bezierCurveTo(p871 * 2, p871 * 159, p871 * 4, p871 * 156, p871 * 5, p871 * 118);
      v1260.bezierCurveTo(p871 * 4, p871 * 110, p871 * 6, p871 * 107, p871 * 26, p871 * 109);
      v1260.bezierCurveTo(p871 * 206.5, p871 * 109, p871 * 206.5, p871 * 109, p871 * 387, p871 * 109);
      v1260.bezierCurveTo(p871 * 400, p871 * 108, p871 * 400, p871 * 108, p871 * 398, p871 * 127);
      v1260.bezierCurveTo(p871 * 384.5, p871 * 130, p871 * 384.5, p871 * 130, p871 * 371, p871 * 133);
      v1260.bezierCurveTo(p871 * 385.5, p871 * 138, p871 * 385.5, p871 * 138, p871 * 400, p871 * 143);
      v1260.bezierCurveTo(p871 * 402, p871 * 156, p871 * 402, p871 * 162, p871 * 385, p871 * 160);
      v1260.closePath();
      f88(v1260, p872[3], p872[3], p871 * 32);
      v1260.beginPath();
      v1260.lineCap = "round";
      v1260.lineJoin = "round";
      v1260.moveTo(p871 * 4, p871 * 183);
      v1260.bezierCurveTo(p871 * 1, p871 * 163, p871 * 4, p871 * 158, p871 * 28, p871 * 161);
      v1260.bezierCurveTo(p871 * 207.5, p871 * 161, p871 * 207.5, p871 * 161, p871 * 387, p871 * 161);
      v1260.bezierCurveTo(p871 * 401, p871 * 159, p871 * 400, p871 * 164, p871 * 400, p871 * 177);
      v1260.bezierCurveTo(p871 * 364.5, p871 * 184, p871 * 364.5, p871 * 184, p871 * 329, p871 * 191);
      v1260.bezierCurveTo(p871 * 364.5, p871 * 192.5, p871 * 364.5, p871 * 192.5, p871 * 400, p871 * 194);
      v1260.bezierCurveTo(p871 * 403, p871 * 209, p871 * 401, p871 * 214, p871 * 385, p871 * 213);
      v1260.bezierCurveTo(p871 * 201.5, p871 * 213, p871 * 201.5, p871 * 213, p871 * 18, p871 * 213);
      v1260.bezierCurveTo(p871 * 3, p871 * 213, p871 * 2, p871 * 213, p871 * 4, p871 * 198);
      v1260.bezierCurveTo(p871 * 12.5, p871 * 193, p871 * 12.5, p871 * 193, p871 * 21, p871 * 188);
      v1260.closePath();
      f88(v1260, p872[3], p872[3], p871 * 32);
      f92(v1260, p871 * 41, p871 * 30, p871 * 14.7648230602334);
      f88(v1260, p872[3], p872[3], p871 * 32);
      f92(v1260, p871 * 369, p871 * 30, p871 * 15.556349186104045);
      f88(v1260, p872[3], p872[3], p871 * 32);
      f92(v1260, p871 * 364, p871 * 190, p871 * 15.620499351813308);
      f88(v1260, p872[3], p872[3], p871 * 32);
      f92(v1260, p871 * 41, p871 * 186, p871 * 15.556349186104045);
      f88(v1260, p872[3], p872[3], p871 * 32);
    } else if (p873 == 2) {
      v1260.beginPath();
      v1260.lineCap = "round";
      v1260.lineJoin = "round";
      v1260.moveTo(p871 * 9, p871 * 5);
      v1260.bezierCurveTo(p871 * 381, p871 * 2, p871 * 197, p871 * 4.5, p871 * 385, p871 * 4);
      v1260.bezierCurveTo(p871 * 397, p871 * 4, p871 * 401, p871 * 4, p871 * 399, p871 * 23);
      v1260.bezierCurveTo(p871 * 367, p871 * 27, p871 * 367, p871 * 27, p871 * 335, p871 * 31);
      v1260.bezierCurveTo(p871 * 366.5, p871 * 33.5, p871 * 366.5, p871 * 33.5, p871 * 398, p871 * 36);
      v1260.bezierCurveTo(p871 * 398, p871 * 41.5, p871 * 398, p871 * 41.5, p871 * 398, p871 * 47);
      v1260.bezierCurveTo(p871 * 398, p871 * 56, p871 * 399, p871 * 56, p871 * 386, p871 * 56);
      v1260.bezierCurveTo(p871 * 200.5, p871 * 56.5, p871 * 200.5, p871 * 56.5, p871 * 15, p871 * 57);
      v1260.bezierCurveTo(p871 * 2, p871 * 55, p871 * 4, p871 * 52, p871 * 4, p871 * 43);
      v1260.bezierCurveTo(p871 * 4, p871 * 30.5, p871 * 4, p871 * 30.5, p871 * 4, p871 * 18);
      v1260.bezierCurveTo(p871 * 16, p871 * 18.5, p871 * 16, p871 * 18.5, p871 * 28, p871 * 19);
      v1260.bezierCurveTo(p871 * 18.5, p871 * 12, p871 * 18.5, p871 * 12, p871 * 9, p871 * 5);
      v1260.closePath();
      f88(v1260, p872[3], p872[3], p871 * 32);
      v1260.beginPath();
      v1260.lineCap = "round";
      v1260.lineJoin = "round";
      v1260.moveTo(p871 * 5, p871 * 70);
      v1260.bezierCurveTo(p871 * 5, p871 * 58, p871 * 5, p871 * 55, p871 * 17, p871 * 57);
      v1260.bezierCurveTo(p871 * 203, p871 * 57, p871 * 203, p871 * 57, p871 * 389, p871 * 57);
      v1260.bezierCurveTo(p871 * 400, p871 * 57, p871 * 400, p871 * 59, p871 * 400, p871 * 69);
      v1260.bezierCurveTo(p871 * 400.5, p871 * 83.5, p871 * 400.5, p871 * 83.5, p871 * 401, p871 * 98);
      v1260.bezierCurveTo(p871 * 402, p871 * 108, p871 * 401, p871 * 108, p871 * 388, p871 * 108);
      v1260.bezierCurveTo(p871 * 201.5, p871 * 108, p871 * 201.5, p871 * 108, p871 * 15, p871 * 108);
      v1260.bezierCurveTo(p871 * 1, p871 * 106, p871 * 5, p871 * 106, p871 * 5, p871 * 87);
      v1260.bezierCurveTo(p871 * 33, p871 * 84.5, p871 * 33, p871 * 84.5, p871 * 61, p871 * 82);
      v1260.bezierCurveTo(p871 * 33.5, p871 * 76.5, p871 * 33.5, p871 * 76.5, p871 * 6, p871 * 71);
      v1260.closePath();
      f88(v1260, p872[3], p872[3], p871 * 32);
      v1260.beginPath();
      v1260.lineCap = "round";
      v1260.lineJoin = "round";
      v1260.moveTo(p871 * 19, p871 * 158);
      v1260.bezierCurveTo(p871 * 2, p871 * 159, p871 * 4, p871 * 156, p871 * 5, p871 * 118);
      v1260.bezierCurveTo(p871 * 4, p871 * 110, p871 * 6, p871 * 107, p871 * 26, p871 * 109);
      v1260.bezierCurveTo(p871 * 206.5, p871 * 109, p871 * 206.5, p871 * 109, p871 * 387, p871 * 109);
      v1260.bezierCurveTo(p871 * 400, p871 * 108, p871 * 400, p871 * 108, p871 * 398, p871 * 127);
      v1260.bezierCurveTo(p871 * 384.5, p871 * 130, p871 * 384.5, p871 * 130, p871 * 371, p871 * 133);
      v1260.bezierCurveTo(p871 * 385.5, p871 * 138, p871 * 385.5, p871 * 138, p871 * 400, p871 * 143);
      v1260.bezierCurveTo(p871 * 402, p871 * 156, p871 * 402, p871 * 162, p871 * 385, p871 * 160);
      v1260.closePath();
      f88(v1260, p872[3], p872[3], p871 * 32);
      v1260.beginPath();
      v1260.lineCap = "round";
      v1260.lineJoin = "round";
      v1260.moveTo(p871 * 4, p871 * 183);
      v1260.bezierCurveTo(p871 * 1, p871 * 163, p871 * 4, p871 * 158, p871 * 28, p871 * 161);
      v1260.bezierCurveTo(p871 * 207.5, p871 * 161, p871 * 207.5, p871 * 161, p871 * 387, p871 * 161);
      v1260.bezierCurveTo(p871 * 401, p871 * 159, p871 * 400, p871 * 164, p871 * 400, p871 * 177);
      v1260.bezierCurveTo(p871 * 364.5, p871 * 184, p871 * 364.5, p871 * 184, p871 * 329, p871 * 191);
      v1260.bezierCurveTo(p871 * 364.5, p871 * 192.5, p871 * 364.5, p871 * 192.5, p871 * 400, p871 * 194);
      v1260.bezierCurveTo(p871 * 403, p871 * 209, p871 * 401, p871 * 214, p871 * 385, p871 * 213);
      v1260.bezierCurveTo(p871 * 201.5, p871 * 213, p871 * 201.5, p871 * 213, p871 * 18, p871 * 213);
      v1260.bezierCurveTo(p871 * 3, p871 * 213, p871 * 2, p871 * 213, p871 * 4, p871 * 198);
      v1260.bezierCurveTo(p871 * 12.5, p871 * 193, p871 * 12.5, p871 * 193, p871 * 21, p871 * 188);
      v1260.closePath();
      f88(v1260, p872[3], p872[3], p871 * 32);
      f92(v1260, p871 * 41, p871 * 30, p871 * 14.7648230602334);
      f88(v1260, p872[3], p872[3], p871 * 32);
      f92(v1260, p871 * 369, p871 * 30, p871 * 15.556349186104045);
      f88(v1260, p872[3], p872[3], p871 * 32);
      f92(v1260, p871 * 364, p871 * 190, p871 * 15.620499351813308);
      f88(v1260, p872[3], p872[3], p871 * 32);
      f92(v1260, p871 * 41, p871 * 186, p871 * 15.556349186104045);
      f88(v1260, p872[3], p872[3], p871 * 32);
    }
    v1260.beginPath();
    v1260.lineCap = "round";
    v1260.lineJoin = "round";
    v1260.moveTo(p871 * 9, p871 * 5);
    v1260.bezierCurveTo(p871 * 381, p871 * 2, p871 * 197, p871 * 4.5, p871 * 385, p871 * 4);
    v1260.bezierCurveTo(p871 * 397, p871 * 4, p871 * 401, p871 * 4, p871 * 399, p871 * 23);
    v1260.bezierCurveTo(p871 * 367, p871 * 27, p871 * 367, p871 * 27, p871 * 335, p871 * 31);
    v1260.bezierCurveTo(p871 * 366.5, p871 * 33.5, p871 * 366.5, p871 * 33.5, p871 * 398, p871 * 36);
    v1260.bezierCurveTo(p871 * 398, p871 * 41.5, p871 * 398, p871 * 41.5, p871 * 398, p871 * 47);
    v1260.bezierCurveTo(p871 * 398, p871 * 56, p871 * 399, p871 * 56, p871 * 386, p871 * 56);
    v1260.bezierCurveTo(p871 * 200.5, p871 * 56.5, p871 * 200.5, p871 * 56.5, p871 * 15, p871 * 57);
    v1260.bezierCurveTo(p871 * 2, p871 * 55, p871 * 4, p871 * 52, p871 * 4, p871 * 43);
    v1260.bezierCurveTo(p871 * 4, p871 * 30.5, p871 * 4, p871 * 30.5, p871 * 4, p871 * 18);
    v1260.bezierCurveTo(p871 * 16, p871 * 18.5, p871 * 16, p871 * 18.5, p871 * 28, p871 * 19);
    v1260.bezierCurveTo(p871 * 18.5, p871 * 12, p871 * 18.5, p871 * 12, p871 * 9, p871 * 5);
    v1260.closePath();
    f88(v1260, p872[1], p872[0], p871 * 12);
    v1260.beginPath();
    v1260.lineCap = "round";
    v1260.lineJoin = "round";
    v1260.moveTo(p871 * 5, p871 * 70);
    v1260.bezierCurveTo(p871 * 5, p871 * 58, p871 * 5, p871 * 55, p871 * 17, p871 * 57);
    v1260.bezierCurveTo(p871 * 203, p871 * 57, p871 * 203, p871 * 57, p871 * 389, p871 * 57);
    v1260.bezierCurveTo(p871 * 400, p871 * 57, p871 * 400, p871 * 59, p871 * 400, p871 * 69);
    v1260.bezierCurveTo(p871 * 400.5, p871 * 83.5, p871 * 400.5, p871 * 83.5, p871 * 401, p871 * 98);
    v1260.bezierCurveTo(p871 * 402, p871 * 108, p871 * 401, p871 * 108, p871 * 388, p871 * 108);
    v1260.bezierCurveTo(p871 * 201.5, p871 * 108, p871 * 201.5, p871 * 108, p871 * 15, p871 * 108);
    v1260.bezierCurveTo(p871 * 1, p871 * 106, p871 * 5, p871 * 106, p871 * 5, p871 * 87);
    v1260.bezierCurveTo(p871 * 33, p871 * 84.5, p871 * 33, p871 * 84.5, p871 * 61, p871 * 82);
    v1260.bezierCurveTo(p871 * 33.5, p871 * 76.5, p871 * 33.5, p871 * 76.5, p871 * 6, p871 * 71);
    v1260.closePath();
    f88(v1260, p872[2], p872[0], p871 * 12);
    v1260.beginPath();
    v1260.lineCap = "round";
    v1260.lineJoin = "round";
    v1260.moveTo(p871 * 19, p871 * 158);
    v1260.bezierCurveTo(p871 * 2, p871 * 159, p871 * 4, p871 * 156, p871 * 5, p871 * 118);
    v1260.bezierCurveTo(p871 * 4, p871 * 110, p871 * 6, p871 * 107, p871 * 26, p871 * 109);
    v1260.bezierCurveTo(p871 * 206.5, p871 * 109, p871 * 206.5, p871 * 109, p871 * 387, p871 * 109);
    v1260.bezierCurveTo(p871 * 400, p871 * 108, p871 * 400, p871 * 108, p871 * 398, p871 * 127);
    v1260.bezierCurveTo(p871 * 384.5, p871 * 130, p871 * 384.5, p871 * 130, p871 * 371, p871 * 133);
    v1260.bezierCurveTo(p871 * 385.5, p871 * 138, p871 * 385.5, p871 * 138, p871 * 400, p871 * 143);
    v1260.bezierCurveTo(p871 * 402, p871 * 156, p871 * 402, p871 * 162, p871 * 385, p871 * 160);
    v1260.closePath();
    f88(v1260, p872[1], p872[0], p871 * 12);
    v1260.beginPath();
    v1260.lineCap = "round";
    v1260.lineJoin = "round";
    v1260.moveTo(p871 * 4, p871 * 183);
    v1260.bezierCurveTo(p871 * 1, p871 * 163, p871 * 4, p871 * 158, p871 * 28, p871 * 161);
    v1260.bezierCurveTo(p871 * 207.5, p871 * 161, p871 * 207.5, p871 * 161, p871 * 387, p871 * 161);
    v1260.bezierCurveTo(p871 * 401, p871 * 159, p871 * 400, p871 * 164, p871 * 400, p871 * 177);
    v1260.bezierCurveTo(p871 * 364.5, p871 * 184, p871 * 364.5, p871 * 184, p871 * 329, p871 * 191);
    v1260.bezierCurveTo(p871 * 364.5, p871 * 192.5, p871 * 364.5, p871 * 192.5, p871 * 400, p871 * 194);
    v1260.bezierCurveTo(p871 * 403, p871 * 209, p871 * 401, p871 * 214, p871 * 385, p871 * 213);
    v1260.bezierCurveTo(p871 * 201.5, p871 * 213, p871 * 201.5, p871 * 213, p871 * 18, p871 * 213);
    v1260.bezierCurveTo(p871 * 3, p871 * 213, p871 * 2, p871 * 213, p871 * 4, p871 * 198);
    v1260.bezierCurveTo(p871 * 12.5, p871 * 193, p871 * 12.5, p871 * 193, p871 * 21, p871 * 188);
    v1260.closePath();
    f88(v1260, p872[2], p872[0], p871 * 12);
    f92(v1260, p871 * 41, p871 * 30, p871 * 14.7648230602334);
    f88(v1260, p872[2], p872[0], p871 * 12);
    f92(v1260, p871 * 369, p871 * 30, p871 * 15.556349186104045);
    f88(v1260, p872[2], p872[0], p871 * 12);
    f92(v1260, p871 * 364, p871 * 190, p871 * 15.620499351813308);
    f88(v1260, p872[2], p872[0], p871 * 12);
    f92(v1260, p871 * 41, p871 * 186, p871 * 15.556349186104045);
    f88(v1260, p872[2], p872[0], p871 * 12);
    return v1259;
  }
  function f211(p874, p875) {
    var v1261 = document.createElement("canvas");
    var v1262 = v1261.getContext("2d");
    v1261.width = p874 * 253;
    v1261.height = p874 * 260;
    v1262.globalAlpha = 0.5;
    f92(v1262, p874 * 126.5, p874 * 134, p874 * 119);
    f88(v1262, p875[0]);
    v1262.globalAlpha = 1;
    f92(v1262, p874 * 126.5, p874 * 124, p874 * 119);
    f88(v1262, p875[1], p875[2], p874 * 4);
    f92(v1262, p874 * 126.5, p874 * 127, p874 * 100);
    f88(v1262, p875[3]);
    v1262.globalAlpha = 0.5;
    f92(v1262, p874 * 126.5, p874 * 135, p874 * 81);
    f88(v1262, p875[0]);
    v1262.globalAlpha = 1;
    f92(v1262, p874 * 126.5, p874 * 125, p874 * 84);
    f88(v1262, p875[4], p875[5], p874 * 4);
    f92(v1262, p874 * 126.5, p874 * 125, p874 * 61);
    f88(v1262, p875[6], p875[7], p874 * 4);
    v1262.globalAlpha = 0.5;
    f92(v1262, p874 * 126.5, p874 * 134, p874 * 40);
    f88(v1262, p875[8]);
    v1262.globalAlpha = 1;
    f92(v1262, p874 * 126.5, p874 * 125, p874 * 40);
    f88(v1262, p875[9]);
    return v1261;
  }
  function f212(p876, p877) {
    var v1263 = document.createElement("canvas");
    var v1264 = v1263.getContext("2d");
    v1263.width = p876 * 149;
    v1263.height = p876 * 153;
    v1264.globalAlpha = 0.5;
    f92(v1264, p876 * 74.5, p876 * 85, p876 * 66);
    f88(v1264, p877[0]);
    v1264.globalAlpha = 1;
    f92(v1264, p876 * 75.5, p876 * 72.5, p876 * 67);
    f88(v1264, p877[1], p877[2], p876 * 4);
    f92(v1264, p876 * 75.5, p876 * 73.5, p876 * 54);
    f88(v1264, p877[3]);
    v1264.globalAlpha = 0.5;
    f92(v1264, p876 * 74.5, p876 * 80.5, p876 * 39);
    f88(v1264, p877[4]);
    v1264.globalAlpha = 1;
    f92(v1264, p876 * 74.5, p876 * 74.5, p876 * 37);
    f88(v1264, p877[5]);
    return v1263;
  }
  function f213(p878, p879) {
    var v1265 = document.createElement("canvas");
    var v1266 = v1265.getContext("2d");
    v1265.width = p878 * 85;
    v1265.height = p878 * 145;
    v1266.translate(p878 * -165, p878 * -95);
    v1266.beginPath();
    v1266.lineCap = "round";
    v1266.lineJoin = "round";
    v1266.moveTo(p878 * 217, p878 * 103);
    v1266.bezierCurveTo(p878 * 209, p878 * 129, p878 * 203, p878 * 137, p878 * 195, p878 * 146);
    v1266.bezierCurveTo(p878 * 195, p878 * 159, p878 * 194, p878 * 167, p878 * 189, p878 * 178);
    v1266.bezierCurveTo(p878 * 193, p878 * 186, p878 * 196, p878 * 195, p878 * 198, p878 * 216);
    v1266.bezierCurveTo(p878 * 217.5, p878 * 189.5, p878 * 217.5, p878 * 189.5, p878 * 237, p878 * 163);
    v1266.closePath();
    f88(v1266, p879[1]);
    v1266.beginPath();
    v1266.lineCap = "round";
    v1266.lineJoin = "round";
    v1266.moveTo(p878 * 231, p878 * 163);
    v1266.bezierCurveTo(p878 * 221, p878 * 139, p878 * 218, p878 * 128, p878 * 215, p878 * 114);
    v1266.bezierCurveTo(p878 * 213, p878 * 102, p878 * 220, p878 * 92, p878 * 222, p878 * 107);
    v1266.bezierCurveTo(p878 * 224, p878 * 118, p878 * 233, p878 * 138, p878 * 244, p878 * 161);
    v1266.bezierCurveTo(p878 * 235, p878 * 188, p878 * 224, p878 * 198, p878 * 204, p878 * 221);
    v1266.bezierCurveTo(p878 * 190, p878 * 233, p878 * 190, p878 * 235, p878 * 180, p878 * 235);
    v1266.bezierCurveTo(p878 * 167, p878 * 235, p878 * 164, p878 * 216, p878 * 175, p878 * 211);
    v1266.bezierCurveTo(p878 * 176, p878 * 208, p878 * 181, p878 * 207, p878 * 191, p878 * 205);
    v1266.bezierCurveTo(p878 * 213, p878 * 186, p878 * 218, p878 * 180, p878 * 230, p878 * 163);
    v1266.closePath();
    f88(v1266, p879[2], p879[3], p878 * 4);
    v1266.beginPath();
    v1266.lineCap = "round";
    v1266.lineJoin = "round";
    v1266.moveTo(p878 * 234, p878 * 154);
    v1266.bezierCurveTo(p878 * 227, p878 * 156, p878 * 222, p878 * 156, p878 * 199, p878 * 148);
    v1266.bezierCurveTo(p878 * 201, p878 * 151, p878 * 216, p878 * 159, p878 * 224, p878 * 162);
    v1266.bezierCurveTo(p878 * 209, p878 * 169.5, p878 * 209, p878 * 169.5, p878 * 194, p878 * 177);
    v1266.bezierCurveTo(p878 * 213.5, p878 * 175, p878 * 213.5, p878 * 175, p878 * 233, p878 * 173);
    v1266.closePath();
    f88(v1266, p879[2]);
    return v1265;
  }
  function f214(p880, p881, p882, p883) {
    var v1267 = document.createElement("canvas");
    var v1268 = v1267.getContext("2d");
    v1267.width = p880 * 450;
    v1267.height = p880 * 260;
    var vF205 = f205(p880 * 1, true, p882);
    v1268.drawImage(vF205, p880 * 0, p880 * 0);
    if (p883 == 1) {
      v1268.translate(p880 * 100, p880 * 0);
      f92(v1268, p880 * 113, p880 * 120, p880 * 66);
      f88(v1268, undefined, p882[4], p880 * 13);
      vF205 = f140(p880 * 0.65, vVVVV632, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      v1268.rotate(0.7);
      v1268.drawImage(vF205, p880 * 133, p880 * -64);
      v1268.rotate(-0.7);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 70, p880 * 70);
      v1268.bezierCurveTo(p880 * 113, p880 * 120.5, p880 * 113, p880 * 120.5, p880 * 156, p880 * 171);
      v1268.closePath();
      f88(v1268, undefined, p882[4], p880 * 13);
    } else if (p883 == 2) {
      v1268.translate(p880 * 100, p880 * 0);
      f92(v1268, p880 * 113, p880 * 120, p880 * 66);
      f88(v1268, undefined, p882[4], p880 * 13);
      v1268.translate(p880 * 30, p880 * 40);
      v1268.save();
      v1268.translate(p880 * 83.5, p880 * 66.5);
      f86(v1268, p880 * -40.5, p880 * -29.5, p880 * 81, p880 * 59, p880 * 15);
      v1268.restore();
      f88(v1268, "#dff2f7", "#187484", p880 * 7);
      f92(v1268, p880 * 22, p880 * 82, p880 * 12);
      f88(v1268, "#dff2f7", "#187484", p880 * 7);
      f92(v1268, p880 * 145, p880 * 82, p880 * 12);
      f88(v1268, "#dff2f7", "#187484", p880 * 7);
      vF205 = f172(p880 * 0.5, true, ["#80500b", "#7c4908"]);
      v1268.drawImage(vF205, p880 * 10, p880 * 85);
      vF205 = f172(p880 * 0.5, v6, ["#80500b", "#7c4908"]);
      v1268.drawImage(vF205, p880 * 50, p880 * 85);
      vF205 = f172(p880 * 0.5, vVV62, ["#80500b", "#7c4908"]);
      v1268.drawImage(vF205, p880 * 90, p880 * 85);
      vF205 = f184(p880 * 1, 0, ["#3d2a6e", "#8255b5"]);
      v1268.drawImage(vF205, p880 * 90, p880 * 105);
      vF205 = f184(p880 * 1, 0, ["#3d2a6e", "#8255b5"]);
      v1268.drawImage(vF205, p880 * 90, p880 * 105);
      vF205 = f184(p880 * 1, 0, ["#3d2a6e", "#8255b5"]);
      v1268.drawImage(vF205, p880 * 30, p880 * 125);
      vF205 = f184(p880 * 1, 0, ["#3d2a6e", "#8255b5"]);
      v1268.drawImage(vF205, p880 * 50, p880 * 115);
      vF205 = f184(p880 * 1, 0, ["#3d2a6e", "#8255b5"]);
      v1268.drawImage(vF205, p880 * 30, p880 * 100);
      vF205 = f184(p880 * 1, 0, ["#3d2a6e", "#8255b5"]);
      v1268.drawImage(vF205, p880 * 80, p880 * 120);
      vF205 = f184(p880 * 1, 0, ["#3d2a6e", "#8255b5"]);
      v1268.drawImage(vF205, p880 * 110, p880 * 125);
      vF205 = f184(p880 * 1, 0, ["#3d2a6e", "#8255b5"]);
      v1268.drawImage(vF205, p880 * 120, p880 * 105);
    } else if (p883 == 3) {
      v1268.translate(p880 * 100, p880 * 0);
      f92(v1268, p880 * 113, p880 * 120, p880 * 66);
      f88(v1268, vUndefined, p882[4], p880 * 13);
      v1268.translate(p880 * 40, p880 * 50);
      v1268.save();
      v1268.translate(p880 * 71, p880 * 69);
      f86(v1268, p880 * -30, p880 * -42, p880 * 60, p880 * 84, p880 * 10);
      v1268.restore();
      f88(v1268, vVVVVVUndefined14, p882[5], p880 * 4);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 42, p880 * 28);
      v1268.bezierCurveTo(p880 * 60, p880 * 31, p880 * 60, p880 * 31, p880 * 78, p880 * 34);
      v1268.bezierCurveTo(p880 * 82, p880 * 34, p880 * 84, p880 * 37, p880 * 83, p880 * 45);
      v1268.bezierCurveTo(p880 * 83, p880 * 80, p880 * 83, p880 * 80, p880 * 83, p880 * 115);
      v1268.bezierCurveTo(p880 * 83, p880 * 120, p880 * 80, p880 * 122, p880 * 73, p880 * 120);
      v1268.bezierCurveTo(p880 * 42, p880 * 111, p880 * 43, p880 * 109, p880 * 41, p880 * 102);
      v1268.bezierCurveTo(p880 * 41, p880 * 71, p880 * 41, p880 * 71, p880 * 41, p880 * 40);
      v1268.closePath();
      f88(v1268, p882[5], p882[5], p880 * 4);
      v1268.translate(p880 * -40, p880 * -50);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 70, p880 * 70);
      v1268.bezierCurveTo(p880 * 113, p880 * 120.5, p880 * 113, p880 * 120.5, p880 * 156, p880 * 171);
      v1268.closePath();
      f88(v1268, vVVVVUndefined143, p882[4], p880 * 13);
    } else if (p883 == 4) {
      v1268.scale(1, 1);
      v1268.translate(p880 * 70, p880 * 50);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 23, p880 * 6);
      v1268.bezierCurveTo(p880 * 25.5, p880 * 56, p880 * 25.5, p880 * 56, p880 * 28, p880 * 106);
      f88(v1268, vVVUndefined14, p882[5], p880 * 14);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 59, p880 * 10);
      v1268.bezierCurveTo(p880 * 61, p880 * 51.5, p880 * 61, p880 * 51.5, p880 * 63, p880 * 93);
      f88(v1268, undefined, p882[5], p880 * 14);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 7, p880 * 55);
      v1268.bezierCurveTo(p880 * 33.5, p880 * 55, p880 * 33.5, p880 * 55, p880 * 60, p880 * 55);
      f88(v1268, vVVUndefined14, p882[5], p880 * 14);
      v1268.translate(p880 * 10, p880 * 0);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 123, p880 * 16);
      v1268.bezierCurveTo(p880 * 103, p880 * 16.5, p880 * 103, p880 * 16.5, p880 * 83, p880 * 17);
      v1268.bezierCurveTo(p880 * 83.5, p880 * 61, p880 * 83.5, p880 * 61, p880 * 84, p880 * 105);
      v1268.bezierCurveTo(p880 * 106, p880 * 105, p880 * 106, p880 * 105, p880 * 128, p880 * 105);
      f88(v1268, vUndefined, p882[5], p880 * 14);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 72, p880 * 63);
      v1268.bezierCurveTo(p880 * 88.5, p880 * 62.5, p880 * 88.5, p880 * 62.5, p880 * 105, p880 * 62);
      f88(v1268, vVVVVUndefined142, p882[5], p880 * 14);
      v1268.translate(p880 * 10, p880 * 10);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 141, p880 * 8);
      v1268.bezierCurveTo(p880 * 143, p880 * 50, p880 * 143, p880 * 50, p880 * 145, p880 * 92);
      v1268.bezierCurveTo(p880 * 169, p880 * 88.5, p880 * 169, p880 * 88.5, p880 * 193, p880 * 85);
      f88(v1268, undefined, p882[5], p880 * 14);
      v1268.translate(p880 * 10, p880 * -10);
      v1268.beginPath();
      v1268.lineCap = "round";
      v1268.lineJoin = "round";
      v1268.moveTo(p880 * 205, p880 * 124);
      v1268.bezierCurveTo(p880 * 205, p880 * 69, p880 * 205, p880 * 69, p880 * 205, p880 * 14);
      v1268.bezierCurveTo(p880 * 239, p880 * 15, p880 * 250, p880 * 37, p880 * 249, p880 * 49);
      v1268.bezierCurveTo(p880 * 251, p880 * 65, p880 * 242, p880 * 76, p880 * 206, p880 * 75);
      f88(v1268, undefined, p882[5], p880 * 14);
    }
    return v1267;
  }
  function f215(p884, p885, p886) {
    var v1269 = document.createElement("canvas");
    var v1270 = v1269.getContext("2d");
    v1269.width = p884 * 180;
    v1269.height = p884 * 120;
    v1270.translate(p884 * -65, p884 * -35);
    v1270.globalAlpha = p885 ? 0.5 : 1;
    v1270.translate(0, p884 * 10);
    v1270.save();
    v1270.translate(p884 * 150.5, p884 * 63.84375);
    f86(v1270, p884 * -67, p884 * -16.5, p884 * 134, p884 * 33, p884 * 5);
    v1270.restore();
    f88(v1270, p886[0]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 80.5, p884 * 75.34375);
    v1270.bezierCurveTo(p884 * 83, p884 * 106.34375, p884 * 83, p884 * 106.34375, p884 * 85.5, p884 * 137.34375);
    v1270.bezierCurveTo(p884 * 93, p884 * 135.84375, p884 * 93, p884 * 135.84375, p884 * 100.5, p884 * 134.34375);
    v1270.bezierCurveTo(p884 * 99.5, p884 * 100.84375, p884 * 99.5, p884 * 100.84375, p884 * 98.5, p884 * 67.34375);
    v1270.closePath();
    f88(v1270, p886[0]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 206.5, p884 * 71.34375);
    v1270.bezierCurveTo(p884 * 203.5, p884 * 104.34375, p884 * 203.5, p884 * 104.34375, p884 * 200.5, p884 * 137.34375);
    v1270.bezierCurveTo(p884 * 208.5, p884 * 137.34375, p884 * 208.5, p884 * 137.34375, p884 * 216.5, p884 * 137.34375);
    v1270.bezierCurveTo(p884 * 219, p884 * 102.84375, p884 * 219, p884 * 102.84375, p884 * 221.5, p884 * 68.34375);
    v1270.closePath();
    f88(v1270, p886[0]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 136.5, p884 * 75.34375);
    v1270.bezierCurveTo(p884 * 139, p884 * 94.34375, p884 * 139, p884 * 94.34375, p884 * 141.5, p884 * 113.34375);
    v1270.bezierCurveTo(p884 * 149.5, p884 * 115.34375, p884 * 149.5, p884 * 115.34375, p884 * 157.5, p884 * 117.34375);
    v1270.bezierCurveTo(p884 * 162, p884 * 97.34375, p884 * 162, p884 * 97.34375, p884 * 166.5, p884 * 77.34375);
    v1270.closePath();
    f88(v1270, p886[0]);
    v1270.save();
    v1270.translate(p884 * 152.5, p884 * 80.84375);
    v1270.rotate(3.12);
    f86(v1270, p884 * -73, p884 * -20.5, p884 * 146, p884 * 41, p884 * 5);
    v1270.restore();
    f88(v1270, p886[0]);
    v1270.globalAlpha = 1;
    v1270.translate(0, p884 * -10);
    v1270.save();
    v1270.translate(p884 * 150.5, p884 * 63.84375);
    f86(v1270, p884 * -67, p884 * -16.5, p884 * 134, p884 * 33, p884 * 5);
    v1270.restore();
    f88(v1270, p886[1], p886[2], p884 * 4);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 80.5, p884 * 75.34375);
    v1270.bezierCurveTo(p884 * 83, p884 * 106.34375, p884 * 83, p884 * 106.34375, p884 * 85.5, p884 * 137.34375);
    v1270.bezierCurveTo(p884 * 93, p884 * 135.84375, p884 * 93, p884 * 135.84375, p884 * 100.5, p884 * 134.34375);
    v1270.bezierCurveTo(p884 * 99.5, p884 * 100.84375, p884 * 99.5, p884 * 100.84375, p884 * 98.5, p884 * 67.34375);
    v1270.closePath();
    f88(v1270, p886[1], p886[2], p884 * 4);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 206.5, p884 * 71.34375);
    v1270.bezierCurveTo(p884 * 203.5, p884 * 104.34375, p884 * 203.5, p884 * 104.34375, p884 * 200.5, p884 * 137.34375);
    v1270.bezierCurveTo(p884 * 208.5, p884 * 137.34375, p884 * 208.5, p884 * 137.34375, p884 * 216.5, p884 * 137.34375);
    v1270.bezierCurveTo(p884 * 219, p884 * 102.84375, p884 * 219, p884 * 102.84375, p884 * 221.5, p884 * 68.34375);
    v1270.closePath();
    f88(v1270, p886[1], p886[2], p884 * 4);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 136.5, p884 * 75.34375);
    v1270.bezierCurveTo(p884 * 139, p884 * 94.34375, p884 * 139, p884 * 94.34375, p884 * 141.5, p884 * 113.34375);
    v1270.bezierCurveTo(p884 * 149.5, p884 * 115.34375, p884 * 149.5, p884 * 115.34375, p884 * 157.5, p884 * 117.34375);
    v1270.bezierCurveTo(p884 * 162, p884 * 97.34375, p884 * 162, p884 * 97.34375, p884 * 166.5, p884 * 77.34375);
    v1270.closePath();
    f88(v1270, p886[1], p886[2], p884 * 4);
    v1270.save();
    v1270.translate(p884 * 152.5, p884 * 80.84375);
    v1270.rotate(3.12);
    f86(v1270, p884 * -73, p884 * -20.5, p884 * 146, p884 * 41, p884 * 5);
    v1270.restore();
    f88(v1270, p886[1], p886[2], p884 * 4);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 83.5, p884 * 73.34375);
    v1270.bezierCurveTo(p884 * 93.5, p884 * 70.34375, p884 * 105.5, p884 * 70.34375, p884 * 124.5, p884 * 72.34375);
    v1270.bezierCurveTo(p884 * 132.5, p884 * 78.34375, p884 * 162.5, p884 * 80.34375, p884 * 176.5, p884 * 76.34375);
    v1270.bezierCurveTo(p884 * 194.5, p884 * 69.34375, p884 * 192.5, p884 * 68.34375, p884 * 199.5, p884 * 63.34375);
    v1270.bezierCurveTo(p884 * 204.5, p884 * 63.34375, p884 * 204.5, p884 * 63.34375, p884 * 209.5, p884 * 63.34375);
    v1270.bezierCurveTo(p884 * 153.5, p884 * 82.34375, p884 * 157.5, p884 * 85.34375, p884 * 209.5, p884 * 63.34375);
    v1270.bezierCurveTo(p884 * 194.5, p884 * 88.34375, p884 * 162.5, p884 * 87.34375, p884 * 149.5, p884 * 88.34375);
    v1270.bezierCurveTo(p884 * 129.5, p884 * 81.34375, p884 * 103.5, p884 * 75.34375, p884 * 83.5, p884 * 82.34375);
    v1270.closePath();
    f88(v1270, p886[3]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 137.5, p884 * 65.34375);
    v1270.bezierCurveTo(p884 * 150.5, p884 * 76.34375, p884 * 170.5, p884 * 71.34375, p884 * 174.5, p884 * 65.34375);
    v1270.closePath();
    f88(v1270, p886[3]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 221.5, p884 * 85.34375);
    v1270.bezierCurveTo(p884 * 211.5, p884 * 79.34375, p884 * 191.5, p884 * 88.34375, p884 * 181.5, p884 * 96.34375);
    v1270.bezierCurveTo(p884 * 201.5, p884 * 96.34375, p884 * 201.5, p884 * 96.34375, p884 * 221.5, p884 * 96.34375);
    v1270.closePath();
    f88(v1270, p886[3]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 84.5, p884 * 89.34375);
    v1270.bezierCurveTo(p884 * 102.5, p884 * 87.34375, p884 * 112.5, p884 * 88.34375, p884 * 119.5, p884 * 97.34375);
    v1270.bezierCurveTo(p884 * 102, p884 * 98.34375, p884 * 102, p884 * 98.34375, p884 * 84.5, p884 * 99.34375);
    v1270.closePath();
    f88(v1270, p886[3]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 208.5, p884 * 104.34375);
    v1270.bezierCurveTo(p884 * 208.5, p884 * 110.34375, p884 * 208.5, p884 * 110.34375, p884 * 208.5, p884 * 116.34375);
    v1270.bezierCurveTo(p884 * 211.5, p884 * 110.34375, p884 * 211.5, p884 * 110.34375, p884 * 214.5, p884 * 104.34375);
    v1270.closePath();
    f88(v1270, p886[3]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 87.5, p884 * 117.34375);
    v1270.bezierCurveTo(p884 * 92, p884 * 118.84375, p884 * 92, p884 * 118.84375, p884 * 96.5, p884 * 120.34375);
    v1270.bezierCurveTo(p884 * 93, p884 * 123.84375, p884 * 93, p884 * 123.84375, p884 * 89.5, p884 * 127.34375);
    v1270.closePath();
    f88(v1270, p886[3]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 107.5, p884 * 51.34375);
    v1270.bezierCurveTo(p884 * 122.5, p884 * 54.34375, p884 * 122.5, p884 * 54.34375, p884 * 137.5, p884 * 57.34375);
    v1270.bezierCurveTo(p884 * 118, p884 * 57.34375, p884 * 118, p884 * 57.34375, p884 * 98.5, p884 * 57.34375);
    v1270.bezierCurveTo(p884 * 94.5, p884 * 54.84375, p884 * 94.5, p884 * 54.84375, p884 * 90.5, p884 * 52.34375);
    v1270.closePath();
    f88(v1270, p886[3]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 170.5, p884 * 52.34375);
    v1270.bezierCurveTo(p884 * 179.5, p884 * 51.84375, p884 * 179.5, p884 * 51.84375, p884 * 188.5, p884 * 51.34375);
    v1270.bezierCurveTo(p884 * 187.5, p884 * 53.84375, p884 * 187.5, p884 * 53.84375, p884 * 186.5, p884 * 56.34375);
    v1270.bezierCurveTo(p884 * 177, p884 * 56.34375, p884 * 177, p884 * 56.34375, p884 * 167.5, p884 * 56.34375);
    v1270.closePath();
    f88(v1270, p886[3]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 80.5, p884 * 69.34375);
    v1270.bezierCurveTo(p884 * 86.5, p884 * 70.34375, p884 * 86.5, p884 * 70.34375, p884 * 92.5, p884 * 71.34375);
    v1270.bezierCurveTo(p884 * 86, p884 * 73.34375, p884 * 86, p884 * 73.34375, p884 * 79.5, p884 * 75.34375);
    v1270.closePath();
    f88(v1270, p886[2]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 222.5, p884 * 75.34375);
    v1270.bezierCurveTo(p884 * 214.5, p884 * 76.34375, p884 * 214.5, p884 * 76.34375, p884 * 206.5, p884 * 77.34375);
    v1270.bezierCurveTo(p884 * 216.5, p884 * 79.34375, p884 * 216.5, p884 * 79.34375, p884 * 226.5, p884 * 81.34375);
    v1270.closePath();
    f88(v1270, p886[2]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 116.5, p884 * 100.34375);
    v1270.bezierCurveTo(p884 * 128, p884 * 97.34375, p884 * 128, p884 * 97.34375, p884 * 139.5, p884 * 94.34375);
    v1270.bezierCurveTo(p884 * 140, p884 * 96.84375, p884 * 140, p884 * 96.84375, p884 * 140.5, p884 * 99.34375);
    v1270.closePath();
    f88(v1270, p886[2]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 112.5, p884 * 48.34375);
    v1270.bezierCurveTo(p884 * 115.5, p884 * 50.84375, p884 * 115.5, p884 * 50.84375, p884 * 118.5, p884 * 53.34375);
    v1270.bezierCurveTo(p884 * 131, p884 * 50.84375, p884 * 131, p884 * 50.84375, p884 * 143.5, p884 * 48.34375);
    v1270.closePath();
    f88(v1270, p886[2]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 216.5, p884 * 109.34375);
    v1270.bezierCurveTo(p884 * 213, p884 * 114.84375, p884 * 213, p884 * 114.84375, p884 * 209.5, p884 * 120.34375);
    v1270.bezierCurveTo(p884 * 212, p884 * 118.84375, p884 * 212, p884 * 118.84375, p884 * 214.5, p884 * 117.34375);
    v1270.closePath();
    f88(v1270, p886[2]);
    v1270.beginPath();
    v1270.lineCap = "round";
    v1270.lineJoin = "round";
    v1270.moveTo(p884 * 86.5, p884 * 133.34375);
    v1270.bezierCurveTo(p884 * 89, p884 * 127.34375, p884 * 89, p884 * 127.34375, p884 * 91.5, p884 * 121.34375);
    v1270.bezierCurveTo(p884 * 92.5, p884 * 127.34375, p884 * 92.5, p884 * 127.34375, p884 * 93.5, p884 * 133.34375);
    v1270.closePath();
    f88(v1270, p886[2]);
    return v1269;
  }
  function f216(p887, p888, p889) {
    var v1271 = document.createElement("canvas");
    var v1272 = v1271.getContext("2d");
    v1271.width = p887 * 139;
    v1271.height = p887 * 135;
    v1272.translate(0, p887 * 10);
    v1272.globalAlpha = p888 ? 0.5 : 1;
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 32, p887 * 77);
    v1272.bezierCurveTo(p887 * 6, p887 * 41, p887 * 6, p887 * 33, p887 * 12, p887 * 27);
    v1272.bezierCurveTo(p887 * 27, p887 * 6, p887 * 28, p887 * 6, p887 * 37, p887 * 6);
    v1272.bezierCurveTo(p887 * 62, p887 * 3, p887 * 64, p887 * 5, p887 * 67, p887 * 13);
    v1272.bezierCurveTo(p887 * 80, p887 * 36, p887 * 73.5, p887 * 25, p887 * 80, p887 * 37);
    v1272.bezierCurveTo(p887 * 73.5, p887 * 54, p887 * 65, p887 * 74, p887 * 67, p887 * 71);
    v1272.closePath();
    f88(v1272, p889[0]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 65, p887 * 37);
    v1272.bezierCurveTo(p887 * 105, p887 * 40, p887 * 113, p887 * 39, p887 * 117, p887 * 48);
    v1272.bezierCurveTo(p887 * 126, p887 * 70, p887 * 128, p887 * 72, p887 * 124, p887 * 80);
    v1272.bezierCurveTo(p887 * 112, p887 * 101, p887 * 110, p887 * 104, p887 * 99, p887 * 104);
    v1272.bezierCurveTo(p887 * 59, p887 * 100, p887 * 55, p887 * 99, p887 * 56, p887 * 99);
    v1272.bezierCurveTo(p887 * 47.5, p887 * 79, p887 * 45, p887 * 66, p887 * 39, p887 * 59);
    v1272.closePath();
    f88(v1272, p889[0]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 30, p887 * 63);
    v1272.bezierCurveTo(p887 * 5, p887 * 99, p887 * 5, p887 * 101, p887 * 8, p887 * 103);
    v1272.bezierCurveTo(p887 * 19, p887 * 123, p887 * 22, p887 * 125, p887 * 28, p887 * 126);
    v1272.bezierCurveTo(p887 * 57, p887 * 127, p887 * 55, p887 * 127, p887 * 58, p887 * 120);
    v1272.bezierCurveTo(p887 * 82, p887 * 86, p887 * 83, p887 * 78, p887 * 82, p887 * 87);
    v1272.closePath();
    f88(v1272, p889[0]);
    v1272.translate(0, p887 * -10);
    v1272.globalAlpha = 1;
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 32, p887 * 77);
    v1272.bezierCurveTo(p887 * 6, p887 * 41, p887 * 6, p887 * 33, p887 * 12, p887 * 27);
    v1272.bezierCurveTo(p887 * 27, p887 * 6, p887 * 28, p887 * 6, p887 * 37, p887 * 6);
    v1272.bezierCurveTo(p887 * 62, p887 * 3, p887 * 64, p887 * 5, p887 * 67, p887 * 13);
    v1272.bezierCurveTo(p887 * 80, p887 * 36, p887 * 73.5, p887 * 25, p887 * 80, p887 * 37);
    v1272.bezierCurveTo(p887 * 73.5, p887 * 54, p887 * 65, p887 * 74, p887 * 67, p887 * 71);
    v1272.closePath();
    f88(v1272, p889[1]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 65, p887 * 37);
    v1272.bezierCurveTo(p887 * 105, p887 * 40, p887 * 113, p887 * 39, p887 * 117, p887 * 48);
    v1272.bezierCurveTo(p887 * 126, p887 * 70, p887 * 128, p887 * 72, p887 * 124, p887 * 80);
    v1272.bezierCurveTo(p887 * 112, p887 * 101, p887 * 110, p887 * 104, p887 * 99, p887 * 104);
    v1272.bezierCurveTo(p887 * 59, p887 * 100, p887 * 55, p887 * 99, p887 * 56, p887 * 99);
    v1272.bezierCurveTo(p887 * 47.5, p887 * 79, p887 * 45, p887 * 66, p887 * 39, p887 * 59);
    v1272.closePath();
    f88(v1272, p889[1]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 30, p887 * 63);
    v1272.bezierCurveTo(p887 * 5, p887 * 99, p887 * 5, p887 * 101, p887 * 8, p887 * 103);
    v1272.bezierCurveTo(p887 * 19, p887 * 123, p887 * 22, p887 * 125, p887 * 28, p887 * 126);
    v1272.bezierCurveTo(p887 * 57, p887 * 127, p887 * 55, p887 * 127, p887 * 58, p887 * 120);
    v1272.bezierCurveTo(p887 * 82, p887 * 86, p887 * 83, p887 * 78, p887 * 82, p887 * 87);
    v1272.closePath();
    f88(v1272, p889[1]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 80, p887 * 38);
    v1272.bezierCurveTo(p887 * 72.5, p887 * 52, p887 * 72.5, p887 * 52, p887 * 65, p887 * 66);
    v1272.bezierCurveTo(p887 * 47.5, p887 * 37, p887 * 47.5, p887 * 37, p887 * 30, p887 * 7);
    v1272.bezierCurveTo(p887 * 48, p887 * 4, p887 * 57, p887 * 4, p887 * 64, p887 * 10);
    v1272.closePath();
    f88(v1272, p889[2]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 65, p887 * 65);
    v1272.bezierCurveTo(p887 * 125, p887 * 73, p887 * 95.5, p887 * 69, p887 * 126, p887 * 73);
    v1272.bezierCurveTo(p887 * 119, p887 * 98, p887 * 106, p887 * 104, p887 * 98, p887 * 103);
    v1272.bezierCurveTo(p887 * 84.5, p887 * 102, p887 * 84.5, p887 * 102, p887 * 71, p887 * 101);
    v1272.bezierCurveTo(p887 * 64, p887 * 86, p887 * 64, p887 * 86, p887 * 57, p887 * 70);
    v1272.closePath();
    f88(v1272, p889[2]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 27, p887 * 69);
    v1272.bezierCurveTo(p887 * 64, p887 * 65, p887 * 46, p887 * 67, p887 * 65, p887 * 65);
    v1272.bezierCurveTo(p887 * 43.5, p887 * 94, p887 * 43.5, p887 * 94, p887 * 22, p887 * 123);
    v1272.bezierCurveTo(p887 * 8, p887 * 103, p887 * 8, p887 * 103, p887 * 9, p887 * 103);
    v1272.bezierCurveTo(p887 * 5, p887 * 98, p887 * 11, p887 * 89, p887 * 26, p887 * 70);
    v1272.closePath();
    f88(v1272, p889[2]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 26, p887 * 69);
    v1272.bezierCurveTo(p887 * 65, p887 * 60, p887 * 45, p887 * 65, p887 * 64, p887 * 60);
    v1272.bezierCurveTo(p887 * 63, p887 * 65, p887 * 63, p887 * 65, p887 * 62, p887 * 70);
    v1272.closePath();
    f88(v1272, p889[2]);
    v1272.beginPath();
    v1272.lineCap = "round";
    v1272.lineJoin = "round";
    v1272.moveTo(p887 * 80, p887 * 38);
    v1272.bezierCurveTo(p887 * 68, p887 * 70, p887 * 75, p887 * 53, p887 * 70, p887 * 68);
    v1272.bezierCurveTo(p887 * 65, p887 * 67, p887 * 65, p887 * 67, p887 * 60, p887 * 65);
    v1272.closePath();
    f88(v1272, p889[2]);
    return v1271;
  }
  function f217(p890, p891) {
    var v1273 = document.createElement("canvas");
    var v1274 = v1273.getContext("2d");
    v1273.width = p890 * 120;
    v1273.height = p890 * 320;
    v1274.translate(p890 * -60, p890 * -15);
    v1274.beginPath();
    v1274.lineCap = "round";
    v1274.lineJoin = "round";
    v1274.moveTo(p890 * 188.5, p890 * 3.953125);
    v1274.bezierCurveTo(p890 * 188.5, p890 * 171.453125, p890 * 188.5, p890 * 171.453125, p890 * 188.5, p890 * 338.953125);
    v1274.bezierCurveTo(p890 * 162.5, p890 * 268.953125, p890 * 145.5, p890 * 265.953125, p890 * 116.5, p890 * 244.953125);
    v1274.bezierCurveTo(p890 * 67.5, p890 * 204.953125, p890 * 87.5, p890 * 160.953125, p890 * 113.5, p890 * 125.953125);
    v1274.bezierCurveTo(p890 * 141.5, p890 * 90.953125, p890 * 176.5, p890 * 56.953125, p890 * 188.5, p890 * 3.953125);
    v1274.closePath();
    f88(v1274, p891[0]);
    return v1273;
  }
  function f218(p892, p893) {
    var v1275 = document.createElement("canvas");
    var v1276 = v1275.getContext("2d");
    v1275.width = p892 * 147;
    v1275.height = p892 * 172;
    v1276.globalAlpha = 0.5;
    v1276.translate(0, p892 * 8);
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 8, p892 * 50);
    v1276.bezierCurveTo(p892 * 15, p892 * 16, p892 * 49, p892 * 6, p892 * 67, p892 * 6);
    v1276.bezierCurveTo(p892 * 121, p892 * 3, p892 * 128, p892 * 32, p892 * 135, p892 * 48);
    v1276.bezierCurveTo(p892 * 146, p892 * 96, p892 * 124, p892 * 131, p892 * 96, p892 * 135);
    v1276.bezierCurveTo(p892 * 96, p892 * 158, p892 * 79, p892 * 156, p892 * 75, p892 * 156);
    v1276.bezierCurveTo(p892 * 50, p892 * 154, p892 * 53, p892 * 150, p892 * 52, p892 * 135);
    v1276.bezierCurveTo(p892 * 2, p892 * 127, p892 * 3, p892 * 87, p892 * 8, p892 * 50);
    v1276.closePath();
    f88(v1276, p893[0]);
    v1276.translate(0, p892 * -8);
    v1276.globalAlpha = 1;
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 8, p892 * 50);
    v1276.bezierCurveTo(p892 * 15, p892 * 16, p892 * 49, p892 * 6, p892 * 67, p892 * 6);
    v1276.bezierCurveTo(p892 * 121, p892 * 3, p892 * 128, p892 * 32, p892 * 135, p892 * 48);
    v1276.bezierCurveTo(p892 * 146, p892 * 96, p892 * 124, p892 * 131, p892 * 96, p892 * 135);
    v1276.bezierCurveTo(p892 * 96, p892 * 158, p892 * 79, p892 * 156, p892 * 75, p892 * 156);
    v1276.bezierCurveTo(p892 * 50, p892 * 154, p892 * 53, p892 * 150, p892 * 52, p892 * 135);
    v1276.bezierCurveTo(p892 * 2, p892 * 127, p892 * 3, p892 * 87, p892 * 8, p892 * 50);
    v1276.closePath();
    f88(v1276, p893[1], p893[2], p892 * 4);
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 14, p892 * 57);
    v1276.bezierCurveTo(p892 * 2, p892 * 50, p892 * 5, p892 * 22, p892 * 24, p892 * 22);
    v1276.bezierCurveTo(p892 * 41, p892 * 21, p892 * 54, p892 * 32, p892 * 55, p892 * 48);
    f88(v1276, p893[1], p893[2], p892 * 4);
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 93, p892 * 47);
    v1276.bezierCurveTo(p892 * 94, p892 * 24, p892 * 116, p892 * 21, p892 * 120, p892 * 20);
    v1276.bezierCurveTo(p892 * 144, p892 * 17, p892 * 146, p892 * 52, p892 * 133, p892 * 58);
    f88(v1276, p893[1], p893[2], p892 * 4);
    f92(v1276, p892 * 51, p892 * 91, p892 * 9);
    f88(v1276, p893[3]);
    f92(v1276, p892 * 95, p892 * 91, p892 * 9);
    f88(v1276, p893[3]);
    f92(v1276, p892 * 91, p892 * 89, p892 * 4);
    f88(v1276, p893[4]);
    f92(v1276, p892 * 47, p892 * 89, p892 * 4);
    f88(v1276, p893[4]);
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 54, p892 * 133);
    v1276.bezierCurveTo(p892 * 56, p892 * 108, p892 * 64, p892 * 99, p892 * 73, p892 * 98);
    v1276.bezierCurveTo(p892 * 86, p892 * 97, p892 * 91, p892 * 119, p892 * 93, p892 * 133);
    v1276.bezierCurveTo(p892 * 94, p892 * 155, p892 * 90, p892 * 150, p892 * 74, p892 * 155);
    v1276.bezierCurveTo(p892 * 50, p892 * 152, p892 * 55, p892 * 145, p892 * 54, p892 * 134);
    v1276.closePath();
    f88(v1276, p893[5]);
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 65.25, p892 * 135);
    v1276.bezierCurveTo(p892 * 75.25, p892 * 128, p892 * 83.25, p892 * 133, p892 * 83.25, p892 * 138);
    v1276.bezierCurveTo(p892 * 88.25, p892 * 148, p892 * 61.25, p892 * 149, p892 * 64.25, p892 * 137);
    v1276.closePath();
    f88(v1276, p893[6]);
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 74, p892 * 145);
    v1276.bezierCurveTo(p892 * 74, p892 * 148, p892 * 74, p892 * 148, p892 * 74, p892 * 151);
    v1276.closePath();
    f88(v1276, vVVUndefined5, p893[6], p892 * 2);
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 19, p892 * 58);
    v1276.bezierCurveTo(p892 * 10, p892 * 38, p892 * 18, p892 * 33, p892 * 28, p892 * 34);
    v1276.bezierCurveTo(p892 * 41, p892 * 39, p892 * 45, p892 * 45, p892 * 50, p892 * 51);
    v1276.closePath();
    f88(v1276, p893[6]);
    v1276.beginPath();
    v1276.lineCap = "round";
    v1276.lineJoin = "round";
    v1276.moveTo(p892 * 100, p892 * 51);
    v1276.bezierCurveTo(p892 * 106, p892 * 36, p892 * 119, p892 * 31, p892 * 128, p892 * 36);
    v1276.bezierCurveTo(p892 * 137, p892 * 49, p892 * 128, p892 * 58, p892 * 128, p892 * 60);
    v1276.closePath();
    f88(v1276, p893[6]);
    return v1275;
  }
  function f219(p894, p895, p896) {
    var v1277 = document.createElement("canvas");
    var v1278 = v1277.getContext("2d");
    v1277.width = p894 * 345;
    v1277.height = p894 * 250;
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 105, p894 * 58);
    v1278.bezierCurveTo(p894 * 100.5, p894 * 43, p894 * 100.5, p894 * 43, p894 * 96, p894 * 28);
    v1278.bezierCurveTo(p894 * 119.5, p894 * 33.5, p894 * 119.5, p894 * 33.5, p894 * 143, p894 * 39);
    v1278.bezierCurveTo(p894 * 170, p894 * 37, p894 * 177, p894 * 37, p894 * 188, p894 * 40);
    v1278.bezierCurveTo(p894 * 213, p894 * 33.5, p894 * 213, p894 * 33.5, p894 * 238, p894 * 27);
    v1278.bezierCurveTo(p894 * 231, p894 * 52, p894 * 234, p894 * 42.5, p894 * 230, p894 * 58);
    v1278.closePath();
    f88(v1278, p896[1], p896[2], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 108, p894 * 51);
    v1278.bezierCurveTo(p894 * 91, p894 * 55, p894 * 85, p894 * 44, p894 * 86, p894 * 29);
    v1278.bezierCurveTo(p894 * 62, p894 * 50, p894 * 78, p894 * 69, p894 * 92, p894 * 75);
    v1278.closePath();
    f88(v1278, p896[3], p896[4], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 249, p894 * 27);
    v1278.bezierCurveTo(p894 * 273, p894 * 49, p894 * 262, p894 * 68, p894 * 246, p894 * 77);
    v1278.bezierCurveTo(p894 * 231, p894 * 59, p894 * 236, p894 * 66.5, p894 * 226, p894 * 56);
    v1278.bezierCurveTo(p894 * 243, p894 * 53, p894 * 252, p894 * 43, p894 * 249, p894 * 28);
    v1278.closePath();
    f88(v1278, p896[3], p896[4], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 87, p894 * 78);
    v1278.bezierCurveTo(p894 * 87, p894 * 59, p894 * 98, p894 * 46, p894 * 127, p894 * 48);
    v1278.bezierCurveTo(p894 * 176, p894 * 48.5, p894 * 176, p894 * 48.5, p894 * 225, p894 * 49);
    v1278.bezierCurveTo(p894 * 243, p894 * 49, p894 * 253, p894 * 59, p894 * 253, p894 * 76);
    v1278.bezierCurveTo(p894 * 211, p894 * 85.5, p894 * 211, p894 * 85.5, p894 * 169, p894 * 95);
    v1278.closePath();
    f88(v1278, p896[5], p896[6], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 56, p894 * 105);
    v1278.bezierCurveTo(p894 * 56, p894 * 92, p894 * 59, p894 * 86, p894 * 65, p894 * 73);
    v1278.bezierCurveTo(p894 * 62.5, p894 * 61.5, p894 * 62.5, p894 * 61.5, p894 * 60, p894 * 50);
    v1278.bezierCurveTo(p894 * 99.5, p894 * 64.5, p894 * 99.5, p894 * 64.5, p894 * 139, p894 * 79);
    v1278.bezierCurveTo(p894 * 164, p894 * 77, p894 * 177, p894 * 76, p894 * 203, p894 * 78);
    v1278.bezierCurveTo(p894 * 242, p894 * 63.5, p894 * 242, p894 * 63.5, p894 * 281, p894 * 49);
    v1278.bezierCurveTo(p894 * 279, p894 * 60.5, p894 * 279, p894 * 60.5, p894 * 277, p894 * 72);
    v1278.bezierCurveTo(p894 * 286, p894 * 88, p894 * 286, p894 * 96, p894 * 287, p894 * 104);
    v1278.bezierCurveTo(p894 * 228.5, p894 * 127, p894 * 228.5, p894 * 127, p894 * 170, p894 * 150);
    v1278.closePath();
    f88(v1278, p896[1], p896[2], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 48, p894 * 130);
    v1278.bezierCurveTo(p894 * 61, p894 * 155, p894 * 63, p894 * 165, p894 * 56, p894 * 171);
    v1278.bezierCurveTo(p894 * 48, p894 * 177, p894 * 40, p894 * 171, p894 * 38, p894 * 178);
    v1278.bezierCurveTo(p894 * 33, p894 * 180, p894 * 37, p894 * 188, p894 * 47, p894 * 208);
    v1278.bezierCurveTo(p894 * 52, p894 * 221, p894 * 55, p894 * 222, p894 * 75, p894 * 229);
    v1278.bezierCurveTo(p894 * 91, p894 * 213, p894 * 98, p894 * 212, p894 * 112, p894 * 219);
    v1278.bezierCurveTo(p894 * 167, p894 * 225, p894 * 187, p894 * 224, p894 * 222, p894 * 220);
    v1278.bezierCurveTo(p894 * 244, p894 * 214, p894 * 247, p894 * 213, p894 * 263, p894 * 229);
    v1278.bezierCurveTo(p894 * 295, p894 * 220, p894 * 291, p894 * 215, p894 * 301, p894 * 194);
    v1278.bezierCurveTo(p894 * 308, p894 * 178, p894 * 309, p894 * 176, p894 * 302, p894 * 173);
    v1278.bezierCurveTo(p894 * 290, p894 * 177, p894 * 289, p894 * 177, p894 * 283, p894 * 169);
    v1278.bezierCurveTo(p894 * 279, p894 * 163, p894 * 279, p894 * 161, p894 * 290, p894 * 130);
    v1278.bezierCurveTo(p894 * 270, p894 * 127, p894 * 270, p894 * 127, p894 * 250, p894 * 124);
    v1278.bezierCurveTo(p894 * 209, p894 * 137.5, p894 * 209, p894 * 137.5, p894 * 168, p894 * 151);
    v1278.bezierCurveTo(p894 * 121, p894 * 135, p894 * 121, p894 * 135, p894 * 74, p894 * 119);
    v1278.closePath();
    f88(v1278, p896[1], p896[2], p894 * 8);
    v1278.globalCompositeOperation = "destination-out";
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 133, p894 * 158);
    v1278.bezierCurveTo(p894 * 152, p894 * 193, p894 * 158, p894 * 205, p894 * 140, p894 * 203);
    v1278.bezierCurveTo(p894 * 99, p894 * 195, p894 * 96, p894 * 189, p894 * 86, p894 * 173);
    v1278.bezierCurveTo(p894 * 80, p894 * 159, p894 * 88, p894 * 145, p894 * 104, p894 * 141);
    v1278.closePath();
    f88(v1278, p896[7], p896[8], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 215, p894 * 146);
    v1278.bezierCurveTo(p894 * 204, p894 * 167, p894 * 204, p894 * 167, p894 * 193, p894 * 188);
    v1278.bezierCurveTo(p894 * 187, p894 * 201, p894 * 191, p894 * 209, p894 * 213, p894 * 201);
    v1278.bezierCurveTo(p894 * 247, p894 * 192, p894 * 253, p894 * 181, p894 * 257, p894 * 169);
    v1278.bezierCurveTo(p894 * 260, p894 * 157, p894 * 254, p894 * 149, p894 * 243, p894 * 141);
    v1278.closePath();
    f88(v1278, p896[7], p896[8], p894 * 8);
    v1278.globalCompositeOperation = "source-over";
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 133, p894 * 158);
    v1278.bezierCurveTo(p894 * 152, p894 * 193, p894 * 158, p894 * 205, p894 * 140, p894 * 203);
    v1278.bezierCurveTo(p894 * 99, p894 * 195, p894 * 96, p894 * 189, p894 * 86, p894 * 173);
    v1278.bezierCurveTo(p894 * 80, p894 * 159, p894 * 88, p894 * 145, p894 * 104, p894 * 141);
    v1278.closePath();
    f88(v1278, vVVVVUndefined143, p896[8], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 215, p894 * 146);
    v1278.bezierCurveTo(p894 * 204, p894 * 167, p894 * 204, p894 * 167, p894 * 193, p894 * 188);
    v1278.bezierCurveTo(p894 * 187, p894 * 201, p894 * 191, p894 * 209, p894 * 213, p894 * 201);
    v1278.bezierCurveTo(p894 * 247, p894 * 192, p894 * 253, p894 * 181, p894 * 257, p894 * 169);
    v1278.bezierCurveTo(p894 * 260, p894 * 157, p894 * 254, p894 * 149, p894 * 243, p894 * 141);
    v1278.closePath();
    f88(v1278, vVVVUndefined113, p896[8], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 39, p894 * 66);
    v1278.bezierCurveTo(p894 * 57, p894 * 107, p894 * 63, p894 * 96, p894 * 120, p894 * 106);
    v1278.bezierCurveTo(p894 * 154, p894 * 112, p894 * 163, p894 * 116, p894 * 174, p894 * 135);
    v1278.bezierCurveTo(p894 * 180, p894 * 109, p894 * 191, p894 * 113, p894 * 237, p894 * 103);
    v1278.bezierCurveTo(p894 * 276, p894 * 100, p894 * 289, p894 * 94, p894 * 301, p894 * 67);
    v1278.bezierCurveTo(p894 * 317, p894 * 112, p894 * 301, p894 * 141, p894 * 274, p894 * 139);
    v1278.bezierCurveTo(p894 * 204, p894 * 166, p894 * 197, p894 * 169, p894 * 173, p894 * 183);
    v1278.bezierCurveTo(p894 * 170, p894 * 183, p894 * 170, p894 * 183, p894 * 167, p894 * 183);
    v1278.bezierCurveTo(p894 * 132, p894 * 160, p894 * 112, p894 * 156, p894 * 73, p894 * 141);
    v1278.bezierCurveTo(p894 * 43, p894 * 146, p894 * 27, p894 * 120, p894 * 39, p894 * 66);
    v1278.closePath();
    f88(v1278, p896[7], p896[8], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 115, p894 * 185);
    v1278.bezierCurveTo(p894 * 115, p894 * 200, p894 * 118, p894 * 206, p894 * 124, p894 * 212);
    v1278.bezierCurveTo(p894 * 133, p894 * 223, p894 * 132, p894 * 231, p894 * 121, p894 * 230);
    v1278.bezierCurveTo(p894 * 108, p894 * 226, p894 * 108, p894 * 215, p894 * 107, p894 * 209);
    v1278.bezierCurveTo(p894 * 106, p894 * 201, p894 * 110, p894 * 196, p894 * 114, p894 * 185);
    v1278.closePath();
    f88(v1278, p896[3], p896[4], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 226, p894 * 186);
    v1278.bezierCurveTo(p894 * 234, p894 * 201, p894 * 238, p894 * 209, p894 * 228, p894 * 225);
    v1278.bezierCurveTo(p894 * 223, p894 * 233, p894 * 213, p894 * 233, p894 * 211, p894 * 226);
    v1278.bezierCurveTo(p894 * 206, p894 * 219, p894 * 217, p894 * 216, p894 * 221, p894 * 207);
    v1278.bezierCurveTo(p894 * 225, p894 * 196, p894 * 225, p894 * 191, p894 * 226, p894 * 186);
    v1278.closePath();
    f88(v1278, p896[3], p896[4], p894 * 8);
    v1278.beginPath();
    v1278.lineCap = "round";
    v1278.lineJoin = "round";
    v1278.moveTo(p894 * 172, p894 * 110);
    v1278.bezierCurveTo(p894 * 189, p894 * 153, p894 * 192, p894 * 160, p894 * 188, p894 * 175);
    v1278.bezierCurveTo(p894 * 183, p894 * 190, p894 * 176, p894 * 197, p894 * 165, p894 * 191);
    v1278.bezierCurveTo(p894 * 153, p894 * 181, p894 * 152, p894 * 166, p894 * 157, p894 * 151);
    v1278.bezierCurveTo(p894 * 164.5, p894 * 131, p894 * 164.5, p894 * 131, p894 * 172, p894 * 111);
    v1278.closePath();
    f88(v1278, p896[3], p896[4], p894 * 8);
    return v1277;
  }
  function f220(p897, p898) {
    var v1279 = document.createElement("canvas");
    var v1280 = v1279.getContext("2d");
    v1279.width = p897 * 120;
    v1279.height = p897 * 300;
    v1280.translate(p897 * -80, -20);
    v1280.beginPath();
    v1280.lineCap = "round";
    v1280.lineJoin = "round";
    v1280.moveTo(p897 * 200.5, p897 * 14.953125);
    v1280.bezierCurveTo(p897 * 203, p897 * 171.953125, p897 * 203, p897 * 171.953125, p897 * 205.5, p897 * 328.953125);
    v1280.bezierCurveTo(p897 * 188.5, p897 * 257.953125, p897 * 164.5, p897 * 216.953125, p897 * 166.5, p897 * 176.953125);
    v1280.bezierCurveTo(p897 * 168.5, p897 * 133.953125, p897 * 198.5, p897 * 98.953125, p897 * 200.5, p897 * 14.953125);
    v1280.closePath();
    f88(v1280, p898[0]);
    return v1279;
  }
  function f221(p899, p900) {
    var v1281 = document.createElement("canvas");
    var v1282 = v1281.getContext("2d");
    v1281.width = p899 * 271;
    v1281.height = p899 * 366;
    v1282.globalAlpha = 0.5;
    v1282.translate(0, p899 * 10);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 133, p899 * 99);
    v1282.bezierCurveTo(p899 * 186, p899 * 123, p899 * 199, p899 * 152, p899 * 209, p899 * 169);
    v1282.bezierCurveTo(p899 * 228, p899 * 205, p899 * 224, p899 * 245, p899 * 190, p899 * 276);
    v1282.bezierCurveTo(p899 * 161, p899 * 296, p899 * 99, p899 * 292, p899 * 79, p899 * 274);
    v1282.bezierCurveTo(p899 * 49, p899 * 253, p899 * 47, p899 * 214, p899 * 50, p899 * 197);
    v1282.bezierCurveTo(p899 * 61, p899 * 143, p899 * 102, p899 * 113, p899 * 131, p899 * 99);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 73, p899 * 270);
    v1282.bezierCurveTo(p899 * 79, p899 * 280, p899 * 77, p899 * 280, p899 * 78, p899 * 287);
    v1282.bezierCurveTo(p899 * 78, p899 * 290, p899 * 83, p899 * 291, p899 * 82, p899 * 299);
    v1282.bezierCurveTo(p899 * 81, p899 * 301, p899 * 87, p899 * 301, p899 * 92, p899 * 314);
    v1282.bezierCurveTo(p899 * 94, p899 * 319, p899 * 100, p899 * 321, p899 * 107, p899 * 320);
    v1282.bezierCurveTo(p899 * 111, p899 * 323, p899 * 114, p899 * 324, p899 * 119, p899 * 320);
    v1282.bezierCurveTo(p899 * 137, p899 * 321, p899 * 146, p899 * 323, p899 * 139, p899 * 320);
    v1282.bezierCurveTo(p899 * 141, p899 * 324, p899 * 150, p899 * 324, p899 * 153, p899 * 320);
    v1282.bezierCurveTo(p899 * 168, p899 * 319, p899 * 171, p899 * 316, p899 * 173, p899 * 307);
    v1282.bezierCurveTo(p899 * 180, p899 * 305, p899 * 180, p899 * 301, p899 * 178, p899 * 296);
    v1282.bezierCurveTo(p899 * 183, p899 * 296, p899 * 185, p899 * 289, p899 * 188, p899 * 279);
    v1282.bezierCurveTo(p899 * 171, p899 * 286, p899 * 149, p899 * 290, p899 * 132, p899 * 289);
    v1282.bezierCurveTo(p899 * 101, p899 * 290, p899 * 86, p899 * 280, p899 * 74, p899 * 271);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 76, p899 * 252);
    v1282.bezierCurveTo(p899 * 85, p899 * 294, p899 * 96, p899 * 314, p899 * 103, p899 * 314);
    v1282.bezierCurveTo(p899 * 106, p899 * 316, p899 * 151, p899 * 314, p899 * 156, p899 * 314);
    v1282.bezierCurveTo(p899 * 169, p899 * 317, p899 * 182, p899 * 285, p899 * 191, p899 * 256);
    v1282.bezierCurveTo(p899 * 134.5, p899 * 254, p899 * 134.5, p899 * 254, p899 * 78, p899 * 252);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 84, p899 * 257);
    v1282.bezierCurveTo(p899 * 122, p899 * 273, p899 * 146, p899 * 268, p899 * 179, p899 * 261);
    v1282.bezierCurveTo(p899 * 190, p899 * 258, p899 * 187, p899 * 266, p899 * 178, p899 * 272);
    v1282.bezierCurveTo(p899 * 160, p899 * 284, p899 * 123, p899 * 282, p899 * 100, p899 * 277);
    v1282.bezierCurveTo(p899 * 73, p899 * 260, p899 * 79, p899 * 257, p899 * 84, p899 * 257);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 125, p899 * 65);
    v1282.bezierCurveTo(p899 * 133, p899 * 45, p899 * 136, p899 * 42, p899 * 141, p899 * 55);
    v1282.bezierCurveTo(p899 * 151, p899 * 96, p899 * 164, p899 * 117, p899 * 175, p899 * 134);
    v1282.bezierCurveTo(p899 * 203, p899 * 181, p899 * 207, p899 * 182, p899 * 208, p899 * 215);
    v1282.bezierCurveTo(p899 * 206, p899 * 240, p899 * 205, p899 * 246, p899 * 184, p899 * 258);
    v1282.bezierCurveTo(p899 * 161, p899 * 267, p899 * 131, p899 * 272, p899 * 86, p899 * 258);
    v1282.bezierCurveTo(p899 * 67, p899 * 252, p899 * 68, p899 * 239, p899 * 64, p899 * 216);
    v1282.bezierCurveTo(p899 * 62, p899 * 194, p899 * 72, p899 * 169, p899 * 92, p899 * 142);
    v1282.bezierCurveTo(p899 * 106, p899 * 121, p899 * 114, p899 * 101, p899 * 125, p899 * 65);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 115, p899 * 37);
    v1282.bezierCurveTo(p899 * 116, p899 * 28, p899 * 119, p899 * 27, p899 * 126, p899 * 37);
    v1282.bezierCurveTo(p899 * 134, p899 * 48, p899 * 134, p899 * 49, p899 * 132, p899 * 59);
    v1282.bezierCurveTo(p899 * 131, p899 * 67, p899 * 127, p899 * 65, p899 * 120, p899 * 56);
    v1282.bezierCurveTo(p899 * 114, p899 * 49, p899 * 113, p899 * 43, p899 * 115, p899 * 38);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 146, p899 * 34);
    v1282.bezierCurveTo(p899 * 152, p899 * 28, p899 * 155, p899 * 27, p899 * 157, p899 * 39);
    v1282.bezierCurveTo(p899 * 157, p899 * 45, p899 * 157, p899 * 49, p899 * 150, p899 * 56);
    v1282.bezierCurveTo(p899 * 141, p899 * 66, p899 * 138, p899 * 66, p899 * 138, p899 * 57);
    v1282.bezierCurveTo(p899 * 137, p899 * 50, p899 * 137, p899 * 47, p899 * 141, p899 * 42);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 143, p899 * 69);
    v1282.bezierCurveTo(p899 * 148, p899 * 56, p899 * 156, p899 * 50, p899 * 158, p899 * 58);
    v1282.bezierCurveTo(p899 * 159, p899 * 64, p899 * 160, p899 * 67, p899 * 153, p899 * 77);
    v1282.bezierCurveTo(p899 * 148, p899 * 83, p899 * 145, p899 * 84, p899 * 143, p899 * 77);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 149, p899 * 92);
    v1282.bezierCurveTo(p899 * 149, p899 * 89, p899 * 151, p899 * 84, p899 * 156, p899 * 79);
    v1282.bezierCurveTo(p899 * 161, p899 * 73, p899 * 163, p899 * 78, p899 * 162, p899 * 86);
    v1282.bezierCurveTo(p899 * 161, p899 * 91, p899 * 155, p899 * 99, p899 * 152, p899 * 98);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 111, p899 * 61);
    v1282.bezierCurveTo(p899 * 114, p899 * 51, p899 * 117, p899 * 51, p899 * 124, p899 * 64);
    v1282.bezierCurveTo(p899 * 128, p899 * 68, p899 * 128, p899 * 76, p899 * 126, p899 * 79);
    v1282.bezierCurveTo(p899 * 123, p899 * 84, p899 * 122, p899 * 82, p899 * 115, p899 * 74);
    v1282.bezierCurveTo(p899 * 112, p899 * 67, p899 * 115, p899 * 74, p899 * 115, p899 * 74);
    v1282.bezierCurveTo(p899 * 111, p899 * 68, p899 * 111, p899 * 66, p899 * 111, p899 * 62);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 107, p899 * 81);
    v1282.bezierCurveTo(p899 * 108, p899 * 74, p899 * 112, p899 * 73, p899 * 118, p899 * 84);
    v1282.bezierCurveTo(p899 * 122, p899 * 88, p899 * 122, p899 * 93, p899 * 121, p899 * 98);
    v1282.bezierCurveTo(p899 * 114, p899 * 98, p899 * 113, p899 * 98, p899 * 109, p899 * 90);
    v1282.bezierCurveTo(p899 * 107, p899 * 87, p899 * 106, p899 * 85, p899 * 107, p899 * 82);
    v1282.closePath();
    f88(v1282, p900[0]);
    v1282.globalAlpha = 1;
    v1282.translate(0, p899 * -10);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 133, p899 * 99);
    v1282.bezierCurveTo(p899 * 186, p899 * 123, p899 * 199, p899 * 152, p899 * 209, p899 * 169);
    v1282.bezierCurveTo(p899 * 228, p899 * 205, p899 * 224, p899 * 245, p899 * 190, p899 * 276);
    v1282.bezierCurveTo(p899 * 161, p899 * 296, p899 * 99, p899 * 292, p899 * 79, p899 * 274);
    v1282.bezierCurveTo(p899 * 49, p899 * 253, p899 * 47, p899 * 214, p899 * 50, p899 * 197);
    v1282.bezierCurveTo(p899 * 61, p899 * 143, p899 * 102, p899 * 113, p899 * 131, p899 * 99);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 73, p899 * 270);
    v1282.bezierCurveTo(p899 * 79, p899 * 280, p899 * 77, p899 * 280, p899 * 78, p899 * 287);
    v1282.bezierCurveTo(p899 * 78, p899 * 290, p899 * 83, p899 * 291, p899 * 82, p899 * 299);
    v1282.bezierCurveTo(p899 * 81, p899 * 301, p899 * 87, p899 * 301, p899 * 92, p899 * 314);
    v1282.bezierCurveTo(p899 * 94, p899 * 319, p899 * 100, p899 * 321, p899 * 107, p899 * 320);
    v1282.bezierCurveTo(p899 * 111, p899 * 323, p899 * 114, p899 * 324, p899 * 119, p899 * 320);
    v1282.bezierCurveTo(p899 * 137, p899 * 321, p899 * 146, p899 * 323, p899 * 139, p899 * 320);
    v1282.bezierCurveTo(p899 * 141, p899 * 324, p899 * 150, p899 * 324, p899 * 153, p899 * 320);
    v1282.bezierCurveTo(p899 * 168, p899 * 319, p899 * 171, p899 * 316, p899 * 173, p899 * 307);
    v1282.bezierCurveTo(p899 * 180, p899 * 305, p899 * 180, p899 * 301, p899 * 178, p899 * 296);
    v1282.bezierCurveTo(p899 * 183, p899 * 296, p899 * 185, p899 * 289, p899 * 188, p899 * 279);
    v1282.bezierCurveTo(p899 * 171, p899 * 286, p899 * 149, p899 * 290, p899 * 132, p899 * 289);
    v1282.bezierCurveTo(p899 * 101, p899 * 290, p899 * 86, p899 * 280, p899 * 74, p899 * 271);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 76, p899 * 252);
    v1282.bezierCurveTo(p899 * 85, p899 * 294, p899 * 96, p899 * 314, p899 * 103, p899 * 314);
    v1282.bezierCurveTo(p899 * 106, p899 * 316, p899 * 151, p899 * 314, p899 * 156, p899 * 314);
    v1282.bezierCurveTo(p899 * 169, p899 * 317, p899 * 182, p899 * 285, p899 * 191, p899 * 256);
    v1282.bezierCurveTo(p899 * 134.5, p899 * 254, p899 * 134.5, p899 * 254, p899 * 78, p899 * 252);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 84, p899 * 257);
    v1282.bezierCurveTo(p899 * 122, p899 * 273, p899 * 146, p899 * 268, p899 * 179, p899 * 261);
    v1282.bezierCurveTo(p899 * 190, p899 * 258, p899 * 187, p899 * 266, p899 * 178, p899 * 272);
    v1282.bezierCurveTo(p899 * 160, p899 * 284, p899 * 123, p899 * 282, p899 * 100, p899 * 277);
    v1282.bezierCurveTo(p899 * 73, p899 * 260, p899 * 79, p899 * 257, p899 * 84, p899 * 257);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 125, p899 * 65);
    v1282.bezierCurveTo(p899 * 133, p899 * 45, p899 * 136, p899 * 42, p899 * 141, p899 * 55);
    v1282.bezierCurveTo(p899 * 151, p899 * 96, p899 * 164, p899 * 117, p899 * 175, p899 * 134);
    v1282.bezierCurveTo(p899 * 203, p899 * 181, p899 * 207, p899 * 182, p899 * 208, p899 * 215);
    v1282.bezierCurveTo(p899 * 206, p899 * 240, p899 * 205, p899 * 246, p899 * 184, p899 * 258);
    v1282.bezierCurveTo(p899 * 161, p899 * 267, p899 * 131, p899 * 272, p899 * 86, p899 * 258);
    v1282.bezierCurveTo(p899 * 67, p899 * 252, p899 * 68, p899 * 239, p899 * 64, p899 * 216);
    v1282.bezierCurveTo(p899 * 62, p899 * 194, p899 * 72, p899 * 169, p899 * 92, p899 * 142);
    v1282.bezierCurveTo(p899 * 106, p899 * 121, p899 * 114, p899 * 101, p899 * 125, p899 * 65);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 115, p899 * 37);
    v1282.bezierCurveTo(p899 * 116, p899 * 28, p899 * 119, p899 * 27, p899 * 126, p899 * 37);
    v1282.bezierCurveTo(p899 * 134, p899 * 48, p899 * 134, p899 * 49, p899 * 132, p899 * 59);
    v1282.bezierCurveTo(p899 * 131, p899 * 67, p899 * 127, p899 * 65, p899 * 120, p899 * 56);
    v1282.bezierCurveTo(p899 * 114, p899 * 49, p899 * 113, p899 * 43, p899 * 115, p899 * 38);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 146, p899 * 34);
    v1282.bezierCurveTo(p899 * 152, p899 * 28, p899 * 155, p899 * 27, p899 * 157, p899 * 39);
    v1282.bezierCurveTo(p899 * 157, p899 * 45, p899 * 157, p899 * 49, p899 * 150, p899 * 56);
    v1282.bezierCurveTo(p899 * 141, p899 * 66, p899 * 138, p899 * 66, p899 * 138, p899 * 57);
    v1282.bezierCurveTo(p899 * 137, p899 * 50, p899 * 137, p899 * 47, p899 * 141, p899 * 42);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 143, p899 * 69);
    v1282.bezierCurveTo(p899 * 148, p899 * 56, p899 * 156, p899 * 50, p899 * 158, p899 * 58);
    v1282.bezierCurveTo(p899 * 159, p899 * 64, p899 * 160, p899 * 67, p899 * 153, p899 * 77);
    v1282.bezierCurveTo(p899 * 148, p899 * 83, p899 * 145, p899 * 84, p899 * 143, p899 * 77);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 149, p899 * 92);
    v1282.bezierCurveTo(p899 * 149, p899 * 89, p899 * 151, p899 * 84, p899 * 156, p899 * 79);
    v1282.bezierCurveTo(p899 * 161, p899 * 73, p899 * 163, p899 * 78, p899 * 162, p899 * 86);
    v1282.bezierCurveTo(p899 * 161, p899 * 91, p899 * 155, p899 * 99, p899 * 152, p899 * 98);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 111, p899 * 61);
    v1282.bezierCurveTo(p899 * 114, p899 * 51, p899 * 117, p899 * 51, p899 * 124, p899 * 64);
    v1282.bezierCurveTo(p899 * 128, p899 * 68, p899 * 128, p899 * 76, p899 * 126, p899 * 79);
    v1282.bezierCurveTo(p899 * 123, p899 * 84, p899 * 122, p899 * 82, p899 * 115, p899 * 74);
    v1282.bezierCurveTo(p899 * 112, p899 * 67, p899 * 115, p899 * 74, p899 * 115, p899 * 74);
    v1282.bezierCurveTo(p899 * 111, p899 * 68, p899 * 111, p899 * 66, p899 * 111, p899 * 62);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 107, p899 * 81);
    v1282.bezierCurveTo(p899 * 108, p899 * 74, p899 * 112, p899 * 73, p899 * 118, p899 * 84);
    v1282.bezierCurveTo(p899 * 122, p899 * 88, p899 * 122, p899 * 93, p899 * 121, p899 * 98);
    v1282.bezierCurveTo(p899 * 114, p899 * 98, p899 * 113, p899 * 98, p899 * 109, p899 * 90);
    v1282.bezierCurveTo(p899 * 107, p899 * 87, p899 * 106, p899 * 85, p899 * 107, p899 * 82);
    v1282.closePath();
    f88(v1282, p900[3], p900[3], p899 * 8);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 133, p899 * 99);
    v1282.bezierCurveTo(p899 * 186, p899 * 123, p899 * 199, p899 * 152, p899 * 209, p899 * 169);
    v1282.bezierCurveTo(p899 * 228, p899 * 205, p899 * 224, p899 * 245, p899 * 190, p899 * 276);
    v1282.bezierCurveTo(p899 * 161, p899 * 296, p899 * 99, p899 * 292, p899 * 79, p899 * 274);
    v1282.bezierCurveTo(p899 * 49, p899 * 253, p899 * 47, p899 * 214, p899 * 50, p899 * 197);
    v1282.bezierCurveTo(p899 * 61, p899 * 143, p899 * 102, p899 * 113, p899 * 131, p899 * 99);
    v1282.closePath();
    f88(v1282, p900[1]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 73, p899 * 270);
    v1282.bezierCurveTo(p899 * 79, p899 * 280, p899 * 77, p899 * 280, p899 * 78, p899 * 287);
    v1282.bezierCurveTo(p899 * 78, p899 * 290, p899 * 83, p899 * 291, p899 * 82, p899 * 299);
    v1282.bezierCurveTo(p899 * 81, p899 * 301, p899 * 87, p899 * 301, p899 * 92, p899 * 314);
    v1282.bezierCurveTo(p899 * 94, p899 * 319, p899 * 100, p899 * 321, p899 * 107, p899 * 320);
    v1282.bezierCurveTo(p899 * 111, p899 * 323, p899 * 114, p899 * 324, p899 * 119, p899 * 320);
    v1282.bezierCurveTo(p899 * 137, p899 * 321, p899 * 146, p899 * 323, p899 * 139, p899 * 320);
    v1282.bezierCurveTo(p899 * 141, p899 * 324, p899 * 150, p899 * 324, p899 * 153, p899 * 320);
    v1282.bezierCurveTo(p899 * 168, p899 * 319, p899 * 171, p899 * 316, p899 * 173, p899 * 307);
    v1282.bezierCurveTo(p899 * 180, p899 * 305, p899 * 180, p899 * 301, p899 * 178, p899 * 296);
    v1282.bezierCurveTo(p899 * 183, p899 * 296, p899 * 185, p899 * 289, p899 * 188, p899 * 279);
    v1282.bezierCurveTo(p899 * 171, p899 * 286, p899 * 149, p899 * 290, p899 * 132, p899 * 289);
    v1282.bezierCurveTo(p899 * 101, p899 * 290, p899 * 86, p899 * 280, p899 * 74, p899 * 271);
    v1282.closePath();
    f88(v1282, p900[5]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 76, p899 * 252);
    v1282.bezierCurveTo(p899 * 85, p899 * 294, p899 * 96, p899 * 314, p899 * 103, p899 * 314);
    v1282.bezierCurveTo(p899 * 106, p899 * 316, p899 * 151, p899 * 314, p899 * 156, p899 * 314);
    v1282.bezierCurveTo(p899 * 169, p899 * 317, p899 * 182, p899 * 285, p899 * 191, p899 * 256);
    v1282.bezierCurveTo(p899 * 134.5, p899 * 254, p899 * 134.5, p899 * 254, p899 * 78, p899 * 252);
    v1282.closePath();
    f88(v1282, p900[2]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 84, p899 * 257);
    v1282.bezierCurveTo(p899 * 122, p899 * 273, p899 * 146, p899 * 268, p899 * 179, p899 * 261);
    v1282.bezierCurveTo(p899 * 190, p899 * 258, p899 * 187, p899 * 266, p899 * 178, p899 * 272);
    v1282.bezierCurveTo(p899 * 160, p899 * 284, p899 * 123, p899 * 282, p899 * 100, p899 * 277);
    v1282.bezierCurveTo(p899 * 73, p899 * 260, p899 * 79, p899 * 257, p899 * 84, p899 * 257);
    v1282.closePath();
    f88(v1282, p900[1]);
    f92(v1282, p899 * 102, p899 * 269, p899 * 11);
    f88(v1282, p900[3]);
    f92(v1282, p899 * 98, p899 * 266, p899 * 5);
    f88(v1282, p900[6]);
    f92(v1282, p899 * 168, p899 * 269, p899 * 11);
    f88(v1282, p900[3]);
    f92(v1282, p899 * 164, p899 * 266, p899 * 5);
    f88(v1282, p900[6]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 125, p899 * 65);
    v1282.bezierCurveTo(p899 * 133, p899 * 45, p899 * 136, p899 * 42, p899 * 141, p899 * 55);
    v1282.bezierCurveTo(p899 * 151, p899 * 96, p899 * 164, p899 * 117, p899 * 175, p899 * 134);
    v1282.bezierCurveTo(p899 * 203, p899 * 181, p899 * 207, p899 * 182, p899 * 208, p899 * 215);
    v1282.bezierCurveTo(p899 * 206, p899 * 240, p899 * 205, p899 * 246, p899 * 184, p899 * 258);
    v1282.bezierCurveTo(p899 * 161, p899 * 267, p899 * 131, p899 * 272, p899 * 86, p899 * 258);
    v1282.bezierCurveTo(p899 * 67, p899 * 252, p899 * 68, p899 * 239, p899 * 64, p899 * 216);
    v1282.bezierCurveTo(p899 * 62, p899 * 194, p899 * 72, p899 * 169, p899 * 92, p899 * 142);
    v1282.bezierCurveTo(p899 * 106, p899 * 121, p899 * 114, p899 * 101, p899 * 125, p899 * 65);
    v1282.closePath();
    f88(v1282, p900[2]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 115, p899 * 235);
    v1282.bezierCurveTo(p899 * 118, p899 * 258, p899 * 137, p899 * 268, p899 * 148, p899 * 246);
    v1282.bezierCurveTo(p899 * 156, p899 * 228, p899 * 152, p899 * 169, p899 * 150, p899 * 140);
    v1282.bezierCurveTo(p899 * 147, p899 * 87, p899 * 143, p899 * 69, p899 * 142, p899 * 60);
    v1282.bezierCurveTo(p899 * 136, p899 * 44, p899 * 132, p899 * 43, p899 * 127, p899 * 62);
    v1282.bezierCurveTo(p899 * 119, p899 * 116, p899 * 119, p899 * 140, p899 * 116, p899 * 166);
    v1282.bezierCurveTo(p899 * 113, p899 * 202, p899 * 113, p899 * 223, p899 * 115, p899 * 233);
    v1282.closePath();
    f88(v1282, p900[4]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 132, p899 * 219);
    v1282.bezierCurveTo(p899 * 140, p899 * 229, p899 * 142, p899 * 231, p899 * 145, p899 * 237);
    v1282.bezierCurveTo(p899 * 145, p899 * 245, p899 * 139, p899 * 249, p899 * 133, p899 * 249);
    v1282.bezierCurveTo(p899 * 123, p899 * 248, p899 * 123, p899 * 243, p899 * 121, p899 * 239);
    v1282.bezierCurveTo(p899 * 126, p899 * 227, p899 * 129, p899 * 223, p899 * 132, p899 * 219);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 133, p899 * 179);
    v1282.bezierCurveTo(p899 * 140, p899 * 188.5, p899 * 140, p899 * 188.5, p899 * 147, p899 * 198);
    v1282.bezierCurveTo(p899 * 148, p899 * 209, p899 * 142, p899 * 214, p899 * 133, p899 * 214);
    v1282.bezierCurveTo(p899 * 121, p899 * 211, p899 * 121, p899 * 207, p899 * 120, p899 * 200);
    v1282.bezierCurveTo(p899 * 126.5, p899 * 189.5, p899 * 126.5, p899 * 189.5, p899 * 133, p899 * 179);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 133, p899 * 143);
    v1282.bezierCurveTo(p899 * 139, p899 * 151.5, p899 * 139, p899 * 151.5, p899 * 145, p899 * 160);
    v1282.bezierCurveTo(p899 * 143, p899 * 167, p899 * 140, p899 * 170, p899 * 134, p899 * 170);
    v1282.bezierCurveTo(p899 * 128, p899 * 169, p899 * 124, p899 * 167, p899 * 123, p899 * 161);
    v1282.bezierCurveTo(p899 * 128, p899 * 152, p899 * 128, p899 * 152, p899 * 133, p899 * 143);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 133, p899 * 115);
    v1282.bezierCurveTo(p899 * 137.5, p899 * 121.5, p899 * 137.5, p899 * 121.5, p899 * 142, p899 * 128);
    v1282.bezierCurveTo(p899 * 141, p899 * 133, p899 * 138, p899 * 135, p899 * 133, p899 * 135);
    v1282.bezierCurveTo(p899 * 129, p899 * 135, p899 * 125, p899 * 132, p899 * 125, p899 * 129);
    v1282.bezierCurveTo(p899 * 129, p899 * 122, p899 * 129, p899 * 122, p899 * 133, p899 * 115);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 133, p899 * 94);
    v1282.bezierCurveTo(p899 * 136.5, p899 * 98.5, p899 * 136.5, p899 * 98.5, p899 * 140, p899 * 103);
    v1282.bezierCurveTo(p899 * 139, p899 * 109, p899 * 137, p899 * 109, p899 * 133, p899 * 110);
    v1282.bezierCurveTo(p899 * 127, p899 * 108, p899 * 129, p899 * 107, p899 * 127, p899 * 105);
    v1282.bezierCurveTo(p899 * 130, p899 * 99.5, p899 * 130, p899 * 99.5, p899 * 133, p899 * 94);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 130, p899 * 279);
    v1282.bezierCurveTo(p899 * 136.5, p899 * 287.5, p899 * 136.5, p899 * 287.5, p899 * 143, p899 * 296);
    v1282.bezierCurveTo(p899 * 143, p899 * 302, p899 * 139, p899 * 309, p899 * 131, p899 * 308);
    v1282.bezierCurveTo(p899 * 123, p899 * 306, p899 * 121, p899 * 303, p899 * 120, p899 * 297);
    v1282.bezierCurveTo(p899 * 125.5, p899 * 288.5, p899 * 125.5, p899 * 288.5, p899 * 131, p899 * 280);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 147, p899 * 303);
    v1282.bezierCurveTo(p899 * 151, p899 * 311, p899 * 151, p899 * 319, p899 * 147, p899 * 321);
    v1282.bezierCurveTo(p899 * 138, p899 * 320, p899 * 145, p899 * 308, p899 * 147, p899 * 303);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 115, p899 * 303);
    v1282.bezierCurveTo(p899 * 115, p899 * 312, p899 * 118, p899 * 319, p899 * 115, p899 * 319);
    v1282.bezierCurveTo(p899 * 112, p899 * 324, p899 * 109, p899 * 318, p899 * 109, p899 * 314);
    v1282.bezierCurveTo(p899 * 109, p899 * 308, p899 * 112, p899 * 303, p899 * 115, p899 * 303);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 89, p899 * 280);
    v1282.bezierCurveTo(p899 * 83, p899 * 279, p899 * 80, p899 * 281, p899 * 81, p899 * 286);
    v1282.bezierCurveTo(p899 * 83, p899 * 290, p899 * 84, p899 * 290, p899 * 87, p899 * 286);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 94, p899 * 290);
    v1282.bezierCurveTo(p899 * 93, p899 * 294, p899 * 90, p899 * 303, p899 * 86, p899 * 298);
    v1282.bezierCurveTo(p899 * 84, p899 * 295, p899 * 84, p899 * 291, p899 * 89, p899 * 291);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 163, p899 * 295);
    v1282.bezierCurveTo(p899 * 175, p899 * 294, p899 * 176, p899 * 296, p899 * 175, p899 * 301);
    v1282.bezierCurveTo(p899 * 174, p899 * 305, p899 * 171, p899 * 305, p899 * 166, p899 * 300);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 172, p899 * 286);
    v1282.bezierCurveTo(p899 * 180, p899 * 285, p899 * 181, p899 * 285, p899 * 180, p899 * 291);
    v1282.bezierCurveTo(p899 * 176, p899 * 295, p899 * 174, p899 * 294, p899 * 172, p899 * 286);
    v1282.closePath();
    f88(v1282, p900[8]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 115, p899 * 37);
    v1282.bezierCurveTo(p899 * 116, p899 * 28, p899 * 119, p899 * 27, p899 * 126, p899 * 37);
    v1282.bezierCurveTo(p899 * 134, p899 * 48, p899 * 134, p899 * 49, p899 * 132, p899 * 59);
    v1282.bezierCurveTo(p899 * 131, p899 * 67, p899 * 127, p899 * 65, p899 * 120, p899 * 56);
    v1282.bezierCurveTo(p899 * 114, p899 * 49, p899 * 113, p899 * 43, p899 * 115, p899 * 38);
    v1282.closePath();
    f88(v1282, p900[7]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 146, p899 * 34);
    v1282.bezierCurveTo(p899 * 152, p899 * 28, p899 * 155, p899 * 27, p899 * 157, p899 * 39);
    v1282.bezierCurveTo(p899 * 157, p899 * 45, p899 * 157, p899 * 49, p899 * 150, p899 * 56);
    v1282.bezierCurveTo(p899 * 141, p899 * 66, p899 * 138, p899 * 66, p899 * 138, p899 * 57);
    v1282.bezierCurveTo(p899 * 137, p899 * 50, p899 * 137, p899 * 47, p899 * 141, p899 * 42);
    v1282.closePath();
    f88(v1282, p900[7]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 143, p899 * 69);
    v1282.bezierCurveTo(p899 * 148, p899 * 56, p899 * 156, p899 * 50, p899 * 158, p899 * 58);
    v1282.bezierCurveTo(p899 * 159, p899 * 64, p899 * 160, p899 * 67, p899 * 153, p899 * 77);
    v1282.bezierCurveTo(p899 * 148, p899 * 83, p899 * 145, p899 * 84, p899 * 143, p899 * 77);
    v1282.closePath();
    f88(v1282, p900[7]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 149, p899 * 92);
    v1282.bezierCurveTo(p899 * 149, p899 * 89, p899 * 151, p899 * 84, p899 * 156, p899 * 79);
    v1282.bezierCurveTo(p899 * 161, p899 * 73, p899 * 163, p899 * 78, p899 * 162, p899 * 86);
    v1282.bezierCurveTo(p899 * 161, p899 * 91, p899 * 155, p899 * 99, p899 * 152, p899 * 98);
    v1282.closePath();
    f88(v1282, p900[7]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 111, p899 * 61);
    v1282.bezierCurveTo(p899 * 114, p899 * 51, p899 * 117, p899 * 51, p899 * 124, p899 * 64);
    v1282.bezierCurveTo(p899 * 128, p899 * 68, p899 * 128, p899 * 76, p899 * 126, p899 * 79);
    v1282.bezierCurveTo(p899 * 123, p899 * 84, p899 * 122, p899 * 82, p899 * 115, p899 * 74);
    v1282.bezierCurveTo(p899 * 112, p899 * 67, p899 * 115, p899 * 74, p899 * 115, p899 * 74);
    v1282.bezierCurveTo(p899 * 111, p899 * 68, p899 * 111, p899 * 66, p899 * 111, p899 * 62);
    v1282.closePath();
    f88(v1282, p900[7]);
    v1282.beginPath();
    v1282.lineCap = "round";
    v1282.lineJoin = "round";
    v1282.moveTo(p899 * 107, p899 * 81);
    v1282.bezierCurveTo(p899 * 108, p899 * 74, p899 * 112, p899 * 73, p899 * 118, p899 * 84);
    v1282.bezierCurveTo(p899 * 122, p899 * 88, p899 * 122, p899 * 93, p899 * 121, p899 * 98);
    v1282.bezierCurveTo(p899 * 114, p899 * 98, p899 * 113, p899 * 98, p899 * 109, p899 * 90);
    v1282.bezierCurveTo(p899 * 107, p899 * 87, p899 * 106, p899 * 85, p899 * 107, p899 * 82);
    v1282.closePath();
    f88(v1282, p900[7]);
    return v1281;
  }
  function f222(p901, p902) {
    var v1283 = document.createElement("canvas");
    var v1284 = v1283.getContext("2d");
    v1283.width = p901 * 120;
    v1283.height = p901 * 330;
    v1284.translate(p901 * -60, p901 * -10);
    v1284.beginPath();
    v1284.lineCap = "round";
    v1284.lineJoin = "round";
    v1284.moveTo(p901 * 188.5, p901 * 7.953125);
    v1284.bezierCurveTo(p901 * 188.5, p901 * 334.953125, p901 * 188.5, p901 * 332.953125, p901 * 188.5, p901 * 339.953125);
    v1284.bezierCurveTo(p901 * 166.5, p901 * 295.953125, p901 * 145.5, p901 * 295.953125, p901 * 139.5, p901 * 282.953125);
    v1284.bezierCurveTo(p901 * 124.5, p901 * 244.953125, p901 * 139.5, p901 * 243.953125, p901 * 131.5, p901 * 212.953125);
    v1284.bezierCurveTo(p901 * 118.5, p901 * 161.953125, p901 * 69.5, p901 * 156.953125, p901 * 74.5, p901 * 92.953125);
    v1284.bezierCurveTo(p901 * 85.5, p901 * 41.953125, p901 * 158.5, p901 * 49.953125, p901 * 188.5, p901 * 7.953125);
    v1284.closePath();
    f88(v1284, p902[0]);
    return v1283;
  }
  function f223(p903, p904, p905) {
    var v1285 = document.createElement("canvas");
    var v1286 = v1285.getContext("2d");
    v1285.width = p903 * 187;
    v1285.height = p903 * 119;
    v1286.globalAlpha = p904 ? 0.5 : 1;
    v1286.beginPath();
    v1286.lineCap = "round";
    v1286.lineJoin = "round";
    v1286.translate(0, 3);
    v1286.moveTo(p903 * 53, p903 * 45);
    v1286.bezierCurveTo(p903 * 3, p903 * 60, p903 * 11, p903 * 72, p903 * 19, p903 * 81);
    v1286.bezierCurveTo(p903 * 28, p903 * 82, p903 * 24, p903 * 81, p903 * 29, p903 * 82);
    v1286.bezierCurveTo(p903 * 26, p903 * 87, p903 * 28, p903 * 84, p903 * 28, p903 * 87);
    v1286.bezierCurveTo(p903 * 63, p903 * 101, p903 * 92, p903 * 100, p903 * 138, p903 * 93);
    v1286.bezierCurveTo(p903 * 172, p903 * 87, p903 * 180, p903 * 72, p903 * 168, p903 * 62);
    v1286.bezierCurveTo(p903 * 154, p903 * 51, p903 * 150, p903 * 50, p903 * 148, p903 * 49);
    v1286.bezierCurveTo(p903 * 132, p903 * 42, p903 * 90, p903 * 40, p903 * 55, p903 * 45);
    v1286.closePath();
    f88(v1286, p905[5]);
    v1286.globalAlpha = 1;
    v1286.beginPath();
    v1286.lineCap = "round";
    v1286.lineJoin = "round";
    v1286.translate(0, -3);
    v1286.moveTo(p903 * 53, p903 * 45);
    v1286.bezierCurveTo(p903 * 3, p903 * 60, p903 * 11, p903 * 72, p903 * 19, p903 * 81);
    v1286.bezierCurveTo(p903 * 28, p903 * 82, p903 * 24, p903 * 81, p903 * 29, p903 * 82);
    v1286.bezierCurveTo(p903 * 26, p903 * 87, p903 * 28, p903 * 84, p903 * 28, p903 * 87);
    v1286.bezierCurveTo(p903 * 63, p903 * 101, p903 * 92, p903 * 100, p903 * 138, p903 * 93);
    v1286.bezierCurveTo(p903 * 172, p903 * 87, p903 * 180, p903 * 72, p903 * 168, p903 * 62);
    v1286.bezierCurveTo(p903 * 154, p903 * 51, p903 * 150, p903 * 50, p903 * 148, p903 * 49);
    v1286.bezierCurveTo(p903 * 132, p903 * 42, p903 * 90, p903 * 40, p903 * 55, p903 * 45);
    v1286.closePath();
    f88(v1286, p905[0], p905[1], p903 * 4);
    v1286.beginPath();
    v1286.lineCap = "round";
    v1286.lineJoin = "round";
    v1286.moveTo(p903 * 151, p903 * 60);
    v1286.bezierCurveTo(p903 * 140, p903 * 36, p903 * 137, p903 * 32, p903 * 124, p903 * 29);
    v1286.bezierCurveTo(p903 * 98, p903 * 22, p903 * 80, p903 * 24, p903 * 62, p903 * 28);
    v1286.bezierCurveTo(p903 * 42, p903 * 35, p903 * 38, p903 * 46, p903 * 34, p903 * 58);
    v1286.bezierCurveTo(p903 * 53, p903 * 74, p903 * 76, p903 * 76, p903 * 91, p903 * 78);
    v1286.closePath();
    f88(v1286, p905[0], p905[1], p903 * 4);
    v1286.beginPath();
    v1286.lineCap = "round";
    v1286.lineJoin = "round";
    v1286.moveTo(p903 * 37, p903 * 53);
    v1286.bezierCurveTo(p903 * 30, p903 * 56, p903 * 29, p903 * 67, p903 * 30, p903 * 68);
    v1286.bezierCurveTo(p903 * 94, p903 * 108, p903 * 150, p903 * 76, p903 * 155, p903 * 70);
    v1286.bezierCurveTo(p903 * 154, p903 * 60, p903 * 151, p903 * 54, p903 * 149, p903 * 53);
    v1286.bezierCurveTo(p903 * 101, p903 * 74, p903 * 66, p903 * 66, p903 * 37, p903 * 53);
    v1286.closePath();
    f88(v1286, p905[2], p905[3], p903 * 4);
    v1286.beginPath();
    v1286.lineCap = "round";
    v1286.lineJoin = "round";
    v1286.moveTo(p903 * 100, p903 * 36);
    v1286.bezierCurveTo(p903 * 92, p903 * 25, p903 * 86, p903 * 28, p903 * 82, p903 * 34);
    v1286.bezierCurveTo(p903 * 88, p903 * 40, p903 * 93, p903 * 40, p903 * 98, p903 * 36);
    v1286.closePath();
    f88(v1286, p905[0], p905[1], p903 * 4);
    v1286.beginPath();
    v1286.lineCap = "round";
    v1286.lineJoin = "round";
    v1286.moveTo(p903 * 80, p903 * 43);
    v1286.bezierCurveTo(p903 * 69, p903 * 46, p903 * 67, p903 * 52, p903 * 69, p903 * 58);
    f88(v1286, vVVUndefined5, p905[1], p903 * 4);
    f92(v1286, p903 * 58, p903 * 50, p903 * 5);
    f88(v1286, p905[4]);
    f92(v1286, p903 * 43, p903 * 65, p903 * 5);
    f88(v1286, p905[4]);
    f92(v1286, p903 * 58, p903 * 73, p903 * 5);
    f88(v1286, p905[4]);
    f92(v1286, p903 * 58, p903 * 50, p903 * 2);
    f88(v1286, p905[5]);
    f92(v1286, p903 * 43, p903 * 65, p903 * 2);
    f88(v1286, p905[5]);
    f92(v1286, p903 * 58, p903 * 73, p903 * 2);
    f88(v1286, p905[5]);
    return v1285;
  }
  function f224(p906, p907) {
    var v1287 = document.createElement("canvas");
    var v1288 = v1287.getContext("2d");
    v1287.width = p906 * 173;
    v1287.height = p906 * 178;
    v1288.globalAlpha = 0.5;
    f92(v1288, p906 * 86.5, p906 * 98, p906 * 80);
    f88(v1288, p907[0]);
    v1288.globalAlpha = 1;
    f92(v1288, p906 * 86.5, p906 * 89, p906 * 81);
    f88(v1288, p907[1], p907[2], p906 * 4);
    f92(v1288, p906 * 86.5, p906 * 86, p906 * 59);
    f88(v1288, p907[3], p907[4], p906 * 4);
    v1288.globalAlpha = 0.5;
    f92(v1288, p906 * 86.5, p906 * 95, p906 * 34);
    f88(v1288, p907[0]);
    v1288.globalAlpha = 1;
    f92(v1288, p906 * 86.5, p906 * 89, p906 * 34);
    f88(v1288, p907[5]);
    return v1287;
  }
  function f225(p908, p909) {
    var v1289 = document.createElement("canvas");
    var v1290 = v1289.getContext("2d");
    v1289.width = p908 * 48;
    v1289.height = p908 * 47;
    v1290.beginPath();
    v1290.lineCap = "round";
    v1290.lineJoin = "round";
    v1290.moveTo(p908 * 7.1875, p908 * 25.434661865234375);
    v1290.bezierCurveTo(p908 * 11.1875, p908 * 13.434661865234375, p908 * 18.1875, p908 * 8.434661865234375, p908 * 32.1875, p908 * 10.434661865234375);
    v1290.bezierCurveTo(p908 * 45.1875, p908 * 14.434661865234375, p908 * 41.1875, p908 * 24.434661865234375, p908 * 36.1875, p908 * 30.434661865234375);
    v1290.bezierCurveTo(p908 * 22.1875, p908 * 42.434661865234375, p908 * 2.1875, p908 * 41.434661865234375, p908 * 7.1875, p908 * 25.434661865234375);
    v1290.closePath();
    f88(v1290, p909[0]);
    return v1289;
  }
  function f226(p910, p911) {
    var v1291 = document.createElement("canvas");
    var v1292 = v1291.getContext("2d");
    v1291.width = p910 * 20;
    v1291.height = p910 * 35;
    f86(v1292, 0, 0, 20, 35, 7);
    f88(v1292, p911[0]);
    return v1291;
  }
  function f227(p912, p913) {
    var v1293 = document.createElement("canvas");
    var v1294 = v1293.getContext("2d");
    v1293.width = p912 * 33;
    v1293.height = p912 * 35;
    v1294.beginPath();
    v1294.lineCap = "round";
    v1294.lineJoin = "round";
    v1294.moveTo(p912 * 12.75, p912 * 7.1328125);
    v1294.bezierCurveTo(p912 * 26.75, p912 * 8.1328125, p912 * 27.75, p912 * 14.1328125, p912 * 24.75, p912 * 23.1328125);
    v1294.bezierCurveTo(p912 * 19.75, p912 * 31.1328125, p912 * 15.75, p912 * 33.1328125, p912 * 6.75, p912 * 26.1328125);
    v1294.bezierCurveTo(p912 * 0.75, p912 * 19.1328125, p912 * 4.75, p912 * 8.1328125, p912 * 12.75, p912 * 7.1328125);
    v1294.closePath();
    f88(v1294, p913[0]);
    return v1293;
  }
  function f228(p914, p915) {
    var v1295 = document.createElement("canvas");
    var v1296 = v1295.getContext("2d");
    v1295.width = p914 * 120;
    v1295.height = p914 * 280;
    v1296.translate(p914 * -100, p914 * -20);
    v1296.beginPath();
    v1296.lineCap = "round";
    v1296.lineJoin = "round";
    v1296.moveTo(p914 * 228.5, p914 * 331.953125);
    v1296.bezierCurveTo(p914 * 228.5, p914 * 12.953125, p914 * 228.5, p914 * 171.453125, p914 * 228.5, p914 * 10.953125);
    v1296.bezierCurveTo(p914 * 196.5, p914 * 76.953125, p914 * 206.5, p914 * 78.953125, p914 * 191.5, p914 * 114.953125);
    v1296.bezierCurveTo(p914 * 162.5, p914 * 170.953125, p914 * 206.5, p914 * 220.953125, p914 * 210.5, p914 * 251.953125);
    v1296.bezierCurveTo(p914 * 218.5, p914 * 287.953125, p914 * 220.5, p914 * 291.953125, p914 * 228.5, p914 * 331.953125);
    v1296.closePath();
    f88(v1296, p915[0]);
    return v1295;
  }
  function f229(p916, p917) {
    var v1297 = document.createElement("canvas");
    var v1298 = v1297.getContext("2d");
    v1297.width = p916 * 85;
    v1297.height = p916 * 145;
    v1298.translate(p916 * -20, p916 * -95);
    v1298.beginPath();
    v1298.lineCap = "round";
    v1298.lineJoin = "round";
    v1298.moveTo(p916 * 50, p916 * 105);
    v1298.bezierCurveTo(p916 * 52, p916 * 119, p916 * 64, p916 * 137, p916 * 71, p916 * 146);
    v1298.bezierCurveTo(p916 * 71, p916 * 161, p916 * 74, p916 * 169, p916 * 79, p916 * 179);
    v1298.bezierCurveTo(p916 * 68, p916 * 192, p916 * 70, p916 * 204, p916 * 69, p916 * 216);
    v1298.bezierCurveTo(p916 * 50, p916 * 189.5, p916 * 50, p916 * 189.5, p916 * 31, p916 * 163);
    v1298.closePath();
    f88(v1298, p917[1]);
    v1298.beginPath();
    v1298.lineCap = "round";
    v1298.lineJoin = "round";
    v1298.moveTo(p916 * 44, p916 * 106);
    v1298.bezierCurveTo(p916 * 49, p916 * 90, p916 * 58, p916 * 104, p916 * 51, p916 * 121);
    v1298.bezierCurveTo(p916 * 45, p916 * 143, p916 * 41, p916 * 151, p916 * 37, p916 * 162);
    v1298.bezierCurveTo(p916 * 48, p916 * 180, p916 * 58, p916 * 188, p916 * 76, p916 * 205);
    v1298.bezierCurveTo(p916 * 104, p916 * 209, p916 * 105, p916 * 229, p916 * 92, p916 * 235);
    v1298.bezierCurveTo(p916 * 76, p916 * 239, p916 * 75, p916 * 232, p916 * 56, p916 * 213);
    v1298.bezierCurveTo(p916 * 31, p916 * 187, p916 * 28, p916 * 176, p916 * 23, p916 * 162);
    v1298.bezierCurveTo(p916 * 38, p916 * 131, p916 * 40, p916 * 120, p916 * 44, p916 * 106);
    v1298.closePath();
    f88(v1298, p917[2], p917[3], p916 * 4);
    v1298.beginPath();
    v1298.lineCap = "round";
    v1298.lineJoin = "round";
    v1298.moveTo(p916 * 30, p916 * 159);
    v1298.bezierCurveTo(p916 * 46, p916 * 157, p916 * 59, p916 * 152, p916 * 68, p916 * 148);
    v1298.bezierCurveTo(p916 * 63, p916 * 155, p916 * 52, p916 * 160, p916 * 44, p916 * 164);
    v1298.bezierCurveTo(p916 * 59, p916 * 169, p916 * 66, p916 * 174, p916 * 75, p916 * 178);
    v1298.bezierCurveTo(p916 * 58, p916 * 178, p916 * 49, p916 * 175, p916 * 37, p916 * 174);
    v1298.closePath();
    f88(v1298, p917[2]);
    return v1297;
  }
  function f230(p918, p919) {
    var v1299 = document.createElement("canvas");
    var v1300 = v1299.getContext("2d");
    v1299.width = p918 * 100;
    v1299.height = p918 * 100;
    v1300.globalAlpha = 0.5;
    v1300.fillStyle = p919[0];
    v1300.fillRect(0, 0, v1299.width, v1299.height);
    return v1299;
  }
  function f231(p920, p921, p922) {
    var v1301 = document.createElement("canvas");
    var v1302 = v1301.getContext("2d");
    v1301.width = p920 * 161;
    v1301.height = p920 * 184;
    v1302.translate(0, p920 * 10);
    v1302.globalAlpha = 1;
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 105.5, p920 * 34.609375);
    v1302.bezierCurveTo(p920 * 48.5, p920 * 7.609375, p920 * 11.5, p920 * 58.609375, p920 * 20.5, p920 * 97.609375);
    v1302.bezierCurveTo(p920 * 44.5, p920 * 161.609375, p920 * 70.5, p920 * 171.609375, p920 * 88.5, p920 * 156.609375);
    v1302.bezierCurveTo(p920 * 120.5, p920 * 129.609375, p920 * 123.5, p920 * 105.609375, p920 * 128.5, p920 * 83.609375);
    v1302.bezierCurveTo(p920 * 137.5, p920 * 79.609375, p920 * 141.5, p920 * 79.609375, p920 * 146.5, p920 * 81.609375);
    v1302.bezierCurveTo(p920 * 153.5, p920 * 70.609375, p920 * 151.5, p920 * 65.609375, p920 * 148.5, p920 * 61.609375);
    v1302.bezierCurveTo(p920 * 134.5, p920 * 60.609375, p920 * 131.5, p920 * 63.609375, p920 * 127.5, p920 * 66.609375);
    v1302.bezierCurveTo(p920 * 127.5, p920 * 55.609375, p920 * 125.5, p920 * 54.609375, p920 * 120.5, p920 * 51.609375);
    v1302.bezierCurveTo(p920 * 128.5, p920 * 42.609375, p920 * 136.5, p920 * 38.609375, p920 * 147.5, p920 * 39.609375);
    v1302.bezierCurveTo(p920 * 152.5, p920 * 23.609375, p920 * 147.5, p920 * 21.609375, p920 * 140.5, p920 * 17.609375);
    v1302.bezierCurveTo(p920 * 120.5, p920 * 17.609375, p920 * 114.5, p920 * 27.609375, p920 * 106.5, p920 * 35.609375);
    v1302.closePath();
    f88(v1302, p922[0]);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 45.5, p920 * 144.609375);
    v1302.bezierCurveTo(p920 * 35.5, p920 * 155.609375, p920 * 37, p920 * 152.109375, p920 * 28.5, p920 * 159.609375);
    v1302.bezierCurveTo(p920 * 16.5, p920 * 154.609375, p920 * 16.5, p920 * 151.609375, p920 * 17.5, p920 * 141.609375);
    v1302.bezierCurveTo(p920 * 25.5, p920 * 134.109375, p920 * 25.5, p920 * 134.109375, p920 * 33.5, p920 * 126.609375);
    f88(v1302, p922[0]);
    v1302.translate(0, p920 * -10);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 45.5, p920 * 144.609375);
    v1302.bezierCurveTo(p920 * 35.5, p920 * 155.609375, p920 * 37, p920 * 152.109375, p920 * 28.5, p920 * 159.609375);
    v1302.bezierCurveTo(p920 * 16.5, p920 * 154.609375, p920 * 16.5, p920 * 151.609375, p920 * 17.5, p920 * 141.609375);
    v1302.bezierCurveTo(p920 * 25.5, p920 * 134.109375, p920 * 25.5, p920 * 134.109375, p920 * 33.5, p920 * 126.609375);
    f88(v1302, p922[1], p922[2], p920 * 8);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 105.5, p920 * 34.609375);
    v1302.bezierCurveTo(p920 * 48.5, p920 * 7.609375, p920 * 11.5, p920 * 58.609375, p920 * 20.5, p920 * 97.609375);
    v1302.bezierCurveTo(p920 * 44.5, p920 * 161.609375, p920 * 70.5, p920 * 171.609375, p920 * 88.5, p920 * 156.609375);
    v1302.bezierCurveTo(p920 * 120.5, p920 * 129.609375, p920 * 123.5, p920 * 105.609375, p920 * 128.5, p920 * 83.609375);
    v1302.bezierCurveTo(p920 * 137.5, p920 * 79.609375, p920 * 141.5, p920 * 79.609375, p920 * 146.5, p920 * 81.609375);
    v1302.bezierCurveTo(p920 * 153.5, p920 * 70.609375, p920 * 151.5, p920 * 65.609375, p920 * 148.5, p920 * 61.609375);
    v1302.bezierCurveTo(p920 * 134.5, p920 * 60.609375, p920 * 131.5, p920 * 63.609375, p920 * 127.5, p920 * 66.609375);
    v1302.bezierCurveTo(p920 * 127.5, p920 * 55.609375, p920 * 125.5, p920 * 54.609375, p920 * 120.5, p920 * 51.609375);
    v1302.bezierCurveTo(p920 * 128.5, p920 * 42.609375, p920 * 136.5, p920 * 38.609375, p920 * 147.5, p920 * 39.609375);
    v1302.bezierCurveTo(p920 * 152.5, p920 * 23.609375, p920 * 147.5, p920 * 21.609375, p920 * 140.5, p920 * 17.609375);
    v1302.bezierCurveTo(p920 * 120.5, p920 * 17.609375, p920 * 114.5, p920 * 27.609375, p920 * 106.5, p920 * 35.609375);
    v1302.closePath();
    f88(v1302, p922[1], p922[2], p920 * 8);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 104.5, p920 * 35.609375);
    v1302.bezierCurveTo(p920 * 71.5, p920 * 36.609375, p920 * 57.5, p920 * 52.609375, p920 * 58.5, p920 * 81.609375);
    v1302.bezierCurveTo(p920 * 59.5, p920 * 103.609375, p920 * 66.5, p920 * 107.609375, p920 * 66.5, p920 * 116.609375);
    v1302.bezierCurveTo(p920 * 67.5, p920 * 128.609375, p920 * 65.5, p920 * 131.609375, p920 * 63.5, p920 * 137.609375);
    f88(v1302, undefined, p922[2], p920 * 8);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 59.5, p920 * 72.609375);
    v1302.bezierCurveTo(p920 * 38.5, p920 * 80.609375, p920 * 43.5, p920 * 81.609375, p920 * 37.5, p920 * 89.609375);
    f88(v1302, vVVUndefined5, p922[2], p920 * 4);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 60.5, p920 * 85.609375);
    v1302.bezierCurveTo(p920 * 75.5, p920 * 91.609375, p920 * 76.5, p920 * 96.609375, p920 * 81.5, p920 * 104.609375);
    f88(v1302, undefined, p922[2], p920 * 4);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 68.5, p920 * 122.609375);
    v1302.bezierCurveTo(p920 * 79.5, p920 * 130.609375, p920 * 74.5, p920 * 128.609375, p920 * 80.5, p920 * 134.609375);
    f88(v1302, p922[1], p922[2], p920 * 4);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 142.5, p920 * 18.609375);
    v1302.bezierCurveTo(p920 * 151.5, p920 * 28.609375, p920 * 151.5, p920 * 32.609375, p920 * 146.5, p920 * 40.609375);
    v1302.bezierCurveTo(p920 * 137.5, p920 * 26.609375, p920 * 138.5, p920 * 24.609375, p920 * 142.5, p920 * 19.609375);
    v1302.closePath();
    f88(v1302, p922[3]);
    v1302.beginPath();
    v1302.lineCap = "round";
    v1302.lineJoin = "round";
    v1302.moveTo(p920 * 146.5, p920 * 61.50892639160156);
    v1302.bezierCurveTo(p920 * 157.5, p920 * 69.50892639160156, p920 * 150.5, p920 * 79.50892639160156, p920 * 145.5, p920 * 81.50892639160156);
    v1302.bezierCurveTo(p920 * 140.5, p920 * 65.50892639160156, p920 * 144.5, p920 * 64.50892639160156, p920 * 146.5, p920 * 62.50892639160156);
    v1302.closePath();
    f88(v1302, p922[3]);
    return v1301;
  }
  function f232(p923, p924, p925) {
    var v1303 = document.createElement("canvas");
    var v1304 = v1303.getContext("2d");
    v1303.width = p923 * 573;
    v1303.height = p923 * 350;
    if (p925 == 1) {
      v1304.beginPath();
      v1304.lineCap = "round";
      v1304.lineJoin = "round";
      v1304.moveTo(p923 * 336, p923 * 72);
      v1304.bezierCurveTo(p923 * 366, p923 * 15, p923 * 426, p923 * 36, p923 * 497, p923 * 83);
      v1304.bezierCurveTo(p923 * 522, p923 * 85, p923 * 522, p923 * 85, p923 * 547, p923 * 87);
      v1304.bezierCurveTo(p923 * 476.5, p923 * 205, p923 * 476.5, p923 * 205, p923 * 406, p923 * 323);
      v1304.bezierCurveTo(p923 * 297.5, p923 * 319, p923 * 297.5, p923 * 319, p923 * 189, p923 * 315);
      v1304.bezierCurveTo(p923 * 105.5, p923 * 279, p923 * 105.5, p923 * 279, p923 * 22, p923 * 243);
      v1304.bezierCurveTo(p923 * 92, p923 * 140, p923 * 92, p923 * 140, p923 * 162, p923 * 37);
      v1304.bezierCurveTo(p923 * 173, p923 * 39, p923 * 173, p923 * 39, p923 * 184, p923 * 41);
      v1304.bezierCurveTo(p923 * 185, p923 * 38.5, p923 * 185, p923 * 38.5, p923 * 186, p923 * 36);
      v1304.bezierCurveTo(p923 * 323, p923 * 13, p923 * 322, p923 * 25, p923 * 337, p923 * 74);
      v1304.closePath();
      f88(v1304, p924[4], p924[4], p923 * 35);
    }
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 168, p923 * 42);
    v1304.bezierCurveTo(p923 * 255, p923 * 60, p923 * 255, p923 * 60, p923 * 342, p923 * 78);
    v1304.bezierCurveTo(p923 * 443, p923 * 81.5, p923 * 443, p923 * 81.5, p923 * 544, p923 * 85);
    v1304.bezierCurveTo(p923 * 475, p923 * 204.5, p923 * 475, p923 * 204.5, p923 * 406, p923 * 324);
    v1304.bezierCurveTo(p923 * 297.5, p923 * 320, p923 * 297.5, p923 * 320, p923 * 189, p923 * 316);
    v1304.bezierCurveTo(p923 * 105.5, p923 * 279, p923 * 105.5, p923 * 279, p923 * 22, p923 * 242);
    v1304.closePath();
    f88(v1304, p924[0], p924[1], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 188, p923 * 41);
    v1304.bezierCurveTo(p923 * 308, p923 * 15, p923 * 325, p923 * 18, p923 * 337, p923 * 66);
    v1304.bezierCurveTo(p923 * 191, p923 * 305, p923 * 196, p923 * 286, p923 * 184, p923 * 307);
    v1304.bezierCurveTo(p923 * 175, p923 * 250, p923 * 90, p923 * 254, p923 * 52, p923 * 241);
    v1304.closePath();
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 336, p923 * 71);
    v1304.bezierCurveTo(p923 * 375, p923 * 8, p923 * 429, p923 * 50, p923 * 518, p923 * 92);
    v1304.bezierCurveTo(p923 * 455, p923 * 199.5, p923 * 455, p923 * 199.5, p923 * 392, p923 * 307);
    v1304.bezierCurveTo(p923 * 227, p923 * 301, p923 * 261, p923 * 255, p923 * 188, p923 * 308);
    v1304.closePath();
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 357, p923 * 76);
    v1304.bezierCurveTo(p923 * 390, p923 * 67, p923 * 414, p923 * 86, p923 * 435, p923 * 104);
    v1304.bezierCurveTo(p923 * 417, p923 * 135, p923 * 417, p923 * 135, p923 * 399, p923 * 166);
    v1304.bezierCurveTo(p923 * 352, p923 * 140, p923 * 345, p923 * 139, p923 * 319, p923 * 142);
    v1304.closePath();
    f88(v1304, p924[3], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 309, p923 * 168);
    v1304.bezierCurveTo(p923 * 345, p923 * 163, p923 * 372, p923 * 180, p923 * 412, p923 * 203);
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 263, p923 * 54);
    v1304.bezierCurveTo(p923 * 305, p923 * 44, p923 * 307, p923 * 51, p923 * 311, p923 * 64);
    v1304.bezierCurveTo(p923 * 270.5, p923 * 129.5, p923 * 270.5, p923 * 129.5, p923 * 230, p923 * 195);
    v1304.bezierCurveTo(p923 * 221, p923 * 175, p923 * 203, p923 * 171, p923 * 186, p923 * 172);
    v1304.closePath();
    f88(v1304, p924[3], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 292, p923 * 198);
    v1304.bezierCurveTo(p923 * 328, p923 * 191, p923 * 364, p923 * 211, p923 * 401, p923 * 237);
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 245, p923 * 68);
    v1304.bezierCurveTo(p923 * 210, p923 * 72, p923 * 210, p923 * 72, p923 * 189, p923 * 69);
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 222, p923 * 96);
    v1304.bezierCurveTo(p923 * 196, p923 * 97, p923 * 193, p923 * 97, p923 * 177, p923 * 92);
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 207, p923 * 124);
    v1304.bezierCurveTo(p923 * 179, p923 * 123, p923 * 177, p923 * 124, p923 * 161, p923 * 119);
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 115, p923 * 183);
    v1304.bezierCurveTo(p923 * 184, p923 * 185, p923 * 203, p923 * 198, p923 * 219, p923 * 221);
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 98, p923 * 213);
    v1304.bezierCurveTo(p923 * 161, p923 * 214, p923 * 193, p923 * 227, p923 * 201, p923 * 249);
    f88(v1304, p924[2], p924[3], p923 * 12);
    v1304.beginPath();
    v1304.lineCap = "round";
    v1304.lineJoin = "round";
    v1304.moveTo(p923 * 399, p923 * 257);
    v1304.bezierCurveTo(p923 * 287, p923 * 215, p923 * 280, p923 * 215, p923 * 263, p923 * 222);
    v1304.bezierCurveTo(p923 * 253, p923 * 238, p923 * 247, p923 * 245, p923 * 243, p923 * 254);
    v1304.bezierCurveTo(p923 * 267, p923 * 236, p923 * 292, p923 * 263, p923 * 377, p923 * 284);
    f88(v1304, p924[3], p924[3], p923 * 12);
    return v1303;
  }
  function f233(p926, p927, p928) {
    var v1305 = document.createElement("canvas");
    var v1306 = v1305.getContext("2d");
    v1305.width = p926 * 450;
    v1305.height = p926 * 790;
    v1306.translate(p926 * 5, p926 * 5);
    v1306.globalAlpha = p927 ? 0 : 0;
    f92(v1306, p926 * 178.5, p926 * 172.828125, p926 * 150);
    f88(v1306, vVVVVVVUndefined142, p928[0], p926 * 65);
    f92(v1306, p926 * 178.5, p926 * 172.828125, p926 * 150);
    f88(v1306, vVVVVVUndefined1422, p928[0], p926 * 55);
    v1306.closePath();
    v1306.save();
    v1306.translate(p926 * 177, p926 * 512.328125);
    f86(v1306, p926 * -25, p926 * -202.5, p926 * 65, p926 * 405, p926 * 25);
    v1306.restore();
    f88(v1306, p928[0]);
    v1306.save();
    v1306.translate(p926 * 136, p926 * 581.828125);
    f86(v1306, p926 * -39, p926 * -23, p926 * 78, p926 * 46, p926 * 25);
    v1306.restore();
    f88(v1306, p928[0]);
    v1306.save();
    v1306.translate(p926 * 135.5, p926 * 663.828125);
    f86(v1306, p926 * -39.5, p926 * -22, p926 * 79, p926 * 44, p926 * 25);
    v1306.restore();
    f88(v1306, p928[0]);
    v1306.beginPath();
    v1306.lineCap = "round";
    v1306.lineJoin = "round";
    v1306.moveTo(p926 * 114, p926 * 594.828125);
    v1306.bezierCurveTo(p926 * 175, p926 * 596.828125, p926 * 163, p926 * 596.828125, p926 * 172, p926 * 594.828125);
    v1306.bezierCurveTo(p926 * 171.5, p926 * 633.828125, p926 * 171.5, p926 * 633.828125, p926 * 171, p926 * 672.828125);
    v1306.bezierCurveTo(p926 * 110, p926 * 673.828125, p926 * 140.5, p926 * 673.328125, p926 * 110, p926 * 673.828125);
    v1306.bezierCurveTo(p926 * 110.5, p926 * 661.828125, p926 * 110.5, p926 * 661.828125, p926 * 111, p926 * 649.828125);
    v1306.bezierCurveTo(p926 * 157, p926 * 633.828125, p926 * 134, p926 * 607.828125, p926 * 114, p926 * 594.828125);
    v1306.closePath();
    f88(v1306, p928[0]);
    v1306.beginPath();
    v1306.lineCap = "round";
    v1306.lineJoin = "round";
    v1306.translate(0, p926 * 5);
    v1306.moveTo(p926 * 140, p926 * 294.828125);
    v1306.bezierCurveTo(p926 * 212, p926 * 295.828125, p926 * 176.5, p926 * 295.328125, p926 * 213, p926 * 295.828125);
    v1306.bezierCurveTo(p926 * 201.5, p926 * 325.328125, p926 * 201.5, p926 * 325.328125, p926 * 190, p926 * 354.828125);
    v1306.bezierCurveTo(p926 * 175.5, p926 * 355.828125, p926 * 175.5, p926 * 355.828125, p926 * 161, p926 * 356.828125);
    v1306.bezierCurveTo(p926 * 154.5, p926 * 328.828125, p926 * 154.5, p926 * 328.828125, p926 * 148, p926 * 300.828125);
    v1306.closePath();
    f88(v1306, p928[0]);
    v1306.translate(3, p926 * -5);
    v1306.beginPath();
    v1306.lineCap = "round";
    v1306.lineJoin = "round";
    v1306.moveTo(p926 * 159, p926 * 679.828125);
    v1306.bezierCurveTo(p926 * 180, p926 * 665.828125, p926 * 155, p926 * 675.828125, p926 * 151, p926 * 671.828125);
    v1306.bezierCurveTo(p926 * 154.5, p926 * 685.328125, p926 * 154.5, p926 * 685.328125, p926 * 158, p926 * 698.828125);
    v1306.bezierCurveTo(p926 * 171, p926 * 699.828125, p926 * 171, p926 * 699.828125, p926 * 184, p926 * 700.828125);
    v1306.closePath();
    f88(v1306, p928[0]);
    v1306.save();
    v1306.beginPath();
    v1306.lineCap = "round";
    v1306.lineJoin = "round";
    v1306.moveTo(p926 * 157, p926 * 548.828125);
    v1306.bezierCurveTo(p926 * 157, p926 * 561.828125, p926 * 157, p926 * 561.828125, p926 * 157, p926 * 574.828125);
    v1306.bezierCurveTo(p926 * 132.5, p926 * 580.828125, p926 * 132.5, p926 * 580.828125, p926 * 108, p926 * 586.828125);
    v1306.bezierCurveTo(p926 * 112, p926 * 599.828125, p926 * 111, p926 * 593.828125, p926 * 112, p926 * 599.828125);
    v1306.bezierCurveTo(p926 * 159, p926 * 603.828125, p926 * 126.5, p926 * 601.328125, p926 * 141, p926 * 602.828125);
    v1306.bezierCurveTo(p926 * 145, p926 * 641.828125, p926 * 143.5, p926 * 623.828125, p926 * 146, p926 * 644.828125);
    v1306.bezierCurveTo(p926 * 129.5, p926 * 645.328125, p926 * 129.5, p926 * 645.328125, p926 * 113, p926 * 645.828125);
    v1306.bezierCurveTo(p926 * 107.5, p926 * 652.828125, p926 * 107.5, p926 * 652.828125, p926 * 102, p926 * 659.828125);
    v1306.bezierCurveTo(p926 * 104, p926 * 669.328125, p926 * 104, p926 * 669.328125, p926 * 106, p926 * 678.828125);
    v1306.bezierCurveTo(p926 * 145, p926 * 679.328125, p926 * 145, p926 * 679.328125, p926 * 184, p926 * 679.828125);
    v1306.bezierCurveTo(p926 * 185, p926 * 615.828125, p926 * 185, p926 * 615.828125, p926 * 186, p926 * 551.828125);
    v1306.bezierCurveTo(p926 * 172.5, p926 * 551.328125, p926 * 172.5, p926 * 551.328125, p926 * 159, p926 * 550.828125);
    v1306.closePath();
    f88(v1306, p928[0], p928[0], p926 * 7);
    v1306.restore();
    v1306.globalAlpha = 1;
    v1306.translate(p926 * 15, p926 * 35);
    f92(v1306, p926 * 178.5, p926 * 172.828125, p926 * 150);
    f88(v1306, vVVVUndefined14, p928[2], p926 * 95);
    f92(v1306, p926 * 178.5, p926 * 172.828125, p926 * 150);
    f88(v1306, vVVVVVVUndefined142, p928[1], p926 * 55);
    v1306.closePath();
    v1306.save();
    v1306.translate(p926 * 177, p926 * 512.328125);
    f86(v1306, p926 * -25, p926 * -202.5, p926 * 65, p926 * 405, p926 * 25);
    v1306.restore();
    f88(v1306, p928[1], p928[2], p926 * 20);
    v1306.save();
    v1306.translate(p926 * 136, p926 * 581.828125);
    f86(v1306, p926 * -39, p926 * -23, p926 * 78, p926 * 46, p926 * 25);
    v1306.restore();
    f88(v1306, p928[1], p928[2], p926 * 20);
    v1306.save();
    v1306.translate(p926 * 135.5, p926 * 663.828125);
    f86(v1306, p926 * -39.5, p926 * -22, p926 * 79, p926 * 44, p926 * 25);
    v1306.restore();
    f88(v1306, p928[1], p928[2], p926 * 20);
    v1306.beginPath();
    v1306.lineCap = "round";
    v1306.lineJoin = "round";
    v1306.moveTo(p926 * 114, p926 * 594.828125);
    v1306.bezierCurveTo(p926 * 175, p926 * 596.828125, p926 * 163, p926 * 596.828125, p926 * 172, p926 * 594.828125);
    v1306.bezierCurveTo(p926 * 171.5, p926 * 633.828125, p926 * 171.5, p926 * 633.828125, p926 * 171, p926 * 672.828125);
    v1306.bezierCurveTo(p926 * 110, p926 * 673.828125, p926 * 140.5, p926 * 673.328125, p926 * 110, p926 * 673.828125);
    v1306.bezierCurveTo(p926 * 110.5, p926 * 661.828125, p926 * 110.5, p926 * 661.828125, p926 * 111, p926 * 649.828125);
    v1306.bezierCurveTo(p926 * 157, p926 * 633.828125, p926 * 134, p926 * 607.828125, p926 * 114, p926 * 594.828125);
    v1306.closePath();
    f88(v1306, p928[1]);
    v1306.beginPath();
    v1306.lineCap = "round";
    v1306.lineJoin = "round";
    v1306.translate(0, p926 * 5);
    v1306.moveTo(p926 * 123, p926 * 294.828125);
    v1306.bezierCurveTo(p926 * 212, p926 * 295.828125, p926 * 190.5, p926 * 295.328125, p926 * 250, p926 * 295.828125);
    v1306.bezierCurveTo(p926 * 231.5, p926 * 325.328125, p926 * 231.5, p926 * 325.328125, p926 * 220, p926 * 354.828125);
    v1306.bezierCurveTo(p926 * 175.5, p926 * 355.828125, p926 * 175.5, p926 * 355.828125, p926 * 140, p926 * 356.828125);
    v1306.bezierCurveTo(p926 * 123.5, p926 * 328.828125, p926 * 123.5, p926 * 328.828125, p926 * 123, p926 * 294.828125);
    v1306.closePath();
    f88(v1306, p928[1]);
    v1306.translate(0, p926 * -5);
    v1306.beginPath();
    v1306.lineCap = "round";
    v1306.lineJoin = "round";
    v1306.moveTo(p926 * 159, p926 * 679.828125);
    v1306.bezierCurveTo(p926 * 180, p926 * 665.828125, p926 * 155, p926 * 675.828125, p926 * 151, p926 * 671.828125);
    v1306.bezierCurveTo(p926 * 154.5, p926 * 685.328125, p926 * 154.5, p926 * 685.328125, p926 * 158, p926 * 698.828125);
    v1306.bezierCurveTo(p926 * 171, p926 * 699.828125, p926 * 171, p926 * 699.828125, p926 * 184, p926 * 700.828125);
    v1306.closePath();
    f88(v1306, p928[1]);
    v1306.save();
    v1306.beginPath();
    v1306.lineCap = "round";
    v1306.lineJoin = "round";
    v1306.moveTo(p926 * 157, p926 * 548.828125);
    v1306.bezierCurveTo(p926 * 157, p926 * 561.828125, p926 * 157, p926 * 561.828125, p926 * 157, p926 * 574.828125);
    v1306.bezierCurveTo(p926 * 132.5, p926 * 580.828125, p926 * 132.5, p926 * 580.828125, p926 * 108, p926 * 586.828125);
    v1306.bezierCurveTo(p926 * 112, p926 * 599.828125, p926 * 111, p926 * 593.828125, p926 * 112, p926 * 599.828125);
    v1306.bezierCurveTo(p926 * 159, p926 * 603.828125, p926 * 126.5, p926 * 601.328125, p926 * 141, p926 * 602.828125);
    v1306.bezierCurveTo(p926 * 145, p926 * 641.828125, p926 * 143.5, p926 * 623.828125, p926 * 146, p926 * 644.828125);
    v1306.bezierCurveTo(p926 * 129.5, p926 * 645.328125, p926 * 129.5, p926 * 645.328125, p926 * 113, p926 * 645.828125);
    v1306.bezierCurveTo(p926 * 107.5, p926 * 652.828125, p926 * 107.5, p926 * 652.828125, p926 * 102, p926 * 659.828125);
    v1306.bezierCurveTo(p926 * 104, p926 * 669.328125, p926 * 104, p926 * 669.328125, p926 * 106, p926 * 678.828125);
    v1306.bezierCurveTo(p926 * 145, p926 * 679.328125, p926 * 145, p926 * 679.328125, p926 * 184, p926 * 679.828125);
    v1306.bezierCurveTo(p926 * 185, p926 * 615.828125, p926 * 185, p926 * 615.828125, p926 * 186, p926 * 551.828125);
    v1306.bezierCurveTo(p926 * 172.5, p926 * 551.328125, p926 * 172.5, p926 * 551.328125, p926 * 159, p926 * 550.828125);
    v1306.closePath();
    f88(v1306, p928[1], p928[1], p926 * 7);
    v1306.restore();
    return v1305;
  }
  function f234(p929, p930, p931) {
    var v1307 = document.createElement("canvas");
    var v1308 = v1307.getContext("2d");
    v1307.width = p929 * 400;
    v1307.height = p929 * 400;
    v1308.translate(0, p929 * 15);
    v1308.globalAlpha = p930 ? 0.5 : 1;
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 102, p929 * 154);
    v1308.bezierCurveTo(p929 * 108, p929 * 216.5, p929 * 108, p929 * 216.5, p929 * 114, p929 * 279);
    v1308.bezierCurveTo(p929 * 124, p929 * 300, p929 * 237, p929 * 299, p929 * 251, p929 * 279);
    v1308.bezierCurveTo(p929 * 257, p929 * 217, p929 * 257, p929 * 217, p929 * 263, p929 * 155);
    v1308.bezierCurveTo(p929 * 248, p929 * 194, p929 * 91, p929 * 180, p929 * 103, p929 * 156);
    v1308.closePath();
    f88(v1308, p931[0]);
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 102, p929 * 154);
    v1308.bezierCurveTo(p929 * 106, p929 * 53, p929 * 255, p929 * 53, p929 * 263, p929 * 154);
    v1308.bezierCurveTo(p929 * 248, p929 * 38, p929 * 99, p929 * 69, p929 * 103, p929 * 154);
    v1308.closePath();
    f88(v1308, undefined, p931[0], p929 * 11);
    v1308.translate(0, p929 * -5);
    v1308.globalAlpha = 1;
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 103, p929 * 154);
    v1308.bezierCurveTo(p929 * 98, p929 * 119, p929 * 264, p929 * 119, p929 * 264, p929 * 154);
    v1308.bezierCurveTo(p929 * 271, p929 * 189, p929 * 94, p929 * 188, p929 * 103, p929 * 154);
    v1308.closePath();
    f88(v1308, p931[3], p931[2], p929 * 12);
    v1308.translate(0, p929 * 25);
    v1308.globalAlpha = 1;
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 103, p929 * 154);
    v1308.bezierCurveTo(p929 * 98, p929 * 119, p929 * 264, p929 * 119, p929 * 264, p929 * 154);
    v1308.bezierCurveTo(p929 * 271, p929 * 189, p929 * 94, p929 * 188, p929 * 103, p929 * 154);
    v1308.closePath();
    f88(v1308, p931[5]);
    v1308.translate(0, p929 * -25);
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 102, p929 * 154);
    v1308.bezierCurveTo(p929 * 108, p929 * 216.5, p929 * 108, p929 * 216.5, p929 * 114, p929 * 279);
    v1308.bezierCurveTo(p929 * 124, p929 * 300, p929 * 237, p929 * 299, p929 * 251, p929 * 279);
    v1308.bezierCurveTo(p929 * 257, p929 * 217, p929 * 257, p929 * 217, p929 * 263, p929 * 155);
    v1308.bezierCurveTo(p929 * 248, p929 * 194, p929 * 91, p929 * 180, p929 * 103, p929 * 156);
    v1308.closePath();
    f88(v1308, p931[1], p931[2], p929 * 12);
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 182, p929 * 185);
    v1308.bezierCurveTo(p929 * 182.5, p929 * 237.5, p929 * 182.5, p929 * 237.5, p929 * 183, p929 * 290);
    v1308.closePath();
    f88(v1308, undefined, p931[2], p929 * 12);
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 222, p929 * 287);
    v1308.bezierCurveTo(p929 * 226, p929 * 233.5, p929 * 226, p929 * 233.5, p929 * 230, p929 * 180);
    v1308.closePath();
    f88(v1308, vVUndefined, p931[2], p929 * 12);
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 145, p929 * 290);
    v1308.bezierCurveTo(p929 * 140.5, p929 * 237, p929 * 140.5, p929 * 237, p929 * 136, p929 * 184);
    v1308.closePath();
    f88(v1308, p931[1], p931[2], p929 * 11);
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 105, p929 * 184);
    v1308.bezierCurveTo(p929 * 148, p929 * 205, p929 * 231, p929 * 202, p929 * 260, p929 * 182);
    v1308.bezierCurveTo(p929 * 259, p929 * 195.5, p929 * 259, p929 * 195.5, p929 * 258, p929 * 209);
    v1308.bezierCurveTo(p929 * 217, p929 * 218, p929 * 163, p929 * 225, p929 * 108, p929 * 207);
    v1308.closePath();
    f88(v1308, p931[4], p931[2], p929 * 11);
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 251, p929 * 276);
    v1308.bezierCurveTo(p929 * 251.5, p929 * 267.5, p929 * 251.5, p929 * 267.5, p929 * 252, p929 * 259);
    v1308.bezierCurveTo(p929 * 212, p929 * 272, p929 * 156, p929 * 275, p929 * 112, p929 * 260);
    v1308.bezierCurveTo(p929 * 112.5, p929 * 269, p929 * 112.5, p929 * 269, p929 * 113, p929 * 278);
    v1308.bezierCurveTo(p929 * 155, p929 * 306, p929 * 253, p929 * 286, p929 * 250, p929 * 276);
    v1308.closePath();
    f88(v1308, p931[4], p931[2], p929 * 11);
    v1308.beginPath();
    v1308.lineCap = "round";
    v1308.lineJoin = "round";
    v1308.moveTo(p929 * 102, p929 * 154);
    v1308.bezierCurveTo(p929 * 106, p929 * 53, p929 * 255, p929 * 53, p929 * 263, p929 * 154);
    v1308.bezierCurveTo(p929 * 248, p929 * 38, p929 * 99, p929 * 69, p929 * 103, p929 * 154);
    v1308.closePath();
    f88(v1308, vVVVVUndefined142, p931[2], p929 * 11);
    return v1307;
  }
  function f235(p932, p933, p934) {
    var v1309 = document.createElement("canvas");
    var v1310 = v1309.getContext("2d");
    v1309.width = p932 * 120;
    v1309.height = p932 * 100;
    f86(v1310, p932 * 10, p932 * 10, p932 * 95, p932 * 80, p932 * 10);
    f88(v1310, p933[2]);
    f86(v1310, p932 * 10, p932 * 5, p932 * 95, p932 * 80, p932 * 10);
    f88(v1310, p933[3], p933[4], p932 * 4);
    if (p934 == 0) {
      var vYd = f254(p932 * 0.75, p933, 0);
      v1310.drawImage(vYd, p932 * 22, p932 * 18);
    } else if (p934 == 1) {
      vYd = f254(p932 * 0.75, p933, 1);
      v1310.drawImage(vYd, p932 * 22, p932 * 18);
    }
    return v1309;
  }
  function f236(p935, p936, p937) {
    var v1311 = document.createElement("canvas");
    var v1312 = v1311.getContext("2d");
    v1311.width = p935 * 170;
    v1311.height = p935 * 170;
    v1312.globalAlpha = p936 ? 0.5 : 1;
    v1312.translate(p935 * -10, p935 * 10);
    v1312.beginPath();
    v1312.lineCap = "round";
    v1312.lineJoin = "round";
    v1312.moveTo(p935 * 72.5, p935 * 4.109375);
    v1312.bezierCurveTo(p935 * 117, p935 * 9.609375, p935 * 117, p935 * 9.609375, p935 * 161.5, p935 * 15.109375);
    v1312.bezierCurveTo(p935 * 134.5, p935 * 106.109375, p935 * 110.5, p935 * 130.109375, p935 * 63.5, p935 * 145.109375);
    v1312.bezierCurveTo(p935 * 33.5, p935 * 120.609375, p935 * 33.5, p935 * 120.609375, p935 * 3.5, p935 * 96.109375);
    v1312.bezierCurveTo(p935 * 82.5, p935 * 75.109375, p935 * 69.5, p935 * 29.109375, p935 * 71.5, p935 * 6.109375);
    v1312.closePath();
    f88(v1312, p937[0]);
    v1312.globalAlpha = 1;
    v1312.translate(p935 * 10, p935 * -10);
    v1312.beginPath();
    v1312.lineCap = "round";
    v1312.lineJoin = "round";
    v1312.moveTo(p935 * 72.5, p935 * 4.109375);
    v1312.bezierCurveTo(p935 * 117, p935 * 9.609375, p935 * 117, p935 * 9.609375, p935 * 161.5, p935 * 15.109375);
    v1312.bezierCurveTo(p935 * 134.5, p935 * 106.109375, p935 * 110.5, p935 * 130.109375, p935 * 63.5, p935 * 145.109375);
    v1312.bezierCurveTo(p935 * 33.5, p935 * 120.609375, p935 * 33.5, p935 * 120.609375, p935 * 3.5, p935 * 96.109375);
    v1312.bezierCurveTo(p935 * 82.5, p935 * 75.109375, p935 * 69.5, p935 * 29.109375, p935 * 71.5, p935 * 6.109375);
    v1312.closePath();
    f88(v1312, p937[1], p937[2], p935 * 10);
    return v1311;
  }
  function f237(p938, p939, p940) {
    var v1313 = document.createElement("canvas");
    var v1314 = v1313.getContext("2d");
    v1313.width = p938 * 175;
    v1313.height = p938 * 106;
    v1314.globalAlpha = p939 ? 0.5 : 1;
    v1314.translate(0, p938 * 8);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 28, p938 * 67);
    v1314.bezierCurveTo(p938 * 55, p938 * 80, p938 * 126, p938 * 74, p938 * 144, p938 * 68);
    v1314.bezierCurveTo(p938 * 144.5, p938 * 75, p938 * 144.5, p938 * 75, p938 * 145, p938 * 82);
    v1314.bezierCurveTo(p938 * 114, p938 * 94, p938 * 47, p938 * 91, p938 * 28, p938 * 82);
    v1314.closePath();
    f88(v1314, p940[0]);
    v1314.globalAlpha = 1;
    v1314.translate(0, p938 * -8);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 145, p938 * 75);
    v1314.bezierCurveTo(p938 * 143, p938 * 51, p938 * 133, p938 * 29, p938 * 100, p938 * 27);
    v1314.bezierCurveTo(p938 * 52, p938 * 21, p938 * 37, p938 * 37, p938 * 31, p938 * 54);
    v1314.bezierCurveTo(p938 * 23, p938 * 78, p938 * 28, p938 * 77, p938 * 36, p938 * 79);
    v1314.bezierCurveTo(p938 * 80, p938 * 87, p938 * 120, p938 * 81, p938 * 145, p938 * 76);
    v1314.closePath();
    f88(v1314, p940[1]);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 38, p938 * 46);
    v1314.bezierCurveTo(p938 * 52, p938 * 37, p938 * 69, p938 * 36, p938 * 85, p938 * 36);
    v1314.bezierCurveTo(p938 * 118, p938 * 38, p938 * 129, p938 * 42, p938 * 137, p938 * 48);
    v1314.bezierCurveTo(p938 * 135, p938 * 45, p938 * 135, p938 * 45, p938 * 133, p938 * 42);
    v1314.bezierCurveTo(p938 * 124, p938 * 32, p938 * 116, p938 * 28, p938 * 88, p938 * 25);
    v1314.bezierCurveTo(p938 * 47, p938 * 28, p938 * 40, p938 * 32, p938 * 36, p938 * 44);
    v1314.closePath();
    f88(v1314, p940[5]);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 145, p938 * 75);
    v1314.bezierCurveTo(p938 * 143, p938 * 51, p938 * 133, p938 * 29, p938 * 100, p938 * 27);
    v1314.bezierCurveTo(p938 * 52, p938 * 21, p938 * 37, p938 * 37, p938 * 31, p938 * 54);
    v1314.bezierCurveTo(p938 * 23, p938 * 78, p938 * 28, p938 * 77, p938 * 36, p938 * 79);
    v1314.bezierCurveTo(p938 * 80, p938 * 87, p938 * 120, p938 * 81, p938 * 145, p938 * 76);
    v1314.closePath();
    f88(v1314, undefined, p940[2], p938 * 4);
    v1314.translate(0, p938 * -3);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 28, p938 * 67);
    v1314.bezierCurveTo(p938 * 55, p938 * 80, p938 * 126, p938 * 74, p938 * 144, p938 * 68);
    v1314.bezierCurveTo(p938 * 144.5, p938 * 75, p938 * 144.5, p938 * 75, p938 * 145, p938 * 82);
    v1314.bezierCurveTo(p938 * 114, p938 * 94, p938 * 47, p938 * 91, p938 * 28, p938 * 82);
    v1314.closePath();
    f88(v1314, p940[10], p940[10], p938 * 4);
    v1314.translate(0, p938 * 3);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 131, p938 * 43);
    v1314.bezierCurveTo(p938 * 145, p938 * 40, p938 * 148, p938 * 32, p938 * 147, p938 * 17);
    v1314.bezierCurveTo(p938 * 166, p938 * 39, p938 * 155, p938 * 62, p938 * 140, p938 * 67);
    v1314.bezierCurveTo(p938 * 128, p938 * 65, p938 * 128, p938 * 52, p938 * 131, p938 * 45);
    v1314.closePath();
    f88(v1314, p940[3]);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 41, p938 * 43);
    v1314.bezierCurveTo(p938 * 30, p938 * 42, p938 * 24, p938 * 33, p938 * 25, p938 * 17);
    v1314.bezierCurveTo(p938 * 7, p938 * 34, p938 * 17, p938 * 63, p938 * 33, p938 * 66);
    v1314.bezierCurveTo(p938 * 45, p938 * 59, p938 * 44, p938 * 53, p938 * 42, p938 * 44);
    v1314.closePath();
    f88(v1314, p940[3]);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 24, p938 * 19);
    v1314.bezierCurveTo(p938 * 24, p938 * 35, p938 * 35, p938 * 42, p938 * 42, p938 * 44);
    v1314.bezierCurveTo(p938 * 43, p938 * 51, p938 * 43, p938 * 48, p938 * 43, p938 * 56);
    v1314.bezierCurveTo(p938 * 25, p938 * 47, p938 * 17, p938 * 36, p938 * 23, p938 * 20);
    v1314.closePath();
    f88(v1314, p940[6]);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 148, p938 * 18);
    v1314.bezierCurveTo(p938 * 159, p938 * 44, p938 * 139, p938 * 52, p938 * 130, p938 * 55);
    v1314.bezierCurveTo(p938 * 129, p938 * 48, p938 * 129, p938 * 46, p938 * 131, p938 * 43);
    v1314.bezierCurveTo(p938 * 144, p938 * 37, p938 * 148, p938 * 35, p938 * 147, p938 * 18);
    v1314.closePath();
    f88(v1314, p940[6]);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 131, p938 * 43);
    v1314.bezierCurveTo(p938 * 145, p938 * 40, p938 * 148, p938 * 32, p938 * 147, p938 * 17);
    v1314.bezierCurveTo(p938 * 166, p938 * 39, p938 * 155, p938 * 62, p938 * 140, p938 * 67);
    v1314.bezierCurveTo(p938 * 128, p938 * 65, p938 * 128, p938 * 52, p938 * 131, p938 * 45);
    v1314.closePath();
    f88(v1314, undefined, p940[4], p938 * 4);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 41, p938 * 43);
    v1314.bezierCurveTo(p938 * 30, p938 * 42, p938 * 24, p938 * 33, p938 * 25, p938 * 17);
    v1314.bezierCurveTo(p938 * 7, p938 * 34, p938 * 17, p938 * 63, p938 * 33, p938 * 66);
    v1314.bezierCurveTo(p938 * 45, p938 * 59, p938 * 44, p938 * 53, p938 * 42, p938 * 44);
    v1314.closePath();
    f88(v1314, undefined, p940[4], p938 * 4);
    v1314.save();
    v1314.translate(p938 * 87, p938 * 34.5);
    v1314.rotate(0);
    f86(v1314, p938 * -8, p938 * -10.5, p938 * 16, p938 * 21, p938 * 10);
    v1314.restore();
    f88(v1314, p940[7], p940[2], p938 * 4);
    v1314.save();
    v1314.translate(p938 * 87, p938 * 57);
    v1314.rotate(0);
    f86(v1314, p938 * -8, p938 * -23, p938 * 16, p938 * 46, p938 * 10);
    v1314.restore();
    f88(v1314, p940[8], p940[2], p938 * 4);
    f92(v1314, p938 * 87, p938 * 39, p938 * 4.123105625617661);
    f88(v1314, p940[9], p940[2], p938 * 4);
    f92(v1314, p938 * 87, p938 * 60, p938 * 4.242640687119285);
    f88(v1314, p940[9], p940[2], p938 * 4);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 28, p938 * 67);
    v1314.bezierCurveTo(p938 * 55, p938 * 80, p938 * 126, p938 * 74, p938 * 144, p938 * 68);
    v1314.bezierCurveTo(p938 * 144.5, p938 * 75, p938 * 144.5, p938 * 75, p938 * 145, p938 * 82);
    v1314.bezierCurveTo(p938 * 114, p938 * 94, p938 * 47, p938 * 91, p938 * 28, p938 * 82);
    v1314.closePath();
    f88(v1314, p940[8], p940[2], p938 * 4);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 27, p938 * 69);
    v1314.bezierCurveTo(p938 * 13, p938 * 77, p938 * 16, p938 * 74, p938 * 27, p938 * 80);
    v1314.closePath();
    f88(v1314, p940[9], p940[2], p938 * 4);
    v1314.beginPath();
    v1314.lineCap = "round";
    v1314.lineJoin = "round";
    v1314.moveTo(p938 * 145, p938 * 70);
    v1314.bezierCurveTo(p938 * 149.5, p938 * 72, p938 * 149.5, p938 * 72, p938 * 154, p938 * 74);
    v1314.bezierCurveTo(p938 * 150, p938 * 77, p938 * 150, p938 * 77, p938 * 146, p938 * 80);
    v1314.closePath();
    f88(v1314, p940[9], p940[2], p938 * 4);
    f92(v1314, p938 * 50, p938 * 80, p938 * 5);
    f88(v1314, p940[9], p940[2], p938 * 4);
    f92(v1314, p938 * 86.01141357421875, p938 * 81.76705932617188, p938 * 5);
    f88(v1314, p940[9], p940[2], p938 * 4);
    f92(v1314, p938 * 119.01141357421875, p938 * 80.13069152832031, p938 * 5);
    f88(v1314, p940[9], p940[2], p938 * 4);
    return v1313;
  }
  function f238(p941, p942, p943) {
    var v1315 = document.createElement("canvas");
    var v1316 = v1315.getContext("2d");
    v1315.width = p941 * 142;
    v1315.height = p941 * 118;
    v1316.save();
    v1316.translate(p941 * 70.16665649414062, p941 * 38.20831298828125);
    f86(v1316, p941 * -58.5, p941 * -27.5, p941 * 117, p941 * 55, p941 * 20);
    v1316.restore();
    f88(v1316, p943[0], p943[1], p941 * 4);
    v1316.save();
    v1316.translate(p941 * 70, p941 * 42.70831298828125);
    f86(v1316, p941 * -61, p941 * -20, p941 * 122, p941 * 40, p941 * 20);
    v1316.restore();
    f88(v1316, p943[2], p943[1], p941 * 4);
    v1316.beginPath();
    v1316.lineCap = "round";
    v1316.lineJoin = "round";
    v1316.moveTo(p941 * 123, p941 * 70.375);
    v1316.bezierCurveTo(p941 * 115, p941 * 99.375, p941 * 119, p941 * 85.375, p941 * 115, p941 * 100.375);
    v1316.bezierCurveTo(p941 * 112, p941 * 116.375, p941 * 117, p941 * 109.375, p941 * 131, p941 * 100.375);
    v1316.bezierCurveTo(p941 * 131, p941 * 83.375, p941 * 131, p941 * 83.375, p941 * 131, p941 * 66.375);
    v1316.closePath();
    f88(v1316, p943[2], p943[1], p941 * 4);
    v1316.beginPath();
    v1316.lineCap = "round";
    v1316.lineJoin = "round";
    v1316.moveTo(p941 * 11, p941 * 68.375);
    v1316.bezierCurveTo(p941 * 11.166656494140625, p941 * 84.375, p941 * 9, p941 * 99.375, p941 * 10, p941 * 100.375);
    v1316.bezierCurveTo(p941 * 35, p941 * 113.375, p941 * 27, p941 * 110.375, p941 * 25, p941 * 95.375);
    v1316.bezierCurveTo(p941 * 16, p941 * 68.375, p941 * 17, p941 * 69.375, p941 * 17, p941 * 68.375);
    v1316.closePath();
    f88(v1316, p943[2], p943[1], p941 * 4);
    v1316.beginPath();
    v1316.lineCap = "round";
    v1316.lineJoin = "round";
    v1316.moveTo(p941 * 46, p941 * 32.375);
    v1316.bezierCurveTo(p941 * 43, p941 * 8.375, p941 * 45, p941 * 7.375, p941 * 56, p941 * 6.375);
    v1316.bezierCurveTo(p941 * 105, p941 * 4.375, p941 * 102, p941 * 6.375, p941 * 97, p941 * 32.375);
    v1316.bezierCurveTo(p941 * 138, p941 * 43.375, p941 * 133, p941 * 45.375, p941 * 133, p941 * 58.375);
    v1316.bezierCurveTo(p941 * 133, p941 * 85.375, p941 * 125, p941 * 74.375, p941 * 111, p941 * 70.375);
    v1316.bezierCurveTo(p941 * 70, p941 * 69.875, p941 * 29, p941 * 69.375, p941 * 29, p941 * 69.375);
    v1316.bezierCurveTo(p941 * 7, p941 * 84.375, p941 * 7, p941 * 70.375, p941 * 7, p941 * 59.375);
    v1316.bezierCurveTo(p941 * 6, p941 * 28.375, p941 * 32, p941 * 39.375, p941 * 44, p941 * 32.375);
    v1316.closePath();
    f88(v1316, p943[2], p943[1], p941 * 4);
    f92(v1316, p941 * 71, p941 * 44.375, p941 * 16.55294535724685);
    f88(v1316, p943[2], p943[1], p941 * 4);
    f92(v1316, p941 * 71, p941 * 43.70831298828125, p941 * 8.94427190999916);
    f88(v1316, p943[2], p943[1], p941 * 4);
    return v1315;
  }
  function f239(p944) {
    var v1317 = document.createElement("canvas");
    var v1318 = v1317.getContext("2d");
    var v1319 = p944 * 600;
    var v1320 = p944 * 22;
    var v1321 = p944 * 4;
    var v1322 = p944 * 4;
    v1317.width = v1319;
    v1317.height = v1320;
    f86(v1318, p944 * 5, p944 * 5, v1319 - p944 * 10, v1320 - p944 * 10, v1321);
    f88(v1318, null, "#BBE8EF", v1322);
    return v1317;
  }
  function f240(p945, p946, p947) {
    var v1323 = document.createElement("canvas");
    var v1324 = v1323.getContext("2d");
    v1323.width = p945 * 46;
    v1323.height = p945 * 140;
    v1324.scale(p945 * -1, p945 * 1);
    v1324.translate(p945 * -50, p945 * 40);
    v1324.translate(p945 * -20, 0);
    v1324.globalAlpha = p946 ? 0.5 : 1;
    v1324.translate(p945 * 10, 0);
    v1324.beginPath();
    v1324.lineCap = "round";
    v1324.lineJoin = "round";
    v1324.moveTo(p945 * 22.599990844726562, p945 * 85.94999694824219);
    v1324.bezierCurveTo(p945 * 17.599990844726562, p945 * 83.94999694824219, p945 * 17.599990844726562, p945 * 83.94999694824219, p945 * 12.599990844726562, p945 * 81.94999694824219);
    v1324.bezierCurveTo(p945 * 19.599990844726562, p945 * 73.94999694824219, p945 * 2.5999908447265625, p945 * 22.949996948242188, p945 * 33.59999084472656, p945 * 7.9499969482421875);
    v1324.bezierCurveTo(p945 * 27.599990844726562, p945 * 28.949996948242188, p945 * 33.59999084472656, p945 * 26.949996948242188, p945 * 35.59999084472656, p945 * 32.94999694824219);
    v1324.bezierCurveTo(p945 * 25.599990844726562, p945 * 59.94999694824219, p945 * 26.599990844726562, p945 * 69.94999694824219, p945 * 29.599990844726562, p945 * 82.94999694824219);
    v1324.closePath();
    f88(v1324, p947[0]);
    v1324.beginPath();
    v1324.lineCap = "round";
    v1324.lineJoin = "round";
    v1324.translate(p945 * -1, 0);
    v1324.moveTo(p945 * 17.599990844726562, p945 * 89.75);
    v1324.bezierCurveTo(p945 * 24.599990844726562, p945 * 99.75, p945 * 24.599990844726562, p945 * 101.75, p945 * 20.599990844726562, p945 * 111.75);
    v1324.bezierCurveTo(p945 * 28.599990844726562, p945 * 110.75, p945 * 26.599990844726562, p945 * 112.75, p945 * 28.599990844726562, p945 * 111.75);
    v1324.bezierCurveTo(p945 * 30.599990844726562, p945 * 96.75, p945 * 32.59999084472656, p945 * 96.75, p945 * 30.599990844726562, p945 * 87.75);
    v1324.closePath();
    f88(v1324, p947[0]);
    v1324.beginPath();
    v1324.lineCap = "round";
    v1324.lineJoin = "round";
    v1324.translate(p945 * 1, 0);
    v1324.moveTo(p945 * 7.5999908447265625, p945 * 86.34999084472656);
    v1324.bezierCurveTo(p945 * 12.599990844726562, p945 * 85.34999084472656, p945 * 14.599990844726562, p945 * 84.34999084472656, p945 * 13.599990844726562, p945 * 84.34999084472656);
    v1324.bezierCurveTo(p945 * 21.599990844726562, p945 * 83.34999084472656, p945 * 21.599990844726562, p945 * 83.34999084472656, p945 * 29.599990844726562, p945 * 82.34999084472656);
    v1324.bezierCurveTo(p945 * 33.59999084472656, p945 * 85.84999084472656, p945 * 33.59999084472656, p945 * 85.84999084472656, p945 * 37.59999084472656, p945 * 89.34999084472656);
    v1324.bezierCurveTo(p945 * 34.09999084472656, p945 * 91.84999084472656, p945 * 34.09999084472656, p945 * 91.84999084472656, p945 * 30.599990844726562, p945 * 94.34999084472656);
    v1324.bezierCurveTo(p945 * 21.099990844726562, p945 * 93.34999084472656, p945 * 21.099990844726562, p945 * 93.34999084472656, p945 * 11.599990844726562, p945 * 92.34999084472656);
    v1324.closePath();
    f88(v1324, p947[0]);
    v1324.save();
    v1324.translate(p945 * 23.599990844726562, p945 * 110.94999694824219);
    v1324.rotate(0);
    f86(v1324, p945 * -7, p945 * -4, p945 * 14, p945 * 8, p945 * 10);
    v1324.restore();
    f88(v1324, p947[0]);
    v1324.translate(p945 * 0, 0);
    v1324.globalAlpha = 1;
    v1324.translate(p945 * 10, 0);
    v1324.beginPath();
    v1324.lineCap = "round";
    v1324.lineJoin = "round";
    v1324.moveTo(p945 * 22.599990844726562, p945 * 85.94999694824219);
    v1324.bezierCurveTo(p945 * 17.599990844726562, p945 * 83.94999694824219, p945 * 17.599990844726562, p945 * 83.94999694824219, p945 * 12.599990844726562, p945 * 81.94999694824219);
    v1324.bezierCurveTo(p945 * 19.599990844726562, p945 * 73.94999694824219, p945 * 2.5999908447265625, p945 * 22.949996948242188, p945 * 33.59999084472656, p945 * 7.9499969482421875);
    v1324.bezierCurveTo(p945 * 27.599990844726562, p945 * 28.949996948242188, p945 * 33.59999084472656, p945 * 26.949996948242188, p945 * 35.59999084472656, p945 * 32.94999694824219);
    v1324.bezierCurveTo(p945 * 25.599990844726562, p945 * 59.94999694824219, p945 * 26.599990844726562, p945 * 69.94999694824219, p945 * 29.599990844726562, p945 * 82.94999694824219);
    v1324.closePath();
    f88(v1324, p947[3], p947[4], p945 * 3);
    v1324.beginPath();
    v1324.lineCap = "round";
    v1324.lineJoin = "round";
    v1324.translate(p945 * -1, 0);
    v1324.moveTo(p945 * 17.599990844726562, p945 * 89.75);
    v1324.bezierCurveTo(p945 * 24.599990844726562, p945 * 99.75, p945 * 24.599990844726562, p945 * 101.75, p945 * 20.599990844726562, p945 * 111.75);
    v1324.bezierCurveTo(p945 * 28.599990844726562, p945 * 110.75, p945 * 26.599990844726562, p945 * 112.75, p945 * 28.599990844726562, p945 * 111.75);
    v1324.bezierCurveTo(p945 * 30.599990844726562, p945 * 96.75, p945 * 32.59999084472656, p945 * 96.75, p945 * 30.599990844726562, p945 * 87.75);
    v1324.closePath();
    f88(v1324, p947[1], p947[2], p945 * 3);
    v1324.beginPath();
    v1324.lineCap = "round";
    v1324.lineJoin = "round";
    v1324.translate(p945 * 1, 0);
    v1324.moveTo(p945 * 7.5999908447265625, p945 * 86.34999084472656);
    v1324.bezierCurveTo(p945 * 12.599990844726562, p945 * 85.34999084472656, p945 * 14.599990844726562, p945 * 84.34999084472656, p945 * 13.599990844726562, p945 * 84.34999084472656);
    v1324.bezierCurveTo(p945 * 21.599990844726562, p945 * 83.34999084472656, p945 * 21.599990844726562, p945 * 83.34999084472656, p945 * 29.599990844726562, p945 * 82.34999084472656);
    v1324.bezierCurveTo(p945 * 33.59999084472656, p945 * 85.84999084472656, p945 * 33.59999084472656, p945 * 85.84999084472656, p945 * 37.59999084472656, p945 * 89.34999084472656);
    v1324.bezierCurveTo(p945 * 34.09999084472656, p945 * 91.84999084472656, p945 * 34.09999084472656, p945 * 91.84999084472656, p945 * 30.599990844726562, p945 * 94.34999084472656);
    v1324.bezierCurveTo(p945 * 21.099990844726562, p945 * 93.34999084472656, p945 * 21.099990844726562, p945 * 93.34999084472656, p945 * 11.599990844726562, p945 * 92.34999084472656);
    v1324.closePath();
    f88(v1324, p947[1], p947[2], p945 * 3);
    v1324.save();
    v1324.translate(p945 * 23.599990844726562, p945 * 110.94999694824219);
    v1324.rotate(0);
    f86(v1324, p945 * -7, p945 * -4, p945 * 14, p945 * 8, p945 * 10);
    v1324.restore();
    f88(v1324, p947[1], p947[2], p945 * 3);
    return v1323;
  }
  function f241(p948, p949, p950) {
    var v1325 = document.createElement("canvas");
    var v1326 = v1325.getContext("2d");
    v1325.width = p948 * 202;
    v1325.height = p948 * 202;
    v1326.translate(p948 * 2, p948 * 1);
    v1326.globalAlpha = p949 ? 0.5 : 1;
    v1326.translate(0, p948 * 10);
    v1326.save();
    v1326.translate(p948 * 98, p948 * 41.15177917480469);
    v1326.rotate(0.8);
    f86(v1326, p948 * -16, p948 * -16.5, p948 * 32, p948 * 33, p948 * 7);
    v1326.restore();
    f88(v1326, p950[2]);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 98, p948 * 22.5089111328125);
    v1326.bezierCurveTo(p948 * 97.5, p948 * 41.5089111328125, p948 * 97.5, p948 * 41.5089111328125, p948 * 97, p948 * 60.5089111328125);
    f88(v1326, p950[2]);
    v1326.save();
    v1326.translate(p948 * 147.5, p948 * 69.5089111328125);
    v1326.rotate(0.2);
    f86(v1326, p948 * -15.5, p948 * -16, p948 * 31, p948 * 32, p948 * 7);
    v1326.restore();
    f88(v1326, p950[2]);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 163, p948 * 59.50892639160156);
    v1326.bezierCurveTo(p948 * 147, p948 * 69.50892639160156, p948 * 127, p948 * 82.50892639160156, p948 * 131, p948 * 79.50892639160156);
    f88(v1326, p950[2]);
    v1326.save();
    v1326.translate(p948 * 143.5, p948 * 128.2946319580078);
    v1326.rotate(1.24);
    f86(v1326, p948 * -16.5, p948 * -17.5, p948 * 33, p948 * 35, p948 * 7);
    v1326.restore();
    f88(v1326, p950[2]);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 162, p948 * 135.93748474121094);
    v1326.bezierCurveTo(p948 * 143.5, p948 * 128.43748474121094, p948 * 129, p948 * 120.93748474121094, p948 * 125, p948 * 120.93748474121094);
    f88(v1326, p950[2]);
    v1326.save();
    v1326.translate(p948 * 99, p948 * 156.08035278320312);
    v1326.rotate(0.84);
    f86(v1326, p948 * -18, p948 * -18, p948 * 36, p948 * 36, p948 * 7);
    v1326.restore();
    f88(v1326, p950[2]);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 98, p948 * 136.08035278320312);
    v1326.bezierCurveTo(p948 * 98, p948 * 156.08035278320312, p948 * 98, p948 * 156.08035278320312, p948 * 98, p948 * 176.08035278320312);
    f88(v1326, p950[2]);
    v1326.save();
    v1326.translate(p948 * 54, p948 * 72.22320556640625);
    v1326.rotate(1.32);
    f86(v1326, p948 * -18, p948 * -19, p948 * 36, p948 * 38, p948 * 7);
    v1326.restore();
    f88(v1326, p950[2]);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 34, p948 * 60.79463195800781);
    v1326.bezierCurveTo(p948 * 53.5, p948 * 72.29463195800781, p948 * 69, p948 * 79.79463195800781, p948 * 73, p948 * 83.79463195800781);
    f88(v1326, p950[2]);
    v1326.save();
    v1326.translate(p948 * 49, p948 * 127.29463195800781);
    v1326.rotate(1.76);
    f86(v1326, p948 * -20, p948 * -17.5, p948 * 40, p948 * 35, p948 * 7);
    v1326.restore();
    f88(v1326, p950[2]);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 30, p948 * 141.7946319580078);
    v1326.bezierCurveTo(p948 * 47, p948 * 130.2946319580078, p948 * 64, p948 * 119.79463195800781, p948 * 64, p948 * 118.79463195800781);
    f88(v1326, p950[2]);
    v1326.globalAlpha = 1;
    v1326.translate(0, p948 * -10);
    v1326.save();
    v1326.translate(p948 * 98, p948 * 41.15177917480469);
    v1326.rotate(0.8);
    f86(v1326, p948 * -16, p948 * -16.5, p948 * 32, p948 * 33, p948 * 7);
    v1326.restore();
    f88(v1326, p950[3], p950[4], p948 * 5);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 98, p948 * 22.5089111328125);
    v1326.bezierCurveTo(p948 * 97.5, p948 * 41.5089111328125, p948 * 97.5, p948 * 41.5089111328125, p948 * 97, p948 * 60.5089111328125);
    f88(v1326, vUndefined, p950[4], p948 * 5);
    v1326.save();
    v1326.translate(p948 * 147.5, p948 * 69.5089111328125);
    v1326.rotate(0.2);
    f86(v1326, p948 * -15.5, p948 * -16, p948 * 31, p948 * 32, p948 * 7);
    v1326.restore();
    f88(v1326, p950[3], p950[4], p948 * 5);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 163, p948 * 59.50892639160156);
    v1326.bezierCurveTo(p948 * 147, p948 * 69.50892639160156, p948 * 127, p948 * 82.50892639160156, p948 * 131, p948 * 79.50892639160156);
    f88(v1326, vVVVUndefined142, p950[4], p948 * 5);
    v1326.save();
    v1326.translate(p948 * 143.5, p948 * 128.2946319580078);
    v1326.rotate(1.24);
    f86(v1326, p948 * -16.5, p948 * -17.5, p948 * 33, p948 * 35, p948 * 7);
    v1326.restore();
    f88(v1326, p950[3], p950[4], p948 * 5);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 162, p948 * 135.93748474121094);
    v1326.bezierCurveTo(p948 * 143.5, p948 * 128.43748474121094, p948 * 129, p948 * 120.93748474121094, p948 * 125, p948 * 120.93748474121094);
    f88(v1326, undefined, p950[4], p948 * 5);
    v1326.save();
    v1326.translate(p948 * 99, p948 * 156.08035278320312);
    v1326.rotate(0.84);
    f86(v1326, p948 * -18, p948 * -18, p948 * 36, p948 * 36, p948 * 7);
    v1326.restore();
    f88(v1326, p950[3], p950[4], p948 * 5);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 98, p948 * 136.08035278320312);
    v1326.bezierCurveTo(p948 * 98, p948 * 156.08035278320312, p948 * 98, p948 * 156.08035278320312, p948 * 98, p948 * 176.08035278320312);
    f88(v1326, vVVVVVUndefined1422, p950[4], p948 * 5);
    v1326.save();
    v1326.translate(p948 * 54, p948 * 72.22320556640625);
    v1326.rotate(1.32);
    f86(v1326, p948 * -18, p948 * -19, p948 * 36, p948 * 38, p948 * 7);
    v1326.restore();
    f88(v1326, p950[3], p950[4], p948 * 5);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 34, p948 * 60.79463195800781);
    v1326.bezierCurveTo(p948 * 53.5, p948 * 72.29463195800781, p948 * 69, p948 * 79.79463195800781, p948 * 73, p948 * 83.79463195800781);
    f88(v1326, undefined, p950[4], p948 * 5);
    v1326.save();
    v1326.translate(p948 * 49, p948 * 127.29463195800781);
    v1326.rotate(1.76);
    f86(v1326, p948 * -20, p948 * -17.5, p948 * 40, p948 * 35, p948 * 7);
    v1326.restore();
    f88(v1326, p950[3], p950[4], p948 * 5);
    v1326.beginPath();
    v1326.lineCap = "round";
    v1326.lineJoin = "round";
    v1326.moveTo(p948 * 30, p948 * 141.7946319580078);
    v1326.bezierCurveTo(p948 * 47, p948 * 130.2946319580078, p948 * 64, p948 * 119.79463195800781, p948 * 64, p948 * 118.79463195800781);
    f88(v1326, undefined, p950[4], p948 * 5);
    v1326.globalAlpha = p949 ? 0.5 : 1;
    v1326.translate(0, p948 * 10);
    v1326.save();
    v1326.translate(p948 * 98, p948 * 99);
    f89(v1326, 6, p948 * 70.28669492273468, p948 * 10);
    v1326.restore();
    f88(v1326, p950[2]);
    v1326.save();
    v1326.translate(p948 * 98, p948 * 99);
    f89(v1326, 6, p948 * 56.455940020351264, p948 * 10);
    v1326.restore();
    f88(v1326, p950[2]);
    v1326.globalAlpha = 1;
    v1326.translate(0, p948 * -10);
    v1326.save();
    v1326.translate(p948 * 98, p948 * 99);
    f89(v1326, 6, p948 * 70.28669492273468, p948 * 10);
    v1326.restore();
    f88(v1326, p950[5], p950[6], p948 * 5);
    v1326.save();
    v1326.translate(p948 * 98, p948 * 99);
    f89(v1326, 6, p948 * 56.455940020351264, p948 * 10);
    v1326.restore();
    f88(v1326, p950[7], p950[8], p948 * 7);
    return v1325;
  }
  ;
  function f242(p951, p952, p953) {
    var v1327 = document.createElement("canvas");
    var v1328 = v1327.getContext("2d");
    v1327.width = p951 * 400;
    v1327.height = p951 * 170;
    v1328.translate(0, p951 * -170);
    v1328.beginPath();
    v1328.lineCap = "round";
    v1328.lineJoin = "round";
    v1328.moveTo(p951 * 159.5, p951 * 322.0625);
    v1328.bezierCurveTo(p951 * 240.5, p951 * 293.0625, p951 * 240.5, p951 * 293.0625, p951 * 321.5, p951 * 264.0625);
    v1328.bezierCurveTo(p951 * 276.5, p951 * 230.0625, p951 * 276.5, p951 * 230.0625, p951 * 231.5, p951 * 196.0625);
    v1328.bezierCurveTo(p951 * 158.5, p951 * 221.5625, p951 * 158.5, p951 * 221.5625, p951 * 85.5, p951 * 247.0625);
    v1328.closePath();
    f88(v1328, p953[0], p953[1], p951 * 12);
    v1328.beginPath();
    v1328.lineCap = "round";
    v1328.lineJoin = "round";
    v1328.moveTo(p951 * 212.5, p951 * 270.0625);
    v1328.bezierCurveTo(p951 * 235, p951 * 261.5625, p951 * 235, p951 * 261.5625, p951 * 257.5, p951 * 253.0625);
    v1328.closePath();
    f88(v1328, vVUndefined, p953[0], p951 * 12);
    v1328.beginPath();
    v1328.lineCap = "round";
    v1328.lineJoin = "round";
    v1328.moveTo(p951 * 193.5, p951 * 226.0625);
    v1328.bezierCurveTo(p951 * 204.5, p951 * 242.0625, p951 * 242.5, p951 * 237.0625, p951 * 251.5, p951 * 225.0625);
    v1328.bezierCurveTo(p951 * 246.5, p951 * 195.0625, p951 * 205.5, p951 * 190.0625, p951 * 193.5, p951 * 227.0625);
    v1328.closePath();
    f88(v1328, p953[2], p953[3], p951 * 12);
    v1328.beginPath();
    v1328.lineCap = "round";
    v1328.lineJoin = "round";
    v1328.moveTo(p951 * 164.5, p951 * 245.0625);
    v1328.bezierCurveTo(p951 * 182.5, p951 * 264.0625, p951 * 252.5, p951 * 258.0625, p951 * 276.5, p951 * 244.0625);
    v1328.bezierCurveTo(p951 * 265.5, p951 * 226.0625, p951 * 244.5, p951 * 231.0625, p951 * 229.5, p951 * 230.0625);
    v1328.bezierCurveTo(p951 * 205.5, p951 * 227.0625, p951 * 175.5, p951 * 202.0625, p951 * 162.5, p951 * 244.0625);
    v1328.closePath();
    f88(v1328, p953[2], p953[3], p951 * 12);
    v1328.beginPath();
    v1328.lineCap = "round";
    v1328.lineJoin = "round";
    v1328.moveTo(p951 * 115.5, p951 * 260.0625);
    v1328.bezierCurveTo(p951 * 134.5, p951 * 279.0625, p951 * 170.5, p951 * 275.0625, p951 * 191.5, p951 * 257.0625);
    v1328.bezierCurveTo(p951 * 174.5, p951 * 208.0625, p951 * 142.5, p951 * 197.0625, p951 * 116.5, p951 * 259.0625);
    v1328.closePath();
    f88(v1328, p953[2], p953[3], p951 * 12);
    v1328.beginPath();
    v1328.lineCap = "round";
    v1328.lineJoin = "round";
    v1328.moveTo(p951 * 152.5, p951 * 278.0625);
    v1328.bezierCurveTo(p951 * 165.5, p951 * 294.0625, p951 * 200.5, p951 * 287.0625, p951 * 216.5, p951 * 278.0625);
    v1328.bezierCurveTo(p951 * 206.5, p951 * 247.0625, p951 * 173.5, p951 * 233.0625, p951 * 153.5, p951 * 276.0625);
    v1328.closePath();
    f88(v1328, p953[2], p953[3], p951 * 12);
    return v1327;
  }
  function f243(p954, p955, p956) {
    var v1329 = document.createElement("canvas");
    var v1330 = v1329.getContext("2d");
    v1329.width = p954 * 102;
    v1329.height = p954 * 102;
    v1330.globalAlpha = p955 ? 0.5 : 1;
    v1330.translate(3, 3);
    f86(v1330, p954 * 24, p954 * 26, p954 * 70, p954 * 9, p954 * 10);
    f88(v1330, p956[0]);
    f86(v1330, p954 * 26, p954 * 70, p954 * 70, p954 * 9, p954 * 10);
    f88(v1330, p956[0]);
    f86(v1330, p954 * 5, p954 * 3, p954 * 22, p954 * 94, p954 * 5);
    f88(v1330, p956[0]);
    f86(v1330, p954 * 40, p954 * 3, p954 * 22, p954 * 94, p954 * 5);
    f88(v1330, p956[0]);
    f86(v1330, p954 * 75, p954 * 3, p954 * 22, p954 * 94, p954 * 5);
    f88(v1330, p956[0]);
    v1330.globalAlpha = 1;
    v1330.translate(-3, -3);
    f86(v1330, p954 * 24, p954 * 26, p954 * 70, p954 * 9, p954 * 10);
    f88(v1330, p956[1]);
    f86(v1330, p954 * 26, p954 * 70, p954 * 70, p954 * 9, p954 * 10);
    f88(v1330, p956[1]);
    f86(v1330, p954 * 5, p954 * 3, p954 * 22, p954 * 94, p954 * 5);
    f88(v1330, p956[2], p956[3], p954 * 4);
    f86(v1330, p954 * 40, p954 * 3, p954 * 22, p954 * 94, p954 * 5);
    f88(v1330, p956[2], p956[3], p954 * 4);
    f86(v1330, p954 * 75, p954 * 3, p954 * 22, p954 * 94, p954 * 5);
    f88(v1330, p956[2], p956[3], p954 * 4);
    return v1329;
  }
  function f244(p957, p958, p959) {
    var v1331 = document.createElement("canvas");
    var v1332 = v1331.getContext("2d");
    v1331.width = p957 * 316;
    v1331.height = p957 * 365;
    v1332.save();
    v1332.translate(p957 * 156.07142639160156, p957 * 51.81248474121094);
    v1332.rotate(0);
    f86(v1332, p957 * -21.5, p957 * -34, p957 * 43, p957 * 68, p957 * 8);
    v1332.restore();
    f88(v1332, p959[1], p959[2], p957 * 15);
    v1332.beginPath();
    v1332.lineCap = "round";
    v1332.lineJoin = "round";
    v1332.moveTo(p957 * 110.57142639160156, p957 * 197.09820556640625);
    v1332.bezierCurveTo(p957 * 158.07142639160156, p957 * 179.09820556640625, p957 * 158.07142639160156, p957 * 179.09820556640625, p957 * 205.57142639160156, p957 * 161.09820556640625);
    v1332.bezierCurveTo(p957 * 205.57142639160156, p957 * 235.45535278320312, p957 * 205.57142639160156, p957 * 235.45535278320312, p957 * 205.57142639160156, p957 * 309.8125);
    v1332.bezierCurveTo(p957 * 205.57142639160156, p957 * 323.8125, p957 * 200.57142639160156, p957 * 325.8125, p957 * 187.57142639160156, p957 * 326.8125);
    v1332.bezierCurveTo(p957 * 155.57142639160156, p957 * 326.3125, p957 * 155.57142639160156, p957 * 326.3125, p957 * 123.57142639160156, p957 * 325.8125);
    v1332.bezierCurveTo(p957 * 111.57142639160156, p957 * 326.8125, p957 * 109.57142639160156, p957 * 321.8125, p957 * 110.57142639160156, p957 * 312.8125);
    v1332.closePath();
    f88(v1332, p959[3], p959[4], p957 * 15);
    v1332.beginPath();
    v1332.lineCap = "round";
    v1332.lineJoin = "round";
    v1332.moveTo(p957 * 126.57142639160156, p957 * 67.38392639160156);
    v1332.bezierCurveTo(p957 * 126.57142639160156, p957 * 57.38392639160156, p957 * 132.57142639160156, p957 * 54.38392639160156, p957 * 140.57142639160156, p957 * 54.38392639160156);
    v1332.bezierCurveTo(p957 * 177.57142639160156, p957 * 55.38392639160156, p957 * 158.07142639160156, p957 * 54.38392639160156, p957 * 175.57142639160156, p957 * 54.38392639160156);
    v1332.bezierCurveTo(p957 * 185.57142639160156, p957 * 56.38392639160156, p957 * 185.57142639160156, p957 * 57.38392639160156, p957 * 184.57142639160156, p957 * 66.38392639160156);
    v1332.bezierCurveTo(p957 * 184.57142639160156, p957 * 78.38392639160156, p957 * 184.57142639160156, p957 * 89.38392639160156, p957 * 184.57142639160156, p957 * 90.38392639160156);
    v1332.bezierCurveTo(p957 * 177.57142639160156, p957 * 107.38392639160156, p957 * 180.57142639160156, p957 * 112.38392639160156, p957 * 189.57142639160156, p957 * 116.38392639160156);
    v1332.bezierCurveTo(p957 * 212.57142639160156, p957 * 127.38392639160156, p957 * 212.57142639160156, p957 * 132.38392639160156, p957 * 211.57142639160156, p957 * 150.38392639160156);
    v1332.bezierCurveTo(p957 * 211.57142639160156, p957 * 227.59821128845215, p957 * 211.57142639160156, p957 * 227.59821128845215, p957 * 211.57142639160156, p957 * 304.81249618530273);
    v1332.bezierCurveTo(p957 * 212.57142639160156, p957 * 328.81249618530273, p957 * 209.57142639160156, p957 * 330.81249618530273, p957 * 188.57142639160156, p957 * 333.81249618530273);
    v1332.bezierCurveTo(p957 * 155.07142639160156, p957 * 333.31249618530273, p957 * 155.07142639160156, p957 * 333.31249618530273, p957 * 121.57142639160156, p957 * 332.81249618530273);
    v1332.bezierCurveTo(p957 * 104.57142639160156, p957 * 327.81249618530273, p957 * 105.57142639160156, p957 * 328.81249618530273, p957 * 104.57142639160156, p957 * 312.81249618530273);
    v1332.bezierCurveTo(p957 * 104.57142639160156, p957 * 228.16963958740234, p957 * 104.57142639160156, p957 * 228.16963958740234, p957 * 104.57142639160156, p957 * 143.52678298950195);
    v1332.bezierCurveTo(p957 * 106.57142639160156, p957 * 124.52678298950195, p957 * 110.57142639160156, p957 * 123.52678298950195, p957 * 123.57142639160156, p957 * 116.52678298950195);
    v1332.bezierCurveTo(p957 * 136.57142639160156, p957 * 110.52678298950195, p957 * 130.57142639160156, p957 * 106.52678298950195, p957 * 126.57142639160156, p957 * 98.52678298950195);
    v1332.closePath();
    f88(v1332, undefined, p959[5], p957 * 15);
    v1332.beginPath();
    v1332.lineCap = "round";
    v1332.lineJoin = "round";
    v1332.moveTo(p957 * 125.57142639160156, p957 * 156.66963958740234);
    v1332.bezierCurveTo(p957 * 125.57142639160156, p957 * 182.66963958740234, p957 * 125.57142639160156, p957 * 182.66963958740234, p957 * 125.57142639160156, p957 * 208.66963958740234);
    v1332.closePath();
    f88(v1332, undefined, p959[6], p957 * 15);
    return v1331;
  }
  function f245(p960, p961, p962, p963) {
    var v1333 = document.createElement("canvas");
    var v1334 = v1333.getContext("2d");
    v1333.width = p960 * 198;
    v1333.height = p960 * 147;
    v1334.globalAlpha = p961 ? 0.5 : 1;
    v1334.translate(0, p960 * 6);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 44, p960 * 76);
    v1334.bezierCurveTo(p960 * 50, p960 * 82, p960 * 50, p960 * 82, p960 * 56, p960 * 88);
    v1334.bezierCurveTo(p960 * 59, p960 * 82, p960 * 59, p960 * 82, p960 * 62, p960 * 76);
    v1334.bezierCurveTo(p960 * 59, p960 * 71, p960 * 59, p960 * 71, p960 * 56, p960 * 66);
    v1334.bezierCurveTo(p960 * 59, p960 * 69, p960 * 59, p960 * 69, p960 * 62, p960 * 72);
    v1334.bezierCurveTo(p960 * 80, p960 * 48, p960 * 102, p960 * 50, p960 * 120, p960 * 62);
    v1334.bezierCurveTo(p960 * 127, p960 * 58, p960 * 127, p960 * 58, p960 * 134, p960 * 54);
    v1334.bezierCurveTo(p960 * 129, p960 * 60, p960 * 129, p960 * 60, p960 * 124, p960 * 66);
    v1334.bezierCurveTo(p960 * 129, p960 * 73, p960 * 129, p960 * 73, p960 * 134, p960 * 80);
    v1334.bezierCurveTo(p960 * 140, p960 * 74, p960 * 140, p960 * 74, p960 * 146, p960 * 68);
    v1334.bezierCurveTo(p960 * 142, p960 * 76, p960 * 142, p960 * 76, p960 * 138, p960 * 84);
    v1334.bezierCurveTo(p960 * 144, p960 * 90, p960 * 142, p960 * 90, p960 * 144, p960 * 90);
    v1334.bezierCurveTo(p960 * 136, p960 * 97, p960 * 136, p960 * 97, p960 * 128, p960 * 104);
    v1334.bezierCurveTo(p960 * 154, p960 * 110, p960 * 164, p960 * 90, p960 * 160, p960 * 80);
    v1334.bezierCurveTo(p960 * 138, p960 * 22, p960 * 148, p960 * 51, p960 * 136, p960 * 22);
    v1334.bezierCurveTo(p960 * 97, p960 * 24, p960 * 97, p960 * 24, p960 * 58, p960 * 26);
    v1334.bezierCurveTo(p960 * 47, p960 * 54, p960 * 36, p960 * 80, p960 * 36, p960 * 82);
    v1334.bezierCurveTo(p960 * 40, p960 * 108, p960 * 54, p960 * 104, p960 * 62, p960 * 104);
    v1334.bezierCurveTo(p960 * 46, p960 * 92, p960 * 54, p960 * 97, p960 * 46, p960 * 90);
    v1334.closePath();
    f88(v1334, p962[0]);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 36, p960 * 80);
    v1334.bezierCurveTo(p960 * 30, p960 * 84, p960 * 28, p960 * 92, p960 * 34, p960 * 100);
    v1334.bezierCurveTo(p960 * 41.5, p960 * 102, p960 * 41.5, p960 * 102, p960 * 49, p960 * 104);
    v1334.bezierCurveTo(p960 * 43, p960 * 105.5, p960 * 43, p960 * 105.5, p960 * 37, p960 * 107);
    v1334.bezierCurveTo(p960 * 46, p960 * 111, p960 * 60, p960 * 114, p960 * 76, p960 * 114);
    v1334.bezierCurveTo(p960 * 78, p960 * 110.5, p960 * 78, p960 * 110.5, p960 * 80, p960 * 107);
    v1334.bezierCurveTo(p960 * 81, p960 * 110.5, p960 * 81, p960 * 110.5, p960 * 82, p960 * 114);
    v1334.bezierCurveTo(p960 * 94.5, p960 * 113.5, p960 * 94.5, p960 * 113.5, p960 * 107, p960 * 113);
    v1334.bezierCurveTo(p960 * 108.5, p960 * 110, p960 * 108.5, p960 * 110, p960 * 110, p960 * 107);
    v1334.bezierCurveTo(p960 * 111.5, p960 * 110.5, p960 * 111.5, p960 * 110.5, p960 * 113, p960 * 114);
    v1334.bezierCurveTo(p960 * 131, p960 * 112.5, p960 * 131, p960 * 112.5, p960 * 149, p960 * 111);
    v1334.bezierCurveTo(p960 * 148.5, p960 * 107.5, p960 * 148.5, p960 * 107.5, p960 * 148, p960 * 104);
    v1334.bezierCurveTo(p960 * 150.5, p960 * 107, p960 * 150.5, p960 * 107, p960 * 153, p960 * 110);
    v1334.bezierCurveTo(p960 * 155.5, p960 * 108.5, p960 * 155.5, p960 * 108.5, p960 * 158, p960 * 107);
    v1334.bezierCurveTo(p960 * 156.5, p960 * 104, p960 * 156.5, p960 * 104, p960 * 155, p960 * 101);
    v1334.bezierCurveTo(p960 * 158.5, p960 * 102.5, p960 * 158.5, p960 * 102.5, p960 * 162, p960 * 104);
    v1334.bezierCurveTo(p960 * 168, p960 * 100, p960 * 170, p960 * 92, p960 * 169, p960 * 85);
    v1334.bezierCurveTo(p960 * 166, p960 * 86, p960 * 166, p960 * 86, p960 * 163, p960 * 87);
    v1334.bezierCurveTo(p960 * 165.5, p960 * 83, p960 * 165.5, p960 * 83, p960 * 168, p960 * 79);
    v1334.bezierCurveTo(p960 * 165.5, p960 * 76.5, p960 * 165.5, p960 * 76.5, p960 * 163, p960 * 74);
    v1334.bezierCurveTo(p960 * 155, p960 * 82.5, p960 * 155, p960 * 82.5, p960 * 147, p960 * 91);
    v1334.bezierCurveTo(p960 * 139, p960 * 95.5, p960 * 139, p960 * 95.5, p960 * 131, p960 * 100);
    v1334.bezierCurveTo(p960 * 97.5, p960 * 100.5, p960 * 97.5, p960 * 100.5, p960 * 64, p960 * 101);
    v1334.bezierCurveTo(p960 * 49, p960 * 102, p960 * 43, p960 * 90, p960 * 36, p960 * 80);
    v1334.closePath();
    f88(v1334, p962[0]);
    v1334.globalAlpha = 1;
    v1334.translate(0, p960 * -6);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 36, p960 * 80);
    v1334.bezierCurveTo(p960 * 30, p960 * 84, p960 * 28, p960 * 92, p960 * 34, p960 * 100);
    v1334.bezierCurveTo(p960 * 41.5, p960 * 102, p960 * 41.5, p960 * 102, p960 * 49, p960 * 104);
    v1334.bezierCurveTo(p960 * 43, p960 * 105.5, p960 * 43, p960 * 105.5, p960 * 37, p960 * 107);
    v1334.bezierCurveTo(p960 * 46, p960 * 111, p960 * 60, p960 * 114, p960 * 76, p960 * 114);
    v1334.bezierCurveTo(p960 * 78, p960 * 110.5, p960 * 78, p960 * 110.5, p960 * 80, p960 * 107);
    v1334.bezierCurveTo(p960 * 81, p960 * 110.5, p960 * 81, p960 * 110.5, p960 * 82, p960 * 114);
    v1334.bezierCurveTo(p960 * 94.5, p960 * 113.5, p960 * 94.5, p960 * 113.5, p960 * 107, p960 * 113);
    v1334.bezierCurveTo(p960 * 108.5, p960 * 110, p960 * 108.5, p960 * 110, p960 * 110, p960 * 107);
    v1334.bezierCurveTo(p960 * 111.5, p960 * 110.5, p960 * 111.5, p960 * 110.5, p960 * 113, p960 * 114);
    v1334.bezierCurveTo(p960 * 131, p960 * 112.5, p960 * 131, p960 * 112.5, p960 * 149, p960 * 111);
    v1334.bezierCurveTo(p960 * 148.5, p960 * 107.5, p960 * 148.5, p960 * 107.5, p960 * 148, p960 * 104);
    v1334.bezierCurveTo(p960 * 150.5, p960 * 107, p960 * 150.5, p960 * 107, p960 * 153, p960 * 110);
    v1334.bezierCurveTo(p960 * 155.5, p960 * 108.5, p960 * 155.5, p960 * 108.5, p960 * 158, p960 * 107);
    v1334.bezierCurveTo(p960 * 156.5, p960 * 104, p960 * 156.5, p960 * 104, p960 * 155, p960 * 101);
    v1334.bezierCurveTo(p960 * 158.5, p960 * 102.5, p960 * 158.5, p960 * 102.5, p960 * 162, p960 * 104);
    v1334.bezierCurveTo(p960 * 168, p960 * 100, p960 * 170, p960 * 92, p960 * 169, p960 * 85);
    v1334.bezierCurveTo(p960 * 166, p960 * 86, p960 * 166, p960 * 86, p960 * 163, p960 * 87);
    v1334.bezierCurveTo(p960 * 165.5, p960 * 83, p960 * 165.5, p960 * 83, p960 * 168, p960 * 79);
    v1334.bezierCurveTo(p960 * 165.5, p960 * 76.5, p960 * 165.5, p960 * 76.5, p960 * 163, p960 * 74);
    v1334.bezierCurveTo(p960 * 155, p960 * 82.5, p960 * 155, p960 * 82.5, p960 * 147, p960 * 91);
    v1334.bezierCurveTo(p960 * 139, p960 * 95.5, p960 * 139, p960 * 95.5, p960 * 131, p960 * 100);
    v1334.bezierCurveTo(p960 * 97.5, p960 * 100.5, p960 * 97.5, p960 * 100.5, p960 * 64, p960 * 101);
    v1334.bezierCurveTo(p960 * 49, p960 * 102, p960 * 43, p960 * 90, p960 * 36, p960 * 80);
    v1334.closePath();
    f88(v1334, p962[1], p962[2], p960 * 4);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 49, p960 * 98);
    v1334.bezierCurveTo(p960 * 96.5, p960 * 98, p960 * 96.5, p960 * 98, p960 * 144, p960 * 98);
    v1334.bezierCurveTo(p960 * 136.5, p960 * 102, p960 * 136.5, p960 * 102, p960 * 129, p960 * 106);
    v1334.bezierCurveTo(p960 * 103, p960 * 105.5, p960 * 103, p960 * 105.5, p960 * 77, p960 * 105);
    v1334.bezierCurveTo(p960 * 65, p960 * 105, p960 * 65, p960 * 105, p960 * 53, p960 * 105);
    v1334.closePath();
    f88(v1334, p962[1]);
    v1334.globalAlpha = 0.5;
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 54, p960 * 98);
    v1334.bezierCurveTo(p960 * 97, p960 * 98, p960 * 97, p960 * 98, p960 * 140, p960 * 98);
    v1334.bezierCurveTo(p960 * 134, p960 * 101, p960 * 134, p960 * 101, p960 * 128, p960 * 104);
    v1334.bezierCurveTo(p960 * 92, p960 * 104, p960 * 92, p960 * 104, p960 * 56, p960 * 104);
    v1334.closePath();
    f88(v1334, p962[0]);
    v1334.globalAlpha = 1;
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 118, p960 * 47);
    v1334.bezierCurveTo(p960 * 124.5, p960 * 43.5, p960 * 124.5, p960 * 43.5, p960 * 131, p960 * 40);
    v1334.bezierCurveTo(p960 * 128, p960 * 46, p960 * 128, p960 * 46, p960 * 125, p960 * 52);
    v1334.bezierCurveTo(p960 * 131, p960 * 57, p960 * 135, p960 * 64, p960 * 139, p960 * 73);
    v1334.bezierCurveTo(p960 * 142.5, p960 * 69.5, p960 * 142.5, p960 * 69.5, p960 * 146, p960 * 66);
    v1334.bezierCurveTo(p960 * 143.5, p960 * 72.5, p960 * 143.5, p960 * 72.5, p960 * 141, p960 * 79);
    v1334.bezierCurveTo(p960 * 142, p960 * 91, p960 * 141, p960 * 94, p960 * 132, p960 * 98);
    v1334.bezierCurveTo(p960 * 117, p960 * 102, p960 * 126, p960 * 108, p960 * 142, p960 * 102);
    v1334.bezierCurveTo(p960 * 159, p960 * 98, p960 * 164, p960 * 80, p960 * 162, p960 * 47);
    v1334.bezierCurveTo(p960 * 160, p960 * 19, p960 * 150, p960 * 6, p960 * 117, p960 * 4);
    v1334.bezierCurveTo(p960 * 44, p960 * 0, p960 * 35, p960 * 20, p960 * 33, p960 * 37);
    v1334.bezierCurveTo(p960 * 29, p960 * 69, p960 * 33, p960 * 88, p960 * 44, p960 * 96);
    v1334.bezierCurveTo(p960 * 64, p960 * 107, p960 * 70, p960 * 102, p960 * 54, p960 * 93);
    v1334.bezierCurveTo(p960 * 49, p960 * 88, p960 * 50, p960 * 82, p960 * 53, p960 * 77);
    v1334.bezierCurveTo(p960 * 51.5, p960 * 71, p960 * 51.5, p960 * 71, p960 * 50, p960 * 65);
    v1334.bezierCurveTo(p960 * 53, p960 * 68.5, p960 * 53, p960 * 68.5, p960 * 56, p960 * 72);
    v1334.bezierCurveTo(p960 * 59, p960 * 67.5, p960 * 59, p960 * 67.5, p960 * 62, p960 * 63);
    v1334.bezierCurveTo(p960 * 60.5, p960 * 59.5, p960 * 60.5, p960 * 59.5, p960 * 59, p960 * 56);
    v1334.bezierCurveTo(p960 * 62, p960 * 57, p960 * 62, p960 * 57, p960 * 65, p960 * 58);
    v1334.bezierCurveTo(p960 * 78, p960 * 35, p960 * 103, p960 * 36, p960 * 117, p960 * 47);
    v1334.closePath();
    f88(v1334, p962[1], p962[2], p960 * 6);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 62, p960 * 21);
    v1334.bezierCurveTo(p960 * 63, p960 * 34, p960 * 64, p960 * 37, p960 * 66, p960 * 40);
    v1334.bezierCurveTo(p960 * 54, p960 * 49, p960 * 53, p960 * 51, p960 * 48, p960 * 58);
    v1334.bezierCurveTo(p960 * 44, p960 * 51, p960 * 42, p960 * 43, p960 * 40, p960 * 36);
    v1334.bezierCurveTo(p960 * 47, p960 * 28, p960 * 52, p960 * 25, p960 * 61, p960 * 21);
    v1334.closePath();
    f88(v1334, p962[4]);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 60, p960 * 29);
    v1334.bezierCurveTo(p960 * 62, p960 * 25, p960 * 65, p960 * 24, p960 * 70, p960 * 23);
    f88(v1334, undefined, p962[3], p960 * 4);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 61, p960 * 37);
    v1334.bezierCurveTo(p960 * 63, p960 * 32, p960 * 66, p960 * 32, p960 * 71, p960 * 32);
    f88(v1334, undefined, p962[3], p960 * 4);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 52, p960 * 31);
    v1334.bezierCurveTo(p960 * 50, p960 * 26, p960 * 50, p960 * 25, p960 * 51, p960 * 23);
    f88(v1334, vVVVUndefined113, p962[3], p960 * 4);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 46, p960 * 35);
    v1334.bezierCurveTo(p960 * 44, p960 * 31, p960 * 43, p960 * 29, p960 * 45, p960 * 26);
    f88(v1334, undefined, p962[3], p960 * 4);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 58, p960 * 44);
    v1334.bezierCurveTo(p960 * 57, p960 * 48, p960 * 57, p960 * 50, p960 * 60, p960 * 52);
    f88(v1334, vVVVVVUndefined583, p962[3], p960 * 4);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 53, p960 * 48);
    v1334.bezierCurveTo(p960 * 52, p960 * 52, p960 * 52, p960 * 54, p960 * 55, p960 * 57);
    f88(v1334, vVVUndefined5, p962[3], p960 * 4);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 46, p960 * 41);
    v1334.bezierCurveTo(p960 * 41, p960 * 42, p960 * 39, p960 * 45, p960 * 38, p960 * 48);
    f88(v1334, undefined, p962[3], p960 * 4);
    v1334.beginPath();
    v1334.lineCap = "round";
    v1334.lineJoin = "round";
    v1334.moveTo(p960 * 48, p960 * 48);
    v1334.bezierCurveTo(p960 * 42, p960 * 51, p960 * 42, p960 * 53, p960 * 40, p960 * 55);
    f88(v1334, undefined, p962[3], p960 * 4);
    if (p963 == 0) {
      v1334.beginPath();
      v1334.lineCap = "round";
      v1334.lineJoin = "round";
      v1334.moveTo(p960 * 99, p960 * 101);
      v1334.bezierCurveTo(p960 * 118.6666259765625, p960 * 104.33331298828125, p960 * 124.6666259765625, p960 * 116.33331298828125, p960 * 112.6666259765625, p960 * 114.33331298828125);
      v1334.bezierCurveTo(p960 * 104.6666259765625, p960 * 112.33331298828125, p960 * 100.6666259765625, p960 * 105.33331298828125, p960 * 99.6666259765625, p960 * 101.33331298828125);
      f88(v1334, vVVVVUndefined1422, p962[5], p960 * 6);
      v1334.beginPath();
      v1334.lineCap = "round";
      v1334.lineJoin = "round";
      v1334.moveTo(p960 * 97.6666259765625, p960 * 101.33331298828125);
      v1334.bezierCurveTo(p960 * 81.6666259765625, p960 * 106.33331298828125, p960 * 79.6666259765625, p960 * 114.33331298828125, p960 * 89.6666259765625, p960 * 114.33331298828125);
      v1334.bezierCurveTo(p960 * 95.6666259765625, p960 * 111.33331298828125, p960 * 95.6666259765625, p960 * 109.33331298828125, p960 * 98.6666259765625, p960 * 102.33331298828125);
      f88(v1334, vVVVUndefined142, p962[5], p960 * 6);
    } else {
      v1334.beginPath();
      v1334.lineCap = "round";
      v1334.lineJoin = "round";
      v1334.moveTo(p960 * 103, p960 * 100.39999389648438);
      v1334.bezierCurveTo(p960 * 120, p960 * 106.39999389648438, p960 * 118, p960 * 107.39999389648438, p960 * 120, p960 * 111.39999389648438);
      f88(v1334, undefined, p962[5], p960 * 6);
      v1334.beginPath();
      v1334.lineCap = "round";
      v1334.lineJoin = "round";
      v1334.moveTo(p960 * 103, p960 * 100.39999389648438);
      v1334.bezierCurveTo(p960 * 90, p960 * 103.39999389648438, p960 * 89, p960 * 106.39999389648438, p960 * 87, p960 * 112.39999389648438);
      f88(v1334, vVVVVUndefined582, p962[5], p960 * 6);
      f92(v1334, p960 * 86, p960 * 114.39999389648438, p960 * 4.5);
      f88(v1334, p962[1], p962[5], p960 * 6);
      f92(v1334, p960 * 121, p960 * 114.39999389648438, p960 * 4.5);
      f88(v1334, p962[1], p962[5], p960 * 6);
    }
    return v1333;
  }
  function f246(p964, p965, p966) {
    var v1335 = document.createElement("canvas");
    var v1336 = v1335.getContext("2d");
    v1335.width = p964 * 496;
    v1335.height = p964 * 520;
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 10);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 19.000030517578125, p964 * 256.67613983154297);
    v1336.bezierCurveTo(p964 * 1.000030517578125, p964 * 332.67613983154297, p964 * 23.000030517578125, p964 * 404.67613983154297, p964 * 95.00003051757812, p964 * 463.67613983154297);
    v1336.bezierCurveTo(p964 * 128.00003051757812, p964 * 491.67613983154297, p964 * 165.00003051757812, p964 * 507.67613983154297, p964 * 194.00003051757812, p964 * 512.676139831543);
    v1336.bezierCurveTo(p964 * 280.0000305175781, p964 * 517.676139831543, p964 * 291.0000305175781, p964 * 516.676139831543, p964 * 342.0000305175781, p964 * 497.67613983154297);
    v1336.bezierCurveTo(p964 * 425.0000305175781, p964 * 454.67613983154297, p964 * 469.0000305175781, p964 * 392.67613983154297, p964 * 468.0000305175781, p964 * 300.67613983154297);
    v1336.bezierCurveTo(p964 * 408.5000305175781, p964 * 365.17613983154297, p964 * 408.5000305175781, p964 * 365.17613983154297, p964 * 349.0000305175781, p964 * 429.67613983154297);
    v1336.bezierCurveTo(p964 * 256.0000305175781, p964 * 473.67613983154297, p964 * 167.00003051757812, p964 * 459.67613983154297, p964 * 78.00003051757812, p964 * 384.67613983154297);
    v1336.closePath();
    f88(v1336, p966[0]);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -10);
    f92(v1336, p964 * 247.01138305664062, p964 * 249.3125, p964 * 161.4465855941215);
    f88(v1336, p966[5], vVVUndefined14, p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 10);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 65.00003051757812, p964 * 263.4034118652344);
    v1336.bezierCurveTo(p964 * 109.00003051757812, p964 * 160.40341186523438, p964 * 185.00003051757812, p964 * 128.40341186523438, p964 * 222.00003051757812, p964 * 124.40341186523438);
    v1336.bezierCurveTo(p964 * 277.0000305175781, p964 * 116.40341186523438, p964 * 339.0000305175781, p964 * 134.40341186523438, p964 * 379.0000305175781, p964 * 195.40341186523438);
    v1336.bezierCurveTo(p964 * 409.0000305175781, p964 * 242.40341186523438, p964 * 416.0000305175781, p964 * 256.4034118652344, p964 * 428.0000305175781, p964 * 304.4034118652344);
    v1336.bezierCurveTo(p964 * 457.0000305175781, p964 * 203.40341186523438, p964 * 449.0000305175781, p964 * 183.40341186523438, p964 * 438.0000305175781, p964 * 162.40341186523438);
    v1336.bezierCurveTo(p964 * 381.0000305175781, p964 * 73.40341186523438, p964 * 360.0000305175781, p964 * 66.40341186523438, p964 * 257.0000305175781, p964 * 46.403411865234375);
    v1336.bezierCurveTo(p964 * 191.00003051757812, p964 * 45.403411865234375, p964 * 142.00003051757812, p964 * 65.40341186523438, p964 * 101.00003051757812, p964 * 115.40341186523438);
    v1336.closePath();
    f88(v1336, p966[0]);
    v1336.globalAlpha = 1;
    var vF42 = function (p967, p968) {
      var v1337 = document.createElement("canvas");
      var v1338 = v1337.getContext("2d");
      v1337.width = p967 * 496;
      v1337.height = p967 * 520;
      v1338.globalAlpha = 1;
      v1338.translate(0, p967 * -10);
      f92(v1338, p967 * 247.01138305664062, p967 * 250.13068389892578, p967 * 232.81967270830015);
      f88(v1338, p968[1], p968[2], p967 * 14);
      v1338.globalCompositeOperation = "destination-out";
      f92(v1338, p967 * 247.01138305664062, p967 * 249.3125, p967 * 161.4465855941215);
      f88(v1338, p968[0], p968[0], p967 * 14);
      v1338.globalCompositeOperation = "source-over";
      return v1337;
    }(p964, p966);
    v1336.drawImage(vF42, 0, 0);
    v1336.translate(0, p964 * -10);
    f92(v1336, p964 * 247.01138305664062, p964 * 249.3125, p964 * 161.4465855941215);
    f88(v1336, vVVUndefined11, p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 325.0113830566406, p964 * 13.767059326171875);
    v1336.bezierCurveTo(p964 * 349.5113830566406, p964 * 25.767059326171875, p964 * 349.5113830566406, p964 * 25.767059326171875, p964 * 374.0113830566406, p964 * 37.767059326171875);
    v1336.bezierCurveTo(p964 * 384.0113830566406, p964 * 44.767059326171875, p964 * 383.0113830566406, p964 * 50.767059326171875, p964 * 368.0113830566406, p964 * 68.76705932617188);
    v1336.bezierCurveTo(p964 * 352.5113830566406, p964 * 91.26705932617188, p964 * 352.5113830566406, p964 * 91.26705932617188, p964 * 337.0113830566406, p964 * 113.76705932617188);
    v1336.bezierCurveTo(p964 * 328.0113830566406, p964 * 119.76705932617188, p964 * 328.0113830566406, p964 * 121.76705932617188, p964 * 312.0113830566406, p964 * 112.76705932617188);
    v1336.bezierCurveTo(p964 * 303.0113830566406, p964 * 108.26705932617188, p964 * 303.0113830566406, p964 * 108.26705932617188, p964 * 294.0113830566406, p964 * 103.76705932617188);
    v1336.bezierCurveTo(p964 * 287.0113830566406, p964 * 99.76705932617188, p964 * 293.0113830566406, p964 * 84.76705932617188, p964 * 297.0113830566406, p964 * 67.76705932617188);
    v1336.bezierCurveTo(p964 * 302.0113830566406, p964 * 47.767059326171875, p964 * 302.0113830566406, p964 * 47.767059326171875, p964 * 307.0113830566406, p964 * 27.767059326171875);
    v1336.bezierCurveTo(p964 * 310.0113830566406, p964 * 15.767059326171875, p964 * 317.0113830566406, p964 * 12.767059326171875, p964 * 323.0113830566406, p964 * 13.767059326171875);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 325.0113830566406, p964 * 13.767059326171875);
    v1336.bezierCurveTo(p964 * 349.5113830566406, p964 * 25.767059326171875, p964 * 349.5113830566406, p964 * 25.767059326171875, p964 * 374.0113830566406, p964 * 37.767059326171875);
    v1336.bezierCurveTo(p964 * 384.0113830566406, p964 * 44.767059326171875, p964 * 383.0113830566406, p964 * 50.767059326171875, p964 * 368.0113830566406, p964 * 68.76705932617188);
    v1336.bezierCurveTo(p964 * 352.5113830566406, p964 * 91.26705932617188, p964 * 352.5113830566406, p964 * 91.26705932617188, p964 * 337.0113830566406, p964 * 113.76705932617188);
    v1336.bezierCurveTo(p964 * 328.0113830566406, p964 * 119.76705932617188, p964 * 328.0113830566406, p964 * 121.76705932617188, p964 * 312.0113830566406, p964 * 112.76705932617188);
    v1336.bezierCurveTo(p964 * 303.0113830566406, p964 * 108.26705932617188, p964 * 303.0113830566406, p964 * 108.26705932617188, p964 * 294.0113830566406, p964 * 103.76705932617188);
    v1336.bezierCurveTo(p964 * 287.0113830566406, p964 * 99.76705932617188, p964 * 293.0113830566406, p964 * 84.76705932617188, p964 * 297.0113830566406, p964 * 67.76705932617188);
    v1336.bezierCurveTo(p964 * 302.0113830566406, p964 * 47.767059326171875, p964 * 302.0113830566406, p964 * 47.767059326171875, p964 * 307.0113830566406, p964 * 27.767059326171875);
    v1336.bezierCurveTo(p964 * 310.0113830566406, p964 * 15.767059326171875, p964 * 317.0113830566406, p964 * 12.767059326171875, p964 * 323.0113830566406, p964 * 13.767059326171875);
    v1336.closePath();
    f88(v1336, p966[3], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 403.0113830566406, p964 * 89.76705932617188);
    v1336.bezierCurveTo(p964 * 413.0113830566406, p964 * 76.76705932617188, p964 * 418.0113830566406, p964 * 79.76705932617188, p964 * 428.0113830566406, p964 * 92.76705932617188);
    v1336.bezierCurveTo(p964 * 435.0113830566406, p964 * 99.76705932617188, p964 * 435.0113830566406, p964 * 99.76705932617188, p964 * 442.0113830566406, p964 * 106.76705932617188);
    v1336.bezierCurveTo(p964 * 450.0113830566406, p964 * 116.76705932617188, p964 * 445.0113830566406, p964 * 119.76705932617188, p964 * 433.0113830566406, p964 * 128.76705932617188);
    v1336.bezierCurveTo(p964 * 408.0113830566406, p964 * 146.26705932617188, p964 * 408.0113830566406, p964 * 146.26705932617188, p964 * 383.0113830566406, p964 * 163.76705932617188);
    v1336.bezierCurveTo(p964 * 376.0113830566406, p964 * 166.76705932617188, p964 * 377.0113830566406, p964 * 165.76705932617188, p964 * 368.0113830566406, p964 * 156.76705932617188);
    v1336.bezierCurveTo(p964 * 359.0113830566406, p964 * 144.76705932617188, p964 * 359.0113830566406, p964 * 142.76705932617188, p964 * 367.0113830566406, p964 * 133.76705932617188);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 403.0113830566406, p964 * 89.76705932617188);
    v1336.bezierCurveTo(p964 * 413.0113830566406, p964 * 76.76705932617188, p964 * 418.0113830566406, p964 * 79.76705932617188, p964 * 428.0113830566406, p964 * 92.76705932617188);
    v1336.bezierCurveTo(p964 * 435.0113830566406, p964 * 99.76705932617188, p964 * 435.0113830566406, p964 * 99.76705932617188, p964 * 442.0113830566406, p964 * 106.76705932617188);
    v1336.bezierCurveTo(p964 * 450.0113830566406, p964 * 116.76705932617188, p964 * 445.0113830566406, p964 * 119.76705932617188, p964 * 433.0113830566406, p964 * 128.76705932617188);
    v1336.bezierCurveTo(p964 * 408.0113830566406, p964 * 146.26705932617188, p964 * 408.0113830566406, p964 * 146.26705932617188, p964 * 383.0113830566406, p964 * 163.76705932617188);
    v1336.bezierCurveTo(p964 * 376.0113830566406, p964 * 166.76705932617188, p964 * 377.0113830566406, p964 * 165.76705932617188, p964 * 368.0113830566406, p964 * 156.76705932617188);
    v1336.bezierCurveTo(p964 * 359.0113830566406, p964 * 144.76705932617188, p964 * 359.0113830566406, p964 * 142.76705932617188, p964 * 367.0113830566406, p964 * 133.76705932617188);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 228.01138305664062, p964 * 1.767059326171875);
    v1336.bezierCurveTo(p964 * 246.51138305664062, p964 * 3.267059326171875, p964 * 246.51138305664062, p964 * 3.267059326171875, p964 * 265.0113830566406, p964 * 4.767059326171875);
    v1336.bezierCurveTo(p964 * 273.0113830566406, p964 * 5.767059326171875, p964 * 275.0113830566406, p964 * 11.767059326171875, p964 * 270.0113830566406, p964 * 27.767059326171875);
    v1336.bezierCurveTo(p964 * 264.0113830566406, p964 * 54.267059326171875, p964 * 264.0113830566406, p964 * 54.267059326171875, p964 * 258.0113830566406, p964 * 80.76705932617188);
    v1336.bezierCurveTo(p964 * 256.0113830566406, p964 * 92.76705932617188, p964 * 256.0113830566406, p964 * 94.76705932617188, p964 * 242.01138305664062, p964 * 93.76705932617188);
    v1336.bezierCurveTo(p964 * 226.01138305664062, p964 * 95.76705932617188, p964 * 225.01138305664062, p964 * 91.76705932617188, p964 * 225.01138305664062, p964 * 80.76705932617188);
    v1336.bezierCurveTo(p964 * 223.51138305664062, p964 * 50.267059326171875, p964 * 223.51138305664062, p964 * 50.267059326171875, p964 * 222.01138305664062, p964 * 19.767059326171875);
    v1336.bezierCurveTo(p964 * 219.01138305664062, p964 * 8.767059326171875, p964 * 224.01138305664062, p964 * 4.767059326171875, p964 * 227.01138305664062, p964 * 2.767059326171875);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 228.01138305664062, p964 * 1.767059326171875);
    v1336.bezierCurveTo(p964 * 246.51138305664062, p964 * 3.267059326171875, p964 * 246.51138305664062, p964 * 3.267059326171875, p964 * 265.0113830566406, p964 * 4.767059326171875);
    v1336.bezierCurveTo(p964 * 273.0113830566406, p964 * 5.767059326171875, p964 * 275.0113830566406, p964 * 11.767059326171875, p964 * 270.0113830566406, p964 * 27.767059326171875);
    v1336.bezierCurveTo(p964 * 264.0113830566406, p964 * 54.267059326171875, p964 * 264.0113830566406, p964 * 54.267059326171875, p964 * 258.0113830566406, p964 * 80.76705932617188);
    v1336.bezierCurveTo(p964 * 256.0113830566406, p964 * 92.76705932617188, p964 * 256.0113830566406, p964 * 94.76705932617188, p964 * 242.01138305664062, p964 * 93.76705932617188);
    v1336.bezierCurveTo(p964 * 226.01138305664062, p964 * 95.76705932617188, p964 * 225.01138305664062, p964 * 91.76705932617188, p964 * 225.01138305664062, p964 * 80.76705932617188);
    v1336.bezierCurveTo(p964 * 223.51138305664062, p964 * 50.267059326171875, p964 * 223.51138305664062, p964 * 50.267059326171875, p964 * 222.01138305664062, p964 * 19.767059326171875);
    v1336.bezierCurveTo(p964 * 219.01138305664062, p964 * 8.767059326171875, p964 * 224.01138305664062, p964 * 4.767059326171875, p964 * 227.01138305664062, p964 * 2.767059326171875);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 142.01138305664062, p964 * 25.767059326171875);
    v1336.bezierCurveTo(p964 * 158.51138305664062, p964 * 19.767059326171875, p964 * 158.51138305664062, p964 * 19.767059326171875, p964 * 175.01138305664062, p964 * 13.767059326171875);
    v1336.bezierCurveTo(p964 * 188.01138305664062, p964 * 11.767059326171875, p964 * 188.01138305664062, p964 * 16.767059326171875, p964 * 191.01138305664062, p964 * 29.767059326171875);
    v1336.bezierCurveTo(p964 * 197.01138305664062, p964 * 60.267059326171875, p964 * 197.01138305664062, p964 * 60.267059326171875, p964 * 203.01138305664062, p964 * 90.76705932617188);
    v1336.bezierCurveTo(p964 * 206.01138305664062, p964 * 102.76705932617188, p964 * 196.01138305664062, p964 * 99.76705932617188, p964 * 181.01138305664062, p964 * 105.76705932617188);
    v1336.bezierCurveTo(p964 * 175.01138305664062, p964 * 108.76705932617188, p964 * 172.01138305664062, p964 * 104.76705932617188, p964 * 164.01138305664062, p964 * 84.76705932617188);
    v1336.bezierCurveTo(p964 * 152.51138305664062, p964 * 63.267059326171875, p964 * 152.51138305664062, p964 * 63.267059326171875, p964 * 141.01138305664062, p964 * 41.767059326171875);
    v1336.bezierCurveTo(p964 * 138.01138305664062, p964 * 35.767059326171875, p964 * 138.01138305664062, p964 * 29.767059326171875, p964 * 141.01138305664062, p964 * 27.767059326171875);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 142.01138305664062, p964 * 25.767059326171875);
    v1336.bezierCurveTo(p964 * 158.51138305664062, p964 * 19.767059326171875, p964 * 158.51138305664062, p964 * 19.767059326171875, p964 * 175.01138305664062, p964 * 13.767059326171875);
    v1336.bezierCurveTo(p964 * 188.01138305664062, p964 * 11.767059326171875, p964 * 188.01138305664062, p964 * 16.767059326171875, p964 * 191.01138305664062, p964 * 29.767059326171875);
    v1336.bezierCurveTo(p964 * 197.01138305664062, p964 * 60.267059326171875, p964 * 197.01138305664062, p964 * 60.267059326171875, p964 * 203.01138305664062, p964 * 90.76705932617188);
    v1336.bezierCurveTo(p964 * 206.01138305664062, p964 * 102.76705932617188, p964 * 196.01138305664062, p964 * 99.76705932617188, p964 * 181.01138305664062, p964 * 105.76705932617188);
    v1336.bezierCurveTo(p964 * 175.01138305664062, p964 * 108.76705932617188, p964 * 172.01138305664062, p964 * 104.76705932617188, p964 * 164.01138305664062, p964 * 84.76705932617188);
    v1336.bezierCurveTo(p964 * 152.51138305664062, p964 * 63.267059326171875, p964 * 152.51138305664062, p964 * 63.267059326171875, p964 * 141.01138305664062, p964 * 41.767059326171875);
    v1336.bezierCurveTo(p964 * 138.01138305664062, p964 * 35.767059326171875, p964 * 138.01138305664062, p964 * 29.767059326171875, p964 * 141.01138305664062, p964 * 27.767059326171875);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 70.01138305664062, p964 * 76.76705932617188);
    v1336.bezierCurveTo(p964 * 83.01138305664062, p964 * 64.26705932617188, p964 * 83.01138305664062, p964 * 64.26705932617188, p964 * 96.01138305664062, p964 * 51.767059326171875);
    v1336.bezierCurveTo(p964 * 104.01138305664062, p964 * 44.767059326171875, p964 * 110.01138305664062, p964 * 51.767059326171875, p964 * 119.01138305664062, p964 * 66.76705932617188);
    v1336.bezierCurveTo(p964 * 135.01138305664062, p964 * 88.26705932617188, p964 * 135.01138305664062, p964 * 88.26705932617188, p964 * 151.01138305664062, p964 * 109.76705932617188);
    v1336.bezierCurveTo(p964 * 157.01138305664062, p964 * 119.76705932617188, p964 * 153.01138305664062, p964 * 122.76705932617188, p964 * 147.01138305664062, p964 * 129.76705932617188);
    v1336.bezierCurveTo(p964 * 138.01138305664062, p964 * 140.76705932617188, p964 * 136.01138305664062, p964 * 140.76705932617188, p964 * 122.01138305664062, p964 * 127.76705932617188);
    v1336.bezierCurveTo(p964 * 99.51138305664062, p964 * 110.26705932617188, p964 * 99.51138305664062, p964 * 110.26705932617188, p964 * 77.01138305664062, p964 * 92.76705932617188);
    v1336.bezierCurveTo(p964 * 66.01138305664062, p964 * 83.76705932617188, p964 * 66.01138305664062, p964 * 82.76705932617188, p964 * 69.01138305664062, p964 * 78.76705932617188);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 70.01138305664062, p964 * 76.76705932617188);
    v1336.bezierCurveTo(p964 * 83.01138305664062, p964 * 64.26705932617188, p964 * 83.01138305664062, p964 * 64.26705932617188, p964 * 96.01138305664062, p964 * 51.767059326171875);
    v1336.bezierCurveTo(p964 * 104.01138305664062, p964 * 44.767059326171875, p964 * 110.01138305664062, p964 * 51.767059326171875, p964 * 119.01138305664062, p964 * 66.76705932617188);
    v1336.bezierCurveTo(p964 * 135.01138305664062, p964 * 88.26705932617188, p964 * 135.01138305664062, p964 * 88.26705932617188, p964 * 151.01138305664062, p964 * 109.76705932617188);
    v1336.bezierCurveTo(p964 * 157.01138305664062, p964 * 119.76705932617188, p964 * 153.01138305664062, p964 * 122.76705932617188, p964 * 147.01138305664062, p964 * 129.76705932617188);
    v1336.bezierCurveTo(p964 * 138.01138305664062, p964 * 140.76705932617188, p964 * 136.01138305664062, p964 * 140.76705932617188, p964 * 122.01138305664062, p964 * 127.76705932617188);
    v1336.bezierCurveTo(p964 * 99.51138305664062, p964 * 110.26705932617188, p964 * 99.51138305664062, p964 * 110.26705932617188, p964 * 77.01138305664062, p964 * 92.76705932617188);
    v1336.bezierCurveTo(p964 * 66.01138305664062, p964 * 83.76705932617188, p964 * 66.01138305664062, p964 * 82.76705932617188, p964 * 69.01138305664062, p964 * 78.76705932617188);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 33.011383056640625, p964 * 126.76705932617188);
    v1336.bezierCurveTo(p964 * 22.011383056640625, p964 * 149.76705932617188, p964 * 22.011383056640625, p964 * 149.76705932617188, p964 * 11.011383056640625, p964 * 172.76705932617188);
    v1336.bezierCurveTo(p964 * 7.011383056640625, p964 * 184.76705932617188, p964 * 11.011383056640625, p964 * 189.76705932617188, p964 * 36.011383056640625, p964 * 195.76705932617188);
    v1336.bezierCurveTo(p964 * 61.011383056640625, p964 * 202.26705932617188, p964 * 61.011383056640625, p964 * 202.26705932617188, p964 * 86.01138305664062, p964 * 208.76705932617188);
    v1336.bezierCurveTo(p964 * 100.01138305664062, p964 * 214.76705932617188, p964 * 102.01138305664062, p964 * 203.76705932617188, p964 * 109.01138305664062, p964 * 189.76705932617188);
    v1336.bezierCurveTo(p964 * 117.01138305664062, p964 * 171.76705932617188, p964 * 116.01138305664062, p964 * 166.76705932617188, p964 * 97.01138305664062, p964 * 156.76705932617188);
    v1336.bezierCurveTo(p964 * 74.01138305664062, p964 * 140.76705932617188, p964 * 74.01138305664062, p964 * 140.76705932617188, p964 * 51.011383056640625, p964 * 124.76705932617188);
    v1336.bezierCurveTo(p964 * 42.011383056640625, p964 * 118.76705932617188, p964 * 37.011383056640625, p964 * 119.76705932617188, p964 * 33.011383056640625, p964 * 126.76705932617188);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 33.011383056640625, p964 * 126.76705932617188);
    v1336.bezierCurveTo(p964 * 22.011383056640625, p964 * 149.76705932617188, p964 * 22.011383056640625, p964 * 149.76705932617188, p964 * 11.011383056640625, p964 * 172.76705932617188);
    v1336.bezierCurveTo(p964 * 7.011383056640625, p964 * 184.76705932617188, p964 * 11.011383056640625, p964 * 189.76705932617188, p964 * 36.011383056640625, p964 * 195.76705932617188);
    v1336.bezierCurveTo(p964 * 61.011383056640625, p964 * 202.26705932617188, p964 * 61.011383056640625, p964 * 202.26705932617188, p964 * 86.01138305664062, p964 * 208.76705932617188);
    v1336.bezierCurveTo(p964 * 100.01138305664062, p964 * 214.76705932617188, p964 * 102.01138305664062, p964 * 203.76705932617188, p964 * 109.01138305664062, p964 * 189.76705932617188);
    v1336.bezierCurveTo(p964 * 117.01138305664062, p964 * 171.76705932617188, p964 * 116.01138305664062, p964 * 166.76705932617188, p964 * 97.01138305664062, p964 * 156.76705932617188);
    v1336.bezierCurveTo(p964 * 74.01138305664062, p964 * 140.76705932617188, p964 * 74.01138305664062, p964 * 140.76705932617188, p964 * 51.011383056640625, p964 * 124.76705932617188);
    v1336.bezierCurveTo(p964 * 42.011383056640625, p964 * 118.76705932617188, p964 * 37.011383056640625, p964 * 119.76705932617188, p964 * 33.011383056640625, p964 * 126.76705932617188);
    v1336.closePath();
    f88(v1336, p966[3], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 13.011383056640625, p964 * 229.76705932617188);
    v1336.bezierCurveTo(p964 * 45.511383056640625, p964 * 233.76705932617188, p964 * 45.511383056640625, p964 * 233.76705932617188, p964 * 78.01138305664062, p964 * 237.76705932617188);
    v1336.bezierCurveTo(p964 * 92.01138305664062, p964 * 239.76705932617188, p964 * 92.01138305664062, p964 * 246.76705932617188, p964 * 91.01138305664062, p964 * 257.7670593261719);
    v1336.bezierCurveTo(p964 * 92.01138305664062, p964 * 275.7670593261719, p964 * 91.01138305664062, p964 * 274.7670593261719, p964 * 68.01138305664062, p964 * 276.7670593261719);
    v1336.bezierCurveTo(p964 * 42.511383056640625, p964 * 279.7670593261719, p964 * 42.511383056640625, p964 * 279.7670593261719, p964 * 17.011383056640625, p964 * 282.7670593261719);
    v1336.bezierCurveTo(p964 * 2.011383056640625, p964 * 282.7670593261719, p964 * 3.011383056640625, p964 * 276.7670593261719, p964 * 2.011383056640625, p964 * 260.7670593261719);
    v1336.bezierCurveTo(p964 * 2.011383056640625, p964 * 231.76705932617188, p964 * 4.011383056640625, p964 * 232.76705932617188, p964 * 11.011383056640625, p964 * 230.76705932617188);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 13.011383056640625, p964 * 229.76705932617188);
    v1336.bezierCurveTo(p964 * 45.511383056640625, p964 * 233.76705932617188, p964 * 45.511383056640625, p964 * 233.76705932617188, p964 * 78.01138305664062, p964 * 237.76705932617188);
    v1336.bezierCurveTo(p964 * 92.01138305664062, p964 * 239.76705932617188, p964 * 92.01138305664062, p964 * 246.76705932617188, p964 * 91.01138305664062, p964 * 257.7670593261719);
    v1336.bezierCurveTo(p964 * 92.01138305664062, p964 * 275.7670593261719, p964 * 91.01138305664062, p964 * 274.7670593261719, p964 * 68.01138305664062, p964 * 276.7670593261719);
    v1336.bezierCurveTo(p964 * 42.511383056640625, p964 * 279.7670593261719, p964 * 42.511383056640625, p964 * 279.7670593261719, p964 * 17.011383056640625, p964 * 282.7670593261719);
    v1336.bezierCurveTo(p964 * 2.011383056640625, p964 * 282.7670593261719, p964 * 3.011383056640625, p964 * 276.7670593261719, p964 * 2.011383056640625, p964 * 260.7670593261719);
    v1336.bezierCurveTo(p964 * 2.011383056640625, p964 * 231.76705932617188, p964 * 4.011383056640625, p964 * 232.76705932617188, p964 * 11.011383056640625, p964 * 230.76705932617188);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 97.01138305664062, p964 * 329.7670593261719);
    v1336.bezierCurveTo(p964 * 68.51138305664062, p964 * 343.7670593261719, p964 * 68.51138305664062, p964 * 343.7670593261719, p964 * 40.011383056640625, p964 * 357.7670593261719);
    v1336.bezierCurveTo(p964 * 29.011383056640625, p964 * 360.7670593261719, p964 * 27.011383056640625, p964 * 361.7670593261719, p964 * 20.011383056640625, p964 * 346.7670593261719);
    v1336.bezierCurveTo(p964 * 16.511383056640625, p964 * 336.2670593261719, p964 * 16.511383056640625, p964 * 336.2670593261719, p964 * 13.011383056640625, p964 * 325.7670593261719);
    v1336.bezierCurveTo(p964 * 10.011383056640625, p964 * 307.7670593261719, p964 * 18.011383056640625, p964 * 312.7670593261719, p964 * 34.011383056640625, p964 * 306.7670593261719);
    v1336.bezierCurveTo(p964 * 59.511383056640625, p964 * 302.2670593261719, p964 * 59.511383056640625, p964 * 302.2670593261719, p964 * 85.01138305664062, p964 * 297.7670593261719);
    v1336.bezierCurveTo(p964 * 97.01138305664062, p964 * 294.7670593261719, p964 * 100.01138305664062, p964 * 297.7670593261719, p964 * 100.01138305664062, p964 * 307.7670593261719);
    v1336.bezierCurveTo(p964 * 105.01138305664062, p964 * 326.7670593261719, p964 * 103.01138305664062, p964 * 325.7670593261719, p964 * 97.01138305664062, p964 * 329.7670593261719);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 97.01138305664062, p964 * 329.7670593261719);
    v1336.bezierCurveTo(p964 * 68.51138305664062, p964 * 343.7670593261719, p964 * 68.51138305664062, p964 * 343.7670593261719, p964 * 40.011383056640625, p964 * 357.7670593261719);
    v1336.bezierCurveTo(p964 * 29.011383056640625, p964 * 360.7670593261719, p964 * 27.011383056640625, p964 * 361.7670593261719, p964 * 20.011383056640625, p964 * 346.7670593261719);
    v1336.bezierCurveTo(p964 * 16.511383056640625, p964 * 336.2670593261719, p964 * 16.511383056640625, p964 * 336.2670593261719, p964 * 13.011383056640625, p964 * 325.7670593261719);
    v1336.bezierCurveTo(p964 * 10.011383056640625, p964 * 307.7670593261719, p964 * 18.011383056640625, p964 * 312.7670593261719, p964 * 34.011383056640625, p964 * 306.7670593261719);
    v1336.bezierCurveTo(p964 * 59.511383056640625, p964 * 302.2670593261719, p964 * 59.511383056640625, p964 * 302.2670593261719, p964 * 85.01138305664062, p964 * 297.7670593261719);
    v1336.bezierCurveTo(p964 * 97.01138305664062, p964 * 294.7670593261719, p964 * 100.01138305664062, p964 * 297.7670593261719, p964 * 100.01138305664062, p964 * 307.7670593261719);
    v1336.bezierCurveTo(p964 * 105.01138305664062, p964 * 326.7670593261719, p964 * 103.01138305664062, p964 * 325.7670593261719, p964 * 97.01138305664062, p964 * 329.7670593261719);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 394.0113830566406, p964 * 181.76705932617188);
    v1336.bezierCurveTo(p964 * 426.5113830566406, p964 * 166.76705932617188, p964 * 426.5113830566406, p964 * 166.76705932617188, p964 * 459.0113830566406, p964 * 151.76705932617188);
    v1336.bezierCurveTo(p964 * 469.0113830566406, p964 * 152.76705932617188, p964 * 469.0113830566406, p964 * 155.76705932617188, p964 * 472.0113830566406, p964 * 165.76705932617188);
    v1336.bezierCurveTo(p964 * 476.0113830566406, p964 * 177.26705932617188, p964 * 476.0113830566406, p964 * 177.26705932617188, p964 * 480.0113830566406, p964 * 188.76705932617188);
    v1336.bezierCurveTo(p964 * 483.0113830566406, p964 * 199.76705932617188, p964 * 480.0113830566406, p964 * 200.76705932617188, p964 * 460.0113830566406, p964 * 205.76705932617188);
    v1336.bezierCurveTo(p964 * 433.5113830566406, p964 * 210.26705932617188, p964 * 433.5113830566406, p964 * 210.26705932617188, p964 * 407.0113830566406, p964 * 214.76705932617188);
    v1336.bezierCurveTo(p964 * 395.0113830566406, p964 * 218.76705932617188, p964 * 397.0113830566406, p964 * 211.76705932617188, p964 * 393.0113830566406, p964 * 202.76705932617188);
    v1336.bezierCurveTo(p964 * 387.0113830566406, p964 * 188.76705932617188, p964 * 387.0113830566406, p964 * 187.76705932617188, p964 * 394.0113830566406, p964 * 181.76705932617188);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 394.0113830566406, p964 * 181.76705932617188);
    v1336.bezierCurveTo(p964 * 426.5113830566406, p964 * 166.76705932617188, p964 * 426.5113830566406, p964 * 166.76705932617188, p964 * 459.0113830566406, p964 * 151.76705932617188);
    v1336.bezierCurveTo(p964 * 469.0113830566406, p964 * 152.76705932617188, p964 * 469.0113830566406, p964 * 155.76705932617188, p964 * 472.0113830566406, p964 * 165.76705932617188);
    v1336.bezierCurveTo(p964 * 476.0113830566406, p964 * 177.26705932617188, p964 * 476.0113830566406, p964 * 177.26705932617188, p964 * 480.0113830566406, p964 * 188.76705932617188);
    v1336.bezierCurveTo(p964 * 483.0113830566406, p964 * 199.76705932617188, p964 * 480.0113830566406, p964 * 200.76705932617188, p964 * 460.0113830566406, p964 * 205.76705932617188);
    v1336.bezierCurveTo(p964 * 433.5113830566406, p964 * 210.26705932617188, p964 * 433.5113830566406, p964 * 210.26705932617188, p964 * 407.0113830566406, p964 * 214.76705932617188);
    v1336.bezierCurveTo(p964 * 395.0113830566406, p964 * 218.76705932617188, p964 * 397.0113830566406, p964 * 211.76705932617188, p964 * 393.0113830566406, p964 * 202.76705932617188);
    v1336.bezierCurveTo(p964 * 387.0113830566406, p964 * 188.76705932617188, p964 * 387.0113830566406, p964 * 187.76705932617188, p964 * 394.0113830566406, p964 * 181.76705932617188);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 411.0113830566406, p964 * 234.76705932617188);
    v1336.bezierCurveTo(p964 * 446.0113830566406, p964 * 233.26705932617188, p964 * 446.0113830566406, p964 * 233.26705932617188, p964 * 481.0113830566406, p964 * 231.76705932617188);
    v1336.bezierCurveTo(p964 * 491.0113830566406, p964 * 232.76705932617188, p964 * 493.0113830566406, p964 * 239.76705932617188, p964 * 491.0113830566406, p964 * 251.76705932617188);
    v1336.bezierCurveTo(p964 * 490.0113830566406, p964 * 263.7670593261719, p964 * 490.0113830566406, p964 * 263.7670593261719, p964 * 489.0113830566406, p964 * 275.7670593261719);
    v1336.bezierCurveTo(p964 * 487.0113830566406, p964 * 283.7670593261719, p964 * 483.0113830566406, p964 * 284.7670593261719, p964 * 464.0113830566406, p964 * 280.7670593261719);
    v1336.bezierCurveTo(p964 * 437.0113830566406, p964 * 273.7670593261719, p964 * 437.0113830566406, p964 * 273.7670593261719, p964 * 410.0113830566406, p964 * 266.7670593261719);
    v1336.bezierCurveTo(p964 * 400.0113830566406, p964 * 261.7670593261719, p964 * 401.0113830566406, p964 * 259.7670593261719, p964 * 402.0113830566406, p964 * 249.76705932617188);
    v1336.bezierCurveTo(p964 * 401.0113830566406, p964 * 237.76705932617188, p964 * 403.0113830566406, p964 * 235.76705932617188, p964 * 408.0113830566406, p964 * 234.76705932617188);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 411.0113830566406, p964 * 234.76705932617188);
    v1336.bezierCurveTo(p964 * 446.0113830566406, p964 * 233.26705932617188, p964 * 446.0113830566406, p964 * 233.26705932617188, p964 * 481.0113830566406, p964 * 231.76705932617188);
    v1336.bezierCurveTo(p964 * 491.0113830566406, p964 * 232.76705932617188, p964 * 493.0113830566406, p964 * 239.76705932617188, p964 * 491.0113830566406, p964 * 251.76705932617188);
    v1336.bezierCurveTo(p964 * 490.0113830566406, p964 * 263.7670593261719, p964 * 490.0113830566406, p964 * 263.7670593261719, p964 * 489.0113830566406, p964 * 275.7670593261719);
    v1336.bezierCurveTo(p964 * 487.0113830566406, p964 * 283.7670593261719, p964 * 483.0113830566406, p964 * 284.7670593261719, p964 * 464.0113830566406, p964 * 280.7670593261719);
    v1336.bezierCurveTo(p964 * 437.0113830566406, p964 * 273.7670593261719, p964 * 437.0113830566406, p964 * 273.7670593261719, p964 * 410.0113830566406, p964 * 266.7670593261719);
    v1336.bezierCurveTo(p964 * 400.0113830566406, p964 * 261.7670593261719, p964 * 401.0113830566406, p964 * 259.7670593261719, p964 * 402.0113830566406, p964 * 249.76705932617188);
    v1336.bezierCurveTo(p964 * 401.0113830566406, p964 * 237.76705932617188, p964 * 403.0113830566406, p964 * 235.76705932617188, p964 * 408.0113830566406, p964 * 234.76705932617188);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 400.0113830566406, p964 * 290.7670593261719);
    v1336.bezierCurveTo(p964 * 437.0113830566406, p964 * 301.2670593261719, p964 * 437.0113830566406, p964 * 301.2670593261719, p964 * 474.0113830566406, p964 * 311.7670593261719);
    v1336.bezierCurveTo(p964 * 484.0113830566406, p964 * 319.7670593261719, p964 * 481.0113830566406, p964 * 322.7670593261719, p964 * 474.0113830566406, p964 * 335.7670593261719);
    v1336.bezierCurveTo(p964 * 465.5113830566406, p964 * 354.7670593261719, p964 * 465.5113830566406, p964 * 354.7670593261719, p964 * 457.0113830566406, p964 * 373.7670593261719);
    v1336.bezierCurveTo(p964 * 449.0113830566406, p964 * 386.7670593261719, p964 * 444.0113830566406, p964 * 384.7670593261719, p964 * 427.0113830566406, p964 * 370.7670593261719);
    v1336.bezierCurveTo(p964 * 403.0113830566406, p964 * 354.7670593261719, p964 * 403.0113830566406, p964 * 354.7670593261719, p964 * 379.0113830566406, p964 * 338.7670593261719);
    v1336.bezierCurveTo(p964 * 371.0113830566406, p964 * 327.7670593261719, p964 * 373.0113830566406, p964 * 323.7670593261719, p964 * 377.0113830566406, p964 * 313.7670593261719);
    v1336.bezierCurveTo(p964 * 386.0113830566406, p964 * 292.7670593261719, p964 * 393.0113830566406, p964 * 288.7670593261719, p964 * 398.0113830566406, p964 * 291.7670593261719);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 400.0113830566406, p964 * 290.7670593261719);
    v1336.bezierCurveTo(p964 * 437.0113830566406, p964 * 301.2670593261719, p964 * 437.0113830566406, p964 * 301.2670593261719, p964 * 474.0113830566406, p964 * 311.7670593261719);
    v1336.bezierCurveTo(p964 * 484.0113830566406, p964 * 319.7670593261719, p964 * 481.0113830566406, p964 * 322.7670593261719, p964 * 474.0113830566406, p964 * 335.7670593261719);
    v1336.bezierCurveTo(p964 * 465.5113830566406, p964 * 354.7670593261719, p964 * 465.5113830566406, p964 * 354.7670593261719, p964 * 457.0113830566406, p964 * 373.7670593261719);
    v1336.bezierCurveTo(p964 * 449.0113830566406, p964 * 386.7670593261719, p964 * 444.0113830566406, p964 * 384.7670593261719, p964 * 427.0113830566406, p964 * 370.7670593261719);
    v1336.bezierCurveTo(p964 * 403.0113830566406, p964 * 354.7670593261719, p964 * 403.0113830566406, p964 * 354.7670593261719, p964 * 379.0113830566406, p964 * 338.7670593261719);
    v1336.bezierCurveTo(p964 * 371.0113830566406, p964 * 327.7670593261719, p964 * 373.0113830566406, p964 * 323.7670593261719, p964 * 377.0113830566406, p964 * 313.7670593261719);
    v1336.bezierCurveTo(p964 * 386.0113830566406, p964 * 292.7670593261719, p964 * 393.0113830566406, p964 * 288.7670593261719, p964 * 398.0113830566406, p964 * 291.7670593261719);
    v1336.closePath();
    f88(v1336, p966[3], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 366.0113830566406, p964 * 361.2216033935547);
    v1336.bezierCurveTo(p964 * 393.0113830566406, p964 * 383.2216033935547, p964 * 393.0113830566406, p964 * 383.2216033935547, p964 * 420.0113830566406, p964 * 405.2216033935547);
    v1336.bezierCurveTo(p964 * 427.0113830566406, p964 * 414.2216033935547, p964 * 425.0113830566406, p964 * 417.2216033935547, p964 * 413.0113830566406, p964 * 428.2216033935547);
    v1336.bezierCurveTo(p964 * 405.5113830566406, p964 * 435.2216033935547, p964 * 405.5113830566406, p964 * 435.2216033935547, p964 * 398.0113830566406, p964 * 442.2216033935547);
    v1336.bezierCurveTo(p964 * 388.0113830566406, p964 * 451.2216033935547, p964 * 385.0113830566406, p964 * 445.2216033935547, p964 * 373.0113830566406, p964 * 428.2216033935547);
    v1336.bezierCurveTo(p964 * 358.5113830566406, p964 * 408.2216033935547, p964 * 358.5113830566406, p964 * 408.2216033935547, p964 * 344.0113830566406, p964 * 388.2216033935547);
    v1336.bezierCurveTo(p964 * 337.0113830566406, p964 * 378.2216033935547, p964 * 342.0113830566406, p964 * 377.2216033935547, p964 * 347.0113830566406, p964 * 371.2216033935547);
    v1336.bezierCurveTo(p964 * 359.0113830566406, p964 * 359.2216033935547, p964 * 361.0113830566406, p964 * 358.2216033935547, p964 * 364.0113830566406, p964 * 361.2216033935547);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 366.0113830566406, p964 * 361.2216033935547);
    v1336.bezierCurveTo(p964 * 393.0113830566406, p964 * 383.2216033935547, p964 * 393.0113830566406, p964 * 383.2216033935547, p964 * 420.0113830566406, p964 * 405.2216033935547);
    v1336.bezierCurveTo(p964 * 427.0113830566406, p964 * 414.2216033935547, p964 * 425.0113830566406, p964 * 417.2216033935547, p964 * 413.0113830566406, p964 * 428.2216033935547);
    v1336.bezierCurveTo(p964 * 405.5113830566406, p964 * 435.2216033935547, p964 * 405.5113830566406, p964 * 435.2216033935547, p964 * 398.0113830566406, p964 * 442.2216033935547);
    v1336.bezierCurveTo(p964 * 388.0113830566406, p964 * 451.2216033935547, p964 * 385.0113830566406, p964 * 445.2216033935547, p964 * 373.0113830566406, p964 * 428.2216033935547);
    v1336.bezierCurveTo(p964 * 358.5113830566406, p964 * 408.2216033935547, p964 * 358.5113830566406, p964 * 408.2216033935547, p964 * 344.0113830566406, p964 * 388.2216033935547);
    v1336.bezierCurveTo(p964 * 337.0113830566406, p964 * 378.2216033935547, p964 * 342.0113830566406, p964 * 377.2216033935547, p964 * 347.0113830566406, p964 * 371.2216033935547);
    v1336.bezierCurveTo(p964 * 359.0113830566406, p964 * 359.2216033935547, p964 * 361.0113830566406, p964 * 358.2216033935547, p964 * 364.0113830566406, p964 * 361.2216033935547);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 323.0113830566406, p964 * 393.2216033935547);
    v1336.bezierCurveTo(p964 * 338.0113830566406, p964 * 424.7216033935547, p964 * 338.0113830566406, p964 * 424.7216033935547, p964 * 353.0113830566406, p964 * 456.2216033935547);
    v1336.bezierCurveTo(p964 * 355.0113830566406, p964 * 467.2216033935547, p964 * 354.0113830566406, p964 * 469.2216033935547, p964 * 336.0113830566406, p964 * 475.2216033935547);
    v1336.bezierCurveTo(p964 * 326.0113830566406, p964 * 478.2216033935547, p964 * 326.0113830566406, p964 * 478.2216033935547, p964 * 316.0113830566406, p964 * 481.2216033935547);
    v1336.bezierCurveTo(p964 * 304.0113830566406, p964 * 484.2216033935547, p964 * 304.0113830566406, p964 * 477.2216033935547, p964 * 301.0113830566406, p964 * 454.2216033935547);
    v1336.bezierCurveTo(p964 * 295.5113830566406, p964 * 429.2216033935547, p964 * 295.5113830566406, p964 * 429.2216033935547, p964 * 290.0113830566406, p964 * 404.2216033935547);
    v1336.bezierCurveTo(p964 * 287.0113830566406, p964 * 396.2216033935547, p964 * 297.0113830566406, p964 * 394.2216033935547, p964 * 303.0113830566406, p964 * 392.2216033935547);
    v1336.bezierCurveTo(p964 * 316.0113830566406, p964 * 387.2216033935547, p964 * 318.0113830566406, p964 * 387.2216033935547, p964 * 323.0113830566406, p964 * 394.2216033935547);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 323.0113830566406, p964 * 393.2216033935547);
    v1336.bezierCurveTo(p964 * 338.0113830566406, p964 * 424.7216033935547, p964 * 338.0113830566406, p964 * 424.7216033935547, p964 * 353.0113830566406, p964 * 456.2216033935547);
    v1336.bezierCurveTo(p964 * 355.0113830566406, p964 * 467.2216033935547, p964 * 354.0113830566406, p964 * 469.2216033935547, p964 * 336.0113830566406, p964 * 475.2216033935547);
    v1336.bezierCurveTo(p964 * 326.0113830566406, p964 * 478.2216033935547, p964 * 326.0113830566406, p964 * 478.2216033935547, p964 * 316.0113830566406, p964 * 481.2216033935547);
    v1336.bezierCurveTo(p964 * 304.0113830566406, p964 * 484.2216033935547, p964 * 304.0113830566406, p964 * 477.2216033935547, p964 * 301.0113830566406, p964 * 454.2216033935547);
    v1336.bezierCurveTo(p964 * 295.5113830566406, p964 * 429.2216033935547, p964 * 295.5113830566406, p964 * 429.2216033935547, p964 * 290.0113830566406, p964 * 404.2216033935547);
    v1336.bezierCurveTo(p964 * 287.0113830566406, p964 * 396.2216033935547, p964 * 297.0113830566406, p964 * 394.2216033935547, p964 * 303.0113830566406, p964 * 392.2216033935547);
    v1336.bezierCurveTo(p964 * 316.0113830566406, p964 * 387.2216033935547, p964 * 318.0113830566406, p964 * 387.2216033935547, p964 * 323.0113830566406, p964 * 394.2216033935547);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 270.0113830566406, p964 * 413.2216033935547);
    v1336.bezierCurveTo(p964 * 271.0113830566406, p964 * 445.7216033935547, p964 * 271.0113830566406, p964 * 445.7216033935547, p964 * 272.0113830566406, p964 * 478.2216033935547);
    v1336.bezierCurveTo(p964 * 273.0113830566406, p964 * 490.2216033935547, p964 * 267.0113830566406, p964 * 493.2216033935547, p964 * 249.01138305664062, p964 * 490.2216033935547);
    v1336.bezierCurveTo(p964 * 222.01138305664062, p964 * 492.2216033935547, p964 * 220.01138305664062, p964 * 485.2216033935547, p964 * 225.01138305664062, p964 * 467.2216033935547);
    v1336.bezierCurveTo(p964 * 230.51138305664062, p964 * 440.2216033935547, p964 * 230.51138305664062, p964 * 440.2216033935547, p964 * 236.01138305664062, p964 * 413.2216033935547);
    v1336.bezierCurveTo(p964 * 237.01138305664062, p964 * 405.2216033935547, p964 * 238.01138305664062, p964 * 404.2216033935547, p964 * 253.01138305664062, p964 * 403.2216033935547);
    v1336.bezierCurveTo(p964 * 269.0113830566406, p964 * 405.2216033935547, p964 * 270.0113830566406, p964 * 407.2216033935547, p964 * 269.0113830566406, p964 * 412.2216033935547);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 270.0113830566406, p964 * 413.2216033935547);
    v1336.bezierCurveTo(p964 * 271.0113830566406, p964 * 445.7216033935547, p964 * 271.0113830566406, p964 * 445.7216033935547, p964 * 272.0113830566406, p964 * 478.2216033935547);
    v1336.bezierCurveTo(p964 * 273.0113830566406, p964 * 490.2216033935547, p964 * 267.0113830566406, p964 * 493.2216033935547, p964 * 249.01138305664062, p964 * 490.2216033935547);
    v1336.bezierCurveTo(p964 * 222.01138305664062, p964 * 492.2216033935547, p964 * 220.01138305664062, p964 * 485.2216033935547, p964 * 225.01138305664062, p964 * 467.2216033935547);
    v1336.bezierCurveTo(p964 * 230.51138305664062, p964 * 440.2216033935547, p964 * 230.51138305664062, p964 * 440.2216033935547, p964 * 236.01138305664062, p964 * 413.2216033935547);
    v1336.bezierCurveTo(p964 * 237.01138305664062, p964 * 405.2216033935547, p964 * 238.01138305664062, p964 * 404.2216033935547, p964 * 253.01138305664062, p964 * 403.2216033935547);
    v1336.bezierCurveTo(p964 * 269.0113830566406, p964 * 405.2216033935547, p964 * 270.0113830566406, p964 * 407.2216033935547, p964 * 269.0113830566406, p964 * 412.2216033935547);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 207.01138305664062, p964 * 406.2216033935547);
    v1336.bezierCurveTo(p964 * 197.51138305664062, p964 * 440.7216033935547, p964 * 197.51138305664062, p964 * 440.7216033935547, p964 * 188.01138305664062, p964 * 475.2216033935547);
    v1336.bezierCurveTo(p964 * 184.01138305664062, p964 * 485.2216033935547, p964 * 179.01138305664062, p964 * 491.2216033935547, p964 * 152.01138305664062, p964 * 477.2216033935547);
    v1336.bezierCurveTo(p964 * 136.51138305664062, p964 * 469.7216033935547, p964 * 136.51138305664062, p964 * 469.7216033935547, p964 * 121.01138305664062, p964 * 462.2216033935547);
    v1336.bezierCurveTo(p964 * 109.01138305664062, p964 * 453.2216033935547, p964 * 117.01138305664062, p964 * 447.2216033935547, p964 * 133.01138305664062, p964 * 427.2216033935547);
    v1336.bezierCurveTo(p964 * 146.51138305664062, p964 * 406.7216033935547, p964 * 146.51138305664062, p964 * 406.7216033935547, p964 * 160.01138305664062, p964 * 386.2216033935547);
    v1336.bezierCurveTo(p964 * 163.01138305664062, p964 * 377.2216033935547, p964 * 168.01138305664062, p964 * 378.2216033935547, p964 * 187.01138305664062, p964 * 387.2216033935547);
    v1336.bezierCurveTo(p964 * 206.01138305664062, p964 * 395.2216033935547, p964 * 208.01138305664062, p964 * 398.2216033935547, p964 * 207.01138305664062, p964 * 405.2216033935547);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 207.01138305664062, p964 * 406.2216033935547);
    v1336.bezierCurveTo(p964 * 197.51138305664062, p964 * 440.7216033935547, p964 * 197.51138305664062, p964 * 440.7216033935547, p964 * 188.01138305664062, p964 * 475.2216033935547);
    v1336.bezierCurveTo(p964 * 184.01138305664062, p964 * 485.2216033935547, p964 * 179.01138305664062, p964 * 491.2216033935547, p964 * 152.01138305664062, p964 * 477.2216033935547);
    v1336.bezierCurveTo(p964 * 136.51138305664062, p964 * 469.7216033935547, p964 * 136.51138305664062, p964 * 469.7216033935547, p964 * 121.01138305664062, p964 * 462.2216033935547);
    v1336.bezierCurveTo(p964 * 109.01138305664062, p964 * 453.2216033935547, p964 * 117.01138305664062, p964 * 447.2216033935547, p964 * 133.01138305664062, p964 * 427.2216033935547);
    v1336.bezierCurveTo(p964 * 146.51138305664062, p964 * 406.7216033935547, p964 * 146.51138305664062, p964 * 406.7216033935547, p964 * 160.01138305664062, p964 * 386.2216033935547);
    v1336.bezierCurveTo(p964 * 163.01138305664062, p964 * 377.2216033935547, p964 * 168.01138305664062, p964 * 378.2216033935547, p964 * 187.01138305664062, p964 * 387.2216033935547);
    v1336.bezierCurveTo(p964 * 206.01138305664062, p964 * 395.2216033935547, p964 * 208.01138305664062, p964 * 398.2216033935547, p964 * 207.01138305664062, p964 * 405.2216033935547);
    v1336.closePath();
    f88(v1336, p966[3], p966[2], p964 * 12);
    v1336.globalAlpha = p965 ? 0.5 : 1;
    v1336.translate(0, p964 * 5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 130.01138305664062, p964 * 375.2216033935547);
    v1336.bezierCurveTo(p964 * 109.51138305664062, p964 * 400.7216033935547, p964 * 109.51138305664062, p964 * 400.7216033935547, p964 * 89.01138305664062, p964 * 426.2216033935547);
    v1336.bezierCurveTo(p964 * 82.01138305664062, p964 * 435.2216033935547, p964 * 77.01138305664062, p964 * 435.2216033935547, p964 * 62.011383056640625, p964 * 417.2216033935547);
    v1336.bezierCurveTo(p964 * 43.011383056640625, p964 * 397.2216033935547, p964 * 47.011383056640625, p964 * 395.2216033935547, p964 * 62.011383056640625, p964 * 382.2216033935547);
    v1336.bezierCurveTo(p964 * 84.01138305664062, p964 * 366.7216033935547, p964 * 84.01138305664062, p964 * 366.7216033935547, p964 * 106.01138305664062, p964 * 351.2216033935547);
    v1336.bezierCurveTo(p964 * 116.01138305664062, p964 * 344.2216033935547, p964 * 120.01138305664062, p964 * 347.2216033935547, p964 * 127.01138305664062, p964 * 356.2216033935547);
    v1336.bezierCurveTo(p964 * 137.01138305664062, p964 * 366.2216033935547, p964 * 137.01138305664062, p964 * 366.2216033935547, p964 * 131.01138305664062, p964 * 376.2216033935547);
    v1336.closePath();
    f88(v1336, p966[0], p966[0], p964 * 12);
    v1336.globalAlpha = 1;
    v1336.translate(0, p964 * -5);
    v1336.beginPath();
    v1336.lineCap = "round";
    v1336.lineJoin = "round";
    v1336.moveTo(p964 * 130.01138305664062, p964 * 375.2216033935547);
    v1336.bezierCurveTo(p964 * 109.51138305664062, p964 * 400.7216033935547, p964 * 109.51138305664062, p964 * 400.7216033935547, p964 * 89.01138305664062, p964 * 426.2216033935547);
    v1336.bezierCurveTo(p964 * 82.01138305664062, p964 * 435.2216033935547, p964 * 77.01138305664062, p964 * 435.2216033935547, p964 * 62.011383056640625, p964 * 417.2216033935547);
    v1336.bezierCurveTo(p964 * 43.011383056640625, p964 * 397.2216033935547, p964 * 47.011383056640625, p964 * 395.2216033935547, p964 * 62.011383056640625, p964 * 382.2216033935547);
    v1336.bezierCurveTo(p964 * 84.01138305664062, p964 * 366.7216033935547, p964 * 84.01138305664062, p964 * 366.7216033935547, p964 * 106.01138305664062, p964 * 351.2216033935547);
    v1336.bezierCurveTo(p964 * 116.01138305664062, p964 * 344.2216033935547, p964 * 120.01138305664062, p964 * 347.2216033935547, p964 * 127.01138305664062, p964 * 356.2216033935547);
    v1336.bezierCurveTo(p964 * 137.01138305664062, p964 * 366.2216033935547, p964 * 137.01138305664062, p964 * 366.2216033935547, p964 * 131.01138305664062, p964 * 376.2216033935547);
    v1336.closePath();
    f88(v1336, p966[4], p966[2], p964 * 12);
    return v1335;
  }
  function f247(p969, p970, p971) {
    var v1339 = document.createElement("canvas");
    var v1340 = v1339.getContext("2d");
    v1339.width = p969 * 372;
    v1339.height = p969 * 358;
    v1340.translate(p969 * 0, p969 * 10);
    v1340.globalAlpha = p970 ? 0.2 : 1;
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 247.00003051757812, p969 * 115.76704406738281);
    v1340.bezierCurveTo(p969 * 305.0000305175781, p969 * 124.76704406738281, p969 * 335.0000305175781, p969 * 112.76704406738281, p969 * 359.0000305175781, p969 * 93.76704406738281);
    v1340.bezierCurveTo(p969 * 359.5000305175781, p969 * 113.26704406738281, p969 * 359.5000305175781, p969 * 113.26704406738281, p969 * 360.0000305175781, p969 * 132.7670440673828);
    v1340.bezierCurveTo(p969 * 339.0000305175781, p969 * 177.7670440673828, p969 * 281.0000305175781, p969 * 178.7670440673828, p969 * 243.00003051757812, p969 * 183.7670440673828);
    v1340.bezierCurveTo(p969 * 214.50003051757812, p969 * 214.2670440673828, p969 * 214.50003051757812, p969 * 214.2670440673828, p969 * 186.00003051757812, p969 * 244.7670440673828);
    v1340.bezierCurveTo(p969 * 155.00003051757812, p969 * 214.2670440673828, p969 * 155.00003051757812, p969 * 214.2670440673828, p969 * 124.00003051757812, p969 * 183.7670440673828);
    v1340.bezierCurveTo(p969 * 51.000030517578125, p969 * 180.7670440673828, p969 * 21.000030517578125, p969 * 161.7670440673828, p969 * 9.000030517578125, p969 * 129.7670440673828);
    v1340.bezierCurveTo(p969 * 8.500030517578125, p969 * 110.76704406738281, p969 * 8.500030517578125, p969 * 110.76704406738281, p969 * 8.000030517578125, p969 * 91.76704406738281);
    v1340.bezierCurveTo(p969 * 31.000030517578125, p969 * 112.76704406738281, p969 * 87.00003051757812, p969 * 119.76704406738281, p969 * 116.00003051757812, p969 * 117.76704406738281);
    v1340.bezierCurveTo(p969 * 175.00003051757812, p969 * 18.767044067382812, p969 * 170.00003051757812, p969 * 23.767044067382812, p969 * 181.00003051757812, p969 * 14.767044067382812);
    v1340.bezierCurveTo(p969 * 199.00003051757812, p969 * 34.76704406738281, p969 * 203.00003051757812, p969 * 54.76704406738281, p969 * 247.00003051757812, p969 * 115.76704406738281);
    v1340.closePath();
    f88(v1340, p971[0], p971[0], p969 * 10);
    v1340.translate(p969 * 0, p969 * -10);
    v1340.globalAlpha = 1;
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 107.00003051757812, p969 * 54.13069152832031);
    v1340.bezierCurveTo(p969 * 106.50003051757812, p969 * 38.63069152832031, p969 * 106.50003051757812, p969 * 38.63069152832031, p969 * 106.00003051757812, p969 * 23.130691528320312);
    v1340.bezierCurveTo(p969 * 121.50003051757812, p969 * 38.13069152832031, p969 * 121.50003051757812, p969 * 38.13069152832031, p969 * 137.00003051757812, p969 * 53.13069152832031);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 233.00003051757812, p969 * 53.6761474609375);
    v1340.bezierCurveTo(p969 * 247.00003051757812, p969 * 37.1761474609375, p969 * 247.00003051757812, p969 * 37.1761474609375, p969 * 261.0000305175781, p969 * 20.6761474609375);
    v1340.bezierCurveTo(p969 * 261.0000305175781, p969 * 36.1761474609375, p969 * 261.0000305175781, p969 * 36.1761474609375, p969 * 261.0000305175781, p969 * 51.6761474609375);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 293.0000305175781, p969 * 54.403411865234375);
    v1340.bezierCurveTo(p969 * 300.0000305175781, p969 * 49.903411865234375, p969 * 300.0000305175781, p969 * 49.903411865234375, p969 * 307.0000305175781, p969 * 45.403411865234375);
    v1340.bezierCurveTo(p969 * 307.0000305175781, p969 * 49.903411865234375, p969 * 307.0000305175781, p969 * 49.903411865234375, p969 * 307.0000305175781, p969 * 54.403411865234375);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 77.00003051757812, p969 * 54.403411865234375);
    v1340.bezierCurveTo(p969 * 70.00003051757812, p969 * 50.403411865234375, p969 * 70.00003051757812, p969 * 50.403411865234375, p969 * 63.000030517578125, p969 * 46.403411865234375);
    v1340.bezierCurveTo(p969 * 62.500030517578125, p969 * 50.903411865234375, p969 * 62.500030517578125, p969 * 50.903411865234375, p969 * 62.000030517578125, p969 * 55.403411865234375);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 58.000030517578125, p969 * 122.3125);
    v1340.bezierCurveTo(p969 * 59.500030517578125, p969 * 97.3125, p969 * 59.500030517578125, p969 * 97.3125, p969 * 61.000030517578125, p969 * 72.3125);
    v1340.bezierCurveTo(p969 * 91.00003051757812, p969 * 89.3125, p969 * 91.00003051757812, p969 * 89.3125, p969 * 121.00003051757812, p969 * 106.3125);
    v1340.closePath();
    f88(v1340, p971[1], p971[1], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 310.0000305175781, p969 * 127.3125);
    v1340.bezierCurveTo(p969 * 308.0000305175781, p969 * 98.3125, p969 * 308.0000305175781, p969 * 98.3125, p969 * 306.0000305175781, p969 * 69.3125);
    v1340.bezierCurveTo(p969 * 274.5000305175781, p969 * 88.8125, p969 * 274.5000305175781, p969 * 88.8125, p969 * 243.00003051757812, p969 * 108.3125);
    v1340.closePath();
    f88(v1340, p971[1], p971[1], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 226.00003051757812, p969 * 87.85795593261719);
    v1340.bezierCurveTo(p969 * 243.50003051757812, p969 * 66.85795593261719, p969 * 243.50003051757812, p969 * 66.85795593261719, p969 * 261.0000305175781, p969 * 45.85795593261719);
    v1340.bezierCurveTo(p969 * 265.0000305175781, p969 * 83.85795593261719, p969 * 265.0000305175781, p969 * 83.85795593261719, p969 * 269.0000305175781, p969 * 121.85795593261719);
    v1340.bezierCurveTo(p969 * 235.00003051757812, p969 * 122.85795593261719, p969 * 233.00003051757812, p969 * 107.85795593261719, p969 * 228.00003051757812, p969 * 90.85795593261719);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 105.00003051757812, p969 * 128.8579559326172);
    v1340.bezierCurveTo(p969 * 104.50003051757812, p969 * 87.85795593261719, p969 * 104.50003051757812, p969 * 87.85795593261719, p969 * 104.00003051757812, p969 * 46.85795593261719);
    v1340.bezierCurveTo(p969 * 126.50003051757812, p969 * 69.35795593261719, p969 * 126.50003051757812, p969 * 69.35795593261719, p969 * 149.00003051757812, p969 * 91.85795593261719);
    v1340.bezierCurveTo(p969 * 130.00003051757812, p969 * 123.85795593261719, p969 * 123.00003051757812, p969 * 132.8579559326172, p969 * 107.00003051757812, p969 * 130.8579559326172);
    v1340.closePath();
    f88(v1340, p971[1], p971[1], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 59.000030517578125, p969 * 121.85795593261719);
    v1340.bezierCurveTo(p969 * 59.500030517578125, p969 * 99.35795593261719, p969 * 59.500030517578125, p969 * 99.35795593261719, p969 * 60.000030517578125, p969 * 76.85795593261719);
    v1340.bezierCurveTo(p969 * 84.00003051757812, p969 * 92.35795593261719, p969 * 84.00003051757812, p969 * 92.35795593261719, p969 * 108.00003051757812, p969 * 107.85795593261719);
    v1340.bezierCurveTo(p969 * 106.00003051757812, p969 * 148.8579559326172, p969 * 86.00003051757812, p969 * 148.8579559326172, p969 * 62.000030517578125, p969 * 123.85795593261719);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 105.00003051757812, p969 * 132.8579559326172);
    v1340.bezierCurveTo(p969 * 104.50003051757812, p969 * 93.35795593261719, p969 * 104.50003051757812, p969 * 93.35795593261719, p969 * 104.00003051757812, p969 * 53.85795593261719);
    v1340.bezierCurveTo(p969 * 126.50003051757812, p969 * 75.85795593261719, p969 * 126.50003051757812, p969 * 75.85795593261719, p969 * 149.00003051757812, p969 * 97.85795593261719);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 311.0000305175781, p969 * 126.85795593261719);
    v1340.bezierCurveTo(p969 * 309.0000305175781, p969 * 101.35795593261719, p969 * 309.0000305175781, p969 * 101.35795593261719, p969 * 307.0000305175781, p969 * 75.85795593261719);
    v1340.bezierCurveTo(p969 * 271.0000305175781, p969 * 96.85795593261719, p969 * 271.0000305175781, p969 * 96.85795593261719, p969 * 235.00003051757812, p969 * 117.85795593261719);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 228.00003051757812, p969 * 96.85795593261719);
    v1340.bezierCurveTo(p969 * 244.50003051757812, p969 * 74.85795593261719, p969 * 244.50003051757812, p969 * 74.85795593261719, p969 * 261.0000305175781, p969 * 52.85795593261719);
    v1340.bezierCurveTo(p969 * 265.5000305175781, p969 * 89.85795593261719, p969 * 265.5000305175781, p969 * 89.85795593261719, p969 * 270.0000305175781, p969 * 126.85795593261719);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 12.000030517578125, p969 * 86.13069152832031);
    v1340.bezierCurveTo(p969 * 36.000030517578125, p969 * 113.13069152832031, p969 * 84.00003051757812, p969 * 111.13069152832031, p969 * 116.00003051757812, p969 * 113.13069152832031);
    v1340.bezierCurveTo(p969 * 164.00003051757812, p969 * 23.130691528320312, p969 * 172.00003051757812, p969 * 18.130691528320312, p969 * 181.00003051757812, p969 * 9.130691528320312);
    v1340.bezierCurveTo(p969 * 199.00003051757812, p969 * 29.130691528320312, p969 * 221.00003051757812, p969 * 78.13069152832031, p969 * 247.00003051757812, p969 * 112.13069152832031);
    v1340.bezierCurveTo(p969 * 301.0000305175781, p969 * 122.13069152832031, p969 * 338.0000305175781, p969 * 111.13069152832031, p969 * 359.0000305175781, p969 * 94.13069152832031);
    v1340.bezierCurveTo(p969 * 359.0000305175781, p969 * 113.13069152832031, p969 * 358.5000305175781, p969 * 105.13069152832031, p969 * 358.0000305175781, p969 * 116.13069152832031);
    v1340.bezierCurveTo(p969 * 270.5000305175781, p969 * 130.1306915283203, p969 * 270.5000305175781, p969 * 130.1306915283203, p969 * 183.00003051757812, p969 * 144.1306915283203);
    v1340.bezierCurveTo(p969 * 98.00003051757812, p969 * 128.6306915283203, p969 * 98.00003051757812, p969 * 128.6306915283203, p969 * 13.000030517578125, p969 * 113.13069152832031);
    v1340.closePath();
    f88(v1340, p971[1], p971[1], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 247.00003051757812, p969 * 115.76704406738281);
    v1340.bezierCurveTo(p969 * 305.0000305175781, p969 * 124.76704406738281, p969 * 335.0000305175781, p969 * 112.76704406738281, p969 * 359.0000305175781, p969 * 93.76704406738281);
    v1340.bezierCurveTo(p969 * 359.5000305175781, p969 * 113.26704406738281, p969 * 359.5000305175781, p969 * 113.26704406738281, p969 * 360.0000305175781, p969 * 132.7670440673828);
    v1340.bezierCurveTo(p969 * 339.0000305175781, p969 * 177.7670440673828, p969 * 281.0000305175781, p969 * 178.7670440673828, p969 * 243.00003051757812, p969 * 183.7670440673828);
    v1340.bezierCurveTo(p969 * 214.50003051757812, p969 * 214.2670440673828, p969 * 214.50003051757812, p969 * 214.2670440673828, p969 * 186.00003051757812, p969 * 244.7670440673828);
    v1340.bezierCurveTo(p969 * 155.00003051757812, p969 * 214.2670440673828, p969 * 155.00003051757812, p969 * 214.2670440673828, p969 * 124.00003051757812, p969 * 183.7670440673828);
    v1340.bezierCurveTo(p969 * 51.000030517578125, p969 * 180.7670440673828, p969 * 21.000030517578125, p969 * 161.7670440673828, p969 * 9.000030517578125, p969 * 129.7670440673828);
    v1340.bezierCurveTo(p969 * 8.500030517578125, p969 * 110.76704406738281, p969 * 8.500030517578125, p969 * 110.76704406738281, p969 * 8.000030517578125, p969 * 91.76704406738281);
    v1340.bezierCurveTo(p969 * 31.000030517578125, p969 * 112.76704406738281, p969 * 87.00003051757812, p969 * 119.76704406738281, p969 * 116.00003051757812, p969 * 117.76704406738281);
    v1340.bezierCurveTo(p969 * 175.00003051757812, p969 * 18.767044067382812, p969 * 170.00003051757812, p969 * 23.767044067382812, p969 * 181.00003051757812, p969 * 14.767044067382812);
    v1340.bezierCurveTo(p969 * 199.00003051757812, p969 * 34.76704406738281, p969 * 203.00003051757812, p969 * 54.76704406738281, p969 * 247.00003051757812, p969 * 115.76704406738281);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 27.000030517578125, p969 * 94.76704406738281);
    v1340.bezierCurveTo(p969 * 11.000030517578125, p969 * 81.76704406738281, p969 * 31.000030517578125, p969 * 72.76704406738281, p969 * 44.000030517578125, p969 * 59.76704406738281);
    v1340.bezierCurveTo(p969 * 9.000030517578125, p969 * 65.76704406738281, p969 * 4.000030517578125, p969 * 78.76704406738281, p969 * 9.000030517578125, p969 * 89.76704406738281);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 352.0000305175781, p969 * 100.76705932617188);
    v1340.bezierCurveTo(p969 * 362.0000305175781, p969 * 92.76705932617188, p969 * 352.0000305175781, p969 * 84.76705932617188, p969 * 340.0000305175781, p969 * 68.76705932617188);
    v1340.bezierCurveTo(p969 * 360.0000305175781, p969 * 69.76705932617188, p969 * 364.0000305175781, p969 * 79.76705932617188, p969 * 364.0000305175781, p969 * 94.76705932617188);
    v1340.closePath();
    f88(v1340, p971[1], p971[1], p969 * 1);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 25.000030517578125, p969 * 97.94886779785156);
    v1340.bezierCurveTo(p969 * 2.000030517578125, p969 * 76.94886779785156, p969 * 29.000030517578125, p969 * 62.94886779785156, p969 * 44.000030517578125, p969 * 59.94886779785156);
    v1340.bezierCurveTo(p969 * 8.000030517578125, p969 * 59.94886779785156, p969 * -0.999969482421875, p969 * 81.94886779785156, p969 * 4.000030517578125, p969 * 92.94886779785156);
    v1340.closePath();
    f88(v1340, p971[3]);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 349.0000305175781, p969 * 100.94886779785156);
    v1340.bezierCurveTo(p969 * 366.0000305175781, p969 * 82.94886779785156, p969 * 353.0000305175781, p969 * 76.94886779785156, p969 * 337.0000305175781, p969 * 67.94886779785156);
    v1340.bezierCurveTo(p969 * 366.0000305175781, p969 * 69.94886779785156, p969 * 366.0000305175781, p969 * 83.94886779785156, p969 * 363.0000305175781, p969 * 101.94886779785156);
    v1340.closePath();
    f88(v1340, p971[2], p971[3], p969 * 10);
    f92(v1340, p969 * 46.000030517578125, p969 * 137.5852279663086, p969 * 9.219544457292887);
    f88(v1340, p971[4], p971[5], p969 * 1);
    f92(v1340, p969 * 308.0000305175781, p969 * 141.5852279663086, p969 * 8.54400374531753);
    f88(v1340, p971[4], p971[5], p969 * 1);
    f92(v1340, p969 * 92.00003051757812, p969 * 149.58523559570312, p969 * 14.866068747318506);
    f88(v1340, p971[4], p971[5], p969 * 1);
    f92(v1340, p969 * 262.0000305175781, p969 * 148.8579559326172, p969 * 15.620499351813308);
    f88(v1340, p971[4], p971[5], p969 * 1);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 184.00003051757812, p969 * 68.85795593261719);
    v1340.bezierCurveTo(p969 * 203.00003051757812, p969 * 108.85795593261719, p969 * 203.00003051757812, p969 * 108.85795593261719, p969 * 222.00003051757812, p969 * 148.8579559326172);
    v1340.bezierCurveTo(p969 * 202.50003051757812, p969 * 177.8579559326172, p969 * 202.50003051757812, p969 * 177.8579559326172, p969 * 183.00003051757812, p969 * 206.8579559326172);
    v1340.bezierCurveTo(p969 * 162.00003051757812, p969 * 178.8579559326172, p969 * 162.00003051757812, p969 * 178.8579559326172, p969 * 141.00003051757812, p969 * 150.8579559326172);
    v1340.closePath();
    f88(v1340, p971[4], p971[5], p969 * 10);
    v1340.beginPath();
    v1340.lineCap = "round";
    v1340.lineJoin = "round";
    v1340.moveTo(p969 * 183.00003051757812, p969 * 104.94886779785156);
    v1340.bezierCurveTo(p969 * 192.50003051757812, p969 * 125.44886779785156, p969 * 192.50003051757812, p969 * 125.44886779785156, p969 * 202.00003051757812, p969 * 145.94886779785156);
    v1340.bezierCurveTo(p969 * 192.00003051757812, p969 * 163.94886779785156, p969 * 192.00003051757812, p969 * 163.94886779785156, p969 * 182.00003051757812, p969 * 181.94886779785156);
    v1340.bezierCurveTo(p969 * 172.50003051757812, p969 * 164.44886779785156, p969 * 172.50003051757812, p969 * 164.44886779785156, p969 * 163.00003051757812, p969 * 146.94886779785156);
    v1340.closePath();
    f88(v1340, p971[6]);
    return v1339;
  }
  function f248(p972, p973, p974) {
    var v1341 = document.createElement("canvas");
    var v1342 = v1341.getContext("2d");
    v1341.width = p972 * 247;
    v1341.height = p972 * 247;
    v1342.translate(0, p972 * 10);
    v1342.globalAlpha = p973 ? 0.5 : 1;
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 150, p972 * 62);
    v1342.bezierCurveTo(p972 * 151.5, p972 * 71.5, p972 * 149, p972 * 70, p972 * 153, p972 * 81);
    v1342.bezierCurveTo(p972 * 158, p972 * 73.5, p972 * 158, p972 * 73.5, p972 * 163, p972 * 66);
    v1342.closePath();
    f88(v1342, p974[0]);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 164, p972 * 171);
    v1342.bezierCurveTo(p972 * 149, p972 * 159, p972 * 156.5, p972 * 165, p972 * 149, p972 * 159);
    v1342.bezierCurveTo(p972 * 149, p972 * 167, p972 * 149, p972 * 170, p972 * 152, p972 * 178);
    v1342.closePath();
    f88(v1342, p974[0]);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 132, p972 * 95);
    v1342.bezierCurveTo(p972 * 154, p972 * 102, p972 * 154, p972 * 126, p972 * 137, p972 * 139);
    v1342.bezierCurveTo(p972 * 113, p972 * 152, p972 * 89, p972 * 136, p972 * 80, p972 * 121);
    v1342.bezierCurveTo(p972 * 57, p972 * 89, p972 * 69, p972 * 63, p972 * 79, p972 * 52);
    v1342.bezierCurveTo(p972 * 110, p972 * 20, p972 * 139, p972 * 21, p972 * 150, p972 * 25);
    v1342.bezierCurveTo(p972 * 197, p972 * 36, p972 * 221, p972 * 67, p972 * 226, p972 * 90);
    v1342.bezierCurveTo(p972 * 234, p972 * 134, p972 * 214, p972 * 177, p972 * 195, p972 * 197);
    v1342.bezierCurveTo(p972 * 144, p972 * 242, p972 * 79, p972 * 216, p972 * 58, p972 * 206);
    v1342.bezierCurveTo(p972 * 13, p972 * 174, p972 * 20, p972 * 134, p972 * 23, p972 * 107);
    v1342.bezierCurveTo(p972 * 26, p972 * 78, p972 * 33, p972 * 60, p972 * 38, p972 * 43);
    v1342.bezierCurveTo(p972 * 42, p972 * 32, p972 * 47, p972 * 32, p972 * 50, p972 * 36);
    v1342.bezierCurveTo(p972 * 54, p972 * 37, p972 * 50, p972 * 52, p972 * 44, p972 * 87);
    v1342.bezierCurveTo(p972 * 40, p972 * 115, p972 * 46, p972 * 142, p972 * 57, p972 * 158);
    v1342.bezierCurveTo(p972 * 76, p972 * 189, p972 * 129, p972 * 182, p972 * 152, p972 * 173);
    v1342.bezierCurveTo(p972 * 186, p972 * 156, p972 * 191, p972 * 106, p972 * 176, p972 * 85);
    v1342.bezierCurveTo(p972 * 159, p972 * 61, p972 * 132, p972 * 62, p972 * 122, p972 * 66);
    v1342.bezierCurveTo(p972 * 108, p972 * 74, p972 * 108, p972 * 89, p972 * 116, p972 * 90);
    v1342.bezierCurveTo(p972 * 123, p972 * 92, p972 * 130, p972 * 93, p972 * 131, p972 * 94);
    v1342.closePath();
    f88(v1342, p974[0]);
    v1342.translate(0, p972 * -10);
    v1342.globalAlpha = 1;
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 150, p972 * 62);
    v1342.bezierCurveTo(p972 * 151.5, p972 * 71.5, p972 * 149, p972 * 70, p972 * 153, p972 * 81);
    v1342.bezierCurveTo(p972 * 158, p972 * 73.5, p972 * 158, p972 * 73.5, p972 * 163, p972 * 66);
    v1342.closePath();
    f88(v1342, p974[5]);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 164, p972 * 171);
    v1342.bezierCurveTo(p972 * 149, p972 * 159, p972 * 156.5, p972 * 165, p972 * 149, p972 * 159);
    v1342.bezierCurveTo(p972 * 149, p972 * 167, p972 * 149, p972 * 170, p972 * 152, p972 * 178);
    v1342.closePath();
    f88(v1342, p974[5]);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 132, p972 * 95);
    v1342.bezierCurveTo(p972 * 154, p972 * 102, p972 * 154, p972 * 126, p972 * 137, p972 * 139);
    v1342.bezierCurveTo(p972 * 113, p972 * 152, p972 * 89, p972 * 136, p972 * 80, p972 * 121);
    v1342.bezierCurveTo(p972 * 57, p972 * 89, p972 * 69, p972 * 63, p972 * 79, p972 * 52);
    v1342.bezierCurveTo(p972 * 110, p972 * 20, p972 * 139, p972 * 21, p972 * 150, p972 * 25);
    v1342.bezierCurveTo(p972 * 197, p972 * 36, p972 * 221, p972 * 67, p972 * 226, p972 * 90);
    v1342.bezierCurveTo(p972 * 234, p972 * 134, p972 * 214, p972 * 177, p972 * 195, p972 * 197);
    v1342.bezierCurveTo(p972 * 144, p972 * 242, p972 * 79, p972 * 216, p972 * 58, p972 * 206);
    v1342.bezierCurveTo(p972 * 13, p972 * 174, p972 * 20, p972 * 134, p972 * 23, p972 * 107);
    v1342.bezierCurveTo(p972 * 26, p972 * 78, p972 * 33, p972 * 60, p972 * 38, p972 * 43);
    v1342.bezierCurveTo(p972 * 42, p972 * 32, p972 * 47, p972 * 32, p972 * 50, p972 * 36);
    v1342.bezierCurveTo(p972 * 54, p972 * 37, p972 * 50, p972 * 52, p972 * 44, p972 * 87);
    v1342.bezierCurveTo(p972 * 40, p972 * 115, p972 * 46, p972 * 142, p972 * 57, p972 * 158);
    v1342.bezierCurveTo(p972 * 76, p972 * 189, p972 * 129, p972 * 182, p972 * 152, p972 * 173);
    v1342.bezierCurveTo(p972 * 186, p972 * 156, p972 * 191, p972 * 106, p972 * 176, p972 * 85);
    v1342.bezierCurveTo(p972 * 159, p972 * 61, p972 * 132, p972 * 62, p972 * 122, p972 * 66);
    v1342.bezierCurveTo(p972 * 108, p972 * 74, p972 * 108, p972 * 89, p972 * 116, p972 * 90);
    v1342.bezierCurveTo(p972 * 123, p972 * 92, p972 * 130, p972 * 93, p972 * 131, p972 * 94);
    v1342.closePath();
    f88(v1342, p974[1], p974[2], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 137, p972 * 137);
    v1342.bezierCurveTo(p972 * 145, p972 * 125, p972 * 138, p972 * 108, p972 * 123, p972 * 104);
    v1342.bezierCurveTo(p972 * 81, p972 * 101, p972 * 88, p972 * 77, p972 * 98, p972 * 65);
    v1342.bezierCurveTo(p972 * 117, p972 * 38, p972 * 138, p972 * 39, p972 * 165, p972 * 52);
    v1342.bezierCurveTo(p972 * 197, p972 * 72, p972 * 207, p972 * 111, p972 * 197, p972 * 140);
    v1342.bezierCurveTo(p972 * 182, p972 * 180, p972 * 161, p972 * 197, p972 * 112, p972 * 194);
    v1342.bezierCurveTo(p972 * 58, p972 * 194, p972 * 37, p972 * 170, p972 * 34, p972 * 142);
    v1342.bezierCurveTo(p972 * 29, p972 * 102, p972 * 40, p972 * 63, p972 * 51, p972 * 45);
    v1342.bezierCurveTo(p972 * 43, p972 * 78, p972 * 41, p972 * 103, p972 * 43, p972 * 122);
    v1342.bezierCurveTo(p972 * 51, p972 * 158, p972 * 63, p972 * 174, p972 * 95, p972 * 179);
    v1342.bezierCurveTo(p972 * 129, p972 * 186, p972 * 169, p972 * 172, p972 * 177, p972 * 144);
    v1342.bezierCurveTo(p972 * 197, p972 * 105, p972 * 172, p972 * 76, p972 * 160, p972 * 71);
    v1342.bezierCurveTo(p972 * 125, p972 * 52, p972 * 111, p972 * 73, p972 * 111, p972 * 81);
    v1342.bezierCurveTo(p972 * 106, p972 * 93, p972 * 140, p972 * 92, p972 * 147, p972 * 107);
    v1342.bezierCurveTo(p972 * 153, p972 * 128, p972 * 140, p972 * 135, p972 * 137, p972 * 139);
    v1342.closePath();
    f88(v1342, p974[3]);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 132, p972 * 95);
    v1342.bezierCurveTo(p972 * 154, p972 * 102, p972 * 154, p972 * 126, p972 * 137, p972 * 139);
    v1342.bezierCurveTo(p972 * 113, p972 * 152, p972 * 89, p972 * 136, p972 * 80, p972 * 121);
    v1342.bezierCurveTo(p972 * 57, p972 * 89, p972 * 69, p972 * 63, p972 * 79, p972 * 52);
    v1342.bezierCurveTo(p972 * 110, p972 * 20, p972 * 139, p972 * 21, p972 * 150, p972 * 25);
    v1342.bezierCurveTo(p972 * 197, p972 * 36, p972 * 221, p972 * 67, p972 * 226, p972 * 90);
    v1342.bezierCurveTo(p972 * 234, p972 * 134, p972 * 214, p972 * 177, p972 * 195, p972 * 197);
    v1342.bezierCurveTo(p972 * 144, p972 * 242, p972 * 79, p972 * 216, p972 * 58, p972 * 206);
    v1342.bezierCurveTo(p972 * 13, p972 * 174, p972 * 20, p972 * 134, p972 * 23, p972 * 107);
    v1342.bezierCurveTo(p972 * 26, p972 * 78, p972 * 33, p972 * 60, p972 * 38, p972 * 43);
    v1342.bezierCurveTo(p972 * 42, p972 * 32, p972 * 47, p972 * 32, p972 * 50, p972 * 36);
    v1342.bezierCurveTo(p972 * 54, p972 * 37, p972 * 50, p972 * 52, p972 * 44, p972 * 87);
    v1342.bezierCurveTo(p972 * 40, p972 * 115, p972 * 46, p972 * 142, p972 * 57, p972 * 158);
    v1342.bezierCurveTo(p972 * 76, p972 * 189, p972 * 129, p972 * 182, p972 * 152, p972 * 173);
    v1342.bezierCurveTo(p972 * 186, p972 * 156, p972 * 191, p972 * 106, p972 * 176, p972 * 85);
    v1342.bezierCurveTo(p972 * 159, p972 * 61, p972 * 132, p972 * 62, p972 * 122, p972 * 66);
    v1342.bezierCurveTo(p972 * 108, p972 * 74, p972 * 108, p972 * 89, p972 * 116, p972 * 90);
    v1342.bezierCurveTo(p972 * 123, p972 * 92, p972 * 130, p972 * 93, p972 * 131, p972 * 94);
    v1342.closePath();
    f88(v1342, undefined, p974[2], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 82, p972 * 63);
    v1342.bezierCurveTo(p972 * 91, p972 * 64, p972 * 96, p972 * 62, p972 * 98, p972 * 53);
    v1342.bezierCurveTo(p972 * 91, p972 * 45, p972 * 85, p972 * 42, p972 * 78, p972 * 41);
    v1342.bezierCurveTo(p972 * 81, p972 * 51, p972 * 82, p972 * 57, p972 * 82, p972 * 63);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 148, p972 * 40);
    v1342.bezierCurveTo(p972 * 140, p972 * 52, p972 * 131, p972 * 51, p972 * 123, p972 * 43);
    v1342.bezierCurveTo(p972 * 123, p972 * 25, p972 * 129, p972 * 17, p972 * 134, p972 * 12);
    v1342.bezierCurveTo(p972 * 138, p972 * 35, p972 * 142, p972 * 31, p972 * 148, p972 * 40);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 189, p972 * 43);
    v1342.bezierCurveTo(p972 * 191, p972 * 54, p972 * 196, p972 * 58, p972 * 205, p972 * 59);
    v1342.bezierCurveTo(p972 * 211, p972 * 42, p972 * 214, p972 * 37, p972 * 216, p972 * 31);
    v1342.bezierCurveTo(p972 * 202, p972 * 34, p972 * 195, p972 * 39, p972 * 190, p972 * 43);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 216, p972 * 98);
    v1342.bezierCurveTo(p972 * 219, p972 * 105, p972 * 225, p972 * 107, p972 * 230, p972 * 109);
    v1342.bezierCurveTo(p972 * 227, p972 * 113, p972 * 221, p972 * 115, p972 * 215, p972 * 115);
    v1342.bezierCurveTo(p972 * 208, p972 * 109, p972 * 211, p972 * 101, p972 * 216, p972 * 98);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 180, p972 * 85);
    v1342.bezierCurveTo(p972 * 193, p972 * 86, p972 * 196, p972 * 98, p972 * 191, p972 * 108);
    v1342.bezierCurveTo(p972 * 179, p972 * 112, p972 * 167, p972 * 113, p972 * 155, p972 * 111);
    v1342.bezierCurveTo(p972 * 169, p972 * 100, p972 * 176, p972 * 96, p972 * 180, p972 * 85);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 96, p972 * 114);
    v1342.bezierCurveTo(p972 * 102, p972 * 109, p972 * 112, p972 * 110, p972 * 114, p972 * 118);
    v1342.bezierCurveTo(p972 * 111, p972 * 134, p972 * 102, p972 * 143, p972 * 95, p972 * 147);
    v1342.bezierCurveTo(p972 * 98, p972 * 123, p972 * 97, p972 * 119, p972 * 96, p972 * 115);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 79, p972 * 92);
    v1342.bezierCurveTo(p972 * 86, p972 * 95, p972 * 89, p972 * 102, p972 * 83, p972 * 111);
    v1342.bezierCurveTo(p972 * 70, p972 * 110, p972 * 61, p972 * 107, p972 * 54, p972 * 100);
    v1342.bezierCurveTo(p972 * 70, p972 * 97, p972 * 70, p972 * 95, p972 * 78, p972 * 92);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 39, p972 * 130);
    v1342.bezierCurveTo(p972 * 37, p972 * 141, p972 * 41, p972 * 143, p972 * 48, p972 * 144);
    v1342.bezierCurveTo(p972 * 54, p972 * 134, p972 * 55, p972 * 131, p972 * 56, p972 * 123);
    v1342.bezierCurveTo(p972 * 47, p972 * 129, p972 * 43, p972 * 129, p972 * 39, p972 * 129);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 113, p972 * 189);
    v1342.bezierCurveTo(p972 * 119, p972 * 201, p972 * 127, p972 * 198, p972 * 134, p972 * 192);
    v1342.bezierCurveTo(p972 * 128, p972 * 175, p972 * 128, p972 * 173, p972 * 128, p972 * 165);
    v1342.bezierCurveTo(p972 * 117, p972 * 176, p972 * 116, p972 * 182, p972 * 113, p972 * 187);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 74, p972 * 154);
    v1342.bezierCurveTo(p972 * 76, p972 * 163, p972 * 76, p972 * 170, p972 * 75, p972 * 177);
    v1342.bezierCurveTo(p972 * 68, p972 * 179, p972 * 66, p972 * 176, p972 * 63, p972 * 171);
    v1342.bezierCurveTo(p972 * 69, p972 * 164, p972 * 72, p972 * 159, p972 * 74, p972 * 154);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 206, p972 * 152);
    v1342.bezierCurveTo(p972 * 198, p972 * 158, p972 * 198, p972 * 166, p972 * 201, p972 * 171);
    v1342.bezierCurveTo(p972 * 209, p972 * 170, p972 * 221, p972 * 170, p972 * 226, p972 * 172);
    v1342.bezierCurveTo(p972 * 219, p972 * 159, p972 * 210, p972 * 155, p972 * 207, p972 * 153);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 181, p972 * 184);
    v1342.bezierCurveTo(p972 * 170, p972 * 184, p972 * 167, p972 * 187, p972 * 163, p972 * 195);
    v1342.bezierCurveTo(p972 * 171, p972 * 207, p972 * 183, p972 * 214, p972 * 191, p972 * 217);
    v1342.bezierCurveTo(p972 * 183, p972 * 204, p972 * 184, p972 * 196, p972 * 181, p972 * 184);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 66, p972 * 199);
    v1342.bezierCurveTo(p972 * 73, p972 * 197, p972 * 78, p972 * 199, p972 * 79, p972 * 206);
    v1342.bezierCurveTo(p972 * 71, p972 * 216, p972 * 67, p972 * 221, p972 * 57, p972 * 223);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 182, p972 * 143);
    v1342.bezierCurveTo(p972 * 183, p972 * 146, p972 * 183, p972 * 149, p972 * 179, p972 * 152);
    v1342.bezierCurveTo(p972 * 174, p972 * 146, p972 * 174, p972 * 146, p972 * 169, p972 * 140);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 32, p972 * 159);
    v1342.bezierCurveTo(p972 * 45, p972 * 160, p972 * 48, p972 * 164, p972 * 45, p972 * 175);
    v1342.bezierCurveTo(p972 * 28, p972 * 183, p972 * 25, p972 * 184, p972 * 19, p972 * 184);
    v1342.bezierCurveTo(p972 * 30, p972 * 170, p972 * 29, p972 * 164, p972 * 31, p972 * 160);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 110, p972 * 214);
    v1342.bezierCurveTo(p972 * 106, p972 * 212, p972 * 104, p972 * 213, p972 * 102, p972 * 218);
    v1342.bezierCurveTo(p972 * 104, p972 * 220, p972 * 107, p972 * 222, p972 * 110, p972 * 224);
    v1342.bezierCurveTo(p972 * 110.5, p972 * 219, p972 * 110.5, p972 * 219, p972 * 111, p972 * 214);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 40, p972 * 52);
    v1342.bezierCurveTo(p972 * 41, p972 * 57, p972 * 40, p972 * 61, p972 * 34, p972 * 60);
    v1342.bezierCurveTo(p972 * 31.5, p972 * 55, p972 * 31.5, p972 * 55, p972 * 29, p972 * 50);
    v1342.bezierCurveTo(p972 * 34, p972 * 50.5, p972 * 34, p972 * 50.5, p972 * 39, p972 * 51);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    v1342.beginPath();
    v1342.lineCap = "round";
    v1342.lineJoin = "round";
    v1342.moveTo(p972 * 31, p972 * 81);
    v1342.bezierCurveTo(p972 * 37, p972 * 84, p972 * 38, p972 * 90, p972 * 34, p972 * 99);
    v1342.bezierCurveTo(p972 * 23, p972 * 97, p972 * 19, p972 * 96, p972 * 16, p972 * 93);
    v1342.bezierCurveTo(p972 * 24, p972 * 88, p972 * 28, p972 * 85, p972 * 30, p972 * 81);
    v1342.closePath();
    f88(v1342, p974[4], p974[5], p972 * 5);
    return v1341;
  }
  function f249(p975, p976, p977) {
    var v1343 = document.createElement("canvas");
    var v1344 = v1343.getContext("2d");
    v1343.width = p975 * 272;
    v1343.height = p975 * 264;
    v1344.translate(0, p975 * 20);
    v1344.globalAlpha = p976 ? 0.5 : 1;
    v1344.beginPath();
    v1344.lineCap = "round";
    v1344.lineJoin = "round";
    v1344.moveTo(p975 * 56.999969482421875, p975 * 84.517333984375);
    v1344.bezierCurveTo(p975 * 61.999969482421875, p975 * 58.517333984375, p975 * 79.99996948242188, p975 * 50.517333984375, p975 * 102.99996948242188, p975 * 50.517333984375);
    v1344.bezierCurveTo(p975 * 119.99996948242188, p975 * 26.517333984375, p975 * 137.99996948242188, p975 * 32.517333984375, p975 * 156.99996948242188, p975 * 44.517333984375);
    v1344.bezierCurveTo(p975 * 187.99996948242188, p975 * 42.517333984375, p975 * 195.99996948242188, p975 * 50.517333984375, p975 * 202.99996948242188, p975 * 77.517333984375);
    v1344.bezierCurveTo(p975 * 229.99996948242188, p975 * 80.517333984375, p975 * 231.99996948242188, p975 * 96.517333984375, p975 * 229.99996948242188, p975 * 118.517333984375);
    v1344.bezierCurveTo(p975 * 241.99996948242188, p975 * 147.517333984375, p975 * 236.99996948242188, p975 * 148.517333984375, p975 * 220.99996948242188, p975 * 165.517333984375);
    v1344.bezierCurveTo(p975 * 222.99996948242188, p975 * 192.517333984375, p975 * 209.99996948242188, p975 * 212.517333984375, p975 * 177.99996948242188, p975 * 213.517333984375);
    v1344.bezierCurveTo(p975 * 159.99996948242188, p975 * 234.517333984375, p975 * 141.99996948242188, p975 * 234.517333984375, p975 * 116.99996948242188, p975 * 222.517333984375);
    v1344.bezierCurveTo(p975 * 72.99996948242188, p975 * 226.517333984375, p975 * 66.99996948242188, p975 * 207.517333984375, p975 * 65.99996948242188, p975 * 190.517333984375);
    v1344.bezierCurveTo(p975 * 35.999969482421875, p975 * 180.517333984375, p975 * 30.999969482421875, p975 * 162.517333984375, p975 * 39.999969482421875, p975 * 135.517333984375);
    v1344.bezierCurveTo(p975 * 23.999969482421875, p975 * 110.517333984375, p975 * 43.999969482421875, p975 * 90.517333984375, p975 * 55.999969482421875, p975 * 85.517333984375);
    v1344.closePath();
    f88(v1344, p977[0]);
    v1344.translate(0, p975 * -20);
    v1344.globalAlpha = 1;
    v1344.beginPath();
    v1344.lineCap = "round";
    v1344.lineJoin = "round";
    v1344.moveTo(p975 * 56.999969482421875, p975 * 84.517333984375);
    v1344.bezierCurveTo(p975 * 61.999969482421875, p975 * 58.517333984375, p975 * 79.99996948242188, p975 * 50.517333984375, p975 * 102.99996948242188, p975 * 50.517333984375);
    v1344.bezierCurveTo(p975 * 119.99996948242188, p975 * 26.517333984375, p975 * 137.99996948242188, p975 * 32.517333984375, p975 * 156.99996948242188, p975 * 44.517333984375);
    v1344.bezierCurveTo(p975 * 187.99996948242188, p975 * 42.517333984375, p975 * 195.99996948242188, p975 * 50.517333984375, p975 * 202.99996948242188, p975 * 77.517333984375);
    v1344.bezierCurveTo(p975 * 229.99996948242188, p975 * 80.517333984375, p975 * 231.99996948242188, p975 * 96.517333984375, p975 * 229.99996948242188, p975 * 118.517333984375);
    v1344.bezierCurveTo(p975 * 241.99996948242188, p975 * 147.517333984375, p975 * 236.99996948242188, p975 * 148.517333984375, p975 * 220.99996948242188, p975 * 165.517333984375);
    v1344.bezierCurveTo(p975 * 222.99996948242188, p975 * 192.517333984375, p975 * 209.99996948242188, p975 * 212.517333984375, p975 * 177.99996948242188, p975 * 213.517333984375);
    v1344.bezierCurveTo(p975 * 159.99996948242188, p975 * 234.517333984375, p975 * 141.99996948242188, p975 * 234.517333984375, p975 * 116.99996948242188, p975 * 222.517333984375);
    v1344.bezierCurveTo(p975 * 72.99996948242188, p975 * 226.517333984375, p975 * 66.99996948242188, p975 * 207.517333984375, p975 * 65.99996948242188, p975 * 190.517333984375);
    v1344.bezierCurveTo(p975 * 35.999969482421875, p975 * 180.517333984375, p975 * 30.999969482421875, p975 * 162.517333984375, p975 * 39.999969482421875, p975 * 135.517333984375);
    v1344.bezierCurveTo(p975 * 23.999969482421875, p975 * 110.517333984375, p975 * 43.999969482421875, p975 * 90.517333984375, p975 * 55.999969482421875, p975 * 85.517333984375);
    v1344.closePath();
    f88(v1344, p977[1], p977[2], p975 * 8);
    v1344.beginPath();
    v1344.lineCap = "round";
    v1344.lineJoin = "round";
    v1344.moveTo(p975 * 123.99996948242188, p975 * 116.18402099609375);
    v1344.bezierCurveTo(p975 * 115.99996948242188, p975 * 99.18402099609375, p975 * 109.99996948242188, p975 * 74.18402099609375, p975 * 109.99996948242188, p975 * 63.18402099609375);
    v1344.bezierCurveTo(p975 * 115.99996948242188, p975 * 69.18402099609375, p975 * 125.99996948242188, p975 * 87.18402099609375, p975 * 137.99996948242188, p975 * 112.18402099609375);
    v1344.bezierCurveTo(p975 * 142.99996948242188, p975 * 84.18402099609375, p975 * 143.99996948242188, p975 * 76.18402099609375, p975 * 153.99996948242188, p975 * 62.18402099609375);
    v1344.bezierCurveTo(p975 * 155.99996948242188, p975 * 79.18402099609375, p975 * 149.99996948242188, p975 * 110.18402099609375, p975 * 151.99996948242188, p975 * 117.18402099609375);
    v1344.bezierCurveTo(p975 * 162.99996948242188, p975 * 104.18402099609375, p975 * 180.99996948242188, p975 * 91.18402099609375, p975 * 191.99996948242188, p975 * 91.18402099609375);
    v1344.bezierCurveTo(p975 * 185.99996948242188, p975 * 102.18402099609375, p975 * 180.99996948242188, p975 * 106.18402099609375, p975 * 160.99996948242188, p975 * 124.18402099609375);
    v1344.bezierCurveTo(p975 * 190.99996948242188, p975 * 121.18402099609375, p975 * 199.99996948242188, p975 * 120.18402099609375, p975 * 207.99996948242188, p975 * 123.18402099609375);
    v1344.bezierCurveTo(p975 * 199.99996948242188, p975 * 129.18402099609375, p975 * 181.99996948242188, p975 * 132.18402099609375, p975 * 160.99996948242188, p975 * 135.18402099609375);
    v1344.bezierCurveTo(p975 * 179.99996948242188, p975 * 142.18402099609375, p975 * 193.99996948242188, p975 * 151.18402099609375, p975 * 196.99996948242188, p975 * 156.18402099609375);
    v1344.bezierCurveTo(p975 * 185.99996948242188, p975 * 156.18402099609375, p975 * 163.99996948242188, p975 * 149.18402099609375, p975 * 152.99996948242188, p975 * 147.18402099609375);
    v1344.bezierCurveTo(p975 * 157.99996948242188, p975 * 155.18402099609375, p975 * 165.99996948242188, p975 * 176.18402099609375, p975 * 169.99996948242188, p975 * 195.18402099609375);
    v1344.bezierCurveTo(p975 * 162.99996948242188, p975 * 190.18402099609375, p975 * 147.99996948242188, p975 * 167.18402099609375, p975 * 139.99996948242188, p975 * 153.18402099609375);
    v1344.bezierCurveTo(p975 * 137.99996948242188, p975 * 167.18402099609375, p975 * 126.99996948242188, p975 * 194.18402099609375, p975 * 119.99996948242188, p975 * 204.18402099609375);
    v1344.bezierCurveTo(p975 * 117.99996948242188, p975 * 186.18402099609375, p975 * 123.99996948242188, p975 * 165.18402099609375, p975 * 126.99996948242188, p975 * 149.18402099609375);
    v1344.bezierCurveTo(p975 * 110.99996948242188, p975 * 163.18402099609375, p975 * 103.99996948242188, p975 * 170.18402099609375, p975 * 82.99996948242188, p975 * 177.18402099609375);
    v1344.bezierCurveTo(p975 * 90.99996948242188, p975 * 162.18402099609375, p975 * 99.99996948242188, p975 * 153.18402099609375, p975 * 117.99996948242188, p975 * 140.18402099609375);
    v1344.bezierCurveTo(p975 * 97.99996948242188, p975 * 140.18402099609375, p975 * 83.99996948242188, p975 * 139.18402099609375, p975 * 65.99996948242188, p975 * 132.18402099609375);
    v1344.bezierCurveTo(p975 * 77.99996948242188, p975 * 127.18402099609375, p975 * 95.99996948242188, p975 * 127.18402099609375, p975 * 115.99996948242188, p975 * 127.18402099609375);
    v1344.bezierCurveTo(p975 * 91.99996948242188, p975 * 113.18402099609375, p975 * 84.99996948242188, p975 * 107.18402099609375, p975 * 76.99996948242188, p975 * 96.18402099609375);
    v1344.bezierCurveTo(p975 * 94.99996948242188, p975 * 99.18402099609375, p975 * 109.99996948242188, p975 * 109.18402099609375, p975 * 123.99996948242188, p975 * 116.18402099609375);
    v1344.closePath();
    f88(v1344, p977[3]);
    v1344.beginPath();
    v1344.lineCap = "round";
    v1344.lineJoin = "round";
    v1344.moveTo(p975 * 131.99996948242188, p975 * 119.18402099609375);
    v1344.bezierCurveTo(p975 * 141.99996948242188, p975 * 119.18402099609375, p975 * 145.99996948242188, p975 * 116.18402099609375, p975 * 147.99996948242188, p975 * 109.18402099609375);
    v1344.bezierCurveTo(p975 * 151.99996948242188, p975 * 107.18402099609375, p975 * 159.99996948242188, p975 * 107.18402099609375, p975 * 156.99996948242188, p975 * 123.18402099609375);
    v1344.bezierCurveTo(p975 * 155.99996948242188, p975 * 140.18402099609375, p975 * 142.99996948242188, p975 * 149.18402099609375, p975 * 132.99996948242188, p975 * 147.18402099609375);
    v1344.bezierCurveTo(p975 * 119.99996948242188, p975 * 144.18402099609375, p975 * 113.99996948242188, p975 * 122.18402099609375, p975 * 131.99996948242188, p975 * 119.18402099609375);
    v1344.closePath();
    f88(v1344, p977[4], p977[5], p975 * 6);
    return v1343;
  }
  function f250(p978, p979) {
    var v1345 = document.createElement("canvas");
    var v1346 = v1345.getContext("2d");
    v1345.width = p978 * 376;
    v1345.height = p978 * 371;
    v1346.globalAlpha = 0.5;
    v1346.translate(p978 * 5, p978 * 5);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 191.633544921875, p978 * 123.98580932617188);
    v1346.bezierCurveTo(p978 * 215.633544921875, p978 * 85.98580932617188, p978 * 187.633544921875, p978 * 71.98580932617188, p978 * 202.633544921875, p978 * 19.985809326171875);
    v1346.bezierCurveTo(p978 * 231.633544921875, p978 * 68.98580932617188, p978 * 253.633544921875, p978 * 71.98580932617188, p978 * 256.633544921875, p978 * 93.98580932617188);
    v1346.bezierCurveTo(p978 * 306.633544921875, p978 * 64.98580932617188, p978 * 319.633544921875, p978 * 61.985809326171875, p978 * 350.633544921875, p978 * 58.985809326171875);
    v1346.bezierCurveTo(p978 * 280.633544921875, p978 * 86.98580932617188, p978 * 281.633544921875, p978 * 106.98580932617188, p978 * 268.633544921875, p978 * 130.98580932617188);
    v1346.bezierCurveTo(p978 * 295.633544921875, p978 * 158.98580932617188, p978 * 328.633544921875, p978 * 155.98580932617188, p978 * 353.633544921875, p978 * 90.98580932617188);
    v1346.bezierCurveTo(p978 * 371.633544921875, p978 * 158.98580932617188, p978 * 337.633544921875, p978 * 210.98580932617188, p978 * 286.633544921875, p978 * 209.98580932617188);
    v1346.bezierCurveTo(p978 * 323.633544921875, p978 * 230.98580932617188, p978 * 317.633544921875, p978 * 274.9858093261719, p978 * 356.633544921875, p978 * 305.9858093261719);
    v1346.bezierCurveTo(p978 * 288.633544921875, p978 * 297.9858093261719, p978 * 288.633544921875, p978 * 265.9858093261719, p978 * 275.633544921875, p978 * 266.9858093261719);
    v1346.bezierCurveTo(p978 * 280.633544921875, p978 * 294.9858093261719, p978 * 315.633544921875, p978 * 306.9858093261719, p978 * 336.633544921875, p978 * 316.9858093261719);
    v1346.bezierCurveTo(p978 * 295.633544921875, p978 * 318.9858093261719, p978 * 264.633544921875, p978 * 302.9858093261719, p978 * 254.633544921875, p978 * 289.9858093261719);
    v1346.bezierCurveTo(p978 * 252.633544921875, p978 * 301.9858093261719, p978 * 224.633544921875, p978 * 315.9858093261719, p978 * 201.633544921875, p978 * 356.9858093261719);
    v1346.bezierCurveTo(p978 * 195.633544921875, p978 * 313.9858093261719, p978 * 195.633544921875, p978 * 308.9858093261719, p978 * 196.633544921875, p978 * 307.9858093261719);
    v1346.bezierCurveTo(p978 * 197.633544921875, p978 * 289.9858093261719, p978 * 207.633544921875, p978 * 283.9858093261719, p978 * 195.633544921875, p978 * 258.9858093261719);
    v1346.bezierCurveTo(p978 * 182.633544921875, p978 * 282.9858093261719, p978 * 190.633544921875, p978 * 287.9858093261719, p978 * 193.633544921875, p978 * 297.9858093261719);
    v1346.bezierCurveTo(p978 * 195.633544921875, p978 * 306.9858093261719, p978 * 191.633544921875, p978 * 334.9858093261719, p978 * 187.633544921875, p978 * 354.9858093261719);
    v1346.bezierCurveTo(p978 * 165.633544921875, p978 * 320.9858093261719, p978 * 138.633544921875, p978 * 307.9858093261719, p978 * 135.633544921875, p978 * 288.9858093261719);
    v1346.bezierCurveTo(p978 * 110.633544921875, p978 * 318.9858093261719, p978 * 68.633544921875, p978 * 323.9858093261719, p978 * 49.633544921875, p978 * 320.9858093261719);
    v1346.bezierCurveTo(p978 * 88.633544921875, p978 * 308.9858093261719, p978 * 108.633544921875, p978 * 284.9858093261719, p978 * 118.633544921875, p978 * 258.9858093261719);
    v1346.bezierCurveTo(p978 * 86.633544921875, p978 * 264.9858093261719, p978 * 75.633544921875, p978 * 310.9858093261719, p978 * 19.633544921875, p978 * 304.9858093261719);
    v1346.bezierCurveTo(p978 * 54.633544921875, p978 * 276.9858093261719, p978 * 59.633544921875, p978 * 214.98580932617188, p978 * 105.633544921875, p978 * 205.98580932617188);
    v1346.bezierCurveTo(p978 * 14.633544921875, p978 * 201.98580932617188, p978 * 24.633544921875, p978 * 141.98580932617188, p978 * 25.633544921875, p978 * 82.98580932617188);
    v1346.bezierCurveTo(p978 * 49.633544921875, p978 * 168.98580932617188, p978 * 87.633544921875, p978 * 141.98580932617188, p978 * 112.633544921875, p978 * 123.98580932617188);
    v1346.bezierCurveTo(p978 * 95.633544921875, p978 * 75.98580932617188, p978 * 70.633544921875, p978 * 68.98580932617188, p978 * 35.633544921875, p978 * 50.985809326171875);
    v1346.bezierCurveTo(p978 * 70.633544921875, p978 * 53.985809326171875, p978 * 102.633544921875, p978 * 65.98580932617188, p978 * 125.633544921875, p978 * 84.98580932617188);
    v1346.bezierCurveTo(p978 * 133.633544921875, p978 * 69.98580932617188, p978 * 166.633544921875, p978 * 42.985809326171875, p978 * 176.633544921875, p978 * 21.985809326171875);
    v1346.bezierCurveTo(p978 * 185.633544921875, p978 * 49.985809326171875, p978 * 168.633544921875, p978 * 95.98580932617188, p978 * 191.633544921875, p978 * 121.98580932617188);
    v1346.closePath();
    f88(v1346, p979[0]);
    v1346.globalAlpha = 1;
    v1346.translate(p978 * -4, p978 * -5);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 191.633544921875, p978 * 123.98580932617188);
    v1346.bezierCurveTo(p978 * 215.633544921875, p978 * 85.98580932617188, p978 * 187.633544921875, p978 * 71.98580932617188, p978 * 202.633544921875, p978 * 19.985809326171875);
    v1346.bezierCurveTo(p978 * 231.633544921875, p978 * 68.98580932617188, p978 * 253.633544921875, p978 * 71.98580932617188, p978 * 256.633544921875, p978 * 93.98580932617188);
    v1346.bezierCurveTo(p978 * 306.633544921875, p978 * 64.98580932617188, p978 * 319.633544921875, p978 * 61.985809326171875, p978 * 350.633544921875, p978 * 58.985809326171875);
    v1346.bezierCurveTo(p978 * 280.633544921875, p978 * 86.98580932617188, p978 * 281.633544921875, p978 * 106.98580932617188, p978 * 268.633544921875, p978 * 130.98580932617188);
    v1346.bezierCurveTo(p978 * 295.633544921875, p978 * 158.98580932617188, p978 * 328.633544921875, p978 * 155.98580932617188, p978 * 353.633544921875, p978 * 90.98580932617188);
    v1346.bezierCurveTo(p978 * 371.633544921875, p978 * 158.98580932617188, p978 * 337.633544921875, p978 * 210.98580932617188, p978 * 286.633544921875, p978 * 209.98580932617188);
    v1346.bezierCurveTo(p978 * 323.633544921875, p978 * 230.98580932617188, p978 * 317.633544921875, p978 * 274.9858093261719, p978 * 356.633544921875, p978 * 305.9858093261719);
    v1346.bezierCurveTo(p978 * 288.633544921875, p978 * 297.9858093261719, p978 * 288.633544921875, p978 * 265.9858093261719, p978 * 275.633544921875, p978 * 266.9858093261719);
    v1346.bezierCurveTo(p978 * 280.633544921875, p978 * 294.9858093261719, p978 * 315.633544921875, p978 * 306.9858093261719, p978 * 336.633544921875, p978 * 316.9858093261719);
    v1346.bezierCurveTo(p978 * 295.633544921875, p978 * 318.9858093261719, p978 * 264.633544921875, p978 * 302.9858093261719, p978 * 254.633544921875, p978 * 289.9858093261719);
    v1346.bezierCurveTo(p978 * 252.633544921875, p978 * 301.9858093261719, p978 * 224.633544921875, p978 * 315.9858093261719, p978 * 201.633544921875, p978 * 356.9858093261719);
    v1346.bezierCurveTo(p978 * 195.633544921875, p978 * 313.9858093261719, p978 * 195.633544921875, p978 * 308.9858093261719, p978 * 196.633544921875, p978 * 307.9858093261719);
    v1346.bezierCurveTo(p978 * 197.633544921875, p978 * 289.9858093261719, p978 * 207.633544921875, p978 * 283.9858093261719, p978 * 195.633544921875, p978 * 258.9858093261719);
    v1346.bezierCurveTo(p978 * 182.633544921875, p978 * 282.9858093261719, p978 * 190.633544921875, p978 * 287.9858093261719, p978 * 193.633544921875, p978 * 297.9858093261719);
    v1346.bezierCurveTo(p978 * 195.633544921875, p978 * 306.9858093261719, p978 * 191.633544921875, p978 * 334.9858093261719, p978 * 187.633544921875, p978 * 354.9858093261719);
    v1346.bezierCurveTo(p978 * 165.633544921875, p978 * 320.9858093261719, p978 * 138.633544921875, p978 * 307.9858093261719, p978 * 135.633544921875, p978 * 288.9858093261719);
    v1346.bezierCurveTo(p978 * 110.633544921875, p978 * 318.9858093261719, p978 * 68.633544921875, p978 * 323.9858093261719, p978 * 49.633544921875, p978 * 320.9858093261719);
    v1346.bezierCurveTo(p978 * 88.633544921875, p978 * 308.9858093261719, p978 * 108.633544921875, p978 * 284.9858093261719, p978 * 118.633544921875, p978 * 258.9858093261719);
    v1346.bezierCurveTo(p978 * 86.633544921875, p978 * 264.9858093261719, p978 * 75.633544921875, p978 * 310.9858093261719, p978 * 19.633544921875, p978 * 304.9858093261719);
    v1346.bezierCurveTo(p978 * 54.633544921875, p978 * 276.9858093261719, p978 * 59.633544921875, p978 * 214.98580932617188, p978 * 105.633544921875, p978 * 205.98580932617188);
    v1346.bezierCurveTo(p978 * 14.633544921875, p978 * 201.98580932617188, p978 * 24.633544921875, p978 * 141.98580932617188, p978 * 25.633544921875, p978 * 82.98580932617188);
    v1346.bezierCurveTo(p978 * 49.633544921875, p978 * 168.98580932617188, p978 * 87.633544921875, p978 * 141.98580932617188, p978 * 112.633544921875, p978 * 123.98580932617188);
    v1346.bezierCurveTo(p978 * 95.633544921875, p978 * 75.98580932617188, p978 * 70.633544921875, p978 * 68.98580932617188, p978 * 35.633544921875, p978 * 50.985809326171875);
    v1346.bezierCurveTo(p978 * 70.633544921875, p978 * 53.985809326171875, p978 * 102.633544921875, p978 * 65.98580932617188, p978 * 125.633544921875, p978 * 84.98580932617188);
    v1346.bezierCurveTo(p978 * 133.633544921875, p978 * 69.98580932617188, p978 * 166.633544921875, p978 * 42.985809326171875, p978 * 176.633544921875, p978 * 21.985809326171875);
    v1346.bezierCurveTo(p978 * 185.633544921875, p978 * 49.985809326171875, p978 * 168.633544921875, p978 * 95.98580932617188, p978 * 191.633544921875, p978 * 121.98580932617188);
    v1346.closePath();
    f88(v1346, vVVUndefined14, p979[1], p978 * 12);
    v1346.translate(p978 * -1, p978 * 0);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 270.633544921875, p978 * 88.98580932617188);
    v1346.bezierCurveTo(p978 * 296.633544921875, p978 * 65.98580932617188, p978 * 318.633544921875, p978 * 62.985809326171875, p978 * 348.633544921875, p978 * 57.985809326171875);
    v1346.bezierCurveTo(p978 * 309.633544921875, p978 * 76.98580932617188, p978 * 291.633544921875, p978 * 88.98580932617188, p978 * 280.633544921875, p978 * 99.98580932617188);
    v1346.closePath();
    f88(v1346, p979[4], p979[5], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 275.633544921875, p978 * 281.9858093261719);
    v1346.bezierCurveTo(p978 * 303.633544921875, p978 * 308.9858093261719, p978 * 321.633544921875, p978 * 308.9858093261719, p978 * 335.633544921875, p978 * 315.9858093261719);
    v1346.bezierCurveTo(p978 * 305.633544921875, p978 * 320.9858093261719, p978 * 278.633544921875, p978 * 307.9858093261719, p978 * 264.633544921875, p978 * 293.9858093261719);
    v1346.closePath();
    f88(v1346, p979[4], p979[5], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 124.633544921875, p978 * 291.9858093261719);
    v1346.bezierCurveTo(p978 * 106.633544921875, p978 * 316.9858093261719, p978 * 72.633544921875, p978 * 325.9858093261719, p978 * 53.633544921875, p978 * 319.9858093261719);
    v1346.bezierCurveTo(p978 * 83.633544921875, p978 * 308.9858093261719, p978 * 97.633544921875, p978 * 298.9858093261719, p978 * 112.633544921875, p978 * 284.9858093261719);
    v1346.closePath();
    f88(v1346, p979[4], p979[5], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 113.633544921875, p978 * 80.98580932617188);
    v1346.bezierCurveTo(p978 * 91.633544921875, p978 * 54.985809326171875, p978 * 72.633544921875, p978 * 56.985809326171875, p978 * 36.633544921875, p978 * 49.985809326171875);
    v1346.bezierCurveTo(p978 * 87.633544921875, p978 * 72.98580932617188, p978 * 95.633544921875, p978 * 82.98580932617188, p978 * 106.633544921875, p978 * 96.98580932617188);
    v1346.closePath();
    f88(v1346, p979[4], p979[5], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 202.633544921875, p978 * 20.985809326171875);
    v1346.bezierCurveTo(p978 * 219.633544921875, p978 * 49.985809326171875, p978 * 259.633544921875, p978 * 80.98580932617188, p978 * 255.633544921875, p978 * 92.98580932617188);
    v1346.bezierCurveTo(p978 * 268.633544921875, p978 * 86.98580932617188, p978 * 265.633544921875, p978 * 87.98580932617188, p978 * 275.633544921875, p978 * 82.98580932617188);
    v1346.bezierCurveTo(p978 * 283.633544921875, p978 * 87.98580932617188, p978 * 283.633544921875, p978 * 87.98580932617188, p978 * 291.633544921875, p978 * 92.98580932617188);
    v1346.bezierCurveTo(p978 * 269.633544921875, p978 * 116.98580932617188, p978 * 270.633544921875, p978 * 124.98580932617188, p978 * 267.633544921875, p978 * 130.98580932617188);
    v1346.bezierCurveTo(p978 * 307.633544921875, p978 * 168.98580932617188, p978 * 339.633544921875, p978 * 132.98580932617188, p978 * 352.633544921875, p978 * 93.98580932617188);
    v1346.bezierCurveTo(p978 * 366.633544921875, p978 * 145.98580932617188, p978 * 345.633544921875, p978 * 207.98580932617188, p978 * 286.633544921875, p978 * 208.98580932617188);
    v1346.bezierCurveTo(p978 * 315.633544921875, p978 * 223.98580932617188, p978 * 327.633544921875, p978 * 287.9858093261719, p978 * 355.633544921875, p978 * 305.9858093261719);
    v1346.bezierCurveTo(p978 * 293.633544921875, p978 * 298.9858093261719, p978 * 293.633544921875, p978 * 275.9858093261719, p978 * 276.633544921875, p978 * 266.9858093261719);
    v1346.bezierCurveTo(p978 * 274.633544921875, p978 * 282.9858093261719, p978 * 287.633544921875, p978 * 288.9858093261719, p978 * 295.633544921875, p978 * 296.9858093261719);
    v1346.bezierCurveTo(p978 * 287.133544921875, p978 * 302.4858093261719, p978 * 287.133544921875, p978 * 302.4858093261719, p978 * 278.633544921875, p978 * 307.9858093261719);
    v1346.bezierCurveTo(p978 * 261.633544921875, p978 * 297.9858093261719, p978 * 258.633544921875, p978 * 293.9858093261719, p978 * 255.633544921875, p978 * 290.9858093261719);
    v1346.bezierCurveTo(p978 * 249.633544921875, p978 * 301.9858093261719, p978 * 225.633544921875, p978 * 320.9858093261719, p978 * 202.633544921875, p978 * 354.9858093261719);
    v1346.bezierCurveTo(p978 * 195.633544921875, p978 * 318.9858093261719, p978 * 196.633544921875, p978 * 306.9858093261719, p978 * 198.633544921875, p978 * 300.9858093261719);
    v1346.bezierCurveTo(p978 * 209.633544921875, p978 * 268.9858093261719, p978 * 199.633544921875, p978 * 266.9858093261719, p978 * 195.633544921875, p978 * 256.9858093261719);
    v1346.bezierCurveTo(p978 * 183.633544921875, p978 * 274.9858093261719, p978 * 182.633544921875, p978 * 281.9858093261719, p978 * 192.633544921875, p978 * 305.9858093261719);
    v1346.bezierCurveTo(p978 * 194.633544921875, p978 * 317.9858093261719, p978 * 191.633544921875, p978 * 336.9858093261719, p978 * 186.633544921875, p978 * 351.9858093261719);
    v1346.bezierCurveTo(p978 * 166.633544921875, p978 * 318.9858093261719, p978 * 141.633544921875, p978 * 303.9858093261719, p978 * 136.633544921875, p978 * 286.9858093261719);
    v1346.bezierCurveTo(p978 * 122.633544921875, p978 * 303.9858093261719, p978 * 115.633544921875, p978 * 305.9858093261719, p978 * 109.633544921875, p978 * 306.9858093261719);
    v1346.bezierCurveTo(p978 * 101.133544921875, p978 * 301.9858093261719, p978 * 94.633544921875, p978 * 297.9858093261719, p978 * 92.633544921875, p978 * 296.9858093261719);
    v1346.bezierCurveTo(p978 * 116.633544921875, p978 * 277.9858093261719, p978 * 116.633544921875, p978 * 266.9858093261719, p978 * 119.633544921875, p978 * 257.9858093261719);
    v1346.bezierCurveTo(p978 * 107.633544921875, p978 * 257.9858093261719, p978 * 65.633544921875, p978 * 308.9858093261719, p978 * 24.633544921875, p978 * 303.9858093261719);
    v1346.bezierCurveTo(p978 * 51.633544921875, p978 * 275.9858093261719, p978 * 64.633544921875, p978 * 220.98580932617188, p978 * 108.633544921875, p978 * 205.98580932617188);
    v1346.bezierCurveTo(p978 * 14.633544921875, p978 * 198.98580932617188, p978 * 26.633544921875, p978 * 142.98580932617188, p978 * 25.633544921875, p978 * 86.98580932617188);
    v1346.bezierCurveTo(p978 * 41.633544921875, p978 * 155.98580932617188, p978 * 81.633544921875, p978 * 148.98580932617188, p978 * 113.633544921875, p978 * 124.98580932617188);
    v1346.bezierCurveTo(p978 * 102.633544921875, p978 * 93.98580932617188, p978 * 95.633544921875, p978 * 88.98580932617188, p978 * 89.633544921875, p978 * 81.98580932617188);
    v1346.bezierCurveTo(p978 * 97.633544921875, p978 * 76.48580932617188, p978 * 97.633544921875, p978 * 76.48580932617188, p978 * 105.633544921875, p978 * 70.98580932617188);
    v1346.bezierCurveTo(p978 * 120.633544921875, p978 * 78.98580932617188, p978 * 121.633544921875, p978 * 81.98580932617188, p978 * 124.633544921875, p978 * 86.98580932617188);
    v1346.bezierCurveTo(p978 * 132.633544921875, p978 * 71.98580932617188, p978 * 160.633544921875, p978 * 56.985809326171875, p978 * 175.633544921875, p978 * 23.985809326171875);
    v1346.bezierCurveTo(p978 * 182.633544921875, p978 * 53.985809326171875, p978 * 170.633544921875, p978 * 102.98580932617188, p978 * 191.633544921875, p978 * 125.98580932617188);
    v1346.bezierCurveTo(p978 * 214.633544921875, p978 * 89.98580932617188, p978 * 192.633544921875, p978 * 58.985809326171875, p978 * 202.633544921875, p978 * 20.985809326171875);
    v1346.closePath();
    f88(v1346, p979[2], p979[3], p978 * 5);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 203.633544921875, p978 * 21.985809326171875);
    v1346.bezierCurveTo(p978 * 223.633544921875, p978 * 63.985809326171875, p978 * 227.633544921875, p978 * 72.98580932617188, p978 * 235.633544921875, p978 * 98.98580932617188);
    v1346.bezierCurveTo(p978 * 241.633544921875, p978 * 123.98580932617188, p978 * 225.633544921875, p978 * 138.98580932617188, p978 * 196.633544921875, p978 * 122.98580932617188);
    v1346.bezierCurveTo(p978 * 213.633544921875, p978 * 93.98580932617188, p978 * 199.633544921875, p978 * 49.985809326171875, p978 * 203.633544921875, p978 * 26.985809326171875);
    v1346.closePath();
    f88(v1346, p979[3]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 175.633544921875, p978 * 25.985809326171875);
    v1346.bezierCurveTo(p978 * 176.633544921875, p978 * 51.985809326171875, p978 * 171.633544921875, p978 * 88.98580932617188, p978 * 186.633544921875, p978 * 121.98580932617188);
    v1346.bezierCurveTo(p978 * 156.633544921875, p978 * 144.98580932617188, p978 * 139.633544921875, p978 * 120.98580932617188, p978 * 147.633544921875, p978 * 97.98580932617188);
    v1346.bezierCurveTo(p978 * 152.633544921875, p978 * 77.98580932617188, p978 * 162.633544921875, p978 * 60.985809326171875, p978 * 176.633544921875, p978 * 25.985809326171875);
    v1346.closePath();
    f88(v1346, p979[3]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 26.633544921875, p978 * 96.98580932617188);
    v1346.bezierCurveTo(p978 * 38.633544921875, p978 * 151.98580932617188, p978 * 61.633544921875, p978 * 161.98580932617188, p978 * 88.633544921875, p978 * 168.98580932617188);
    v1346.bezierCurveTo(p978 * 117.633544921875, p978 * 177.98580932617188, p978 * 113.633544921875, p978 * 185.98580932617188, p978 * 106.633544921875, p978 * 204.98580932617188);
    v1346.bezierCurveTo(p978 * 32.633544921875, p978 * 204.98580932617188, p978 * 25.633544921875, p978 * 149.98580932617188, p978 * 25.633544921875, p978 * 97.98580932617188);
    v1346.closePath();
    f88(v1346, p979[3]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 351.633544921875, p978 * 99.98580932617188);
    v1346.bezierCurveTo(p978 * 365.633544921875, p978 * 161.98580932617188, p978 * 333.633544921875, p978 * 203.98580932617188, p978 * 287.633544921875, p978 * 207.98580932617188);
    v1346.bezierCurveTo(p978 * 255.633544921875, p978 * 208.98580932617188, p978 * 266.633544921875, p978 * 174.98580932617188, p978 * 285.633544921875, p978 * 176.98580932617188);
    v1346.bezierCurveTo(p978 * 313.633544921875, p978 * 178.98580932617188, p978 * 348.633544921875, p978 * 135.98580932617188, p978 * 353.633544921875, p978 * 99.98580932617188);
    v1346.closePath();
    f88(v1346, p979[3]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 350.633544921875, p978 * 302.9858093261719);
    v1346.bezierCurveTo(p978 * 310.633544921875, p978 * 280.9858093261719, p978 * 314.633544921875, p978 * 244.98580932617188, p978 * 292.633544921875, p978 * 230.98580932617188);
    v1346.bezierCurveTo(p978 * 272.633544921875, p978 * 215.98580932617188, p978 * 263.633544921875, p978 * 222.98580932617188, p978 * 256.633544921875, p978 * 236.98580932617188);
    v1346.bezierCurveTo(p978 * 251.633544921875, p978 * 249.98580932617188, p978 * 264.633544921875, p978 * 255.98580932617188, p978 * 279.633544921875, p978 * 268.9858093261719);
    v1346.bezierCurveTo(p978 * 306.633544921875, p978 * 295.9858093261719, p978 * 325.633544921875, p978 * 299.9858093261719, p978 * 349.633544921875, p978 * 302.9858093261719);
    v1346.closePath();
    f88(v1346, p979[3]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 95.633544921875, p978 * 224.98580932617188);
    v1346.bezierCurveTo(p978 * 64.633544921875, p978 * 245.98580932617188, p978 * 62.633544921875, p978 * 280.9858093261719, p978 * 32.633544921875, p978 * 303.9858093261719);
    v1346.bezierCurveTo(p978 * 59.633544921875, p978 * 301.9858093261719, p978 * 102.633544921875, p978 * 260.9858093261719, p978 * 116.633544921875, p978 * 255.98580932617188);
    v1346.bezierCurveTo(p978 * 139.633544921875, p978 * 229.98580932617188, p978 * 108.633544921875, p978 * 209.98580932617188, p978 * 97.633544921875, p978 * 224.98580932617188);
    v1346.closePath();
    f88(v1346, p979[3]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 195.633544921875, p978 * 253.98580932617188);
    v1346.bezierCurveTo(p978 * 209.633544921875, p978 * 282.9858093261719, p978 * 205.633544921875, p978 * 278.9858093261719, p978 * 199.633544921875, p978 * 307.9858093261719);
    v1346.bezierCurveTo(p978 * 198.633544921875, p978 * 332.9858093261719, p978 * 201.633544921875, p978 * 340.9858093261719, p978 * 202.633544921875, p978 * 348.9858093261719);
    v1346.bezierCurveTo(p978 * 215.633544921875, p978 * 313.9858093261719, p978 * 226.633544921875, p978 * 291.9858093261719, p978 * 235.633544921875, p978 * 270.9858093261719);
    v1346.bezierCurveTo(p978 * 243.633544921875, p978 * 247.98580932617188, p978 * 219.633544921875, p978 * 235.98580932617188, p978 * 196.633544921875, p978 * 252.98580932617188);
    v1346.closePath();
    f88(v1346, p979[3]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 195.633544921875, p978 * 251.98580932617188);
    v1346.bezierCurveTo(p978 * 176.633544921875, p978 * 275.9858093261719, p978 * 182.633544921875, p978 * 285.9858093261719, p978 * 191.633544921875, p978 * 308.9858093261719);
    v1346.bezierCurveTo(p978 * 194.633544921875, p978 * 318.9858093261719, p978 * 190.633544921875, p978 * 334.9858093261719, p978 * 186.633544921875, p978 * 348.9858093261719);
    v1346.bezierCurveTo(p978 * 175.633544921875, p978 * 307.9858093261719, p978 * 157.633544921875, p978 * 291.9858093261719, p978 * 155.633544921875, p978 * 272.9858093261719);
    v1346.bezierCurveTo(p978 * 150.633544921875, p978 * 243.98580932617188, p978 * 170.633544921875, p978 * 236.98580932617188, p978 * 195.633544921875, p978 * 251.98580932617188);
    v1346.closePath();
    f88(v1346, p979[3]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 316, p978 * 186.8020782470703);
    v1346.bezierCurveTo(p978 * 315, p978 * 173.8020782470703, p978 * 298, p978 * 177.8020782470703, p978 * 293, p978 * 183.8020782470703);
    v1346.bezierCurveTo(p978 * 285, p978 * 195.8020782470703, p978 * 314, p978 * 197.8020782470703, p978 * 315, p978 * 187.8020782470703);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 340, p978 * 157.8020782470703);
    v1346.bezierCurveTo(p978 * 327, p978 * 153.8020782470703, p978 * 321, p978 * 168.8020782470703, p978 * 330, p978 * 174.8020782470703);
    v1346.bezierCurveTo(p978 * 341, p978 * 178.8020782470703, p978 * 347, p978 * 161.8020782470703, p978 * 341, p978 * 157.8020782470703);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 349, p978 * 136.8020782470703);
    v1346.bezierCurveTo(p978 * 343, p978 * 135.8020782470703, p978 * 342, p978 * 139.8020782470703, p978 * 341, p978 * 147.8020782470703);
    v1346.bezierCurveTo(p978 * 343, p978 * 155.8020782470703, p978 * 353, p978 * 143.8020782470703, p978 * 349, p978 * 137.8020782470703);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 278.75, p978 * 246.4375);
    v1346.bezierCurveTo(p978 * 288.75, p978 * 242.4375, p978 * 301.75, p978 * 248.4375, p978 * 298.75, p978 * 262.4375);
    v1346.bezierCurveTo(p978 * 293.75, p978 * 271.4375, p978 * 287.75, p978 * 271.4375, p978 * 278.75, p978 * 262.4375);
    v1346.bezierCurveTo(p978 * 271.75, p978 * 255.4375, p978 * 274.75, p978 * 250.4375, p978 * 277.75, p978 * 247.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 310.75, p978 * 277.4375);
    v1346.bezierCurveTo(p978 * 319.75, p978 * 280.4375, p978 * 322.75, p978 * 283.4375, p978 * 321.75, p978 * 289.4375);
    v1346.bezierCurveTo(p978 * 319.75, p978 * 295.4375, p978 * 313.75, p978 * 291.4375, p978 * 308.75, p978 * 288.4375);
    v1346.bezierCurveTo(p978 * 301.75, p978 * 281.4375, p978 * 306.75, p978 * 277.4375, p978 * 309.75, p978 * 277.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 217.75, p978 * 257.4375);
    v1346.bezierCurveTo(p978 * 227.75, p978 * 269.4375, p978 * 220.75, p978 * 281.4375, p978 * 212.75, p978 * 280.4375);
    v1346.bezierCurveTo(p978 * 206.75, p978 * 279.4375, p978 * 206.75, p978 * 269.4375, p978 * 204.75, p978 * 260.4375);
    v1346.bezierCurveTo(p978 * 204.75, p978 * 254.4375, p978 * 211.75, p978 * 253.4375, p978 * 216.75, p978 * 256.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 211.75, p978 * 289.4375);
    v1346.bezierCurveTo(p978 * 219.75, p978 * 292.4375, p978 * 213.75, p978 * 306.4375, p978 * 206.75, p978 * 307.4375);
    v1346.bezierCurveTo(p978 * 199.75, p978 * 303.4375, p978 * 209.75, p978 * 287.4375, p978 * 210.75, p978 * 289.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 171.75, p978 * 256.4375);
    v1346.bezierCurveTo(p978 * 162.75, p978 * 273.4375, p978 * 166.75, p978 * 278.4375, p978 * 175.75, p978 * 280.4375);
    v1346.bezierCurveTo(p978 * 183.75, p978 * 278.4375, p978 * 185.75, p978 * 257.4375, p978 * 182.75, p978 * 255.4375);
    v1346.bezierCurveTo(p978 * 176.75, p978 * 251.4375, p978 * 172.75, p978 * 253.4375, p978 * 172.75, p978 * 256.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 175.75, p978 * 289.9375);
    v1346.bezierCurveTo(p978 * 183.75, p978 * 287.9375, p978 * 186.75, p978 * 301.9375, p978 * 182.75, p978 * 305.9375);
    v1346.bezierCurveTo(p978 * 176.75, p978 * 307.9375, p978 * 171.75, p978 * 292.9375, p978 * 174.75, p978 * 290.9375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 205.75, p978 * 314.4375);
    v1346.bezierCurveTo(p978 * 209.75, p978 * 316.4375, p978 * 210.75, p978 * 320.4375, p978 * 206.75, p978 * 323.4375);
    v1346.bezierCurveTo(p978 * 201.75, p978 * 324.4375, p978 * 201.75, p978 * 314.4375, p978 * 204.75, p978 * 314.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 186.75, p978 * 313.4375);
    v1346.bezierCurveTo(p978 * 181.75, p978 * 315.4375, p978 * 180.75, p978 * 321.4375, p978 * 185.75, p978 * 326.4375);
    v1346.bezierCurveTo(p978 * 190.75, p978 * 327.4375, p978 * 190.75, p978 * 313.4375, p978 * 187.75, p978 * 314.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 103.75, p978 * 244.4375);
    v1346.bezierCurveTo(p978 * 96.75, p978 * 239.4375, p978 * 83.75, p978 * 240.4375, p978 * 81.75, p978 * 255.4375);
    v1346.bezierCurveTo(p978 * 80.75, p978 * 264.4375, p978 * 89.75, p978 * 269.4375, p978 * 99.75, p978 * 260.4375);
    v1346.bezierCurveTo(p978 * 106.75, p978 * 254.4375, p978 * 106.75, p978 * 250.4375, p978 * 104.75, p978 * 245.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 86.75, p978 * 182.4375);
    v1346.bezierCurveTo(p978 * 82.75, p978 * 170.4375, p978 * 66.75, p978 * 169.4375, p978 * 61.75, p978 * 181.4375);
    v1346.bezierCurveTo(p978 * 58.75, p978 * 187.4375, p978 * 68.75, p978 * 194.4375, p978 * 75.75, p978 * 192.4375);
    v1346.bezierCurveTo(p978 * 83.75, p978 * 192.4375, p978 * 86.75, p978 * 187.4375, p978 * 86.75, p978 * 183.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 44.75, p978 * 152.4375);
    v1346.bezierCurveTo(p978 * 55.75, p978 * 159.4375, p978 * 54.75, p978 * 170.4375, p978 * 46.75, p978 * 171.4375);
    v1346.bezierCurveTo(p978 * 39.75, p978 * 170.4375, p978 * 34.75, p978 * 151.4375, p978 * 43.75, p978 * 152.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 31.75, p978 * 130.4375);
    v1346.bezierCurveTo(p978 * 35.75, p978 * 132.4375, p978 * 35.75, p978 * 131.4375, p978 * 37.75, p978 * 137.4375);
    v1346.bezierCurveTo(p978 * 36.75, p978 * 144.4375, p978 * 36.75, p978 * 145.4375, p978 * 33.75, p978 * 144.4375);
    v1346.bezierCurveTo(p978 * 26.75, p978 * 137.4375, p978 * 29.75, p978 * 131.4375, p978 * 31.75, p978 * 130.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 69.75, p978 * 274.4375);
    v1346.bezierCurveTo(p978 * 62.75, p978 * 272.4375, p978 * 59.75, p978 * 277.4375, p978 * 57.75, p978 * 284.4375);
    v1346.bezierCurveTo(p978 * 56.75, p978 * 290.4375, p978 * 63.75, p978 * 289.4375, p978 * 71.75, p978 * 282.4375);
    v1346.bezierCurveTo(p978 * 75.75, p978 * 277.4375, p978 * 72.75, p978 * 275.4375, p978 * 69.75, p978 * 274.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 165.75, p978 * 95.4375);
    v1346.bezierCurveTo(p978 * 177.75, p978 * 97.4375, p978 * 182.75, p978 * 115.4375, p978 * 173.75, p978 * 121.4375);
    v1346.bezierCurveTo(p978 * 164.75, p978 * 126.4375, p978 * 149.75, p978 * 102.4375, p978 * 164.75, p978 * 96.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 216.75, p978 * 94.4375);
    v1346.bezierCurveTo(p978 * 227.75, p978 * 99.4375, p978 * 223.75, p978 * 122.4375, p978 * 210.75, p978 * 119.4375);
    v1346.bezierCurveTo(p978 * 203.75, p978 * 115.4375, p978 * 207.75, p978 * 93.4375, p978 * 216.75, p978 * 94.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 211.75, p978 * 68.4375);
    v1346.bezierCurveTo(p978 * 218.75, p978 * 69.4375, p978 * 220.75, p978 * 77.4375, p978 * 216.75, p978 * 83.4375);
    v1346.bezierCurveTo(p978 * 208.75, p978 * 89.4375, p978 * 205.75, p978 * 68.4375, p978 * 210.75, p978 * 68.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 169.75, p978 * 71.4375);
    v1346.bezierCurveTo(p978 * 162.75, p978 * 72.4375, p978 * 159.75, p978 * 83.4375, p978 * 167.75, p978 * 88.4375);
    v1346.bezierCurveTo(p978 * 174.75, p978 * 90.4375, p978 * 174.75, p978 * 72.4375, p978 * 170.75, p978 * 71.4375);
    v1346.closePath();
    f88(v1346, p979[6], p979[7], p978 * 4);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 193.75, p978 * 160.4375);
    v1346.bezierCurveTo(p978 * 215.75, p978 * 168.4375, p978 * 224.75, p978 * 180.4375, p978 * 229.75, p978 * 193.4375);
    v1346.bezierCurveTo(p978 * 223.75, p978 * 211.4375, p978 * 205.75, p978 * 225.4375, p978 * 193.75, p978 * 229.4375);
    v1346.bezierCurveTo(p978 * 167.75, p978 * 217.4375, p978 * 161.75, p978 * 205.4375, p978 * 156.75, p978 * 192.4375);
    v1346.bezierCurveTo(p978 * 164.75, p978 * 175.4375, p978 * 176.75, p978 * 166.4375, p978 * 192.75, p978 * 160.4375);
    v1346.closePath();
    f88(v1346, p979[8], p979[9], p978 * 3);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 189.1999969482422, p978 * 182.61249923706055);
    v1346.bezierCurveTo(p978 * 190.1999969482422, p978 * 184.11249923706055, p978 * 190.1999969482422, p978 * 184.11249923706055, p978 * 191.1999969482422, p978 * 185.61249923706055);
    v1346.bezierCurveTo(p978 * 192.1999969482422, p978 * 180.61249923706055, p978 * 192.1999969482422, p978 * 180.61249923706055, p978 * 193.1999969482422, p978 * 175.61249923706055);
    v1346.bezierCurveTo(p978 * 195.6999969482422, p978 * 177.11249923706055, p978 * 195.6999969482422, p978 * 177.11249923706055, p978 * 198.1999969482422, p978 * 178.61249923706055);
    v1346.bezierCurveTo(p978 * 198.1999969482422, p978 * 181.11249923706055, p978 * 198.1999969482422, p978 * 181.11249923706055, p978 * 198.1999969482422, p978 * 183.61249923706055);
    v1346.bezierCurveTo(p978 * 201.6999969482422, p978 * 181.11249923706055, p978 * 201.6999969482422, p978 * 181.11249923706055, p978 * 205.1999969482422, p978 * 178.61249923706055);
    v1346.bezierCurveTo(p978 * 206.6999969482422, p978 * 180.61249923706055, p978 * 206.6999969482422, p978 * 180.61249923706055, p978 * 208.1999969482422, p978 * 182.61249923706055);
    v1346.bezierCurveTo(p978 * 206.1999969482422, p978 * 185.61249923706055, p978 * 206.1999969482422, p978 * 185.61249923706055, p978 * 204.1999969482422, p978 * 188.61249923706055);
    v1346.bezierCurveTo(p978 * 208.6999969482422, p978 * 188.61249923706055, p978 * 208.6999969482422, p978 * 188.61249923706055, p978 * 213.1999969482422, p978 * 188.61249923706055);
    v1346.bezierCurveTo(p978 * 213.1999969482422, p978 * 191.11249923706055, p978 * 213.1999969482422, p978 * 191.11249923706055, p978 * 213.1999969482422, p978 * 193.61249923706055);
    v1346.bezierCurveTo(p978 * 209.6999969482422, p978 * 194.61249923706055, p978 * 209.6999969482422, p978 * 194.61249923706055, p978 * 206.1999969482422, p978 * 195.61249923706055);
    v1346.bezierCurveTo(p978 * 210.1999969482422, p978 * 198.61249923706055, p978 * 210.1999969482422, p978 * 198.61249923706055, p978 * 214.1999969482422, p978 * 201.61249923706055);
    v1346.bezierCurveTo(p978 * 212.1999969482422, p978 * 203.61249923706055, p978 * 212.1999969482422, p978 * 203.61249923706055, p978 * 210.1999969482422, p978 * 205.61249923706055);
    v1346.bezierCurveTo(p978 * 207.1999969482422, p978 * 204.11249923706055, p978 * 207.1999969482422, p978 * 204.11249923706055, p978 * 204.1999969482422, p978 * 202.61249923706055);
    v1346.bezierCurveTo(p978 * 205.6999969482422, p978 * 207.61249923706055, p978 * 205.6999969482422, p978 * 207.61249923706055, p978 * 207.1999969482422, p978 * 212.61249923706055);
    v1346.bezierCurveTo(p978 * 204.6999969482422, p978 * 213.61249923706055, p978 * 204.6999969482422, p978 * 213.61249923706055, p978 * 202.1999969482422, p978 * 214.61249923706055);
    v1346.bezierCurveTo(p978 * 200.1999969482422, p978 * 210.61249923706055, p978 * 200.1999969482422, p978 * 210.61249923706055, p978 * 198.1999969482422, p978 * 206.61249923706055);
    v1346.bezierCurveTo(p978 * 196.6999969482422, p978 * 211.61249923706055, p978 * 196.6999969482422, p978 * 211.61249923706055, p978 * 195.1999969482422, p978 * 216.61249923706055);
    v1346.bezierCurveTo(p978 * 192.6999969482422, p978 * 216.11249923706055, p978 * 192.6999969482422, p978 * 216.11249923706055, p978 * 190.1999969482422, p978 * 215.61249923706055);
    v1346.bezierCurveTo(p978 * 190.1999969482422, p978 * 211.61249923706055, p978 * 190.1999969482422, p978 * 211.61249923706055, p978 * 190.1999969482422, p978 * 207.61249923706055);
    v1346.bezierCurveTo(p978 * 186.1999969482422, p978 * 210.61249923706055, p978 * 186.1999969482422, p978 * 210.61249923706055, p978 * 182.1999969482422, p978 * 213.61249923706055);
    v1346.bezierCurveTo(p978 * 181.1999969482422, p978 * 211.11249923706055, p978 * 181.1999969482422, p978 * 211.11249923706055, p978 * 180.1999969482422, p978 * 208.61249923706055);
    v1346.bezierCurveTo(p978 * 183.1999969482422, p978 * 205.61249923706055, p978 * 183.1999969482422, p978 * 205.61249923706055, p978 * 186.1999969482422, p978 * 202.61249923706055);
    v1346.bezierCurveTo(p978 * 180.6999969482422, p978 * 203.11249923706055, p978 * 180.6999969482422, p978 * 203.11249923706055, p978 * 175.1999969482422, p978 * 203.61249923706055);
    v1346.bezierCurveTo(p978 * 174.6999969482422, p978 * 200.11249923706055, p978 * 174.6999969482422, p978 * 200.11249923706055, p978 * 174.1999969482422, p978 * 196.61249923706055);
    v1346.bezierCurveTo(p978 * 177.1999969482422, p978 * 195.61249923706055, p978 * 177.1999969482422, p978 * 195.61249923706055, p978 * 180.1999969482422, p978 * 194.61249923706055);
    v1346.bezierCurveTo(p978 * 177.1999969482422, p978 * 191.61249923706055, p978 * 177.1999969482422, p978 * 191.61249923706055, p978 * 174.1999969482422, p978 * 188.61249923706055);
    v1346.bezierCurveTo(p978 * 175.6999969482422, p978 * 187.11249923706055, p978 * 175.6999969482422, p978 * 187.11249923706055, p978 * 177.1999969482422, p978 * 185.61249923706055);
    v1346.bezierCurveTo(p978 * 180.6999969482422, p978 * 187.11249923706055, p978 * 180.6999969482422, p978 * 187.11249923706055, p978 * 184.1999969482422, p978 * 188.61249923706055);
    v1346.bezierCurveTo(p978 * 182.6999969482422, p978 * 183.61249923706055, p978 * 182.6999969482422, p978 * 183.61249923706055, p978 * 181.1999969482422, p978 * 178.61249923706055);
    v1346.bezierCurveTo(p978 * 183.1999969482422, p978 * 177.11249923706055, p978 * 183.1999969482422, p978 * 177.11249923706055, p978 * 185.1999969482422, p978 * 175.61249923706055);
    v1346.closePath();
    f88(v1346, p979[10]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 185.1999969482422, p978 * 173.8125);
    v1346.bezierCurveTo(p978 * 187.1999969482422, p978 * 179.3125, p978 * 187.1999969482422, p978 * 179.3125, p978 * 189.1999969482422, p978 * 184.8125);
    v1346.bezierCurveTo(p978 * 184.1999969482422, p978 * 181.8125, p978 * 184.1999969482422, p978 * 181.8125, p978 * 179.1999969482422, p978 * 178.8125);
    v1346.bezierCurveTo(p978 * 181.1999969482422, p978 * 175.8125, p978 * 182.1999969482422, p978 * 174.8125, p978 * 185.1999969482422, p978 * 173.8125);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 192.1999969482422, p978 * 173.61249542236328);
    v1346.bezierCurveTo(p978 * 194.1999969482422, p978 * 172.61249542236328, p978 * 196.1999969482422, p978 * 171.61249542236328, p978 * 199.1999969482422, p978 * 173.61249542236328);
    v1346.bezierCurveTo(p978 * 197.6999969482422, p978 * 179.61249542236328, p978 * 197.6999969482422, p978 * 179.61249542236328, p978 * 196.1999969482422, p978 * 185.61249542236328);
    v1346.bezierCurveTo(p978 * 194.1999969482422, p978 * 179.61249542236328, p978 * 194.1999969482422, p978 * 179.61249542236328, p978 * 192.1999969482422, p978 * 173.61249542236328);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 205.1999969482422, p978 * 176.2125015258789);
    v1346.bezierCurveTo(p978 * 210.1999969482422, p978 * 178.2125015258789, p978 * 211.1999969482422, p978 * 179.2125015258789, p978 * 211.1999969482422, p978 * 181.2125015258789);
    v1346.bezierCurveTo(p978 * 206.6999969482422, p978 * 184.7125015258789, p978 * 206.6999969482422, p978 * 184.7125015258789, p978 * 202.1999969482422, p978 * 188.2125015258789);
    v1346.bezierCurveTo(p978 * 203.6999969482422, p978 * 182.2125015258789, p978 * 203.6999969482422, p978 * 182.2125015258789, p978 * 205.1999969482422, p978 * 176.2125015258789);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 214.1999969482422, p978 * 187.21249985694885);
    v1346.bezierCurveTo(p978 * 216.1999969482422, p978 * 191.21249985694885, p978 * 216.1999969482422, p978 * 192.21249985694885, p978 * 215.1999969482422, p978 * 195.21249985694885);
    v1346.bezierCurveTo(p978 * 206.1999969482422, p978 * 194.21249985694885, p978 * 205.1999969482422, p978 * 194.21249985694885, p978 * 205.1999969482422, p978 * 194.21249985694885);
    v1346.bezierCurveTo(p978 * 209.6999969482422, p978 * 190.71249985694885, p978 * 209.6999969482422, p978 * 190.71249985694885, p978 * 214.1999969482422, p978 * 187.21249985694885);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 204.1999969482422, p978 * 201.8125);
    v1346.bezierCurveTo(p978 * 209.1999969482422, p978 * 201.3125, p978 * 209.1999969482422, p978 * 201.3125, p978 * 214.1999969482422, p978 * 200.8125);
    v1346.bezierCurveTo(p978 * 215.1999969482422, p978 * 204.8125, p978 * 214.1999969482422, p978 * 205.8125, p978 * 213.1999969482422, p978 * 208.8125);
    v1346.bezierCurveTo(p978 * 208.6999969482422, p978 * 205.3125, p978 * 208.6999969482422, p978 * 205.3125, p978 * 204.1999969482422, p978 * 201.8125);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 199.1999969482422, p978 * 205.61249923706055);
    v1346.bezierCurveTo(p978 * 207.1999969482422, p978 * 212.61249923706055, p978 * 203.6999969482422, p978 * 209.11249923706055, p978 * 208.1999969482422, p978 * 212.61249923706055);
    v1346.bezierCurveTo(p978 * 206.1999969482422, p978 * 215.61249923706055, p978 * 204.1999969482422, p978 * 217.61249923706055, p978 * 203.1999969482422, p978 * 216.61249923706055);
    v1346.bezierCurveTo(p978 * 201.1999969482422, p978 * 211.11249923706055, p978 * 201.1999969482422, p978 * 211.11249923706055, p978 * 199.1999969482422, p978 * 205.61249923706055);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 191.1999969482422, p978 * 207.01250076293945);
    v1346.bezierCurveTo(p978 * 194.1999969482422, p978 * 213.01250076293945, p978 * 194.1999969482422, p978 * 216.01250076293945, p978 * 196.1999969482422, p978 * 218.01250076293945);
    v1346.bezierCurveTo(p978 * 193.1999969482422, p978 * 220.01250076293945, p978 * 190.1999969482422, p978 * 220.01250076293945, p978 * 188.1999969482422, p978 * 218.01250076293945);
    v1346.bezierCurveTo(p978 * 189.6999969482422, p978 * 213.01250076293945, p978 * 189.6999969482422, p978 * 213.01250076293945, p978 * 191.1999969482422, p978 * 208.01250076293945);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 186.1999969482422, p978 * 203.21249961853027);
    v1346.bezierCurveTo(p978 * 184.1999969482422, p978 * 209.21249961853027, p978 * 184.1999969482422, p978 * 209.21249961853027, p978 * 182.1999969482422, p978 * 215.21249961853027);
    v1346.bezierCurveTo(p978 * 177.1999969482422, p978 * 212.21249961853027, p978 * 176.1999969482422, p978 * 211.21249961853027, p978 * 177.1999969482422, p978 * 210.21249961853027);
    v1346.bezierCurveTo(p978 * 181.6999969482422, p978 * 206.71249961853027, p978 * 181.6999969482422, p978 * 206.71249961853027, p978 * 186.1999969482422, p978 * 203.21249961853027);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 183.1999969482422, p978 * 196.8125);
    v1346.bezierCurveTo(p978 * 177.1999969482422, p978 * 196.3125, p978 * 177.1999969482422, p978 * 196.3125, p978 * 171.1999969482422, p978 * 195.8125);
    v1346.bezierCurveTo(p978 * 171.1999969482422, p978 * 199.8125, p978 * 171.1999969482422, p978 * 202.8125, p978 * 174.1999969482422, p978 * 204.8125);
    v1346.bezierCurveTo(p978 * 178.6999969482422, p978 * 200.8125, p978 * 178.6999969482422, p978 * 200.8125, p978 * 183.1999969482422, p978 * 196.8125);
    v1346.closePath();
    f88(v1346, p979[11]);
    v1346.beginPath();
    v1346.lineCap = "round";
    v1346.lineJoin = "round";
    v1346.moveTo(p978 * 185.1999969482422, p978 * 190.21249771118164);
    v1346.bezierCurveTo(p978 * 179.6999969482422, p978 * 186.71249771118164, p978 * 179.6999969482422, p978 * 186.71249771118164, p978 * 174.1999969482422, p978 * 183.21249771118164);
    v1346.bezierCurveTo(p978 * 172.1999969482422, p978 * 186.21249771118164, p978 * 172.1999969482422, p978 * 187.21249771118164, p978 * 172.1999969482422, p978 * 190.21249771118164);
    v1346.bezierCurveTo(p978 * 178.1999969482422, p978 * 190.21249771118164, p978 * 178.1999969482422, p978 * 190.21249771118164, p978 * 184.1999969482422, p978 * 190.21249771118164);
    v1346.closePath();
    f88(v1346, p979[11]);
    f92(v1346, p978 * 126.19999694824219, p978 * 169.8125, p978 * 8.94427190999916);
    f88(v1346, p979[12]);
    f92(v1346, p978 * 123.19999694824219, p978 * 164.8125, p978 * 2.8284271247461903);
    f88(v1346, p979[13]);
    f92(v1346, p978 * 253.1999969482422, p978 * 169.8125, p978 * 8.94427190999916);
    f88(v1346, p979[12]);
    f92(v1346, p978 * 255.1999969482422, p978 * 164.8125, p978 * 2.23606797749979);
    f88(v1346, p979[13]);
    return v1345;
  }
  function f251(p980, p981, p982) {
    var v1347 = document.createElement("canvas");
    var v1348 = v1347.getContext("2d");
    v1347.width = p980 * 465;
    v1347.height = p980 * 310;
    v1348.beginPath();
    v1348.lineCap = "round";
    v1348.lineJoin = "round";
    v1348.moveTo(p980 * 126, p980 * 192);
    v1348.bezierCurveTo(p980 * 198, p980 * 202, p980 * 245, p980 * 203, p980 * 335, p980 * 194);
    v1348.bezierCurveTo(p980 * 336, p980 * 232, p980 * 326, p980 * 235, p980 * 232, p980 * 237);
    v1348.bezierCurveTo(p980 * 161, p980 * 235, p980 * 122, p980 * 235, p980 * 126, p980 * 193);
    v1348.closePath();
    f88(v1348, p982[0], p982[1], p980 * 4);
    v1348.beginPath();
    v1348.lineCap = "round";
    v1348.lineJoin = "round";
    v1348.moveTo(p980 * 146, p980 * 239);
    v1348.bezierCurveTo(p980 * 174, p980 * 74, p980 * 287, p980 * 88, p980 * 320, p980 * 240);
    v1348.bezierCurveTo(p980 * 329, p980 * 231, p980 * 340, p980 * 219, p980 * 332, p980 * 115);
    v1348.bezierCurveTo(p980 * 330, p980 * 40, p980 * 144, p980 * 30, p980 * 129, p980 * 116);
    v1348.bezierCurveTo(p980 * 124, p980 * 217, p980 * 124, p980 * 228, p980 * 143, p980 * 237);
    v1348.closePath();
    f88(v1348, p982[0], p982[1], p980 * 4);
    v1348.beginPath();
    v1348.lineCap = "round";
    v1348.lineJoin = "round";
    v1348.moveTo(p980 * 126, p980 * 193);
    v1348.bezierCurveTo(p980 * 173, p980 * 94, p980 * 209, p980 * 100, p980 * 228, p980 * 57);
    v1348.bezierCurveTo(p980 * 190, p980 * 112, p980 * 165, p980 * 115, p980 * 127, p980 * 184);
    v1348.closePath();
    f88(v1348, vVVVUndefined58, p982[1], p980 * 4);
    v1348.beginPath();
    v1348.lineCap = "round";
    v1348.lineJoin = "round";
    v1348.moveTo(p980 * 230, p980 * 57);
    v1348.bezierCurveTo(p980 * 266, p980 * 117, p980 * 310, p980 * 130, p980 * 332, p980 * 183);
    v1348.bezierCurveTo(p980 * 290, p980 * 112, p980 * 262, p980 * 109, p980 * 230, p980 * 56);
    v1348.closePath();
    f88(v1348, undefined, p982[1], p980 * 4);
    v1348.beginPath();
    v1348.lineCap = "round";
    v1348.lineJoin = "round";
    v1348.moveTo(p980 * 154, p980 * 212);
    v1348.bezierCurveTo(p980 * 208, p980 * 224, p980 * 252, p980 * 219, p980 * 305, p980 * 212);
    v1348.bezierCurveTo(p980 * 267, p980 * 219, p980 * 204, p980 * 222, p980 * 155, p980 * 212);
    v1348.closePath();
    f88(v1348, undefined, p982[1], p980 * 4);
    v1348.beginPath();
    v1348.lineCap = "round";
    v1348.lineJoin = "round";
    v1348.moveTo(p980 * 239, p980 * 59);
    v1348.bezierCurveTo(p980 * 302, p980 * 72, p980 * 325, p980 * 84, p980 * 326, p980 * 115);
    v1348.bezierCurveTo(p980 * 289, p980 * 80, p980 * 270, p980 * 88, p980 * 253, p980 * 78);
    v1348.closePath();
    f88(v1348, p982[2]);
    v1348.beginPath();
    v1348.lineCap = "round";
    v1348.lineJoin = "round";
    v1348.moveTo(p980 * 216, p980 * 61);
    v1348.bezierCurveTo(p980 * 209, p980 * 70, p980 * 209, p980 * 70, p980 * 202, p980 * 79);
    v1348.bezierCurveTo(p980 * 173, p980 * 87, p980 * 162, p980 * 91, p980 * 137, p980 * 107);
    v1348.bezierCurveTo(p980 * 153, p980 * 78, p980 * 174, p980 * 67, p980 * 212, p980 * 62);
    v1348.closePath();
    f88(v1348, p982[2]);
    v1348.beginPath();
    v1348.lineCap = "round";
    v1348.lineJoin = "round";
    v1348.moveTo(p980 * 175, p980 * 125);
    v1348.bezierCurveTo(p980 * 218, p980 * 94, p980 * 238, p980 * 90, p980 * 281, p980 * 125);
    v1348.bezierCurveTo(p980 * 245, p980 * 89, p980 * 240, p980 * 80, p980 * 228, p980 * 67);
    v1348.bezierCurveTo(p980 * 207, p980 * 100, p980 * 192, p980 * 104, p980 * 177, p980 * 123);
    v1348.closePath();
    f88(v1348, p982[2]);
    return v1347;
  }
  function f252(p983, p984, p985) {
    var v1349 = document.createElement("canvas");
    var v1350 = v1349.getContext("2d");
    v1349.width = p983 * 81;
    v1349.height = p983 * 77;
    v1350.translate(0, p983 * 10);
    v1350.scale(0.2, 0.2);
    v1350.translate(0, p983 * -30);
    if (p985 == 1) {
      v1350.beginPath();
      v1350.lineCap = "round";
      v1350.lineJoin = "round";
      v1350.moveTo(p983 * 36.5, p983 * 278.0625);
      v1350.bezierCurveTo(p983 * 67.5, p983 * 316.0625, p983 * 134.5, p983 * 334.0625, p983 * 199.5, p983 * 319.0625);
      v1350.bezierCurveTo(p983 * 254.5, p983 * 304.0625, p983 * 346.5, p983 * 270.0625, p983 * 348.5, p983 * 237.0625);
      v1350.bezierCurveTo(p983 * 359.5, p983 * 206.0625, p983 * 318.5, p983 * 129.0625, p983 * 262.5, p983 * 122.0625);
      v1350.bezierCurveTo(p983 * 213.5, p983 * 115.0625, p983 * 166.5, p983 * 133.0625, p983 * 104.5, p983 * 166.0625);
      v1350.bezierCurveTo(p983 * 54.5, p983 * 194.0625, p983 * 23.5, p983 * 241.0625, p983 * 36.5, p983 * 277.0625);
      v1350.closePath();
      f88(v1350, p984[0], p984[3], p983 * 50);
    }
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 36.5, p983 * 278.0625);
    v1350.bezierCurveTo(p983 * 67.5, p983 * 316.0625, p983 * 134.5, p983 * 334.0625, p983 * 199.5, p983 * 319.0625);
    v1350.bezierCurveTo(p983 * 254.5, p983 * 304.0625, p983 * 346.5, p983 * 270.0625, p983 * 348.5, p983 * 237.0625);
    v1350.bezierCurveTo(p983 * 359.5, p983 * 206.0625, p983 * 318.5, p983 * 129.0625, p983 * 262.5, p983 * 122.0625);
    v1350.bezierCurveTo(p983 * 213.5, p983 * 115.0625, p983 * 166.5, p983 * 133.0625, p983 * 104.5, p983 * 166.0625);
    v1350.bezierCurveTo(p983 * 54.5, p983 * 194.0625, p983 * 23.5, p983 * 241.0625, p983 * 36.5, p983 * 277.0625);
    v1350.closePath();
    f88(v1350, p984[0], p984[1], p983 * 19);
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 214.5, p983 * 124.0625);
    v1350.bezierCurveTo(p983 * 242.5, p983 * 125.0625, p983 * 272.5, p983 * 159.0625, p983 * 283.5, p983 * 184.0625);
    v1350.bezierCurveTo(p983 * 277.5, p983 * 161.0625, p983 * 233.5, p983 * 128.0625, p983 * 219.5, p983 * 122.0625);
    v1350.closePath();
    f88(v1350, p984[0], p984[1], p983 * 19);
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 157.5, p983 * 145.0625);
    v1350.bezierCurveTo(p983 * 176.5, p983 * 148.0625, p983 * 205.5, p983 * 176.0625, p983 * 212.5, p983 * 197.0625);
    v1350.bezierCurveTo(p983 * 205.5, p983 * 178.0625, p983 * 177.5, p983 * 152.0625, p983 * 156.5, p983 * 142.0625);
    v1350.closePath();
    f88(v1350, p984[0], p984[1], p983 * 19);
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 103.5, p983 * 169.0625);
    v1350.bezierCurveTo(p983 * 160.5, p983 * 166.0625, p983 * 228.5, p983 * 312.0625, p983 * 162.5, p983 * 323.0625);
    v1350.bezierCurveTo(p983 * 128.5, p983 * 330.0625, p983 * 45.5, p983 * 312.0625, p983 * 34.5, p983 * 268.0625);
    v1350.bezierCurveTo(p983 * 30.5, p983 * 238.0625, p983 * 44.5, p983 * 222.0625, p983 * 52.5, p983 * 211.0625);
    v1350.bezierCurveTo(p983 * 82.5, p983 * 174.0625, p983 * 104.5, p983 * 166.0625, p983 * 119.5, p983 * 172.0625);
    v1350.closePath();
    f88(v1350, p984[2], p984[1], p983 * 19);
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 194.5, p983 * 313.0625);
    v1350.bezierCurveTo(p983 * 222.5, p983 * 306.0625, p983 * 319.5, p983 * 271.0625, p983 * 337.5, p983 * 241.0625);
    v1350.bezierCurveTo(p983 * 274.5, p983 * 270.0625, p983 * 216.5, p983 * 288.0625, p983 * 199.5, p983 * 287.0625);
    v1350.bezierCurveTo(p983 * 198.5, p983 * 302.0625, p983 * 195.5, p983 * 311.0625, p983 * 193.5, p983 * 312.0625);
    v1350.closePath();
    f88(v1350, p984[1]);
    v1350.scale(3, 3);
    v1350.translate(15, p983 * 10);
    if (p985 == 1) {
      v1350.beginPath();
      v1350.lineCap = "round";
      v1350.lineJoin = "round";
      v1350.moveTo(p983 * 4, p983 * 32);
      v1350.bezierCurveTo(p983 * 19, p983 * 25, p983 * 19, p983 * 25, p983 * 34, p983 * 18);
      v1350.bezierCurveTo(p983 * 41.5, p983 * 23.5, p983 * 41.5, p983 * 23.5, p983 * 49, p983 * 29);
      v1350.bezierCurveTo(p983 * 59.5, p983 * 20, p983 * 59.5, p983 * 20, p983 * 70, p983 * 11);
      f88(v1350, vVUndefined, p984[3], p983 * 28);
      v1350.beginPath();
      v1350.lineCap = "round";
      v1350.lineJoin = "round";
      v1350.moveTo(p983 * 56, p983 * 6);
      v1350.bezierCurveTo(p983 * 63.5, p983 * 13.5, p983 * 63.5, p983 * 13.5, p983 * 71, p983 * 21);
      v1350.bezierCurveTo(p983 * 74.5, p983 * 11.5, p983 * 74.5, p983 * 11.5, p983 * 78, p983 * 2);
      v1350.closePath();
      f88(v1350, p984[3], p984[3], p983 * 28);
    }
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 4, p983 * 32);
    v1350.bezierCurveTo(p983 * 19, p983 * 25, p983 * 19, p983 * 25, p983 * 34, p983 * 18);
    v1350.bezierCurveTo(p983 * 41.5, p983 * 23.5, p983 * 41.5, p983 * 23.5, p983 * 49, p983 * 29);
    v1350.bezierCurveTo(p983 * 59.5, p983 * 20, p983 * 59.5, p983 * 20, p983 * 70, p983 * 11);
    f88(v1350, undefined, p984[1], p983 * 17);
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 56, p983 * 6);
    v1350.bezierCurveTo(p983 * 63.5, p983 * 13.5, p983 * 63.5, p983 * 13.5, p983 * 71, p983 * 21);
    v1350.bezierCurveTo(p983 * 74.5, p983 * 11.5, p983 * 74.5, p983 * 11.5, p983 * 78, p983 * 2);
    v1350.closePath();
    f88(v1350, p984[1], p984[1], p983 * 17);
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 4, p983 * 32);
    v1350.bezierCurveTo(p983 * 19, p983 * 25, p983 * 19, p983 * 25, p983 * 34, p983 * 18);
    v1350.bezierCurveTo(p983 * 41.5, p983 * 23.5, p983 * 41.5, p983 * 23.5, p983 * 49, p983 * 29);
    v1350.bezierCurveTo(p983 * 59.5, p983 * 20, p983 * 59.5, p983 * 20, p983 * 70, p983 * 11);
    f88(v1350, vVVVVVUndefined14, p984[2], p983 * 10);
    v1350.beginPath();
    v1350.lineCap = "round";
    v1350.lineJoin = "round";
    v1350.moveTo(p983 * 56, p983 * 6);
    v1350.bezierCurveTo(p983 * 63.5, p983 * 13.5, p983 * 63.5, p983 * 13.5, p983 * 71, p983 * 21);
    v1350.bezierCurveTo(p983 * 74.5, p983 * 11.5, p983 * 74.5, p983 * 11.5, p983 * 78, p983 * 2);
    v1350.closePath();
    f88(v1350, p984[2], p984[2], p983 * 10);
    return v1349;
  }
  function f253(p986, p987, p988) {
    var v1351 = document.createElement("canvas");
    var v1352 = v1351.getContext("2d");
    v1351.width = p986 * 144;
    v1351.height = p986 * 280;
    v1352.globalAlpha = p987 ? 0.5 : 1;
    v1352.translate(p986 * 5, p986 * 5);
    v1352.beginPath();
    v1352.lineCap = "round";
    v1352.lineJoin = "round";
    v1352.moveTo(p986 * 62, p986 * 103.79999542236328);
    v1352.bezierCurveTo(p986 * 62.5, p986 * 148.79999542236328, p986 * 62.5, p986 * 148.79999542236328, p986 * 63, p986 * 193.79999542236328);
    v1352.bezierCurveTo(p986 * 63, p986 * 219.79999542236328, p986 * 47, p986 * 217.79999542236328, p986 * 51, p986 * 230.79999542236328);
    v1352.bezierCurveTo(p986 * 62, p986 * 255.79999542236328, p986 * 74, p986 * 260.7999954223633, p986 * 72, p986 * 248.79999542236328);
    v1352.bezierCurveTo(p986 * 65, p986 * 226.79999542236328, p986 * 71, p986 * 229.79999542236328, p986 * 76, p986 * 225.79999542236328);
    v1352.bezierCurveTo(p986 * 90, p986 * 224.79999542236328, p986 * 89, p986 * 232.79999542236328, p986 * 90, p986 * 243.79999542236328);
    v1352.bezierCurveTo(p986 * 95, p986 * 253.79999542236328, p986 * 99, p986 * 249.79999542236328, p986 * 100, p986 * 229.79999542236328);
    v1352.bezierCurveTo(p986 * 102, p986 * 213.79999542236328, p986 * 98, p986 * 214.79999542236328, p986 * 90, p986 * 205.79999542236328);
    v1352.bezierCurveTo(p986 * 82, p986 * 201.79999542236328, p986 * 82, p986 * 185.79999542236328, p986 * 82, p986 * 114.79999542236328);
    v1352.bezierCurveTo(p986 * 80, p986 * 73, p986 * 82, p986 * 68, p986 * 93, p986 * 53);
    v1352.bezierCurveTo(p986 * 98, p986 * 37, p986 * 65, p986 * 14, p986 * 74, p986 * 33);
    v1352.bezierCurveTo(p986 * 82, p986 * 56, p986 * 77, p986 * 52, p986 * 69, p986 * 54);
    v1352.bezierCurveTo(p986 * 55, p986 * 57, p986 * 57, p986 * 53, p986 * 54, p986 * 39);
    v1352.bezierCurveTo(p986 * 46, p986 * 20, p986 * 37, p986 * 61, p986 * 50, p986 * 68);
    v1352.bezierCurveTo(p986 * 65, p986 * 81, p986 * 60, p986 * 89, p986 * 62, p986 * 102);
    v1352.closePath();
    f88(v1352, p988[0]);
    v1352.globalAlpha = 1;
    v1352.translate(p986 * -5, p986 * -5);
    v1352.beginPath();
    v1352.lineCap = "round";
    v1352.lineJoin = "round";
    v1352.moveTo(p986 * 62, p986 * 103.79999542236328);
    v1352.bezierCurveTo(p986 * 62.5, p986 * 148.79999542236328, p986 * 62.5, p986 * 148.79999542236328, p986 * 63, p986 * 193.79999542236328);
    v1352.bezierCurveTo(p986 * 63, p986 * 219.79999542236328, p986 * 47, p986 * 217.79999542236328, p986 * 51, p986 * 230.79999542236328);
    v1352.bezierCurveTo(p986 * 62, p986 * 255.79999542236328, p986 * 74, p986 * 260.7999954223633, p986 * 72, p986 * 248.79999542236328);
    v1352.bezierCurveTo(p986 * 65, p986 * 226.79999542236328, p986 * 71, p986 * 229.79999542236328, p986 * 76, p986 * 225.79999542236328);
    v1352.bezierCurveTo(p986 * 90, p986 * 224.79999542236328, p986 * 89, p986 * 232.79999542236328, p986 * 90, p986 * 243.79999542236328);
    v1352.bezierCurveTo(p986 * 95, p986 * 253.79999542236328, p986 * 99, p986 * 249.79999542236328, p986 * 100, p986 * 229.79999542236328);
    v1352.bezierCurveTo(p986 * 102, p986 * 213.79999542236328, p986 * 98, p986 * 214.79999542236328, p986 * 90, p986 * 205.79999542236328);
    v1352.bezierCurveTo(p986 * 82, p986 * 201.79999542236328, p986 * 82, p986 * 185.79999542236328, p986 * 82, p986 * 114.79999542236328);
    v1352.bezierCurveTo(p986 * 80, p986 * 73, p986 * 82, p986 * 68, p986 * 93, p986 * 53);
    v1352.bezierCurveTo(p986 * 98, p986 * 37, p986 * 65, p986 * 14, p986 * 74, p986 * 33);
    v1352.bezierCurveTo(p986 * 82, p986 * 56, p986 * 77, p986 * 52, p986 * 69, p986 * 54);
    v1352.bezierCurveTo(p986 * 55, p986 * 57, p986 * 57, p986 * 53, p986 * 54, p986 * 39);
    v1352.bezierCurveTo(p986 * 46, p986 * 20, p986 * 37, p986 * 61, p986 * 50, p986 * 68);
    v1352.bezierCurveTo(p986 * 65, p986 * 81, p986 * 60, p986 * 89, p986 * 62, p986 * 102);
    v1352.closePath();
    f88(v1352, p988[1], p988[2], p986 * 6);
    return v1351;
  }
  function f254(p989, p990, p991) {
    var v1353 = document.createElement("canvas");
    var v1354 = v1353.getContext("2d");
    v1353.width = p989 * 95;
    v1353.height = p989 * 85;
    if (p991 == 0) {
      v1354.translate(p989 * 7, p989 * 15);
      v1354.scale(0.9, 0.9);
      v1354.save();
      f86(v1354, p989 * 0, p989 * 5, p989 * 90, p989 * 60, 10);
      f88(v1354, p990[0]);
      v1354.globalCompositeOperation = "destination-out";
      f92(v1354, p989 * 25, p989 * 40, p989 * 10);
      v1354.fill();
      f92(v1354, p989 * 65, p989 * 40, p989 * 10);
      v1354.fill();
      v1354.restore();
      v1354.save();
      f86(v1354, 0, 0, p989 * 90, p989 * 60, p989 * 10);
      f88(v1354, p990[1]);
      v1354.globalCompositeOperation = "destination-out";
      f92(v1354, p989 * 25, p989 * 40, p989 * 10);
      v1354.fill();
      f92(v1354, p989 * 65, p989 * 40, p989 * 10);
      v1354.fill();
      v1354.restore();
    } else if (p991 == 1) {
      v1354.scale(0.8, 0.8);
      v1354.translate(p989 * 15, p989 * 33);
      v1354.save();
      v1354.scale(0.56, 0.56);
      v1354.translate(p989 * -39, p989 * -60);
      v1354.beginPath();
      v1354.lineCap = "round";
      v1354.lineJoin = "round";
      v1354.moveTo(p989 * 32.5, p989 * 50.642852783203125);
      v1354.bezierCurveTo(p989 * 83, p989 * 69.64285278320312, p989 * 83, p989 * 69.64285278320312, p989 * 133.5, p989 * 88.64285278320312);
      v1354.bezierCurveTo(p989 * 93, p989 * 92.64285278320312, p989 * 93, p989 * 92.64285278320312, p989 * 52.5, p989 * 96.64285278320312);
      v1354.bezierCurveTo(p989 * 30.5, p989 * 100.64285278320312, p989 * 36.5, p989 * 94.64285278320312, p989 * 32.5, p989 * 84.64285278320312);
      v1354.bezierCurveTo(p989 * 21.5, p989 * 45.642852783203125, p989 * 24.5, p989 * 48.642852783203125, p989 * 31.5, p989 * 50.642852783203125);
      v1354.closePath();
      f88(v1354, p990[1]);
      v1354.beginPath();
      v1354.lineCap = "round";
      v1354.lineJoin = "round";
      v1354.moveTo(p989 * 116.5, p989 * 85.64285278320312);
      v1354.bezierCurveTo(p989 * 160.5, p989 * 67.14285278320312, p989 * 160.5, p989 * 67.14285278320312, p989 * 204.5, p989 * 48.642852783203125);
      v1354.bezierCurveTo(p989 * 220.5, p989 * 42.642852783203125, p989 * 208.5, p989 * 68.64285278320312, p989 * 205.5, p989 * 85.64285278320312);
      v1354.bezierCurveTo(p989 * 202.5, p989 * 98.64285278320312, p989 * 199.5, p989 * 98.64285278320312, p989 * 188.5, p989 * 100.64285278320312);
      v1354.closePath();
      f88(v1354, p990[1]);
      v1354.beginPath();
      v1354.lineCap = "round";
      v1354.lineJoin = "round";
      v1354.moveTo(p989 * 166.5, p989 * 68.64285278320312);
      v1354.bezierCurveTo(p989 * 147.5, p989 * 72.64285278320312, p989 * 145.5, p989 * 73.64285278320312, p989 * 142.5, p989 * 62.642852783203125);
      v1354.bezierCurveTo(p989 * 121.5, p989 * 12.642852783203125, p989 * 122.5, p989 * 5.642852783203125, p989 * 117.5, p989 * 15.642852783203125);
      v1354.bezierCurveTo(p989 * 105.5, p989 * 40.642852783203125, p989 * 105.5, p989 * 40.642852783203125, p989 * 93.5, p989 * 65.64285278320312);
      v1354.bezierCurveTo(p989 * 89.5, p989 * 74.64285278320312, p989 * 84.5, p989 * 72.64285278320312, p989 * 73.5, p989 * 74.64285278320312);
      v1354.bezierCurveTo(p989 * 98, p989 * 87.64285278320312, p989 * 98, p989 * 87.64285278320312, p989 * 122.5, p989 * 100.64285278320312);
      v1354.closePath();
      f88(v1354, p990[1]);
      v1354.restore();
      v1354.save();
      f86(v1354, 0, p989 * 15, p989 * 90, p989 * 50, p989 * 10);
      f88(v1354, p990[0]);
      f86(v1354, 0, p989 * 10, p989 * 90, p989 * 50, p989 * 10);
      f88(v1354, p990[1]);
      v1354.globalCompositeOperation = "destination-out";
      f92(v1354, p989 * 25, p989 * 40, p989 * 10);
      v1354.fill();
      f92(v1354, p989 * 65, p989 * 40, p989 * 10);
      v1354.fill();
      v1354.restore();
    }
    return v1353;
  }
  function f255(p992, p993, p994, p995) {
    var v1355 = document.createElement("canvas");
    var v1356 = v1355.getContext("2d");
    v1355.width = p992 * 501;
    v1355.height = p992 * 564;
    v1356.scale(0.5, 0.5);
    v1356.translate(p992 * 240, p992 * 255);
    v1356.rotate(p995);
    v1356.globalAlpha = p993 ? 0.5 : 0.2;
    f92(v1356, p992 * 174, p992 * 87.984375, p992 * 20.8806130178211);
    f88(v1356, p994[0], p994[0], p992 * 8);
    f92(v1356, p992 * 174, p992 * 87.984375, p992 * 12.165525060596439);
    f88(v1356, p994[0], p994[0], p992 * 8);
    f92(v1356, p992 * 174, p992 * 87.484375, p992 * 6);
    f88(v1356, p994[0]);
    f92(v1356, p992 * 30, p992 * 87.984375, p992 * 20.8806130178211);
    f88(v1356, p994[0], p994[0], p992 * 4);
    f92(v1356, p992 * 30, p992 * 87.984375, p992 * 12.165525060596439);
    f88(v1356, p994[0], p994[0], p992 * 4);
    f92(v1356, p992 * 30, p992 * 87.484375, p992 * 6);
    f88(v1356, p994[0]);
    f92(v1356, p992 * 100, p992 * 30, p992 * 20.8806130178211);
    f88(v1356, p994[0], p994[0], p992 * 4);
    f92(v1356, p992 * 100, p992 * 30, p992 * 12.165525060596439);
    f88(v1356, p994[0], p994[0], p992 * 4);
    f92(v1356, p992 * 100, p992 * 30, p992 * 6);
    f88(v1356, p994[0]);
    f92(v1356, p992 * 100, p992 * 130, p992 * 20.8806130178211);
    f88(v1356, p994[0], p994[0], p992 * 4);
    f92(v1356, p992 * 100, p992 * 130, p992 * 12.165525060596439);
    f88(v1356, p994[0], p994[0], p992 * 4);
    f92(v1356, p992 * 100, p992 * 130, p992 * 6);
    f88(v1356, p994[0]);
    v1356.save();
    v1356.translate(p992 * 102, p992 * 81.984375);
    v1356.rotate(0);
    f86(v1356, p992 * -74, p992 * -57, p992 * 148, p992 * 114, p992 * 23);
    v1356.restore();
    f88(v1356, p994[0], p994[0], p992 * 4);
    v1356.save();
    v1356.translate(p992 * 101, p992 * 64.984375);
    v1356.rotate(0);
    f86(v1356, p992 * -33, p992 * -10, p992 * 66, p992 * 20, p992 * 15);
    v1356.restore();
    f88(v1356, p994[0], p994[0], p992 * 4);
    v1356.save();
    v1356.translate(p992 * 102, p992 * 63.484375);
    v1356.rotate(0);
    f86(v1356, p992 * -9, p992 * -27.5, p992 * 18, p992 * 55, p992 * 15);
    v1356.restore();
    v1356.translate(5, -5);
    v1356.globalAlpha = 1;
    f92(v1356, p992 * 174, p992 * 87.984375, p992 * 20.8806130178211);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 174, p992 * 87.984375, p992 * 12.165525060596439);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 174, p992 * 87.484375, p992 * 6);
    f88(v1356, p994[2]);
    f92(v1356, p992 * 30, p992 * 87.984375, p992 * 20.8806130178211);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 30, p992 * 87.984375, p992 * 12.165525060596439);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 30, p992 * 87.484375, p992 * 6);
    f88(v1356, p994[2]);
    f92(v1356, p992 * 102, p992 * 30, p992 * 20.8806130178211);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 102, p992 * 30, p992 * 12.165525060596439);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 102, p992 * 30, p992 * 6);
    f88(v1356, p994[1]);
    f92(v1356, p992 * 102, p992 * 130, p992 * 20.8806130178211);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 102, p992 * 130, p992 * 12.165525060596439);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 102, p992 * 130, p992 * 6);
    f88(v1356, p994[1]);
    v1356.save();
    v1356.translate(p992 * 102, p992 * 81.984375);
    f86(v1356, p992 * -74, p992 * -57, p992 * 148, p992 * 114, p992 * 23);
    v1356.restore();
    f88(v1356, p994[1], p994[3], p992 * 8);
    v1356.save();
    v1356.translate(p992 * 101, p992 * 64.984375);
    f86(v1356, p992 * -33, p992 * -10, p992 * 66, p992 * 20, p992 * 15);
    v1356.restore();
    f88(v1356, p994[2], p994[1], p992 * 8);
    v1356.save();
    v1356.translate(p992 * 102, p992 * 63.484375);
    f86(v1356, p992 * -9, p992 * -27.5, p992 * 18, p992 * 55, p992 * 15);
    v1356.restore();
    f88(v1356, p994[2], p994[1], p992 * 8);
    f92(v1356, p992 * 135, p992 * 107.36605834960938, p992 * 21.095023109728988);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 135, p992 * 107.36605834960938, p992 * 13);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 135, p992 * 107.36605834960938, p992 * 6.082762530298219);
    f88(v1356, p994[2]);
    f92(v1356, p992 * 70, p992 * 107.36605834960938, p992 * 21.095023109728988);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 70, p992 * 107.36605834960938, p992 * 13);
    f88(v1356, p994[1], p994[3], p992 * 8);
    f92(v1356, p992 * 70, p992 * 107.36605834960938, p992 * 6.082762530298219);
    f88(v1356, p994[2]);
    return v1355;
  }
  function f256(p996, p997, p998) {
    var v1357 = document.createElement("canvas");
    var v1358 = v1357.getContext("2d");
    v1357.width = p996 * 218;
    v1357.height = p996 * 185;
    v1358.beginPath();
    v1358.lineCap = "round";
    v1358.lineJoin = "round";
    v1358.moveTo(p996 * 64, p996 * 53.135406494140625);
    v1358.bezierCurveTo(p996 * 92, p996 * 17.135406494140625, p996 * 116, p996 * 11.135406494140625, p996 * 158, p996 * 53.135406494140625);
    v1358.bezierCurveTo(p996 * 178, p996 * 74.13540649414062, p996 * 181, p996 * 81.13540649414062, p996 * 196, p996 * 101.13540649414062);
    v1358.bezierCurveTo(p996 * 214, p996 * 127.13540649414062, p996 * 192, p996 * 138.13540649414062, p996 * 173, p996 * 149.13540649414062);
    v1358.bezierCurveTo(p996 * 137, p996 * 166.13540649414062, p996 * 74, p996 * 170.13540649414062, p996 * 36, p996 * 141.13540649414062);
    v1358.bezierCurveTo(p996 * 13, p996 * 127.13540649414062, p996 * 20, p996 * 119.13540649414062, p996 * 30, p996 * 103.13540649414062);
    v1358.bezierCurveTo(p996 * 48, p996 * 71.13540649414062, p996 * 54, p996 * 67.13540649414062, p996 * 63, p996 * 54.135406494140625);
    v1358.closePath();
    f88(v1358, p998[0], p998[1], p996 * 10);
    v1358.beginPath();
    v1358.lineCap = "round";
    v1358.lineJoin = "round";
    v1358.moveTo(p996 * 107, p996 * 25.135406494140625);
    v1358.bezierCurveTo(p996 * 62, p996 * 90.13540649414062, p996 * 54, p996 * 129.13540649414062, p996 * 53, p996 * 151.13540649414062);
    v1358.bezierCurveTo(p996 * 39.5, p996 * 142.13540649414062, p996 * 39.5, p996 * 142.13540649414062, p996 * 26, p996 * 133.13540649414062);
    v1358.bezierCurveTo(p996 * 23.5, p996 * 128.63540649414062, p996 * 23.5, p996 * 128.63540649414062, p996 * 21, p996 * 124.13540649414062);
    v1358.bezierCurveTo(p996 * 22, p996 * 113.13540649414062, p996 * 31, p996 * 99.13540649414062, p996 * 40, p996 * 88.13540649414062);
    v1358.bezierCurveTo(p996 * 54.5, p996 * 67.13540649414062, p996 * 54.5, p996 * 67.13540649414062, p996 * 69, p996 * 46.135406494140625);
    v1358.bezierCurveTo(p996 * 80.5, p996 * 36.635406494140625, p996 * 80.5, p996 * 36.635406494140625, p996 * 92, p996 * 27.135406494140625);
    v1358.closePath();
    f88(v1358, p998[1]);
    return v1357;
  }
  function f257(p999, p1000, p1001) {
    var v1359 = document.createElement("canvas");
    var v1360 = v1359.getContext("2d");
    v1359.width = p999 * 168;
    v1359.height = p999 * 100;
    v1360.globalAlpha = p1000 ? 0.5 : 1;
    v1360.translate(p999 * 10, p999 * 5);
    v1360.save();
    v1360.translate(p999 * 24.5, p999 * 44.30000305175781);
    f86(v1360, p999 * -19.5, p999 * -8.5, p999 * 39, p999 * 17, p999 * 10);
    v1360.restore();
    f88(v1360, p1001[0]);
    v1360.beginPath();
    v1360.lineCap = "round";
    v1360.lineJoin = "round";
    v1360.moveTo(p999 * 115, p999 * 37.80000305175781);
    v1360.bezierCurveTo(p999 * 142, p999 * 37.80000305175781, p999 * 140, p999 * 37.80000305175781, p999 * 141, p999 * 37.80000305175781);
    v1360.bezierCurveTo(p999 * 147, p999 * 28.800003051757812, p999 * 149, p999 * 26.800003051757812, p999 * 153, p999 * 32.80000305175781);
    v1360.bezierCurveTo(p999 * 160, p999 * 42.80000305175781, p999 * 157, p999 * 50.80000305175781, p999 * 153, p999 * 58.80000305175781);
    v1360.bezierCurveTo(p999 * 148, p999 * 62.80000305175781, p999 * 147, p999 * 59.80000305175781, p999 * 143, p999 * 52.80000305175781);
    v1360.bezierCurveTo(p999 * 129, p999 * 52.80000305175781, p999 * 129, p999 * 52.80000305175781, p999 * 115, p999 * 52.80000305175781);
    v1360.closePath();
    f88(v1360, p1001[0]);
    f92(v1360, p999 * 78, p999 * 44.80000305175781, p999 * 39.44616584663204);
    f88(v1360, p1001[0]);
    v1360.globalAlpha = 1;
    v1360.translate(p999 * -10, p999 * -5);
    v1360.save();
    v1360.translate(p999 * 24.5, p999 * 44.30000305175781);
    f86(v1360, p999 * -19.5, p999 * -8.5, p999 * 39, p999 * 17, p999 * 10);
    v1360.restore();
    f88(v1360, undefined, p1001[3], p999 * 6);
    v1360.beginPath();
    v1360.lineCap = "round";
    v1360.lineJoin = "round";
    v1360.moveTo(p999 * 115, p999 * 37.80000305175781);
    v1360.bezierCurveTo(p999 * 142, p999 * 37.80000305175781, p999 * 140, p999 * 37.80000305175781, p999 * 141, p999 * 37.80000305175781);
    v1360.bezierCurveTo(p999 * 147, p999 * 28.800003051757812, p999 * 149, p999 * 26.800003051757812, p999 * 153, p999 * 32.80000305175781);
    v1360.bezierCurveTo(p999 * 160, p999 * 42.80000305175781, p999 * 157, p999 * 50.80000305175781, p999 * 153, p999 * 58.80000305175781);
    v1360.bezierCurveTo(p999 * 148, p999 * 62.80000305175781, p999 * 147, p999 * 59.80000305175781, p999 * 143, p999 * 52.80000305175781);
    v1360.bezierCurveTo(p999 * 129, p999 * 52.80000305175781, p999 * 129, p999 * 52.80000305175781, p999 * 115, p999 * 52.80000305175781);
    v1360.closePath();
    f88(v1360, vVVVVUndefined1422, p1001[3], p999 * 6);
    f92(v1360, p999 * 78, p999 * 44.80000305175781, p999 * 42.44616584663204);
    f88(v1360, undefined, p1001[3], p999 * 6);
    v1360.save();
    v1360.translate(p999 * 24.5, p999 * 44.30000305175781);
    f86(v1360, p999 * -19.5, p999 * -8.5, p999 * 39, p999 * 17, p999 * 10);
    v1360.restore();
    f88(v1360, p1001[1]);
    v1360.beginPath();
    v1360.lineCap = "round";
    v1360.lineJoin = "round";
    v1360.moveTo(p999 * 115, p999 * 37.80000305175781);
    v1360.bezierCurveTo(p999 * 142, p999 * 37.80000305175781, p999 * 140, p999 * 37.80000305175781, p999 * 141, p999 * 37.80000305175781);
    v1360.bezierCurveTo(p999 * 147, p999 * 28.800003051757812, p999 * 149, p999 * 26.800003051757812, p999 * 153, p999 * 32.80000305175781);
    v1360.bezierCurveTo(p999 * 160, p999 * 42.80000305175781, p999 * 157, p999 * 50.80000305175781, p999 * 153, p999 * 58.80000305175781);
    v1360.bezierCurveTo(p999 * 148, p999 * 62.80000305175781, p999 * 147, p999 * 59.80000305175781, p999 * 143, p999 * 52.80000305175781);
    v1360.bezierCurveTo(p999 * 129, p999 * 52.80000305175781, p999 * 129, p999 * 52.80000305175781, p999 * 115, p999 * 52.80000305175781);
    v1360.closePath();
    f88(v1360, p1001[1]);
    f92(v1360, p999 * 78, p999 * 44.80000305175781, p999 * 39.44616584663204);
    f88(v1360, p1001[2], p1001[1], p999 * 4);
    f92(v1360, p999 * 78, p999 * 44.80000305175781, p999 * 29.68164415931166);
    f88(v1360, p1001[3], p1001[1], p999 * 4);
    f92(v1360, p999 * 78, p999 * 44, p999 * 20);
    f88(v1360, p1001[4]);
    return v1359;
  }
  function f258(p1002, p1003, p1004) {
    var v1361 = document.createElement("canvas");
    var v1362 = v1361.getContext("2d");
    v1361.width = p1002 * 160;
    v1361.height = p1002 * 161;
    v1362.globalAlpha = p1003 ? 0.5 : 1;
    v1362.translate(0, p1002 * 10);
    v1362.save();
    v1362.translate(p1002 * 80.5, p1002 * 78);
    f86(v1362, p1002 * -71.5, p1002 * -71, p1002 * 143, p1002 * 143, p1002 * 10);
    v1362.restore();
    f88(v1362, p1004[0]);
    v1362.globalAlpha = 1;
    v1362.translate(0, p1002 * -10);
    v1362.save();
    v1362.translate(p1002 * 80.5, p1002 * 78);
    f86(v1362, p1002 * -71.5, p1002 * -71, p1002 * 143, p1002 * 143, p1002 * 10);
    v1362.restore();
    f88(v1362, p1004[1], p1004[2], p1002 * 6);
    v1362.save();
    v1362.translate(p1002 * 80, p1002 * 78.5);
    f86(v1362, p1002 * -17, p1002 * -72.5, p1002 * 34, p1002 * 145, p1002 * 10);
    v1362.restore();
    f88(v1362, p1004[3], p1004[4], p1002 * 6);
    v1362.globalAlpha = p1003 ? 0.5 : 1;
    v1362.translate(0, p1002 * 10);
    v1362.save();
    v1362.translate(p1002 * 80, p1002 * 79.5);
    f86(v1362, p1002 * -73, p1002 * -16.5, p1002 * 145, p1002 * 34, p1002 * 10);
    v1362.restore();
    f88(v1362, p1004[0]);
    v1362.globalAlpha = 1;
    v1362.translate(0, p1002 * -10);
    v1362.save();
    v1362.translate(p1002 * 80, p1002 * 79.5);
    f86(v1362, p1002 * -73, p1002 * -16.5, p1002 * 145, p1002 * 34, p1002 * 10);
    v1362.restore();
    f88(v1362, p1004[3], p1004[4], p1002 * 6);
    v1362.globalAlpha = p1003 ? 0.5 : 1;
    v1362.translate(0, p1002 * 10);
    v1362.beginPath();
    v1362.lineCap = "round";
    v1362.lineJoin = "round";
    v1362.moveTo(p1002 * 79, p1002 * 71);
    v1362.bezierCurveTo(p1002 * 90, p1002 * 42, p1002 * 98, p1002 * 36, p1002 * 109, p1002 * 43);
    v1362.bezierCurveTo(p1002 * 119, p1002 * 47, p1002 * 128, p1002 * 62, p1002 * 107, p1002 * 72);
    v1362.bezierCurveTo(p1002 * 96, p1002 * 78.5, p1002 * 96, p1002 * 78.5, p1002 * 85, p1002 * 85);
    v1362.closePath();
    f88(v1362, p1004[0]);
    v1362.beginPath();
    v1362.lineCap = "round";
    v1362.lineJoin = "round";
    v1362.moveTo(p1002 * 84, p1002 * 78);
    v1362.bezierCurveTo(p1002 * 113, p1002 * 82, p1002 * 123, p1002 * 97, p1002 * 115, p1002 * 108);
    v1362.bezierCurveTo(p1002 * 110, p1002 * 119, p1002 * 98, p1002 * 124, p1002 * 87, p1002 * 107);
    v1362.bezierCurveTo(p1002 * 81.5, p1002 * 94.5, p1002 * 81.5, p1002 * 94.5, p1002 * 76, p1002 * 82);
    v1362.closePath();
    f88(v1362, p1004[0]);
    v1362.beginPath();
    v1362.lineCap = "round";
    v1362.lineJoin = "round";
    v1362.moveTo(p1002 * 80, p1002 * 73);
    v1362.bezierCurveTo(p1002 * 64, p1002 * 37, p1002 * 55, p1002 * 34, p1002 * 45, p1002 * 42);
    v1362.bezierCurveTo(p1002 * 30, p1002 * 54, p1002 * 36, p1002 * 65, p1002 * 51, p1002 * 72);
    v1362.bezierCurveTo(p1002 * 62.5, p1002 * 77, p1002 * 62.5, p1002 * 77, p1002 * 74, p1002 * 82);
    v1362.closePath();
    f88(v1362, p1004[0]);
    v1362.beginPath();
    v1362.lineCap = "round";
    v1362.lineJoin = "round";
    v1362.moveTo(p1002 * 82, p1002 * 83);
    v1362.bezierCurveTo(p1002 * 73, p1002 * 107, p1002 * 60, p1002 * 123, p1002 * 47, p1002 * 113);
    v1362.bezierCurveTo(p1002 * 33, p1002 * 105, p1002 * 33, p1002 * 92, p1002 * 52, p1002 * 85);
    v1362.bezierCurveTo(p1002 * 74, p1002 * 73, p1002 * 77, p1002 * 76, p1002 * 76, p1002 * 75);
    v1362.closePath();
    f88(v1362, p1004[0]);
    v1362.globalAlpha = 1;
    v1362.translate(0, p1002 * -10);
    v1362.beginPath();
    v1362.lineCap = "round";
    v1362.lineJoin = "round";
    v1362.moveTo(p1002 * 79, p1002 * 71);
    v1362.bezierCurveTo(p1002 * 90, p1002 * 42, p1002 * 98, p1002 * 36, p1002 * 109, p1002 * 43);
    v1362.bezierCurveTo(p1002 * 119, p1002 * 47, p1002 * 128, p1002 * 62, p1002 * 107, p1002 * 72);
    v1362.bezierCurveTo(p1002 * 96, p1002 * 78.5, p1002 * 96, p1002 * 78.5, p1002 * 85, p1002 * 85);
    v1362.closePath();
    f88(v1362, p1004[3], p1004[4], p1002 * 6);
    v1362.beginPath();
    v1362.lineCap = "round";
    v1362.lineJoin = "round";
    v1362.moveTo(p1002 * 84, p1002 * 78);
    v1362.bezierCurveTo(p1002 * 113, p1002 * 82, p1002 * 123, p1002 * 97, p1002 * 115, p1002 * 108);
    v1362.bezierCurveTo(p1002 * 110, p1002 * 119, p1002 * 98, p1002 * 124, p1002 * 87, p1002 * 107);
    v1362.bezierCurveTo(p1002 * 81.5, p1002 * 94.5, p1002 * 81.5, p1002 * 94.5, p1002 * 76, p1002 * 82);
    v1362.closePath();
    f88(v1362, p1004[3], p1004[4], p1002 * 6);
    v1362.beginPath();
    v1362.lineCap = "round";
    v1362.lineJoin = "round";
    v1362.moveTo(p1002 * 80, p1002 * 73);
    v1362.bezierCurveTo(p1002 * 64, p1002 * 37, p1002 * 55, p1002 * 34, p1002 * 45, p1002 * 42);
    v1362.bezierCurveTo(p1002 * 30, p1002 * 54, p1002 * 36, p1002 * 65, p1002 * 51, p1002 * 72);
    v1362.bezierCurveTo(p1002 * 62.5, p1002 * 77, p1002 * 62.5, p1002 * 77, p1002 * 74, p1002 * 82);
    v1362.closePath();
    f88(v1362, p1004[3], p1004[4], p1002 * 6);
    v1362.beginPath();
    v1362.lineCap = "round";
    v1362.lineJoin = "round";
    v1362.moveTo(p1002 * 82, p1002 * 83);
    v1362.bezierCurveTo(p1002 * 73, p1002 * 107, p1002 * 60, p1002 * 123, p1002 * 47, p1002 * 113);
    v1362.bezierCurveTo(p1002 * 33, p1002 * 105, p1002 * 33, p1002 * 92, p1002 * 52, p1002 * 85);
    v1362.bezierCurveTo(p1002 * 74, p1002 * 73, p1002 * 77, p1002 * 76, p1002 * 76, p1002 * 75);
    v1362.closePath();
    f88(v1362, p1004[3], p1004[4], p1002 * 6);
    v1362.globalAlpha = p1003 ? 0.5 : 1;
    v1362.translate(0, p1002 * 10);
    v1362.save();
    v1362.translate(p1002 * 78.5, p1002 * 78);
    f86(v1362, p1002 * -13.5, p1002 * -14, p1002 * 27, p1002 * 27, p1002 * 6);
    v1362.restore();
    f88(v1362, p1004[0]);
    v1362.globalAlpha = 1;
    v1362.translate(0, p1002 * -10);
    v1362.save();
    v1362.translate(p1002 * 78.5, p1002 * 78);
    f86(v1362, p1002 * -13.5, p1002 * -14, p1002 * 27, p1002 * 27, p1002 * 6);
    v1362.restore();
    f88(v1362, p1004[3], p1004[4], p1002 * 6);
    return v1361;
  }
  function f259(p1005, p1006, p1007) {
    var v1363 = document.createElement("canvas");
    var v1364 = v1363.getContext("2d");
    v1363.width = p1005 * 89;
    v1363.height = p1005 * 89;
    v1364.save();
    v1364.translate(p1005 * 44.5, p1005 * 44.5);
    f89(v1364, 6, p1005 * 40, p1005 * 10);
    v1364.restore();
    f88(v1364, p1007[0], p1007[1], p1005 * 5);
    v1364.save();
    v1364.translate(p1005 * 44.5, p1005 * 44.5);
    f89(v1364, 6, p1005 * 25.11521001172521, p1005 * 10);
    v1364.restore();
    f88(v1364, p1007[2], p1007[3], p1005 * 5);
    return v1363;
  }
  function f260(p1008, p1009, p1010) {
    var v1365 = document.createElement("canvas");
    var v1366 = v1365.getContext("2d");
    v1365.width = p1008 * 316;
    v1365.height = p1008 * 365;
    v1366.save();
    v1366.translate(p1008 * 156.07142639160156, p1008 * 51.81248474121094);
    v1366.rotate(0);
    f86(v1366, p1008 * -21.5, p1008 * -34, p1008 * 43, p1008 * 68, p1008 * 8);
    v1366.restore();
    f88(v1366, p1010[1], p1010[2], p1008 * 15);
    v1366.beginPath();
    v1366.lineCap = "round";
    v1366.lineJoin = "round";
    v1366.moveTo(p1008 * 126.57142639160156, p1008 * 67.38392639160156);
    v1366.bezierCurveTo(p1008 * 126.57142639160156, p1008 * 57.38392639160156, p1008 * 132.57142639160156, p1008 * 54.38392639160156, p1008 * 140.57142639160156, p1008 * 54.38392639160156);
    v1366.bezierCurveTo(p1008 * 177.57142639160156, p1008 * 55.38392639160156, p1008 * 158.07142639160156, p1008 * 54.38392639160156, p1008 * 175.57142639160156, p1008 * 54.38392639160156);
    v1366.bezierCurveTo(p1008 * 185.57142639160156, p1008 * 56.38392639160156, p1008 * 185.57142639160156, p1008 * 57.38392639160156, p1008 * 184.57142639160156, p1008 * 66.38392639160156);
    v1366.bezierCurveTo(p1008 * 184.57142639160156, p1008 * 78.38392639160156, p1008 * 184.57142639160156, p1008 * 89.38392639160156, p1008 * 184.57142639160156, p1008 * 90.38392639160156);
    v1366.bezierCurveTo(p1008 * 177.57142639160156, p1008 * 107.38392639160156, p1008 * 180.57142639160156, p1008 * 112.38392639160156, p1008 * 189.57142639160156, p1008 * 116.38392639160156);
    v1366.bezierCurveTo(p1008 * 212.57142639160156, p1008 * 127.38392639160156, p1008 * 212.57142639160156, p1008 * 132.38392639160156, p1008 * 211.57142639160156, p1008 * 150.38392639160156);
    v1366.bezierCurveTo(p1008 * 211.57142639160156, p1008 * 227.59821128845215, p1008 * 211.57142639160156, p1008 * 227.59821128845215, p1008 * 211.57142639160156, p1008 * 304.81249618530273);
    v1366.bezierCurveTo(p1008 * 212.57142639160156, p1008 * 328.81249618530273, p1008 * 209.57142639160156, p1008 * 330.81249618530273, p1008 * 188.57142639160156, p1008 * 333.81249618530273);
    v1366.bezierCurveTo(p1008 * 155.07142639160156, p1008 * 333.31249618530273, p1008 * 155.07142639160156, p1008 * 333.31249618530273, p1008 * 121.57142639160156, p1008 * 332.81249618530273);
    v1366.bezierCurveTo(p1008 * 104.57142639160156, p1008 * 327.81249618530273, p1008 * 105.57142639160156, p1008 * 328.81249618530273, p1008 * 104.57142639160156, p1008 * 312.81249618530273);
    v1366.bezierCurveTo(p1008 * 104.57142639160156, p1008 * 228.16963958740234, p1008 * 104.57142639160156, p1008 * 228.16963958740234, p1008 * 104.57142639160156, p1008 * 143.52678298950195);
    v1366.bezierCurveTo(p1008 * 106.57142639160156, p1008 * 124.52678298950195, p1008 * 110.57142639160156, p1008 * 123.52678298950195, p1008 * 123.57142639160156, p1008 * 116.52678298950195);
    v1366.bezierCurveTo(p1008 * 136.57142639160156, p1008 * 110.52678298950195, p1008 * 130.57142639160156, p1008 * 106.52678298950195, p1008 * 126.57142639160156, p1008 * 98.52678298950195);
    v1366.closePath();
    f88(v1366, vVVVVUndefined1422, p1010[5], p1008 * 15);
    v1366.beginPath();
    v1366.lineCap = "round";
    v1366.lineJoin = "round";
    v1366.moveTo(p1008 * 125.57142639160156, p1008 * 156.66963958740234);
    v1366.bezierCurveTo(p1008 * 125.57142639160156, p1008 * 182.66963958740234, p1008 * 125.57142639160156, p1008 * 182.66963958740234, p1008 * 125.57142639160156, p1008 * 208.66963958740234);
    v1366.closePath();
    f88(v1366, undefined, p1010[6], p1008 * 15);
    return v1365;
  }
  function f261(p1011, p1012, p1013) {
    var v1367 = document.createElement("canvas");
    var v1368 = v1367.getContext("2d");
    v1367.width = p1011 * 400;
    v1367.height = p1011 * 400;
    v1368.save();
    v1368.translate(p1011 * 204, p1011 * 195.0833282470703);
    v1368.rotate(10.16);
    f86(v1368, p1011 * -97.5, p1011 * -134.5, p1011 * 195, p1011 * 269, p1011 * 10);
    v1368.restore();
    f88(v1368, p1013[0], p1013[1], p1011 * 8);
    v1368.beginPath();
    v1368.lineCap = "round";
    v1368.lineJoin = "round";
    v1368.moveTo(p1011 * 58.5, p1011 * 226.5833282470703);
    v1368.bezierCurveTo(p1011 * 120.5, p1011 * 281.5833282470703, p1011 * 120.5, p1011 * 281.5833282470703, p1011 * 182.5, p1011 * 336.5833282470703);
    v1368.bezierCurveTo(p1011 * 263, p1011 * 248.5833282470703, p1011 * 263, p1011 * 248.5833282470703, p1011 * 343.5, p1011 * 160.5833282470703);
    v1368.bezierCurveTo(p1011 * 280.5, p1011 * 104.58332824707031, p1011 * 280.5, p1011 * 104.58332824707031, p1011 * 217.5, p1011 * 48.58332824707031);
    v1368.closePath();
    f88(v1368, p1013[2], p1013[3], p1011 * 4);
    v1368.save();
    v1368.translate(p1011 * 197, p1011 * 169.0833282470703);
    v1368.rotate(10.16);
    f86(v1368, p1011 * -93.5, p1011 * -126.5, p1011 * 187, p1011 * 253, p1011 * 10);
    v1368.restore();
    f88(v1368, p1013[4], p1013[1], p1011 * 8);
    v1368.beginPath();
    v1368.lineCap = "round";
    v1368.lineJoin = "round";
    v1368.moveTo(p1011 * 226.5, p1011 * 24.583328247070312);
    v1368.bezierCurveTo(p1011 * 58.5, p1011 * 207.5833282470703, p1011 * 143, p1011 * 116.58332824707031, p1011 * 59.5, p1011 * 208.5833282470703);
    v1368.closePath();
    f88(v1368, vVVVVVUndefined14, p1013[1], p1011 * 8);
    v1368.beginPath();
    v1368.lineCap = "round";
    v1368.lineJoin = "round";
    v1368.moveTo(p1011 * 46.133331298828125, p1011 * 202.64999389648438);
    v1368.bezierCurveTo(p1011 * 46.133331298828125, p1011 * 215.64999389648438, p1011 * 46.133331298828125, p1011 * 215.64999389648438, p1011 * 46.133331298828125, p1011 * 228.64999389648438);
    v1368.closePath();
    f88(v1368, p1013[4], p1013[1], p1011 * 8);
    v1368.beginPath();
    v1368.lineCap = "round";
    v1368.lineJoin = "round";
    v1368.moveTo(p1011 * 55.133331298828125, p1011 * 211.64999389648438);
    v1368.bezierCurveTo(p1011 * 55.133331298828125, p1011 * 225.14999389648438, p1011 * 55.133331298828125, p1011 * 225.14999389648438, p1011 * 55.133331298828125, p1011 * 238.64999389648438);
    v1368.bezierCurveTo(p1011 * 50.133331298828125, p1011 * 235.64999389648438, p1011 * 50.133331298828125, p1011 * 235.64999389648438, p1011 * 45.133331298828125, p1011 * 232.64999389648438);
    v1368.bezierCurveTo(p1011 * 45.133331298828125, p1011 * 216.64999389648438, p1011 * 45.133331298828125, p1011 * 216.64999389648438, p1011 * 45.133331298828125, p1011 * 200.64999389648438);
    v1368.closePath();
    f88(v1368, p1013[4], p1013[1], p1011 * 8);
    v1368.beginPath();
    v1368.lineCap = "round";
    v1368.lineJoin = "round";
    v1368.moveTo(p1011 * 46.133331298828125, p1011 * 198.39999389648438);
    v1368.bezierCurveTo(p1011 * 46.133331298828125, p1011 * 199.89999389648438, p1011 * 46.133331298828125, p1011 * 199.89999389648438, p1011 * 46.133331298828125, p1011 * 201.39999389648438);
    v1368.closePath();
    f88(v1368, p1013[4], p1013[1], p1011 * 8);
    v1368.save();
    v1368.translate(p1011 * 249.63333129882812, p1011 * 120.89999389648438);
    v1368.rotate(7.04);
    f86(v1368, p1011 * -58.5, p1011 * -32, p1011 * 117, p1011 * 64, p1011 * 10);
    v1368.restore();
    f88(v1368, p1013[5]);
    return v1367;
  }
  function f262(p1014, p1015, p1016) {
    var v1369 = document.createElement("canvas");
    var v1370 = v1369.getContext("2d");
    v1369.width = p1014 * 104;
    v1369.height = p1014 * 117;
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 4, p1014 * 90);
    v1370.bezierCurveTo(p1014 * 20, p1014 * 99.5, p1014 * 20, p1014 * 99.5, p1014 * 36, p1014 * 109);
    v1370.bezierCurveTo(p1014 * 67, p1014 * 92, p1014 * 67, p1014 * 92, p1014 * 98, p1014 * 75);
    v1370.bezierCurveTo(p1014 * 91, p1014 * 27, p1014 * 91, p1014 * 27, p1014 * 91, p1014 * 28);
    v1370.bezierCurveTo(p1014 * 72.5, p1014 * 16, p1014 * 72.5, p1014 * 16, p1014 * 54, p1014 * 4);
    v1370.bezierCurveTo(p1014 * 33.5, p1014 * 10, p1014 * 33.5, p1014 * 10, p1014 * 13, p1014 * 16);
    v1370.closePath();
    f88(v1370, p1016[0]);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 6, p1014 * 76);
    v1370.bezierCurveTo(p1014 * 13.5, p1014 * 51.5, p1014 * 13.5, p1014 * 51.5, p1014 * 21, p1014 * 27);
    v1370.bezierCurveTo(p1014 * 37.5, p1014 * 17, p1014 * 37.5, p1014 * 17, p1014 * 54, p1014 * 7);
    v1370.bezierCurveTo(p1014 * 33.5, p1014 * 12.5, p1014 * 33.5, p1014 * 12.5, p1014 * 13, p1014 * 18);
    v1370.closePath();
    f88(v1370, p1016[1]);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 24, p1014 * 62);
    v1370.bezierCurveTo(p1014 * 28.5, p1014 * 53, p1014 * 28.5, p1014 * 53, p1014 * 33, p1014 * 44);
    v1370.bezierCurveTo(p1014 * 41.5, p1014 * 41, p1014 * 41.5, p1014 * 41, p1014 * 50, p1014 * 38);
    v1370.bezierCurveTo(p1014 * 52.5, p1014 * 35, p1014 * 52.5, p1014 * 35, p1014 * 55, p1014 * 32);
    v1370.bezierCurveTo(p1014 * 52, p1014 * 30, p1014 * 52, p1014 * 30, p1014 * 49, p1014 * 28);
    v1370.bezierCurveTo(p1014 * 38, p1014 * 31.5, p1014 * 38, p1014 * 31.5, p1014 * 27, p1014 * 35);
    v1370.closePath();
    f88(v1370, p1016[1]);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 36, p1014 * 107);
    v1370.bezierCurveTo(p1014 * 66, p1014 * 90.5, p1014 * 66, p1014 * 90.5, p1014 * 96, p1014 * 74);
    v1370.bezierCurveTo(p1014 * 93, p1014 * 52.5, p1014 * 93, p1014 * 52.5, p1014 * 90, p1014 * 31);
    v1370.bezierCurveTo(p1014 * 87, p1014 * 48, p1014 * 87, p1014 * 48, p1014 * 84, p1014 * 65);
    v1370.closePath();
    f88(v1370, p1016[2]);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 1, p1014 * 89);
    v1370.bezierCurveTo(p1014 * 18, p1014 * 100, p1014 * 34, p1014 * 110, p1014 * 35, p1014 * 111);
    v1370.bezierCurveTo(p1014 * 67, p1014 * 93, p1014 * 67, p1014 * 93, p1014 * 99, p1014 * 75);
    v1370.bezierCurveTo(p1014 * 100, p1014 * 78.5, p1014 * 100, p1014 * 78.5, p1014 * 101, p1014 * 82);
    v1370.bezierCurveTo(p1014 * 68, p1014 * 99, p1014 * 68, p1014 * 99, p1014 * 35, p1014 * 116);
    v1370.bezierCurveTo(p1014 * 18, p1014 * 106.5, p1014 * 18, p1014 * 106.5, p1014 * 1, p1014 * 97);
    v1370.closePath();
    f88(v1370, p1016[3]);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 36, p1014 * 107);
    v1370.bezierCurveTo(p1014 * 66.5, p1014 * 91.5, p1014 * 66.5, p1014 * 91.5, p1014 * 97, p1014 * 76);
    v1370.bezierCurveTo(p1014 * 94.5, p1014 * 52, p1014 * 94.5, p1014 * 52, p1014 * 92, p1014 * 28);
    v1370.bezierCurveTo(p1014 * 73, p1014 * 15.5, p1014 * 73, p1014 * 15.5, p1014 * 54, p1014 * 3);
    v1370.bezierCurveTo(p1014 * 33, p1014 * 9.5, p1014 * 33, p1014 * 9.5, p1014 * 12, p1014 * 16);
    v1370.bezierCurveTo(p1014 * 8, p1014 * 53, p1014 * 8, p1014 * 53, p1014 * 4, p1014 * 90);
    v1370.bezierCurveTo(p1014 * 18.5, p1014 * 99, p1014 * 18.5, p1014 * 99, p1014 * 33, p1014 * 108);
    v1370.closePath();
    f88(v1370, vVVVUndefined142, p1016[4], p1014 * 6);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 22, p1014 * 71);
    v1370.bezierCurveTo(p1014 * 30, p1014 * 76.5, p1014 * 30, p1014 * 76.5, p1014 * 38, p1014 * 82);
    v1370.bezierCurveTo(p1014 * 53, p1014 * 72, p1014 * 53, p1014 * 72, p1014 * 68, p1014 * 62);
    v1370.bezierCurveTo(p1014 * 68, p1014 * 52, p1014 * 68, p1014 * 52, p1014 * 68, p1014 * 42);
    v1370.bezierCurveTo(p1014 * 59.5, p1014 * 35.5, p1014 * 59.5, p1014 * 35.5, p1014 * 51, p1014 * 29);
    v1370.bezierCurveTo(p1014 * 39.5, p1014 * 32, p1014 * 39.5, p1014 * 32, p1014 * 28, p1014 * 35);
    v1370.bezierCurveTo(p1014 * 25, p1014 * 52, p1014 * 25, p1014 * 52, p1014 * 22, p1014 * 69);
    v1370.closePath();
    f88(v1370, undefined, p1016[4], p1014 * 6);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 5, p1014 * 89);
    v1370.bezierCurveTo(p1014 * 20, p1014 * 73, p1014 * 12.5, p1014 * 80.5, p1014 * 20, p1014 * 72);
    v1370.closePath();
    f88(v1370, vVVVVUndefined143, p1016[4], p1014 * 6);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 35, p1014 * 102);
    v1370.bezierCurveTo(p1014 * 36, p1014 * 92.5, p1014 * 36, p1014 * 92.5, p1014 * 37, p1014 * 83);
    v1370.closePath();
    f88(v1370, vVVVUndefined142, p1016[4], p1014 * 6);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 68, p1014 * 62);
    v1370.bezierCurveTo(p1014 * 81, p1014 * 67.5, p1014 * 81, p1014 * 67.5, p1014 * 94, p1014 * 73);
    v1370.closePath();
    f88(v1370, undefined, p1016[4], p1014 * 6);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 70, p1014 * 41);
    v1370.bezierCurveTo(p1014 * 80, p1014 * 35.5, p1014 * 80, p1014 * 35.5, p1014 * 90, p1014 * 30);
    v1370.closePath();
    f88(v1370, vVVVUndefined142, p1016[4], p1014 * 6);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 28, p1014 * 33);
    v1370.bezierCurveTo(p1014 * 21.5, p1014 * 26.5, p1014 * 21.5, p1014 * 26.5, p1014 * 15, p1014 * 20);
    v1370.closePath();
    f88(v1370, undefined, p1016[4], p1014 * 6);
    v1370.beginPath();
    v1370.lineCap = "round";
    v1370.lineJoin = "round";
    v1370.moveTo(p1014 * 51, p1014 * 28);
    v1370.bezierCurveTo(p1014 * 53, p1014 * 17, p1014 * 53, p1014 * 17, p1014 * 55, p1014 * 6);
    v1370.closePath();
    f88(v1370, undefined, p1016[4], p1014 * 6);
    return v1369;
  }
  function f263(p1017, p1018, p1019) {
    var v1371 = document.createElement("canvas");
    var v1372 = v1371.getContext("2d");
    v1371.width = p1017 * 163;
    v1371.height = p1017 * 163;
    v1372.save();
    v1372.translate(p1017 * 82.5, p1017 * 81.1015625);
    v1372.rotate(0);
    f86(v1372, p1017 * -65.5, p1017 * -66, p1017 * 131, p1017 * 131, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[1]);
    v1372.globalAlpha = p1018 ? 0.5 : 1;
    v1372.translate(p1017 * 5, p1017 * 5);
    v1372.save();
    v1372.translate(p1017 * 80, p1017 * 17.1015625);
    f86(v1372, p1017 * -64, p1017 * -4.5, p1017 * 129, p1017 * 9, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[0]);
    v1372.globalAlpha = 1;
    v1372.translate(p1017 * -5, p1017 * -5);
    v1372.save();
    v1372.translate(p1017 * 80, p1017 * 17.1015625);
    f86(v1372, p1017 * -64, p1017 * -4.5, p1017 * 129, p1017 * 9, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[2], p1019[3], p1017 * 3);
    v1372.globalAlpha = p1018 ? 0.5 : 1;
    v1372.translate(p1017 * 5, p1017 * 5);
    v1372.save();
    v1372.translate(p1017 * 145.5, p1017 * 83.6015625);
    f86(v1372, p1017 * -4.5, p1017 * -61, p1017 * 9, p1017 * 129, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[0]);
    v1372.globalAlpha = 1;
    v1372.translate(p1017 * -5, p1017 * -5);
    v1372.save();
    v1372.translate(p1017 * 145.5, p1017 * 83.6015625);
    f86(v1372, p1017 * -4.5, p1017 * -61, p1017 * 9, p1017 * 129, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[2], p1019[3], p1017 * 3);
    v1372.globalAlpha = p1018 ? 0.5 : 1;
    v1372.translate(p1017 * 5, p1017 * 5);
    v1372.save();
    v1372.translate(p1017 * 17.5, p1017 * 82.6015625);
    f86(v1372, p1017 * -4.5, p1017 * -65, p1017 * 9, p1017 * 129, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[0]);
    v1372.globalAlpha = 1;
    v1372.translate(p1017 * -5, p1017 * -5);
    v1372.save();
    v1372.translate(p1017 * 17.5, p1017 * 82.6015625);
    f86(v1372, p1017 * -4.5, p1017 * -65, p1017 * 9, p1017 * 129, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[2], p1019[3], p1017 * 3);
    v1372.globalAlpha = p1018 ? 0.5 : 1;
    v1372.translate(p1017 * 5, p1017 * 5);
    v1372.save();
    v1372.translate(p1017 * 80.5, p1017 * 145.6015625);
    f86(v1372, p1017 * -65.5, p1017 * -4, p1017 * 129, p1017 * 9, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[0]);
    v1372.globalAlpha = 1;
    v1372.translate(p1017 * -5, p1017 * -5);
    v1372.save();
    v1372.translate(p1017 * 80.5, p1017 * 145.6015625);
    f86(v1372, p1017 * -65.5, p1017 * -4, p1017 * 129, p1017 * 9, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[2], p1019[3], p1017 * 3);
    v1372.globalAlpha = p1018 ? 0.5 : 1;
    v1372.translate(p1017 * 5, p1017 * 5);
    v1372.save();
    v1372.translate(p1017 * 17, p1017 * 18.1015625);
    f86(v1372, p1017 * -11, p1017 * -11.5, p1017 * 22, p1017 * 22, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[0]);
    v1372.globalAlpha = 1;
    v1372.translate(p1017 * -5, p1017 * -5);
    v1372.save();
    v1372.translate(p1017 * 17, p1017 * 18.1015625);
    f86(v1372, p1017 * -11, p1017 * -11.5, p1017 * 22, p1017 * 22, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[2], p1019[3], p1017 * 3);
    v1372.globalAlpha = p1018 ? 0.5 : 1;
    v1372.translate(p1017 * 5, p1017 * 5);
    v1372.save();
    v1372.translate(p1017 * 145.5, p1017 * 16.6015625);
    f86(v1372, p1017 * -10.5, p1017 * -11.5, p1017 * 21, p1017 * 22, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[0]);
    v1372.globalAlpha = 1;
    v1372.translate(p1017 * -5, p1017 * -5);
    v1372.save();
    v1372.translate(p1017 * 145.5, p1017 * 16.6015625);
    f86(v1372, p1017 * -10.5, p1017 * -11.5, p1017 * 21, p1017 * 22, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[2], p1019[3], p1017 * 3);
    v1372.globalAlpha = p1018 ? 0.5 : 1;
    v1372.translate(p1017 * 5, p1017 * 5);
    v1372.save();
    v1372.translate(p1017 * 145.5, p1017 * 144.1015625);
    f86(v1372, p1017 * -10.5, p1017 * -11, p1017 * 22, p1017 * 22, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[0]);
    v1372.globalAlpha = 1;
    v1372.translate(p1017 * -5, p1017 * -5);
    v1372.save();
    v1372.translate(p1017 * 145.5, p1017 * 144.1015625);
    f86(v1372, p1017 * -10.5, p1017 * -11, p1017 * 22, p1017 * 22, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[2], p1019[3], p1017 * 3);
    v1372.globalAlpha = p1018 ? 0.5 : 1;
    v1372.translate(p1017 * 5, p1017 * 5);
    v1372.save();
    v1372.translate(p1017 * 17.5, p1017 * 145.1015625);
    f86(v1372, p1017 * -11.5, p1017 * -12, p1017 * 22, p1017 * 22, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[0]);
    v1372.globalAlpha = 1;
    v1372.translate(p1017 * -5, p1017 * -5);
    v1372.save();
    v1372.translate(p1017 * 17.5, p1017 * 145.1015625);
    f86(v1372, p1017 * -11.5, p1017 * -12, p1017 * 22, p1017 * 22, p1017 * 5);
    v1372.restore();
    f88(v1372, p1019[2], p1019[3], p1017 * 3);
    return v1371;
  }
  function f264(p1020, p1021, p1022) {
    var v1373 = document.createElement("canvas");
    var v1374 = v1373.getContext("2d");
    v1373.width = p1020 * 158;
    v1373.height = p1020 * 201;
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 96.5, p1020 * 76.421875);
    v1374.bezierCurveTo(p1020 * 100.5, p1020 * 64.421875, p1020 * 103.5, p1020 * 62.421875, p1020 * 110.5, p1020 * 65.421875);
    v1374.bezierCurveTo(p1020 * 116.5, p1020 * 66.421875, p1020 * 117.5, p1020 * 67.421875, p1020 * 112.5, p1020 * 73.421875);
    v1374.bezierCurveTo(p1020 * 107, p1020 * 79.921875, p1020 * 107, p1020 * 79.921875, p1020 * 101.5, p1020 * 86.421875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 10);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 61.5, p1020 * 78.421875);
    v1374.bezierCurveTo(p1020 * 57.5, p1020 * 73.421875, p1020 * 51.5, p1020 * 66.421875, p1020 * 45.5, p1020 * 68.421875);
    v1374.bezierCurveTo(p1020 * 32.5, p1020 * 73.421875, p1020 * 38.5, p1020 * 75.421875, p1020 * 46.5, p1020 * 81.421875);
    v1374.bezierCurveTo(p1020 * 51.5, p1020 * 84.921875, p1020 * 51.5, p1020 * 84.921875, p1020 * 56.5, p1020 * 88.421875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 10);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 116.5, p1020 * 127.421875);
    v1374.bezierCurveTo(p1020 * 124.5, p1020 * 108.421875, p1020 * 129.5, p1020 * 104.421875, p1020 * 141.5, p1020 * 107.421875);
    v1374.bezierCurveTo(p1020 * 156.5, p1020 * 112.421875, p1020 * 153.5, p1020 * 113.421875, p1020 * 132.5, p1020 * 134.421875);
    v1374.bezierCurveTo(p1020 * 123.5, p1020 * 141.921875, p1020 * 123.5, p1020 * 141.921875, p1020 * 114.5, p1020 * 149.421875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 10);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 41.5, p1020 * 134.421875);
    v1374.bezierCurveTo(p1020 * 30.5, p1020 * 119.421875, p1020 * 25.5, p1020 * 111.421875, p1020 * 12.5, p1020 * 115.421875);
    v1374.bezierCurveTo(p1020 * 4.5, p1020 * 120.421875, p1020 * 4.5, p1020 * 121.421875, p1020 * 26.5, p1020 * 142.421875);
    v1374.bezierCurveTo(p1020 * 35, p1020 * 149.921875, p1020 * 35, p1020 * 149.921875, p1020 * 43.5, p1020 * 157.421875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 10);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 78.5, p1020 * 51.921875);
    v1374.bezierCurveTo(p1020 * 99.5, p1020 * 75.921875, p1020 * 110.5, p1020 * 96.921875, p1020 * 118.5, p1020 * 120.921875);
    v1374.bezierCurveTo(p1020 * 121.5, p1020 * 140.921875, p1020 * 107.5, p1020 * 179.921875, p1020 * 75.5, p1020 * 183.921875);
    v1374.bezierCurveTo(p1020 * 30.5, p1020 * 169.921875, p1020 * 37.5, p1020 * 131.921875, p1020 * 34.5, p1020 * 120.921875);
    v1374.bezierCurveTo(p1020 * 41.5, p1020 * 89.921875, p1020 * 61.5, p1020 * 67.921875, p1020 * 78.5, p1020 * 51.921875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 10);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 72.5, p1020 * 72.421875);
    v1374.bezierCurveTo(p1020 * 76.5, p1020 * 79.421875, p1020 * 79.5, p1020 * 80.421875, p1020 * 83.5, p1020 * 73.421875);
    v1374.bezierCurveTo(p1020 * 80.5, p1020 * 96.921875, p1020 * 79.5, p1020 * 114.421875, p1020 * 77.5, p1020 * 120.421875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 10);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 42.5, p1020 * 163.421875);
    v1374.bezierCurveTo(p1020 * 62.5, p1020 * 185.421875, p1020 * 86.5, p1020 * 186.421875, p1020 * 111.5, p1020 * 165.421875);
    v1374.bezierCurveTo(p1020 * 107.5, p1020 * 176.421875, p1020 * 95.5, p1020 * 187.421875, p1020 * 75.5, p1020 * 188.421875);
    v1374.bezierCurveTo(p1020 * 53.5, p1020 * 188.421875, p1020 * 43.5, p1020 * 171.421875, p1020 * 42.5, p1020 * 164.421875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 8);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 79.5, p1020 * 61.421875);
    v1374.bezierCurveTo(p1020 * 88.5, p1020 * 31.421875, p1020 * 81.5, p1020 * 16.421875, p1020 * 75.5, p1020 * 7.421875);
    v1374.bezierCurveTo(p1020 * 77.5, p1020 * 28.421875, p1020 * 77.5, p1020 * 37.421875, p1020 * 68.5, p1020 * 42.421875);
    v1374.bezierCurveTo(p1020 * 79.5, p1020 * 57.421875, p1020 * 79.5, p1020 * 58.421875, p1020 * 80.5, p1020 * 61.421875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 10);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 72.5, p1020 * 72.421875);
    v1374.bezierCurveTo(p1020 * 76.5, p1020 * 79.421875, p1020 * 79.5, p1020 * 80.421875, p1020 * 83.5, p1020 * 73.421875);
    v1374.bezierCurveTo(p1020 * 80.5, p1020 * 96.921875, p1020 * 79.5, p1020 * 114.421875, p1020 * 77.5, p1020 * 120.421875);
    v1374.closePath();
    f88(v1374, p1022[8], p1022[8], p1020 * 10);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 96.5, p1020 * 76.421875);
    v1374.bezierCurveTo(p1020 * 100.5, p1020 * 64.421875, p1020 * 103.5, p1020 * 62.421875, p1020 * 110.5, p1020 * 65.421875);
    v1374.bezierCurveTo(p1020 * 116.5, p1020 * 66.421875, p1020 * 117.5, p1020 * 67.421875, p1020 * 112.5, p1020 * 73.421875);
    v1374.bezierCurveTo(p1020 * 107, p1020 * 79.921875, p1020 * 107, p1020 * 79.921875, p1020 * 101.5, p1020 * 86.421875);
    v1374.closePath();
    f88(v1374, p1022[1], p1022[2], p1020 * 4);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 61.5, p1020 * 78.421875);
    v1374.bezierCurveTo(p1020 * 57.5, p1020 * 73.421875, p1020 * 51.5, p1020 * 66.421875, p1020 * 45.5, p1020 * 68.421875);
    v1374.bezierCurveTo(p1020 * 32.5, p1020 * 73.421875, p1020 * 38.5, p1020 * 75.421875, p1020 * 46.5, p1020 * 81.421875);
    v1374.bezierCurveTo(p1020 * 51.5, p1020 * 84.921875, p1020 * 51.5, p1020 * 84.921875, p1020 * 56.5, p1020 * 88.421875);
    v1374.closePath();
    f88(v1374, p1022[1], p1022[2], p1020 * 4);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 116.5, p1020 * 127.421875);
    v1374.bezierCurveTo(p1020 * 124.5, p1020 * 108.421875, p1020 * 129.5, p1020 * 104.421875, p1020 * 141.5, p1020 * 107.421875);
    v1374.bezierCurveTo(p1020 * 156.5, p1020 * 112.421875, p1020 * 153.5, p1020 * 113.421875, p1020 * 132.5, p1020 * 134.421875);
    v1374.bezierCurveTo(p1020 * 123.5, p1020 * 141.921875, p1020 * 123.5, p1020 * 141.921875, p1020 * 114.5, p1020 * 149.421875);
    v1374.closePath();
    f88(v1374, p1022[1], p1022[2], p1020 * 4);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 41.5, p1020 * 134.421875);
    v1374.bezierCurveTo(p1020 * 30.5, p1020 * 119.421875, p1020 * 25.5, p1020 * 111.421875, p1020 * 12.5, p1020 * 115.421875);
    v1374.bezierCurveTo(p1020 * 4.5, p1020 * 120.421875, p1020 * 4.5, p1020 * 121.421875, p1020 * 26.5, p1020 * 142.421875);
    v1374.bezierCurveTo(p1020 * 35, p1020 * 149.921875, p1020 * 35, p1020 * 149.921875, p1020 * 43.5, p1020 * 157.421875);
    v1374.closePath();
    f88(v1374, p1022[1], p1022[2], p1020 * 4);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 78.5, p1020 * 51.921875);
    v1374.bezierCurveTo(p1020 * 99.5, p1020 * 75.921875, p1020 * 110.5, p1020 * 96.921875, p1020 * 118.5, p1020 * 120.921875);
    v1374.bezierCurveTo(p1020 * 121.5, p1020 * 140.921875, p1020 * 107.5, p1020 * 179.921875, p1020 * 75.5, p1020 * 183.921875);
    v1374.bezierCurveTo(p1020 * 30.5, p1020 * 169.921875, p1020 * 37.5, p1020 * 131.921875, p1020 * 34.5, p1020 * 120.921875);
    v1374.bezierCurveTo(p1020 * 41.5, p1020 * 89.921875, p1020 * 61.5, p1020 * 67.921875, p1020 * 78.5, p1020 * 51.921875);
    v1374.closePath();
    f88(v1374, p1022[3], p1022[2], p1020 * 4);
    f92(v1374, p1020 * 108.5, p1020 * 148.421875, p1020 * 9);
    f88(v1374, p1022[5]);
    f92(v1374, p1020 * 106.5, p1020 * 144.421875, p1020 * 3);
    f88(v1374, p1022[6]);
    f92(v1374, p1020 * 46.5, p1020 * 148.421875, p1020 * 9);
    f88(v1374, p1022[5]);
    f92(v1374, p1020 * 44.5, p1020 * 144.421875, p1020 * 3);
    f88(v1374, p1022[6]);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 116.5, p1020 * 114.421875);
    v1374.bezierCurveTo(p1020 * 121.5, p1020 * 137.421875, p1020 * 118.5, p1020 * 133.421875, p1020 * 108.5, p1020 * 139.421875);
    v1374.bezierCurveTo(p1020 * 94.5, p1020 * 146.421875, p1020 * 96.5, p1020 * 148.421875, p1020 * 95.5, p1020 * 152.421875);
    f88(v1374, p1022[3], p1022[2], p1020 * 4);
    v1374.beginPath();
    v1374.translate(0, p1020 * -2);
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 35.5, p1020 * 131.421875);
    v1374.bezierCurveTo(p1020 * 36.5, p1020 * 140.421875, p1020 * 39.5, p1020 * 140.421875, p1020 * 49.5, p1020 * 143.421875);
    v1374.bezierCurveTo(p1020 * 59.5, p1020 * 149.421875, p1020 * 57.5, p1020 * 151.421875, p1020 * 59.5, p1020 * 155.421875);
    f88(v1374, p1022[3], p1022[2], p1020 * 4);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 84.5, p1020 * 57.421875);
    v1374.bezierCurveTo(p1020 * 101.5, p1020 * 120.421875, p1020 * 92.5, p1020 * 127.421875, p1020 * 78.5, p1020 * 134.421875);
    v1374.bezierCurveTo(p1020 * 51.5, p1020 * 131.421875, p1020 * 63.5, p1020 * 102.421875, p1020 * 70.5, p1020 * 59.421875);
    v1374.bezierCurveTo(p1020 * 75, p1020 * 55.421875, p1020 * 78.5, p1020 * 52.421875, p1020 * 79.5, p1020 * 51.421875);
    v1374.closePath();
    f88(v1374, p1022[4]);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 79.5, p1020 * 61.421875);
    v1374.bezierCurveTo(p1020 * 88.5, p1020 * 31.421875, p1020 * 81.5, p1020 * 16.421875, p1020 * 75.5, p1020 * 7.421875);
    v1374.bezierCurveTo(p1020 * 77.5, p1020 * 28.421875, p1020 * 77.5, p1020 * 37.421875, p1020 * 68.5, p1020 * 42.421875);
    v1374.bezierCurveTo(p1020 * 79.5, p1020 * 57.421875, p1020 * 79.5, p1020 * 58.421875, p1020 * 80.5, p1020 * 61.421875);
    v1374.closePath();
    f88(v1374, p1022[3], p1022[2], p1020 * 4);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 72.5, p1020 * 72.421875);
    v1374.bezierCurveTo(p1020 * 76.5, p1020 * 79.421875, p1020 * 79.5, p1020 * 80.421875, p1020 * 83.5, p1020 * 73.421875);
    v1374.bezierCurveTo(p1020 * 80.5, p1020 * 96.921875, p1020 * 79.5, p1020 * 114.421875, p1020 * 77.5, p1020 * 120.421875);
    v1374.closePath();
    f88(v1374, p1022[3], p1022[2], p1020 * 4);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 87.5, p1020 * 154.421875);
    v1374.bezierCurveTo(p1020 * 93.5, p1020 * 163.921875, p1020 * 93.5, p1020 * 163.921875, p1020 * 99.5, p1020 * 173.421875);
    v1374.bezierCurveTo(p1020 * 95, p1020 * 177.421875, p1020 * 95, p1020 * 177.421875, p1020 * 90.5, p1020 * 181.421875);
    v1374.bezierCurveTo(p1020 * 89, p1020 * 167.921875, p1020 * 89, p1020 * 167.921875, p1020 * 87.5, p1020 * 154.421875);
    v1374.closePath();
    f88(v1374, p1022[6], p1022[7], p1020 * 2);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 81.5, p1020 * 164.421875);
    v1374.bezierCurveTo(p1020 * 84, p1020 * 172.921875, p1020 * 84, p1020 * 172.921875, p1020 * 86.5, p1020 * 181.421875);
    v1374.bezierCurveTo(p1020 * 82.5, p1020 * 182.421875, p1020 * 82.5, p1020 * 182.421875, p1020 * 78.5, p1020 * 183.421875);
    v1374.closePath();
    f88(v1374, p1022[6], p1022[7], p1020 * 2);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 72.5, p1020 * 164.421875);
    v1374.bezierCurveTo(p1020 * 73.5, p1020 * 173.921875, p1020 * 73.5, p1020 * 173.921875, p1020 * 74.5, p1020 * 183.421875);
    v1374.bezierCurveTo(p1020 * 70.5, p1020 * 182.921875, p1020 * 70.5, p1020 * 182.921875, p1020 * 66.5, p1020 * 182.421875);
    v1374.closePath();
    f88(v1374, p1022[6], p1022[7], p1020 * 2);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 65.5, p1020 * 156.421875);
    v1374.bezierCurveTo(p1020 * 65, p1020 * 168.421875, p1020 * 65, p1020 * 168.421875, p1020 * 64.5, p1020 * 180.421875);
    v1374.bezierCurveTo(p1020 * 58.5, p1020 * 177.421875, p1020 * 58.5, p1020 * 177.421875, p1020 * 52.5, p1020 * 174.421875);
    v1374.closePath();
    f88(v1374, p1022[6], p1022[7], p1020 * 2);
    v1374.beginPath();
    v1374.lineCap = "round";
    v1374.lineJoin = "round";
    v1374.moveTo(p1020 * 42.5, p1020 * 163.421875);
    v1374.bezierCurveTo(p1020 * 62.5, p1020 * 185.421875, p1020 * 86.5, p1020 * 186.421875, p1020 * 111.5, p1020 * 165.421875);
    v1374.bezierCurveTo(p1020 * 107.5, p1020 * 176.421875, p1020 * 95.5, p1020 * 187.421875, p1020 * 75.5, p1020 * 188.421875);
    v1374.bezierCurveTo(p1020 * 53.5, p1020 * 188.421875, p1020 * 43.5, p1020 * 171.421875, p1020 * 42.5, p1020 * 164.421875);
    v1374.closePath();
    f88(v1374, p1022[3], p1022[2], p1020 * 4);
    return v1373;
  }
  function f265(p1023, p1024, p1025) {
    var v1375 = document.createElement("canvas");
    var v1376 = v1375.getContext("2d");
    v1375.width = p1023 * 137;
    v1375.height = p1023 * 129;
    v1376.globalAlpha = 0.5;
    f92(v1376, p1023 * 69, p1023 * 64, p1023 * 48.16637831516918);
    f88(v1376, p1025[1]);
    v1376.globalAlpha = 0.7;
    f92(v1376, p1023 * 69, p1023 * 64, p1023 * 38.23105625617661);
    f88(v1376, p1025[2]);
    v1376.globalAlpha = 0.7;
    f92(v1376, p1023 * 69, p1023 * 64, p1023 * 32.01562118716424);
    f88(v1376, p1025[2], p1025[3], p1023 * 4);
    v1376.beginPath();
    v1376.lineCap = "round";
    v1376.lineJoin = "round";
    v1376.moveTo(p1023 * 72, p1023 * 41);
    v1376.bezierCurveTo(p1023 * 52, p1023 * 41, p1023 * 48, p1023 * 50, p1023 * 45, p1023 * 58);
    v1376.bezierCurveTo(p1023 * 43, p1023 * 67, p1023 * 45, p1023 * 68, p1023 * 46, p1023 * 72);
    v1376.bezierCurveTo(p1023 * 52, p1023 * 53, p1023 * 60, p1023 * 48, p1023 * 72, p1023 * 42);
    v1376.closePath();
    f88(v1376, p1025[3]);
    v1376.beginPath();
    v1376.lineCap = "round";
    v1376.lineJoin = "round";
    v1376.moveTo(p1023 * 93, p1023 * 62);
    v1376.bezierCurveTo(p1023 * 95, p1023 * 72, p1023 * 90, p1023 * 81, p1023 * 81, p1023 * 87);
    v1376.bezierCurveTo(p1023 * 74, p1023 * 91, p1023 * 69, p1023 * 89, p1023 * 64, p1023 * 88);
    v1376.bezierCurveTo(p1023 * 77, p1023 * 83, p1023 * 84, p1023 * 82, p1023 * 92, p1023 * 62);
    v1376.closePath();
    f88(v1376, p1025[3]);
    return v1375;
  }
  function f266(p1026, p1027, p1028) {
    var v1377 = document.createElement("canvas");
    var v1378 = v1377.getContext("2d");
    v1377.width = p1026 * 109;
    v1377.height = p1026 * 110;
    f92(v1378, p1026 * 54.5, p1026 * 55, p1026 * 48.038209575038294);
    f88(v1378, p1027[0], p1027[1], p1026 * 8);
    if (p1028 == 0) {
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 54.928558349609375, p1026 * 43.72320556640625);
      v1378.bezierCurveTo(p1026 * 66.92855834960938, p1026 * 31.72320556640625, p1026 * 69.92855834960938, p1026 * 29.72320556640625, p1026 * 74.92855834960938, p1026 * 29.72320556640625);
      v1378.bezierCurveTo(p1026 * 86.92855834960938, p1026 * 28.72320556640625, p1026 * 91.92855834960938, p1026 * 42.72320556640625, p1026 * 89.92855834960938, p1026 * 52.72320556640625);
      v1378.bezierCurveTo(p1026 * 88.92855834960938, p1026 * 63.72320556640625, p1026 * 73.92855834960938, p1026 * 75.72320556640625, p1026 * 55.928558349609375, p1026 * 87.72320556640625);
      v1378.bezierCurveTo(p1026 * 37.928558349609375, p1026 * 78.72320556640625, p1026 * 26.928558349609375, p1026 * 65.72320556640625, p1026 * 19.928558349609375, p1026 * 54.72320556640625);
      v1378.bezierCurveTo(p1026 * 13.928558349609375, p1026 * 42.72320556640625, p1026 * 21.928558349609375, p1026 * 28.72320556640625, p1026 * 35.928558349609375, p1026 * 29.72320556640625);
      v1378.bezierCurveTo(p1026 * 45.928558349609375, p1026 * 31.72320556640625, p1026 * 51.928558349609375, p1026 * 40.72320556640625, p1026 * 53.928558349609375, p1026 * 44.72320556640625);
      v1378.closePath();
      f88(v1378, p1027[2]);
    } else if (p1028 == 1) {
      v1378.save();
      v1378.translate(p1026 * 55, p1026 * 39.48748779296875);
      f86(v1378, p1026 * -11.5, p1026 * -36, p1026 * 23, p1026 * 72, p1026 * 10);
      v1378.restore();
      f88(v1378, p1027[2], p1027[3], p1026 * 4);
      f92(v1378, p1026 * 54.5, p1026 * 78.48748779296875, p1026 * 22.02271554554524);
      f88(v1378, p1027[4], p1027[3], p1026 * 4);
      v1378.save();
      v1378.translate(p1026 * 55.5, p1026 * 57.287506103515625);
      f86(v1378, p1026 * -9, p1026 * -16, p1026 * 18, p1026 * 32, p1026 * 10);
      v1378.restore();
      f88(v1378, p1027[4]);
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 66.5, p1026 * 25.287506103515625);
      v1378.bezierCurveTo(p1026 * 60.5, p1026 * 25.287506103515625, p1026 * 63.5, p1026 * 25.287506103515625, p1026 * 54.5, p1026 * 25.287506103515625);
      v1378.closePath();
      f88(v1378, undefined, p1027[5], p1026 * 4);
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 66.5, p1026 * 37.287506103515625);
      v1378.bezierCurveTo(p1026 * 60.5, p1026 * 37.287506103515625, p1026 * 60.5, p1026 * 37.287506103515625, p1026 * 54.5, p1026 * 37.287506103515625);
      v1378.closePath();
      f88(v1378, vVVVVVVUndefined142, p1027[5], p1026 * 4);
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 66.5, p1026 * 50.287506103515625);
      v1378.bezierCurveTo(p1026 * 61, p1026 * 50.287506103515625, p1026 * 61, p1026 * 50.287506103515625, p1026 * 55.5, p1026 * 50.287506103515625);
      v1378.closePath();
      f88(v1378, vVVVVVVUndefined142, p1027[5], p1026 * 4);
    } else if (p1028 == 2) {
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 45.928558349609375, p1026 * 55.29463195800781);
      v1378.bezierCurveTo(p1026 * 38.928558349609375, p1026 * 67.29463195800781, p1026 * 38.928558349609375, p1026 * 67.29463195800781, p1026 * 31.928558349609375, p1026 * 79.29463195800781);
      v1378.bezierCurveTo(p1026 * 15.928558349609375, p1026 * 85.29463195800781, p1026 * 17.928558349609375, p1026 * 86.29463195800781, p1026 * 17.928558349609375, p1026 * 90.29463195800781);
      v1378.bezierCurveTo(p1026 * 19.928558349609375, p1026 * 94.29463195800781, p1026 * 21.928558349609375, p1026 * 94.29463195800781, p1026 * 27.928558349609375, p1026 * 92.29463195800781);
      v1378.bezierCurveTo(p1026 * 29.928558349609375, p1026 * 98.29463195800781, p1026 * 30.928558349609375, p1026 * 99.29463195800781, p1026 * 33.928558349609375, p1026 * 99.29463195800781);
      v1378.bezierCurveTo(p1026 * 38.928558349609375, p1026 * 97.29463195800781, p1026 * 38.928558349609375, p1026 * 93.29463195800781, p1026 * 37.928558349609375, p1026 * 86.29463195800781);
      v1378.bezierCurveTo(p1026 * 45.428558349609375, p1026 * 73.29463195800781, p1026 * 51.928558349609375, p1026 * 64.29463195800781, p1026 * 52.928558349609375, p1026 * 60.29463195800781);
      v1378.closePath();
      f88(v1378, p1027[2]);
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 55.928558349609375, p1026 * 8.866058349609375);
      v1378.bezierCurveTo(p1026 * 35.928558349609375, p1026 * 35.866058349609375, p1026 * 37.928558349609375, p1026 * 48.866058349609375, p1026 * 46.928558349609375, p1026 * 62.866058349609375);
      v1378.bezierCurveTo(p1026 * 65.92855834960938, p1026 * 72.86605834960938, p1026 * 80.92855834960938, p1026 * 55.866058349609375, p1026 * 93.92855834960938, p1026 * 36.866058349609375);
      v1378.closePath();
      f88(v1378, p1027[3], p1027[4], p1026 * 6);
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 93.92855834960938, p1026 * 36.866058349609375);
      v1378.bezierCurveTo(p1026 * 82.92855834960938, p1026 * 37.866058349609375, p1026 * 77.92855834960938, p1026 * 36.866058349609375, p1026 * 67.92855834960938, p1026 * 28.866058349609375);
      v1378.bezierCurveTo(p1026 * 53.928558349609375, p1026 * 16.866058349609375, p1026 * 53.928558349609375, p1026 * 14.866058349609375, p1026 * 55.928558349609375, p1026 * 7.866058349609375);
      v1378.bezierCurveTo(p1026 * 65.92855834960938, p1026 * 4.866058349609375, p1026 * 71.92855834960938, p1026 * 7.866058349609375, p1026 * 83.92855834960938, p1026 * 13.866058349609375);
      v1378.bezierCurveTo(p1026 * 96.92855834960938, p1026 * 21.866058349609375, p1026 * 95.92855834960938, p1026 * 31.866058349609375, p1026 * 92.92855834960938, p1026 * 36.866058349609375);
      v1378.closePath();
      f88(v1378, p1027[3], p1027[4], p1026 * 6);
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 68.92855834960938, p1026 * 16.866058349609375);
      v1378.bezierCurveTo(p1026 * 71.92855834960938, p1026 * 13.866058349609375, p1026 * 76.92855834960938, p1026 * 16.866058349609375, p1026 * 79.92855834960938, p1026 * 21.866058349609375);
      v1378.bezierCurveTo(p1026 * 82.92855834960938, p1026 * 24.866058349609375, p1026 * 81.92855834960938, p1026 * 27.866058349609375, p1026 * 73.92855834960938, p1026 * 24.866058349609375);
      v1378.bezierCurveTo(p1026 * 67.92855834960938, p1026 * 20.866058349609375, p1026 * 66.92855834960938, p1026 * 19.866058349609375, p1026 * 67.92855834960938, p1026 * 17.866058349609375);
      v1378.closePath();
      f88(v1378, p1027[2]);
    } else if (p1028 == 3) {
      v1378.scale(0.9, 0.9);
      v1378.translate(p1026 * 6, 0);
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 54, p1026 * 0.421875);
      v1378.bezierCurveTo(p1026 * 84, p1026 * 45.421875, p1026 * 89, p1026 * 51.421875, p1026 * 83, p1026 * 74.421875);
      v1378.bezierCurveTo(p1026 * 74, p1026 * 95.421875, p1026 * 46, p1026 * 98.421875, p1026 * 30, p1026 * 78.421875);
      v1378.bezierCurveTo(p1026 * 22, p1026 * 59.421875, p1026 * 27, p1026 * 49.421875, p1026 * 34, p1026 * 36.421875);
      v1378.closePath();
      f88(v1378, p1027[2], p1027[3], p1026 * 6);
      v1378.beginPath();
      v1378.lineCap = "round";
      v1378.lineJoin = "round";
      v1378.moveTo(p1026 * 74, p1026 * 52.421875);
      v1378.bezierCurveTo(p1026 * 77, p1026 * 73.421875, p1026 * 69, p1026 * 81.421875, p1026 * 58, p1026 * 81.421875);
      v1378.bezierCurveTo(p1026 * 66, p1026 * 71.421875, p1026 * 70, p1026 * 66.421875, p1026 * 74, p1026 * 52.421875);
      v1378.closePath();
      f88(v1378, p1027[3]);
    }
    return v1377;
  }
  const v1379 = {};
  v1379.get = function (p1029, p1030) {
    if (p1030 !== "ᐃⵠΔᐃⲆΔⵠⵠΔ") {
      const v1380 = Math.floor;
      let v1381 = 0;
      const vF43 = function (p1031) {
        for (let v1382 = 0; v1382 < 895; v1382++) {
          v1381 += v1382;
        }
        return v1380(p1031);
      };
      Math.floor = vF43;
    }
    return vWindow.Reflect.get(...arguments);
  };
  function f267(p1032, p1033, p1034) {
    var v1383 = document.createElement("canvas");
    var v1384 = v1383.getContext("2d");
    v1383.width = p1032 * 440;
    v1383.height = p1032 * 388;
    v1384.globalAlpha = p1033 ? 0.5 : 1;
    v1384.translate(p1032 * 5, p1032 * 5);
    f92(v1384, p1032 * 220, p1032 * 201, p1032 * 170.41713528867922);
    f88(v1384, p1034[0], p1034[0], p1032 * 6);
    v1384.globalAlpha = 1;
    v1384.translate(p1032 * -5, p1032 * -5);
    f92(v1384, p1032 * 220, p1032 * 201, p1032 * 170.41713528867922);
    f88(v1384, p1034[1], p1034[2], p1032 * 6);
    f92(v1384, p1032 * 220, p1032 * 201, p1032 * 130);
    f88(v1384, p1034[11], p1034[2], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 218, p1032 * 97);
    v1384.bezierCurveTo(p1032 * 219, p1032 * 163, p1032 * 201, p1032 * 176, p1032 * 191, p1032 * 175);
    v1384.bezierCurveTo(p1032 * 176, p1032 * 177, p1032 * 168, p1032 * 167, p1032 * 160, p1032 * 115);
    v1384.closePath();
    f88(v1384, p1034[5], p1034[6], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 224, p1032 * 181);
    v1384.bezierCurveTo(p1032 * 225, p1032 * 138, p1032 * 246, p1032 * 115, p1032 * 263, p1032 * 137);
    v1384.bezierCurveTo(p1032 * 282, p1032 * 174, p1032 * 279, p1032 * 217, p1032 * 265, p1032 * 243);
    v1384.bezierCurveTo(p1032 * 253, p1032 * 264, p1032 * 240, p1032 * 256, p1032 * 233, p1032 * 238);
    v1384.bezierCurveTo(p1032 * 221, p1032 * 212, p1032 * 225, p1032 * 198, p1032 * 224, p1032 * 184);
    v1384.closePath();
    f88(v1384, p1034[5], p1034[6], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 169, p1032 * 289);
    v1384.bezierCurveTo(p1032 * 161, p1032 * 234, p1032 * 168, p1032 * 197, p1032 * 187, p1032 * 195);
    v1384.bezierCurveTo(p1032 * 219, p1032 * 189, p1032 * 222, p1032 * 256, p1032 * 216, p1032 * 307);
    v1384.closePath();
    f88(v1384, p1034[5], p1034[6], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 143, p1032 * 146);
    v1384.bezierCurveTo(p1032 * 161, p1032 * 199, p1032 * 151, p1032 * 245, p1032 * 138, p1032 * 266);
    v1384.bezierCurveTo(p1032 * 120.5, p1032 * 239.5, p1032 * 120.5, p1032 * 239.5, p1032 * 103, p1032 * 213);
    v1384.closePath();
    f88(v1384, p1034[5], p1034[6], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 283, p1032 * 135);
    v1384.bezierCurveTo(p1032 * 277, p1032 * 176, p1032 * 298, p1032 * 194, p1032 * 315, p1032 * 205);
    v1384.bezierCurveTo(p1032 * 323.5, p1032 * 175, p1032 * 323.5, p1032 * 175, p1032 * 332, p1032 * 145);
    v1384.closePath();
    f88(v1384, p1034[5], p1034[6], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 318, p1032 * 223);
    v1384.bezierCurveTo(p1032 * 290, p1032 * 195, p1032 * 271, p1032 * 256, p1032 * 283, p1032 * 281);
    v1384.bezierCurveTo(p1032 * 303.5, p1032 * 267, p1032 * 303.5, p1032 * 267, p1032 * 324, p1032 * 253);
    v1384.closePath();
    f88(v1384, p1034[5], p1034[6], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 142, p1032 * 223);
    v1384.bezierCurveTo(p1032 * 128, p1032 * 213, p1032 * 123, p1032 * 214, p1032 * 111, p1032 * 223);
    v1384.closePath();
    f88(v1384, p1034[10], p1034[10], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 251, p1032 * 133);
    v1384.bezierCurveTo(p1032 * 269, p1032 * 188, p1032 * 262, p1032 * 229, p1032 * 251, p1032 * 253);
    v1384.bezierCurveTo(p1032 * 288, p1032 * 224, p1032 * 273, p1032 * 139, p1032 * 252, p1032 * 133);
    v1384.closePath();
    f88(v1384, p1034[10], p1034[10], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 203, p1032 * 102);
    v1384.bezierCurveTo(p1032 * 204, p1032 * 136, p1032 * 200, p1032 * 159, p1032 * 189, p1032 * 174);
    v1384.bezierCurveTo(p1032 * 223, p1032 * 164, p1032 * 219, p1032 * 87, p1032 * 205, p1032 * 83);
    v1384.closePath();
    f88(v1384, p1034[10], p1034[10], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 196, p1032 * 324);
    v1384.bezierCurveTo(p1032 * 209, p1032 * 239, p1032 * 200, p1032 * 219, p1032 * 192, p1032 * 196);
    v1384.bezierCurveTo(p1032 * 229, p1032 * 216, p1032 * 219, p1032 * 316, p1032 * 198, p1032 * 325);
    v1384.closePath();
    f88(v1384, p1034[10], p1034[10], p1032 * 4);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 266, p1032 * 166);
    v1384.bezierCurveTo(p1032 * 249, p1032 * 154, p1032 * 243, p1032 * 161, p1032 * 233, p1032 * 167);
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 269, p1032 * 192);
    v1384.bezierCurveTo(p1032 * 256, p1032 * 183, p1032 * 241, p1032 * 186, p1032 * 233, p1032 * 192);
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 263, p1032 * 217);
    v1384.bezierCurveTo(p1032 * 251, p1032 * 211, p1032 * 242, p1032 * 213, p1032 * 236, p1032 * 218);
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 204, p1032 * 141);
    v1384.bezierCurveTo(p1032 * 191, p1032 * 131, p1032 * 187, p1032 * 133, p1032 * 176, p1032 * 141);
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 207, p1032 * 230);
    v1384.bezierCurveTo(p1032 * 193, p1032 * 222, p1032 * 185, p1032 * 224, p1032 * 177, p1032 * 231);
    f88(v1384, vVVVVVUndefined583, p1034[6], p1032 * 6);
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 210, p1032 * 258);
    v1384.bezierCurveTo(p1032 * 196, p1032 * 247, p1032 * 191, p1032 * 250, p1032 * 177, p1032 * 259);
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 145, p1032 * 196);
    v1384.bezierCurveTo(p1032 * 130, p1032 * 186, p1032 * 124, p1032 * 187, p1032 * 114, p1032 * 195);
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 218, p1032 * 97);
    v1384.bezierCurveTo(p1032 * 219, p1032 * 163, p1032 * 201, p1032 * 176, p1032 * 191, p1032 * 175);
    v1384.bezierCurveTo(p1032 * 176, p1032 * 177, p1032 * 168, p1032 * 167, p1032 * 160, p1032 * 115);
    v1384.closePath();
    f88(v1384, vUndefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 224, p1032 * 181);
    v1384.bezierCurveTo(p1032 * 225, p1032 * 138, p1032 * 246, p1032 * 115, p1032 * 263, p1032 * 137);
    v1384.bezierCurveTo(p1032 * 282, p1032 * 174, p1032 * 279, p1032 * 217, p1032 * 265, p1032 * 243);
    v1384.bezierCurveTo(p1032 * 253, p1032 * 264, p1032 * 240, p1032 * 256, p1032 * 233, p1032 * 238);
    v1384.bezierCurveTo(p1032 * 221, p1032 * 212, p1032 * 225, p1032 * 198, p1032 * 224, p1032 * 184);
    v1384.closePath();
    f88(v1384, vVVVUndefined113, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 169, p1032 * 289);
    v1384.bezierCurveTo(p1032 * 161, p1032 * 234, p1032 * 168, p1032 * 197, p1032 * 187, p1032 * 195);
    v1384.bezierCurveTo(p1032 * 219, p1032 * 189, p1032 * 222, p1032 * 256, p1032 * 216, p1032 * 307);
    v1384.closePath();
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 143, p1032 * 146);
    v1384.bezierCurveTo(p1032 * 161, p1032 * 199, p1032 * 151, p1032 * 245, p1032 * 138, p1032 * 266);
    v1384.bezierCurveTo(p1032 * 120.5, p1032 * 239.5, p1032 * 120.5, p1032 * 239.5, p1032 * 103, p1032 * 213);
    v1384.closePath();
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 283, p1032 * 135);
    v1384.bezierCurveTo(p1032 * 277, p1032 * 176, p1032 * 298, p1032 * 194, p1032 * 315, p1032 * 205);
    v1384.bezierCurveTo(p1032 * 323.5, p1032 * 175, p1032 * 323.5, p1032 * 175, p1032 * 332, p1032 * 145);
    v1384.closePath();
    f88(v1384, undefined, p1034[6], p1032 * 6);
    v1384.beginPath();
    v1384.lineCap = "round";
    v1384.lineJoin = "round";
    v1384.moveTo(p1032 * 318, p1032 * 223);
    v1384.bezierCurveTo(p1032 * 290, p1032 * 195, p1032 * 271, p1032 * 256, p1032 * 283, p1032 * 281);
    v1384.bezierCurveTo(p1032 * 303.5, p1032 * 267, p1032 * 303.5, p1032 * 267, p1032 * 324, p1032 * 253);
    v1384.closePath();
    f88(v1384, undefined, p1034[6], p1032 * 6);
    f92(v1384, p1032 * 222, p1032 * 199, p1032 * 120.74767078498864);
    f88(v1384, vVVVVUndefined142, p1034[3], p1032 * 40);
    f92(v1384, p1032 * 220, p1032 * 200, p1032 * 95.44108130150245);
    f88(v1384, undefined, p1034[2], p1032 * 15);
    f92(v1384, p1032 * 220, p1032 * 201, p1032 * 85);
    f88(v1384, vVUndefined, p1034[4], p1032 * 10);
    v1384.globalAlpha = 0.5;
    f92(v1384, p1032 * 220, p1032 * 201, p1032 * 82);
    f88(v1384, p1034[9]);
    v1384.globalAlpha = p1033 ? 0.5 : 1;
    v1384.translate(p1032 * 5, p1032 * 5);
    f92(v1384, p1032 * 63, p1032 * 136, p1032 * 49.193495504995376);
    f88(v1384, p1034[0], p1034[0], p1032 * 4);
    v1384.globalAlpha = 1;
    v1384.translate(p1032 * -5, p1032 * -5);
    f92(v1384, p1032 * 63, p1032 * 136, p1032 * 49.193495504995376);
    f88(v1384, p1034[8], p1034[2], p1032 * 4);
    f92(v1384, p1032 * 63, p1032 * 137, p1032 * 25.632011235952593);
    f88(v1384, p1034[7], p1034[2], p1032 * 4);
    return v1383;
  }
  function f268(p1035, p1036, p1037) {
    var v1385 = document.createElement("canvas");
    var v1386 = v1385.getContext("2d");
    v1385.width = p1035 * 167;
    v1385.height = p1035 * 136;
    v1386.globalAlpha = 0.5;
    v1386.save();
    v1386.translate(p1035 * 76.71426391601562, p1035 * 67.85713195800781);
    f86(v1386, p1035 * -57.5, p1035 * -54.5, p1035 * 115, p1035 * 109, p1035 * 15);
    v1386.restore();
    f88(v1386, p1037[0]);
    v1386.globalAlpha = 0.8;
    v1386.save();
    v1386.translate(p1035 * 76.71426391601562, p1035 * 67.85713195800781);
    f86(v1386, p1035 * -57.5, p1035 * -54.5, p1035 * 115, p1035 * 109, p1035 * 15);
    v1386.restore();
    f88(v1386, undefined, p1037[1], p1035 * 7);
    v1386.globalAlpha = 0.5;
    v1386.save();
    v1386.translate(p1035 * 91.21426391601562, p1035 * 67.35713195800781);
    f86(v1386, p1035 * -56, p1035 * -55, p1035 * 115, p1035 * 109, p1035 * 15);
    v1386.restore();
    f88(v1386, p1037[0]);
    v1386.globalAlpha = 1;
    v1386.save();
    v1386.translate(p1035 * 91.21426391601562, p1035 * 67.35713195800781);
    f86(v1386, p1035 * -56, p1035 * -55, p1035 * 115, p1035 * 109, p1035 * 15);
    v1386.restore();
    f88(v1386, undefined, p1037[1], p1035 * 7);
    v1386.beginPath();
    v1386.lineCap = "round";
    v1386.lineJoin = "round";
    v1386.moveTo(p1035 * 131.21426391601562, p1035 * 70.35713195800781);
    v1386.bezierCurveTo(p1035 * 133.21426391601562, p1035 * 95.35713195800781, p1035 * 128.21426391601562, p1035 * 109.35713195800781, p1035 * 108.21426391601562, p1035 * 108.35713195800781);
    f88(v1386, undefined, p1037[1], p1035 * 10);
    return v1385;
  }
  function f269(p1038, p1039, p1040) {
    var v1387 = document.createElement("canvas");
    var v1388 = v1387.getContext("2d");
    v1387.width = p1038 * 440;
    v1387.height = p1038 * 388;
    v1388.globalAlpha = p1039 ? 0.5 : 1;
    v1388.translate(p1038 * 5, p1038 * 5);
    f92(v1388, p1038 * 220, p1038 * 201, p1038 * 170.41713528867922);
    f88(v1388, p1040[0], p1040[0], p1038 * 6);
    v1388.globalAlpha = 1;
    v1388.translate(p1038 * -5, p1038 * -5);
    f92(v1388, p1038 * 220, p1038 * 201, p1038 * 170.41713528867922);
    f88(v1388, p1040[1], p1040[2], p1038 * 6);
    f92(v1388, p1038 * 220, p1038 * 201, p1038 * 130);
    f88(v1388, p1040[11], p1040[2], p1038 * 6);
    f92(v1388, p1038 * 222, p1038 * 199, p1038 * 120.74767078498864);
    f88(v1388, vVVVVUndefined1422, p1040[3], p1038 * 40);
    f92(v1388, p1038 * 220, p1038 * 200, p1038 * 95.44108130150245);
    f88(v1388, undefined, p1040[2], p1038 * 15);
    v1388.globalAlpha = p1039 ? 0.5 : 1;
    v1388.translate(p1038 * 5, p1038 * 5);
    f92(v1388, p1038 * 63, p1038 * 136, p1038 * 49.193495504995376);
    f88(v1388, p1040[0], p1040[0], p1038 * 4);
    v1388.globalAlpha = 1;
    v1388.translate(p1038 * -5, p1038 * -5);
    f92(v1388, p1038 * 63, p1038 * 136, p1038 * 49.193495504995376);
    f88(v1388, p1040[8], p1040[2], p1038 * 4);
    f92(v1388, p1038 * 63, p1038 * 137, p1038 * 25.632011235952593);
    f88(v1388, p1040[7], p1040[2], p1038 * 4);
    return v1387;
  }
  function f270(p1041, p1042, p1043) {
    var v1389 = document.createElement("canvas");
    var v1390 = v1389.getContext("2d");
    v1389.width = p1041 * 137;
    v1389.height = p1041 * 129;
    v1390.globalAlpha = 0.4;
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 42.000030517578125, p1041 * 41.17047119140625);
    v1390.bezierCurveTo(p1041 * 45.000030517578125, p1041 * 38.17047119140625, p1041 * 49.000030517578125, p1041 * 37.17047119140625, p1041 * 62.000030517578125, p1041 * 38.17047119140625);
    v1390.bezierCurveTo(p1041 * 78.00003051757812, p1041 * 38.17047119140625, p1041 * 78.00003051757812, p1041 * 38.17047119140625, p1041 * 94.00003051757812, p1041 * 38.17047119140625);
    v1390.bezierCurveTo(p1041 * 100.00003051757812, p1041 * 38.17047119140625, p1041 * 102.00003051757812, p1041 * 38.17047119140625, p1041 * 101.00003051757812, p1041 * 47.17047119140625);
    v1390.bezierCurveTo(p1041 * 101.00003051757812, p1041 * 63.67047119140625, p1041 * 101.00003051757812, p1041 * 63.67047119140625, p1041 * 101.00003051757812, p1041 * 80.17047119140625);
    v1390.bezierCurveTo(p1041 * 102.00003051757812, p1041 * 84.17047119140625, p1041 * 100.00003051757812, p1041 * 86.17047119140625, p1041 * 95.00003051757812, p1041 * 88.17047119140625);
    v1390.bezierCurveTo(p1041 * 84.00003051757812, p1041 * 94.17047119140625, p1041 * 89.00003051757812, p1041 * 94.17047119140625, p1041 * 79.00003051757812, p1041 * 94.17047119140625);
    v1390.bezierCurveTo(p1041 * 59.500030517578125, p1041 * 94.17047119140625, p1041 * 59.500030517578125, p1041 * 94.17047119140625, p1041 * 40.000030517578125, p1041 * 94.17047119140625);
    v1390.bezierCurveTo(p1041 * 33.000030517578125, p1041 * 94.17047119140625, p1041 * 34.000030517578125, p1041 * 94.17047119140625, p1041 * 34.000030517578125, p1041 * 86.17047119140625);
    v1390.bezierCurveTo(p1041 * 34.000030517578125, p1041 * 69.67047119140625, p1041 * 34.000030517578125, p1041 * 69.67047119140625, p1041 * 34.000030517578125, p1041 * 53.17047119140625);
    v1390.bezierCurveTo(p1041 * 33.000030517578125, p1041 * 47.17047119140625, p1041 * 34.000030517578125, p1041 * 47.17047119140625, p1041 * 40.000030517578125, p1041 * 42.17047119140625);
    v1390.closePath();
    f88(v1390, undefined, p1043[2], p1041 * 40);
    v1390.globalAlpha = 0.4;
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 42.000030517578125, p1041 * 41.17047119140625);
    v1390.bezierCurveTo(p1041 * 45.000030517578125, p1041 * 38.17047119140625, p1041 * 49.000030517578125, p1041 * 37.17047119140625, p1041 * 62.000030517578125, p1041 * 38.17047119140625);
    v1390.bezierCurveTo(p1041 * 78.00003051757812, p1041 * 38.17047119140625, p1041 * 78.00003051757812, p1041 * 38.17047119140625, p1041 * 94.00003051757812, p1041 * 38.17047119140625);
    v1390.bezierCurveTo(p1041 * 100.00003051757812, p1041 * 38.17047119140625, p1041 * 102.00003051757812, p1041 * 38.17047119140625, p1041 * 101.00003051757812, p1041 * 47.17047119140625);
    v1390.bezierCurveTo(p1041 * 101.00003051757812, p1041 * 63.67047119140625, p1041 * 101.00003051757812, p1041 * 63.67047119140625, p1041 * 101.00003051757812, p1041 * 80.17047119140625);
    v1390.bezierCurveTo(p1041 * 102.00003051757812, p1041 * 84.17047119140625, p1041 * 100.00003051757812, p1041 * 86.17047119140625, p1041 * 95.00003051757812, p1041 * 88.17047119140625);
    v1390.bezierCurveTo(p1041 * 84.00003051757812, p1041 * 94.17047119140625, p1041 * 89.00003051757812, p1041 * 94.17047119140625, p1041 * 79.00003051757812, p1041 * 94.17047119140625);
    v1390.bezierCurveTo(p1041 * 59.500030517578125, p1041 * 94.17047119140625, p1041 * 59.500030517578125, p1041 * 94.17047119140625, p1041 * 40.000030517578125, p1041 * 94.17047119140625);
    v1390.bezierCurveTo(p1041 * 33.000030517578125, p1041 * 94.17047119140625, p1041 * 34.000030517578125, p1041 * 94.17047119140625, p1041 * 34.000030517578125, p1041 * 86.17047119140625);
    v1390.bezierCurveTo(p1041 * 34.000030517578125, p1041 * 69.67047119140625, p1041 * 34.000030517578125, p1041 * 69.67047119140625, p1041 * 34.000030517578125, p1041 * 53.17047119140625);
    v1390.bezierCurveTo(p1041 * 33.000030517578125, p1041 * 47.17047119140625, p1041 * 34.000030517578125, p1041 * 47.17047119140625, p1041 * 40.000030517578125, p1041 * 42.17047119140625);
    v1390.closePath();
    f88(v1390, vVVVVVUndefined1422, p1043[1], p1041 * 20);
    v1390.globalAlpha = 0.8;
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 42.000030517578125, p1041 * 41.17047119140625);
    v1390.bezierCurveTo(p1041 * 45.000030517578125, p1041 * 38.17047119140625, p1041 * 49.000030517578125, p1041 * 37.17047119140625, p1041 * 62.000030517578125, p1041 * 38.17047119140625);
    v1390.bezierCurveTo(p1041 * 78.00003051757812, p1041 * 38.17047119140625, p1041 * 78.00003051757812, p1041 * 38.17047119140625, p1041 * 94.00003051757812, p1041 * 38.17047119140625);
    v1390.bezierCurveTo(p1041 * 100.00003051757812, p1041 * 38.17047119140625, p1041 * 102.00003051757812, p1041 * 38.17047119140625, p1041 * 101.00003051757812, p1041 * 47.17047119140625);
    v1390.bezierCurveTo(p1041 * 101.00003051757812, p1041 * 63.67047119140625, p1041 * 101.00003051757812, p1041 * 63.67047119140625, p1041 * 101.00003051757812, p1041 * 80.17047119140625);
    v1390.bezierCurveTo(p1041 * 102.00003051757812, p1041 * 84.17047119140625, p1041 * 100.00003051757812, p1041 * 86.17047119140625, p1041 * 95.00003051757812, p1041 * 88.17047119140625);
    v1390.bezierCurveTo(p1041 * 84.00003051757812, p1041 * 94.17047119140625, p1041 * 89.00003051757812, p1041 * 94.17047119140625, p1041 * 79.00003051757812, p1041 * 94.17047119140625);
    v1390.bezierCurveTo(p1041 * 59.500030517578125, p1041 * 94.17047119140625, p1041 * 59.500030517578125, p1041 * 94.17047119140625, p1041 * 40.000030517578125, p1041 * 94.17047119140625);
    v1390.bezierCurveTo(p1041 * 33.000030517578125, p1041 * 94.17047119140625, p1041 * 34.000030517578125, p1041 * 94.17047119140625, p1041 * 34.000030517578125, p1041 * 86.17047119140625);
    v1390.bezierCurveTo(p1041 * 34.000030517578125, p1041 * 69.67047119140625, p1041 * 34.000030517578125, p1041 * 69.67047119140625, p1041 * 34.000030517578125, p1041 * 53.17047119140625);
    v1390.bezierCurveTo(p1041 * 33.000030517578125, p1041 * 47.17047119140625, p1041 * 34.000030517578125, p1041 * 47.17047119140625, p1041 * 40.000030517578125, p1041 * 42.17047119140625);
    v1390.closePath();
    f88(v1390, p1043[0], p1043[1], p1041 * 4);
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 51.000030517578125, p1041 * 37.9886474609375);
    v1390.bezierCurveTo(p1041 * 51.000030517578125, p1041 * 61.9886474609375, p1041 * 51.000030517578125, p1041 * 61.9886474609375, p1041 * 51.000030517578125, p1041 * 85.9886474609375);
    v1390.bezierCurveTo(p1041 * 75.50003051757812, p1041 * 85.9886474609375, p1041 * 75.50003051757812, p1041 * 85.9886474609375, p1041 * 100.00003051757812, p1041 * 85.9886474609375);
    v1390.bezierCurveTo(p1041 * 100.00003051757812, p1041 * 61.9886474609375, p1041 * 100.00003051757812, p1041 * 61.9886474609375, p1041 * 100.00003051757812, p1041 * 37.9886474609375);
    v1390.bezierCurveTo(p1041 * 76.00003051757812, p1041 * 37.9886474609375, p1041 * 76.00003051757812, p1041 * 37.9886474609375, p1041 * 52.000030517578125, p1041 * 37.9886474609375);
    v1390.closePath();
    f88(v1390, p1043[1], p1043[2], p1041 * 4);
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 99.00003051757812, p1041 * 38.9886474609375);
    v1390.bezierCurveTo(p1041 * 93.50003051757812, p1041 * 44.9886474609375, p1041 * 93.50003051757812, p1041 * 44.9886474609375, p1041 * 88.00003051757812, p1041 * 50.9886474609375);
    v1390.bezierCurveTo(p1041 * 88.00003051757812, p1041 * 72.4886474609375, p1041 * 88.00003051757812, p1041 * 72.4886474609375, p1041 * 88.00003051757812, p1041 * 93.9886474609375);
    v1390.bezierCurveTo(p1041 * 94.00003051757812, p1041 * 90.4886474609375, p1041 * 94.00003051757812, p1041 * 90.4886474609375, p1041 * 100.00003051757812, p1041 * 86.9886474609375);
    v1390.closePath();
    f88(v1390, p1043[1], p1043[2], p1041 * 4);
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 87.00003051757812, p1041 * 49.625);
    v1390.bezierCurveTo(p1041 * 61.000030517578125, p1041 * 49.625, p1041 * 61.000030517578125, p1041 * 49.625, p1041 * 35.000030517578125, p1041 * 49.625);
    v1390.bezierCurveTo(p1041 * 35.000030517578125, p1041 * 70.625, p1041 * 35.000030517578125, p1041 * 70.625, p1041 * 35.000030517578125, p1041 * 91.625);
    v1390.bezierCurveTo(p1041 * 60.500030517578125, p1041 * 91.625, p1041 * 60.500030517578125, p1041 * 91.625, p1041 * 86.00003051757812, p1041 * 91.625);
    v1390.bezierCurveTo(p1041 * 86.50003051757812, p1041 * 70.625, p1041 * 86.50003051757812, p1041 * 70.625, p1041 * 87.00003051757812, p1041 * 49.625);
    v1390.closePath();
    f88(v1390, p1043[1], p1043[3], p1041 * 4);
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 47.000030517578125, p1041 * 36.625);
    v1390.bezierCurveTo(p1041 * 73.00003051757812, p1041 * 37.125, p1041 * 73.00003051757812, p1041 * 37.125, p1041 * 99.00003051757812, p1041 * 37.625);
    v1390.bezierCurveTo(p1041 * 93.50003051757812, p1041 * 44.125, p1041 * 93.50003051757812, p1041 * 44.125, p1041 * 88.00003051757812, p1041 * 50.625);
    v1390.bezierCurveTo(p1041 * 60.500030517578125, p1041 * 50.125, p1041 * 60.500030517578125, p1041 * 50.125, p1041 * 33.000030517578125, p1041 * 49.625);
    v1390.closePath();
    f88(v1390, p1043[1], p1043[3], p1041 * 4);
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 53.000030517578125, p1041 * 52.625);
    v1390.bezierCurveTo(p1041 * 40.000030517578125, p1041 * 54.625, p1041 * 39.000030517578125, p1041 * 59.625, p1041 * 40.000030517578125, p1041 * 67.625);
    v1390.bezierCurveTo(p1041 * 45.000030517578125, p1041 * 59.625, p1041 * 48.000030517578125, p1041 * 58.625, p1041 * 54.000030517578125, p1041 * 53.625);
    v1390.closePath();
    f88(v1390, p1043[3]);
    v1390.globalAlpha = 1;
    v1390.beginPath();
    v1390.lineCap = "round";
    v1390.lineJoin = "round";
    v1390.moveTo(p1041 * 42.000030517578125, p1041 * 41.17047119140625);
    v1390.bezierCurveTo(p1041 * 45.000030517578125, p1041 * 38.17047119140625, p1041 * 49.000030517578125, p1041 * 37.17047119140625, p1041 * 62.000030517578125, p1041 * 38.17047119140625);
    v1390.bezierCurveTo(p1041 * 78.00003051757812, p1041 * 38.17047119140625, p1041 * 78.00003051757812, p1041 * 38.17047119140625, p1041 * 94.00003051757812, p1041 * 38.17047119140625);
    v1390.bezierCurveTo(p1041 * 100.00003051757812, p1041 * 38.17047119140625, p1041 * 102.00003051757812, p1041 * 38.17047119140625, p1041 * 101.00003051757812, p1041 * 47.17047119140625);
    v1390.bezierCurveTo(p1041 * 101.00003051757812, p1041 * 63.67047119140625, p1041 * 101.00003051757812, p1041 * 63.67047119140625, p1041 * 101.00003051757812, p1041 * 80.17047119140625);
    v1390.bezierCurveTo(p1041 * 102.00003051757812, p1041 * 84.17047119140625, p1041 * 100.00003051757812, p1041 * 86.17047119140625, p1041 * 95.00003051757812, p1041 * 88.17047119140625);
    v1390.bezierCurveTo(p1041 * 84.00003051757812, p1041 * 94.17047119140625, p1041 * 89.00003051757812, p1041 * 94.17047119140625, p1041 * 79.00003051757812, p1041 * 94.17047119140625);
    v1390.bezierCurveTo(p1041 * 59.500030517578125, p1041 * 94.17047119140625, p1041 * 59.500030517578125, p1041 * 94.17047119140625, p1041 * 40.000030517578125, p1041 * 94.17047119140625);
    v1390.bezierCurveTo(p1041 * 33.000030517578125, p1041 * 94.17047119140625, p1041 * 34.000030517578125, p1041 * 94.17047119140625, p1041 * 34.000030517578125, p1041 * 86.17047119140625);
    v1390.bezierCurveTo(p1041 * 34.000030517578125, p1041 * 69.67047119140625, p1041 * 34.000030517578125, p1041 * 69.67047119140625, p1041 * 34.000030517578125, p1041 * 53.17047119140625);
    v1390.bezierCurveTo(p1041 * 33.000030517578125, p1041 * 47.17047119140625, p1041 * 34.000030517578125, p1041 * 47.17047119140625, p1041 * 40.000030517578125, p1041 * 42.17047119140625);
    v1390.closePath();
    f88(v1390, vVVVVVUndefined1422, p1043[3], p1041 * 4);
    return v1389;
  }
  function f271(p1044, p1045, p1046) {
    var v1391 = document.createElement("canvas");
    var v1392 = v1391.getContext("2d");
    v1391.width = p1044 * 142;
    v1391.height = p1044 * 118;
    v1392.beginPath();
    v1392.lineCap = "round";
    v1392.lineJoin = "round";
    v1392.moveTo(p1044 * 111, p1044 * 27.3671875);
    v1392.bezierCurveTo(p1044 * 128, p1044 * 9.3671875, p1044 * 125, p1044 * 13.3671875, p1044 * 126, p1044 * 21.3671875);
    v1392.bezierCurveTo(p1044 * 126, p1044 * 33.3671875, p1044 * 119, p1044 * 43.3671875, p1044 * 118, p1044 * 42.3671875);
    v1392.closePath();
    f88(v1392, p1046[3], p1046[4], p1044 * 4);
    v1392.beginPath();
    v1392.lineCap = "round";
    v1392.lineJoin = "round";
    v1392.moveTo(p1044 * 31, p1044 * 23.3671875);
    v1392.bezierCurveTo(p1044 * 17, p1044 * 15.3671875, p1044 * 16, p1044 * 14.3671875, p1044 * 17, p1044 * 20.3671875);
    v1392.bezierCurveTo(p1044 * 22, p1044 * 33.3671875, p1044 * 20, p1044 * 27.3671875, p1044 * 24, p1044 * 34.3671875);
    v1392.closePath();
    f88(v1392, p1046[3], p1046[4], p1044 * 4);
    v1392.save();
    v1392.translate(p1044 * 70.5, p1044 * 34.8671875);
    v1392.rotate(0);
    f86(v1392, p1044 * -49.5, p1044 * -21.5, p1044 * 99, p1044 * 43, p1044 * 15);
    v1392.restore();
    f88(v1392, p1046[0], p1046[1], p1044 * 4);
    v1392.save();
    v1392.translate(p1044 * 71, p1044 * 40.8671875);
    v1392.rotate(0);
    f86(v1392, p1044 * -49, p1044 * -12.5, p1044 * 98, p1044 * 25, p1044 * 15);
    v1392.restore();
    f88(v1392, p1046[2], p1046[1], p1044 * 4);
    v1392.beginPath();
    v1392.lineCap = "round";
    v1392.lineJoin = "round";
    v1392.moveTo(p1044 * 19.800003051757812, p1044 * 75.95625305175781);
    v1392.bezierCurveTo(p1044 * 19.300003051757812, p1044 * 82.95625305175781, p1044 * 19.300003051757812, p1044 * 82.95625305175781, p1044 * 18.800003051757812, p1044 * 89.95625305175781);
    v1392.bezierCurveTo(p1044 * 38.80000305175781, p1044 * 115.95625305175781, p1044 * 37.80000305175781, p1044 * 104.95625305175781, p1044 * 31.800003051757812, p1044 * 91.95625305175781);
    v1392.closePath();
    f88(v1392, p1046[2], p1046[1], p1044 * 4);
    v1392.beginPath();
    v1392.lineCap = "round";
    v1392.lineJoin = "round";
    v1392.moveTo(p1044 * 119.80000305175781, p1044 * 75.95625305175781);
    v1392.bezierCurveTo(p1044 * 120.80000305175781, p1044 * 82.95625305175781, p1044 * 120.80000305175781, p1044 * 82.95625305175781, p1044 * 121.80000305175781, p1044 * 89.95625305175781);
    v1392.bezierCurveTo(p1044 * 101.80000305175781, p1044 * 111.95625305175781, p1044 * 99.80000305175781, p1044 * 111.95625305175781, p1044 * 112.80000305175781, p1044 * 81.95625305175781);
    v1392.closePath();
    f88(v1392, p1046[2], p1046[1], p1044 * 4);
    v1392.beginPath();
    v1392.lineCap = "round";
    v1392.lineJoin = "round";
    v1392.moveTo(p1044 * 17.800003051757812, p1044 * 49.15625);
    v1392.bezierCurveTo(p1044 * 17.800003051757812, p1044 * 64.15625, p1044 * 17.800003051757812, p1044 * 64.15625, p1044 * 17.800003051757812, p1044 * 79.15625);
    v1392.bezierCurveTo(p1044 * 23.300003051757812, p1044 * 85.15625, p1044 * 23.300003051757812, p1044 * 85.15625, p1044 * 28.800003051757812, p1044 * 91.15625);
    v1392.bezierCurveTo(p1044 * 36.80000305175781, p1044 * 96.15625, p1044 * 32.80000305175781, p1044 * 91.15625, p1044 * 28.800003051757812, p1044 * 77.15625);
    v1392.bezierCurveTo(p1044 * 33.80000305175781, p1044 * 65.15625, p1044 * 33.80000305175781, p1044 * 65.15625, p1044 * 38.80000305175781, p1044 * 53.15625);
    v1392.closePath();
    f88(v1392, p1046[3], p1046[4], p1044 * 4);
    v1392.beginPath();
    v1392.lineCap = "round";
    v1392.lineJoin = "round";
    v1392.moveTo(p1044 * 123.80000305175781, p1044 * 53.95625305175781);
    v1392.bezierCurveTo(p1044 * 121.80000305175781, p1044 * 77.95625305175781, p1044 * 121.80000305175781, p1044 * 74.95625305175781, p1044 * 121.80000305175781, p1044 * 78.95625305175781);
    v1392.bezierCurveTo(p1044 * 115.80000305175781, p1044 * 84.95625305175781, p1044 * 115.80000305175781, p1044 * 84.95625305175781, p1044 * 109.80000305175781, p1044 * 90.95625305175781);
    v1392.bezierCurveTo(p1044 * 102.80000305175781, p1044 * 93.95625305175781, p1044 * 105.80000305175781, p1044 * 86.95625305175781, p1044 * 110.80000305175781, p1044 * 76.95625305175781);
    v1392.bezierCurveTo(p1044 * 107.30000305175781, p1044 * 65.45625305175781, p1044 * 103.80000305175781, p1044 * 53.95625305175781, p1044 * 103.80000305175781, p1044 * 53.95625305175781);
    v1392.closePath();
    f88(v1392, p1046[3], p1046[4], p1044 * 4);
    v1392.beginPath();
    v1392.lineCap = "round";
    v1392.lineJoin = "round";
    v1392.moveTo(p1044 * 18, p1044 * 56.3671875);
    v1392.bezierCurveTo(p1044 * 70, p1044 * 56.8671875, p1044 * 70, p1044 * 56.8671875, p1044 * 122, p1044 * 57.3671875);
    v1392.bezierCurveTo(p1044 * 137, p1044 * 20.3671875, p1044 * 137, p1044 * 16.3671875, p1044 * 126, p1044 * 22.3671875);
    v1392.bezierCurveTo(p1044 * 115.5, p1044 * 34.3671875, p1044 * 115.5, p1044 * 34.3671875, p1044 * 105, p1044 * 46.3671875);
    v1392.bezierCurveTo(p1044 * 70.5, p1044 * 46.3671875, p1044 * 70.5, p1044 * 46.3671875, p1044 * 36, p1044 * 46.3671875);
    v1392.bezierCurveTo(p1044 * 4, p1044 * 14.3671875, p1044 * 7, p1044 * 18.3671875, p1044 * 8, p1044 * 27.3671875);
    v1392.bezierCurveTo(p1044 * 12.5, p1044 * 41.8671875, p1044 * 12.5, p1044 * 41.8671875, p1044 * 17, p1044 * 56.3671875);
    v1392.closePath();
    f88(v1392, p1046[3], p1046[4], p1044 * 4);
    v1392.save();
    v1392.translate(p1044 * 68.30000305175781, p1044 * 41.45625305175781);
    v1392.rotate(0.76);
    f86(v1392, p1044 * -20.5, p1044 * -20.5, p1044 * 41, p1044 * 41, p1044 * 10);
    v1392.restore();
    f88(v1392, undefined, p1046[5], p1044 * 4);
    v1392.save();
    v1392.translate(p1044 * 68.80000305175781, p1044 * 44.45625305175781);
    v1392.rotate(0.76);
    f86(v1392, p1044 * -21, p1044 * -20.5, p1044 * 42, p1044 * 41, p1044 * 10);
    v1392.restore();
    f88(v1392, p1046[3], p1046[4], p1044 * 4);
    v1392.save();
    v1392.translate(p1044 * 69.80000305175781, p1044 * 44.556243896484375);
    v1392.rotate(0.76);
    f86(v1392, p1044 * -10, p1044 * -10, p1044 * 20, p1044 * 20, p1044 * 5);
    v1392.restore();
    f88(v1392, p1046[6], p1046[7], p1044 * 4);
    return v1391;
  }
  function f272(p1047, p1048, p1049) {
    var v1393 = document.createElement("canvas");
    var v1394 = v1393.getContext("2d");
    v1393.width = p1047 * 202;
    v1393.height = p1047 * 202;
    v1394.translate(p1047 * 2, p1047 * 1);
    v1394.globalAlpha = 0.3;
    f92(v1394, p1047 * 98, p1047 * 99, p1047 * 100);
    f88(v1394, p1049[0]);
    v1394.globalAlpha = 0.5;
    f92(v1394, p1047 * 98, p1047 * 99, p1047 * 90);
    f88(v1394, p1049[1]);
    return v1393;
  }
  function f273(p1050, p1051, p1052) {
    var v1395 = document.createElement("canvas");
    var v1396 = v1395.getContext("2d");
    v1395.width = p1050 * 400;
    v1395.height = p1050 * 400;
    v1396.globalAlpha = 1;
    v1396.translate(p1050 * 20, p1050 * 20);
    v1396.beginPath();
    v1396.lineCap = "round";
    v1396.lineJoin = "round";
    v1396.moveTo(p1050 * 36.5, p1050 * 278.0625);
    v1396.bezierCurveTo(p1050 * 67.5, p1050 * 316.0625, p1050 * 134.5, p1050 * 334.0625, p1050 * 199.5, p1050 * 319.0625);
    v1396.bezierCurveTo(p1050 * 254.5, p1050 * 304.0625, p1050 * 346.5, p1050 * 270.0625, p1050 * 348.5, p1050 * 237.0625);
    v1396.bezierCurveTo(p1050 * 359.5, p1050 * 206.0625, p1050 * 318.5, p1050 * 129.0625, p1050 * 262.5, p1050 * 122.0625);
    v1396.bezierCurveTo(p1050 * 213.5, p1050 * 115.0625, p1050 * 166.5, p1050 * 133.0625, p1050 * 104.5, p1050 * 166.0625);
    v1396.bezierCurveTo(p1050 * 54.5, p1050 * 194.0625, p1050 * 23.5, p1050 * 241.0625, p1050 * 36.5, p1050 * 277.0625);
    v1396.closePath();
    f88(v1396, p1052[0]);
    v1396.translate(p1050 * -20, p1050 * -20);
    v1396.beginPath();
    v1396.lineCap = "round";
    v1396.lineJoin = "round";
    v1396.moveTo(p1050 * 36.5, p1050 * 278.0625);
    v1396.bezierCurveTo(p1050 * 67.5, p1050 * 316.0625, p1050 * 134.5, p1050 * 334.0625, p1050 * 199.5, p1050 * 319.0625);
    v1396.bezierCurveTo(p1050 * 254.5, p1050 * 304.0625, p1050 * 346.5, p1050 * 270.0625, p1050 * 348.5, p1050 * 237.0625);
    v1396.bezierCurveTo(p1050 * 359.5, p1050 * 206.0625, p1050 * 318.5, p1050 * 129.0625, p1050 * 262.5, p1050 * 122.0625);
    v1396.bezierCurveTo(p1050 * 213.5, p1050 * 115.0625, p1050 * 166.5, p1050 * 133.0625, p1050 * 104.5, p1050 * 166.0625);
    v1396.bezierCurveTo(p1050 * 54.5, p1050 * 194.0625, p1050 * 23.5, p1050 * 241.0625, p1050 * 36.5, p1050 * 277.0625);
    v1396.closePath();
    f88(v1396, p1052[1], p1052[2], p1050 * 19);
    v1396.beginPath();
    v1396.lineCap = "round";
    v1396.lineJoin = "round";
    v1396.moveTo(p1050 * 214.5, p1050 * 124.0625);
    v1396.bezierCurveTo(p1050 * 242.5, p1050 * 125.0625, p1050 * 272.5, p1050 * 159.0625, p1050 * 283.5, p1050 * 184.0625);
    v1396.bezierCurveTo(p1050 * 277.5, p1050 * 161.0625, p1050 * 233.5, p1050 * 128.0625, p1050 * 219.5, p1050 * 122.0625);
    v1396.closePath();
    f88(v1396, vVVVVVUndefined1422, p1052[2], p1050 * 19);
    v1396.beginPath();
    v1396.lineCap = "round";
    v1396.lineJoin = "round";
    v1396.moveTo(p1050 * 157.5, p1050 * 145.0625);
    v1396.bezierCurveTo(p1050 * 176.5, p1050 * 148.0625, p1050 * 205.5, p1050 * 176.0625, p1050 * 212.5, p1050 * 197.0625);
    v1396.bezierCurveTo(p1050 * 205.5, p1050 * 178.0625, p1050 * 177.5, p1050 * 152.0625, p1050 * 156.5, p1050 * 142.0625);
    v1396.closePath();
    f88(v1396, vVVVVVVUndefined14, p1052[2], p1050 * 19);
    v1396.beginPath();
    v1396.lineCap = "round";
    v1396.lineJoin = "round";
    v1396.moveTo(p1050 * 103.5, p1050 * 169.0625);
    v1396.bezierCurveTo(p1050 * 160.5, p1050 * 166.0625, p1050 * 228.5, p1050 * 312.0625, p1050 * 162.5, p1050 * 323.0625);
    v1396.bezierCurveTo(p1050 * 128.5, p1050 * 330.0625, p1050 * 45.5, p1050 * 312.0625, p1050 * 34.5, p1050 * 268.0625);
    v1396.bezierCurveTo(p1050 * 30.5, p1050 * 238.0625, p1050 * 44.5, p1050 * 222.0625, p1050 * 52.5, p1050 * 211.0625);
    v1396.bezierCurveTo(p1050 * 82.5, p1050 * 174.0625, p1050 * 104.5, p1050 * 166.0625, p1050 * 119.5, p1050 * 172.0625);
    v1396.closePath();
    f88(v1396, p1052[3], p1052[2], p1050 * 19);
    f92(v1396, p1050 * 92.5, p1050 * 216.0625, p1050 * 13.892443989449804);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 68.5, p1050 * 227.0625, p1050 * 8.06225774829855);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 85.5, p1050 * 240.0625, p1050 * 6.708203932499369);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 147.5, p1050 * 294.0625, p1050 * 17.46424919657298);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 166.5, p1050 * 273.0625, p1050 * 6.708203932499369);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 114.5, p1050 * 294.0625, p1050 * 12.36931687685298);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 123.5, p1050 * 220.0625, p1050 * 5.830951894845301);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 114.5, p1050 * 259.0625, p1050 * 4.123105625617661);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 63.5, p1050 * 265.0625, p1050 * 5.385164807134504);
    f88(v1396, p1052[4]);
    f92(v1396, p1050 * 148.5, p1050 * 235.0625, p1050 * 4.47213595499958);
    f88(v1396, p1052[4]);
    v1396.beginPath();
    v1396.lineCap = "round";
    v1396.lineJoin = "round";
    v1396.moveTo(p1050 * 194.5, p1050 * 313.0625);
    v1396.bezierCurveTo(p1050 * 222.5, p1050 * 306.0625, p1050 * 319.5, p1050 * 271.0625, p1050 * 337.5, p1050 * 241.0625);
    v1396.bezierCurveTo(p1050 * 274.5, p1050 * 270.0625, p1050 * 216.5, p1050 * 288.0625, p1050 * 199.5, p1050 * 287.0625);
    v1396.bezierCurveTo(p1050 * 198.5, p1050 * 302.0625, p1050 * 195.5, p1050 * 311.0625, p1050 * 193.5, p1050 * 312.0625);
    v1396.closePath();
    f88(v1396, p1052[5]);
    return v1395;
  }
  function f274(p1053, p1054, p1055) {
    var v1397 = document.createElement("canvas");
    var v1398 = v1397.getContext("2d");
    v1397.width = p1053 * 145;
    v1397.height = p1053 * 120;
    v1398.beginPath();
    v1398.scale(0.6, 0.6);
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.translate(p1053 * 18, p1053 * -8);
    v1398.moveTo(p1053 * 101, p1053 * 72);
    v1398.bezierCurveTo(p1053 * 144, p1053 * 69, p1053 * 149, p1053 * 58, p1053 * 162, p1053 * 49);
    v1398.bezierCurveTo(p1053 * 174, p1053 * 31, p1053 * 173, p1053 * 38, p1053 * 172, p1053 * 45);
    v1398.bezierCurveTo(p1053 * 168, p1053 * 73, p1053 * 158, p1053 * 75, p1053 * 152, p1053 * 78);
    v1398.bezierCurveTo(p1053 * 106, p1053 * 89, p1053 * 107, p1053 * 91, p1053 * 107, p1053 * 94);
    v1398.bezierCurveTo(p1053 * 107, p1053 * 100, p1053 * 107, p1053 * 107, p1053 * 107, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 99, p1053 * 112, p1053 * 98, p1053 * 110, p1053 * 93, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 94, p1053 * 107, p1053 * 93, p1053 * 107, p1053 * 93, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 93, p1053 * 100, p1053 * 93, p1053 * 100, p1053 * 92, p1053 * 94);
    v1398.bezierCurveTo(p1053 * 92, p1053 * 89, p1053 * 90, p1053 * 90, p1053 * 73, p1053 * 86);
    v1398.bezierCurveTo(p1053 * 45, p1053 * 81, p1053 * 40, p1053 * 77, p1053 * 35, p1053 * 68);
    v1398.bezierCurveTo(p1053 * 23, p1053 * 36, p1053 * 28, p1053 * 34, p1053 * 36, p1053 * 46);
    v1398.bezierCurveTo(p1053 * 45, p1053 * 58, p1053 * 83, p1053 * 72, p1053 * 98, p1053 * 72);
    v1398.closePath();
    f88(v1398, p1055[4], p1055[5], p1053 * 4);
    v1398.beginPath();
    v1398.scale(1.1, 1.1);
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.translate(p1053 * -9, p1053 * 4);
    v1398.moveTo(p1053 * 101, p1053 * 72);
    v1398.bezierCurveTo(p1053 * 144, p1053 * 69, p1053 * 149, p1053 * 58, p1053 * 162, p1053 * 49);
    v1398.bezierCurveTo(p1053 * 174, p1053 * 31, p1053 * 173, p1053 * 38, p1053 * 172, p1053 * 45);
    v1398.bezierCurveTo(p1053 * 168, p1053 * 73, p1053 * 158, p1053 * 75, p1053 * 152, p1053 * 78);
    v1398.bezierCurveTo(p1053 * 106, p1053 * 89, p1053 * 107, p1053 * 91, p1053 * 107, p1053 * 94);
    v1398.bezierCurveTo(p1053 * 107, p1053 * 100, p1053 * 107, p1053 * 107, p1053 * 107, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 99, p1053 * 112, p1053 * 98, p1053 * 110, p1053 * 93, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 94, p1053 * 107, p1053 * 93, p1053 * 107, p1053 * 93, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 93, p1053 * 100, p1053 * 93, p1053 * 100, p1053 * 92, p1053 * 94);
    v1398.bezierCurveTo(p1053 * 92, p1053 * 89, p1053 * 90, p1053 * 90, p1053 * 73, p1053 * 86);
    v1398.bezierCurveTo(p1053 * 45, p1053 * 81, p1053 * 40, p1053 * 77, p1053 * 35, p1053 * 68);
    v1398.bezierCurveTo(p1053 * 23, p1053 * 36, p1053 * 28, p1053 * 34, p1053 * 36, p1053 * 46);
    v1398.bezierCurveTo(p1053 * 45, p1053 * 58, p1053 * 83, p1053 * 72, p1053 * 98, p1053 * 72);
    v1398.closePath();
    f88(v1398, p1055[4], p1055[5], p1053 * 4);
    v1398.scale(1.1, 1.1);
    v1398.translate(p1053 * -9, p1053 * 4);
    v1398.save();
    v1398.translate(p1053 * 100, p1053 * 73.06874084472656);
    v1398.rotate(0);
    f86(v1398, p1053 * -61, p1053 * -38.5, p1053 * 122, p1053 * 40, p1053 * 20);
    v1398.restore();
    f88(v1398, p1055[1], p1055[2], p1053 * 4);
    v1398.save();
    v1398.translate(p1053 * 100, p1053 * 71.36874389648438);
    v1398.rotate(0);
    f86(v1398, p1053 * -60.5, p1053 * -18, p1053 * 121, p1053 * 30, p1053 * 20);
    v1398.restore();
    f88(v1398, p1055[3], p1055[2], p1053 * 4);
    v1398.beginPath();
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.moveTo(p1053 * 144, p1053 * 80);
    v1398.bezierCurveTo(p1053 * 152, p1053 * 100, p1053 * 152, p1053 * 101, p1053 * 153, p1053 * 102);
    v1398.bezierCurveTo(p1053 * 159, p1053 * 100, p1053 * 159, p1053 * 100, p1053 * 160, p1053 * 100);
    v1398.bezierCurveTo(p1053 * 161, p1053 * 84, p1053 * 161, p1053 * 84, p1053 * 162, p1053 * 68);
    v1398.closePath();
    f88(v1398, p1055[2]);
    v1398.beginPath();
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.moveTo(p1053 * 57, p1053 * 75);
    v1398.bezierCurveTo(p1053 * 48, p1053 * 101, p1053 * 53, p1053 * 89, p1053 * 48, p1053 * 102);
    v1398.bezierCurveTo(p1053 * 44, p1053 * 100, p1053 * 44, p1053 * 100, p1053 * 39, p1053 * 97);
    v1398.bezierCurveTo(p1053 * 39, p1053 * 83, p1053 * 39, p1053 * 83, p1053 * 39, p1053 * 69);
    v1398.closePath();
    f88(v1398, p1055[2]);
    v1398.beginPath();
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.moveTo(p1053 * 101, p1053 * 72);
    v1398.bezierCurveTo(p1053 * 144, p1053 * 69, p1053 * 149, p1053 * 58, p1053 * 162, p1053 * 49);
    v1398.bezierCurveTo(p1053 * 174, p1053 * 31, p1053 * 173, p1053 * 38, p1053 * 172, p1053 * 45);
    v1398.bezierCurveTo(p1053 * 168, p1053 * 73, p1053 * 158, p1053 * 75, p1053 * 152, p1053 * 78);
    v1398.bezierCurveTo(p1053 * 106, p1053 * 89, p1053 * 107, p1053 * 91, p1053 * 107, p1053 * 94);
    v1398.bezierCurveTo(p1053 * 107, p1053 * 100, p1053 * 107, p1053 * 107, p1053 * 107, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 99, p1053 * 112, p1053 * 98, p1053 * 110, p1053 * 93, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 94, p1053 * 107, p1053 * 93, p1053 * 107, p1053 * 93, p1053 * 107);
    v1398.bezierCurveTo(p1053 * 93, p1053 * 100, p1053 * 93, p1053 * 100, p1053 * 92, p1053 * 94);
    v1398.bezierCurveTo(p1053 * 92, p1053 * 89, p1053 * 90, p1053 * 90, p1053 * 73, p1053 * 86);
    v1398.bezierCurveTo(p1053 * 45, p1053 * 81, p1053 * 40, p1053 * 77, p1053 * 35, p1053 * 68);
    v1398.bezierCurveTo(p1053 * 23, p1053 * 36, p1053 * 28, p1053 * 34, p1053 * 36, p1053 * 46);
    v1398.bezierCurveTo(p1053 * 45, p1053 * 58, p1053 * 83, p1053 * 72, p1053 * 98, p1053 * 72);
    v1398.closePath();
    f88(v1398, p1055[4], p1055[5], p1053 * 4);
    v1398.translate(0, 0);
    v1398.beginPath();
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.moveTo(p1053 * 115.5, p1053 * 116.07290649414062);
    v1398.bezierCurveTo(p1053 * 159.5, p1053 * 99.07290649414062, p1053 * 159.5, p1053 * 98.07290649414062, p1053 * 159.5, p1053 * 98.07290649414062);
    v1398.bezierCurveTo(p1053 * 155.5, p1053 * 116.07290649414062, p1053 * 159.5, p1053 * 116.07290649414062, p1053 * 159.5, p1053 * 118.07290649414062);
    v1398.bezierCurveTo(p1053 * 147.5, p1053 * 130.07290649414062, p1053 * 136.5, p1053 * 132.07290649414062, p1053 * 115.5, p1053 * 138.07290649414062);
    v1398.closePath();
    f88(v1398, p1055[3], p1055[2], p1053 * 4);
    v1398.beginPath();
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.moveTo(p1053 * 39.5, p1053 * 96.07290649414062);
    v1398.bezierCurveTo(p1053 * 85.5, p1053 * 114.07290649414062, p1053 * 62.5, p1053 * 105.57290649414062, p1053 * 85.5, p1053 * 115.07290649414062);
    v1398.bezierCurveTo(p1053 * 85.5, p1053 * 125.57290649414062, p1053 * 85.5, p1053 * 125.57290649414062, p1053 * 85.5, p1053 * 136.07290649414062);
    v1398.bezierCurveTo(p1053 * 51.5, p1053 * 129.07290649414062, p1053 * 51.5, p1053 * 125.07290649414062, p1053 * 41.5, p1053 * 118.07290649414062);
    v1398.bezierCurveTo(p1053 * 44.5, p1053 * 106.07290649414062, p1053 * 42.5, p1053 * 103.07290649414062, p1053 * 40.5, p1053 * 96.07290649414062);
    v1398.closePath();
    f88(v1398, p1055[3], p1055[2], p1053 * 4);
    v1398.beginPath();
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.moveTo(p1053 * 86, p1053 * 80);
    v1398.bezierCurveTo(p1053 * 97, p1053 * 88, p1053 * 106, p1053 * 84, p1053 * 112, p1053 * 80);
    v1398.bezierCurveTo(p1053 * 112, p1053 * 62, p1053 * 106, p1053 * 59, p1053 * 99, p1053 * 54);
    v1398.bezierCurveTo(p1053 * 86, p1053 * 62, p1053 * 86, p1053 * 73, p1053 * 86, p1053 * 80);
    v1398.closePath();
    f88(v1398, p1055[3], p1055[2], p1053 * 4);
    v1398.scale(0.5, 0.5);
    v1398.translate(p1053 * 100, p1053 * 71);
    v1398.beginPath();
    v1398.lineCap = "round";
    v1398.lineJoin = "round";
    v1398.moveTo(p1053 * 86, p1053 * 80);
    v1398.bezierCurveTo(p1053 * 97, p1053 * 88, p1053 * 106, p1053 * 84, p1053 * 112, p1053 * 80);
    v1398.bezierCurveTo(p1053 * 112, p1053 * 62, p1053 * 106, p1053 * 59, p1053 * 99, p1053 * 54);
    v1398.bezierCurveTo(p1053 * 86, p1053 * 62, p1053 * 86, p1053 * 73, p1053 * 86, p1053 * 80);
    v1398.closePath();
    f88(v1398, p1055[6], p1055[2], p1053 * 4);
    return v1397;
  }
  function f275(p1056, p1057, p1058) {
    var v1399 = (v1400 = document.createElement("canvas")).getContext("2d");
    v1400.width = p1056 * 47;
    v1400.height = p1056 * 60;
    var v1400;
    v1399 = (v1400 = document.createElement("canvas")).getContext("2d");
    v1400.width = p1056 * 47;
    v1400.height = p1056 * 60;
    f92(v1399, p1056 * 23.5, p1056 * 20.734375, p1056 * 15.132745950421556);
    f88(v1399, undefined, p1058[2], p1056 * 4);
    f92(v1399, p1056 * 23.5, p1056 * 20.734375, p1056 * 18.601075237738275);
    f88(v1399, vVVVUndefined142, p1058[1], p1056 * 4);
    f92(v1399, p1056 * 23.5, p1056 * 20.734375, p1056 * 11.40175425099138);
    f88(v1399, undefined, p1058[1], p1056 * 4);
    v1399.save();
    v1399.translate(p1056 * 23, p1056 * 38.734375);
    v1399.rotate(0);
    f86(v1399, p1056 * -21.5, p1056 * -19, p1056 * 43, p1056 * 38, p1056 * 10);
    v1399.restore();
    f88(v1399, p1058[2], p1058[1], p1056 * 4);
    v1399.save();
    v1399.translate(p1056 * 23.5, p1056 * 43.734375);
    v1399.rotate(0.5235987755982988);
    f89(v1399, 3, p1056 * 8.06225774829855, p1056 * 0);
    v1399.restore();
    f88(v1399, p1058[3]);
    f92(v1399, p1056 * 23.5, p1056 * 35.734375, p1056 * 7.0710678118654755);
    f88(v1399, p1058[3]);
    return v1400;
  }
  function f276(p1059, p1060, p1061) {
    var v1401 = document.createElement("canvas");
    var v1402 = v1401.getContext("2d");
    v1401.width = p1059 * 105;
    v1401.height = p1059 * 144;
    v1402.globalAlpha = p1060 ? 0.5 : 1;
    v1402.translate(p1059 * -5, p1059 * 0);
    v1402.save();
    v1402.translate(p1059 * 52.5, p1059 * 91.5);
    f86(v1402, p1059 * -4.5, p1059 * -39, p1059 * 9, p1059 * 78, p1059 * 5);
    v1402.restore();
    f88(v1402, p1061[0], p1061[0], p1059 * 3);
    v1402.save();
    v1402.translate(p1059 * 53, p1059 * 36);
    f86(v1402, p1059 * -29, p1059 * -17.5, p1059 * 58, p1059 * 35, p1059 * 5);
    v1402.restore();
    f88(v1402, p1061[0], p1061[0], p1059 * 4);
    v1402.save();
    v1402.translate(p1059 * 53.5, p1059 * 35.5);
    f86(v1402, p1059 * -26.5, p1059 * -15, p1059 * 53, p1059 * 30, p1059 * 5);
    v1402.restore();
    f88(v1402, p1061[0], p1061[0], p1059 * 4);
    v1402.translate(p1059 * 5, p1059 * 0);
    v1402.globalAlpha = 1;
    v1402.save();
    v1402.translate(p1059 * 52.5, p1059 * 91.5);
    f86(v1402, p1059 * -4.5, p1059 * -39, p1059 * 9, p1059 * 78, p1059 * 5);
    v1402.restore();
    f88(v1402, p1061[1], p1061[2], p1059 * 3);
    v1402.save();
    v1402.translate(p1059 * 53, p1059 * 36);
    f86(v1402, p1059 * -29, p1059 * -17.5, p1059 * 58, p1059 * 35, p1059 * 5);
    v1402.restore();
    f88(v1402, p1061[3], p1061[4], p1059 * 4);
    v1402.save();
    v1402.translate(p1059 * 53.5, p1059 * 35.5);
    f86(v1402, p1059 * -26.5, p1059 * -15, p1059 * 53, p1059 * 30, p1059 * 5);
    v1402.restore();
    f88(v1402, p1061[5], p1061[6], p1059 * 4);
    v1402.beginPath();
    v1402.lineCap = "round";
    v1402.lineJoin = "round";
    v1402.moveTo(p1059 * 49, p1059 * 60.5);
    v1402.bezierCurveTo(p1059 * 44, p1059 * 56.5, p1059 * 44, p1059 * 56.5, p1059 * 39, p1059 * 52.5);
    v1402.bezierCurveTo(p1059 * 39, p1059 * 46.5, p1059 * 39, p1059 * 46.5, p1059 * 39, p1059 * 40.5);
    v1402.bezierCurveTo(p1059 * 44, p1059 * 44, p1059 * 44, p1059 * 44, p1059 * 49, p1059 * 47.5);
    v1402.bezierCurveTo(p1059 * 49, p1059 * 54, p1059 * 49, p1059 * 54, p1059 * 49, p1059 * 60.5);
    v1402.closePath();
    f88(v1402, p1061[7], p1061[6], p1059 * 3);
    v1402.beginPath();
    v1402.lineCap = "round";
    v1402.lineJoin = "round";
    v1402.moveTo(p1059 * 66, p1059 * 40.5);
    v1402.bezierCurveTo(p1059 * 66, p1059 * 46.5, p1059 * 66, p1059 * 46.5, p1059 * 66, p1059 * 52.5);
    v1402.bezierCurveTo(p1059 * 60.5, p1059 * 56.5, p1059 * 60.5, p1059 * 56.5, p1059 * 55, p1059 * 60.5);
    v1402.bezierCurveTo(p1059 * 56, p1059 * 53, p1059 * 56, p1059 * 53, p1059 * 57, p1059 * 45.5);
    v1402.bezierCurveTo(p1059 * 61.5, p1059 * 43, p1059 * 61.5, p1059 * 43, p1059 * 66, p1059 * 40.5);
    v1402.closePath();
    f88(v1402, p1061[7], p1061[6], p1059 * 3);
    v1402.beginPath();
    v1402.lineCap = "round";
    v1402.lineJoin = "round";
    v1402.moveTo(p1059 * 52, p1059 * 33.5);
    v1402.bezierCurveTo(p1059 * 55.5, p1059 * 41, p1059 * 55.5, p1059 * 41, p1059 * 59, p1059 * 48.5);
    v1402.bezierCurveTo(p1059 * 56, p1059 * 58, p1059 * 56, p1059 * 58, p1059 * 53, p1059 * 67.5);
    v1402.bezierCurveTo(p1059 * 49, p1059 * 58, p1059 * 49, p1059 * 58, p1059 * 45, p1059 * 48.5);
    v1402.bezierCurveTo(p1059 * 48.5, p1059 * 41, p1059 * 48.5, p1059 * 41, p1059 * 52, p1059 * 33.5);
    v1402.closePath();
    f88(v1402, p1061[9], p1061[8], p1059 * 3);
    v1402.beginPath();
    v1402.lineCap = "round";
    v1402.lineJoin = "round";
    v1402.moveTo(p1059 * 52, p1059 * 47.5);
    v1402.bezierCurveTo(p1059 * 54.5, p1059 * 50.5, p1059 * 54.5, p1059 * 50.5, p1059 * 57, p1059 * 53.5);
    v1402.bezierCurveTo(p1059 * 55, p1059 * 60, p1059 * 55, p1059 * 60, p1059 * 53, p1059 * 66.5);
    v1402.bezierCurveTo(p1059 * 50.5, p1059 * 61, p1059 * 50.5, p1059 * 61, p1059 * 48, p1059 * 55.5);
    v1402.bezierCurveTo(p1059 * 50, p1059 * 52, p1059 * 50, p1059 * 52, p1059 * 52, p1059 * 48.5);
    v1402.closePath();
    f88(v1402, p1061[11], p1061[10], p1059 * 3);
    return v1401;
  }
  function f277(p1062, p1063, p1064) {
    var v1403 = document.createElement("canvas");
    var v1404 = v1403.getContext("2d");
    v1403.width = p1062 * 80;
    v1403.height = p1062 * 160;
    v1404.globalAlpha = p1063 ? 0.5 : 1;
    v1404.translate(p1062 * 5, p1062 * 5);
    v1404.save();
    f86(v1404, p1062 * 33, p1062 * 53, p1062 * 10, p1062 * 98, p1062 * 10);
    f88(v1404, p1064[0]);
    v1404.beginPath();
    v1404.lineCap = "round";
    v1404.lineJoin = "round";
    v1404.translate(p1062 * -150, p1062 * -100);
    v1404.moveTo(p1062 * 167.5, p1062 * 171.0625);
    v1404.bezierCurveTo(p1062 * 188, p1062 * 171.0625, p1062 * 188, p1062 * 171.0625, p1062 * 208.5, p1062 * 171.0625);
    v1404.bezierCurveTo(p1062 * 208.5, p1062 * 156.0625, p1062 * 208.5, p1062 * 156.0625, p1062 * 208.5, p1062 * 141.0625);
    v1404.bezierCurveTo(p1062 * 203.5, p1062 * 113.0625, p1062 * 179.5, p1062 * 96.0625, p1062 * 167.5, p1062 * 141.0625);
    v1404.closePath();
    f88(v1404, p1064[0]);
    v1404.restore();
    v1404.globalAlpha = 1;
    v1404.translate(p1062 * -5, p1062 * -5);
    v1404.save();
    f86(v1404, p1062 * 33, p1062 * 53, p1062 * 10, p1062 * 98, p1062 * 10);
    f88(v1404, p1064[1], p1064[2], p1062 * 4);
    v1404.beginPath();
    v1404.lineCap = "round";
    v1404.lineJoin = "round";
    v1404.translate(p1062 * -150, p1062 * -100);
    v1404.moveTo(p1062 * 167.5, p1062 * 171.0625);
    v1404.bezierCurveTo(p1062 * 188, p1062 * 171.0625, p1062 * 188, p1062 * 171.0625, p1062 * 208.5, p1062 * 171.0625);
    v1404.bezierCurveTo(p1062 * 208.5, p1062 * 156.0625, p1062 * 208.5, p1062 * 156.0625, p1062 * 208.5, p1062 * 141.0625);
    v1404.bezierCurveTo(p1062 * 203.5, p1062 * 113.0625, p1062 * 179.5, p1062 * 96.0625, p1062 * 167.5, p1062 * 141.0625);
    v1404.closePath();
    f88(v1404, p1064[3], p1064[4], p1062 * 4);
    v1404.beginPath();
    v1404.lineCap = "round";
    v1404.lineJoin = "round";
    v1404.translate(p1062 * 0, p1062 * 1);
    v1404.moveTo(p1062 * 180.5, p1062 * 169.0625);
    v1404.bezierCurveTo(p1062 * 180.5, p1062 * 157.5625, p1062 * 180.5, p1062 * 157.5625, p1062 * 180.5, p1062 * 146.0625);
    v1404.bezierCurveTo(p1062 * 181.5, p1062 * 134.0625, p1062 * 193.5, p1062 * 129.0625, p1062 * 196.5, p1062 * 146.0625);
    v1404.bezierCurveTo(p1062 * 196.5, p1062 * 157.5625, p1062 * 196.5, p1062 * 157.5625, p1062 * 196.5, p1062 * 169.0625);
    v1404.closePath();
    f88(v1404, p1064[5]);
    v1404.restore();
    return v1403;
  }
  function f278(p1065, p1066, p1067) {
    var v1405 = document.createElement("canvas");
    var v1406 = v1405.getContext("2d");
    v1405.width = p1065 * 185;
    v1405.height = p1065 * 164;
    v1406.translate(0, 0);
    var vF45 = function (p1068, p1069, p1070) {
      var v1407 = document.createElement("canvas");
      var v1408 = v1407.getContext("2d");
      v1407.width = p1068 * 201;
      v1407.height = p1068 * 164;
      v1408.translate(0, p1068 * 5);
      v1408.globalAlpha = p1069 ? 0.5 : 1;
      f92(v1408, p1068 * 100.5, p1068 * 82, p1068 * 74.92746655359852);
      f88(v1408, p1070[0], p1070[0], p1068 * 4);
      f92(v1408, p1068 * 100.5, p1068 * 82, p1068 * 65.9417374971317);
      f88(v1408, p1070[0], p1070[0], p1068 * 4);
      v1408.translate(0, -5);
      v1408.globalAlpha = 1;
      f92(v1408, p1068 * 100.5, p1068 * 82, p1068 * 74.92746655359852);
      f88(v1408, p1070[1], p1070[3], p1068 * 4);
      f92(v1408, p1068 * 100.5, p1068 * 82, p1068 * 65.9417374971317);
      f88(v1408, p1070[1], p1070[2], p1068 * 4);
      f92(v1408, p1068 * 100.5, p1068 * 82, p1068 * 35.9417374971317);
      f88(v1408, p1070[1], p1070[2], p1068 * 20);
      f92(v1408, p1068 * 100.5, p1068 * 82, p1068 * 15.9417374971317);
      f88(v1408, p1070[1], p1070[2], p1068 * 6);
      return v1407;
    }(p1065, p1066, p1067);
    v1406.drawImage(vF45, p1065 * -10, p1065 * 0);
    vF45 = f255(p1065, p1066, p1067, 0);
    v1406.drawImage(vF45, p1065 * -83, p1065 * -40);
    vF45 = f255(p1065, p1066, p1067, Math.PI / 1.4);
    v1406.drawImage(vF45, p1065 * -15, p1065 * -88);
    vF45 = f255(p1065, p1066, p1067, Math.PI / -1.4);
    v1406.drawImage(vF45, p1065 * 15, p1065 * -8);
    return v1405;
  }
  function f279(p1071, p1072) {
    var v1409 = document.createElement("canvas");
    var v1410 = v1409.getContext("2d");
    v1409.width = p1071 * 110;
    v1409.height = p1071 * 110;
    v1410.globalAlpha = 0.2;
    f92(v1410, p1071 * 55, p1071 * 55, p1071 * 55);
    f88(v1410, p1072[0]);
    return v1409;
  }
  function f280(p1073, p1074, p1075, p1076) {
    var v1411 = document.createElement("canvas");
    var v1412 = v1411.getContext("2d");
    v1411.width = p1073 * 170;
    v1411.height = p1073 * 200;
    v1412.translate(p1073 * 5, p1073 * 15);
    if (p1076 == 1) {
      v1412.translate(0, p1073 * -5);
      f92(v1412, p1073 * 77.00003051757812, p1073 * 104.49432373046875, p1073 * 71.84010022264724);
      f88(v1412, p1075[1], p1075[5], p1073 * 20);
      f92(v1412, p1073 * 77.00003051757812, p1073 * 104.22160339355469, p1073 * 61.554853586049575);
      f88(v1412, p1075[1], p1075[5], p1073 * 20);
      v1412.save();
      v1412.translate(p1073 * 77.00003051757812, p1073 * 31.267044067382812);
      f86(v1412, p1073 * -6, p1073 * -12.5, p1073 * 12, p1073 * 25, p1073 * 10);
      v1412.restore();
      f88(v1412, p1075[1], p1075[5], p1073 * 20);
      v1412.save();
      v1412.translate(p1073 * 77.00003051757812, p1073 * 13.267044067382812);
      f86(v1412, p1073 * -15, p1073 * -10.5, p1073 * 30, p1073 * 21, p1073 * 10);
      v1412.restore();
      f88(v1412, p1075[1], p1075[5], p1073 * 20);
    }
    f92(v1412, p1073 * 77.00003051757812, p1073 * 104.49432373046875, p1073 * 71.84010022264724);
    f88(v1412, p1075[1], p1075[2], p1073 * 7);
    f92(v1412, p1073 * 77.00003051757812, p1073 * 104.22160339355469, p1073 * 61.554853586049575);
    f88(v1412, p1075[1], p1075[2], p1073 * 7);
    v1412.beginPath();
    v1412.lineCap = "round";
    v1412.lineJoin = "round";
    v1412.moveTo(p1073 * 18.000030517578125, p1073 * 105.85795593261719);
    v1412.bezierCurveTo(p1073 * 134.00003051757812, p1073 * 104.85795593261719, p1073 * 77.00003051757812, p1073 * 104.85795593261719, p1073 * 136.00003051757812, p1073 * 103.85795593261719);
    v1412.closePath();
    f88(v1412, p1075[1], p1075[2], p1073 * 8);
    f92(v1412, p1073 * 77.00003051757812, p1073 * 104.6761474609375, p1073 * 32.55764119219941);
    f88(v1412, p1075[1], p1075[2], p1073 * 8);
    v1412.beginPath();
    v1412.lineCap = "round";
    v1412.lineJoin = "round";
    v1412.moveTo(p1073 * 78.00003051757812, p1073 * 112.03977966308594);
    v1412.bezierCurveTo(p1073 * 78.00003051757812, p1073 * 87.03977966308594, p1073 * 78.00003051757812, p1073 * 87.03977966308594, p1073 * 78.00003051757812, p1073 * 62.03977966308594);
    v1412.closePath();
    f88(v1412, p1075[3], p1075[2], p1073 * 8);
    v1412.beginPath();
    v1412.lineCap = "round";
    v1412.lineJoin = "round";
    v1412.moveTo(p1073 * 78.00003051757812, p1073 * 48.03977966308594);
    v1412.bezierCurveTo(p1073 * 82.00003051757812, p1073 * 55.53977966308594, p1073 * 82.00003051757812, p1073 * 55.53977966308594, p1073 * 86.00003051757812, p1073 * 63.03977966308594);
    v1412.bezierCurveTo(p1073 * 78.00003051757812, p1073 * 63.03977966308594, p1073 * 78.00003051757812, p1073 * 63.03977966308594, p1073 * 70.00003051757812, p1073 * 63.03977966308594);
    v1412.closePath();
    f88(v1412, p1075[3], p1075[2], p1073 * 4);
    v1412.beginPath();
    v1412.lineCap = "round";
    v1412.lineJoin = "round";
    v1412.moveTo(p1073 * 80.00003051757812, p1073 * 111.6761474609375);
    v1412.bezierCurveTo(p1073 * 95.00003051757812, p1073 * 97.1761474609375, p1073 * 95.00003051757812, p1073 * 97.1761474609375, p1073 * 110.00003051757812, p1073 * 82.6761474609375);
    v1412.closePath();
    f88(v1412, p1075[3], p1075[2], p1073 * 8);
    v1412.beginPath();
    v1412.lineCap = "round";
    v1412.lineJoin = "round";
    v1412.moveTo(p1073 * 107.00003051757812, p1073 * 76.6761474609375);
    v1412.bezierCurveTo(p1073 * 111.50003051757812, p1073 * 82.6761474609375, p1073 * 111.50003051757812, p1073 * 82.6761474609375, p1073 * 116.00003051757812, p1073 * 88.6761474609375);
    v1412.bezierCurveTo(p1073 * 118.50003051757812, p1073 * 81.6761474609375, p1073 * 118.50003051757812, p1073 * 81.6761474609375, p1073 * 121.00003051757812, p1073 * 74.6761474609375);
    v1412.closePath();
    f88(v1412, p1075[3], p1075[2], p1073 * 4);
    f92(v1412, p1073 * 77.00003051757812, p1073 * 105.03977966308594, p1073 * 15.556349186104045);
    f88(v1412, p1075[3], p1075[2], p1073 * 4);
    v1412.save();
    v1412.translate(p1073 * 77.00003051757812, p1073 * 31.267044067382812);
    v1412.rotate(0);
    f86(v1412, p1073 * -6, p1073 * -12.5, p1073 * 12, p1073 * 25, p1073 * 10);
    v1412.restore();
    f88(v1412, p1075[1], p1075[2], p1073 * 7);
    v1412.save();
    v1412.translate(p1073 * 77.00003051757812, p1073 * 13.267044067382812);
    v1412.rotate(0);
    f86(v1412, p1073 * -15, p1073 * -10.5, p1073 * 30, p1073 * 21, p1073 * 10);
    v1412.restore();
    f88(v1412, p1075[1], p1075[2], p1073 * 7);
    return v1411;
  }
  function f281(p1077, p1078) {
    var v1413 = document.createElement("canvas");
    var v1414 = v1413.getContext("2d");
    var v1415 = p1077 * 120;
    var v1416 = p1077 * 140;
    v1413.width = v1415;
    v1413.height = v1416;
    v1413.width = p1077 * 130;
    v1413.height = p1077 * 120;
    f86(v1414, p1077 * 10, p1077 * 12, p1077 * 110, p1077 * 90, p1077 * 10);
    f88(v1414, p1078[0]);
    f86(v1414, p1077 * 10, p1077 * 5, p1077 * 110, p1077 * 90, p1077 * 10);
    f88(v1414, p1078[1], p1078[2], p1077 * 4);
    var vF91 = f91(-Math.PI / 5, f132(p1077 * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    v1414.drawImage(vF91, p1077 * 12, p1077 * 18);
    vF91 = f91(Math.PI / 4, f207(p1077 * 0.55, vVVV6, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    v1414.drawImage(vF91, p1077 * 36, p1077 * 16);
    return v1413;
  }
  function f282(p1079, p1080, p1081) {
    var v1417 = document.createElement("canvas");
    var v1418 = v1417.getContext("2d");
    v1417.width = p1079 * 465;
    v1417.height = p1079 * 405;
    v1418.globalAlpha = 1;
    v1418.translate(p1079 * 6, p1079 * 0);
    v1418.beginPath();
    v1418.lineCap = "round";
    v1418.lineJoin = "round";
    v1418.moveTo(p1079 * 39.000030517578125, p1079 * 162.03977966308594);
    v1418.bezierCurveTo(p1079 * 125.00003051757812, p1079 * 84.03977966308594, p1079 * 108.50003051757812, p1079 * 115.03977966308594, p1079 * 178.00003051757812, p1079 * 68.03977966308594);
    v1418.bezierCurveTo(p1079 * 299.0000305175781, p1079 * 146.53977966308594, p1079 * 299.0000305175781, p1079 * 146.53977966308594, p1079 * 420.0000305175781, p1079 * 225.03977966308594);
    v1418.bezierCurveTo(p1079 * 400.0000305175781, p1079 * 288.53977966308594, p1079 * 400.0000305175781, p1079 * 288.53977966308594, p1079 * 380.0000305175781, p1079 * 352.03977966308594);
    v1418.bezierCurveTo(p1079 * 216.50003051757812, p1079 * 345.53977966308594, p1079 * 216.50003051757812, p1079 * 345.53977966308594, p1079 * 53.000030517578125, p1079 * 339.03977966308594);
    v1418.closePath();
    f88(v1418, p1081[3]);
    v1418.beginPath();
    v1418.lineCap = "round";
    v1418.lineJoin = "round";
    v1418.moveTo(p1079 * 23.000030517578125, p1079 * 306.94886779785156);
    v1418.bezierCurveTo(p1079 * 5.000030517578125, p1079 * 275.94886779785156, p1079 * 6.000030517578125, p1079 * 201.94886779785156, p1079 * 14.000030517578125, p1079 * 150.94886779785156);
    v1418.bezierCurveTo(p1079 * 40.000030517578125, p1079 * 34.94886779785156, p1079 * 157.00003051757812, p1079 * 14.948867797851562, p1079 * 199.00003051757812, p1079 * 11.948867797851562);
    v1418.bezierCurveTo(p1079 * 331.0000305175781, p1079 * 0.9488677978515625, p1079 * 409.0000305175781, p1079 * 61.94886779785156, p1079 * 428.0000305175781, p1079 * 133.94886779785156);
    v1418.bezierCurveTo(p1079 * 445.0000305175781, p1079 * 207.94886779785156, p1079 * 439.0000305175781, p1079 * 274.94886779785156, p1079 * 426.0000305175781, p1079 * 342.94886779785156);
    v1418.bezierCurveTo(p1079 * 355.0000305175781, p1079 * 207.94886779785156, p1079 * 345.0000305175781, p1079 * 208.94886779785156, p1079 * 333.0000305175781, p1079 * 202.94886779785156);
    v1418.bezierCurveTo(p1079 * 262.0000305175781, p1079 * 143.94886779785156, p1079 * 236.00003051757812, p1079 * 148.94886779785156, p1079 * 189.00003051757812, p1079 * 162.94886779785156);
    v1418.bezierCurveTo(p1079 * 82.00003051757812, p1079 * 190.94886779785156, p1079 * 78.00003051757812, p1079 * 235.94886779785156, p1079 * 62.000030517578125, p1079 * 279.94886779785156);
    v1418.closePath();
    f88(v1418, p1081[0], p1081[1], p1079 * 20);
    v1418.beginPath();
    v1418.lineCap = "round";
    v1418.lineJoin = "round";
    v1418.moveTo(p1079 * 17.000030517578125, p1079 * 149.94886779785156);
    v1418.bezierCurveTo(p1079 * 76.00003051757812, p1079 * 67.94886779785156, p1079 * 177.00003051757812, p1079 * 40.94886779785156, p1079 * 232.00003051757812, p1079 * 45.94886779785156);
    v1418.bezierCurveTo(p1079 * 316.0000305175781, p1079 * 46.94886779785156, p1079 * 359.0000305175781, p1079 * 74.94886779785156, p1079 * 428.0000305175781, p1079 * 145.94886779785156);
    v1418.bezierCurveTo(p1079 * 414.0000305175781, p1079 * 73.94886779785156, p1079 * 386.0000305175781, p1079 * 68.94886779785156, p1079 * 359.0000305175781, p1079 * 43.94886779785156);
    v1418.bezierCurveTo(p1079 * 295.0000305175781, p1079 * 5.9488677978515625, p1079 * 239.00003051757812, p1079 * 10.948867797851562, p1079 * 207.00003051757812, p1079 * 10.948867797851562);
    v1418.bezierCurveTo(p1079 * 121.00003051757812, p1079 * 20.948867797851562, p1079 * 104.00003051757812, p1079 * 34.94886779785156, p1079 * 45.000030517578125, p1079 * 84.94886779785156);
    v1418.bezierCurveTo(p1079 * 14.000030517578125, p1079 * 128.94886779785156, p1079 * 18.000030517578125, p1079 * 142.94886779785156, p1079 * 16.000030517578125, p1079 * 151.94886779785156);
    v1418.closePath();
    f88(v1418, p1081[2]);
    v1418.beginPath();
    v1418.lineCap = "round";
    v1418.lineJoin = "round";
    v1418.moveTo(p1079 * 23.000030517578125, p1079 * 306.94886779785156);
    v1418.bezierCurveTo(p1079 * 5.000030517578125, p1079 * 275.94886779785156, p1079 * 6.000030517578125, p1079 * 201.94886779785156, p1079 * 14.000030517578125, p1079 * 150.94886779785156);
    v1418.bezierCurveTo(p1079 * 40.000030517578125, p1079 * 34.94886779785156, p1079 * 157.00003051757812, p1079 * 14.948867797851562, p1079 * 199.00003051757812, p1079 * 11.948867797851562);
    v1418.bezierCurveTo(p1079 * 331.0000305175781, p1079 * 0.9488677978515625, p1079 * 409.0000305175781, p1079 * 61.94886779785156, p1079 * 428.0000305175781, p1079 * 133.94886779785156);
    v1418.bezierCurveTo(p1079 * 445.0000305175781, p1079 * 207.94886779785156, p1079 * 439.0000305175781, p1079 * 274.94886779785156, p1079 * 426.0000305175781, p1079 * 342.94886779785156);
    v1418.bezierCurveTo(p1079 * 355.0000305175781, p1079 * 207.94886779785156, p1079 * 345.0000305175781, p1079 * 208.94886779785156, p1079 * 333.0000305175781, p1079 * 202.94886779785156);
    v1418.bezierCurveTo(p1079 * 262.0000305175781, p1079 * 143.94886779785156, p1079 * 236.00003051757812, p1079 * 148.94886779785156, p1079 * 189.00003051757812, p1079 * 162.94886779785156);
    v1418.bezierCurveTo(p1079 * 82.00003051757812, p1079 * 190.94886779785156, p1079 * 78.00003051757812, p1079 * 235.94886779785156, p1079 * 62.000030517578125, p1079 * 279.94886779785156);
    v1418.closePath();
    f88(v1418, undefined, p1081[1], p1079 * 16);
    v1418.beginPath();
    v1418.lineCap = "round";
    v1418.lineJoin = "round";
    v1418.moveTo(p1079 * 60.000030517578125, p1079 * 288.03977966308594);
    v1418.bezierCurveTo(p1079 * 183.00003051757812, p1079 * 320.03977966308594, p1079 * 342.0000305175781, p1079 * 306.03977966308594, p1079 * 399.0000305175781, p1079 * 286.03977966308594);
    v1418.bezierCurveTo(p1079 * 420.0000305175781, p1079 * 345.03977966308594, p1079 * 410.0000305175781, p1079 * 335.03977966308594, p1079 * 415.0000305175781, p1079 * 362.03977966308594);
    v1418.bezierCurveTo(p1079 * 351.0000305175781, p1079 * 384.03977966308594, p1079 * 299.0000305175781, p1079 * 389.03977966308594, p1079 * 215.00003051757812, p1079 * 391.03977966308594);
    v1418.bezierCurveTo(p1079 * 128.00003051757812, p1079 * 388.03977966308594, p1079 * 69.00003051757812, p1079 * 373.03977966308594, p1079 * 39.000030517578125, p1079 * 359.03977966308594);
    v1418.closePath();
    f88(v1418, p1081[0], p1081[1], p1079 * 13);
    v1418.beginPath();
    v1418.lineCap = "round";
    v1418.lineJoin = "round";
    v1418.moveTo(p1079 * 47.000030517578125, p1079 * 327.03977966308594);
    v1418.bezierCurveTo(p1079 * 203.00003051757812, p1079 * 377.03977966308594, p1079 * 331.0000305175781, p1079 * 349.03977966308594, p1079 * 410.0000305175781, p1079 * 330.03977966308594);
    v1418.closePath();
    f88(v1418, p1081[0], p1081[1], p1079 * 20);
    v1418.beginPath();
    v1418.lineCap = "round";
    v1418.lineJoin = "round";
    v1418.moveTo(p1079 * 9.000030517578125, p1079 * 339.1306915283203);
    v1418.bezierCurveTo(p1079 * 2.000030517578125, p1079 * 280.1306915283203, p1079 * 30.000030517578125, p1079 * 219.1306915283203, p1079 * 85.00003051757812, p1079 * 167.1306915283203);
    v1418.bezierCurveTo(p1079 * 174.00003051757812, p1079 * 82.13069152832031, p1079 * 241.00003051757812, p1079 * 101.13069152832031, p1079 * 284.0000305175781, p1079 * 115.13069152832031);
    v1418.bezierCurveTo(p1079 * 333.0000305175781, p1079 * 134.1306915283203, p1079 * 376.0000305175781, p1079 * 177.1306915283203, p1079 * 410.0000305175781, p1079 * 247.1306915283203);
    v1418.bezierCurveTo(p1079 * 439.0000305175781, p1079 * 300.1306915283203, p1079 * 442.0000305175781, p1079 * 346.1306915283203, p1079 * 430.0000305175781, p1079 * 363.1306915283203);
    v1418.bezierCurveTo(p1079 * 418.0000305175781, p1079 * 366.1306915283203, p1079 * 395.0000305175781, p1079 * 295.1306915283203, p1079 * 355.0000305175781, p1079 * 223.1306915283203);
    v1418.bezierCurveTo(p1079 * 299.0000305175781, p1079 * 156.1306915283203, p1079 * 262.0000305175781, p1079 * 155.1306915283203, p1079 * 215.00003051757812, p1079 * 159.1306915283203);
    v1418.bezierCurveTo(p1079 * 133.00003051757812, p1079 * 171.1306915283203, p1079 * 120.00003051757812, p1079 * 193.1306915283203, p1079 * 96.00003051757812, p1079 * 221.1306915283203);
    v1418.bezierCurveTo(p1079 * 49.000030517578125, p1079 * 262.1306915283203, p1079 * 47.000030517578125, p1079 * 306.1306915283203, p1079 * 38.000030517578125, p1079 * 336.1306915283203);
    v1418.bezierCurveTo(p1079 * 30.000030517578125, p1079 * 349.1306915283203, p1079 * 30.000030517578125, p1079 * 349.1306915283203, p1079 * 22.000030517578125, p1079 * 362.1306915283203);
    v1418.closePath();
    f88(v1418, p1081[2], p1081[1], p1079 * 20);
    v1418.beginPath();
    v1418.lineCap = "round";
    v1418.lineJoin = "round";
    v1418.moveTo(p1079 * 228.00003051757812, p1079 * 128.03977966308594);
    v1418.bezierCurveTo(p1079 * 315.0000305175781, p1079 * 131.03977966308594, p1079 * 349.0000305175781, p1079 * 178.03977966308594, p1079 * 386.0000305175781, p1079 * 234.03977966308594);
    v1418.bezierCurveTo(p1079 * 444.0000305175781, p1079 * 329.03977966308594, p1079 * 446.0000305175781, p1079 * 354.03977966308594, p1079 * 427.0000305175781, p1079 * 373.03977966308594);
    v1418.bezierCurveTo(p1079 * 389.0000305175781, p1079 * 389.03977966308594, p1079 * 399.0000305175781, p1079 * 329.03977966308594, p1079 * 361.0000305175781, p1079 * 277.03977966308594);
    v1418.bezierCurveTo(p1079 * 306.0000305175781, p1079 * 191.03977966308594, p1079 * 266.0000305175781, p1079 * 183.03977966308594, p1079 * 220.00003051757812, p1079 * 181.03977966308594);
    v1418.bezierCurveTo(p1079 * 138.00003051757812, p1079 * 184.03977966308594, p1079 * 123.00003051757812, p1079 * 212.03977966308594, p1079 * 89.00003051757812, p1079 * 271.03977966308594);
    v1418.bezierCurveTo(p1079 * 52.000030517578125, p1079 * 349.03977966308594, p1079 * 68.00003051757812, p1079 * 364.03977966308594, p1079 * 33.000030517578125, p1079 * 369.03977966308594);
    v1418.bezierCurveTo(p1079 * 6.000030517578125, p1079 * 366.03977966308594, p1079 * 5.000030517578125, p1079 * 341.03977966308594, p1079 * 26.000030517578125, p1079 * 288.03977966308594);
    v1418.bezierCurveTo(p1079 * 60.000030517578125, p1079 * 207.03977966308594, p1079 * 100.00003051757812, p1079 * 180.03977966308594, p1079 * 113.00003051757812, p1079 * 170.03977966308594);
    v1418.bezierCurveTo(p1079 * 159.00003051757812, p1079 * 132.03977966308594, p1079 * 196.00003051757812, p1079 * 133.03977966308594, p1079 * 226.00003051757812, p1079 * 129.03977966308594);
    v1418.closePath();
    f88(v1418, p1081[0], p1081[1], p1079 * 20);
    return v1417;
  }
  const v1419 = {};
  v1419.get = function (p1082, p1083) {
    if (p1083 !== "ΔⲆⲆⲆΔΔⵠ") {
      const v1420 = vWindow.setTimeout;
      const vV1420 = v1420;
      const vF46 = function () {
        v1420(vF46, 3609);
        vV1420(vF46, 4761);
      };
      vF46();
    }
    return vWindow.Reflect.get(...arguments);
  };
  function f283(p1084, p1085) {
    var v1421 = document.createElement("canvas");
    var v1422 = v1421.getContext("2d");
    v1421.width = p1084 * 253;
    v1421.height = p1084 * 192;
    v1422.globalAlpha = 0.5;
    v1422.save();
    v1422.translate(p1084 * 42, p1084 * 99);
    v1422.globalAlpha = 0.5;
    f86(v1422, p1084 * -7, p1084 * -20, p1084 * 14, p1084 * 39, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[0]);
    v1422.globalAlpha = 1;
    v1422.save();
    v1422.translate(p1084 * 37, p1084 * 94);
    f86(v1422, p1084 * -7, p1084 * -20, p1084 * 14, p1084 * 37, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[2]);
    v1422.globalAlpha = 0.5;
    v1422.save();
    v1422.translate(p1084 * 136, p1084 * 99);
    v1422.globalAlpha = 0.5;
    f86(v1422, p1084 * -84, p1084 * -67, p1084 * 168, p1084 * 134, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[0], p1085[0], p1084 * 13);
    v1422.globalAlpha = 1;
    v1422.save();
    v1422.translate(p1084 * 131, p1084 * 94);
    f86(v1422, p1084 * -84, p1084 * -67, p1084 * 168, p1084 * 134, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[2], p1085[2], p1084 * 13);
    v1422.save();
    v1422.translate(p1084 * 131, p1084 * 94);
    f86(v1422, p1084 * -76, p1084 * -61, p1084 * 152, p1084 * 122, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[3], p1085[1], p1084 * 8);
    v1422.save();
    v1422.translate(p1084 * 168.5, p1084 * 93.5);
    f86(v1422, p1084 * -30.5, p1084 * -58.5, p1084 * 61, p1084 * 117, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[3], p1085[4], p1084 * 6);
    v1422.save();
    v1422.translate(p1084 * 93.5, p1084 * 95.5);
    f86(v1422, p1084 * -32, p1084 * -59.5, p1084 * 59, p1084 * 119, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[3], p1085[4], p1084 * 6);
    v1422.save();
    v1422.translate(p1084 * 130.5, p1084 * 94);
    f86(v1422, p1084 * -36, p1084 * -67, p1084 * 73, p1084 * 134, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[3], p1085[2], p1084 * 8);
    v1422.globalAlpha = 0.5;
    v1422.save();
    v1422.translate(p1084 * 133, p1084 * 97);
    f86(v1422, p1084 * -83, p1084 * -12, p1084 * 160, p1084 * 24, p1084 * 0);
    v1422.restore();
    f88(v1422, p1085[0]);
    v1422.globalAlpha = 1;
    v1422.save();
    v1422.translate(p1084 * 133, p1084 * 92);
    f86(v1422, p1084 * -83, p1084 * -12, p1084 * 160, p1084 * 24, p1084 * 0);
    v1422.restore();
    f88(v1422, p1085[2]);
    v1422.globalAlpha = 0.5;
    v1422.save();
    v1422.translate(p1084 * 228, p1084 * 99.5);
    v1422.globalAlpha = 0.5;
    f86(v1422, p1084 * -5, p1084 * -18.5, p1084 * 10, p1084 * 37, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[0]);
    v1422.globalAlpha = 1;
    v1422.save();
    v1422.translate(p1084 * 223, p1084 * 94.5);
    f86(v1422, p1084 * -5, p1084 * -18.5, p1084 * 10, p1084 * 37, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[2]);
    v1422.save();
    v1422.translate(p1084 * 133.5, p1084 * 175.5);
    v1422.globalAlpha = 0.5;
    f86(v1422, p1084 * -22.5, p1084 * -6.5, p1084 * 45, p1084 * 13, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[0]);
    v1422.globalAlpha = 1;
    v1422.save();
    v1422.translate(p1084 * 128.5, p1084 * 170.5);
    f86(v1422, p1084 * -22.5, p1084 * -6.5, p1084 * 45, p1084 * 13, p1084 * 20);
    v1422.restore();
    f88(v1422, p1085[2]);
    return v1421;
  }
  function f284(p1086, p1087, p1088) {
    var v1423 = document.createElement("canvas");
    var v1424 = v1423.getContext("2d");
    v1423.width = p1086 * 88;
    v1423.height = p1086 * 88;
    v1424.save();
    v1424.translate(p1086 * 44, p1086 * 44);
    v1424.rotate(0.52);
    f89(v1424, 6, p1086 * 43, p1086 * 10);
    v1424.restore();
    f88(v1424, p1088[0], p1088[1], p1086 * 3);
    return v1423;
  }
  function f285(p1089, p1090, p1091) {
    var v1425 = document.createElement("canvas");
    var v1426 = v1425.getContext("2d");
    v1425.width = p1089 * 400;
    v1425.height = p1089 * 400;
    v1426.translate(0, p1089 * 15);
    v1426.globalAlpha = p1090 ? 0.5 : 1;
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 102, p1089 * 154);
    v1426.bezierCurveTo(p1089 * 108, p1089 * 216.5, p1089 * 108, p1089 * 216.5, p1089 * 114, p1089 * 279);
    v1426.bezierCurveTo(p1089 * 124, p1089 * 300, p1089 * 237, p1089 * 299, p1089 * 251, p1089 * 279);
    v1426.bezierCurveTo(p1089 * 257, p1089 * 217, p1089 * 257, p1089 * 217, p1089 * 263, p1089 * 155);
    v1426.bezierCurveTo(p1089 * 248, p1089 * 194, p1089 * 91, p1089 * 180, p1089 * 103, p1089 * 156);
    v1426.closePath();
    f88(v1426, p1091[0]);
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 102, p1089 * 154);
    v1426.bezierCurveTo(p1089 * 106, p1089 * 53, p1089 * 255, p1089 * 53, p1089 * 263, p1089 * 154);
    v1426.bezierCurveTo(p1089 * 248, p1089 * 38, p1089 * 99, p1089 * 69, p1089 * 103, p1089 * 154);
    v1426.closePath();
    f88(v1426, vVVVUndefined113, p1091[0], p1089 * 11);
    v1426.translate(0, p1089 * -5);
    v1426.globalAlpha = 1;
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 103, p1089 * 154);
    v1426.bezierCurveTo(p1089 * 98, p1089 * 119, p1089 * 264, p1089 * 119, p1089 * 264, p1089 * 154);
    v1426.bezierCurveTo(p1089 * 271, p1089 * 189, p1089 * 94, p1089 * 188, p1089 * 103, p1089 * 154);
    v1426.closePath();
    f88(v1426, p1091[3], p1091[2], p1089 * 12);
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 102, p1089 * 154);
    v1426.bezierCurveTo(p1089 * 108, p1089 * 216.5, p1089 * 108, p1089 * 216.5, p1089 * 114, p1089 * 279);
    v1426.bezierCurveTo(p1089 * 124, p1089 * 300, p1089 * 237, p1089 * 299, p1089 * 251, p1089 * 279);
    v1426.bezierCurveTo(p1089 * 257, p1089 * 217, p1089 * 257, p1089 * 217, p1089 * 263, p1089 * 155);
    v1426.bezierCurveTo(p1089 * 248, p1089 * 194, p1089 * 91, p1089 * 180, p1089 * 103, p1089 * 156);
    v1426.closePath();
    f88(v1426, p1091[1], p1091[2], p1089 * 12);
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 182, p1089 * 185);
    v1426.bezierCurveTo(p1089 * 182.5, p1089 * 237.5, p1089 * 182.5, p1089 * 237.5, p1089 * 183, p1089 * 290);
    v1426.closePath();
    f88(v1426, vVVVVVVUndefined14, p1091[2], p1089 * 12);
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 222, p1089 * 287);
    v1426.bezierCurveTo(p1089 * 226, p1089 * 233.5, p1089 * 226, p1089 * 233.5, p1089 * 230, p1089 * 180);
    v1426.closePath();
    f88(v1426, vVVVVUndefined582, p1091[2], p1089 * 12);
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 145, p1089 * 290);
    v1426.bezierCurveTo(p1089 * 140.5, p1089 * 237, p1089 * 140.5, p1089 * 237, p1089 * 136, p1089 * 184);
    v1426.closePath();
    f88(v1426, p1091[1], p1091[2], p1089 * 11);
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 105, p1089 * 184);
    v1426.bezierCurveTo(p1089 * 148, p1089 * 205, p1089 * 231, p1089 * 202, p1089 * 260, p1089 * 182);
    v1426.bezierCurveTo(p1089 * 259, p1089 * 195.5, p1089 * 259, p1089 * 195.5, p1089 * 258, p1089 * 209);
    v1426.bezierCurveTo(p1089 * 217, p1089 * 218, p1089 * 163, p1089 * 225, p1089 * 108, p1089 * 207);
    v1426.closePath();
    f88(v1426, p1091[4], p1091[2], p1089 * 11);
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 251, p1089 * 276);
    v1426.bezierCurveTo(p1089 * 251.5, p1089 * 267.5, p1089 * 251.5, p1089 * 267.5, p1089 * 252, p1089 * 259);
    v1426.bezierCurveTo(p1089 * 212, p1089 * 272, p1089 * 156, p1089 * 275, p1089 * 112, p1089 * 260);
    v1426.bezierCurveTo(p1089 * 112.5, p1089 * 269, p1089 * 112.5, p1089 * 269, p1089 * 113, p1089 * 278);
    v1426.bezierCurveTo(p1089 * 155, p1089 * 306, p1089 * 253, p1089 * 286, p1089 * 250, p1089 * 276);
    v1426.closePath();
    f88(v1426, p1091[4], p1091[2], p1089 * 11);
    v1426.beginPath();
    v1426.lineCap = "round";
    v1426.lineJoin = "round";
    v1426.moveTo(p1089 * 102, p1089 * 154);
    v1426.bezierCurveTo(p1089 * 106, p1089 * 53, p1089 * 255, p1089 * 53, p1089 * 263, p1089 * 154);
    v1426.bezierCurveTo(p1089 * 248, p1089 * 38, p1089 * 99, p1089 * 69, p1089 * 103, p1089 * 154);
    v1426.closePath();
    f88(v1426, undefined, p1091[2], p1089 * 11);
    return v1425;
  }
  function f286() {
    var v1427 = 1;
    new Date().getTime();
    f288();
    (function () {
      ᐃᐃ[1063] = f119(1, [{
        f: f249,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1064] = ᐃᐃ[1063];
      ᐃᐃ[1231] = [];
      ᐃᐃ[1231][0] = ⵠᐃ.ΔᐃΔⵠΔⲆΔ;
      ᐃᐃ[1231][1] = ⵠᐃ.ⵠΔⵠⲆᐃⵠᐃ;
      ᐃᐃ[1231][2] = ⵠᐃ.ΔⲆⵠⵠᐃⵠⵠ;
      ᐃᐃ[1232] = ᐃᐃ[1231];
      ᐃᐃ[1248] = [];
      ᐃᐃ[1248][0] = ⵠᐃ.ᐃᐃⵠⵠⲆᐃᐃ;
      ᐃᐃ[1248][1] = ⵠᐃ.ΔΔⵠⵠⲆΔⲆ;
      ᐃᐃ[1248][2] = ⵠᐃ.ⵠⲆⵠΔⵠⵠⲆ;
      ᐃᐃ[1249] = ᐃᐃ[1248];
      ᐃᐃ[1263] = [];
      ᐃᐃ[1263][0] = ⵠᐃ.ⵠⲆⵠⲆⲆⵠΔ;
      ᐃᐃ[1263][1] = ⵠᐃ.ⲆΔᐃᐃⵠⲆⵠ;
      ᐃᐃ[1263][2] = ⵠᐃ.ⲆⵠⵠΔⵠᐃⵠ;
      ᐃᐃ[1264] = ᐃᐃ[1263];
      ᐃᐃ[1482] = [];
      ᐃᐃ[1482][0] = ⵠᐃ.ⵠᐃⵠΔⲆⵠᐃ;
      ᐃᐃ[1482][1] = ⵠᐃ.ΔⲆⵠⲆⲆᐃΔ;
      ᐃᐃ[1482][2] = ⵠᐃ.ᐃᐃⲆᐃⲆᐃΔ;
      ᐃᐃ[1483] = ᐃᐃ[1482];
      ᐃᐃ[1241] = [];
      ᐃᐃ[1241][0] = ⵠᐃ.ΔᐃⵠⲆΔⲆΔ;
      ᐃᐃ[1241][1] = ⵠᐃ.ΔᐃᐃⵠΔⵠᐃ;
      ᐃᐃ[1241][2] = ⵠᐃ.ⲆⲆᐃⲆⲆⵠⲆ;
      ᐃᐃ[1250] = ᐃᐃ[1241];
      ᐃᐃ[1336] = [];
      ᐃᐃ[1336][0] = ⵠᐃ.ⲆᐃⵠⵠΔΔΔ;
      ᐃᐃ[1336][1] = ⵠᐃ.ΔᐃΔⲆΔⲆΔ;
      ᐃᐃ[1336][2] = ⵠᐃ.ᐃⵠᐃⲆⲆⲆⲆ;
      ᐃᐃ[1337] = ᐃᐃ[1336];
      ᐃᐃ[1335] = ᐃᐃ[1336];
      ᐃᐃ[961] = [];
      ᐃᐃ[961][0] = ⵠᐃ.ⲆⲆⲆᐃΔΔᐃⵠᐃ;
      ᐃᐃ[961][1] = ⵠᐃ.ᐃⵠΔᐃⵠⲆⵠⲆΔ;
      ᐃᐃ[961][2] = ⵠᐃ.ᐃΔⵠⵠΔΔΔΔΔ;
      ᐃᐃ[962] = ᐃᐃ[961];
      ᐃᐃ[963] = ᐃᐃ[961];
      ᐃᐃ[1339] = [];
      ᐃᐃ[1339][0] = ⵠᐃ.ⲆⲆⲆᐃᐃᐃⵠ;
      ᐃᐃ[1339][1] = ⵠᐃ.ⵠⵠΔⲆⲆⵠⵠ;
      ᐃᐃ[1339][2] = ⵠᐃ.ΔΔΔΔⲆⲆⲆ;
      ᐃᐃ[1340] = ᐃᐃ[1339];
      ᐃᐃ[1338] = ᐃᐃ[1339];
      ᐃᐃ[534] = [];
      ᐃᐃ[534][0] = ⵠᐃ.ⲆΔⵠΔⲆΔΔ;
      ᐃᐃ[534][1] = ⵠᐃ.ⵠⵠⲆΔΔⲆΔ;
      ᐃᐃ[534][2] = ⵠᐃ.ᐃⵠⵠⵠⵠᐃΔ;
      ᐃᐃ[536] = ᐃᐃ[534];
      ᐃᐃ[535] = ᐃᐃ[534];
      ᐃᐃ[1624] = [];
      ᐃᐃ[1624][0] = ⵠᐃ.ⵠΔᐃⵠⵠΔⲆⵠⲆ;
      ᐃᐃ[1624][1] = ⵠᐃ.ΔΔΔᐃΔⵠΔⵠΔ;
      ᐃᐃ[1624][2] = ⵠᐃ.ΔΔⲆᐃΔⲆᐃⲆⵠ;
      ᐃᐃ[1625] = ᐃᐃ[1624];
      ᐃᐃ[1754] = [];
      ᐃᐃ[1754][0] = ⵠᐃ.ᐃⵠΔⲆᐃ;
      ᐃᐃ[1754][1] = ⵠᐃ.ᐃⵠΔⲆᐃ;
      ᐃᐃ[1754][2] = ⵠᐃ.ᐃⵠΔⲆᐃ;
      ᐃᐃ[1753] = ᐃᐃ[1754];
      ᐃᐃ[1750] = [];
      ᐃᐃ[1750][0] = ⵠᐃ.ᐃⵠⲆⲆᐃ;
      ᐃᐃ[1750][1] = ⵠᐃ.ᐃⵠⲆⲆᐃ;
      ᐃᐃ[1750][2] = ⵠᐃ.ᐃⵠⲆⲆᐃ;
      ᐃᐃ[1749] = ᐃᐃ[1750];
      ᐃᐃ[1621] = [];
      ᐃᐃ[1621][0] = ⵠᐃ.ⵠⲆⵠⵠΔΔⲆⵠⵠ;
      ᐃᐃ[1621][1] = ⵠᐃ.ᐃⵠⲆⵠⵠⵠⲆⲆⲆ;
      ᐃᐃ[1621][2] = ⵠᐃ.ᐃΔⵠⵠⵠⲆᐃΔΔ;
      ᐃᐃ[1623] = ᐃᐃ[1621];
      ᐃᐃ[1622] = ᐃᐃ[1621];
      ᐃᐃ[761] = [];
      ᐃᐃ[761][0] = ⵠᐃ.ᐃⲆⲆΔⵠΔᐃᐃⵠ;
      ᐃᐃ[761][1] = ⵠᐃ.ᐃᐃᐃΔⲆΔΔⵠⲆ;
      ᐃᐃ[761][2] = ⵠᐃ.ⵠᐃⲆᐃᐃᐃⲆⵠⵠ;
      ᐃᐃ[763] = ᐃᐃ[761];
      ᐃᐃ[762] = ᐃᐃ[761];
      ᐃᐃ[1494] = [];
      ᐃᐃ[1494][0] = ⵠᐃ.ⵠΔⲆΔⵠᐃΔᐃⵠ;
      ᐃᐃ[1494][1] = ⵠᐃ.ⵠⲆⲆⵠⵠᐃᐃⲆⲆ;
      ᐃᐃ[1494][2] = ⵠᐃ.ⲆⵠⲆΔⵠᐃᐃΔⲆ;
      ᐃᐃ[1495] = ᐃᐃ[1494];
      ᐃᐃ[1496] = ᐃᐃ[1494];
      ᐃᐃ[764] = [];
      ᐃᐃ[764][0] = ⵠᐃ.ΔⵠⵠⲆᐃᐃⲆⵠΔ;
      ᐃᐃ[764][1] = ⵠᐃ.ⵠⲆⵠⵠⵠⲆⵠᐃΔ;
      ᐃᐃ[764][2] = ⵠᐃ.ᐃⲆⵠⲆᐃⵠᐃⵠⲆ;
      ᐃᐃ[766] = ᐃᐃ[764];
      ᐃᐃ[765] = ᐃᐃ[764];
      ᐃᐃ[1497] = [];
      ᐃᐃ[1497][0] = ⵠᐃ.ⲆΔⲆⵠⲆⲆΔⵠᐃ;
      ᐃᐃ[1497][1] = ⵠᐃ.ⲆΔᐃᐃⵠⵠⵠⵠⵠ;
      ᐃᐃ[1497][2] = ⵠᐃ.ⵠΔⲆⵠΔᐃΔΔᐃ;
      ᐃᐃ[1498] = ᐃᐃ[1497];
      ᐃᐃ[1499] = ᐃᐃ[1497];
      ᐃᐃ[767] = [];
      ᐃᐃ[767][0] = ⵠᐃ.ΔᐃᐃᐃΔΔⵠΔᐃ;
      ᐃᐃ[767][1] = ⵠᐃ.ᐃᐃⲆᐃⲆΔᐃΔᐃ;
      ᐃᐃ[767][2] = ⵠᐃ.ᐃⵠΔⲆΔΔΔᐃΔ;
      ᐃᐃ[769] = ᐃᐃ[767];
      ᐃᐃ[768] = ᐃᐃ[767];
      ᐃᐃ[1500] = [];
      ᐃᐃ[1500][0] = ⵠᐃ.ᐃᐃᐃⵠΔΔⲆΔⲆ;
      ᐃᐃ[1500][1] = ⵠᐃ.ⲆᐃⲆΔⵠⵠᐃⵠⲆ;
      ᐃᐃ[1500][2] = ⵠᐃ.ᐃⵠⲆΔᐃᐃᐃⲆΔ;
      ᐃᐃ[1501] = ᐃᐃ[1500];
      ᐃᐃ[1502] = ᐃᐃ[1500];
      ᐃᐃ[770] = [];
      ᐃᐃ[770][0] = ⵠᐃ.ΔⵠⵠⵠⲆⵠΔᐃΔ;
      ᐃᐃ[770][1] = ⵠᐃ.ⵠⲆᐃⵠΔⵠⵠⵠᐃ;
      ᐃᐃ[770][2] = ⵠᐃ.ⲆΔⵠΔⵠᐃᐃᐃⵠ;
      ᐃᐃ[772] = ᐃᐃ[770];
      ᐃᐃ[771] = ᐃᐃ[770];
      ᐃᐃ[1503] = [];
      ᐃᐃ[1503][0] = ⵠᐃ.ⵠΔⲆⲆⲆⲆⵠᐃⵠ;
      ᐃᐃ[1503][1] = ⵠᐃ.ΔⲆᐃⵠΔᐃⵠⵠᐃ;
      ᐃᐃ[1503][2] = ⵠᐃ.ⲆⲆⲆᐃΔⵠⲆⵠⵠ;
      ᐃᐃ[1504] = ᐃᐃ[1503];
      ᐃᐃ[1505] = ᐃᐃ[1503];
      ᐃᐃ[773] = [];
      ᐃᐃ[773][0] = ⵠᐃ.ⲆⲆⲆᐃⵠⲆⲆⲆᐃ;
      ᐃᐃ[773][1] = ⵠᐃ.ΔⵠΔⲆⲆΔΔⵠᐃ;
      ᐃᐃ[773][2] = ⵠᐃ.ⲆᐃⵠΔⲆᐃΔⵠᐃ;
      ᐃᐃ[775] = ᐃᐃ[773];
      ᐃᐃ[774] = ᐃᐃ[773];
      ᐃᐃ[1506] = [];
      ᐃᐃ[1506][0] = ⵠᐃ.ⲆⵠΔⲆⲆⵠⲆΔⲆ;
      ᐃᐃ[1506][1] = ⵠᐃ.ⲆⵠΔΔⲆⲆΔⵠᐃ;
      ᐃᐃ[1506][2] = ⵠᐃ.ⲆⲆΔᐃΔΔᐃⲆⲆ;
      ᐃᐃ[1507] = ᐃᐃ[1506];
      ᐃᐃ[1508] = ᐃᐃ[1506];
      ᐃᐃ[776] = [];
      ᐃᐃ[776][0] = ⵠᐃ.ᐃⲆᐃΔᐃᐃⵠΔΔ;
      ᐃᐃ[776][1] = ⵠᐃ.ⵠⲆⲆⵠᐃΔᐃᐃⵠ;
      ᐃᐃ[776][2] = ⵠᐃ.ⵠᐃᐃΔᐃᐃΔᐃⵠ;
      ᐃᐃ[778] = ᐃᐃ[776];
      ᐃᐃ[777] = ᐃᐃ[776];
      ᐃᐃ[1509] = [];
      ᐃᐃ[1509][0] = ⵠᐃ.ⵠⲆᐃᐃⲆᐃΔⲆⲆ;
      ᐃᐃ[1509][1] = ⵠᐃ.ΔⵠⲆⲆΔᐃⲆⵠΔ;
      ᐃᐃ[1509][2] = ⵠᐃ.ᐃⵠΔᐃⲆⲆⲆᐃΔ;
      ᐃᐃ[1510] = ᐃᐃ[1509];
      ᐃᐃ[1511] = ᐃᐃ[1509];
      ᐃᐃ[779] = [];
      ᐃᐃ[779][0] = ⵠᐃ.ⵠᐃΔⲆⵠⵠⵠᐃⵠ;
      ᐃᐃ[779][1] = ⵠᐃ.ᐃⵠⵠᐃⵠⵠᐃΔⲆ;
      ᐃᐃ[779][2] = ⵠᐃ.ⲆΔⵠᐃΔᐃΔⵠΔ;
      ᐃᐃ[781] = ᐃᐃ[779];
      ᐃᐃ[780] = ᐃᐃ[779];
      ᐃᐃ[1512] = [];
      ᐃᐃ[1512][0] = ⵠᐃ.ΔᐃΔᐃⲆⵠᐃΔᐃ;
      ᐃᐃ[1512][1] = ⵠᐃ.ⲆⲆⵠⵠΔᐃΔⵠⲆ;
      ᐃᐃ[1512][2] = ⵠᐃ.ΔᐃⵠΔⵠΔᐃΔⵠ;
      ᐃᐃ[1513] = ᐃᐃ[1512];
      ᐃᐃ[1514] = ᐃᐃ[1512];
      ᐃᐃ[1675] = [];
      ᐃᐃ[1675][0] = ⵠᐃ.ΔⲆᐃⲆⵠΔⲆΔᐃ;
      ᐃᐃ[1675][1] = ⵠᐃ.ΔⵠⲆᐃᐃⵠᐃⲆᐃ;
      ᐃᐃ[1675][2] = ⵠᐃ.ᐃⲆᐃΔᐃⲆⵠⵠΔ;
      ᐃᐃ[1676] = ᐃᐃ[1675];
      ᐃᐃ[1674] = ᐃᐃ[1675];
      ᐃᐃ[1678] = [];
      ᐃᐃ[1678][0] = ⵠᐃ.ⵠⲆⵠᐃΔⲆᐃⵠⵠ;
      ᐃᐃ[1678][1] = ⵠᐃ.ⲆᐃⲆⲆⵠΔⵠⵠΔ;
      ᐃᐃ[1678][2] = ⵠᐃ.ⵠᐃᐃⲆⵠᐃⵠΔᐃ;
      ᐃᐃ[1679] = ᐃᐃ[1678];
      ᐃᐃ[1677] = ᐃᐃ[1678];
      ᐃᐃ[1681] = [];
      ᐃᐃ[1681][0] = ⵠᐃ.ⵠⵠᐃΔᐃⲆᐃⵠΔ;
      ᐃᐃ[1681][1] = ⵠᐃ.ⲆⲆⲆⵠⲆΔⲆᐃⵠ;
      ᐃᐃ[1681][2] = ⵠᐃ.ⲆᐃⵠᐃᐃᐃΔⵠⲆ;
      ᐃᐃ[1682] = ᐃᐃ[1681];
      ᐃᐃ[1680] = ᐃᐃ[1681];
      ᐃᐃ[1684] = [];
      ᐃᐃ[1684][0] = ⵠᐃ.ᐃΔᐃⵠⲆⵠΔΔᐃ;
      ᐃᐃ[1684][1] = ⵠᐃ.ΔΔᐃⵠΔⲆⵠⲆᐃ;
      ᐃᐃ[1684][2] = ⵠᐃ.ΔⵠᐃᐃᐃᐃᐃᐃΔ;
      ᐃᐃ[1685] = ᐃᐃ[1684];
      ᐃᐃ[1683] = ᐃᐃ[1684];
      ᐃᐃ[1687] = [];
      ᐃᐃ[1687][0] = ⵠᐃ.ᐃⵠΔⵠΔⵠⵠⵠΔ;
      ᐃᐃ[1687][1] = ⵠᐃ.ᐃΔⲆᐃⲆᐃⲆΔΔ;
      ᐃᐃ[1687][2] = ⵠᐃ.ΔⵠⲆΔⲆΔΔⲆΔ;
      ᐃᐃ[1688] = ᐃᐃ[1687];
      ᐃᐃ[1686] = ᐃᐃ[1687];
      ᐃᐃ[1690] = [];
      ᐃᐃ[1690][0] = ⵠᐃ.ΔᐃⲆⵠⵠᐃⵠᐃⵠ;
      ᐃᐃ[1690][1] = ⵠᐃ.ⵠⵠΔⵠⵠΔΔᐃᐃ;
      ᐃᐃ[1690][2] = ⵠᐃ.ΔⵠⵠⵠⲆΔᐃⲆᐃ;
      ᐃᐃ[1691] = ᐃᐃ[1690];
      ᐃᐃ[1689] = ᐃᐃ[1690];
      ᐃᐃ[1693] = [];
      ᐃᐃ[1693][0] = ⵠᐃ.ⲆⵠⵠᐃᐃⲆᐃⲆⵠ;
      ᐃᐃ[1693][1] = ⵠᐃ.ΔΔⲆⲆᐃⵠⵠⲆᐃ;
      ᐃᐃ[1693][2] = ⵠᐃ.ΔⵠⲆⲆᐃΔΔᐃⵠ;
      ᐃᐃ[1694] = ᐃᐃ[1693];
      ᐃᐃ[1692] = ᐃᐃ[1693];
      ᐃᐃ[1696] = [];
      ᐃᐃ[1696][0] = ⵠᐃ.ⵠⵠⲆᐃⲆⵠⵠⲆⵠ;
      ᐃᐃ[1696][1] = ⵠᐃ.ᐃΔΔⵠΔᐃᐃᐃΔ;
      ᐃᐃ[1696][2] = ⵠᐃ.ⵠᐃⵠΔⲆΔᐃⲆΔ;
      ᐃᐃ[1697] = ᐃᐃ[1696];
      ᐃᐃ[1695] = ᐃᐃ[1696];
      ᐃᐃ[1699] = [];
      ᐃᐃ[1699][0] = ⵠᐃ.ΔᐃⵠⵠᐃⲆΔΔΔ;
      ᐃᐃ[1699][1] = ⵠᐃ.ᐃⵠⵠⲆⵠⵠΔΔΔ;
      ᐃᐃ[1699][2] = ⵠᐃ.ΔΔΔΔᐃΔⵠΔΔ;
      ᐃᐃ[1700] = ᐃᐃ[1699];
      ᐃᐃ[1698] = ᐃᐃ[1699];
      ᐃᐃ[1702] = [];
      ᐃᐃ[1702][0] = ⵠᐃ.ⲆᐃⵠΔᐃⲆⲆΔᐃ;
      ᐃᐃ[1702][1] = ⵠᐃ.ᐃⵠⲆᐃⵠᐃⵠⵠΔ;
      ᐃᐃ[1702][2] = ⵠᐃ.ΔΔⲆⲆⵠⵠⲆᐃⵠ;
      ᐃᐃ[1703] = ᐃᐃ[1702];
      ᐃᐃ[1701] = ᐃᐃ[1702];
      ᐃᐃ[1705] = [];
      ᐃᐃ[1705][0] = ⵠᐃ.ᐃⲆΔΔⲆⵠᐃᐃΔ;
      ᐃᐃ[1705][1] = ⵠᐃ.ᐃΔΔⵠΔⲆⵠΔⵠ;
      ᐃᐃ[1705][2] = ⵠᐃ.ΔⵠⵠⵠⲆⵠⲆΔΔ;
      ᐃᐃ[1706] = ᐃᐃ[1705];
      ᐃᐃ[1704] = ᐃᐃ[1705];
      ᐃᐃ[1708] = [];
      ᐃᐃ[1708][0] = ⵠᐃ.ⲆᐃⵠⲆΔΔᐃᐃⲆ;
      ᐃᐃ[1708][1] = ⵠᐃ.ⵠⲆΔΔΔᐃᐃΔⵠ;
      ᐃᐃ[1708][2] = ⵠᐃ.ⲆᐃΔⵠΔΔⲆᐃⵠ;
      ᐃᐃ[1709] = ᐃᐃ[1708];
      ᐃᐃ[1707] = ᐃᐃ[1708];
      ᐃᐃ[1711] = [];
      ᐃᐃ[1711][0] = ⵠᐃ.ᐃᐃⵠⵠᐃΔᐃᐃⲆ;
      ᐃᐃ[1711][1] = ⵠᐃ.ᐃΔⲆΔⵠⵠΔⲆⵠ;
      ᐃᐃ[1711][2] = ⵠᐃ.ⲆⵠⵠⲆⵠΔΔⵠⲆ;
      ᐃᐃ[1712] = ᐃᐃ[1711];
      ᐃᐃ[1710] = ᐃᐃ[1711];
      ᐃᐃ[1714] = [];
      ᐃᐃ[1714][0] = ⵠᐃ.ᐃΔⲆΔⲆᐃᐃⵠΔ;
      ᐃᐃ[1714][1] = ⵠᐃ.ⲆΔⲆⵠᐃΔᐃᐃⲆ;
      ᐃᐃ[1714][2] = ⵠᐃ.ⲆⲆⲆᐃⵠⲆΔⲆⲆ;
      ᐃᐃ[1715] = ᐃᐃ[1714];
      ᐃᐃ[1713] = ᐃᐃ[1714];
      ᐃᐃ[1717] = [];
      ᐃᐃ[1717][0] = ⵠᐃ.ⲆⵠΔⲆⵠⲆᐃᐃᐃ;
      ᐃᐃ[1717][1] = ⵠᐃ.ᐃⵠⲆⵠΔΔᐃⵠⲆ;
      ᐃᐃ[1717][2] = ⵠᐃ.ΔΔΔᐃⵠⵠᐃⵠᐃ;
      ᐃᐃ[1718] = ᐃᐃ[1717];
      ᐃᐃ[1716] = ᐃᐃ[1717];
      ᐃᐃ[1630] = [];
      ᐃᐃ[1630][0] = ⵠᐃ.ΔⵠΔⵠΔⲆⲆⵠᐃ;
      ᐃᐃ[1630][1] = ⵠᐃ.ⵠΔⵠⵠΔⲆᐃⵠΔ;
      ᐃᐃ[1630][2] = ⵠᐃ.ᐃⵠΔⵠⲆⵠⲆΔⲆ;
      ᐃᐃ[1631] = ᐃᐃ[1630];
      ᐃᐃ[1629] = ᐃᐃ[1630];
      ᐃᐃ[1633] = [];
      ᐃᐃ[1633][0] = ⵠᐃ.ΔⵠⲆⲆⲆⵠⲆᐃⵠ;
      ᐃᐃ[1633][1] = ⵠᐃ.ᐃⵠᐃⲆⵠᐃᐃΔⵠ;
      ᐃᐃ[1633][2] = ⵠᐃ.ⲆⲆᐃⵠⲆⵠᐃᐃⲆ;
      ᐃᐃ[1634] = ᐃᐃ[1633];
      ᐃᐃ[1632] = ᐃᐃ[1633];
      ᐃᐃ[1636] = [];
      ᐃᐃ[1636][0] = ⵠᐃ.ⵠᐃᐃΔᐃⵠⵠΔΔ;
      ᐃᐃ[1636][1] = ⵠᐃ.ΔΔⵠⵠⲆᐃⲆⲆᐃ;
      ᐃᐃ[1636][2] = ⵠᐃ.ⵠⲆⲆⵠΔⵠᐃⲆᐃ;
      ᐃᐃ[1637] = ᐃᐃ[1636];
      ᐃᐃ[1635] = ᐃᐃ[1636];
      ᐃᐃ[1639] = [];
      ᐃᐃ[1639][0] = ⵠᐃ.ᐃⵠΔᐃⲆⵠᐃⲆᐃ;
      ᐃᐃ[1639][1] = ⵠᐃ.ⵠᐃΔⲆⲆⵠⵠⵠⵠ;
      ᐃᐃ[1639][2] = ⵠᐃ.ᐃⲆᐃΔᐃᐃᐃⲆⲆ;
      ᐃᐃ[1640] = ᐃᐃ[1639];
      ᐃᐃ[1638] = ᐃᐃ[1639];
      ᐃᐃ[1642] = [];
      ᐃᐃ[1642][0] = ⵠᐃ.ⲆΔᐃΔⲆⵠⲆΔⲆ;
      ᐃᐃ[1642][1] = ⵠᐃ.ΔΔⲆΔⲆⲆΔΔⲆ;
      ᐃᐃ[1642][2] = ⵠᐃ.ᐃⲆⲆⲆΔᐃΔΔᐃ;
      ᐃᐃ[1643] = ᐃᐃ[1642];
      ᐃᐃ[1641] = ᐃᐃ[1642];
      ᐃᐃ[1645] = [];
      ᐃᐃ[1645][0] = ⵠᐃ.ΔⵠᐃᐃⵠⲆⵠⲆᐃ;
      ᐃᐃ[1645][1] = ⵠᐃ.ⵠᐃΔⲆⲆⵠΔΔΔ;
      ᐃᐃ[1645][2] = ⵠᐃ.ⲆΔⵠΔⲆΔⲆΔⲆ;
      ᐃᐃ[1646] = ᐃᐃ[1645];
      ᐃᐃ[1644] = ᐃᐃ[1645];
      ᐃᐃ[1618] = [];
      ᐃᐃ[1618][0] = ⵠᐃ.ⵠⲆⵠΔⵠⲆⵠΔΔ;
      ᐃᐃ[1618][1] = ⵠᐃ.ⵠΔⵠᐃⵠΔⵠΔᐃ;
      ᐃᐃ[1618][2] = ⵠᐃ.ⲆⵠⲆᐃΔΔⲆⲆΔ;
      ᐃᐃ[1620] = ᐃᐃ[1618];
      ᐃᐃ[1619] = ᐃᐃ[1618];
      ᐃᐃ[1542] = [];
      ᐃᐃ[1542][0] = ⵠᐃ.ᐃᐃⲆᐃΔᐃⵠ;
      ᐃᐃ[1542][1] = ⵠᐃ.ΔⲆⵠⵠΔᐃⵠ;
      ᐃᐃ[1542][2] = ⵠᐃ.ᐃΔΔⲆᐃⵠⲆ;
      ᐃᐃ[1543] = ᐃᐃ[1542];
      ᐃᐃ[v585.ⵠⵠΔΔⵠᐃⵠᐃⵠ] = ᐃᐃ[1542];
      ᐃᐃ[1089] = f119(1, [{
        f: f95,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1090] = ᐃᐃ[1089];
      ᐃᐃ[1099] = f119(1, [{
        f: f248,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1100] = ᐃᐃ[1099];
      ᐃᐃ[863] = f119(1, [{
        f: f121,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: f110,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: f123,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[862] = ᐃᐃ[863];
      ᐃᐃ[858] = f119(1, [{
        f: f117,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1049] = f119(1, [{
        f: f205,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1048] = ᐃᐃ[1049];
      ᐃᐃ[850] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[851] = ᐃᐃ[850];
      ᐃᐃ[422] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[394] = ᐃᐃ[422];
      ᐃᐃ[1057] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1058] = ᐃᐃ[1057];
      ᐃᐃ[1083] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1084] = ᐃᐃ[1083];
      ᐃᐃ[1094] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1095] = ᐃᐃ[1094];
      ᐃᐃ[1225] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1226] = ᐃᐃ[1225];
      ᐃᐃ[1227] = ᐃᐃ[1225];
      ᐃᐃ[1242] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1243] = ᐃᐃ[1242];
      ᐃᐃ[1244] = ᐃᐃ[1242];
      ᐃᐃ[1257] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1258] = ᐃᐃ[1257];
      ᐃᐃ[1259] = ᐃᐃ[1257];
      ᐃᐃ[1235] = f119(1, [{
        f: f155,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1236] = ᐃᐃ[1235];
      ᐃᐃ[1237] = ᐃᐃ[1235];
      ᐃᐃ[420] = f119(1, [{
        f: f146,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: f127,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[413] = ᐃᐃ[420];
      ᐃᐃ[439] = f119(1, [{
        f: f124,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: f127,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[438] = ᐃᐃ[439];
      ᐃᐃ[1109] = f119(1, [{
        f: f143,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1114] = f119(1, [{
        f: f153,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1078] = f119(1, [{
        f: f136,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[371] = f119(1, [{
        f: f135,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[402] = f119(1, [{
        f: f149,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[403] = f119(1, [{
        f: f147,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[593] = f119(1, [{
        f: f150,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[424] = f119(1, [{
        f: f132,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[423] = f119(1, [{
        f: f132,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[368] = f119(1, [{
        f: f132,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[407] = f119(1, [{
        f: f132,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[596] = f119(1, [{
        f: f132,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1293] = [];
      ᐃᐃ[1293][0] = ⵠᐃ.ⵠⲆⵠᐃⵠΔᐃ;
      ᐃᐃ[1293][1] = ⵠᐃ.ⵠᐃⵠⵠΔΔᐃ;
      ᐃᐃ[1293][2] = ⵠᐃ.ⵠⲆᐃⵠᐃⵠⲆ;
      ᐃᐃ[1295] = ᐃᐃ[1293];
      ᐃᐃ[1294] = ᐃᐃ[1293];
      ᐃᐃ[426] = f119(1, [{
        f: f156,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[408] = f119(1, [{
        f: f181,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[409] = f119(1, [{
        f: f202,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[427] = f119(1, [{
        f: f146,
        x: 0,
        y: -5,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[1079] = ᐃᐃ[1078];
      ᐃᐃ[364] = ᐃᐃ[371];
      ᐃᐃ[400] = ᐃᐃ[402];
      ᐃᐃ[401] = ᐃᐃ[403];
      ᐃᐃ[594] = ᐃᐃ[593];
      ᐃᐃ[425] = ᐃᐃ[424];
      ᐃᐃ[366] = ᐃᐃ[423];
      ᐃᐃ[406] = ᐃᐃ[368];
      ᐃᐃ[367] = ᐃᐃ[407];
      ᐃᐃ[598] = ᐃᐃ[596];
      ᐃᐃ[387] = f119(1, [{
        f: f111,
        x: 0,
        y: 0,
        a: 1,
        r: 0
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[421] = f119(1, [{
        f: f109,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[372] = ᐃᐃ[421];
      ᐃᐃ[440] = f119(1, [{
        f: f177,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[373] = ᐃᐃ[440];
      ᐃᐃ[442] = f119(1, [{
        f: f170,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[443] = ᐃᐃ[442];
      ᐃᐃ[630] = f119(1, [{
        f: f177,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[631] = ᐃᐃ[630];
      ᐃᐃ[441] = f119(1, [{
        f: f187,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[375] = ᐃᐃ[441];
      ᐃᐃ[428] = f119(1, [{
        f: f198,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[429] = ᐃᐃ[428];
      ᐃᐃ[430] = f119(1, [{
        f: f158,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[431] = ᐃᐃ[430];
      ᐃᐃ[473] = f119(1, [{
        f: f196,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[474] = ᐃᐃ[473];
      ᐃᐃ[475] = f119(1, [{
        f: f196,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[476] = ᐃᐃ[475];
      ᐃᐃ[472] = f119(1, [{
        f: f178,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[471] = ᐃᐃ[472];
      ᐃᐃ[633] = f119(1, [{
        f: f178,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[634] = ᐃᐃ[633];
      ᐃᐃ[446] = f119(1, [{
        f: f185,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[378] = ᐃᐃ[446];
      ᐃᐃ[483] = f119(1, [{
        f: f166,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[482] = ᐃᐃ[483];
      ᐃᐃ[637] = f119(1, [{
        f: f166,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[636] = ᐃᐃ[637];
      ᐃᐃ[486] = f119(1, [{
        f: f165,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[485] = ᐃᐃ[486];
      ᐃᐃ[489] = f119(1, [{
        f: f183,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[488] = ᐃᐃ[489];
      ᐃᐃ[448] = f119(1, [{
        f: f191,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[449] = ᐃᐃ[448];
      ᐃᐃ[411] = f119(1, [{
        f: f106,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[434] = f119(1, [{
        f: f106,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[436] = ᐃᐃ[434];
      ᐃᐃ[416] = f119(1, [{
        f: f115,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[651] = f119(1, [{
        f: f115,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[653] = ᐃᐃ[651];
      ᐃᐃ[479] = f119(1, [{
        f: f163,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[1490] = f119(1, [{
        f: f163,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[280] = f119(1, [{
        f: f171,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[281] = f119(1, [{
        f: f171,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[843] = f119(1, [{
        f: f163,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[504] = f119(1, [{
        f: f163,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[643] = f119(1, [{
        f: f163,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[480] = f119(1, [{
        f: f200,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[481] = ᐃᐃ[480];
      ᐃᐃ[492] = f119(1, [{
        f: f160,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[491] = ᐃᐃ[492];
      ᐃᐃ[640] = f119(1, [{
        f: f194,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[641] = ᐃᐃ[640];
      ᐃᐃ[1156] = f119(1, [{
        f: f126,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1157] = ᐃᐃ[1156];
      ᐃᐃ[1158] = f119(1, [{
        f: f144,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1159] = ᐃᐃ[1158];
      ᐃᐃ[414] = f119(1, [{
        f: f107,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[415] = ᐃᐃ[414];
      ᐃᐃ[503] = [];
      ᐃᐃ[503][0] = ⵠᐃ.ⵠⲆᐃⲆⵠΔⵠ;
      ᐃᐃ[503][1] = ⵠᐃ.ᐃⲆⲆᐃᐃⲆΔ;
      ᐃᐃ[503][2] = ⵠᐃ.ⵠΔᐃΔᐃⵠΔ;
      ᐃᐃ[478] = ᐃᐃ[503];
      ᐃᐃ[1251] = [];
      ᐃᐃ[1251][0] = ⵠᐃ.ⵠΔᐃᐃᐃΔⲆ;
      ᐃᐃ[1251][1] = ⵠᐃ.ⵠⲆⲆⵠⲆΔΔ;
      ᐃᐃ[1251][2] = ⵠᐃ.ᐃᐃⲆΔΔⲆⲆ;
      ᐃᐃ[1253] = ᐃᐃ[1251];
      ᐃᐃ[1252] = ᐃᐃ[1251];
      ᐃᐃ[1254] = [];
      ᐃᐃ[1254][0] = ⵠᐃ.ΔⵠΔⵠΔⲆᐃ;
      ᐃᐃ[1254][1] = ⵠᐃ.ⲆⵠΔⲆΔⵠⵠ;
      ᐃᐃ[1254][2] = ⵠᐃ.ΔⵠⲆᐃΔⵠΔ;
      ᐃᐃ[1256] = ᐃᐃ[1254];
      ᐃᐃ[1255] = ᐃᐃ[1254];
      ᐃᐃ[1486] = [];
      ᐃᐃ[1486][0] = ⵠᐃ.ⵠⵠΔΔᐃᐃΔ;
      ᐃᐃ[1486][1] = ⵠᐃ.ⵠⵠΔΔᐃᐃΔ;
      ᐃᐃ[1486][2] = ⵠᐃ.ⵠⵠΔΔᐃᐃΔ;
      ᐃᐃ[1487] = ᐃᐃ[1486];
      ᐃᐃ[537] = [];
      ᐃᐃ[537][0] = ⵠᐃ.ΔᐃΔᐃᐃΔⲆ;
      ᐃᐃ[537][1] = ⵠᐃ.ΔⲆⲆⵠⵠⵠⲆ;
      ᐃᐃ[537][2] = ⵠᐃ.ⵠⲆᐃⲆᐃⲆⵠ;
      ᐃᐃ[538] = ᐃᐃ[537];
      ᐃᐃ[539] = ᐃᐃ[537];
      ᐃᐃ[1488] = [];
      ᐃᐃ[1488][0] = ⵠᐃ.ⲆᐃⵠⵠᐃⲆⵠ;
      ᐃᐃ[1488][1] = ⵠᐃ.ⲆᐃⵠⵠᐃⲆⵠ;
      ᐃᐃ[1488][2] = ⵠᐃ.ⲆᐃⵠⵠᐃⲆⵠ;
      ᐃᐃ[1489] = ᐃᐃ[1488];
      ᐃᐃ[1627] = [];
      ᐃᐃ[1627][0] = ⵠᐃ.ⲆΔΔⵠⲆⲆΔⲆΔ;
      ᐃᐃ[1627][1] = ⵠᐃ.ⲆΔΔⲆⵠᐃᐃΔΔ;
      ᐃᐃ[1627][2] = ⵠᐃ.ΔᐃΔⲆΔⵠⵠⲆⵠ;
      ᐃᐃ[1626] = ᐃᐃ[1627];
      ᐃᐃ[1628] = ᐃᐃ[1627];
      ᐃᐃ[1267] = [];
      ᐃᐃ[1267][0] = ⵠᐃ.ᐃΔᐃⵠᐃⵠⵠ;
      ᐃᐃ[1267][1] = ⵠᐃ.ΔΔΔⵠⵠΔⲆ;
      ᐃᐃ[1267][2] = ⵠᐃ.ΔΔⲆⲆⵠⲆᐃ;
      ᐃᐃ[1266] = ᐃᐃ[1267];
      ᐃᐃ[1268] = ᐃᐃ[1267];
      ᐃᐃ[1270] = [];
      ᐃᐃ[1270][0] = ⵠᐃ.ᐃⲆᐃᐃⵠΔⵠ;
      ᐃᐃ[1270][1] = ⵠᐃ.ΔⲆⲆᐃⵠⵠΔ;
      ᐃᐃ[1270][2] = ⵠᐃ.ᐃᐃΔΔⵠⲆΔ;
      ᐃᐃ[1269] = ᐃᐃ[1270];
      ᐃᐃ[1271] = ᐃᐃ[1270];
      ᐃᐃ[1273] = [];
      ᐃᐃ[1273][0] = ⵠᐃ.ᐃⵠⲆΔΔⵠᐃ;
      ᐃᐃ[1273][1] = ⵠᐃ.ᐃⲆⲆⵠⵠⵠⲆ;
      ᐃᐃ[1273][2] = ⵠᐃ.ⲆⵠᐃⲆⲆⵠⲆ;
      ᐃᐃ[1272] = ᐃᐃ[1273];
      ᐃᐃ[1274] = ᐃᐃ[1273];
      ᐃᐃ[1276] = [];
      ᐃᐃ[1276][0] = ⵠᐃ.ⵠⲆⵠΔᐃΔⲆ;
      ᐃᐃ[1276][1] = ⵠᐃ.ⵠᐃΔΔⲆⲆΔ;
      ᐃᐃ[1276][2] = ⵠᐃ.ᐃᐃⵠΔⵠΔΔ;
      ᐃᐃ[1275] = ᐃᐃ[1276];
      ᐃᐃ[1277] = ᐃᐃ[1276];
      ᐃᐃ[1279] = [];
      ᐃᐃ[1279][0] = ⵠᐃ.ΔΔᐃⵠⲆᐃΔ;
      ᐃᐃ[1279][1] = ⵠᐃ.ⵠⵠΔΔᐃᐃⲆ;
      ᐃᐃ[1279][2] = ⵠᐃ.ᐃΔⲆⲆⲆΔⲆ;
      ᐃᐃ[1278] = ᐃᐃ[1279];
      ᐃᐃ[1280] = ᐃᐃ[1279];
      ᐃᐃ[1282] = [];
      ᐃᐃ[1282][0] = ⵠᐃ.ᐃᐃⵠⲆᐃⵠⲆ;
      ᐃᐃ[1282][1] = ⵠᐃ.ΔⵠᐃⵠⵠΔⲆ;
      ᐃᐃ[1282][2] = ⵠᐃ.ⲆᐃⲆⲆᐃⲆΔ;
      ᐃᐃ[1281] = ᐃᐃ[1282];
      ᐃᐃ[1283] = ᐃᐃ[1282];
      ᐃᐃ[1285] = [];
      ᐃᐃ[1285][0] = ⵠᐃ.ᐃᐃᐃΔΔΔΔ;
      ᐃᐃ[1285][1] = ⵠᐃ.ᐃⵠᐃΔᐃΔⵠ;
      ᐃᐃ[1285][2] = ⵠᐃ.ⲆⲆⵠᐃΔΔᐃ;
      ᐃᐃ[1284] = ᐃᐃ[1285];
      ᐃᐃ[1286] = ᐃᐃ[1285];
      ᐃᐃ[1288] = [];
      ᐃᐃ[1288][0] = ⵠᐃ.ΔΔⲆⲆΔΔᐃ;
      ᐃᐃ[1288][1] = ⵠᐃ.ᐃᐃΔΔⵠᐃΔ;
      ᐃᐃ[1288][2] = ⵠᐃ.ⵠΔΔΔⵠΔⲆ;
      ᐃᐃ[1287] = ᐃᐃ[1288];
      ᐃᐃ[1289] = ᐃᐃ[1288];
      ᐃᐃ[1291] = [];
      ᐃᐃ[1291][0] = ⵠᐃ.ᐃⲆΔⵠⲆᐃΔ;
      ᐃᐃ[1291][1] = ⵠᐃ.ⲆᐃᐃⲆᐃΔᐃ;
      ᐃᐃ[1291][2] = ⵠᐃ.ⲆΔᐃᐃᐃᐃⵠ;
      ᐃᐃ[1290] = ᐃᐃ[1291];
      ᐃᐃ[1292] = ᐃᐃ[1291];
      ᐃᐃ[1343] = [];
      ᐃᐃ[1343][0] = ⵠᐃ.ⲆⲆⵠⲆΔ;
      ᐃᐃ[1343][1] = ⵠᐃ.ⲆⲆⵠⲆΔ;
      ᐃᐃ[1343][2] = ⵠᐃ.ⲆⲆⵠⲆΔ;
      ᐃᐃ[v585.ⵠᐃᐃΔᐃⵠⲆΔⵠ] = ᐃᐃ[1343];
      ᐃᐃ[1344] = ᐃᐃ[1343];
      ᐃᐃ[1345] = [];
      ᐃᐃ[1345][0] = ⵠᐃ.ᐃᐃⲆΔᐃ;
      ᐃᐃ[1345][1] = ⵠᐃ.ᐃᐃⲆΔᐃ;
      ᐃᐃ[1345][2] = ⵠᐃ.ᐃᐃⲆΔᐃ;
      ᐃᐃ[v585.ΔⵠᐃᐃΔᐃⵠⲆΔ] = ᐃᐃ[1345];
      ᐃᐃ[1346] = ᐃᐃ[1345];
      ᐃᐃ[1347] = [];
      ᐃᐃ[1347][0] = ⵠᐃ.ⵠⲆⲆΔᐃ;
      ᐃᐃ[1347][1] = ⵠᐃ.ⵠⲆⲆΔᐃ;
      ᐃᐃ[1347][2] = ⵠᐃ.ⵠⲆⲆΔᐃ;
      ᐃᐃ[v585.ⲆΔⲆⵠⵠⲆΔᐃᐃ] = ᐃᐃ[1347];
      ᐃᐃ[1348] = ᐃᐃ[1347];
      ᐃᐃ[1463] = [];
      ᐃᐃ[1463][0] = ⵠᐃ.ᐃⵠⲆΔⵠ;
      ᐃᐃ[1463][1] = ⵠᐃ.ᐃⵠⲆΔⵠ;
      ᐃᐃ[1463][2] = ⵠᐃ.ᐃⵠⲆΔⵠ;
      ᐃᐃ[v585.ⲆⵠᐃⲆⲆⲆⵠⲆᐃ] = ᐃᐃ[1463];
      ᐃᐃ[1464] = ᐃᐃ[1463];
      ᐃᐃ[1484] = [];
      ᐃᐃ[1484][0] = ⵠᐃ.ⲆᐃⲆⲆⲆ;
      ᐃᐃ[1484][1] = ⵠᐃ.ⲆᐃⲆⲆⲆ;
      ᐃᐃ[1484][2] = ⵠᐃ.ⲆᐃⲆⲆⲆ;
      ᐃᐃ[1485] = ᐃᐃ[1484];
      ᐃᐃ[1354] = [];
      ᐃᐃ[1354][0] = ⵠᐃ.ⲆⲆⵠⵠᐃⵠΔ;
      ᐃᐃ[1354][1] = ⵠᐃ.ⵠΔᐃⵠⲆⵠᐃ;
      ᐃᐃ[1354][2] = ⵠᐃ.ΔΔⲆᐃᐃⲆᐃ;
      ᐃᐃ[1356] = ᐃᐃ[1354];
      ᐃᐃ[1355] = ᐃᐃ[1354];
      ᐃᐃ[993] = [];
      ᐃᐃ[993][0] = ⵠᐃ.ᐃΔΔⲆⲆᐃⵠ;
      ᐃᐃ[993][1] = ⵠᐃ.ΔᐃᐃᐃⵠⲆⲆ;
      ᐃᐃ[993][2] = ⵠᐃ.ⲆᐃⲆΔⵠⵠΔ;
      ᐃᐃ[995] = ᐃᐃ[993];
      ᐃᐃ[994] = ᐃᐃ[993];
      ᐃᐃ[996] = [];
      ᐃᐃ[996][0] = ⵠᐃ.ⲆⵠᐃΔⲆΔᐃ;
      ᐃᐃ[996][1] = ⵠᐃ.ⲆᐃΔᐃᐃⲆᐃ;
      ᐃᐃ[996][2] = ⵠᐃ.ᐃⵠⲆⲆⲆⲆⲆ;
      ᐃᐃ[998] = ᐃᐃ[996];
      ᐃᐃ[997] = ᐃᐃ[996];
      ᐃᐃ[1357] = [];
      ᐃᐃ[1357][0] = ⵠᐃ.ⵠᐃⵠⵠⵠⲆᐃ;
      ᐃᐃ[1357][1] = ⵠᐃ.ΔⲆΔᐃᐃΔΔ;
      ᐃᐃ[1357][2] = ⵠᐃ.ᐃⵠⲆⲆⵠΔⵠ;
      ᐃᐃ[1359] = ᐃᐃ[1357];
      ᐃᐃ[1358] = ᐃᐃ[1357];
      ᐃᐃ[1328] = [];
      ᐃᐃ[1328][0] = ⵠᐃ.ⲆⵠⵠⵠᐃᐃⲆ;
      ᐃᐃ[1328][1] = ⵠᐃ.ⲆⵠᐃⵠΔⵠⲆ;
      ᐃᐃ[1328][2] = ⵠᐃ.ⲆⲆⵠᐃᐃᐃⲆ;
      ᐃᐃ[1330] = ᐃᐃ[1328];
      ᐃᐃ[1329] = ᐃᐃ[1328];
      ᐃᐃ[1544] = [];
      ᐃᐃ[1544][0] = ⵠᐃ.ΔⵠⵠⲆⲆᐃⵠ;
      ᐃᐃ[1544][1] = ⵠᐃ.ⲆΔⵠΔⲆΔⵠ;
      ᐃᐃ[1544][2] = ⵠᐃ.ⵠΔΔᐃᐃᐃⵠ;
      ᐃᐃ[1546] = ᐃᐃ[1544];
      ᐃᐃ[1545] = ᐃᐃ[1544];
      ᐃᐃ[1418] = [];
      ᐃᐃ[1418][0] = ⵠᐃ.ⲆᐃⲆⲆΔⵠΔ;
      ᐃᐃ[1418][1] = ⵠᐃ.ᐃⲆⵠᐃⲆᐃᐃ;
      ᐃᐃ[1418][2] = ⵠᐃ.ᐃᐃᐃΔⲆⲆᐃ;
      ᐃᐃ[1420] = ᐃᐃ[1418];
      ᐃᐃ[1419] = ᐃᐃ[1418];
      ᐃᐃ[1439] = [];
      ᐃᐃ[1439][0] = ⵠᐃ.ⵠΔⵠΔⵠⲆΔ;
      ᐃᐃ[1439][1] = ⵠᐃ.ⲆⵠⲆⲆᐃΔⲆ;
      ᐃᐃ[1439][2] = ⵠᐃ.ΔⲆᐃⵠⵠᐃⲆ;
      ᐃᐃ[1441] = ᐃᐃ[1439];
      ᐃᐃ[1440] = ᐃᐃ[1439];
      ᐃᐃ[1457] = [];
      ᐃᐃ[1457][0] = ⵠᐃ.ⵠΔΔΔⲆΔⲆ;
      ᐃᐃ[1457][1] = ⵠᐃ.ⲆⵠⵠΔᐃΔⵠ;
      ᐃᐃ[1457][2] = ⵠᐃ.ΔⲆΔⲆᐃⵠⲆ;
      ᐃᐃ[1459] = ᐃᐃ[1457];
      ᐃᐃ[1458] = ᐃᐃ[1457];
      ᐃᐃ[1465] = [];
      ᐃᐃ[1465][0] = ⵠᐃ.ᐃΔΔⲆᐃⵠⵠ;
      ᐃᐃ[1465][1] = ⵠᐃ.ⵠΔⵠΔᐃⲆⵠ;
      ᐃᐃ[1465][2] = ⵠᐃ.ΔⵠⲆⵠⲆΔⲆ;
      ᐃᐃ[1466] = ᐃᐃ[1465];
      ᐃᐃ[1467] = ᐃᐃ[1465];
      ᐃᐃ[1468] = [];
      ᐃᐃ[1468][0] = ⵠᐃ.ΔⲆⵠΔⵠⵠⲆ;
      ᐃᐃ[1468][1] = ⵠᐃ.ΔⵠΔⲆⵠⵠΔ;
      ᐃᐃ[1468][2] = ⵠᐃ.ⵠΔⵠⵠⲆⲆⲆ;
      ᐃᐃ[1469] = ᐃᐃ[1468];
      ᐃᐃ[1470] = ᐃᐃ[1468];
      ᐃᐃ[1425] = [];
      ᐃᐃ[1425][0] = ⵠᐃ.ΔΔⵠᐃᐃⲆᐃ;
      ᐃᐃ[1425][1] = ⵠᐃ.ΔΔⲆΔΔᐃᐃ;
      ᐃᐃ[1425][2] = ⵠᐃ.ΔⲆⲆΔᐃᐃΔ;
      ᐃᐃ[1424] = ᐃᐃ[1425];
      ᐃᐃ[1426] = ᐃᐃ[1425];
      ᐃᐃ[1388] = [];
      ᐃᐃ[1388][0] = ⵠᐃ.ΔⲆΔΔⲆⲆⲆ;
      ᐃᐃ[1388][1] = ⵠᐃ.ⲆⵠΔΔΔⵠⵠ;
      ᐃᐃ[1388][2] = ⵠᐃ.ⵠⵠⵠᐃΔⲆΔ;
      ᐃᐃ[1390] = ᐃᐃ[1388];
      ᐃᐃ[1389] = ᐃᐃ[1388];
      ᐃᐃ[1615] = [];
      ᐃᐃ[1615][0] = ⵠᐃ.ᐃᐃⲆⲆⵠⵠᐃᐃⲆ;
      ᐃᐃ[1615][1] = ⵠᐃ.ⲆⵠⵠⲆᐃᐃⲆᐃⲆ;
      ᐃᐃ[1615][2] = ⵠᐃ.ΔⵠⵠΔⲆΔΔᐃⲆ;
      ᐃᐃ[1617] = ᐃᐃ[1615];
      ᐃᐃ[1616] = ᐃᐃ[1615];
      ᐃᐃ[1403] = [];
      ᐃᐃ[1403][0] = ⵠᐃ.ⵠᐃⲆⲆⲆⵠⲆ;
      ᐃᐃ[1403][1] = ⵠᐃ.ᐃⵠⲆⵠᐃΔΔ;
      ᐃᐃ[1403][2] = ⵠᐃ.ⵠΔⲆΔᐃΔΔ;
      ᐃᐃ[1405] = ᐃᐃ[1403];
      ᐃᐃ[1404] = ᐃᐃ[1403];
      ᐃᐃ[966] = f119(1, [{
        f: f267,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: f279,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[967] = ᐃᐃ[966];
      ᐃᐃ[519] = f119(1, [{
        f: f164,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[520] = ᐃᐃ[519];
      ᐃᐃ[1183] = f119(1, [{
        f: f175,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1185] = ᐃᐃ[1183];
      ᐃᐃ[1184] = ᐃᐃ[1183];
      ᐃᐃ[299] = f119(1, [{
        f: f189,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1182] = ᐃᐃ[299];
      ᐃᐃ[1177] = f119(1, [{
        f: f204,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1176] = ᐃᐃ[1177];
      ᐃᐃ[1175] = ᐃᐃ[1177];
      ᐃᐃ[512] = f119(1, [{
        f: f168,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[513] = ᐃᐃ[512];
      ᐃᐃ[506] = f119(1, [{
        f: f180,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[507] = ᐃᐃ[506];
      ᐃᐃ[509] = f119(1, [{
        f: f161,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[510] = ᐃᐃ[509];
      ᐃᐃ[515] = f119(1, [{
        f: f176,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[516] = ᐃᐃ[515];
      ᐃᐃ[610] = f119(1, [{
        f: f179,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[611] = ᐃᐃ[610];
      ᐃᐃ[1123] = f119(1, [{
        f: f201,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1125] = ᐃᐃ[1123];
      ᐃᐃ[1124] = ᐃᐃ[1123];
      ᐃᐃ[615] = f119(1, [{
        f: f207,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[616] = ᐃᐃ[615];
      ᐃᐃ[958] = f119(1, [{
        f: f253,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[960] = ᐃᐃ[958];
      ᐃᐃ[688] = f119(1, [{
        f: f276,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[689] = ᐃᐃ[688];
      ᐃᐃ[618] = f119(1, [{
        f: f207,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[619] = ᐃᐃ[618];
      ᐃᐃ[621] = f119(1, [{
        f: f207,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[622] = ᐃᐃ[621];
      ᐃᐃ[624] = f119(1, [{
        f: f207,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[625] = ᐃᐃ[624];
      ᐃᐃ[627] = [];
      ᐃᐃ[627][0] = ⵠᐃ.ΔⵠⵠⲆᐃᐃⵠ;
      ᐃᐃ[627][1] = ⵠᐃ.ΔⲆΔΔΔⲆΔ;
      ᐃᐃ[627][2] = ⵠᐃ.ⵠᐃᐃⵠᐃΔⲆ;
      ᐃᐃ[629] = ᐃᐃ[627];
      ᐃᐃ[628] = ᐃᐃ[627];
      ᐃᐃ[1550] = [];
      ᐃᐃ[1550][0] = ⵠᐃ.ΔᐃⵠⲆᐃⵠΔ;
      ᐃᐃ[1550][1] = ⵠᐃ.ᐃⵠⵠΔᐃᐃΔ;
      ᐃᐃ[1550][2] = ⵠᐃ.ⲆᐃⲆΔⲆᐃᐃ;
      ᐃᐃ[1552] = ᐃᐃ[1550];
      ᐃᐃ[1551] = ᐃᐃ[1550];
      ᐃᐃ[1554] = [];
      ᐃᐃ[1554][0] = ⵠᐃ.ⲆᐃΔΔⵠⲆⲆ;
      ᐃᐃ[1554][1] = ⵠᐃ.ᐃᐃⵠΔᐃⵠΔ;
      ᐃᐃ[1554][2] = ⵠᐃ.ⵠⵠΔΔΔΔΔ;
      ᐃᐃ[1556] = ᐃᐃ[1554];
      ᐃᐃ[1555] = ᐃᐃ[1554];
      ᐃᐃ[1558] = [];
      ᐃᐃ[1558][0] = ⵠᐃ.ΔⲆᐃΔΔⵠᐃ;
      ᐃᐃ[1558][1] = ⵠᐃ.ⲆΔⲆΔᐃΔⲆ;
      ᐃᐃ[1558][2] = ⵠᐃ.ᐃΔᐃⲆⵠΔΔ;
      ᐃᐃ[1560] = ᐃᐃ[1558];
      ᐃᐃ[1559] = ᐃᐃ[1558];
      ᐃᐃ[1562] = [];
      ᐃᐃ[1562][0] = ⵠᐃ.ⲆⲆΔΔΔΔᐃ;
      ᐃᐃ[1562][1] = ⵠᐃ.ᐃⲆΔΔᐃΔΔ;
      ᐃᐃ[1562][2] = ⵠᐃ.ᐃᐃᐃⲆⲆⲆⵠ;
      ᐃᐃ[1564] = ᐃᐃ[1562];
      ᐃᐃ[1563] = ᐃᐃ[1562];
      ᐃᐃ[1566] = [];
      ᐃᐃ[1566][0] = ⵠᐃ.ⲆΔΔⵠᐃⵠⵠ;
      ᐃᐃ[1566][1] = ⵠᐃ.ᐃΔⲆᐃⲆᐃᐃ;
      ᐃᐃ[1566][2] = ⵠᐃ.ᐃⲆᐃΔΔᐃⲆ;
      ᐃᐃ[1568] = ᐃᐃ[1566];
      ᐃᐃ[1567] = ᐃᐃ[1566];
      ᐃᐃ[1570] = [];
      ᐃᐃ[1570][0] = ⵠᐃ.ᐃΔⵠᐃⵠⵠᐃ;
      ᐃᐃ[1570][1] = ⵠᐃ.ⵠⲆⲆⵠⵠΔᐃ;
      ᐃᐃ[1570][2] = ⵠᐃ.ᐃᐃⵠᐃⲆⵠᐃ;
      ᐃᐃ[1572] = ᐃᐃ[1570];
      ᐃᐃ[1571] = ᐃᐃ[1570];
      ᐃᐃ[1574] = [];
      ᐃᐃ[1574][0] = ⵠᐃ.ⲆᐃⵠⵠⵠΔⵠ;
      ᐃᐃ[1574][1] = ⵠᐃ.ΔⲆΔΔⲆΔᐃ;
      ᐃᐃ[1574][2] = ⵠᐃ.ⵠΔⲆᐃⵠΔΔ;
      ᐃᐃ[1576] = ᐃᐃ[1574];
      ᐃᐃ[1575] = ᐃᐃ[1574];
      ᐃᐃ[1578] = [];
      ᐃᐃ[1578][0] = ⵠᐃ.ⵠΔⲆⵠⲆΔΔ;
      ᐃᐃ[1578][1] = ⵠᐃ.ⲆᐃⵠⵠΔⵠᐃ;
      ᐃᐃ[1578][2] = ⵠᐃ.ⲆⲆᐃⵠⵠΔᐃ;
      ᐃᐃ[1580] = ᐃᐃ[1578];
      ᐃᐃ[1579] = ᐃᐃ[1578];
      ᐃᐃ[1582] = [];
      ᐃᐃ[1582][0] = ⵠᐃ.ΔᐃΔⲆΔⵠΔ;
      ᐃᐃ[1582][1] = ⵠᐃ.ⲆⵠΔⵠⵠᐃⲆ;
      ᐃᐃ[1582][2] = ⵠᐃ.ⵠᐃⲆᐃⵠᐃᐃ;
      ᐃᐃ[1584] = ᐃᐃ[1582];
      ᐃᐃ[1583] = ᐃᐃ[1582];
      ᐃᐃ[1586] = [];
      ᐃᐃ[1586][0] = ⵠᐃ.ᐃΔᐃⲆⵠΔᐃ;
      ᐃᐃ[1586][1] = ⵠᐃ.ⵠⲆⲆΔⲆΔᐃ;
      ᐃᐃ[1586][2] = ⵠᐃ.ⲆⲆΔⲆⵠⲆΔ;
      ᐃᐃ[1588] = ᐃᐃ[1586];
      ᐃᐃ[1587] = ᐃᐃ[1586];
      ᐃᐃ[1590] = [];
      ᐃᐃ[1590][0] = ⵠᐃ.ᐃⲆΔⲆᐃⵠᐃ;
      ᐃᐃ[1590][1] = ⵠᐃ.ⵠΔⵠΔⵠΔⵠ;
      ᐃᐃ[1590][2] = ⵠᐃ.ᐃᐃΔᐃΔⵠⵠ;
      ᐃᐃ[1592] = ᐃᐃ[1590];
      ᐃᐃ[1591] = ᐃᐃ[1590];
      ᐃᐃ[1594] = [];
      ᐃᐃ[1594][0] = ⵠᐃ.ᐃᐃΔΔᐃⵠΔ;
      ᐃᐃ[1594][1] = ⵠᐃ.ⲆᐃΔΔⲆΔᐃ;
      ᐃᐃ[1594][2] = ⵠᐃ.ᐃⵠⵠⲆⲆⵠⲆ;
      ᐃᐃ[1596] = ᐃᐃ[1594];
      ᐃᐃ[1595] = ᐃᐃ[1594];
      ᐃᐃ[1598] = [];
      ᐃᐃ[1598][0] = ⵠᐃ.ⵠᐃⵠⵠⵠᐃⲆ;
      ᐃᐃ[1598][1] = ⵠᐃ.ΔⲆᐃᐃΔⲆⲆ;
      ᐃᐃ[1598][2] = ⵠᐃ.ᐃᐃⵠⵠΔⵠⵠ;
      ᐃᐃ[1600] = ᐃᐃ[1598];
      ᐃᐃ[1599] = ᐃᐃ[1598];
      ᐃᐃ[1602] = [];
      ᐃᐃ[1602][0] = ⵠᐃ.ΔᐃΔΔⵠΔΔ;
      ᐃᐃ[1602][1] = ⵠᐃ.ⲆᐃⲆⲆᐃⵠⵠ;
      ᐃᐃ[1602][2] = ⵠᐃ.ΔΔᐃΔᐃᐃᐃ;
      ᐃᐃ[1604] = ᐃᐃ[1602];
      ᐃᐃ[1603] = ᐃᐃ[1602];
      ᐃᐃ[1606] = [];
      ᐃᐃ[1606][0] = ⵠᐃ.ΔⲆᐃᐃᐃΔⲆ;
      ᐃᐃ[1606][1] = ⵠᐃ.ΔΔΔⲆᐃΔⵠ;
      ᐃᐃ[1606][2] = ⵠᐃ.ⲆⲆⲆᐃⵠΔᐃ;
      ᐃᐃ[1608] = ᐃᐃ[1606];
      ᐃᐃ[1607] = ᐃᐃ[1606];
      ᐃᐃ[656] = f119(1, [{
        f: f275,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[657] = ᐃᐃ[656];
      ᐃᐃ[670] = f119(1, [{
        f: f233,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[671] = ᐃᐃ[670];
      ᐃᐃ[659] = f119(1, [{
        f: f231,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ᐃᐃ[661] = f119(1, [{
        f: f231,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ᐃᐃ[667] = f119(1, [{
        f: f272,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: f241,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: f284,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: f259,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[668] = ᐃᐃ[667];
      ᐃᐃ[718] = f119(1, [{
        f: f255,
        x: 45,
        y: 70,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[720] = ᐃᐃ[718];
      ᐃᐃ[679] = f119(1, [{
        f: f274,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[680] = ᐃᐃ[679];
      ᐃᐃ[1028] = f119(1, [{
        f: f282,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1029] = ᐃᐃ[1028];
      ᐃᐃ[1016] = f119(1, [{
        f: f251,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1017] = ᐃᐃ[1016];
      ᐃᐃ[1025] = f119(1, [{
        f: f245,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1026] = ᐃᐃ[1025];
      ᐃᐃ[1020] = f119(1, [{
        f: f245,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1021] = ᐃᐃ[1020];
      ᐃᐃ[1005] = f119(1, [{
        f: f247,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1007] = ᐃᐃ[1005];
      ᐃᐃ[1009] = f119(1, [{
        f: f247,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1011] = ᐃᐃ[1009];
      ᐃᐃ[1013] = f119(1, [{
        f: f247,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1019] = ᐃᐃ[1013];
      ᐃᐃ[1186] = f119(1, [{
        f: f199,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1188] = ᐃᐃ[1186];
      ᐃᐃ[1187] = ᐃᐃ[1186];
      ᐃᐃ[981] = f119(1, [{
        f: f219,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[983] = ᐃᐃ[981];
      ᐃᐃ[728] = f119(1, [{
        f: f240,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[729] = ᐃᐃ[728];
      ᐃᐃ[1000] = f119(1, [{
        f: f270,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[362] = f119(1, [{
        f: f265,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[1002] = f119(1, [{
        f: f270,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[363] = f119(1, [{
        f: f265,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[278] = f119(1, [{
        f: f262,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[279] = f119(1, [{
        f: f262,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[277] = f119(1, [{
        f: f262,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[835] = f119(1, [{
        f: f277,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[837] = ᐃᐃ[835];
      ᐃᐃ[918] = f119(1, [{
        f: f277,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[919] = ᐃᐃ[918];
      ᐃᐃ[921] = f119(1, [{
        f: f277,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[923] = ᐃᐃ[921];
      ᐃᐃ[924] = f119(1, [{
        f: f277,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[925] = ᐃᐃ[924];
      ᐃᐃ[531] = f119(1, [{
        f: f223,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[532] = ᐃᐃ[531];
      ᐃᐃ[1075] = f119(1, [{
        f: f215,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[1076] = ᐃᐃ[1075];
      ᐃᐃ[540] = f119(1, [{
        f: f237,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[541] = ᐃᐃ[540];
      ᐃᐃ[543] = f119(1, [{
        f: f238,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[544] = ᐃᐃ[543];
      ᐃᐃ[546] = f119(1, [{
        f: f271,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[547] = ᐃᐃ[546];
      ᐃᐃ[576] = f119(1, [{
        f: f261,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[577] = ᐃᐃ[576];
      ᐃᐃ[579] = f119(1, [{
        f: f236,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[580] = ᐃᐃ[579];
      ᐃᐃ[529] = f119(1, [{
        f: f216,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[828] = f119(1, [{
        f: f256,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[235] = f119(1, [{
        f: f268,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[233] = f119(1, [{
        f: f256,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[282] = f119(1, [{
        f: f234,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[283] = f119(1, [{
        f: f285,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[1033] = ᐃᐃ[282];
      ᐃᐃ[1034] = ᐃᐃ[283];
      ᐃᐃ[1038] = f119(1, [{
        f: f246,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1040] = ᐃᐃ[1038];
      ᐃᐃ[832] = f119(1, [{
        f: f244,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[831] = f119(1, [{
        f: f260,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[964] = ᐃᐃ[832];
      ᐃᐃ[830] = ᐃᐃ[831];
      ᐃᐃ[853] = f119(1, [{
        f: f151,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[854] = ᐃᐃ[853];
      ᐃᐃ[302] = f119(1, [{
        f: f148,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1115] = f119(1, [{
        f: f154,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[236] = f119(1, [{
        f: f273,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[909] = ᐃᐃ[236];
      ᐃᐃ[881] = f119(1, [{
        f: f182,
        x: -3,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[883] = f119(1, [{
        f: f174,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[885] = ᐃᐃ[883];
      ᐃᐃ[868] = f119(1, [{
        f: f193,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[869] = ᐃᐃ[868];
      ᐃᐃ[893] = f119(1, [{
        f: f105,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[865] = f119(1, [{
        f: f159,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ᐃᐃ[866] = ᐃᐃ[865];
      ᐃᐃ[904] = f119(1, [{
        f: f263,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[903] = ᐃᐃ[904];
      ᐃᐃ[1119] = f119(1, [{
        f: f93,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1120] = ᐃᐃ[1119];
      ᐃᐃ[824] = f119(1, [{
        f: f243,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[823] = ᐃᐃ[824];
      ᐃᐃ[1091] = f119(1, [{
        f: f94,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1092] = ᐃᐃ[1091];
      ᐃᐃ[871] = f119(1, [{
        f: f257,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ᐃᐃ[873] = ᐃᐃ[871];
      ᐃᐃ[845] = f119(1, [{
        f: f257,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[846] = ᐃᐃ[845];
      ᐃᐃ[848] = f119(1, [{
        f: f242,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ᐃᐃ[298] = f119(1, [{
        f: f152,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[1174] = ᐃᐃ[298];
      ᐃᐃ[878] = f119(1, [{
        f: f195,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[879] = ᐃᐃ[878];
      ᐃᐃ[238] = f119(1, [{
        f: f112,
        x: -2,
        y: -8,
        a: 1,
        r: 0,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ᐃᐃ[979] = ᐃᐃ[238];
      ᐃᐃ[731] = [];
      ᐃᐃ[731][0] = ⵠᐃ.ⵠⵠⲆⲆⵠᐃΔ;
      ᐃᐃ[731][1] = ⵠᐃ.ᐃᐃΔⲆⵠⲆⲆ;
      ᐃᐃ[731][2] = ⵠᐃ.ⵠΔΔⵠⵠⵠⲆ;
      ᐃᐃ[732] = ᐃᐃ[731];
      ᐃᐃ[733] = ᐃᐃ[731];
      ᐃᐃ[1126] = [];
      ᐃᐃ[1126][0] = ⵠᐃ.ᐃΔⵠⵠᐃΔⵠ;
      ᐃᐃ[1126][1] = ⵠᐃ.ΔⲆⲆᐃᐃΔⵠ;
      ᐃᐃ[1126][2] = ⵠᐃ.ΔᐃΔᐃⵠⵠⵠ;
      ᐃᐃ[1128] = ᐃᐃ[1126];
      ᐃᐃ[1127] = ᐃᐃ[1126];
      ᐃᐃ[1209] = ᐃᐃ[1208];
      ᐃᐃ[1210] = ᐃᐃ[1208];
      ᐃᐃ[1208] = [];
      ᐃᐃ[1208][0] = ⵠᐃ.ⵠⲆⵠΔΔᐃᐃ;
      ᐃᐃ[1208][1] = ⵠᐃ.ⵠⲆⲆᐃᐃⵠⲆ;
      ᐃᐃ[1208][2] = ⵠᐃ.ΔᐃⲆⲆⵠⲆᐃ;
      ᐃᐃ[1209] = ᐃᐃ[1208];
      ᐃᐃ[1210] = ᐃᐃ[1208];
      ᐃᐃ[1219] = [];
      ᐃᐃ[1219][0] = ⵠᐃ.ᐃᐃⲆⲆᐃᐃᐃ;
      ᐃᐃ[1219][1] = ⵠᐃ.ⵠᐃᐃΔΔⲆⲆ;
      ᐃᐃ[1219][2] = ⵠᐃ.ⵠᐃᐃᐃⵠᐃᐃ;
      ᐃᐃ[1220] = ᐃᐃ[1219];
      ᐃᐃ[1221] = ᐃᐃ[1219];
      ᐃᐃ[1197] = [];
      ᐃᐃ[1197][0] = ⵠᐃ.ᐃⲆⲆᐃⲆⲆᐃ;
      ᐃᐃ[1197][1] = ⵠᐃ.ⵠᐃⵠⲆᐃΔⲆ;
      ᐃᐃ[1197][2] = ⵠᐃ.ⵠΔⲆⲆⲆᐃⲆ;
      ᐃᐃ[1198] = ᐃᐃ[1197];
      ᐃᐃ[1199] = ᐃᐃ[1197];
      ᐃᐃ[1201] = [];
      ᐃᐃ[1201][0] = ⵠᐃ.ᐃⵠⵠⲆⲆᐃΔ;
      ᐃᐃ[1201][1] = ⵠᐃ.ΔⵠᐃᐃᐃΔΔ;
      ᐃᐃ[1201][2] = ⵠᐃ.ⵠⵠⲆⵠⵠⵠΔ;
      ᐃᐃ[1202] = ᐃᐃ[1201];
      ᐃᐃ[1203] = ᐃᐃ[1201];
      ᐃᐃ[1205] = [];
      ᐃᐃ[1205][0] = ⵠᐃ.ⵠΔΔⲆΔⵠΔ;
      ᐃᐃ[1205][1] = ⵠᐃ.ⲆΔⵠⲆᐃᐃⵠ;
      ᐃᐃ[1205][2] = ⵠᐃ.ⲆΔⵠᐃΔⵠⲆ;
      ᐃᐃ[1206] = ᐃᐃ[1205];
      ᐃᐃ[1207] = ᐃᐃ[1205];
      ᐃᐃ[1222] = [];
      ᐃᐃ[1222][0] = ⵠᐃ.ⲆΔⲆᐃⲆΔΔ;
      ᐃᐃ[1222][1] = ⵠᐃ.ⵠΔΔΔΔᐃⲆ;
      ᐃᐃ[1222][2] = ⵠᐃ.ᐃᐃᐃⲆΔⲆΔ;
      ᐃᐃ[1223] = ᐃᐃ[1222];
      ᐃᐃ[1224] = ᐃᐃ[1222];
      ᐃᐃ[984] = [];
      ᐃᐃ[984][0] = ⵠᐃ.ⲆΔᐃᐃⲆⵠⲆ;
      ᐃᐃ[984][1] = ⵠᐃ.ΔᐃᐃΔⲆⲆⲆ;
      ᐃᐃ[984][2] = ⵠᐃ.ᐃᐃⲆⵠⲆΔⲆ;
      ᐃᐃ[986] = ᐃᐃ[984];
      ᐃᐃ[985] = ᐃᐃ[984];
      ᐃᐃ[1492] = [];
      ᐃᐃ[1492][0] = ⵠᐃ.ⲆⵠΔⲆᐃⵠᐃ;
      ᐃᐃ[1492][1] = ⵠᐃ.ΔᐃⲆⲆⵠⲆⲆ;
      ᐃᐃ[1492][2] = ⵠᐃ.ΔⲆΔⵠΔⵠᐃ;
      ᐃᐃ[v585.ⲆΔⲆⵠᐃⲆΔⲆᐃ] = ᐃᐃ[1492];
      ᐃᐃ[1493] = ᐃᐃ[1492];
      ᐃᐃ[987] = [];
      ᐃᐃ[987][0] = ⵠᐃ.ⵠⲆⲆⵠⲆⲆⲆ;
      ᐃᐃ[987][1] = ⵠᐃ.ΔᐃᐃⵠΔⵠⵠ;
      ᐃᐃ[987][2] = ⵠᐃ.ᐃᐃⲆⲆⲆⲆⵠ;
      ᐃᐃ[989] = ᐃᐃ[987];
      ᐃᐃ[988] = ᐃᐃ[987];
      ᐃᐃ[990] = [];
      ᐃᐃ[990][0] = ⵠᐃ.ⲆᐃⵠᐃᐃΔΔ;
      ᐃᐃ[990][1] = ⵠᐃ.ⲆⲆⲆΔᐃⵠᐃ;
      ᐃᐃ[990][2] = ⵠᐃ.ⵠⲆⲆⵠᐃⲆᐃ;
      ᐃᐃ[992] = ᐃᐃ[990];
      ᐃᐃ[991] = ᐃᐃ[990];
      ᐃᐃ[1214] = [];
      ᐃᐃ[1214][0] = ⵠᐃ.ⲆⵠⵠⲆᐃΔⵠ;
      ᐃᐃ[1214][1] = ⵠᐃ.ᐃᐃⵠⵠⲆⲆᐃ;
      ᐃᐃ[1214][2] = ⵠᐃ.ⲆⲆⵠᐃΔᐃᐃ;
      ᐃᐃ[1215] = ᐃᐃ[1214];
      ᐃᐃ[1212] = [];
      ᐃᐃ[1212][0] = ⵠᐃ.ⲆⵠⵠΔᐃⵠⵠ;
      ᐃᐃ[1212][1] = ⵠᐃ.ⲆⲆᐃΔΔᐃᐃ;
      ᐃᐃ[1212][2] = ⵠᐃ.ᐃⲆΔⵠⵠᐃΔ;
      ᐃᐃ[1213] = ᐃᐃ[1212];
      ᐃᐃ[836] = ᐃᐃ[835];
      ᐃᐃ[920] = ᐃᐃ[918];
      ᐃᐃ[922] = ᐃᐃ[921];
      ᐃᐃ[926] = ᐃᐃ[924];
      ᐃᐃ[459] = ᐃᐃ[422];
      ᐃᐃ[852] = ᐃᐃ[850];
      ᐃᐃ[864] = ᐃᐃ[863];
      ᐃᐃ[859] = ᐃᐃ[858];
      ᐃᐃ[383] = ᐃᐃ[420];
      ᐃᐃ[809] = ᐃᐃ[362];
      ᐃᐃ[1001] = ᐃᐃ[1000];
      ᐃᐃ[810] = ᐃᐃ[363];
      ᐃᐃ[1003] = ᐃᐃ[1002];
      ᐃᐃ[386] = ᐃᐃ[439];
      ᐃᐃ[1112] = ᐃᐃ[1114];
      ᐃᐃ[1111] = ᐃᐃ[1109];
      ᐃᐃ[1080] = ᐃᐃ[1078];
      ᐃᐃ[451] = ᐃᐃ[371];
      ᐃᐃ[815] = ᐃᐃ[813];
      ᐃᐃ[456] = ᐃᐃ[402];
      ᐃᐃ[457] = ᐃᐃ[403];
      ᐃᐃ[595] = ᐃᐃ[593];
      ᐃᐃ[384] = ᐃᐃ[424];
      ᐃᐃ[452] = ᐃᐃ[423];
      ᐃᐃ[382] = ᐃᐃ[368];
      ᐃᐃ[455] = ᐃᐃ[407];
      ᐃᐃ[597] = ᐃᐃ[596];
      ᐃᐃ[453] = ᐃᐃ[426];
      ᐃᐃ[380] = ᐃᐃ[408];
      ᐃᐃ[381] = ᐃᐃ[409];
      ᐃᐃ[454] = ᐃᐃ[427];
      ᐃᐃ[379] = ᐃᐃ[387];
      ᐃᐃ[469] = ᐃᐃ[421];
      ᐃᐃ[465] = ᐃᐃ[440];
      ᐃᐃ[467] = ᐃᐃ[442];
      ᐃᐃ[466] = ᐃᐃ[441];
      ᐃᐃ[632] = ᐃᐃ[630];
      ᐃᐃ[460] = ᐃᐃ[428];
      ᐃᐃ[461] = ᐃᐃ[430];
      ᐃᐃ[385] = ᐃᐃ[411];
      ᐃᐃ[462] = ᐃᐃ[434];
      ᐃᐃ[464] = ᐃᐃ[416];
      ᐃᐃ[652] = ᐃᐃ[651];
      ᐃᐃ[463] = ᐃᐃ[414];
      ᐃᐃ[658] = ᐃᐃ[656];
      ᐃᐃ[672] = ᐃᐃ[670];
      ᐃᐃ[669] = ᐃᐃ[667];
      ᐃᐃ[660] = ᐃᐃ[659];
      ᐃᐃ[662] = ᐃᐃ[661];
      ᐃᐃ[730] = ᐃᐃ[728];
      ᐃᐃ[719] = ᐃᐃ[718];
      ᐃᐃ[468] = ᐃᐃ[446];
      ᐃᐃ[470] = ᐃᐃ[448];
      ᐃᐃ[450] = f54(function (p1092, p1093, p1094) {
        var v1428 = document.createElement("canvas");
        var v1429 = v1428.getContext("2d");
        v1428.width = p1092 * 118;
        v1428.height = p1092 * 129;
        v1429.save();
        v1429.translate(p1092 * 90, p1092 * 90);
        f86(v1429, p1092 * -86.5, p1092 * -86, p1092 * 110, p1092 * 110, p1092 * 15);
        v1429.restore();
        f88(v1429, p1094[0], p1094[1], 4);
        v1429.save();
        f86(v1429, p1092 * 30, p1092 * 115, p1092 * 60, p1092 * 5, p1092 * 15);
        v1429.restore();
        f88(v1429, p1094[2], p1094[3], 4);
        v1429.save();
        f86(v1429, p1092 * 50, p1092 * 117, p1092 * 20, p1092 * 10, p1092 * 15);
        v1429.restore();
        f88(v1429, p1094[2]);
        return v1428;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ᐃᐃ[477] = f119(0.5, [{
        f: f169,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ᐃᐃ[493] = ᐃᐃ[472];
      ᐃᐃ[494] = ᐃᐃ[473];
      ᐃᐃ[495] = ᐃᐃ[475];
      ᐃᐃ[635] = ᐃᐃ[633];
      ᐃᐃ[496] = ᐃᐃ[503];
      ᐃᐃ[1023] = ᐃᐃ[280];
      ᐃᐃ[1024] = ᐃᐃ[281];
      ᐃᐃ[497] = ᐃᐃ[479];
      ᐃᐃ[844] = ᐃᐃ[843];
      ᐃᐃ[505] = ᐃᐃ[504];
      ᐃᐃ[1491] = ᐃᐃ[1490];
      ᐃᐃ[644] = ᐃᐃ[643];
      ᐃᐃ[498] = ᐃᐃ[480];
      ᐃᐃ[642] = ᐃᐃ[640];
      ᐃᐃ[499] = ᐃᐃ[483];
      ᐃᐃ[500] = ᐃᐃ[486];
      ᐃᐃ[501] = ᐃᐃ[489];
      ᐃᐃ[639] = ᐃᐃ[637];
      ᐃᐃ[502] = ᐃᐃ[492];
      ᐃᐃ[514] = ᐃᐃ[512];
      ᐃᐃ[508] = ᐃᐃ[506];
      ᐃᐃ[511] = ᐃᐃ[509];
      ᐃᐃ[517] = ᐃᐃ[515];
      ᐃᐃ[612] = ᐃᐃ[610];
      ᐃᐃ[1124] = ᐃᐃ[1123];
      ᐃᐃ[690] = ᐃᐃ[688];
      ᐃᐃ[959] = ᐃᐃ[958];
      ᐃᐃ[617] = ᐃᐃ[615];
      ᐃᐃ[620] = ᐃᐃ[618];
      ᐃᐃ[623] = ᐃᐃ[621];
      ᐃᐃ[626] = ᐃᐃ[624];
      ᐃᐃ[521] = ᐃᐃ[519];
      ᐃᐃ[968] = ᐃᐃ[966];
      ᐃᐃ[533] = ᐃᐃ[531];
      ᐃᐃ[542] = ᐃᐃ[540];
      ᐃᐃ[545] = ᐃᐃ[543];
      ᐃᐃ[548] = ᐃᐃ[546];
      ᐃᐃ[681] = ᐃᐃ[679];
      ᐃᐃ[982] = ᐃᐃ[981];
      ᐃᐃ[578] = ᐃᐃ[576];
      ᐃᐃ[581] = ᐃᐃ[579];
      ᐃᐃ[584] = ᐃᐃ[529];
      ᐃᐃ[825] = ᐃᐃ[824];
      ᐃᐃ[1093] = ᐃᐃ[1091];
      ᐃᐃ[902] = ᐃᐃ[904];
      ᐃᐃ[829] = ᐃᐃ[828];
      ᐃᐃ[908] = ᐃᐃ[236];
      ᐃᐃ[905] = ᐃᐃ[235];
      ᐃᐃ[901] = ᐃᐃ[233];
      ᐃᐃ[834] = ᐃᐃ[832];
      ᐃᐃ[833] = ᐃᐃ[831];
      ᐃᐃ[847] = ᐃᐃ[845];
      ᐃᐃ[849] = ᐃᐃ[848];
      ᐃᐃ[855] = ᐃᐃ[853];
      ᐃᐃ[1117] = ᐃᐃ[302];
      ᐃᐃ[1116] = ᐃᐃ[1115];
      ᐃᐃ[867] = ᐃᐃ[865];
      ᐃᐃ[870] = ᐃᐃ[868];
      ᐃᐃ[872] = ᐃᐃ[871];
      ᐃᐃ[880] = ᐃᐃ[878];
      ᐃᐃ[1174] = ᐃᐃ[298];
      ᐃᐃ[882] = ᐃᐃ[881];
      ᐃᐃ[884] = ᐃᐃ[883];
      ᐃᐃ[894] = ᐃᐃ[893];
      ᐃᐃ[980] = ᐃᐃ[238];
      ᐃᐃ[1006] = ᐃᐃ[1005];
      ᐃᐃ[1008] = ᐃᐃ[278];
      ᐃᐃ[1010] = ᐃᐃ[1009];
      ᐃᐃ[1012] = ᐃᐃ[279];
      ᐃᐃ[1014] = ᐃᐃ[1013];
      ᐃᐃ[1015] = ᐃᐃ[277];
      ᐃᐃ[1018] = ᐃᐃ[1016];
      ᐃᐃ[1022] = ᐃᐃ[1020];
      ᐃᐃ[1027] = ᐃᐃ[1025];
      ᐃᐃ[1030] = ᐃᐃ[1028];
      ᐃᐃ[1036] = ᐃᐃ[283];
      ᐃᐃ[1035] = ᐃᐃ[282];
      ᐃᐃ[1039] = ᐃᐃ[1038];
      ᐃᐃ[1050] = ᐃᐃ[1049];
      ᐃᐃ[1059] = ᐃᐃ[1057];
      ᐃᐃ[1085] = ᐃᐃ[1083];
      ᐃᐃ[1096] = ᐃᐃ[1094];
      ᐃᐃ[1077] = ᐃᐃ[1075];
      ᐃᐃ[1722] = [];
      ᐃᐃ[1722][0] = ⵠᐃ.ⵠⵠᐃⵠⵠ;
      ᐃᐃ[1722][1] = ⵠᐃ.ⵠⵠᐃⵠⵠ;
      ᐃᐃ[1722][2] = ⵠᐃ.ⵠⵠᐃⵠⵠ;
      ᐃᐃ[1721] = ᐃᐃ[1722];
      ᐃᐃ[1724] = [];
      ᐃᐃ[1724][0] = ⵠᐃ.ΔΔΔᐃᐃ;
      ᐃᐃ[1724][1] = ⵠᐃ.ΔΔΔᐃᐃ;
      ᐃᐃ[1724][2] = ⵠᐃ.ΔΔΔᐃᐃ;
      ᐃᐃ[1723] = ᐃᐃ[1724];
      ᐃᐃ[1726] = [];
      ᐃᐃ[1726][0] = ⵠᐃ.ⲆⵠⵠⲆⵠ;
      ᐃᐃ[1726][1] = ⵠᐃ.ⲆⵠⵠⲆⵠ;
      ᐃᐃ[1726][2] = ⵠᐃ.ⲆⵠⵠⲆⵠ;
      ᐃᐃ[1725] = ᐃᐃ[1726];
      ᐃᐃ[1728] = [];
      ᐃᐃ[1728][0] = ⵠᐃ.ⵠⵠⲆᐃᐃ;
      ᐃᐃ[1728][1] = ⵠᐃ.ⵠⵠⲆᐃᐃ;
      ᐃᐃ[1728][2] = ⵠᐃ.ⵠⵠⲆᐃᐃ;
      ᐃᐃ[1727] = ᐃᐃ[1728];
      ᐃᐃ[1730] = [];
      ᐃᐃ[1730][0] = ⵠᐃ.ᐃⲆⵠⵠᐃ;
      ᐃᐃ[1730][1] = ⵠᐃ.ᐃⲆⵠⵠᐃ;
      ᐃᐃ[1730][2] = ⵠᐃ.ᐃⲆⵠⵠᐃ;
      ᐃᐃ[1729] = ᐃᐃ[1730];
      ᐃᐃ[1732] = [];
      ᐃᐃ[1732][0] = ⵠᐃ.ⲆⵠΔΔᐃ;
      ᐃᐃ[1732][1] = ⵠᐃ.ⲆⵠΔΔᐃ;
      ᐃᐃ[1732][2] = ⵠᐃ.ⲆⵠΔΔᐃ;
      ᐃᐃ[1731] = ᐃᐃ[1732];
      ᐃᐃ[1736] = [];
      ᐃᐃ[1736][0] = ⵠᐃ.ⲆᐃⲆⵠⲆ;
      ᐃᐃ[1736][1] = ⵠᐃ.ⲆᐃⲆⵠⲆ;
      ᐃᐃ[1736][2] = ⵠᐃ.ⲆᐃⲆⵠⲆ;
      ᐃᐃ[1735] = ᐃᐃ[1736];
      ᐃᐃ[1734] = [];
      ᐃᐃ[1734][0] = ⵠᐃ.ΔⲆⵠᐃⲆ;
      ᐃᐃ[1734][1] = ⵠᐃ.ΔⲆⵠᐃⲆ;
      ᐃᐃ[1734][2] = ⵠᐃ.ΔⲆⵠᐃⲆ;
      ᐃᐃ[1733] = ᐃᐃ[1734];
      ᐃᐃ[1738] = [];
      ᐃᐃ[1738][0] = ⵠᐃ.ⲆᐃⵠᐃⲆⵠᐃ;
      ᐃᐃ[1738][1] = ⵠᐃ.ⲆΔᐃΔⵠⵠⲆ;
      ᐃᐃ[1738][2] = ⵠᐃ.ΔᐃᐃΔᐃᐃⵠ;
      ᐃᐃ[1737] = ᐃᐃ[1738];
      ᐃᐃ[549] = [];
      ᐃᐃ[549][0] = ⵠᐃ.ᐃⲆᐃⲆΔᐃⵠ;
      ᐃᐃ[549][1] = ⵠᐃ.ᐃⲆΔⲆΔⵠⲆ;
      ᐃᐃ[549][2] = ⵠᐃ.ΔΔⵠᐃᐃⲆⵠ;
      ᐃᐃ[550] = ᐃᐃ[549];
      ᐃᐃ[551] = ᐃᐃ[549];
      ᐃᐃ[552] = [];
      ᐃᐃ[552][0] = ⵠᐃ.ⵠⲆΔᐃᐃΔᐃ;
      ᐃᐃ[552][1] = ⵠᐃ.ΔᐃᐃᐃΔΔⲆ;
      ᐃᐃ[552][2] = ⵠᐃ.ᐃᐃⲆΔΔⵠᐃ;
      ᐃᐃ[553] = ᐃᐃ[552];
      ᐃᐃ[554] = ᐃᐃ[552];
      ᐃᐃ[555] = [];
      ᐃᐃ[555][0] = ⵠᐃ.ⲆⵠᐃΔᐃΔΔ;
      ᐃᐃ[555][1] = ⵠᐃ.ⲆⲆᐃⲆΔⵠΔ;
      ᐃᐃ[555][2] = ⵠᐃ.ΔⲆⵠⵠⵠⵠⵠ;
      ᐃᐃ[556] = ᐃᐃ[555];
      ᐃᐃ[557] = ᐃᐃ[555];
      ᐃᐃ[558] = [];
      ᐃᐃ[558][0] = ⵠᐃ.ⵠᐃᐃⵠΔⲆᐃ;
      ᐃᐃ[558][1] = ⵠᐃ.ᐃⲆΔⵠⲆΔⲆ;
      ᐃᐃ[558][2] = ⵠᐃ.ΔⲆᐃⵠᐃⵠᐃ;
      ᐃᐃ[559] = ᐃᐃ[558];
      ᐃᐃ[560] = ᐃᐃ[558];
      ᐃᐃ[561] = [];
      ᐃᐃ[561][0] = ⵠᐃ.ⲆⲆⲆⲆᐃⵠᐃ;
      ᐃᐃ[561][1] = ⵠᐃ.ⲆⵠⵠΔⲆᐃΔ;
      ᐃᐃ[561][2] = ⵠᐃ.ⲆᐃᐃⲆⵠΔⲆ;
      ᐃᐃ[562] = ᐃᐃ[561];
      ᐃᐃ[563] = ᐃᐃ[561];
      ᐃᐃ[564] = [];
      ᐃᐃ[564][0] = ⵠᐃ.ⲆΔᐃΔⲆᐃᐃ;
      ᐃᐃ[564][1] = ⵠᐃ.ⲆⵠΔⵠⵠᐃΔ;
      ᐃᐃ[564][2] = ⵠᐃ.ⵠᐃⵠΔⲆΔΔ;
      ᐃᐃ[565] = ᐃᐃ[564];
      ᐃᐃ[566] = ᐃᐃ[564];
      ᐃᐃ[567] = [];
      ᐃᐃ[567][0] = ⵠᐃ.ΔᐃⵠΔΔᐃᐃ;
      ᐃᐃ[567][1] = ⵠᐃ.ΔⲆᐃΔᐃⲆΔ;
      ᐃᐃ[567][2] = ⵠᐃ.ⲆᐃᐃⵠⵠⲆⲆ;
      ᐃᐃ[568] = ᐃᐃ[567];
      ᐃᐃ[569] = ᐃᐃ[567];
      ᐃᐃ[570] = [];
      ᐃᐃ[570][0] = ⵠᐃ.ᐃᐃⵠᐃΔΔⵠ;
      ᐃᐃ[570][1] = ⵠᐃ.ᐃⵠᐃⲆⵠΔᐃ;
      ᐃᐃ[570][2] = ⵠᐃ.ⵠⲆᐃⵠᐃⲆⲆ;
      ᐃᐃ[571] = ᐃᐃ[570];
      ᐃᐃ[572] = ᐃᐃ[570];
      ᐃᐃ[573] = [];
      ᐃᐃ[573][0] = ⵠᐃ.ΔΔΔᐃⲆᐃⵠ;
      ᐃᐃ[573][1] = ⵠᐃ.Δᐃⵠᐃⵠⵠᐃ;
      ᐃᐃ[573][2] = ⵠᐃ.ⵠⵠΔⲆᐃⵠΔ;
      ᐃᐃ[574] = ᐃᐃ[573];
      ᐃᐃ[575] = ᐃᐃ[573];
      ᐃᐃ[1296] = [];
      ᐃᐃ[1296][0] = ⵠᐃ.ⲆⲆⵠⵠⵠᐃⵠ;
      ᐃᐃ[1296][1] = ⵠᐃ.ⲆⵠᐃⵠⲆⲆᐃ;
      ᐃᐃ[1296][2] = ⵠᐃ.ⵠᐃⲆⵠᐃᐃⵠ;
      ᐃᐃ[1298] = ᐃᐃ[1296];
      ᐃᐃ[1297] = ᐃᐃ[1296];
      ᐃᐃ[1299] = [];
      ᐃᐃ[1299][0] = ⵠᐃ.ΔᐃᐃᐃᐃⲆᐃ;
      ᐃᐃ[1299][1] = ⵠᐃ.ⲆⵠⲆⵠᐃΔⵠ;
      ᐃᐃ[1299][2] = ⵠᐃ.ⲆᐃⵠΔᐃⲆⵠ;
      ᐃᐃ[1301] = ᐃᐃ[1299];
      ᐃᐃ[1300] = ᐃᐃ[1299];
      ᐃᐃ[1302] = [];
      ᐃᐃ[1302][0] = ⵠᐃ.ⲆΔΔᐃΔΔΔ;
      ᐃᐃ[1302][1] = ⵠᐃ.ⲆᐃⲆⵠΔΔⲆ;
      ᐃᐃ[1302][2] = ⵠᐃ.ΔᐃⵠΔⲆⵠΔ;
      ᐃᐃ[1304] = ᐃᐃ[1302];
      ᐃᐃ[1303] = ᐃᐃ[1302];
      ᐃᐃ[1305] = [];
      ᐃᐃ[1305][0] = ⵠᐃ.ΔΔᐃᐃᐃⵠᐃ;
      ᐃᐃ[1305][1] = ⵠᐃ.ΔⵠⵠᐃⵠⲆΔ;
      ᐃᐃ[1305][2] = ⵠᐃ.ᐃᐃⲆⲆᐃΔᐃ;
      ᐃᐃ[1307] = ᐃᐃ[1305];
      ᐃᐃ[1306] = ᐃᐃ[1305];
      ᐃᐃ[1308] = [];
      ᐃᐃ[1308][0] = ⵠᐃ.ⵠⵠᐃᐃⲆⵠⵠ;
      ᐃᐃ[1308][1] = ⵠᐃ.ⵠΔⵠⲆⵠⵠⵠ;
      ᐃᐃ[1308][2] = ⵠᐃ.ⲆⲆΔⲆᐃᐃⲆ;
      ᐃᐃ[1310] = ᐃᐃ[1308];
      ᐃᐃ[1309] = ᐃᐃ[1308];
      ᐃᐃ[1311] = [];
      ᐃᐃ[1311][0] = ⵠᐃ.ⵠⵠⵠΔⵠⵠⲆ;
      ᐃᐃ[1311][1] = ⵠᐃ.ΔΔΔᐃⲆΔΔ;
      ᐃᐃ[1311][2] = ⵠᐃ.ⲆᐃⲆⲆΔⲆᐃ;
      ᐃᐃ[1313] = ᐃᐃ[1311];
      ᐃᐃ[1312] = ᐃᐃ[1311];
      ᐃᐃ[1314] = [];
      ᐃᐃ[1314][0] = ⵠᐃ.ΔΔⵠΔⲆΔΔ;
      ᐃᐃ[1314][1] = ⵠᐃ.ⲆⵠⲆⵠⲆⵠⵠ;
      ᐃᐃ[1314][2] = ⵠᐃ.ⲆⵠⵠⵠⵠⵠⲆ;
      ᐃᐃ[1316] = ᐃᐃ[1314];
      ᐃᐃ[1315] = ᐃᐃ[1314];
      ᐃᐃ[1317] = [];
      ᐃᐃ[1317][0] = ⵠᐃ.ΔⵠΔΔᐃⲆⲆ;
      ᐃᐃ[1317][1] = ⵠᐃ.ᐃᐃⵠΔᐃⲆⵠ;
      ᐃᐃ[1317][2] = ⵠᐃ.ⲆⲆΔⲆΔⵠᐃ;
      ᐃᐃ[1319] = ᐃᐃ[1317];
      ᐃᐃ[1318] = ᐃᐃ[1317];
      ᐃᐃ[1320] = [];
      ᐃᐃ[1320][0] = ⵠᐃ.ΔⵠⲆΔⵠⲆΔ;
      ᐃᐃ[1320][1] = ⵠᐃ.ΔⲆᐃⲆⲆΔΔ;
      ᐃᐃ[1320][2] = ⵠᐃ.ΔⵠⵠᐃᐃⲆΔ;
      ᐃᐃ[1322] = ᐃᐃ[1320];
      ᐃᐃ[1321] = ᐃᐃ[1320];
      ᐃᐃ[691] = [];
      ᐃᐃ[691][0] = ⵠᐃ.ⲆᐃΔⲆⲆᐃᐃ;
      ᐃᐃ[691][1] = ⵠᐃ.ⵠⲆᐃⲆΔⵠⵠ;
      ᐃᐃ[691][2] = ⵠᐃ.ᐃⲆᐃⵠΔΔⲆ;
      ᐃᐃ[692] = ᐃᐃ[691];
      ᐃᐃ[693] = ᐃᐃ[691];
      ᐃᐃ[694] = [];
      ᐃᐃ[694][0] = ⵠᐃ.ⲆⲆⵠⲆⵠᐃᐃ;
      ᐃᐃ[694][1] = ⵠᐃ.ⲆⲆⲆⵠᐃⵠᐃ;
      ᐃᐃ[694][2] = ⵠᐃ.ᐃᐃⲆᐃⲆⲆΔ;
      ᐃᐃ[695] = ᐃᐃ[694];
      ᐃᐃ[696] = ᐃᐃ[694];
      ᐃᐃ[697] = [];
      ᐃᐃ[697][0] = ⵠᐃ.ΔⲆᐃᐃᐃΔᐃ;
      ᐃᐃ[697][1] = ⵠᐃ.ⵠⲆᐃⲆⵠᐃⵠ;
      ᐃᐃ[697][2] = ⵠᐃ.ᐃⵠΔⵠⲆᐃᐃ;
      ᐃᐃ[698] = ᐃᐃ[697];
      ᐃᐃ[699] = ᐃᐃ[697];
      ᐃᐃ[700] = [];
      ᐃᐃ[700][0] = ⵠᐃ.ⲆⵠⲆᐃᐃⵠⲆ;
      ᐃᐃ[700][1] = ⵠᐃ.ΔⲆᐃΔⲆΔⲆ;
      ᐃᐃ[700][2] = ⵠᐃ.ⵠⵠΔᐃᐃⲆᐃ;
      ᐃᐃ[701] = ᐃᐃ[700];
      ᐃᐃ[702] = ᐃᐃ[700];
      ᐃᐃ[703] = [];
      ᐃᐃ[703][0] = ⵠᐃ.ⲆΔⵠⵠᐃᐃᐃ;
      ᐃᐃ[703][1] = ⵠᐃ.ᐃᐃΔⲆⵠΔᐃ;
      ᐃᐃ[703][2] = ⵠᐃ.ΔᐃᐃⲆΔᐃⲆ;
      ᐃᐃ[704] = ᐃᐃ[703];
      ᐃᐃ[705] = ᐃᐃ[703];
      ᐃᐃ[706] = [];
      ᐃᐃ[706][0] = ⵠᐃ.ᐃᐃᐃⵠⲆΔⲆ;
      ᐃᐃ[706][1] = ⵠᐃ.ΔᐃⲆΔᐃⵠⵠ;
      ᐃᐃ[706][2] = ⵠᐃ.ᐃΔⵠⵠⲆⲆᐃ;
      ᐃᐃ[707] = ᐃᐃ[706];
      ᐃᐃ[708] = ᐃᐃ[706];
      ᐃᐃ[709] = [];
      ᐃᐃ[709][0] = ⵠᐃ.ⵠΔᐃᐃⲆΔᐃ;
      ᐃᐃ[709][1] = ⵠᐃ.ΔⲆΔΔᐃⲆⵠ;
      ᐃᐃ[709][2] = ⵠᐃ.ⲆⵠΔΔⵠⵠᐃ;
      ᐃᐃ[710] = ᐃᐃ[709];
      ᐃᐃ[711] = ᐃᐃ[709];
      ᐃᐃ[712] = [];
      ᐃᐃ[712][0] = ⵠᐃ.ⲆⲆⵠᐃⲆⵠⵠ;
      ᐃᐃ[712][1] = ⵠᐃ.ᐃᐃⵠⲆⲆᐃⵠ;
      ᐃᐃ[712][2] = ⵠᐃ.ΔᐃᐃᐃΔᐃⵠ;
      ᐃᐃ[713] = ᐃᐃ[712];
      ᐃᐃ[714] = ᐃᐃ[712];
      ᐃᐃ[715] = [];
      ᐃᐃ[715][0] = ⵠᐃ.ⵠᐃΔⲆⵠⵠⲆ;
      ᐃᐃ[715][1] = ⵠᐃ.ΔⵠⵠⲆⵠⲆⲆ;
      ᐃᐃ[715][2] = ⵠᐃ.ⲆᐃᐃⵠⲆᐃⲆ;
      ᐃᐃ[716] = ᐃᐃ[715];
      ᐃᐃ[717] = ᐃᐃ[715];
      ᐃᐃ[954] = [];
      ᐃᐃ[954][0] = ⵠᐃ.ⵠⲆᐃᐃⵠⵠᐃ;
      ᐃᐃ[954][1] = ⵠᐃ.ⵠⲆⲆΔⵠⲆⵠ;
      ᐃᐃ[954][2] = ⵠᐃ.ᐃⵠᐃⲆᐃⵠⵠ;
      ᐃᐃ[955] = ᐃᐃ[954];
      ᐃᐃ[956] = ᐃᐃ[954];
      ᐃᐃ[927] = [];
      ᐃᐃ[927][0] = ⵠᐃ.ⵠⵠᐃⵠⵠⲆΔ;
      ᐃᐃ[927][1] = ⵠᐃ.ΔⲆᐃᐃᐃᐃⲆ;
      ᐃᐃ[927][2] = ⵠᐃ.ΔΔⲆᐃⵠⵠⲆ;
      ᐃᐃ[928] = ᐃᐃ[927];
      ᐃᐃ[929] = ᐃᐃ[927];
      ᐃᐃ[930] = [];
      ᐃᐃ[930][0] = ⵠᐃ.ⲆᐃⲆΔΔⲆᐃ;
      ᐃᐃ[930][1] = ⵠᐃ.ⵠⲆΔⲆⲆⵠΔ;
      ᐃᐃ[930][2] = ⵠᐃ.ᐃᐃⲆⵠΔⲆΔ;
      ᐃᐃ[931] = ᐃᐃ[930];
      ᐃᐃ[932] = ᐃᐃ[930];
      ᐃᐃ[933] = [];
      ᐃᐃ[933][0] = ⵠᐃ.ΔⲆⲆᐃⵠⵠⵠ;
      ᐃᐃ[933][1] = ⵠᐃ.ΔⵠᐃⲆⲆⵠⵠ;
      ᐃᐃ[933][2] = ⵠᐃ.ᐃΔⲆⲆΔⵠΔ;
      ᐃᐃ[934] = ᐃᐃ[933];
      ᐃᐃ[935] = ᐃᐃ[933];
      ᐃᐃ[936] = [];
      ᐃᐃ[936][0] = ⵠᐃ.ᐃⲆΔⲆᐃⵠⵠ;
      ᐃᐃ[936][1] = ⵠᐃ.ⵠΔⵠⵠⵠⲆΔ;
      ᐃᐃ[936][2] = ⵠᐃ.ⲆⵠⲆΔⵠΔΔ;
      ᐃᐃ[937] = ᐃᐃ[936];
      ᐃᐃ[938] = ᐃᐃ[936];
      ᐃᐃ[939] = [];
      ᐃᐃ[939][0] = ⵠᐃ.ⵠⲆⲆΔⵠΔⲆ;
      ᐃᐃ[939][1] = ⵠᐃ.ⵠⲆΔΔΔΔᐃ;
      ᐃᐃ[939][2] = ⵠᐃ.ᐃᐃⵠᐃᐃⲆⲆ;
      ᐃᐃ[940] = ᐃᐃ[939];
      ᐃᐃ[941] = ᐃᐃ[939];
      ᐃᐃ[942] = [];
      ᐃᐃ[942][0] = ⵠᐃ.ⲆΔⲆᐃⲆᐃⲆ;
      ᐃᐃ[942][1] = ⵠᐃ.ᐃΔⵠΔⲆⵠⲆ;
      ᐃᐃ[942][2] = ⵠᐃ.ⲆᐃⲆᐃΔᐃᐃ;
      ᐃᐃ[943] = ᐃᐃ[942];
      ᐃᐃ[944] = ᐃᐃ[942];
      ᐃᐃ[945] = [];
      ᐃᐃ[945][0] = ⵠᐃ.ⵠⵠⲆᐃⲆⵠᐃ;
      ᐃᐃ[945][1] = ⵠᐃ.ⵠⵠΔⵠΔⵠᐃ;
      ᐃᐃ[945][2] = ⵠᐃ.ᐃΔⲆΔⲆᐃᐃ;
      ᐃᐃ[946] = ᐃᐃ[945];
      ᐃᐃ[947] = ᐃᐃ[945];
      ᐃᐃ[948] = [];
      ᐃᐃ[948][0] = ⵠᐃ.ΔᐃΔΔⵠⲆⲆ;
      ᐃᐃ[948][1] = ⵠᐃ.ᐃᐃⵠⵠⵠⵠᐃ;
      ᐃᐃ[948][2] = ⵠᐃ.ᐃⲆᐃⲆⵠΔⵠ;
      ᐃᐃ[949] = ᐃᐃ[948];
      ᐃᐃ[950] = ᐃᐃ[948];
      ᐃᐃ[951] = [];
      ᐃᐃ[951][0] = ⵠᐃ.ΔΔⲆⵠⵠᐃΔ;
      ᐃᐃ[951][1] = ⵠᐃ.ᐃⵠⵠᐃⵠΔΔ;
      ᐃᐃ[951][2] = ⵠᐃ.ᐃΔⲆΔⲆⵠᐃ;
      ᐃᐃ[952] = ᐃᐃ[951];
      ᐃᐃ[953] = ᐃᐃ[951];
      ᐃᐃ[734] = [];
      ᐃᐃ[734][0] = ⵠᐃ.ⵠᐃᐃⲆⲆⲆⲆ;
      ᐃᐃ[734][1] = ⵠᐃ.ΔⲆⵠΔⵠΔᐃ;
      ᐃᐃ[734][2] = ⵠᐃ.ⵠⵠⲆᐃΔᐃΔ;
      ᐃᐃ[735] = ᐃᐃ[734];
      ᐃᐃ[736] = ᐃᐃ[734];
      ᐃᐃ[737] = [];
      ᐃᐃ[737][0] = ⵠᐃ.ⵠᐃᐃⲆᐃᐃᐃ;
      ᐃᐃ[737][1] = ⵠᐃ.ΔᐃΔⲆⵠⵠⵠ;
      ᐃᐃ[737][2] = ⵠᐃ.ⵠᐃⲆᐃΔⵠⵠ;
      ᐃᐃ[738] = ᐃᐃ[737];
      ᐃᐃ[739] = ᐃᐃ[737];
      ᐃᐃ[740] = [];
      ᐃᐃ[740][0] = ⵠᐃ.ⲆᐃᐃⵠΔΔᐃ;
      ᐃᐃ[740][1] = ⵠᐃ.ⵠⵠΔⵠⲆⵠᐃ;
      ᐃᐃ[740][2] = ⵠᐃ.ΔΔⵠΔⵠΔⲆ;
      ᐃᐃ[741] = ᐃᐃ[740];
      ᐃᐃ[742] = ᐃᐃ[740];
      ᐃᐃ[743] = [];
      ᐃᐃ[743][0] = ⵠᐃ.ⲆⲆᐃⵠΔΔᐃ;
      ᐃᐃ[743][1] = ⵠᐃ.ⲆΔΔⲆΔᐃΔ;
      ᐃᐃ[743][2] = ⵠᐃ.ⵠⵠⲆΔᐃⵠⲆ;
      ᐃᐃ[744] = ᐃᐃ[743];
      ᐃᐃ[745] = ᐃᐃ[743];
      ᐃᐃ[746] = [];
      ᐃᐃ[746][0] = ⵠᐃ.ⲆᐃⵠΔΔⵠⲆ;
      ᐃᐃ[746][1] = ⵠᐃ.ⲆΔⵠⵠⲆⵠᐃ;
      ᐃᐃ[746][2] = ⵠᐃ.ᐃΔⲆⵠⲆⵠⵠ;
      ᐃᐃ[747] = ᐃᐃ[746];
      ᐃᐃ[748] = ᐃᐃ[746];
      ᐃᐃ[749] = [];
      ᐃᐃ[749][0] = ⵠᐃ.ΔᐃᐃᐃⵠᐃⲆ;
      ᐃᐃ[749][1] = ⵠᐃ.ᐃΔΔᐃΔᐃᐃ;
      ᐃᐃ[749][2] = ⵠᐃ.ⲆᐃⲆΔᐃⵠΔ;
      ᐃᐃ[750] = ᐃᐃ[749];
      ᐃᐃ[751] = ᐃᐃ[749];
      ᐃᐃ[752] = [];
      ᐃᐃ[752][0] = ⵠᐃ.ⲆΔⲆᐃᐃᐃⵠ;
      ᐃᐃ[752][1] = ⵠᐃ.ΔⲆΔΔⵠᐃΔ;
      ᐃᐃ[752][2] = ⵠᐃ.ⲆⲆΔΔΔᐃⵠ;
      ᐃᐃ[753] = ᐃᐃ[752];
      ᐃᐃ[754] = ᐃᐃ[752];
      ᐃᐃ[755] = [];
      ᐃᐃ[755][0] = ⵠᐃ.ⲆⲆⲆᐃⲆᐃⲆ;
      ᐃᐃ[755][1] = ⵠᐃ.ⲆⵠΔⲆⵠⲆⵠ;
      ᐃᐃ[755][2] = ⵠᐃ.ΔⲆΔⲆⵠΔⵠ;
      ᐃᐃ[756] = ᐃᐃ[755];
      ᐃᐃ[757] = ᐃᐃ[755];
      ᐃᐃ[758] = [];
      ᐃᐃ[758][0] = ⵠᐃ.ΔᐃΔⲆⵠΔᐃ;
      ᐃᐃ[758][1] = ⵠᐃ.ᐃⲆⵠΔⲆΔⲆ;
      ᐃᐃ[758][2] = ⵠᐃ.ᐃᐃΔⵠⲆΔᐃ;
      ᐃᐃ[759] = ᐃᐃ[758];
      ᐃᐃ[760] = ᐃᐃ[758];
      ᐃᐃ[1129] = [];
      ᐃᐃ[1129][0] = ⵠᐃ.ⲆⲆⵠⵠⲆⵠⲆ;
      ᐃᐃ[1129][1] = ⵠᐃ.ᐃᐃᐃΔΔΔⵠ;
      ᐃᐃ[1129][2] = ⵠᐃ.ⵠΔΔΔⵠⵠⲆ;
      ᐃᐃ[1131] = ᐃᐃ[1129];
      ᐃᐃ[1130] = ᐃᐃ[1129];
      ᐃᐃ[1132] = [];
      ᐃᐃ[1132][0] = ⵠᐃ.ⵠⲆⵠᐃᐃⵠΔ;
      ᐃᐃ[1132][1] = ⵠᐃ.ᐃⲆΔⵠΔᐃᐃ;
      ᐃᐃ[1132][2] = ⵠᐃ.ᐃⲆΔⲆⵠᐃⵠ;
      ᐃᐃ[1134] = ᐃᐃ[1132];
      ᐃᐃ[1133] = ᐃᐃ[1132];
      ᐃᐃ[1135] = [];
      ᐃᐃ[1135][0] = ⵠᐃ.ⲆᐃⲆᐃᐃⵠⲆ;
      ᐃᐃ[1135][1] = ⵠᐃ.ⲆΔⵠⵠⵠᐃᐃ;
      ᐃᐃ[1135][2] = ⵠᐃ.ⲆᐃⵠⵠⵠᐃΔ;
      ᐃᐃ[1137] = ᐃᐃ[1135];
      ᐃᐃ[1136] = ᐃᐃ[1135];
      ᐃᐃ[1138] = [];
      ᐃᐃ[1138][0] = ⵠᐃ.ⲆⲆᐃΔᐃⵠⲆ;
      ᐃᐃ[1138][1] = ⵠᐃ.ⵠᐃⵠⵠΔᐃᐃ;
      ᐃᐃ[1138][2] = ⵠᐃ.ⲆⲆΔⲆⲆⵠΔ;
      ᐃᐃ[1140] = ᐃᐃ[1138];
      ᐃᐃ[1139] = ᐃᐃ[1138];
      ᐃᐃ[1141] = [];
      ᐃᐃ[1141][0] = ⵠᐃ.ⵠΔᐃⵠᐃⲆⲆ;
      ᐃᐃ[1141][1] = ⵠᐃ.ⵠΔⵠᐃᐃᐃⵠ;
      ᐃᐃ[1141][2] = ⵠᐃ.ΔⵠᐃᐃΔⵠᐃ;
      ᐃᐃ[1143] = ᐃᐃ[1141];
      ᐃᐃ[1142] = ᐃᐃ[1141];
      ᐃᐃ[1144] = [];
      ᐃᐃ[1144][0] = ⵠᐃ.ⵠⲆᐃΔⵠΔⵠ;
      ᐃᐃ[1144][1] = ⵠᐃ.ⵠΔⲆⵠⵠΔΔ;
      ᐃᐃ[1144][2] = ⵠᐃ.ᐃΔΔⵠᐃⲆⵠ;
      ᐃᐃ[1146] = ᐃᐃ[1144];
      ᐃᐃ[1145] = ᐃᐃ[1144];
      ᐃᐃ[1147] = [];
      ᐃᐃ[1147][0] = ⵠᐃ.ᐃⲆⵠⲆᐃⵠⲆ;
      ᐃᐃ[1147][1] = ⵠᐃ.ΔⵠⵠⲆᐃΔⵠ;
      ᐃᐃ[1147][2] = ⵠᐃ.ΔⲆⲆᐃⲆⲆΔ;
      ᐃᐃ[1149] = ᐃᐃ[1147];
      ᐃᐃ[1148] = ᐃᐃ[1147];
      ᐃᐃ[1150] = [];
      ᐃᐃ[1150][0] = ⵠᐃ.ᐃΔᐃⲆᐃⲆⲆ;
      ᐃᐃ[1150][1] = ⵠᐃ.ᐃⵠᐃⵠΔᐃΔ;
      ᐃᐃ[1150][2] = ⵠᐃ.ᐃΔᐃΔᐃⲆΔ;
      ᐃᐃ[1152] = ᐃᐃ[1150];
      ᐃᐃ[1151] = ᐃᐃ[1150];
      ᐃᐃ[1153] = [];
      ᐃᐃ[1153][0] = ⵠᐃ.ⵠⵠΔⲆⵠⲆⵠ;
      ᐃᐃ[1153][1] = ⵠᐃ.ΔᐃⵠᐃⵠᐃΔ;
      ᐃᐃ[1153][2] = ⵠᐃ.ⵠᐃⲆⵠⲆⵠⵠ;
      ᐃᐃ[1155] = ᐃᐃ[1153];
      ᐃᐃ[1154] = ᐃᐃ[1153];
      ᐃᐃ[782] = [];
      ᐃᐃ[782][0] = ⵠᐃ.ⲆⲆᐃΔᐃⵠⵠ;
      ᐃᐃ[782][1] = ⵠᐃ.ⵠⵠⵠΔⵠᐃΔ;
      ᐃᐃ[782][2] = ⵠᐃ.ΔᐃΔⵠⲆΔᐃ;
      ᐃᐃ[783] = ᐃᐃ[782];
      ᐃᐃ[784] = ᐃᐃ[782];
      ᐃᐃ[785] = [];
      ᐃᐃ[785][0] = ⵠᐃ.ᐃΔΔⵠⵠⵠⵠ;
      ᐃᐃ[785][1] = ⵠᐃ.ⲆⵠΔⲆⲆᐃⵠ;
      ᐃᐃ[785][2] = ⵠᐃ.ⵠΔᐃᐃⵠᐃⲆ;
      ᐃᐃ[786] = ᐃᐃ[785];
      ᐃᐃ[787] = ᐃᐃ[785];
      ᐃᐃ[788] = [];
      ᐃᐃ[788][0] = ⵠᐃ.ᐃᐃΔⲆᐃᐃⵠ;
      ᐃᐃ[788][1] = ⵠᐃ.ᐃᐃᐃΔᐃᐃⲆ;
      ᐃᐃ[788][2] = ⵠᐃ.ⵠᐃⵠⲆᐃⵠⵠ;
      ᐃᐃ[789] = ᐃᐃ[788];
      ᐃᐃ[790] = ᐃᐃ[788];
      ᐃᐃ[791] = [];
      ᐃᐃ[791][0] = ⵠᐃ.ⲆⲆΔΔΔᐃᐃ;
      ᐃᐃ[791][1] = ⵠᐃ.ᐃⵠⵠⵠⵠᐃⵠ;
      ᐃᐃ[791][2] = ⵠᐃ.ᐃΔⲆᐃᐃⵠᐃ;
      ᐃᐃ[792] = ᐃᐃ[791];
      ᐃᐃ[793] = ᐃᐃ[791];
      ᐃᐃ[794] = [];
      ᐃᐃ[794][0] = ⵠᐃ.ᐃⵠΔⲆᐃⵠᐃ;
      ᐃᐃ[794][1] = ⵠᐃ.ᐃᐃⲆⵠⲆᐃⵠ;
      ᐃᐃ[794][2] = ⵠᐃ.ⲆⵠⵠⲆⲆⲆᐃ;
      ᐃᐃ[795] = ᐃᐃ[794];
      ᐃᐃ[796] = ᐃᐃ[794];
      ᐃᐃ[797] = [];
      ᐃᐃ[797][0] = ⵠᐃ.ΔⵠᐃᐃⲆⲆⲆ;
      ᐃᐃ[797][1] = ⵠᐃ.ΔᐃⵠⵠΔᐃᐃ;
      ᐃᐃ[797][2] = ⵠᐃ.ⲆⵠΔⵠΔΔᐃ;
      ᐃᐃ[798] = ᐃᐃ[797];
      ᐃᐃ[799] = ᐃᐃ[797];
      ᐃᐃ[800] = [];
      ᐃᐃ[800][0] = ⵠᐃ.ᐃⲆⲆᐃΔΔΔ;
      ᐃᐃ[800][1] = ⵠᐃ.ⲆΔᐃᐃΔⵠΔ;
      ᐃᐃ[800][2] = ⵠᐃ.ⵠⲆᐃⵠⲆⵠⵠ;
      ᐃᐃ[801] = ᐃᐃ[800];
      ᐃᐃ[802] = ᐃᐃ[800];
      ᐃᐃ[803] = [];
      ᐃᐃ[803][0] = ⵠᐃ.ΔΔᐃⲆⵠΔⵠ;
      ᐃᐃ[803][1] = ⵠᐃ.ⲆⵠᐃΔᐃᐃᐃ;
      ᐃᐃ[803][2] = ⵠᐃ.ᐃⵠⲆⵠⲆΔⵠ;
      ᐃᐃ[804] = ᐃᐃ[803];
      ᐃᐃ[805] = ᐃᐃ[803];
      ᐃᐃ[806] = [];
      ᐃᐃ[806][0] = ⵠᐃ.ᐃⲆⲆⵠΔᐃⵠ;
      ᐃᐃ[806][1] = ⵠᐃ.ⲆⵠΔⵠⵠⵠⲆ;
      ᐃᐃ[806][2] = ⵠᐃ.ᐃⲆᐃᐃΔΔᐃ;
      ᐃᐃ[807] = ᐃᐃ[806];
      ᐃᐃ[808] = ᐃᐃ[806];
      ᐃᐃ[1515] = [];
      ᐃᐃ[1515][0] = ⵠᐃ.ᐃⵠⵠᐃⵠⵠᐃ;
      ᐃᐃ[1515][1] = ⵠᐃ.ᐃⵠΔΔΔⵠᐃ;
      ᐃᐃ[1515][2] = ⵠᐃ.ⲆⲆᐃⲆΔΔⵠ;
      ᐃᐃ[1517] = ᐃᐃ[1515];
      ᐃᐃ[1516] = ᐃᐃ[1515];
      ᐃᐃ[1518] = [];
      ᐃᐃ[1518][0] = ⵠᐃ.ᐃΔⵠᐃᐃⲆᐃ;
      ᐃᐃ[1518][1] = ⵠᐃ.ⵠⲆᐃΔⵠᐃⵠ;
      ᐃᐃ[1518][2] = ⵠᐃ.ΔⵠᐃⲆᐃΔΔ;
      ᐃᐃ[1520] = ᐃᐃ[1518];
      ᐃᐃ[1519] = ᐃᐃ[1518];
      ᐃᐃ[1521] = [];
      ᐃᐃ[1521][0] = ⵠᐃ.ΔᐃⵠⲆᐃⵠⵠ;
      ᐃᐃ[1521][1] = ⵠᐃ.ᐃⵠᐃᐃΔⲆᐃ;
      ᐃᐃ[1521][2] = ⵠᐃ.ⵠΔⵠⵠΔΔⵠ;
      ᐃᐃ[1523] = ᐃᐃ[1521];
      ᐃᐃ[1522] = ᐃᐃ[1521];
      ᐃᐃ[1524] = [];
      ᐃᐃ[1524][0] = ⵠᐃ.ᐃΔᐃⵠⵠⲆⲆ;
      ᐃᐃ[1524][1] = ⵠᐃ.ⲆΔᐃΔᐃΔΔ;
      ᐃᐃ[1524][2] = ⵠᐃ.ⲆΔᐃⵠⵠΔᐃ;
      ᐃᐃ[1526] = ᐃᐃ[1524];
      ᐃᐃ[1525] = ᐃᐃ[1524];
      ᐃᐃ[1527] = [];
      ᐃᐃ[1527][0] = ⵠᐃ.ΔⵠᐃᐃΔᐃᐃ;
      ᐃᐃ[1527][1] = ⵠᐃ.ⵠⲆⲆᐃⵠᐃⲆ;
      ᐃᐃ[1527][2] = ⵠᐃ.ⲆᐃᐃᐃᐃΔⲆ;
      ᐃᐃ[1529] = ᐃᐃ[1527];
      ᐃᐃ[1528] = ᐃᐃ[1527];
      ᐃᐃ[1530] = [];
      ᐃᐃ[1530][0] = ⵠᐃ.ΔⲆᐃⲆᐃⵠⵠ;
      ᐃᐃ[1530][1] = ⵠᐃ.ⲆᐃⵠΔᐃΔᐃ;
      ᐃᐃ[1530][2] = ⵠᐃ.ᐃΔᐃᐃᐃΔⵠ;
      ᐃᐃ[1532] = ᐃᐃ[1530];
      ᐃᐃ[1531] = ᐃᐃ[1530];
      ᐃᐃ[1533] = [];
      ᐃᐃ[1533][0] = ⵠᐃ.ᐃΔΔⲆᐃᐃⲆ;
      ᐃᐃ[1533][1] = ⵠᐃ.ⵠⵠΔⲆⵠᐃΔ;
      ᐃᐃ[1533][2] = ⵠᐃ.ᐃⵠⵠⵠᐃⵠᐃ;
      ᐃᐃ[1535] = ᐃᐃ[1533];
      ᐃᐃ[1534] = ᐃᐃ[1533];
      ᐃᐃ[1536] = [];
      ᐃᐃ[1536][0] = ⵠᐃ.ΔⲆᐃᐃⲆⲆⵠ;
      ᐃᐃ[1536][1] = ⵠᐃ.ⲆⵠⵠΔⲆⵠΔ;
      ᐃᐃ[1536][2] = ⵠᐃ.ⲆᐃⲆΔⲆⵠΔ;
      ᐃᐃ[1538] = ᐃᐃ[1536];
      ᐃᐃ[1537] = ᐃᐃ[1536];
      ᐃᐃ[1539] = [];
      ᐃᐃ[1539][0] = ⵠᐃ.ⵠⲆⵠΔΔᐃⵠ;
      ᐃᐃ[1539][1] = ⵠᐃ.ΔᐃΔⵠᐃⲆΔ;
      ᐃᐃ[1539][2] = ⵠᐃ.ΔΔΔᐃΔⵠΔ;
      ᐃᐃ[1541] = ᐃᐃ[1539];
      ᐃᐃ[1540] = ᐃᐃ[1539];
      ᐃᐃ[1648] = [];
      ᐃᐃ[1648][0] = ⵠᐃ.ⵠΔᐃᐃᐃⵠᐃⵠᐃ;
      ᐃᐃ[1648][1] = ⵠᐃ.ⵠⵠⲆᐃᐃⵠⲆᐃΔ;
      ᐃᐃ[1648][2] = ⵠᐃ.ᐃⲆⵠᐃⲆⵠΔᐃᐃ;
      ᐃᐃ[v585.ⲆΔᐃΔΔⲆΔΔᐃ] = ᐃᐃ[1648];
      ᐃᐃ[1485] = ᐃᐃ[1648];
      ᐃᐃ[1651] = [];
      ᐃᐃ[1651][0] = ⵠᐃ.ᐃⵠⲆⵠᐃⵠᐃⲆΔ;
      ᐃᐃ[1651][1] = ⵠᐃ.ⲆΔⵠⲆⲆⲆⵠⵠⲆ;
      ᐃᐃ[1651][2] = ⵠᐃ.ⲆᐃᐃΔⵠᐃΔΔⲆ;
      ᐃᐃ[1650] = ᐃᐃ[1651];
      ᐃᐃ[1652] = ᐃᐃ[1651];
      ᐃᐃ[1654] = [];
      ᐃᐃ[1654][0] = ⵠᐃ.ⵠⲆᐃⵠⲆΔⵠΔΔ;
      ᐃᐃ[1654][1] = ⵠᐃ.ΔⲆⲆⵠⵠⵠⵠΔᐃ;
      ᐃᐃ[1654][2] = ⵠᐃ.ⵠᐃΔⵠⲆⲆⵠΔⲆ;
      ᐃᐃ[1653] = ᐃᐃ[1654];
      ᐃᐃ[1655] = ᐃᐃ[1654];
      ᐃᐃ[1657] = [];
      ᐃᐃ[1657][0] = ⵠᐃ.ⲆⲆⲆⵠΔⵠⲆᐃΔ;
      ᐃᐃ[1657][1] = ⵠᐃ.ⲆΔᐃⵠⲆΔΔΔᐃ;
      ᐃᐃ[1657][2] = ⵠᐃ.ΔᐃⲆⵠΔⵠⵠΔᐃ;
      ᐃᐃ[1656] = ᐃᐃ[1657];
      ᐃᐃ[1658] = ᐃᐃ[1657];
      ᐃᐃ[1660] = [];
      ᐃᐃ[1660][0] = ⵠᐃ.ᐃΔᐃⵠⵠⲆᐃⵠⲆ;
      ᐃᐃ[1660][1] = ⵠᐃ.ΔΔⲆΔⵠᐃⲆᐃⲆ;
      ᐃᐃ[1660][2] = ⵠᐃ.ⲆⲆⲆΔⲆⲆⵠⵠⵠ;
      ᐃᐃ[1659] = ᐃᐃ[1660];
      ᐃᐃ[1661] = ᐃᐃ[1660];
      ᐃᐃ[1663] = [];
      ᐃᐃ[1663][0] = ⵠᐃ.ⵠⵠⵠⲆⲆⵠⲆⲆᐃ;
      ᐃᐃ[1663][1] = ⵠᐃ.ΔⵠⲆⵠⵠΔⵠⵠⵠ;
      ᐃᐃ[1663][2] = ⵠᐃ.ⲆⵠⲆⲆⵠΔᐃΔΔ;
      ᐃᐃ[1662] = ᐃᐃ[1663];
      ᐃᐃ[1664] = ᐃᐃ[1663];
      ᐃᐃ[1666] = [];
      ᐃᐃ[1666][0] = ⵠᐃ.ⲆⲆⲆΔⲆⵠⵠΔᐃ;
      ᐃᐃ[1666][1] = ⵠᐃ.ᐃΔΔⵠᐃⵠᐃᐃΔ;
      ᐃᐃ[1666][2] = ⵠᐃ.ΔᐃⲆⵠⵠΔⲆΔⲆ;
      ᐃᐃ[1665] = ᐃᐃ[1666];
      ᐃᐃ[1667] = ᐃᐃ[1666];
      ᐃᐃ[1669] = [];
      ᐃᐃ[1669][0] = ⵠᐃ.ᐃⵠⲆⲆⵠΔᐃΔⲆ;
      ᐃᐃ[1669][1] = ⵠᐃ.ᐃⲆⲆᐃᐃⵠΔᐃᐃ;
      ᐃᐃ[1669][2] = ⵠᐃ.ⲆᐃΔᐃⵠᐃⵠⵠᐃ;
      ᐃᐃ[1668] = ᐃᐃ[1669];
      ᐃᐃ[1670] = ᐃᐃ[1669];
      ᐃᐃ[1672] = [];
      ᐃᐃ[1672][0] = ⵠᐃ.ⵠⲆᐃⲆᐃⲆᐃⲆΔ;
      ᐃᐃ[1672][1] = ⵠᐃ.ΔᐃⵠⵠⵠⵠΔΔᐃ;
      ᐃᐃ[1672][2] = ⵠᐃ.ⵠⵠΔⵠᐃⵠᐃⵠⵠ;
      ᐃᐃ[1671] = ᐃᐃ[1672];
      ᐃᐃ[1673] = ᐃᐃ[1672];
    })();
    ᐃᐃ[678] = [];
    ᐃᐃ[678][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[678][v585.ᐃⲆΔ] = [];
    for (var v1430 = 0; v1430 < v585.ᐃΔⵠⵠⵠΔΔ; v1430++) {
      ᐃᐃ[678][v585.ᐃⲆᐃ].push(f54(f162(v1427, 4 + v1430, "#59B8CE")));
      ᐃᐃ[678][v585.ᐃⲆΔ].push(f54(f162(v1427, 4 + v1430, "#90DDD9")));
    }
    ᐃᐃ[608] = [];
    ᐃᐃ[608][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[608][v585.ᐃⲆΔ] = [];
    for (v1430 = 0; v1430 < v585.ᐃⲆᐃᐃᐃᐃΔ; v1430++) {
      ᐃᐃ[608][v585.ᐃⲆᐃ].push(f54(f162(v1427, 4 + v1430, "#fff")));
      ᐃᐃ[608][v585.ᐃⲆΔ].push(f54(f162(v1427, 4 + v1430, "#fff")));
    }
    ᐃᐃ[609] = [];
    ᐃᐃ[609][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[609][v585.ᐃⲆΔ] = [];
    for (v1430 = 0; v1430 < v585.ᐃⲆᐃᐃᐃᐃΔ; v1430++) {
      ᐃᐃ[609][v585.ᐃⲆᐃ].push(f54(f162(v1427, 6 + v1430, "#DDCD8A")));
      ᐃᐃ[609][v585.ᐃⲆΔ].push(f54(f162(v1427, 6 + v1430, "#155E57")));
    }
    ᐃᐃ[1218] = [];
    ᐃᐃ[1218][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1218][v585.ᐃⲆΔ] = [];
    for (v1430 = 0; v1430 < v585.ⲆⲆΔΔⲆⵠⲆ; v1430++) {
      ᐃᐃ[1218][v585.ᐃⲆᐃ].push(f54(f162(v1427, 4 + v1430, "#353326")));
      ᐃᐃ[1218][v585.ᐃⲆΔ].push(f54(f162(v1427, 4 + v1430, "#1D2526")));
    }
    ᐃᐃ[303] = [];
    ᐃᐃ[303][v585.ᐃⲆᐃ] = f54(f97(v1427 * 1.5, 0, ["#ee71a9"]));
    ᐃᐃ[303][v585.ᐃⲆΔ] = f54(f97(v1427 * 1.5, 0, ["#ee71a9"]));
    ᐃᐃ[1121] = [ᐃᐃ[303]];
    ᐃᐃ[1121][1] = [];
    ᐃᐃ[1121][2] = [];
    ᐃᐃ[1121][3] = [];
    ᐃᐃ[1121][4] = [];
    ᐃᐃ[1121][1][v585.ᐃⲆᐃ] = f54(f97(v1427 * 1.5, 0, ["#e2d63b"]));
    ᐃᐃ[1121][1][v585.ᐃⲆΔ] = f54(f97(v1427 * 1.5, 0, ["#e2d63b"]));
    ᐃᐃ[1121][2][v585.ᐃⲆᐃ] = f54(f97(v1427 * 1.5, 0, ["#309cbd"]));
    ᐃᐃ[1121][2][v585.ᐃⲆΔ] = f54(f97(v1427 * 1.5, 0, ["#309cbd"]));
    ᐃᐃ[1121][3][v585.ᐃⲆᐃ] = f54(f97(v1427 * 1.5, 0, ["#cd232d"]));
    ᐃᐃ[1121][3][v585.ᐃⲆΔ] = f54(f97(v1427 * 1.5, 0, ["#cd232d"]));
    ᐃᐃ[1121][4][v585.ᐃⲆᐃ] = f54(f97(v1427 * 1.5, 0, ["#42b672"]));
    ᐃᐃ[1121][4][v585.ᐃⲆΔ] = f54(f97(v1427 * 1.5, 0, ["#42b672"]));
    if (Δᐃᐃ.ΔⵠΔΔΔⲆΔ("cti", vWindow.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      f54 = function (p1095) {
        p1095.loaded = 1;
        return p1095;
      };
    }
    ᐃᐃ[1046] = f54(function () {
      var v1431 = document.createElement("canvas");
      var v1432 = v1431.getContext("2d");
      v1431.width = 460;
      v1431.height = 220;
      v1432.fillStyle = "#3a2a0d";
      v1432.fillRect(0, 0, v1431.width, v1431.height);
      v1432.lineWidth = 4;
      v1432.beginPath();
      v1432.strokeStyle = "#513810";
      for (var v1433 = 20; v1433 < 220; v1433 += 20) {
        v1432.moveTo(0, v1433);
        v1432.lineTo(460, v1433);
        v1432.closePath();
        v1432.stroke();
      }
      return v1431;
    }());
    ᐃᐃ[199] = [];
    ᐃᐃ[199][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[199][v585.ᐃⲆΔ] = [];
    ᐃᐃ[199][v585.ᐃⲆᐃ].push(f54(f156(v1427 * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃᐃ[199][v585.ᐃⲆᐃ].push(f54(f156(v1427 * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃᐃ[199][v585.ᐃⲆᐃ].push(f54(f156(v1427 * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃᐃ[199][v585.ᐃⲆΔ].push(f54(f156(v1427 * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃᐃ[199][v585.ᐃⲆΔ].push(f54(f156(v1427 * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃᐃ[199][v585.ᐃⲆΔ].push(f54(f156(v1427 * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃᐃ[202] = [];
    ᐃᐃ[202][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[202][v585.ᐃⲆΔ] = [];
    ᐃᐃ[202][v585.ᐃⲆᐃ].push(f54(f181(v1427 * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[202][v585.ᐃⲆᐃ].push(f54(f181(v1427 * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[202][v585.ᐃⲆᐃ].push(f54(f181(v1427 * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[202][v585.ᐃⲆΔ].push(f54(f181(v1427 * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃᐃ[202][v585.ᐃⲆΔ].push(f54(f181(v1427 * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃᐃ[202][v585.ᐃⲆΔ].push(f54(f181(v1427 * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃᐃ[203] = [];
    ᐃᐃ[203][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[203][v585.ᐃⲆΔ] = [];
    ᐃᐃ[203][v585.ᐃⲆᐃ].push(f54(f202(v1427 * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃᐃ[203][v585.ᐃⲆᐃ].push(f54(f202(v1427 * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃᐃ[203][v585.ᐃⲆᐃ].push(f54(f202(v1427 * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃᐃ[203][v585.ᐃⲆΔ].push(f54(f202(v1427 * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃᐃ[203][v585.ᐃⲆΔ].push(f54(f202(v1427 * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃᐃ[203][v585.ᐃⲆΔ].push(f54(f202(v1427 * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃᐃ[349] = [];
    ᐃᐃ[349][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⵠⲆⲆᐃΔ;
    ᐃᐃ[349][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ;
    ᐃᐃ[396] = [];
    ᐃᐃ[396][v585.ᐃⲆᐃ] = f54(f142(v1427 * 0.6, ["#0d1b1c"]));
    ᐃᐃ[396][v585.ᐃⲆΔ] = f54(f142(v1427 * 0.6, ["#030d14"]));
    ᐃᐃ[1042] = [];
    ᐃᐃ[1042][v585.ᐃⲆᐃ] = f54(f129(v1427 * 0.6, ["#2a2938", "#242330"]));
    ᐃᐃ[1042][v585.ᐃⲆΔ] = f54(f129(v1427 * 0.6, ["#1b1e30", "#161921"]));
    ᐃᐃ[1069] = [];
    ᐃᐃ[1069][v585.ᐃⲆᐃ] = f54(f100(v1427 * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ᐃᐃ[1069][v585.ᐃⲆΔ] = f54(f100(v1427 * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ᐃᐃ[1070] = [];
    ᐃᐃ[1070][v585.ᐃⲆᐃ] = f54(f102(v1427 * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ᐃᐃ[1070][v585.ᐃⲆΔ] = f54(f102(v1427 * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ᐃᐃ[1071] = [];
    ᐃᐃ[1071][v585.ᐃⲆᐃ] = f54(f145(v1427 * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ᐃᐃ[1071][v585.ᐃⲆΔ] = f54(f145(v1427 * 0.4, ["#030d14", "#11635e", "#02373e"]));
    ᐃᐃ[1072] = f54(f104(v1427 * 0.6, ["#BB0000"]));
    ᐃᐃ[1073] = f54(f104(v1427 * 0.6, ["#DBE71C"]));
    ᐃᐃ[1074] = f54(f104(v1427 * 0.6, ["#00BB00"]));
    ᐃᐃ[200] = [];
    ᐃᐃ[200][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[200][v585.ᐃⲆΔ] = [];
    ᐃᐃ[200][v585.ᐃⲆᐃ].push(f137(v1427 * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
    ᐃᐃ[200][v585.ᐃⲆᐃ].push(f137(v1427 * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
    ᐃᐃ[200][v585.ᐃⲆᐃ].push(f137(v1427 * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], vVVV142, 0));
    ᐃᐃ[200][v585.ᐃⲆᐃ].push(f137(v1427 * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
    ᐃᐃ[200][v585.ᐃⲆᐃ].push(f137(v1427 * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], vVVV144, 0));
    ᐃᐃ[200][v585.ᐃⲆᐃ].push(f137(v1427 * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], vVV63, 0));
    ᐃᐃ[200][v585.ᐃⲆΔ].push(f137(v1427 * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], vVVV14, 0));
    ᐃᐃ[200][v585.ᐃⲆΔ].push(f137(v1427 * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], vVVV622, 0));
    ᐃᐃ[200][v585.ᐃⲆΔ].push(f137(v1427 * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], vVV14, 0));
    ᐃᐃ[200][v585.ᐃⲆΔ].push(f137(v1427 * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
    ᐃᐃ[200][v585.ᐃⲆΔ].push(f137(v1427 * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], vVV1422, 0));
    ᐃᐃ[200][v585.ᐃⲆΔ].push(f137(v1427 * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], vVVV63, 0));
    ᐃᐃ[418] = [];
    ᐃᐃ[418][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[418][v585.ᐃⲆΔ] = [];
    ᐃᐃ[418][v585.ᐃⲆᐃ].push(f54(f131(f130(v1427 * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], vVVVVV142), ᐃᐃ[200][v585.ᐃⲆᐃ][0])));
    ᐃᐃ[418][v585.ᐃⲆᐃ].push(f54(f131(f130(v1427 * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], vVVVV63), ᐃᐃ[200][v585.ᐃⲆᐃ][1])));
    ᐃᐃ[418][v585.ᐃⲆΔ].push(f54(f131(f130(v1427 * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), ᐃᐃ[200][v585.ᐃⲆΔ][0])));
    ᐃᐃ[418][v585.ᐃⲆΔ].push(f54(f131(f130(v1427 * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), ᐃᐃ[200][v585.ᐃⲆΔ][1])));
    ᐃᐃ[418][v585.ᐃⲆᐃ].push(f54(f131(f130(v1427 * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], false), ᐃᐃ[200][v585.ᐃⲆᐃ][2])));
    ᐃᐃ[418][v585.ᐃⲆᐃ].push(f54(f131(f130(v1427 * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], vVV62), ᐃᐃ[200][v585.ᐃⲆᐃ][2])));
    ᐃᐃ[418][v585.ᐃⲆΔ].push(f54(f131(f130(v1427 * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ᐃᐃ[200][v585.ᐃⲆΔ][2])));
    ᐃᐃ[418][v585.ᐃⲆΔ].push(f54(f131(f130(v1427 * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), ᐃᐃ[200][v585.ᐃⲆΔ][3])));
    ᐃᐃ[200][v585.ᐃⲆᐃ][5] = f54(ᐃᐃ[200][v585.ᐃⲆᐃ][5]);
    ᐃᐃ[200][v585.ᐃⲆᐃ][4] = f54(ᐃᐃ[200][v585.ᐃⲆᐃ][4]);
    ᐃᐃ[200][v585.ᐃⲆᐃ][3] = f54(ᐃᐃ[200][v585.ᐃⲆᐃ][3]);
    ᐃᐃ[200][v585.ᐃⲆᐃ][2] = f54(ᐃᐃ[200][v585.ᐃⲆᐃ][2]);
    ᐃᐃ[200][v585.ᐃⲆᐃ][1] = f54(ᐃᐃ[200][v585.ᐃⲆᐃ][1]);
    ᐃᐃ[200][v585.ᐃⲆᐃ][0] = f54(ᐃᐃ[200][v585.ᐃⲆᐃ][0]);
    ᐃᐃ[200][v585.ᐃⲆΔ][5] = f54(ᐃᐃ[200][v585.ᐃⲆΔ][5]);
    ᐃᐃ[200][v585.ᐃⲆΔ][4] = f54(ᐃᐃ[200][v585.ᐃⲆΔ][4]);
    ᐃᐃ[200][v585.ᐃⲆΔ][3] = f54(ᐃᐃ[200][v585.ᐃⲆΔ][3]);
    ᐃᐃ[200][v585.ᐃⲆΔ][2] = f54(ᐃᐃ[200][v585.ᐃⲆΔ][2]);
    ᐃᐃ[200][v585.ᐃⲆΔ][1] = f54(ᐃᐃ[200][v585.ᐃⲆΔ][1]);
    ᐃᐃ[200][v585.ᐃⲆΔ][0] = f54(ᐃᐃ[200][v585.ᐃⲆΔ][0]);
    ᐃᐃ[8] = [];
    ᐃᐃ[8][v585.ᐃⲆᐃ] = f54(f91(4, f132(v1427 * 0.75, vVVVV6322, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ᐃᐃ[8][v585.ᐃⲆΔ] = f54(f91(4, f132(v1427 * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ᐃᐃ[1] = [];
    ᐃᐃ[1][v585.ᐃⲆᐃ] = f54(f91(4, f132(v1427 * 0.75, vVVV63, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃᐃ[1][v585.ᐃⲆΔ] = f54(f91(4, f132(v1427 * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ᐃᐃ[3] = [];
    ᐃᐃ[3][v585.ᐃⲆᐃ] = f54(f91(4, f132(v1427 * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃᐃ[3][v585.ᐃⲆΔ] = f54(f91(4, f132(v1427 * 0.75, vVV63, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ᐃᐃ[4] = [];
    ᐃᐃ[4][v585.ᐃⲆᐃ] = f54(f91(4, f132(v1427 * 0.75, vVVV623, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃᐃ[4][v585.ᐃⲆΔ] = f54(f91(4, f132(v1427 * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃᐃ[49] = [];
    ᐃᐃ[49][v585.ᐃⲆᐃ] = f54(f91(4, f132(v1427 * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃᐃ[49][v585.ᐃⲆΔ] = f54(f91(4, f132(v1427 * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃᐃ[9] = [];
    ᐃᐃ[9][v585.ᐃⲆᐃ] = f54(f91(3, f143(v1427 * 0.17, vVVVV6232, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ᐃᐃ[9][v585.ᐃⲆΔ] = f54(f91(3, f143(v1427 * 0.17, vVVVV6232, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ᐃᐃ[301] = [];
    ᐃᐃ[301][v585.ᐃⲆᐃ] = f54(f91(3, f153(v1427 * 0.32, vVVV624, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ᐃᐃ[301][v585.ᐃⲆΔ] = f54(f91(3, f153(v1427 * 0.42, vVVVVVV6232, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ᐃᐃ[103] = [];
    ᐃᐃ[103][v585.ᐃⲆᐃ] = f54(f91(3, f136(v1427 * 0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ᐃᐃ[103][v585.ᐃⲆΔ] = f54(f91(3, f136(v1427 * 0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ᐃᐃ[0] = [];
    ᐃᐃ[0][v585.ᐃⲆᐃ] = f54(f91(3, f135(v1427 * 0.4, vVVV622, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ᐃᐃ[0][v585.ᐃⲆΔ] = f54(f91(3, f135(v1427 * 0.4, vVVV632, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ᐃᐃ[5] = [];
    ᐃᐃ[5][v585.ᐃⲆᐃ] = f54(f91(3, f149(v1427 * 0.4, vVVV63, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ᐃᐃ[5][v585.ᐃⲆΔ] = f54(f91(3, f149(v1427 * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ᐃᐃ[6] = [];
    ᐃᐃ[6][v585.ᐃⲆᐃ] = f54(f91(3, f147(v1427 * 0.4, vVVV62, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ᐃᐃ[6][v585.ᐃⲆΔ] = f54(f91(3, f147(v1427 * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ᐃᐃ[48] = [];
    ᐃᐃ[48][v585.ᐃⲆᐃ] = f54(f91(3, f150(v1427 * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ᐃᐃ[48][v585.ᐃⲆΔ] = f54(f91(3, f150(v1427 * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ᐃᐃ[395] = [];
    ᐃᐃ[395][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[395][v585.ᐃⲆΔ] = [];
    ᐃᐃ[395][v585.ᐃⲆᐃ].push(f54(f197(v1427 * 0.9, 0, ["#0d4f35"], 0)));
    ᐃᐃ[395][v585.ᐃⲆᐃ].push(f54(f197(v1427 * 0.9, 0, ["#0d4f35"], 1)));
    ᐃᐃ[395][v585.ᐃⲆᐃ].push(f54(f197(v1427 * 0.9, 0, ["#0d4f35"], 2)));
    ᐃᐃ[395][v585.ᐃⲆΔ].push(f54(f197(v1427 * 0.9, 0, ["#053339"], 0)));
    ᐃᐃ[395][v585.ᐃⲆΔ].push(f54(f197(v1427 * 0.9, 0, ["#053339"], 1)));
    ᐃᐃ[395][v585.ᐃⲆΔ].push(f54(f197(v1427 * 0.9, 0, ["#053339"], 2)));
    ᐃᐃ[395][v585.ᐃⲆᐃ].push(f54(f190(v1427 * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ᐃᐃ[395][v585.ᐃⲆᐃ].push(f54(f190(v1427 * 0.8, ["#292002", "#ba930e", "#6d5704"])));
    ᐃᐃ[395][v585.ᐃⲆΔ].push(f54(f190(v1427 * 0.9, ["#052919", "#0a4738", "#06321f"])));
    ᐃᐃ[395][v585.ᐃⲆΔ].push(f54(f190(v1427 * 0.8, ["#052918", "#08491c", "#063417"])));
    ᐃᐃ[285] = [];
    ᐃᐃ[285][v585.ᐃⲆᐃ] = f54(f91(Math.PI / 2, f205(v1427 * 0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ᐃᐃ[285][v585.ᐃⲆΔ] = f54(f91(Math.PI / 2, f205(v1427 * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ᐃᐃ[1052] = [];
    ᐃᐃ[1052].push(f54(f210(v1427 * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ᐃᐃ[1052].push(f54(f210(v1427 * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ᐃᐃ[1052].push(f54(f210(v1427 * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ᐃᐃ[1051] = [];
    ᐃᐃ[1051][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1051][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1051][v585.ᐃⲆᐃ].push(f54(f91(Math.PI / 2, f214(v1427 * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ᐃᐃ[1051][v585.ᐃⲆΔ].push(f54(f91(Math.PI / 2, f214(v1427 * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ᐃᐃ[1051][v585.ᐃⲆᐃ].push(f54(f91(Math.PI / 2, f214(v1427 * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ᐃᐃ[1051][v585.ᐃⲆΔ].push(f54(f91(Math.PI / 2, f214(v1427 * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ᐃᐃ[1051][v585.ᐃⲆᐃ].push(f54(f91(Math.PI / 2, f214(v1427 * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ᐃᐃ[1051][v585.ᐃⲆΔ].push(f54(f91(Math.PI / 2, f214(v1427 * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ᐃᐃ[1051][v585.ᐃⲆᐃ].push(f54(f91(Math.PI / 2, f214(v1427 * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ᐃᐃ[1051][v585.ᐃⲆΔ].push(f54(f91(Math.PI / 2, f214(v1427 * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ᐃᐃ[201] = [];
    ᐃᐃ[201][v585.ᐃⲆᐃ] = [f54(f172(v1427 * 1.2, vVVVV6232, ["#0e3022", "#0b8052", "#077b49"]))];
    ᐃᐃ[201][v585.ᐃⲆΔ] = [f54(f172(v1427 * 1.2, true, ["#030d14", "#084442", "#0a4049"]))];
    ᐃᐃ[842] = [];
    ᐃᐃ[842][v585.ᐃⲆᐃ] = f54(f172(v1427 * 0.8, true, ["#0e3022", "#68622D", "#665329"]));
    ᐃᐃ[842][v585.ᐃⲆΔ] = f54(f172(v1427 * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ᐃᐃ[291] = [];
    ᐃᐃ[291][v585.ᐃⲆᐃ] = f54(f249(v1427 * 0.5, vVVVV632, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ᐃᐃ[291][v585.ᐃⲆΔ] = f54(f249(v1427 * 0.5, vV6, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ᐃᐃ[294] = [];
    ᐃᐃ[294][v585.ᐃⲆᐃ] = f54(f95(v1427 * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ᐃᐃ[294][v585.ᐃⲆΔ] = f54(f95(v1427 * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ᐃᐃ[296] = [];
    ᐃᐃ[296][v585.ᐃⲆᐃ] = f54(f248(v1427 * 0.5, vVVV624, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ᐃᐃ[296][v585.ᐃⲆΔ] = f54(f248(v1427 * 0.5, vVV6, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ᐃᐃ[397] = [];
    ᐃᐃ[397][v585.ᐃⲆᐃ] = f54(f172(v1427 * 0.8, vV6, ["#1b170c", "#0b8052", "#077b49"]));
    ᐃᐃ[397][v585.ᐃⲆΔ] = f54(f172(v1427 * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ᐃᐃ[1062] = [];
    ᐃᐃ[1062][v585.ᐃⲆᐃ] = f54(f249(v1427 * 0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ᐃᐃ[1062][v585.ᐃⲆΔ] = f54(f249(v1427 * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ᐃᐃ[1088] = [];
    ᐃᐃ[1088][v585.ᐃⲆᐃ] = f54(f95(v1427 * 0.5, vVVV62, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ᐃᐃ[1088][v585.ᐃⲆΔ] = f54(f95(v1427 * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ᐃᐃ[1118] = [];
    ᐃᐃ[1118][v585.ᐃⲆᐃ] = f54(f248(v1427 * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ᐃᐃ[1118][v585.ᐃⲆΔ] = f54(f248(v1427 * 0.5, vVVV62, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ᐃᐃ[1103] = [];
    ᐃᐃ[1103][v585.ᐃⲆᐃ] = f54(f258(v1427 * 0.45, vVVVV632, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ᐃᐃ[1103][v585.ᐃⲆΔ] = f54(f258(v1427 * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ᐃᐃ[1108] = f54(f258(v1427 * 0.65, vVVVVV6232, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ᐃᐃ[404] = [];
    ᐃᐃ[404][v585.ᐃⲆᐃ] = f54(f184(v1427 * 1.4, 0, ["#ac222a", "#e6636a"]));
    ᐃᐃ[404][v585.ᐃⲆΔ] = f54(f184(v1427 * 1.4, 0, ["#46195e", "#744188"]));
    ᐃᐃ[405] = [];
    ᐃᐃ[405][v585.ᐃⲆᐃ] = f54(f184(v1427 * 1.25, 0, ["#cea52c", "#f2c85f"]));
    ᐃᐃ[405][v585.ᐃⲆΔ] = f54(f184(v1427 * 1.25, 0, ["#239b73", "#42c193"]));
    ᐃᐃ[398] = [];
    ᐃᐃ[398][v585.ᐃⲆᐃ] = f54(f127(v1427 * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ᐃᐃ[398][v585.ᐃⲆΔ] = f54(f127(v1427 * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ᐃᐃ[209] = [];
    ᐃᐃ[209][v585.ᐃⲆᐃ] = f54(f124(v1427 * 0.9, 0, ["#4d2d14", "#432516"]));
    ᐃᐃ[209][v585.ᐃⲆΔ] = f54(f124(v1427 * 0.9, 0, ["#282404", "#0a0a01"]));
    ᐃᐃ[204] = [];
    ᐃᐃ[204][v585.ᐃⲆᐃ] = f54(f146(v1427 * 0.9, 0, ["#4d2d14", "#432516"]));
    ᐃᐃ[204][v585.ᐃⲆΔ] = f54(f146(v1427 * 0.9, 0, ["#282404", "#0a0a01"]));
    ᐃᐃ[399] = [];
    ᐃᐃ[399][v585.ᐃⲆᐃ] = f54(f133(v1427 * 0.9, 0, ["#efd435"]));
    ᐃᐃ[399][v585.ᐃⲆΔ] = f54(f133(v1427 * 0.9, 0, ["#fffabb"]));
    ᐃᐃ[392] = [];
    ᐃᐃ[392][v585.ᐃⲆᐃ] = f54(f138(v1427 * 0.9, 0, ["#efd435"]));
    ᐃᐃ[392][v585.ᐃⲆΔ] = f54(f138(v1427 * 0.9, 0, ["#fffabb"]));
    ᐃᐃ[1065] = [];
    ᐃᐃ[1065][v585.ᐃⲆᐃ] = f54(f133(v1427 * 0.9, 0, ["#efd435"]));
    ᐃᐃ[1065][v585.ᐃⲆΔ] = f54(f133(v1427 * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ᐃᐃ[1066] = [];
    ᐃᐃ[1066][v585.ᐃⲆᐃ] = f54(f138(v1427 * 0.9, 0, ["#efd435"]));
    ᐃᐃ[1066][v585.ᐃⲆΔ] = f54(f138(v1427 * 0.9, 0, ["#ff5704"]));
    ᐃᐃ[435] = f54(f120(v1427, "#ffffff"));
    ᐃᐃ[412] = f54(f120(v1427 * 1.5, "#ffffff"));
    ᐃᐃ[417] = f54(f157(v1427, "Your score:", v1427 * 15, "#FFF"));
    ᐃᐃ[874] = f54(function (p1096, p1097) {
      var v1434 = document.createElement("canvas");
      var v1435 = v1434.getContext("2d");
      v1434.width = p1096 * 243;
      v1434.height = p1096 * 172;
      f92(v1435, p1096 * 119.5, p1096 * 140.125, p1096 * 19);
      f88(v1435, vVVVVVUndefined14, p1097[1], p1096 * 5);
      v1435.beginPath();
      v1435.lineCap = "round";
      v1435.lineJoin = "round";
      v1435.moveTo(p1096 * 36.5, p1096 * 20.125);
      v1435.bezierCurveTo(p1096 * 119.5, p1096 * 20.625, p1096 * 119.5, p1096 * 20.625, p1096 * 202.5, p1096 * 21.125);
      v1435.bezierCurveTo(p1096 * 214.5, p1096 * 22.125, p1096 * 216.5, p1096 * 26.125, p1096 * 217.5, p1096 * 35.125);
      v1435.bezierCurveTo(p1096 * 221, p1096 * 76.125, p1096 * 221, p1096 * 76.125, p1096 * 224.5, p1096 * 117.125);
      v1435.bezierCurveTo(p1096 * 225.5, p1096 * 127.125, p1096 * 221.5, p1096 * 131.125, p1096 * 210.5, p1096 * 132.125);
      v1435.bezierCurveTo(p1096 * 117.5, p1096 * 132.125, p1096 * 117.5, p1096 * 132.125, p1096 * 24.5, p1096 * 132.125);
      v1435.bezierCurveTo(p1096 * 14.5, p1096 * 131.125, p1096 * 13.5, p1096 * 126.125, p1096 * 16.5, p1096 * 111.125);
      v1435.bezierCurveTo(p1096 * 19.5, p1096 * 73.125, p1096 * 19.5, p1096 * 73.125, p1096 * 22.5, p1096 * 35.125);
      v1435.bezierCurveTo(p1096 * 23.5, p1096 * 23.125, p1096 * 29.5, p1096 * 21.125, p1096 * 36.5, p1096 * 20.125);
      v1435.closePath();
      f88(v1435, p1097[0], p1097[1], p1096 * 4);
      v1435.beginPath();
      v1435.lineCap = "round";
      v1435.lineJoin = "round";
      v1435.moveTo(p1096 * 15.5, p1096 * 138.625);
      v1435.bezierCurveTo(p1096 * 120, p1096 * 138.625, p1096 * 120, p1096 * 138.625, p1096 * 224.5, p1096 * 138.625);
      v1435.closePath();
      f88(v1435, undefined, p1097[2], p1096 * 10);
      v1435.beginPath();
      v1435.lineCap = "round";
      v1435.lineJoin = "round";
      v1435.moveTo(p1096 * 13.5, p1096 * 131.625);
      v1435.bezierCurveTo(p1096 * 119.5, p1096 * 131.625, p1096 * 119.5, p1096 * 131.625, p1096 * 225.5, p1096 * 131.625);
      v1435.closePath();
      f88(v1435, undefined, p1097[3], p1096 * 10);
      f92(v1435, p1096 * 119.5, p1096 * 140.125, p1096 * 14.866068747318506);
      f88(v1435, p1097[4], p1097[5], p1096 * 4);
      v1435.beginPath();
      v1435.lineCap = "round";
      v1435.lineJoin = "round";
      v1435.moveTo(p1096 * 106.5, p1096 * 146.625);
      v1435.bezierCurveTo(p1096 * 116.5, p1096 * 137.625, p1096 * 118.5, p1096 * 136.625, p1096 * 123.5, p1096 * 138.625);
      v1435.bezierCurveTo(p1096 * 131.5, p1096 * 145.625, p1096 * 133.5, p1096 * 148.625, p1096 * 127.5, p1096 * 152.625);
      v1435.bezierCurveTo(p1096 * 115.5, p1096 * 158.625, p1096 * 111.5, p1096 * 153.625, p1096 * 106.5, p1096 * 147.625);
      v1435.closePath();
      f88(v1435, p1097[6], p1097[7], p1096 * 2);
      v1435.beginPath();
      v1435.lineCap = "round";
      v1435.lineJoin = "round";
      v1435.moveTo(p1096 * 105.5, p1096 * 146.625);
      v1435.bezierCurveTo(p1096 * 116.5, p1096 * 159.625, p1096 * 124.5, p1096 * 156.625, p1096 * 132.5, p1096 * 146.625);
      f88(v1435, undefined, p1097[8], p1096 * 5);
      v1435.save();
      v1435.translate(p1096 * 75.5, p1096 * 80.125);
      f86(v1435, p1096 * -39, p1096 * -40, p1096 * 78, p1096 * 78, p1096 * 10);
      v1435.restore();
      f88(v1435, p1097[9]);
      v1435.save();
      v1435.translate(p1096 * 167, p1096 * 80.125);
      f86(v1435, p1096 * -38.5, p1096 * -39, p1096 * 78, p1096 * 78, p1096 * 10);
      v1435.restore();
      f88(v1435, p1097[9]);
      return v1434;
    }(v1427 * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ᐃᐃ[875] = ⵠᐃ.ΔᐃⲆᐃⲆⲆⲆ;
    ᐃᐃ[228] = [];
    ᐃᐃ[228][v585.ᐃⲆᐃ] = f54(f121(v1427 * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃᐃ[228][v585.ᐃⲆΔ] = f54(f121(v1427 * 1.5, vVV6, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃᐃ[860] = [];
    ᐃᐃ[860][v585.ᐃⲆᐃ] = f54(f110(v1427 * 2, vVV62, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃᐃ[860][v585.ᐃⲆΔ] = f54(f110(v1427 * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃᐃ[861] = [];
    ᐃᐃ[861][v585.ᐃⲆᐃ] = f54(f123(v1427 * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃᐃ[861][v585.ᐃⲆΔ] = f54(f123(v1427 * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃᐃ[227] = [];
    ᐃᐃ[227][v585.ᐃⲆᐃ] = f54(f117(v1427 * 2.2, 0, ["#A89F67", "#9E8456"]));
    ᐃᐃ[227][v585.ᐃⲆΔ] = f54(f117(v1427 * 2.2, 0, ["#0B4049", "#08383D"]));
    ᐃᐃ[857] = [];
    ᐃᐃ[857][v585.ᐃⲆᐃ] = f54(f117(v1427 * 2.2, 0, ["#68622D", "#665329"]));
    ᐃᐃ[857][v585.ᐃⲆΔ] = f54(f117(v1427 * 2.2, 0, ["#0F3A24", "#083326"]));
    ᐃᐃ[432] = [];
    ᐃᐃ[432][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#A89F67", "#9E8456"]));
    ᐃᐃ[432][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#15514F", "#0F3F3D"]));
    ᐃᐃ[1060] = [];
    ᐃᐃ[1060][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#c67933", "#b17238"]));
    ᐃᐃ[1060][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[1260] = [];
    ᐃᐃ[1260][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#3a8214", "#4a9c1e"]));
    ᐃᐃ[1260][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#032d29", "#044640"]));
    ᐃᐃ[1086] = [];
    ᐃᐃ[1086][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ᐃᐃ[1086][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#1c6161", "#07413f"]));
    ᐃᐃ[1097] = [];
    ᐃᐃ[1097][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#328a56", "#449573"]));
    ᐃᐃ[1097][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[1228] = [];
    ᐃᐃ[1228][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#c98e2f", "#a36b11"]));
    ᐃᐃ[1228][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[1238] = [];
    ᐃᐃ[1238][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#b22419", "#99110e"]));
    ᐃᐃ[1238][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#04323c", "#03222b"]));
    ᐃᐃ[1743] = [];
    ᐃᐃ[1743][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#c98e2f", "#a36b11"]));
    ᐃᐃ[1743][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[1245] = [];
    ᐃᐃ[1245][v585.ᐃⲆᐃ] = f54(f155(v1427 * 0.8, 0, ["#13a56d", "#098a58"]));
    ᐃᐃ[1245][v585.ᐃⲆΔ] = f54(f155(v1427 * 0.8, 0, ["#043c37", "#032b23"]));
    ᐃᐃ[876] = f119(1, [{
      f: f117,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃᐃ[972] = f119(1, [{
      f: f146,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃᐃ[973] = f119(1, [{
      f: f273,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃᐃ[445] = f119(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃᐃ[206] = [];
    ᐃᐃ[206][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#7d613e", "#9e7e5a"]));
    ᐃᐃ[206][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#084442", "#125e5a"]));
    ᐃᐃ[225] = [];
    ᐃᐃ[225][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#9E8456", "#A89F67"]));
    ᐃᐃ[225][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ᐃᐃ[887] = [];
    ᐃᐃ[887][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#665329", "#68622D"]));
    ᐃᐃ[887][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#083326", "#0F3A24"]));
    ᐃᐃ[290] = [];
    ᐃᐃ[290][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#c67933", "#ec952d"]));
    ᐃᐃ[290][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃᐃ[320] = [];
    ᐃᐃ[320][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#375809", "#4b770e"]));
    ᐃᐃ[320][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#09542d", "#0d5d2f"]));
    ᐃᐃ[1261] = [];
    ᐃᐃ[1261][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#585809", "#72770e"]));
    ᐃᐃ[1261][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#295209", "#305d0d"]));
    ᐃᐃ[293] = [];
    ᐃᐃ[293][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#b9b094", "#e2d2c0"]));
    ᐃᐃ[293][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#126366", "#0d484b"]));
    ᐃᐃ[295] = [];
    ᐃᐃ[295][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#3f8662", "#30915d"]));
    ᐃᐃ[295][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃᐃ[1061] = [];
    ᐃᐃ[1061][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#c79153", "#dfa868"]));
    ᐃᐃ[1061][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#073927", "#075040"]));
    ᐃᐃ[1087] = [];
    ᐃᐃ[1087][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#768b5b", "#819984"]));
    ᐃᐃ[1087][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#0c4540", "#0e5153"]));
    ᐃᐃ[1098] = [];
    ᐃᐃ[1098][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#567465", "#627c6e"]));
    ᐃᐃ[1098][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#073927", "#075040"]));
    ᐃᐃ[314] = [];
    ᐃᐃ[314][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#996b3a", "#bf956b"]));
    ᐃᐃ[314][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃᐃ[1229] = [];
    ᐃᐃ[1229][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#7a634a", "#a68f77"]));
    ᐃᐃ[1229][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#1e4d43", "#113c32"]));
    ᐃᐃ[1744] = [];
    ᐃᐃ[1744][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#996b3a", "#bf956b"]));
    ᐃᐃ[1744][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#0e6553", "#094437"]));
    ᐃᐃ[1745] = [];
    ᐃᐃ[1745][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#7a634a", "#a68f77"]));
    ᐃᐃ[1745][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#1e4d43", "#113c32"]));
    ᐃᐃ[316] = [];
    ᐃᐃ[316][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#99403c", "#bc796c"]));
    ᐃᐃ[316][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#1e434d", "#11303c"]));
    ᐃᐃ[1239] = [];
    ᐃᐃ[1239][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#88504e", "#b3857c"]));
    ᐃᐃ[1239][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#253b41", "#162930"]));
    ᐃᐃ[318] = [];
    ᐃᐃ[318][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#0f8870", "#23af93"]));
    ᐃᐃ[318][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#032829", "#083233"]));
    ᐃᐃ[1246] = [];
    ᐃᐃ[1246][v585.ᐃⲆᐃ] = f54(f99(v1427 * 0.9, 0, ["#618a20", "#84a74e"]));
    ᐃᐃ[1246][v585.ᐃⲆΔ] = f54(f99(v1427 * 0.9, 0, ["#1f4632", "#335d47"]));
    ᐃᐃ[205] = [];
    ᐃᐃ[205][v585.ᐃⲆᐃ] = f54(f109(v1427 * 1.2, vVV63, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ᐃᐃ[205][v585.ᐃⲆΔ] = f54(f109(v1427 * 1.2, vVV63, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ᐃᐃ[264] = [];
    ᐃᐃ[264][v585.ᐃⲆᐃ] = f54(f198(v1427 * 1, vVVV6, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃᐃ[264][v585.ᐃⲆΔ] = f54(f198(v1427 * 1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃᐃ[267] = [];
    ᐃᐃ[267][v585.ᐃⲆᐃ] = f54(f170(v1427 * 1, vVV6, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃᐃ[267][v585.ᐃⲆΔ] = f54(f170(v1427 * 1, vV6, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃᐃ[213] = [];
    ᐃᐃ[213][v585.ᐃⲆᐃ] = f54(f177(v1427 * 1, vVVVV6232, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃᐃ[213][v585.ᐃⲆΔ] = f54(f177(v1427 * 1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃᐃ[265] = [];
    ᐃᐃ[265][v585.ᐃⲆᐃ] = f54(f177(v1427 * 1, vVV62, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃᐃ[265][v585.ᐃⲆΔ] = f54(f177(v1427 * 1, vVVVV6233, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃᐃ[266] = [];
    ᐃᐃ[266][v585.ᐃⲆᐃ] = f54(f187(v1427 * 1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃᐃ[266][v585.ᐃⲆΔ] = f54(f187(v1427 * 1, vVVV622, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃᐃ[262] = [];
    ᐃᐃ[262][v585.ᐃⲆᐃ] = f54(f158(v1427 * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃᐃ[262][v585.ᐃⲆΔ] = f54(f158(v1427 * 0.8, vVV63, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃᐃ[271] = [];
    ᐃᐃ[271][v585.ᐃⲆᐃ] = f54(f196(v1427 * 0.8, vVVVV6233, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃᐃ[271][v585.ᐃⲆΔ] = f54(f196(v1427 * 0.8, vVVVV63, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃᐃ[272] = [];
    ᐃᐃ[272][v585.ᐃⲆᐃ] = f54(f192(v1427 * 0.8, vVVV6, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃᐃ[272][v585.ᐃⲆΔ] = f54(f192(v1427 * 0.8, vVVV623, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃᐃ[270] = [];
    ᐃᐃ[270][v585.ᐃⲆᐃ] = f54(f178(v1427 * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃᐃ[270][v585.ᐃⲆΔ] = f54(f178(v1427 * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃᐃ[214] = [];
    ᐃᐃ[214][v585.ᐃⲆᐃ] = f54(f178(v1427 * 0.8, v6, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃᐃ[214][v585.ᐃⲆΔ] = f54(f178(v1427 * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃᐃ[268] = [];
    ᐃᐃ[268][v585.ᐃⲆᐃ] = f54(f185(v1427 * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ᐃᐃ[268][v585.ᐃⲆΔ] = f54(f185(v1427 * 1.5, vVVVVVV6232, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃᐃ[447] = [];
    ᐃᐃ[447][v585.ᐃⲆᐃ] = f54(f185(v1427 * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[447][v585.ᐃⲆΔ] = f54(f185(v1427 * 1, vVVV145, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ᐃᐃ[273] = [];
    ᐃᐃ[273][v585.ᐃⲆᐃ] = f54(f166(v1427 * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ᐃᐃ[273][v585.ᐃⲆΔ] = f54(f166(v1427 * 1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ᐃᐃ[484] = [];
    ᐃᐃ[484][v585.ᐃⲆᐃ] = f54(f166(v1427 * 1, vVV1422, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[484][v585.ᐃⲆΔ] = f54(f166(v1427 * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃᐃ[215] = [];
    ᐃᐃ[215][v585.ᐃⲆᐃ] = f54(f166(v1427 * 1.5, vVVVV6322, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃᐃ[215][v585.ᐃⲆΔ] = f54(f166(v1427 * 1.5, vVVV622, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃᐃ[638] = [];
    ᐃᐃ[638][v585.ᐃⲆᐃ] = f54(f166(v1427 * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[638][v585.ᐃⲆΔ] = f54(f166(v1427 * 1, vVV143, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃᐃ[274] = [];
    ᐃᐃ[274][v585.ᐃⲆᐃ] = f54(f165(v1427 * 1.5, vVVVV63, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ᐃᐃ[274][v585.ᐃⲆΔ] = f54(f165(v1427 * 1.5, vVVVV63, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ᐃᐃ[487] = [];
    ᐃᐃ[487][v585.ᐃⲆᐃ] = f54(f165(v1427 * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[487][v585.ᐃⲆΔ] = f54(f165(v1427 * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃᐃ[275] = [];
    ᐃᐃ[275][v585.ᐃⲆᐃ] = f54(f183(v1427 * 1.5, vVVVVV6232, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃᐃ[275][v585.ᐃⲆΔ] = f54(f183(v1427 * 1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃᐃ[490] = [];
    ᐃᐃ[490][v585.ᐃⲆᐃ] = f54(f183(v1427 * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃᐃ[490][v585.ᐃⲆΔ] = f54(f183(v1427 * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃᐃ[269] = [];
    ᐃᐃ[269][v585.ᐃⲆᐃ] = f54(f191(v1427 * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ᐃᐃ[269][v585.ᐃⲆΔ] = f54(f191(v1427 * 0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ᐃᐃ[910] = [];
    ᐃᐃ[910][v585.ᐃⲆᐃ] = f54(f283(v1427 * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ᐃᐃ[910][v585.ᐃⲆΔ] = f54(f283(v1427 * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ᐃᐃ[374] = [];
    ᐃᐃ[374][v585.ᐃⲆᐃ] = f54(f108(v1427 * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ᐃᐃ[374][v585.ᐃⲆΔ] = f54(f108(v1427 * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ᐃᐃ[370] = [];
    ᐃᐃ[370][v585.ᐃⲆᐃ] = f54(f91(Math.PI, f122(v1427 * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ᐃᐃ[370][v585.ᐃⲆΔ] = f54(f91(Math.PI, f122(v1427 * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ᐃᐃ[376] = f54(function (p1098, p1099) {
      var v1436 = document.createElement("canvas");
      var v1437 = v1436.getContext("2d");
      v1436.width = p1098 * 450;
      v1436.height = p1098 * 470;
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 226.5, p1098 * 91.546875);
      v1437.bezierCurveTo(p1098 * 254.5, p1098 * 115.546875, p1098 * 261.5, p1098 * 115.546875, p1098 * 294.5, p1098 * 109.546875);
      v1437.bezierCurveTo(p1098 * 299.5, p1098 * 141.546875, p1098 * 315.5, p1098 * 151.546875, p1098 * 344.5, p1098 * 158.546875);
      v1437.bezierCurveTo(p1098 * 330.5, p1098 * 195.546875, p1098 * 341.5, p1098 * 207.546875, p1098 * 361.5, p1098 * 226.546875);
      v1437.bezierCurveTo(p1098 * 331.5, p1098 * 251.546875, p1098 * 335.5, p1098 * 270.546875, p1098 * 342.5, p1098 * 295.546875);
      v1437.bezierCurveTo(p1098 * 300.5, p1098 * 296.546875, p1098 * 293.5, p1098 * 325.546875, p1098 * 292.5, p1098 * 344.546875);
      v1437.bezierCurveTo(p1098 * 257.5, p1098 * 326.546875, p1098 * 242.5, p1098 * 338.546875, p1098 * 224.5, p1098 * 361.546875);
      v1437.bezierCurveTo(p1098 * 200.5, p1098 * 329.546875, p1098 * 180.5, p1098 * 334.546875, p1098 * 155.5, p1098 * 341.546875);
      v1437.bezierCurveTo(p1098 * 146.5, p1098 * 307.546875, p1098 * 140.5, p1098 * 302.546875, p1098 * 107.5, p1098 * 292.546875);
      v1437.bezierCurveTo(p1098 * 117.5, p1098 * 253.546875, p1098 * 109.5, p1098 * 244.546875, p1098 * 89.5, p1098 * 224.546875);
      v1437.bezierCurveTo(p1098 * 118.5, p1098 * 191.546875, p1098 * 114.5, p1098 * 182.546875, p1098 * 108.5, p1098 * 156.546875);
      v1437.bezierCurveTo(p1098 * 143.5, p1098 * 149.546875, p1098 * 150.5, p1098 * 136.546875, p1098 * 157.5, p1098 * 106.546875);
      v1437.bezierCurveTo(p1098 * 202.5, p1098 * 120.546875, p1098 * 211.5, p1098 * 103.546875, p1098 * 228.5, p1098 * 91.546875);
      v1437.closePath();
      f88(v1437, vVVVVUndefined14, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 224.5, p1098 * 129.546875);
      v1437.bezierCurveTo(p1098 * 247.5, p1098 * 147.546875, p1098 * 252.5, p1098 * 143.546875, p1098 * 274.5, p1098 * 141.546875);
      v1437.bezierCurveTo(p1098 * 279.5, p1098 * 163.546875, p1098 * 289.5, p1098 * 168.546875, p1098 * 311.5, p1098 * 178.546875);
      v1437.bezierCurveTo(p1098 * 301.5, p1098 * 199.546875, p1098 * 307.5, p1098 * 213.546875, p1098 * 323.5, p1098 * 226.546875);
      v1437.bezierCurveTo(p1098 * 303.5, p1098 * 240.546875, p1098 * 303.5, p1098 * 255.546875, p1098 * 312.5, p1098 * 275.546875);
      v1437.bezierCurveTo(p1098 * 281.5, p1098 * 278.546875, p1098 * 276.5, p1098 * 291.546875, p1098 * 272.5, p1098 * 313.546875);
      v1437.bezierCurveTo(p1098 * 248.5, p1098 * 301.546875, p1098 * 239.5, p1098 * 310.546875, p1098 * 224.5, p1098 * 324.546875);
      v1437.bezierCurveTo(p1098 * 211.5, p1098 * 304.546875, p1098 * 199.5, p1098 * 301.546875, p1098 * 176.5, p1098 * 309.546875);
      v1437.bezierCurveTo(p1098 * 165.5, p1098 * 276.546875, p1098 * 159.5, p1098 * 275.546875, p1098 * 138.5, p1098 * 274.546875);
      v1437.bezierCurveTo(p1098 * 148.5, p1098 * 248.546875, p1098 * 140.5, p1098 * 237.546875, p1098 * 125.5, p1098 * 225.546875);
      v1437.bezierCurveTo(p1098 * 145.5, p1098 * 205.546875, p1098 * 146.5, p1098 * 195.546875, p1098 * 142.5, p1098 * 176.546875);
      v1437.bezierCurveTo(p1098 * 173.5, p1098 * 164.546875, p1098 * 173.5, p1098 * 155.546875, p1098 * 178.5, p1098 * 140.546875);
      v1437.bezierCurveTo(p1098 * 214.5, p1098 * 143.546875, p1098 * 214.5, p1098 * 135.546875, p1098 * 226.5, p1098 * 129.546875);
      v1437.closePath();
      f88(v1437, undefined, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 224.5, p1098 * 160.546875);
      v1437.bezierCurveTo(p1098 * 236.5, p1098 * 168.546875, p1098 * 239.5, p1098 * 168.546875, p1098 * 258.5, p1098 * 168.546875);
      v1437.bezierCurveTo(p1098 * 261.5, p1098 * 185.546875, p1098 * 268.5, p1098 * 187.546875, p1098 * 282.5, p1098 * 192.546875);
      v1437.bezierCurveTo(p1098 * 277.5, p1098 * 208.546875, p1098 * 283.5, p1098 * 216.546875, p1098 * 289.5, p1098 * 228.546875);
      v1437.bezierCurveTo(p1098 * 277.5, p1098 * 243.546875, p1098 * 280.5, p1098 * 253.546875, p1098 * 281.5, p1098 * 260.546875);
      v1437.bezierCurveTo(p1098 * 264.5, p1098 * 260.546875, p1098 * 259.5, p1098 * 269.546875, p1098 * 256.5, p1098 * 283.546875);
      v1437.bezierCurveTo(p1098 * 244.5, p1098 * 276.546875, p1098 * 232.5, p1098 * 283.546875, p1098 * 223.5, p1098 * 291.546875);
      v1437.bezierCurveTo(p1098 * 213.5, p1098 * 276.546875, p1098 * 205.5, p1098 * 278.546875, p1098 * 190.5, p1098 * 281.546875);
      v1437.bezierCurveTo(p1098 * 181.5, p1098 * 262.546875, p1098 * 173.5, p1098 * 259.546875, p1098 * 165.5, p1098 * 258.546875);
      v1437.bezierCurveTo(p1098 * 169.5, p1098 * 239.546875, p1098 * 167.5, p1098 * 233.546875, p1098 * 157.5, p1098 * 225.546875);
      v1437.bezierCurveTo(p1098 * 169.5, p1098 * 208.546875, p1098 * 170.5, p1098 * 203.546875, p1098 * 168.5, p1098 * 192.546875);
      v1437.bezierCurveTo(p1098 * 181.5, p1098 * 187.546875, p1098 * 188.5, p1098 * 179.546875, p1098 * 192.5, p1098 * 168.546875);
      v1437.bezierCurveTo(p1098 * 216.5, p1098 * 170.546875, p1098 * 218.5, p1098 * 163.546875, p1098 * 225.5, p1098 * 160.546875);
      v1437.closePath();
      f88(v1437, vVVVUndefined58, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 205.5, p1098 * 194.546875);
      v1437.bezierCurveTo(p1098 * 216.5, p1098 * 192.546875, p1098 * 219.5, p1098 * 191.546875, p1098 * 225.5, p1098 * 185.546875);
      v1437.bezierCurveTo(p1098 * 232.5, p1098 * 193.546875, p1098 * 237.5, p1098 * 191.546875, p1098 * 246.5, p1098 * 192.546875);
      v1437.bezierCurveTo(p1098 * 249.5, p1098 * 202.546875, p1098 * 253.5, p1098 * 205.546875, p1098 * 258.5, p1098 * 207.546875);
      v1437.bezierCurveTo(p1098 * 259.5, p1098 * 222.546875, p1098 * 256.5, p1098 * 223.546875, p1098 * 265.5, p1098 * 226.546875);
      v1437.bezierCurveTo(p1098 * 256.5, p1098 * 231.546875, p1098 * 255.5, p1098 * 241.546875, p1098 * 259.5, p1098 * 248.546875);
      v1437.bezierCurveTo(p1098 * 250.5, p1098 * 245.546875, p1098 * 245.5, p1098 * 252.546875, p1098 * 243.5, p1098 * 260.546875);
      v1437.bezierCurveTo(p1098 * 234.5, p1098 * 256.546875, p1098 * 229.5, p1098 * 258.546875, p1098 * 223.5, p1098 * 265.546875);
      v1437.bezierCurveTo(p1098 * 218.5, p1098 * 255.546875, p1098 * 213.5, p1098 * 257.546875, p1098 * 204.5, p1098 * 261.546875);
      v1437.bezierCurveTo(p1098 * 203.5, p1098 * 251.546875, p1098 * 198.5, p1098 * 248.546875, p1098 * 189.5, p1098 * 244.546875);
      v1437.bezierCurveTo(p1098 * 194.5, p1098 * 237.546875, p1098 * 192.5, p1098 * 231.546875, p1098 * 184.5, p1098 * 225.546875);
      v1437.bezierCurveTo(p1098 * 191.5, p1098 * 211.546875, p1098 * 192.5, p1098 * 209.546875, p1098 * 190.5, p1098 * 204.546875);
      v1437.bezierCurveTo(p1098 * 200.5, p1098 * 204.546875, p1098 * 204.5, p1098 * 198.546875, p1098 * 207.5, p1098 * 194.546875);
      v1437.closePath();
      f88(v1437, undefined, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 149.5, p1098 * 93.546875);
      v1437.bezierCurveTo(p1098 * 287.5, p1098 * 332.546875, p1098 * 226, p1098 * 225.546875, p1098 * 302.5, p1098 * 357.546875);
      v1437.closePath();
      f88(v1437, vVVVVVUndefined1422, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 224.5, p1098 * 66.546875);
      v1437.bezierCurveTo(p1098 * 224.5, p1098 * 223.546875, p1098 * 224.5, p1098 * 223.546875, p1098 * 224.5, p1098 * 380.546875);
      v1437.closePath();
      f88(v1437, vVVVVVUndefined1422, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 302.5, p1098 * 88.546875);
      v1437.bezierCurveTo(p1098 * 222.5, p1098 * 227.546875, p1098 * 222.5, p1098 * 227.546875, p1098 * 142.5, p1098 * 366.546875);
      v1437.closePath();
      f88(v1437, undefined, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 361.5, p1098 * 147.546875);
      v1437.bezierCurveTo(p1098 * 223, p1098 * 226.546875, p1098 * 223, p1098 * 226.546875, p1098 * 84.5, p1098 * 305.546875);
      v1437.closePath();
      f88(v1437, vVVVVUndefined583, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 379.5, p1098 * 225.546875);
      v1437.bezierCurveTo(p1098 * 221, p1098 * 225.546875, p1098 * 221, p1098 * 225.546875, p1098 * 62.5, p1098 * 225.546875);
      v1437.closePath();
      f88(v1437, undefined, p1099[0], 4);
      v1437.beginPath();
      v1437.lineCap = "round";
      v1437.lineJoin = "round";
      v1437.moveTo(p1098 * 90.5, p1098 * 147.546875);
      v1437.bezierCurveTo(p1098 * 226.5, p1098 * 226.546875, p1098 * 226.5, p1098 * 226.546875, p1098 * 362.5, p1098 * 305.546875);
      v1437.closePath();
      f88(v1437, vVVVVUndefined14, p1099[0], 4);
      return v1436;
    }(v1427 * 0.6, ["#FFFFFF"]));
    ᐃᐃ[410] = [];
    ᐃᐃ[410][v585.ᐃⲆᐃ] = f54(f118(v1427 * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ᐃᐃ[410][v585.ᐃⲆΔ] = f54(f118(v1427 * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ᐃᐃ[10] = [];
    ᐃᐃ[10][v585.ᐃⲆᐃ] = f54(f200(v1427 * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ᐃᐃ[10][v585.ᐃⲆΔ] = f54(f200(v1427 * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ᐃᐃ[11] = [];
    ᐃᐃ[11][v585.ᐃⲆᐃ] = f54(f160(v1427 * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ᐃᐃ[11][v585.ᐃⲆΔ] = f54(f160(v1427 * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ᐃᐃ[67] = [];
    ᐃᐃ[67][v585.ᐃⲆᐃ] = f54(f194(v1427 * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ᐃᐃ[67][v585.ᐃⲆΔ] = f54(f194(v1427 * 0.63, vVVV624, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ᐃᐃ[68] = [];
    ᐃᐃ[68][v585.ᐃⲆᐃ] = f54(f126(v1427 * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ᐃᐃ[68][v585.ᐃⲆΔ] = f54(f126(v1427 * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ᐃᐃ[69] = [];
    ᐃᐃ[69][v585.ᐃⲆᐃ] = f54(f144(v1427 * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ᐃᐃ[69][v585.ᐃⲆΔ] = f54(f144(v1427 * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ᐃᐃ[965] = [];
    ᐃᐃ[965][v585.ᐃⲆᐃ] = f54(f267(v1427 * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ᐃᐃ[965][v585.ᐃⲆΔ] = f54(f267(v1427 * 0.42, vVVV6, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ᐃᐃ[969] = [];
    ᐃᐃ[969][v585.ᐃⲆᐃ] = f54(f279(v1427 * 0.9, ["#e4c027"]));
    ᐃᐃ[969][v585.ᐃⲆΔ] = f54(f279(v1427 * 0.9, ["#D8E57F"]));
    ᐃᐃ[237] = [];
    ᐃᐃ[237][v585.ᐃⲆᐃ] = f54(f269(v1427 * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ᐃᐃ[237][v585.ᐃⲆΔ] = f54(f269(v1427 * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ᐃᐃ[971] = f54(function (p1100, p1101) {
      var v1438 = document.createElement("canvas");
      var v1439 = v1438.getContext("2d");
      v1438.width = p1100 * 149;
      v1438.height = p1100 * 356;
      v1439.save();
      v1439.translate(p1100 * 74.5, p1100 * 177.5);
      f86(v1439, p1100 * -57.5, p1100 * -161.5, p1100 * 100, p1100 * 323, p1100 * 10);
      v1439.restore();
      f88(v1439, p1101[0], p1101[1], p1100 * 4);
      v1439.save();
      v1439.translate(p1100 * 74.5, p1100 * 177.5);
      f86(v1439, p1100 * -57.5, p1100 * 50.5, p1100 * 100, p1100 * 105, p1100 * 10);
      v1439.restore();
      f88(v1439, p1101[6], p1101[1], p1100 * 4);
      v1439.beginPath();
      v1439.lineCap = "round";
      v1439.lineJoin = "round";
      v1439.moveTo(p1100 * 16, p1100 * 125);
      v1439.bezierCurveTo(p1100 * 74.5, p1100 * 125, p1100 * 118, p1100 * 125, p1100 * 118, p1100 * 125);
      v1439.closePath();
      f88(v1439, p1101[2], p1101[2], p1100 * 10);
      v1439.beginPath();
      v1439.lineCap = "round";
      v1439.lineJoin = "round";
      v1439.moveTo(p1100 * 16, p1100 * 120);
      v1439.bezierCurveTo(p1100 * 74.5, p1100 * 120, p1100 * 74.5, p1100 * 120, p1100 * 118, p1100 * 120);
      v1439.closePath();
      f88(v1439, p1101[3], p1101[3], p1100 * 10);
      v1439.beginPath();
      v1439.lineCap = "round";
      v1439.lineJoin = "round";
      v1439.moveTo(p1100 * 16, p1100 * 228);
      v1439.bezierCurveTo(p1100 * 75, p1100 * 228.5, p1100 * 118, p1100 * 228.5, p1100 * 118, p1100 * 229);
      v1439.closePath();
      f88(v1439, p1101[2], p1101[2], p1100 * 10);
      v1439.beginPath();
      v1439.lineCap = "round";
      v1439.lineJoin = "round";
      v1439.moveTo(p1100 * 16, p1100 * 224);
      v1439.bezierCurveTo(p1100 * 75, p1100 * 224, p1100 * 118, p1100 * 224, p1100 * 118, p1100 * 224);
      v1439.closePath();
      f88(v1439, p1101[3], p1101[3], p1100 * 10);
      v1439.save();
      v1439.translate(p1100 * 72, p1100 * 68.5);
      f86(v1439, p1100 * -41.5, p1100 * -36.5, p1100 * 73, p1100 * 73, p1100 * 13);
      v1439.restore();
      f88(v1439, p1101[4]);
      v1439.save();
      v1439.translate(p1100 * 72, p1100 * 175.5);
      f86(v1439, p1100 * -41.5, p1100 * -38.5, p1100 * 73, p1100 * 73, p1100 * 13);
      v1439.restore();
      f88(v1439, p1101[4]);
      v1439.save();
      v1439.translate(p1100 * 72, p1100 * 279.5);
      f86(v1439, p1100 * -41.5, p1100 * -40.5, p1100 * 73, p1100 * 73, p1100 * 13);
      v1439.restore();
      f88(v1439, p1101[4]);
      v1439.beginPath();
      v1439.lineCap = "round";
      v1439.lineJoin = "round";
      v1439.moveTo(p1100 * 16, p1100 * 338);
      v1439.bezierCurveTo(p1100 * 75, p1100 * 338, p1100 * 118, p1100 * 338, p1100 * 118, p1100 * 338);
      v1439.closePath();
      f88(v1439, p1101[2], p1101[2], p1100 * 10);
      v1439.beginPath();
      v1439.lineCap = "round";
      v1439.lineJoin = "round";
      v1439.moveTo(p1100 * 16, p1100 * 333);
      v1439.bezierCurveTo(p1100 * 75, p1100 * 333, p1100 * 118, p1100 * 333, p1100 * 118, p1100 * 333);
      v1439.closePath();
      f88(v1439, p1101[3], p1101[3], p1100 * 10);
      return v1438;
    }(v1427 * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ᐃᐃ[518] = [];
    ᐃᐃ[518][v585.ᐃⲆᐃ] = f54(f164(v1427 * 0.5, vVVVV632, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ᐃᐃ[518][v585.ᐃⲆΔ] = f54(f164(v1427 * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ᐃᐃ[210] = [];
    ᐃᐃ[210][v585.ᐃⲆᐃ] = f54(f167(v1427 * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ᐃᐃ[210][v585.ᐃⲆΔ] = f54(f167(v1427 * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ᐃᐃ[522] = f54(function (p1102, p1103, p1104) {
      var v1440 = document.createElement("canvas");
      var v1441 = v1440.getContext("2d");
      v1440.width = p1102 * 118;
      v1440.height = p1102 * 129;
      v1441.save();
      v1441.translate(p1102 * 90, p1102 * 90);
      f86(v1441, p1102 * -86.5, p1102 * -86, p1102 * 110, p1102 * 110, p1102 * 15);
      v1441.restore();
      f88(v1441, p1104[0], p1104[1], 4);
      return v1440;
    }(v1427 * 0.8, 0, ["#5f6061", "#939393"]));
    ᐃᐃ[523] = f119(1, [{
      f: f146,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ᐃᐃ[300] = [];
    ᐃᐃ[300][v585.ᐃⲆᐃ] = f54(f175(v1427 * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃᐃ[300][v585.ᐃⲆΔ] = f54(f175(v1427 * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃᐃ[1189] = [];
    ᐃᐃ[1189][v585.ᐃⲆᐃ] = f54(f188(v1427 * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃᐃ[1189][v585.ᐃⲆΔ] = f54(f188(v1427 * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃᐃ[18] = [];
    ᐃᐃ[18][v585.ᐃⲆᐃ] = f54(f91(3, f204(v1427 * 0.7, vVVVV632, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ᐃᐃ[18][v585.ᐃⲆΔ] = f54(f91(3, f204(v1427 * 0.7, vVVVVV6232, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ᐃᐃ[12] = [];
    ᐃᐃ[12][v585.ᐃⲆᐃ] = f54(f91(3, f168(v1427 * 0.7, v6, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ᐃᐃ[12][v585.ᐃⲆΔ] = f54(f91(3, f168(v1427 * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ᐃᐃ[13] = [];
    ᐃᐃ[13][v585.ᐃⲆᐃ] = f54(f91(3, f180(v1427 * 0.65, vVVVV6232, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ᐃᐃ[13][v585.ᐃⲆΔ] = f54(f91(3, f180(v1427 * 0.65, vVVV623, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ᐃᐃ[14] = [];
    ᐃᐃ[14][v585.ᐃⲆᐃ] = f54(f91(3, f161(v1427 * 0.67, vVVVVVV6232, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ᐃᐃ[14][v585.ᐃⲆΔ] = f54(f91(3, f161(v1427 * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ᐃᐃ[15] = [];
    ᐃᐃ[15][v585.ᐃⲆᐃ] = f54(f91(3, f176(v1427 * 0.67, v6, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ᐃᐃ[15][v585.ᐃⲆΔ] = f54(f91(3, f176(v1427 * 0.67, vVVV622, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ᐃᐃ[60] = [];
    ᐃᐃ[60][v585.ᐃⲆᐃ] = f54(f91(3, f179(v1427 * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ᐃᐃ[60][v585.ᐃⲆΔ] = f54(f91(3, f179(v1427 * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ᐃᐃ[16] = [];
    ᐃᐃ[16][v585.ᐃⲆᐃ] = f54(f91(3, f201(v1427 * 1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ᐃᐃ[16][v585.ᐃⲆΔ] = f54(f91(3, f201(v1427 * 1, vV6, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ᐃᐃ[62] = [];
    ᐃᐃ[62][v585.ᐃⲆᐃ] = f54(f91(3, f207(v1427 * 1, vVVVV6322, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃᐃ[62][v585.ᐃⲆΔ] = f54(f91(3, f207(v1427 * 1, vVVVVV6232, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ᐃᐃ[101] = [];
    ᐃᐃ[101][v585.ᐃⲆᐃ] = f54(f91(3, f253(v1427 * 0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    ᐃᐃ[101][v585.ᐃⲆΔ] = f54(f91(3, f253(v1427 * 0.5, true, ["#030d14", "#485e66", "#1f343f"])));
    ᐃᐃ[72] = [];
    ᐃᐃ[72][v585.ᐃⲆᐃ] = f54(f91(3, f276(v1427 * 1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ᐃᐃ[72][v585.ᐃⲆΔ] = f54(f91(3, f276(v1427 * 1, vVVV63, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ᐃᐃ[63] = [];
    ᐃᐃ[63][v585.ᐃⲆᐃ] = f54(f91(3, f207(v1427 * 1, vVVVV623, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃᐃ[63][v585.ᐃⲆΔ] = f54(f91(3, f207(v1427 * 1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ᐃᐃ[64] = [];
    ᐃᐃ[64][v585.ᐃⲆᐃ] = f54(f91(3, f207(v1427 * 1, vVV6, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃᐃ[64][v585.ᐃⲆΔ] = f54(f91(3, f207(v1427 * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃᐃ[65] = [];
    ᐃᐃ[65][v585.ᐃⲆᐃ] = f54(f91(3, f207(v1427 * 1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃᐃ[65][v585.ᐃⲆΔ] = f54(f91(3, f207(v1427 * 1, vV6, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃᐃ[241] = [];
    ᐃᐃ[241][v585.ᐃⲆᐃ] = f54(f275(v1427 * 0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ᐃᐃ[241][v585.ᐃⲆΔ] = f54(f275(v1427 * 0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ᐃᐃ[674] = [];
    ᐃᐃ[674].push(f54(f275(v1427 * 0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ᐃᐃ[674].push(f54(f275(v1427 * 0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ᐃᐃ[674].push(f54(f275(v1427 * 0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ᐃᐃ[676] = [];
    ᐃᐃ[676].push(ᐃᐃ[674][0]);
    ᐃᐃ[676].push(ᐃᐃ[674][0]);
    ᐃᐃ[676].push(ᐃᐃ[674][0]);
    ᐃᐃ[260] = [];
    ᐃᐃ[260][v585.ᐃⲆᐃ] = f54(f233(v1427 * 0.06, vVVV143, ["#141414", "#c4a23a", "#816511"]));
    ᐃᐃ[260][v585.ᐃⲆΔ] = f54(f233(v1427 * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
    ᐃᐃ[673] = [];
    ᐃᐃ[673].push(f54(f233(v1427 * 0.08, vVV142, ["#141414", "#c4a23a", "#816511"])));
    ᐃᐃ[673].push(f54(f233(v1427 * 0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
    ᐃᐃ[673].push(f54(f233(v1427 * 0.08, false, ["#141414", "#b0902e", "#634d09"])));
    ᐃᐃ[242] = f119(1.5, [{
      f: f231,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃᐃ[664] = [];
    ᐃᐃ[664][v585.ᐃⲆᐃ] = f54(f272(v1427 * 0.8, 0, ["#347f93", "#54a4ba"]));
    ᐃᐃ[664][v585.ᐃⲆΔ] = f54(f272(v1427 * 0.8, 0, ["#98ede3", "#94f2e7"]));
    ᐃᐃ[665] = [];
    ᐃᐃ[665][v585.ᐃⲆᐃ] = f54(f259(v1427 * 0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ᐃᐃ[665][v585.ᐃⲆΔ] = f54(f259(v1427 * 0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ᐃᐃ[666] = [];
    ᐃᐃ[666][v585.ᐃⲆᐃ] = f54(f284(v1427 * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ᐃᐃ[666][v585.ᐃⲆΔ] = f54(f284(v1427 * 0.8, 0, ["#83ddd4", "#485e66"]));
    ᐃᐃ[244] = [];
    ᐃᐃ[244][v585.ᐃⲆᐃ] = f54(f241(v1427 * 0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ᐃᐃ[244][v585.ᐃⲆΔ] = f54(f241(v1427 * 0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ᐃᐃ[1547] = [];
    ᐃᐃ[1547][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⲆΔᐃⵠΔ;
    ᐃᐃ[1547][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔΔⲆᐃⲆⲆ;
    ᐃᐃ[1548] = [];
    ᐃᐃ[1548][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃΔΔⲆⲆ;
    ᐃᐃ[1548][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠΔΔᐃᐃⲆ;
    ᐃᐃ[1549] = [];
    ᐃᐃ[1549][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠᐃⲆᐃᐃᐃ;
    ᐃᐃ[1549][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃᐃᐃΔⲆⲆ;
    ᐃᐃ[245] = [];
    ᐃᐃ[245][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔᐃⵠᐃΔᐃ;
    ᐃᐃ[245][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔΔᐃⵠⲆⵠ;
    ᐃᐃ[1553] = [];
    ᐃᐃ[1553][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔᐃⲆΔⲆΔ;
    ᐃᐃ[1553][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⵠⵠⲆΔΔ;
    ᐃᐃ[246] = [];
    ᐃᐃ[246][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⲆⲆⲆⲆᐃ;
    ᐃᐃ[246][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠΔⲆΔⵠΔ;
    ᐃᐃ[1557] = [];
    ᐃᐃ[1557][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⲆᐃΔⵠᐃ;
    ᐃᐃ[1557][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆΔΔⲆΔⲆ;
    ᐃᐃ[247] = [];
    ᐃᐃ[247][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠᐃⲆⲆΔᐃ;
    ᐃᐃ[247][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⲆᐃᐃΔᐃ;
    ᐃᐃ[1561] = [];
    ᐃᐃ[1561][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⵠΔⲆⲆΔ;
    ᐃᐃ[1561][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠΔΔⲆⵠΔ;
    ᐃᐃ[248] = [];
    ᐃᐃ[248][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⲆΔⵠᐃⲆ;
    ᐃᐃ[248][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⲆⲆⵠⲆᐃ;
    ᐃᐃ[1565] = [];
    ᐃᐃ[1565][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆⲆⲆⵠⲆⲆ;
    ᐃᐃ[1565][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⲆⲆᐃΔΔ;
    ᐃᐃ[249] = [];
    ᐃᐃ[249][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⵠᐃΔΔΔ;
    ᐃᐃ[249][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⵠΔΔΔΔ;
    ᐃᐃ[1569] = [];
    ᐃᐃ[1569][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆⲆⵠΔΔΔ;
    ᐃᐃ[1569][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃΔΔⲆΔⵠ;
    ᐃᐃ[250] = [];
    ᐃᐃ[250][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆΔⵠΔⲆΔ;
    ᐃᐃ[250][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⲆΔᐃⲆⵠ;
    ᐃᐃ[1573] = [];
    ᐃᐃ[1573][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔΔⲆᐃⲆΔ;
    ᐃᐃ[1573][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠΔᐃⲆΔⵠ;
    ᐃᐃ[251] = [];
    ᐃᐃ[251][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⲆΔⲆΔⲆ;
    ᐃᐃ[251][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⲆⲆⵠⲆΔ;
    ᐃᐃ[1577] = [];
    ᐃᐃ[1577][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃⵠᐃⵠⲆ;
    ᐃᐃ[1577][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⵠⲆⵠⲆⲆ;
    ᐃᐃ[252] = [];
    ᐃᐃ[252][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⵠⵠΔᐃΔ;
    ᐃᐃ[252][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⲆΔⲆⲆΔ;
    ᐃᐃ[1581] = [];
    ᐃᐃ[1581][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔⵠⲆⲆⲆΔ;
    ᐃᐃ[1581][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃᐃⲆⵠⵠⲆ;
    ᐃᐃ[253] = [];
    ᐃᐃ[253][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠΔΔⵠΔΔ;
    ᐃᐃ[253][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠᐃⲆᐃⲆᐃ;
    ᐃᐃ[1585] = [];
    ᐃᐃ[1585][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃᐃᐃⲆᐃⲆ;
    ᐃᐃ[1585][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃΔΔΔⵠᐃ;
    ᐃᐃ[254] = [];
    ᐃᐃ[254][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⵠᐃⵠΔⲆ;
    ᐃᐃ[254][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠΔⵠᐃΔⵠ;
    ᐃᐃ[1589] = [];
    ᐃᐃ[1589][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃΔΔΔΔᐃ;
    ᐃᐃ[1589][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃΔⲆΔΔⲆ;
    ᐃᐃ[255] = [];
    ᐃᐃ[255][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⵠⵠΔΔᐃ;
    ᐃᐃ[255][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⲆΔᐃⲆⲆ;
    ᐃᐃ[1593] = [];
    ᐃᐃ[1593][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃⵠΔⲆᐃⵠ;
    ᐃᐃ[1593][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⵠⵠᐃᐃΔ;
    ᐃᐃ[256] = [];
    ᐃᐃ[256][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⲆᐃᐃⵠⵠ;
    ᐃᐃ[256][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⲆⵠᐃΔᐃ;
    ᐃᐃ[1597] = [];
    ᐃᐃ[1597][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠΔᐃᐃⵠⲆ;
    ᐃᐃ[1597][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⲆⲆᐃⵠᐃ;
    ᐃᐃ[257] = [];
    ᐃᐃ[257][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆΔⵠᐃΔᐃ;
    ᐃᐃ[257][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⲆΔᐃΔΔ;
    ᐃᐃ[1601] = [];
    ᐃᐃ[1601][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃΔⵠⲆΔⲆ;
    ᐃᐃ[1601][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠᐃⲆΔⵠᐃ;
    ᐃᐃ[258] = [];
    ᐃᐃ[258][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃⵠΔΔⲆ;
    ᐃᐃ[258][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆΔΔⵠΔⵠ;
    ᐃᐃ[1605] = [];
    ᐃᐃ[1605][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃΔⲆΔⲆⲆ;
    ᐃᐃ[1605][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⲆΔᐃΔᐃ;
    ᐃᐃ[259] = [];
    ᐃᐃ[259][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆᐃⵠΔᐃᐃ;
    ᐃᐃ[259][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⲆⲆⲆⵠⲆ;
    ᐃᐃ[355] = [];
    ᐃᐃ[355][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆⵠⵠⵠΔⵠ;
    ᐃᐃ[355][v585.ᐃⲆΔ] = ⵠᐃ.ⵠᐃᐃᐃΔΔΔ;
    ᐃᐃ[356] = ⵠᐃ.ⲆⵠⲆⵠⵠⵠⵠ;
    ᐃᐃ[1755] = [];
    ᐃᐃ[1755][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1755][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1755][v585.ᐃⲆᐃ].push(ⵠᐃ.Δⵠⵠᐃᐃⵠᐃ);
    ᐃᐃ[1755][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠΔᐃⲆᐃΔⵠ);
    ᐃᐃ[1755][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⲆᐃⵠⲆᐃⵠ);
    ᐃᐃ[1755][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃⲆⵠⲆⵠᐃ);
    ᐃᐃ[1755][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⲆⵠⲆᐃⵠⵠ);
    ᐃᐃ[1755][v585.ᐃⲆΔ].push(ⵠᐃ.ΔᐃⵠᐃⵠⲆⵠ);
    ᐃᐃ[1755][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆΔᐃⲆⵠⲆΔ);
    ᐃᐃ[1755][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃΔⵠΔⵠΔⵠ);
    ᐃᐃ[1755][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠΔᐃᐃⲆⵠ);
    ᐃᐃ[1755][v585.ᐃⲆΔ].push(ⵠᐃ.ΔᐃⲆᐃⲆᐃᐃ);
    ᐃᐃ[1757] = [];
    ᐃᐃ[1757][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1757][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1757][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃΔᐃΔⲆΔΔ);
    ᐃᐃ[1757][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠᐃΔᐃΔⲆⵠ);
    ᐃᐃ[1757][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠΔⲆᐃⲆⵠᐃ);
    ᐃᐃ[1757][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃΔᐃⵠⲆⲆⲆ);
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ] = [];
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆΔ] = [];
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⲆᐃᐃᐃⲆⵠ);
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔⲆᐃΔΔΔ);
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠΔⵠⵠⲆⵠⵠ);
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆᐃⲆⲆⵠⵠᐃ);
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠⵠⲆⲆⲆⵠ);
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠΔⲆΔΔᐃ);
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠⲆⵠⵠⲆΔ);
    ᐃᐃ[v585.ⵠᐃⲆⵠᐃⵠⲆ][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆᐃⵠᐃᐃⲆⲆ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ] = [];
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆΔ] = [];
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⲆᐃΔⵠⲆⲆ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠⲆⲆᐃᐃⵠⵠ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃⵠᐃΔᐃΔ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃⵠⲆΔΔΔ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠⵠᐃⵠΔΔⲆ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔΔⵠⲆΔⵠ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⲆᐃⵠΔⵠᐃ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ΔΔΔⵠⵠΔᐃ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ΔⵠⵠⵠⲆⵠⵠ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃᐃⵠΔᐃΔⵠ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃⵠᐃᐃᐃⲆⵠ);
    ᐃᐃ[v585.ⲆⲆⵠΔᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆΔⲆΔⲆⵠⵠ);
    ᐃᐃ[1756] = [];
    ᐃᐃ[1756][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1756][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1756][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⲆⵠΔⵠⵠΔ);
    ᐃᐃ[1756][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔⵠⲆⲆⲆᐃ);
    ᐃᐃ[1756][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⵠⵠᐃΔⵠᐃ);
    ᐃᐃ[1756][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆᐃⵠⲆⵠⵠΔ);
    ᐃᐃ[1756][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠΔⲆⵠΔᐃⲆ);
    ᐃᐃ[1756][v585.ᐃⲆΔ].push(ⵠᐃ.ΔⵠᐃⵠⲆⲆΔ);
    ᐃᐃ[261] = [];
    ᐃᐃ[261][v585.ᐃⲆᐃ] = f54(f278(v1427 * 0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ᐃᐃ[261][v585.ᐃⲆΔ] = f54(f278(v1427 * 0.75, vVVVV623, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ᐃᐃ[723] = f54(f254(v1427 * 0.3, ["#092813", "#1f773d"], 0));
    ᐃᐃ[724] = f54(f254(v1427 * 0.3, ["#092813", "#1f773d"], 1));
    ᐃᐃ[1161] = f54(function (p1105, p1106) {
      var v1442 = document.createElement("canvas");
      var v1443 = v1442.getContext("2d");
      v1442.width = p1105 * 60;
      v1442.height = p1105 * 60;
      v1443.translate(p1105 * -25, p1105 * -25);
      v1443.translate(0, p1105 * 5);
      v1443.beginPath();
      v1443.lineCap = "round";
      v1443.lineJoin = "round";
      v1443.moveTo(p1105 * 24, p1105 * 50);
      v1443.bezierCurveTo(p1105 * 32.5, p1105 * 54.5, p1105 * 32.5, p1105 * 54.5, p1105 * 41, p1105 * 59);
      v1443.bezierCurveTo(p1105 * 57, p1105 * 47, p1105 * 57, p1105 * 47, p1105 * 73, p1105 * 35);
      v1443.bezierCurveTo(p1105 * 57, p1105 * 53, p1105 * 57, p1105 * 53, p1105 * 41, p1105 * 71);
      v1443.closePath();
      f88(v1443, p1106[0]);
      v1443.translate(0, p1105 * -5);
      v1443.beginPath();
      v1443.lineCap = "round";
      v1443.lineJoin = "round";
      v1443.moveTo(p1105 * 24, p1105 * 50);
      v1443.bezierCurveTo(p1105 * 32.5, p1105 * 54.5, p1105 * 32.5, p1105 * 54.5, p1105 * 41, p1105 * 59);
      v1443.bezierCurveTo(p1105 * 57, p1105 * 47, p1105 * 57, p1105 * 47, p1105 * 73, p1105 * 35);
      v1443.bezierCurveTo(p1105 * 57, p1105 * 53, p1105 * 57, p1105 * 53, p1105 * 41, p1105 * 71);
      v1443.closePath();
      f88(v1443, p1106[1]);
      return v1442;
    }(v1427 * 0.6, ["#092813", "#1f773d"]));
    ᐃᐃ[721] = [];
    ᐃᐃ[721].push(f54(f235(v1427 * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ᐃᐃ[721].push(f54(f235(v1427 * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ᐃᐃ[721].push(f54(f235(v1427 * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ᐃᐃ[725] = [];
    var vF54 = f54(f235(v1427 * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ᐃᐃ[725].push(vF54);
    ᐃᐃ[725].push(vF54);
    ᐃᐃ[725].push(vF54);
    ᐃᐃ[722] = [];
    ᐃᐃ[722].push(f54(f235(v1427 * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ᐃᐃ[722].push(f54(f235(v1427 * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ᐃᐃ[722].push(f54(f235(v1427 * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ᐃᐃ[900] = f54(function (p1107, p1108) {
      var v1444 = document.createElement("canvas");
      var v1445 = v1444.getContext("2d");
      var v1446 = p1107 * 170;
      var v1447 = p1107 * 172;
      var v1448 = v1446 / 2;
      var v1449 = v1447 / 2;
      v1444.width = v1446;
      v1444.height = v1447;
      v1445.translate(v1448, v1449);
      v1445.save();
      for (var v1450 = 0; v1450 < 10; v1450++) {
        v1445.rotate(Math.PI / 5);
        v1445.save();
        v1445.translate(p1107 * 65, 0);
        f89(v1445, 3, p1107 * 18, p1107 * 4);
        f88(v1445, p1108[0]);
        v1445.restore();
      }
      v1445.restore();
      f92(v1445, 0, 0, p1107 * 40);
      f88(v1445, vVVVVUndefined583, p1108[0], p1107 * 6);
      f92(v1445, 0, 0, p1107 * 20);
      f88(v1445, p1108[0]);
      return v1444;
    }(v1427 * 0.3, ["#FFFFFF"]));
    ᐃᐃ[1043] = f54(function (p1109, p1110) {
      var v1451 = document.createElement("canvas");
      var v1452 = v1451.getContext("2d");
      var v1453 = p1109 * 130;
      var v1454 = p1109 * 142;
      var v1455 = v1453 / 2;
      var v1456 = v1454 / 2;
      v1451.width = v1453;
      v1451.height = v1454;
      f92(v1452, v1455, v1456, p1109 * 40);
      f88(v1452, undefined, p1110[0], p1109 * 7);
      f92(v1452, v1455, v1456, p1109 * 30);
      f88(v1452, vVVVVUndefined583, p1110[0], p1109 * 7);
      f92(v1452, v1455, v1456, p1109 * 20);
      f88(v1452, p1110[0]);
      return v1451;
    }(v1427 * 0.3, ["#FFFFFF"]));
    ᐃᐃ[727] = f54(f254(v1427 * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ᐃᐃ[886] = f54(f91(Math.PI / 5, function (p1111, p1112) {
      var v1457 = document.createElement("canvas");
      var v1458 = v1457.getContext("2d");
      v1457.width = p1111 * 316;
      v1457.height = p1111 * 365;
      v1458.save();
      v1458.translate(p1111 * 156.07142639160156, p1111 * 51.81248474121094);
      v1458.rotate(0);
      f86(v1458, p1111 * -21.5, p1111 * -34, p1111 * 43, p1111 * 68, p1111 * 8);
      v1458.restore();
      f88(v1458, p1112[0], p1112[0], p1111 * 15);
      v1458.beginPath();
      v1458.lineCap = "round";
      v1458.lineJoin = "round";
      v1458.moveTo(p1111 * 126.57142639160156, p1111 * 67.38392639160156);
      v1458.bezierCurveTo(p1111 * 126.57142639160156, p1111 * 57.38392639160156, p1111 * 132.57142639160156, p1111 * 54.38392639160156, p1111 * 140.57142639160156, p1111 * 54.38392639160156);
      v1458.bezierCurveTo(p1111 * 177.57142639160156, p1111 * 55.38392639160156, p1111 * 158.07142639160156, p1111 * 54.38392639160156, p1111 * 175.57142639160156, p1111 * 54.38392639160156);
      v1458.bezierCurveTo(p1111 * 185.57142639160156, p1111 * 56.38392639160156, p1111 * 185.57142639160156, p1111 * 57.38392639160156, p1111 * 184.57142639160156, p1111 * 66.38392639160156);
      v1458.bezierCurveTo(p1111 * 184.57142639160156, p1111 * 78.38392639160156, p1111 * 184.57142639160156, p1111 * 89.38392639160156, p1111 * 184.57142639160156, p1111 * 90.38392639160156);
      v1458.bezierCurveTo(p1111 * 177.57142639160156, p1111 * 107.38392639160156, p1111 * 180.57142639160156, p1111 * 112.38392639160156, p1111 * 189.57142639160156, p1111 * 116.38392639160156);
      v1458.bezierCurveTo(p1111 * 212.57142639160156, p1111 * 127.38392639160156, p1111 * 212.57142639160156, p1111 * 132.38392639160156, p1111 * 211.57142639160156, p1111 * 150.38392639160156);
      v1458.bezierCurveTo(p1111 * 211.57142639160156, p1111 * 227.59821128845215, p1111 * 211.57142639160156, p1111 * 227.59821128845215, p1111 * 211.57142639160156, p1111 * 304.81249618530273);
      v1458.bezierCurveTo(p1111 * 212.57142639160156, p1111 * 328.81249618530273, p1111 * 209.57142639160156, p1111 * 330.81249618530273, p1111 * 188.57142639160156, p1111 * 333.81249618530273);
      v1458.bezierCurveTo(p1111 * 155.07142639160156, p1111 * 333.31249618530273, p1111 * 155.07142639160156, p1111 * 333.31249618530273, p1111 * 121.57142639160156, p1111 * 332.81249618530273);
      v1458.bezierCurveTo(p1111 * 104.57142639160156, p1111 * 327.81249618530273, p1111 * 105.57142639160156, p1111 * 328.81249618530273, p1111 * 104.57142639160156, p1111 * 312.81249618530273);
      v1458.bezierCurveTo(p1111 * 104.57142639160156, p1111 * 228.16963958740234, p1111 * 104.57142639160156, p1111 * 228.16963958740234, p1111 * 104.57142639160156, p1111 * 143.52678298950195);
      v1458.bezierCurveTo(p1111 * 106.57142639160156, p1111 * 124.52678298950195, p1111 * 110.57142639160156, p1111 * 123.52678298950195, p1111 * 123.57142639160156, p1111 * 116.52678298950195);
      v1458.bezierCurveTo(p1111 * 136.57142639160156, p1111 * 110.52678298950195, p1111 * 130.57142639160156, p1111 * 106.52678298950195, p1111 * 126.57142639160156, p1111 * 98.52678298950195);
      v1458.closePath();
      f88(v1458, p1112[0], p1112[0], p1111 * 15);
      v1458.beginPath();
      v1458.lineCap = "round";
      v1458.lineJoin = "round";
      v1458.moveTo(p1111 * 125.57142639160156, p1111 * 156.66963958740234);
      v1458.bezierCurveTo(p1111 * 125.57142639160156, p1111 * 182.66963958740234, p1111 * 125.57142639160156, p1111 * 182.66963958740234, p1111 * 125.57142639160156, p1111 * 208.66963958740234);
      v1458.closePath();
      f88(v1458, p1112[0], p1112[0], p1111 * 15);
      return v1457;
    }(v1427 * 0.2, ["#FFFFFF"])));
    ᐃᐃ[70] = [];
    ᐃᐃ[70][v585.ᐃⲆᐃ] = f54(f274(v1427 * 0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ᐃᐃ[70][v585.ᐃⲆΔ] = f54(f274(v1427 * 0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ᐃᐃ[726] = [];
    ᐃᐃ[726].push(f54(f235(v1427 * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ᐃᐃ[726].push(f54(f235(v1427 * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ᐃᐃ[726].push(f54(f235(v1427 * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ᐃᐃ[156] = [];
    ᐃᐃ[156][v585.ᐃⲆᐃ] = f54(f251(v1427 * 0.37, 0, ["#2a2938", "#242330", "#313041"]));
    ᐃᐃ[156][v585.ᐃⲆΔ] = f54(f251(v1427 * 0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    ᐃᐃ[158] = [];
    ᐃᐃ[158][v585.ᐃⲆᐃ] = f54(f282(v1427 * 0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ᐃᐃ[158][v585.ᐃⲆΔ] = f54(f282(v1427 * 0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ᐃᐃ[159] = [];
    ᐃᐃ[159][v585.ᐃⲆᐃ] = f54(f245(v1427 * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ᐃᐃ[159][v585.ᐃⲆΔ] = f54(f245(v1427 * 0.55, vVV62, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ᐃᐃ[157] = [];
    ᐃᐃ[157][v585.ᐃⲆᐃ] = f54(f245(v1427 * 0.55, vVVVV6322, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ᐃᐃ[157][v585.ᐃⲆΔ] = f54(f245(v1427 * 0.55, vVVVV6233, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ᐃᐃ[150] = [];
    ᐃᐃ[150][v585.ᐃⲆᐃ] = f54(f247(v1427 * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ᐃᐃ[150][v585.ᐃⲆΔ] = f54(f247(v1427 * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ᐃᐃ[151] = [];
    ᐃᐃ[151][v585.ᐃⲆᐃ] = f54(f247(v1427 * 0.2, vVVVVVV6232, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ᐃᐃ[151][v585.ᐃⲆΔ] = f54(f247(v1427 * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ᐃᐃ[152] = [];
    ᐃᐃ[152][v585.ᐃⲆᐃ] = f54(f247(v1427 * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ᐃᐃ[152][v585.ᐃⲆΔ] = f54(f247(v1427 * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ᐃᐃ[107] = [];
    ᐃᐃ[107][v585.ᐃⲆᐃ] = f54(f199(v1427 * 0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ᐃᐃ[107][v585.ᐃⲆΔ] = f54(f199(v1427 * 0.24, v6, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ᐃᐃ[105] = [];
    ᐃᐃ[105][v585.ᐃⲆᐃ] = f54(f219(v1427 * 0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ᐃᐃ[105][v585.ᐃⲆΔ] = f54(f219(v1427 * 0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ᐃᐃ[108] = [];
    ᐃᐃ[108][v585.ᐃⲆᐃ] = f54(f91(3, f240(v1427 * 0.9, vVVVV6233, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ᐃᐃ[108][v585.ᐃⲆΔ] = f54(f91(3, f240(v1427 * 0.9, vVV63, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ᐃᐃ[999] = [];
    ᐃᐃ[999][v585.ᐃⲆᐃ] = f54(f91(3, f240(v1427 * 1, vVVVV632, [undefined, undefined, vVVVVUndefined582, "#c8efef", "#c8efef"])));
    ᐃᐃ[999][v585.ᐃⲆΔ] = f54(f91(3, f240(v1427 * 1, true, [vVVVVUndefined1422, vVVVVUndefined142, vVVVVUndefined1422, "#87d2e6", "#87d2e6"])));
    ᐃᐃ[1004] = [];
    ᐃᐃ[1004].push(f54(f280(v1427 * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ᐃᐃ[1004].push(f54(f280(v1427 * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ᐃᐃ[1004].push(f54(f280(v1427 * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ᐃᐃ[1044] = [];
    ᐃᐃ[1044].push(f54(f252(v1427 * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ᐃᐃ[1044].push(f54(f252(v1427 * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃᐃ[1044].push(f54(f252(v1427 * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃᐃ[1031] = [];
    ᐃᐃ[1031].push(f54(f134(v1427 * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ᐃᐃ[1031].push(f54(f134(v1427 * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ᐃᐃ[1031].push(f54(f134(v1427 * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ᐃᐃ[1032] = [];
    ᐃᐃ[1032].push(f54(f134(v1427 * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ᐃᐃ[1032].push(f54(f134(v1427 * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ᐃᐃ[1032].push(f54(f134(v1427 * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ᐃᐃ[82] = [];
    ᐃᐃ[82][v585.ᐃⲆᐃ] = f54(f91(3, f277(v1427 * 0.7, vVV6, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ᐃᐃ[82][v585.ᐃⲆΔ] = f54(f91(3, f277(v1427 * 0.7, vVV63, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ᐃᐃ[86] = [];
    ᐃᐃ[86][v585.ᐃⲆᐃ] = f54(f91(3, f277(v1427 * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ᐃᐃ[86][v585.ᐃⲆΔ] = f54(f91(3, f277(v1427 * 0.7, vVVVVV6232, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ᐃᐃ[87] = [];
    ᐃᐃ[87][v585.ᐃⲆᐃ] = f54(f91(3, f277(v1427 * 0.7, vVVVV63, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ᐃᐃ[87][v585.ᐃⲆΔ] = f54(f91(3, f277(v1427 * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ᐃᐃ[88] = [];
    ᐃᐃ[88][v585.ᐃⲆᐃ] = f54(f91(3, f277(v1427 * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ᐃᐃ[88][v585.ᐃⲆΔ] = f54(f91(3, f277(v1427 * 0.7, vVV63, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ᐃᐃ[811] = [];
    ᐃᐃ[811].push(f54(f281(v1427 * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ᐃᐃ[811].push(f54(f281(v1427 * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ᐃᐃ[811].push(f54(f281(v1427 * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ᐃᐃ[437] = f54(function (p1113, p1114) {
      var v1459 = document.createElement("canvas");
      var v1460 = v1459.getContext("2d");
      v1459.width = p1113 * 188;
      v1459.height = p1113 * 190;
      v1460.beginPath();
      v1460.lineCap = "round";
      v1460.lineJoin = "round";
      v1460.moveTo(p1113 * 33.00567626953125, p1113 * 95.44320678710938);
      v1460.bezierCurveTo(p1113 * 42.00567626953125, p1113 * 87.44320678710938, p1113 * 48.00567626953125, p1113 * 51.443206787109375, p1113 * 74.00567626953125, p1113 * 47.443206787109375);
      v1460.bezierCurveTo(p1113 * 100.00567626953125, p1113 * 42.443206787109375, p1113 * 118.00567626953125, p1113 * 49.443206787109375, p1113 * 131.00567626953125, p1113 * 55.443206787109375);
      v1460.bezierCurveTo(p1113 * 140.00567626953125, p1113 * 70.44320678710938, p1113 * 145.00567626953125, p1113 * 87.44320678710938, p1113 * 152.00567626953125, p1113 * 94.44320678710938);
      v1460.bezierCurveTo(p1113 * 149.00567626953125, p1113 * 99.44320678710938, p1113 * 147.00567626953125, p1113 * 98.44320678710938, p1113 * 141.00567626953125, p1113 * 101.44320678710938);
      v1460.bezierCurveTo(p1113 * 147.00567626953125, p1113 * 108.44320678710938, p1113 * 147.00567626953125, p1113 * 111.44320678710938, p1113 * 147.00567626953125, p1113 * 112.44320678710938);
      v1460.bezierCurveTo(p1113 * 143.00567626953125, p1113 * 112.44320678710938, p1113 * 141.00567626953125, p1113 * 112.44320678710938, p1113 * 137.00567626953125, p1113 * 111.44320678710938);
      v1460.bezierCurveTo(p1113 * 138.00567626953125, p1113 * 117.44320678710938, p1113 * 138.00567626953125, p1113 * 120.44320678710938, p1113 * 138.00567626953125, p1113 * 124.44320678710938);
      v1460.bezierCurveTo(p1113 * 125.00567626953125, p1113 * 107.44320678710938, p1113 * 121.00567626953125, p1113 * 124.44320678710938, p1113 * 110.00567626953125, p1113 * 141.44320678710938);
      v1460.bezierCurveTo(p1113 * 102.00567626953125, p1113 * 158.44320678710938, p1113 * 89.00567626953125, p1113 * 158.44320678710938, p1113 * 80.00567626953125, p1113 * 144.44320678710938);
      v1460.bezierCurveTo(p1113 * 61.00567626953125, p1113 * 111.44320678710938, p1113 * 56.00567626953125, p1113 * 117.44320678710938, p1113 * 48.00567626953125, p1113 * 120.44320678710938);
      v1460.bezierCurveTo(p1113 * 46.00567626953125, p1113 * 118.44320678710938, p1113 * 47.00567626953125, p1113 * 112.44320678710938, p1113 * 48.00567626953125, p1113 * 107.44320678710938);
      v1460.bezierCurveTo(p1113 * 43.00567626953125, p1113 * 111.44320678710938, p1113 * 40.00567626953125, p1113 * 111.44320678710938, p1113 * 37.00567626953125, p1113 * 110.44320678710938);
      v1460.bezierCurveTo(p1113 * 39.50567626953125, p1113 * 104.94320678710938, p1113 * 39.50567626953125, p1113 * 104.94320678710938, p1113 * 42.00567626953125, p1113 * 99.44320678710938);
      v1460.bezierCurveTo(p1113 * 33.00567626953125, p1113 * 99.44320678710938, p1113 * 33.00567626953125, p1113 * 98.44320678710938, p1113 * 33.00567626953125, p1113 * 96.44320678710938);
      v1460.closePath();
      f88(v1460, p1114[0], p1114[0], p1113 * 4);
      v1460.beginPath();
      v1460.lineCap = "round";
      v1460.lineJoin = "round";
      v1460.moveTo(p1113 * 51.00567626953125, p1113 * 72.53409576416016);
      v1460.bezierCurveTo(p1113 * 48.00567626953125, p1113 * 56.534095764160156, p1113 * 48.00567626953125, p1113 * 49.534095764160156, p1113 * 54.00567626953125, p1113 * 35.534095764160156);
      v1460.bezierCurveTo(p1113 * 58.00567626953125, p1113 * 26.534095764160156, p1113 * 65.00567626953125, p1113 * 27.534095764160156, p1113 * 73.00567626953125, p1113 * 40.534095764160156);
      v1460.bezierCurveTo(p1113 * 81.00567626953125, p1113 * 49.534095764160156, p1113 * 82.00567626953125, p1113 * 50.534095764160156, p1113 * 83.00567626953125, p1113 * 51.534095764160156);
      v1460.bezierCurveTo(p1113 * 77.00567626953125, p1113 * 71.53409576416016, p1113 * 64.00567626953125, p1113 * 75.53409576416016, p1113 * 51.00567626953125, p1113 * 72.53409576416016);
      v1460.closePath();
      f88(v1460, p1114[0], p1114[0], p1113 * 2);
      v1460.beginPath();
      v1460.lineCap = "round";
      v1460.lineJoin = "round";
      v1460.moveTo(p1113 * 105.00567626953125, p1113 * 50.53410339355469);
      v1460.bezierCurveTo(p1113 * 112.00567626953125, p1113 * 48.53410339355469, p1113 * 125.00567626953125, p1113 * 21.534103393554688, p1113 * 132.00567626953125, p1113 * 33.53410339355469);
      v1460.bezierCurveTo(p1113 * 138.00567626953125, p1113 * 42.53410339355469, p1113 * 140.00567626953125, p1113 * 64.53410339355469, p1113 * 136.00567626953125, p1113 * 75.53410339355469);
      v1460.closePath();
      f88(v1460, p1114[0], p1114[0], p1113 * 2);
      return v1459;
    }(v1427 * 1.1, ["#BB0000"]));
    ᐃᐃ[444] = f54(f91(Math.PI, function (p1115, p1116) {
      var v1461 = document.createElement("canvas");
      var v1462 = v1461.getContext("2d");
      v1461.width = p1115 * 238;
      v1461.height = p1115 * 230;
      v1462.translate(p1115 * -93, p1115 * -110);
      f92(v1462, p1115 * 213.5, p1115 * 256.75, p1115 * 75);
      f88(v1462, p1116);
      f92(v1462, p1115 * 213.5, p1115 * 175.75, p1115 * 25);
      f88(v1462, p1116);
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 156.5, p1115 * 137.75);
      v1462.bezierCurveTo(p1115 * 170.5, p1115 * 173.75, p1115 * 195.5, p1115 * 177.75, p1115 * 209.5, p1115 * 177.75);
      v1462.lineWidth = p1115 * 17;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 217.5, p1115 * 178.75);
      v1462.bezierCurveTo(p1115 * 251.5, p1115 * 177.75, p1115 * 263.5, p1115 * 153.75, p1115 * 270.5, p1115 * 140.75);
      v1462.lineWidth = p1115 * 17;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 130.5, p1115 * 124.75);
      v1462.bezierCurveTo(p1115 * 153.5, p1115 * 185.75, p1115 * 198.5, p1115 * 185.75, p1115 * 213.5, p1115 * 185.75);
      v1462.lineWidth = p1115 * 17;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 214.5, p1115 * 183.75);
      v1462.bezierCurveTo(p1115 * 265.5, p1115 * 192.75, p1115 * 293.5, p1115 * 141.75, p1115 * 297.5, p1115 * 124.75);
      v1462.lineWidth = p1115 * 17;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 107.5, p1115 * 213.75);
      v1462.bezierCurveTo(p1115 * 151.5, p1115 * 190.75, p1115 * 198.5, p1115 * 184.75, p1115 * 210.5, p1115 * 184.75);
      v1462.lineWidth = p1115 * 17;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 212.5, p1115 * 187.75);
      v1462.bezierCurveTo(p1115 * 258.5, p1115 * 182.75, p1115 * 286.5, p1115 * 194.75, p1115 * 314.5, p1115 * 206.75);
      v1462.lineWidth = p1115 * 17;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 102.5, p1115 * 258.75);
      v1462.bezierCurveTo(p1115 * 142.5, p1115 * 200.75, p1115 * 193.5, p1115 * 194.75, p1115 * 211.5, p1115 * 185.75);
      v1462.lineWidth = p1115 * 17;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 214.5, p1115 * 192.75);
      v1462.bezierCurveTo(p1115 * 276.5, p1115 * 194.75, p1115 * 306.5, p1115 * 233.75, p1115 * 316.5, p1115 * 246.75);
      v1462.lineWidth = p1115 * 17;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 219.5, p1115 * 158.75);
      v1462.bezierCurveTo(p1115 * 226.5, p1115 * 159.75, p1115 * 227.5, p1115 * 147.75, p1115 * 219.5, p1115 * 145.75);
      v1462.closePath();
      v1462.lineWidth = p1115 * 10;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      v1462.beginPath();
      v1462.lineCap = "round";
      v1462.lineJoin = "round";
      v1462.moveTo(p1115 * 210.5, p1115 * 160.75);
      v1462.bezierCurveTo(p1115 * 203.5, p1115 * 159.75, p1115 * 199.5, p1115 * 146.75, p1115 * 210.5, p1115 * 145.75);
      v1462.closePath();
      v1462.lineWidth = p1115 * 10;
      v1462.strokeStyle = p1116;
      v1462.stroke();
      return v1461;
    }(v1427 * 0.9, "#BB0000")));
    ᐃᐃ[32] = [];
    ᐃᐃ[32][v585.ᐃⲆᐃ] = f54(f223(v1427 * 0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ᐃᐃ[32][v585.ᐃⲆΔ] = f54(f223(v1427 * 0.55, vVV6, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ᐃᐃ[104] = [];
    ᐃᐃ[104][v585.ᐃⲆᐃ] = f54(f215(v1427 * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ᐃᐃ[104][v585.ᐃⲆΔ] = f54(f215(v1427 * 0.55, vVVV62, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ᐃᐃ[34] = [];
    ᐃᐃ[34][v585.ᐃⲆᐃ] = f54(f237(v1427 * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ᐃᐃ[34][v585.ᐃⲆΔ] = f54(f237(v1427 * 0.6, vVVVVV6232, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ᐃᐃ[35] = [];
    ᐃᐃ[35][v585.ᐃⲆᐃ] = f54(f238(v1427 * 0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ᐃᐃ[35][v585.ᐃⲆΔ] = f54(f238(v1427 * 0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ᐃᐃ[36] = [];
    ᐃᐃ[36][v585.ᐃⲆᐃ] = f54(f271(v1427 * 0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ᐃᐃ[36][v585.ᐃⲆΔ] = f54(f271(v1427 * 0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ᐃᐃ[524] = [];
    ᐃᐃ[524][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[524][v585.ᐃⲆΔ] = [];
    ᐃᐃ[524][v585.ᐃⲆᐃ].push(f54(f211(v1427 * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ᐃᐃ[524][v585.ᐃⲆᐃ].push(f54(f224(v1427 * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ᐃᐃ[524][v585.ᐃⲆᐃ].push(f54(f212(v1427 * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ᐃᐃ[524][v585.ᐃⲆΔ].push(f54(f211(v1427 * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ᐃᐃ[524][v585.ᐃⲆΔ].push(f54(f224(v1427 * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ᐃᐃ[524][v585.ᐃⲆΔ].push(f54(f212(v1427 * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ᐃᐃ[587] = [];
    ᐃᐃ[587][v585.ᐃⲆᐃ] = f54(f221(v1427 * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ᐃᐃ[587][v585.ᐃⲆΔ] = f54(f221(v1427 * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ᐃᐃ[589] = [];
    ᐃᐃ[589][v585.ᐃⲆᐃ] = f54(f229(v1427 * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃᐃ[589][v585.ᐃⲆΔ] = f54(f229(v1427 * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃᐃ[590] = [];
    ᐃᐃ[590][v585.ᐃⲆᐃ] = f54(f213(v1427 * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃᐃ[590][v585.ᐃⲆΔ] = f54(f213(v1427 * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃᐃ[353] = [];
    ᐃᐃ[353][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[353][v585.ᐃⲆΔ] = [];
    ᐃᐃ[353][v585.ᐃⲆᐃ] = [ⵠᐃ.ᐃΔⲆⲆⵠⵠⲆΔⵠ, ⵠᐃ.ΔᐃᐃⲆⵠⵠᐃᐃᐃ, ⵠᐃ.ⲆΔΔⵠᐃᐃᐃΔⲆ, ⵠᐃ.ΔⵠⵠᐃᐃΔⵠΔⲆ, ⵠᐃ.ⵠΔΔᐃΔⲆΔⵠⵠ, ⵠᐃ.ᐃⲆⵠⵠᐃⵠΔᐃᐃ, ⵠᐃ.ᐃᐃⵠⲆᐃᐃⵠⲆᐃ, ⵠᐃ.ΔᐃⲆᐃΔᐃΔⵠᐃ, ⵠᐃ.ΔⵠⲆΔⲆⲆᐃᐃΔ, ⵠᐃ.ⵠᐃᐃⲆⵠⲆΔⲆⲆ, ⵠᐃ.ᐃⵠⲆᐃᐃⵠᐃⲆⵠ, ⵠᐃ.ⵠΔⵠⵠⲆᐃᐃᐃⵠ, ⵠᐃ.ᐃᐃⲆΔⲆⲆΔᐃΔ, ⵠᐃ.ⲆᐃⵠᐃⲆᐃΔΔⵠ, ⵠᐃ.ᐃⵠⵠᐃᐃⲆⵠᐃΔ, ⵠᐃ.ᐃᐃⵠⲆΔⲆΔⵠΔ, ⵠᐃ.ΔⵠᐃᐃⲆᐃΔᐃΔ, ⵠᐃ.ⲆᐃⵠΔⵠᐃΔΔⵠ, ⵠᐃ.ⵠᐃᐃΔⵠⲆⵠⵠⵠ, ⵠᐃ.ᐃⲆⵠΔΔⲆΔΔᐃ, ⵠᐃ.ⲆⵠᐃΔⲆⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⲆᐃⵠⵠᐃᐃ, ⵠᐃ.ⵠⵠⲆⲆᐃΔⵠΔⲆ, ⵠᐃ.ⲆᐃⵠⲆⵠΔᐃⵠᐃ, ⵠᐃ.ΔᐃΔⲆⵠᐃⲆΔⲆ, ⵠᐃ.ᐃⵠΔᐃᐃΔⲆⵠⲆ, ⵠᐃ.ⲆΔᐃⵠⵠⵠⵠⵠⵠ, ⵠᐃ.ΔⲆⲆᐃΔᐃⲆⲆΔ, ⵠᐃ.ⵠΔΔⵠⲆᐃⵠⲆⵠ, ⵠᐃ.ᐃᐃⲆᐃⵠΔⲆᐃⲆ, ⵠᐃ.ᐃᐃᐃⲆΔⵠⲆΔᐃ, ⵠᐃ.ⵠᐃΔᐃⲆⲆⵠᐃᐃ, ⵠᐃ.ᐃⲆΔⲆⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⵠⵠᐃᐃⲆⵠΔⵠ, ⵠᐃ.ⲆⵠᐃⲆⲆⵠΔᐃⲆ, ⵠᐃ.ΔⲆⵠΔⲆⵠⲆΔⲆ, ⵠᐃ.ΔΔΔᐃΔⵠⵠⵠᐃ, ⵠᐃ.ⵠⵠᐃᐃⵠᐃᐃᐃⵠ, ⵠᐃ.ᐃᐃᐃᐃⵠᐃⵠⵠⵠ, ⵠᐃ.ⵠΔᐃΔⵠⲆⲆⵠⲆ, ⵠᐃ.ΔᐃⲆⲆⵠᐃᐃⲆΔ, ⵠᐃ.ⲆᐃΔⵠΔᐃΔⲆᐃ, ⵠᐃ.ⲆⲆⵠΔΔΔΔⲆᐃ, ⵠᐃ.ⲆⵠⲆⵠⵠᐃΔⲆᐃ, ⵠᐃ.ⵠⵠⲆⵠᐃᐃᐃΔⲆ, ⵠᐃ.ΔⲆⵠΔⲆⵠⵠⵠⵠ, ⵠᐃ.ᐃⲆᐃΔⵠᐃΔⵠᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃⵠΔᐃⲆ, ⵠᐃ.ᐃΔΔΔᐃΔᐃⲆⲆ, ⵠᐃ.ᐃΔΔΔΔⲆΔⲆⵠ, ⵠᐃ.ᐃⲆⵠᐃⲆⲆᐃⲆⵠ, ⵠᐃ.ᐃᐃᐃⵠⲆⲆᐃⵠΔ, ⵠᐃ.ⵠΔⵠΔⵠᐃΔΔᐃ, ⵠᐃ.ΔᐃΔⵠⵠⵠⲆᐃⲆ, ⵠᐃ.ΔΔⵠⵠΔΔⲆᐃⲆ, ⵠᐃ.ΔⵠⵠΔᐃΔⵠΔⲆ, ⵠᐃ.ⵠΔΔⲆΔⵠⵠᐃᐃ, ⵠᐃ.ⵠⵠⵠΔⵠⲆᐃⵠⵠ, ⵠᐃ.ΔⲆⵠᐃᐃⵠⵠᐃⲆ, ⵠᐃ.ᐃΔΔⲆⵠⵠⵠΔⵠ, ⵠᐃ.ⲆΔⲆᐃⵠᐃᐃᐃᐃ, ⵠᐃ.ᐃⲆΔΔΔⵠΔⵠⲆ, ⵠᐃ.ΔᐃⲆᐃⵠⲆΔⲆᐃ, ⵠᐃ.ⵠⲆΔᐃⲆᐃΔⲆᐃ, ⵠᐃ.ⵠᐃⲆᐃᐃᐃᐃⵠΔ, ⵠᐃ.ⵠΔⲆᐃⵠⵠΔⵠⲆ];
    ᐃᐃ[353][v585.ᐃⲆΔ] = [ⵠᐃ.ⲆΔΔᐃⵠⵠⵠᐃᐃ, ⵠᐃ.ⲆΔⲆΔⵠⲆⲆⲆⲆ, ⵠᐃ.ΔᐃⲆⵠⵠⲆⲆΔΔ, ⵠᐃ.ΔᐃⵠⲆᐃⵠⲆΔⵠ, ⵠᐃ.ᐃⲆΔⵠⲆᐃⲆΔᐃ, ⵠᐃ.ⵠΔⵠⵠⲆΔⲆΔⵠ, ⵠᐃ.ᐃᐃⵠᐃᐃⲆΔᐃⲆ, ⵠᐃ.ⵠⵠⵠⵠᐃⵠᐃⲆΔ, ⵠᐃ.ⵠⲆΔⵠⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠⲆΔᐃᐃⵠⵠⲆᐃ, ⵠᐃ.ⵠⵠᐃⵠᐃΔⵠⵠΔ, ⵠᐃ.ΔΔⲆᐃⵠᐃⲆⲆΔ, ⵠᐃ.ⵠΔΔᐃᐃⵠΔⵠⲆ, ⵠᐃ.ⲆᐃⵠᐃᐃᐃᐃᐃΔ, ⵠᐃ.ⵠᐃᐃΔⲆⲆᐃᐃⵠ, ⵠᐃ.ΔᐃᐃⲆΔᐃΔⵠᐃ, ⵠᐃ.ⵠⲆΔᐃⵠⵠⲆΔΔ, ⵠᐃ.ⵠΔΔᐃⲆΔΔᐃᐃ, ⵠᐃ.ⵠᐃΔΔΔⲆΔᐃⲆ, ⵠᐃ.ⵠΔⲆⵠⵠΔΔⲆᐃ, ⵠᐃ.ΔΔΔΔⵠᐃⵠᐃᐃ, ⵠᐃ.ⲆⲆΔΔⵠⵠⲆⲆⵠ, ⵠᐃ.ⵠⵠᐃΔΔΔᐃⲆΔ, ⵠᐃ.ᐃΔᐃΔⲆᐃᐃᐃΔ, ⵠᐃ.ⲆⲆᐃⲆΔΔⵠΔᐃ, ⵠᐃ.ⲆΔᐃⵠᐃⵠⲆⲆΔ, ⵠᐃ.ⵠⲆᐃᐃⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠⵠⲆⵠᐃΔⵠⲆΔ, ⵠᐃ.ΔΔⵠᐃⵠⲆΔΔⲆ, ⵠᐃ.ⵠⲆΔⲆⵠⵠΔΔΔ, ⵠᐃ.ⲆⲆΔⵠⲆⵠⲆⲆⵠ, ⵠᐃ.ᐃⲆΔⵠⵠⲆᐃΔᐃ, ⵠᐃ.ⵠⵠΔⲆΔⲆΔΔᐃ, ⵠᐃ.ΔⲆΔⵠⲆⵠΔⲆⲆ, ⵠᐃ.ΔᐃⵠⵠⲆᐃᐃⵠΔ, ⵠᐃ.ⲆⵠᐃⵠⲆⲆⲆᐃᐃ, ⵠᐃ.ⲆⵠᐃⲆᐃΔⲆⵠΔ, ⵠᐃ.ⲆᐃⵠⵠⲆΔΔΔᐃ, ⵠᐃ.ΔⲆᐃⵠⲆⲆΔⵠⵠ, ⵠᐃ.ᐃⲆⵠᐃΔⲆⲆⲆΔ, ⵠᐃ.ⲆⲆⵠᐃᐃⵠⲆⵠⲆ, ⵠᐃ.ΔᐃΔΔⲆᐃΔⵠⲆ, ⵠᐃ.ᐃⵠΔⵠⲆⲆⵠⲆᐃ, ⵠᐃ.ΔⵠⵠΔΔΔⲆⲆⵠ, ⵠᐃ.ᐃᐃᐃΔⵠⲆΔᐃᐃ, ⵠᐃ.ᐃΔⵠⵠΔΔⲆᐃⲆ, ⵠᐃ.ⲆᐃΔᐃⵠΔⵠⲆⵠ, ⵠᐃ.ⵠΔᐃΔᐃΔΔⵠⵠ, ⵠᐃ.ⵠⵠⲆᐃᐃᐃΔⲆᐃ, ⵠᐃ.ⵠΔⲆⵠⲆⲆⵠᐃⵠ, ⵠᐃ.ᐃⲆΔΔᐃΔⲆΔᐃ, ⵠᐃ.ᐃᐃⵠΔⵠΔΔΔⵠ, ⵠᐃ.ΔΔΔᐃᐃΔⵠΔΔ, ⵠᐃ.ⵠⵠⲆΔᐃΔⵠᐃⵠ, ⵠᐃ.ᐃΔᐃⲆᐃΔⲆΔⲆ, ⵠᐃ.ΔΔⲆᐃⵠᐃΔΔΔ, ⵠᐃ.ΔⲆᐃᐃⵠᐃΔΔⵠ, ⵠᐃ.ΔᐃΔΔΔⵠⲆⵠᐃ, ⵠᐃ.ΔΔΔᐃⵠⵠⲆⲆᐃ, ⵠᐃ.ⵠⲆΔⵠΔΔᐃΔⲆ, ⵠᐃ.ⲆⲆᐃᐃΔⲆΔⲆΔ, ⵠᐃ.ⲆⵠⵠⲆᐃⲆⵠΔᐃ, ⵠᐃ.ᐃΔⲆΔᐃⵠΔᐃΔ, ⵠᐃ.ⵠⵠⲆΔᐃΔᐃΔΔ, ⵠᐃ.ᐃΔᐃⵠⵠⵠⲆᐃⲆ, ⵠᐃ.ᐃᐃⲆᐃᐃⵠΔᐃᐃ];
    ᐃᐃ[895] = [];
    ᐃᐃ[895][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[895][v585.ᐃⲆΔ] = [];
    ᐃᐃ[895][v585.ᐃⲆᐃ].push(f54(f203(v1427 * 1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
    ᐃᐃ[895][v585.ᐃⲆᐃ].push(f54(f203(v1427 * 0.9, vVVVVV142, ["#252B28", "#747471", "#83827e"], 1)));
    ᐃᐃ[895][v585.ᐃⲆᐃ].push(f54(f203(v1427 * 1, vVVV143, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃᐃ[895][v585.ᐃⲆᐃ].push(f54(f203(v1427 * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃᐃ[895][v585.ᐃⲆΔ].push(f54(f203(v1427 * 1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
    ᐃᐃ[895][v585.ᐃⲆΔ].push(f54(f203(v1427 * 0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ᐃᐃ[895][v585.ᐃⲆΔ].push(f54(f203(v1427 * 1, vVV1422, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[895][v585.ᐃⲆΔ].push(f54(f203(v1427 * 0.9, vVVVV142, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[898] = [];
    ᐃᐃ[898][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[898][v585.ᐃⲆΔ] = [];
    ᐃᐃ[898][v585.ᐃⲆᐃ].push(f54(f203(v1427 * 1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃᐃ[898][v585.ᐃⲆᐃ].push(f54(f203(v1427 * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃᐃ[898][v585.ᐃⲆᐃ].push(f54(f203(v1427 * 1, vVVV624, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃᐃ[898][v585.ᐃⲆᐃ].push(f54(f203(v1427 * 0.9, vVVVV6232, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃᐃ[898][v585.ᐃⲆΔ].push(f54(f203(v1427 * 1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[898][v585.ᐃⲆΔ].push(f54(f203(v1427 * 0.9, vVVV624, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[898][v585.ᐃⲆΔ].push(f54(f203(v1427 * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[898][v585.ᐃⲆΔ].push(f54(f203(v1427 * 0.9, vVV6, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃᐃ[526] = [];
    ᐃᐃ[526][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[526][v585.ᐃⲆΔ] = [];
    ᐃᐃ[526][v585.ᐃⲆᐃ].push(f54(f181(v1427 * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[526][v585.ᐃⲆᐃ].push(f54(f181(v1427 * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[526][v585.ᐃⲆᐃ].push(f54(f181(v1427 * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃᐃ[526][v585.ᐃⲆΔ].push(f54(f181(v1427 * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃᐃ[526][v585.ᐃⲆΔ].push(f54(f181(v1427 * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃᐃ[526][v585.ᐃⲆΔ].push(f54(f181(v1427 * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃᐃ[527] = [];
    ᐃᐃ[527][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[527][v585.ᐃⲆΔ] = [];
    ᐃᐃ[527][v585.ᐃⲆᐃ].push(f54(f202(v1427 * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃᐃ[527][v585.ᐃⲆᐃ].push(f54(f202(v1427 * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃᐃ[527][v585.ᐃⲆᐃ].push(f54(f202(v1427 * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃᐃ[527][v585.ᐃⲆΔ].push(f54(f202(v1427 * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃᐃ[527][v585.ᐃⲆΔ].push(f54(f202(v1427 * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃᐃ[527][v585.ᐃⲆΔ].push(f54(f202(v1427 * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃᐃ[212] = [];
    ᐃᐃ[212][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[212][v585.ᐃⲆΔ] = [];
    ᐃᐃ[212][v585.ᐃⲆᐃ].push(f54(f216(v1427 * 1.7, vVVV623, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃᐃ[212][v585.ᐃⲆᐃ].push(f54(f216(v1427 * 1.5, vVVVVV6232, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃᐃ[212][v585.ᐃⲆᐃ].push(f54(f216(v1427 * 1.3, vVVV62, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃᐃ[212][v585.ᐃⲆΔ].push(f54(f216(v1427 * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃᐃ[212][v585.ᐃⲆΔ].push(f54(f216(v1427 * 1.5, vVVVV63, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃᐃ[212][v585.ᐃⲆΔ].push(f54(f216(v1427 * 1.3, vVVVV623, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃᐃ[897] = [];
    ᐃᐃ[897][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[897][v585.ᐃⲆΔ] = [];
    ᐃᐃ[897][v585.ᐃⲆᐃ].push(f54(f230(v1427, ["#2d53c4"])));
    ᐃᐃ[897][v585.ᐃⲆΔ].push(f54(f230(v1427, ["#2d53c4"])));
    ᐃᐃ[915] = [];
    ᐃᐃ[915][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[915][v585.ᐃⲆΔ] = [];
    ᐃᐃ[915][v585.ᐃⲆᐃ].push(f54(f230(v1427, ["#c4912d"])));
    ᐃᐃ[915][v585.ᐃⲆΔ].push(f54(f230(v1427, ["#c4912d"])));
    ᐃᐃ[899] = [];
    ᐃᐃ[899][v585.ᐃⲆᐃ] = f54(f226(v1427, ["#414040"]));
    ᐃᐃ[899][v585.ᐃⲆΔ] = f54(f226(v1427, ["#153635"]));
    ᐃᐃ[646] = [];
    ᐃᐃ[646][v585.ᐃⲆᐃ] = f54(f185(v1427 * 1, vVVVV1422, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[646][v585.ᐃⲆΔ] = f54(f185(v1427 * 1, vVVV144, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[647] = [];
    ᐃᐃ[647][v585.ᐃⲆᐃ] = f54(f166(v1427 * 1, vVVVV1423, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[647][v585.ᐃⲆΔ] = f54(f166(v1427 * 1, vV14, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[650] = [];
    ᐃᐃ[650][v585.ᐃⲆᐃ] = f54(f166(v1427 * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[650][v585.ᐃⲆΔ] = f54(f166(v1427 * 1, vV14, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[649] = [];
    ᐃᐃ[649][v585.ᐃⲆᐃ] = f54(f183(v1427 * 1, vVV1422, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[649][v585.ᐃⲆΔ] = f54(f183(v1427 * 1, vVV143, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[648] = [];
    ᐃᐃ[648][v585.ᐃⲆᐃ] = f54(f165(v1427 * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃᐃ[648][v585.ᐃⲆΔ] = f54(f165(v1427 * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃᐃ[530] = [];
    ᐃᐃ[530][v585.ᐃⲆᐃ] = f54(f209(v1427 * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ᐃᐃ[530][v585.ᐃⲆΔ] = f54(f209(v1427 * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ᐃᐃ[583] = [];
    ᐃᐃ[583][v585.ᐃⲆᐃ] = f54(f218(v1427 * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ᐃᐃ[583][v585.ᐃⲆΔ] = f54(f218(v1427 * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ᐃᐃ[369] = [];
    ᐃᐃ[1067] = [];
    ᐃᐃ[654] = [];
    ᐃᐃ[1068] = [];
    for (v1430 = 0; v1430 < 2; v1430++) {
      ᐃᐃ[369][v1430] = document.createElement("canvas");
      ᐃᐃ[369][v1430].width = 193;
      ᐃᐃ[369][v1430].height = 193;
      ᐃᐃ[1067][v1430] = ᐃᐃ[369][v1430].getContext("2d");
      ᐃᐃ[654][v1430] = document.createElement("canvas");
      ᐃᐃ[654][v1430].width = 600;
      ᐃᐃ[654][v1430].height = 600;
      ᐃᐃ[1068][v1430] = ᐃᐃ[654][v1430].getContext("2d");
    }
    ᐃᐃ[613] = [];
    ᐃᐃ[613][v585.ᐃⲆᐃ] = f54(f226(v1427, ["#c8e0de"]));
    ᐃᐃ[613][v585.ᐃⲆΔ] = f54(f226(v1427, ["#147071"]));
    ᐃᐃ[614] = [];
    ᐃᐃ[614][v585.ᐃⲆᐃ] = f54(f226(v1427, ["#231912"]));
    ᐃᐃ[614][v585.ᐃⲆΔ] = f54(f226(v1427, ["#021719"]));
    ᐃᐃ[916] = f54(function (p1117, p1118) {
      var v1463 = document.createElement("canvas");
      var v1464 = v1463.getContext("2d");
      v1463.width = p1117 * 253;
      v1463.height = p1117 * 192;
      v1464.save();
      v1464.translate(p1117 * 37, p1117 * 94);
      f86(v1464, p1117 * -7, p1117 * -20, p1117 * 14, p1117 * 37, p1117 * 20);
      v1464.restore();
      f88(v1464, p1118[0]);
      v1464.save();
      v1464.translate(p1117 * 131, p1117 * 94);
      f86(v1464, p1117 * -84, p1117 * -67, p1117 * 168, p1117 * 134, p1117 * 20);
      v1464.restore();
      f88(v1464, p1118[0], p1118[0], p1117 * 13);
      v1464.save();
      v1464.translate(p1117 * 223, p1117 * 94.5);
      f86(v1464, p1117 * -5, p1117 * -18.5, p1117 * 10, p1117 * 37, p1117 * 20);
      v1464.restore();
      f88(v1464, p1118[0]);
      v1464.save();
      v1464.translate(p1117 * 128.5, p1117 * 170.5);
      f86(v1464, p1117 * -22.5, p1117 * -6.5, p1117 * 45, p1117 * 13, p1117 * 20);
      v1464.restore();
      f88(v1464, p1118[0]);
      return v1463;
    }(v1427 * 0.5, ["#BB0000"]));
    ᐃᐃ[599] = f54(function (p1119, p1120) {
      var v1465 = document.createElement("canvas");
      var v1466 = v1465.getContext("2d");
      v1465.width = p1119 * 161;
      v1465.height = p1119 * 190;
      v1466.beginPath();
      v1466.lineCap = "round";
      v1466.lineJoin = "round";
      v1466.moveTo(p1119 * 9, p1119 * 93);
      v1466.bezierCurveTo(p1119 * 17, p1119 * 95, p1119 * 19, p1119 * 95, p1119 * 21, p1119 * 95);
      v1466.bezierCurveTo(p1119 * 9, p1119 * 83, p1119 * 17, p1119 * 93, p1119 * 4, p1119 * 76);
      v1466.bezierCurveTo(p1119 * 11, p1119 * 75, p1119 * 11, p1119 * 75, p1119 * 18, p1119 * 75);
      v1466.bezierCurveTo(p1119 * 13, p1119 * 67, p1119 * 13, p1119 * 67, p1119 * 7, p1119 * 59);
      v1466.bezierCurveTo(p1119 * 14, p1119 * 59, p1119 * 14, p1119 * 59, p1119 * 21, p1119 * 59);
      v1466.bezierCurveTo(p1119 * 46, p1119 * 35, p1119 * 35, p1119 * 45, p1119 * 49, p1119 * 31);
      v1466.bezierCurveTo(p1119 * 53, p1119 * 24, p1119 * 51, p1119 * 21, p1119 * 51, p1119 * 16);
      v1466.bezierCurveTo(p1119 * 63, p1119 * 23, p1119 * 63, p1119 * 24, p1119 * 69, p1119 * 29);
      v1466.bezierCurveTo(p1119 * 76, p1119 * 7, p1119 * 75, p1119 * 11, p1119 * 76, p1119 * 6);
      v1466.bezierCurveTo(p1119 * 81, p1119 * 12, p1119 * 84, p1119 * 18, p1119 * 89, p1119 * 27);
      v1466.bezierCurveTo(p1119 * 95, p1119 * 25, p1119 * 100, p1119 * 16, p1119 * 105, p1119 * 14);
      v1466.bezierCurveTo(p1119 * 103, p1119 * 25, p1119 * 111, p1119 * 33, p1119 * 110, p1119 * 34);
      v1466.bezierCurveTo(p1119 * 123, p1119 * 48, p1119 * 123, p1119 * 48, p1119 * 136, p1119 * 62);
      v1466.bezierCurveTo(p1119 * 142, p1119 * 60, p1119 * 147, p1119 * 59, p1119 * 155, p1119 * 58);
      v1466.bezierCurveTo(p1119 * 147, p1119 * 65, p1119 * 147, p1119 * 65, p1119 * 139, p1119 * 73);
      v1466.bezierCurveTo(p1119 * 145, p1119 * 73, p1119 * 145, p1119 * 73, p1119 * 151, p1119 * 73);
      v1466.bezierCurveTo(p1119 * 145, p1119 * 80, p1119 * 145, p1119 * 80, p1119 * 138, p1119 * 87);
      v1466.bezierCurveTo(p1119 * 144, p1119 * 88, p1119 * 144, p1119 * 88, p1119 * 150, p1119 * 89);
      v1466.bezierCurveTo(p1119 * 125, p1119 * 103, p1119 * 125, p1119 * 125, p1119 * 113, p1119 * 141);
      v1466.bezierCurveTo(p1119 * 92, p1119 * 178, p1119 * 85, p1119 * 177, p1119 * 76, p1119 * 178);
      v1466.bezierCurveTo(p1119 * 64, p1119 * 179, p1119 * 51, p1119 * 164, p1119 * 35, p1119 * 131);
      v1466.bezierCurveTo(p1119 * 18, p1119 * 95, p1119 * 13, p1119 * 99, p1119 * 8, p1119 * 93);
      v1466.closePath();
      f88(v1466, p1120, p1120, p1119 * 4);
      v1466.beginPath();
      v1466.lineCap = "round";
      v1466.lineJoin = "round";
      v1466.moveTo(p1119 * 25, p1119 * 63);
      v1466.bezierCurveTo(p1119 * 16, p1119 * 58, p1119 * 17, p1119 * 51, p1119 * 17, p1119 * 33);
      v1466.bezierCurveTo(p1119 * 19, p1119 * 12, p1119 * 21, p1119 * 12, p1119 * 32, p1119 * 17);
      v1466.bezierCurveTo(p1119 * 63, p1119 * 31, p1119 * 66, p1119 * 45, p1119 * 66, p1119 * 54);
      f88(v1466, p1120, p1120, p1119 * 4);
      v1466.beginPath();
      v1466.lineCap = "round";
      v1466.lineJoin = "round";
      v1466.moveTo(p1119 * 91, p1119 * 53);
      v1466.bezierCurveTo(p1119 * 91, p1119 * 40, p1119 * 98, p1119 * 33, p1119 * 121, p1119 * 20);
      v1466.bezierCurveTo(p1119 * 137, p1119 * 12, p1119 * 137, p1119 * 16, p1119 * 139, p1119 * 27);
      v1466.bezierCurveTo(p1119 * 141, p1119 * 49, p1119 * 140, p1119 * 57, p1119 * 134, p1119 * 64);
      f88(v1466, p1120, p1120, p1119 * 4);
      return v1465;
    }(v1427 * 0.9, "#BB0000"));
    ᐃᐃ[600] = f54(function (p1121, p1122) {
      var v1467 = document.createElement("canvas");
      var v1468 = v1467.getContext("2d");
      v1467.width = p1121 * 147;
      v1467.height = p1121 * 172;
      v1468.beginPath();
      v1468.lineCap = "round";
      v1468.lineJoin = "round";
      v1468.moveTo(p1121 * 8, p1121 * 50);
      v1468.bezierCurveTo(p1121 * 15, p1121 * 16, p1121 * 49, p1121 * 6, p1121 * 67, p1121 * 6);
      v1468.bezierCurveTo(p1121 * 121, p1121 * 3, p1121 * 128, p1121 * 32, p1121 * 135, p1121 * 48);
      v1468.bezierCurveTo(p1121 * 146, p1121 * 96, p1121 * 124, p1121 * 131, p1121 * 96, p1121 * 135);
      v1468.bezierCurveTo(p1121 * 96, p1121 * 158, p1121 * 79, p1121 * 156, p1121 * 75, p1121 * 156);
      v1468.bezierCurveTo(p1121 * 50, p1121 * 154, p1121 * 53, p1121 * 150, p1121 * 52, p1121 * 135);
      v1468.bezierCurveTo(p1121 * 2, p1121 * 127, p1121 * 3, p1121 * 87, p1121 * 8, p1121 * 50);
      v1468.closePath();
      f88(v1468, p1122, p1122, p1121 * 4);
      v1468.beginPath();
      v1468.lineCap = "round";
      v1468.lineJoin = "round";
      v1468.moveTo(p1121 * 14, p1121 * 57);
      v1468.bezierCurveTo(p1121 * 2, p1121 * 50, p1121 * 5, p1121 * 22, p1121 * 24, p1121 * 22);
      v1468.bezierCurveTo(p1121 * 41, p1121 * 21, p1121 * 54, p1121 * 32, p1121 * 55, p1121 * 48);
      f88(v1468, p1122, p1122, p1121 * 4);
      v1468.beginPath();
      v1468.lineCap = "round";
      v1468.lineJoin = "round";
      v1468.moveTo(p1121 * 93, p1121 * 47);
      v1468.bezierCurveTo(p1121 * 94, p1121 * 24, p1121 * 116, p1121 * 21, p1121 * 120, p1121 * 20);
      v1468.bezierCurveTo(p1121 * 144, p1121 * 17, p1121 * 146, p1121 * 52, p1121 * 133, p1121 * 58);
      f88(v1468, p1122, p1122, p1121 * 4);
      return v1467;
    }(v1427 * 0.9, "#BB0000"));
    ᐃᐃ[601] = f54(function (p1123, p1124) {
      var v1469 = document.createElement("canvas");
      var v1470 = v1469.getContext("2d");
      v1469.width = p1123 * 271;
      v1469.height = p1123 * 366;
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 133, p1123 * 99);
      v1470.bezierCurveTo(p1123 * 186, p1123 * 123, p1123 * 199, p1123 * 152, p1123 * 209, p1123 * 169);
      v1470.bezierCurveTo(p1123 * 228, p1123 * 205, p1123 * 224, p1123 * 245, p1123 * 190, p1123 * 276);
      v1470.bezierCurveTo(p1123 * 161, p1123 * 296, p1123 * 99, p1123 * 292, p1123 * 79, p1123 * 274);
      v1470.bezierCurveTo(p1123 * 49, p1123 * 253, p1123 * 47, p1123 * 214, p1123 * 50, p1123 * 197);
      v1470.bezierCurveTo(p1123 * 61, p1123 * 143, p1123 * 102, p1123 * 113, p1123 * 131, p1123 * 99);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 73, p1123 * 270);
      v1470.bezierCurveTo(p1123 * 79, p1123 * 280, p1123 * 77, p1123 * 280, p1123 * 78, p1123 * 287);
      v1470.bezierCurveTo(p1123 * 78, p1123 * 290, p1123 * 83, p1123 * 291, p1123 * 82, p1123 * 299);
      v1470.bezierCurveTo(p1123 * 81, p1123 * 301, p1123 * 87, p1123 * 301, p1123 * 92, p1123 * 314);
      v1470.bezierCurveTo(p1123 * 94, p1123 * 319, p1123 * 100, p1123 * 321, p1123 * 107, p1123 * 320);
      v1470.bezierCurveTo(p1123 * 111, p1123 * 323, p1123 * 114, p1123 * 324, p1123 * 119, p1123 * 320);
      v1470.bezierCurveTo(p1123 * 137, p1123 * 321, p1123 * 146, p1123 * 323, p1123 * 139, p1123 * 320);
      v1470.bezierCurveTo(p1123 * 141, p1123 * 324, p1123 * 150, p1123 * 324, p1123 * 153, p1123 * 320);
      v1470.bezierCurveTo(p1123 * 168, p1123 * 319, p1123 * 171, p1123 * 316, p1123 * 173, p1123 * 307);
      v1470.bezierCurveTo(p1123 * 180, p1123 * 305, p1123 * 180, p1123 * 301, p1123 * 178, p1123 * 296);
      v1470.bezierCurveTo(p1123 * 183, p1123 * 296, p1123 * 185, p1123 * 289, p1123 * 188, p1123 * 279);
      v1470.bezierCurveTo(p1123 * 171, p1123 * 286, p1123 * 149, p1123 * 290, p1123 * 132, p1123 * 289);
      v1470.bezierCurveTo(p1123 * 101, p1123 * 290, p1123 * 86, p1123 * 280, p1123 * 74, p1123 * 271);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 76, p1123 * 252);
      v1470.bezierCurveTo(p1123 * 85, p1123 * 294, p1123 * 96, p1123 * 314, p1123 * 103, p1123 * 314);
      v1470.bezierCurveTo(p1123 * 106, p1123 * 316, p1123 * 151, p1123 * 314, p1123 * 156, p1123 * 314);
      v1470.bezierCurveTo(p1123 * 169, p1123 * 317, p1123 * 182, p1123 * 285, p1123 * 191, p1123 * 256);
      v1470.bezierCurveTo(p1123 * 134.5, p1123 * 254, p1123 * 134.5, p1123 * 254, p1123 * 78, p1123 * 252);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 84, p1123 * 257);
      v1470.bezierCurveTo(p1123 * 122, p1123 * 273, p1123 * 146, p1123 * 268, p1123 * 179, p1123 * 261);
      v1470.bezierCurveTo(p1123 * 190, p1123 * 258, p1123 * 187, p1123 * 266, p1123 * 178, p1123 * 272);
      v1470.bezierCurveTo(p1123 * 160, p1123 * 284, p1123 * 123, p1123 * 282, p1123 * 100, p1123 * 277);
      v1470.bezierCurveTo(p1123 * 73, p1123 * 260, p1123 * 79, p1123 * 257, p1123 * 84, p1123 * 257);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 125, p1123 * 65);
      v1470.bezierCurveTo(p1123 * 133, p1123 * 45, p1123 * 136, p1123 * 42, p1123 * 141, p1123 * 55);
      v1470.bezierCurveTo(p1123 * 151, p1123 * 96, p1123 * 164, p1123 * 117, p1123 * 175, p1123 * 134);
      v1470.bezierCurveTo(p1123 * 203, p1123 * 181, p1123 * 207, p1123 * 182, p1123 * 208, p1123 * 215);
      v1470.bezierCurveTo(p1123 * 206, p1123 * 240, p1123 * 205, p1123 * 246, p1123 * 184, p1123 * 258);
      v1470.bezierCurveTo(p1123 * 161, p1123 * 267, p1123 * 131, p1123 * 272, p1123 * 86, p1123 * 258);
      v1470.bezierCurveTo(p1123 * 67, p1123 * 252, p1123 * 68, p1123 * 239, p1123 * 64, p1123 * 216);
      v1470.bezierCurveTo(p1123 * 62, p1123 * 194, p1123 * 72, p1123 * 169, p1123 * 92, p1123 * 142);
      v1470.bezierCurveTo(p1123 * 106, p1123 * 121, p1123 * 114, p1123 * 101, p1123 * 125, p1123 * 65);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 115, p1123 * 37);
      v1470.bezierCurveTo(p1123 * 116, p1123 * 28, p1123 * 119, p1123 * 27, p1123 * 126, p1123 * 37);
      v1470.bezierCurveTo(p1123 * 134, p1123 * 48, p1123 * 134, p1123 * 49, p1123 * 132, p1123 * 59);
      v1470.bezierCurveTo(p1123 * 131, p1123 * 67, p1123 * 127, p1123 * 65, p1123 * 120, p1123 * 56);
      v1470.bezierCurveTo(p1123 * 114, p1123 * 49, p1123 * 113, p1123 * 43, p1123 * 115, p1123 * 38);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 146, p1123 * 34);
      v1470.bezierCurveTo(p1123 * 152, p1123 * 28, p1123 * 155, p1123 * 27, p1123 * 157, p1123 * 39);
      v1470.bezierCurveTo(p1123 * 157, p1123 * 45, p1123 * 157, p1123 * 49, p1123 * 150, p1123 * 56);
      v1470.bezierCurveTo(p1123 * 141, p1123 * 66, p1123 * 138, p1123 * 66, p1123 * 138, p1123 * 57);
      v1470.bezierCurveTo(p1123 * 137, p1123 * 50, p1123 * 137, p1123 * 47, p1123 * 141, p1123 * 42);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 143, p1123 * 69);
      v1470.bezierCurveTo(p1123 * 148, p1123 * 56, p1123 * 156, p1123 * 50, p1123 * 158, p1123 * 58);
      v1470.bezierCurveTo(p1123 * 159, p1123 * 64, p1123 * 160, p1123 * 67, p1123 * 153, p1123 * 77);
      v1470.bezierCurveTo(p1123 * 148, p1123 * 83, p1123 * 145, p1123 * 84, p1123 * 143, p1123 * 77);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 149, p1123 * 92);
      v1470.bezierCurveTo(p1123 * 149, p1123 * 89, p1123 * 151, p1123 * 84, p1123 * 156, p1123 * 79);
      v1470.bezierCurveTo(p1123 * 161, p1123 * 73, p1123 * 163, p1123 * 78, p1123 * 162, p1123 * 86);
      v1470.bezierCurveTo(p1123 * 161, p1123 * 91, p1123 * 155, p1123 * 99, p1123 * 152, p1123 * 98);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 111, p1123 * 61);
      v1470.bezierCurveTo(p1123 * 114, p1123 * 51, p1123 * 117, p1123 * 51, p1123 * 124, p1123 * 64);
      v1470.bezierCurveTo(p1123 * 128, p1123 * 68, p1123 * 128, p1123 * 76, p1123 * 126, p1123 * 79);
      v1470.bezierCurveTo(p1123 * 123, p1123 * 84, p1123 * 122, p1123 * 82, p1123 * 115, p1123 * 74);
      v1470.bezierCurveTo(p1123 * 112, p1123 * 67, p1123 * 115, p1123 * 74, p1123 * 115, p1123 * 74);
      v1470.bezierCurveTo(p1123 * 111, p1123 * 68, p1123 * 111, p1123 * 66, p1123 * 111, p1123 * 62);
      v1470.closePath();
      f88(v1470, p1124[0]);
      v1470.beginPath();
      v1470.lineCap = "round";
      v1470.lineJoin = "round";
      v1470.moveTo(p1123 * 107, p1123 * 81);
      v1470.bezierCurveTo(p1123 * 108, p1123 * 74, p1123 * 112, p1123 * 73, p1123 * 118, p1123 * 84);
      v1470.bezierCurveTo(p1123 * 122, p1123 * 88, p1123 * 122, p1123 * 93, p1123 * 121, p1123 * 98);
      v1470.bezierCurveTo(p1123 * 114, p1123 * 98, p1123 * 113, p1123 * 98, p1123 * 109, p1123 * 90);
      v1470.bezierCurveTo(p1123 * 107, p1123 * 87, p1123 * 106, p1123 * 85, p1123 * 107, p1123 * 82);
      v1470.closePath();
      f88(v1470, p1124[0]);
      return v1469;
    }(v1427 * 1, ["#BB0000"]));
    ᐃᐃ[604] = f54(function (p1125, p1126) {
      var v1471 = document.createElement("canvas");
      var v1472 = v1471.getContext("2d");
      v1471.width = p1125 * 85;
      v1471.height = p1125 * 145;
      v1472.translate(p1125 * -20, p1125 * -95);
      v1472.beginPath();
      v1472.lineCap = "round";
      v1472.lineJoin = "round";
      v1472.moveTo(p1125 * 50, p1125 * 105);
      v1472.bezierCurveTo(p1125 * 52, p1125 * 119, p1125 * 64, p1125 * 137, p1125 * 71, p1125 * 146);
      v1472.bezierCurveTo(p1125 * 71, p1125 * 161, p1125 * 74, p1125 * 169, p1125 * 79, p1125 * 179);
      v1472.bezierCurveTo(p1125 * 68, p1125 * 192, p1125 * 70, p1125 * 204, p1125 * 69, p1125 * 216);
      v1472.bezierCurveTo(p1125 * 50, p1125 * 189.5, p1125 * 50, p1125 * 189.5, p1125 * 31, p1125 * 163);
      v1472.closePath();
      f88(v1472, p1126);
      v1472.beginPath();
      v1472.lineCap = "round";
      v1472.lineJoin = "round";
      v1472.moveTo(p1125 * 44, p1125 * 106);
      v1472.bezierCurveTo(p1125 * 49, p1125 * 90, p1125 * 58, p1125 * 104, p1125 * 51, p1125 * 121);
      v1472.bezierCurveTo(p1125 * 45, p1125 * 143, p1125 * 41, p1125 * 151, p1125 * 37, p1125 * 162);
      v1472.bezierCurveTo(p1125 * 48, p1125 * 180, p1125 * 58, p1125 * 188, p1125 * 76, p1125 * 205);
      v1472.bezierCurveTo(p1125 * 104, p1125 * 209, p1125 * 105, p1125 * 229, p1125 * 92, p1125 * 235);
      v1472.bezierCurveTo(p1125 * 76, p1125 * 239, p1125 * 75, p1125 * 232, p1125 * 56, p1125 * 213);
      v1472.bezierCurveTo(p1125 * 31, p1125 * 187, p1125 * 28, p1125 * 176, p1125 * 23, p1125 * 162);
      v1472.bezierCurveTo(p1125 * 38, p1125 * 131, p1125 * 40, p1125 * 120, p1125 * 44, p1125 * 106);
      v1472.closePath();
      f88(v1472, p1126, p1126, p1125 * 4);
      v1472.beginPath();
      v1472.lineCap = "round";
      v1472.lineJoin = "round";
      v1472.moveTo(p1125 * 30, p1125 * 159);
      v1472.bezierCurveTo(p1125 * 46, p1125 * 157, p1125 * 59, p1125 * 152, p1125 * 68, p1125 * 148);
      v1472.bezierCurveTo(p1125 * 63, p1125 * 155, p1125 * 52, p1125 * 160, p1125 * 44, p1125 * 164);
      v1472.bezierCurveTo(p1125 * 59, p1125 * 169, p1125 * 66, p1125 * 174, p1125 * 75, p1125 * 178);
      v1472.bezierCurveTo(p1125 * 58, p1125 * 178, p1125 * 49, p1125 * 175, p1125 * 37, p1125 * 174);
      v1472.closePath();
      f88(v1472, p1126);
      return v1471;
    }(v1427 * 0.8, "#BB0000"));
    ᐃᐃ[605] = f54(function (p1127, p1128) {
      var v1473 = document.createElement("canvas");
      var v1474 = v1473.getContext("2d");
      v1473.width = p1127 * 85;
      v1473.height = p1127 * 145;
      v1474.translate(p1127 * -165, p1127 * -95);
      v1474.beginPath();
      v1474.lineCap = "round";
      v1474.lineJoin = "round";
      v1474.moveTo(p1127 * 217, p1127 * 103);
      v1474.bezierCurveTo(p1127 * 209, p1127 * 129, p1127 * 203, p1127 * 137, p1127 * 195, p1127 * 146);
      v1474.bezierCurveTo(p1127 * 195, p1127 * 159, p1127 * 194, p1127 * 167, p1127 * 189, p1127 * 178);
      v1474.bezierCurveTo(p1127 * 193, p1127 * 186, p1127 * 196, p1127 * 195, p1127 * 198, p1127 * 216);
      v1474.bezierCurveTo(p1127 * 217.5, p1127 * 189.5, p1127 * 217.5, p1127 * 189.5, p1127 * 237, p1127 * 163);
      v1474.closePath();
      f88(v1474, p1128);
      v1474.beginPath();
      v1474.lineCap = "round";
      v1474.lineJoin = "round";
      v1474.moveTo(p1127 * 231, p1127 * 163);
      v1474.bezierCurveTo(p1127 * 221, p1127 * 139, p1127 * 218, p1127 * 128, p1127 * 215, p1127 * 114);
      v1474.bezierCurveTo(p1127 * 213, p1127 * 102, p1127 * 220, p1127 * 92, p1127 * 222, p1127 * 107);
      v1474.bezierCurveTo(p1127 * 224, p1127 * 118, p1127 * 233, p1127 * 138, p1127 * 244, p1127 * 161);
      v1474.bezierCurveTo(p1127 * 235, p1127 * 188, p1127 * 224, p1127 * 198, p1127 * 204, p1127 * 221);
      v1474.bezierCurveTo(p1127 * 190, p1127 * 233, p1127 * 190, p1127 * 235, p1127 * 180, p1127 * 235);
      v1474.bezierCurveTo(p1127 * 167, p1127 * 235, p1127 * 164, p1127 * 216, p1127 * 175, p1127 * 211);
      v1474.bezierCurveTo(p1127 * 176, p1127 * 208, p1127 * 181, p1127 * 207, p1127 * 191, p1127 * 205);
      v1474.bezierCurveTo(p1127 * 213, p1127 * 186, p1127 * 218, p1127 * 180, p1127 * 230, p1127 * 163);
      v1474.closePath();
      f88(v1474, p1128, p1128, p1127 * 4);
      v1474.beginPath();
      v1474.lineCap = "round";
      v1474.lineJoin = "round";
      v1474.moveTo(p1127 * 234, p1127 * 154);
      v1474.bezierCurveTo(p1127 * 227, p1127 * 156, p1127 * 222, p1127 * 156, p1127 * 199, p1127 * 148);
      v1474.bezierCurveTo(p1127 * 201, p1127 * 151, p1127 * 216, p1127 * 159, p1127 * 224, p1127 * 162);
      v1474.bezierCurveTo(p1127 * 209, p1127 * 169.5, p1127 * 209, p1127 * 169.5, p1127 * 194, p1127 * 177);
      v1474.bezierCurveTo(p1127 * 213.5, p1127 * 175, p1127 * 213.5, p1127 * 175, p1127 * 233, p1127 * 173);
      v1474.closePath();
      f88(v1474, p1128);
      return v1473;
    }(v1427 * 0.8, "#BB0000"));
    ᐃᐃ[433] = f54(function (p1129, p1130) {
      var v1475 = document.createElement("canvas");
      var v1476 = v1475.getContext("2d");
      var v1477 = p1129 * 85;
      var v1478 = p1129 * 115;
      var v1479 = p1129 * 4;
      v1475.width = v1477;
      v1475.height = v1478;
      v1476.translate(p1129 * -130, p1129 * -60);
      v1476.globalAlpha = 1;
      v1476.beginPath();
      v1476.bezierCurveTo(p1129 * 190, p1129 * 87, p1129 * 201, p1129 * 59, p1129 * 208, p1129 * 64);
      v1476.bezierCurveTo(p1129 * 213, p1129 * 68, p1129 * 204, p1129 * 93, p1129 * 195, p1129 * 109);
      v1476.bezierCurveTo(p1129 * 195, p1129 * 109, p1129 * 202, p1129 * 124, p1129 * 191, p1129 * 141);
      v1476.bezierCurveTo(p1129 * 182, p1129 * 151, p1129 * 164, p1129 * 155, p1129 * 148, p1129 * 144);
      v1476.bezierCurveTo(p1129 * 136, p1129 * 135, p1129 * 138, p1129 * 111, p1129 * 145, p1129 * 104);
      v1476.bezierCurveTo(p1129 * 140, p1129 * 92, p1129 * 131, p1129 * 67, p1129 * 138, p1129 * 63);
      v1476.bezierCurveTo(p1129 * 145, p1129 * 61, p1129 * 153, p1129 * 82, p1129 * 155, p1129 * 96);
      v1476.bezierCurveTo(p1129 * 167, p1129 * 91, p1129 * 178, p1129 * 92, p1129 * 187, p1129 * 98);
      v1476.closePath();
      f88(v1476, p1130, p1130, v1479);
      return v1475;
    }(v1427 * 0.9, "#BB0000"));
    ᐃᐃ[389] = f54(f96(v1427 * 0.6, "#BB0000"));
    ᐃᐃ[390] = f54(f96(v1427 * 0.6, "#1CE7E0"));
    ᐃᐃ[391] = f54(f96(v1427 * 0.6, "#DBE71C"));
    ᐃᐃ[419] = f54(f96(v1427 * 0.6, "#00BB00"));
    ᐃᐃ[821] = [];
    ᐃᐃ[821][v585.ᐃⲆᐃ] = f54(f226(v1427, ["#dac291"]));
    ᐃᐃ[821][v585.ᐃⲆΔ] = f54(f226(v1427, ["#0D423D"]));
    ᐃᐃ[917] = [];
    ᐃᐃ[917][v585.ᐃⲆᐃ] = f54(f226(v1427, ["#dac291"]));
    ᐃᐃ[917][v585.ᐃⲆΔ] = f54(f226(v1427, ["#0D423D"]));
    ᐃᐃ[1037] = [];
    ᐃᐃ[1037][v585.ᐃⲆᐃ] = f54(f246(v1427 * 0.3, vVVV6, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ᐃᐃ[1037][v585.ᐃⲆΔ] = f54(f246(v1427 * 0.3, vVVVVVV6232, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ᐃᐃ[284] = [];
    ᐃᐃ[284][v585.ᐃⲆᐃ] = f54(f246(v1427 * 0.3, vVVV632, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ᐃᐃ[284][v585.ᐃⲆΔ] = f54(f246(v1427 * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ᐃᐃ[218] = [f54(f244(v1427, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃᐃ[221] = [f54(f244(v1427, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃᐃ[822] = [];
    ᐃᐃ[822][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[822][v585.ᐃⲆΔ] = [];
    ᐃᐃ[822][v585.ᐃⲆᐃ].push(f54(f220(v1427 * 1, ["#0B6A84"])));
    ᐃᐃ[822][v585.ᐃⲆᐃ].push(f54(f208(v1427 * 1, ["#0B6A84"])));
    ᐃᐃ[822][v585.ᐃⲆᐃ].push(f54(f217(v1427 * 1, ["#0B6A84"])));
    ᐃᐃ[822][v585.ᐃⲆᐃ].push(f54(f222(v1427 * 1, ["#0B6A84"])));
    ᐃᐃ[822][v585.ᐃⲆᐃ].push(f54(f225(v1427 * 1, ["#0B6A84"])));
    ᐃᐃ[822][v585.ᐃⲆᐃ].push(f54(f228(v1427 * 1, ["#0B6A84"])));
    ᐃᐃ[822][v585.ᐃⲆᐃ].push(f54(f227(v1427 * 1, ["#0B6A84"])));
    ᐃᐃ[822][v585.ᐃⲆΔ].push(f54(f220(v1427 * 1, ["#09373F"])));
    ᐃᐃ[822][v585.ᐃⲆΔ].push(f54(f208(v1427 * 1, ["#09373F"])));
    ᐃᐃ[822][v585.ᐃⲆΔ].push(f54(f217(v1427 * 1, ["#09373F"])));
    ᐃᐃ[822][v585.ᐃⲆΔ].push(f54(f222(v1427 * 1, ["#09373F"])));
    ᐃᐃ[822][v585.ᐃⲆΔ].push(f54(f225(v1427 * 1, ["#09373F"])));
    ᐃᐃ[822][v585.ᐃⲆΔ].push(f54(f228(v1427 * 1, ["#09373F"])));
    ᐃᐃ[822][v585.ᐃⲆΔ].push(f54(f227(v1427 * 1, ["#09373F"])));
    ᐃᐃ[911] = [];
    ᐃᐃ[911][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[911][v585.ᐃⲆΔ] = [];
    ᐃᐃ[911][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 1.7, ["#FBEFBC"], 0)));
    ᐃᐃ[911][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 1.9, ["#FBEFBC"], 1)));
    ᐃᐃ[911][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 1.7, ["#FBEFBC"], 2)));
    ᐃᐃ[911][v585.ᐃⲆΔ].push(f54(f206(v1427 * 1.7, ["#0F4C48"], 0)));
    ᐃᐃ[911][v585.ᐃⲆΔ].push(f54(f206(v1427 * 1.9, ["#0F4C48"], 1)));
    ᐃᐃ[911][v585.ᐃⲆΔ].push(f54(f206(v1427 * 1.7, ["#0F4C48"], 2)));
    ᐃᐃ[913] = [];
    ᐃᐃ[913][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[913][v585.ᐃⲆΔ] = [];
    ᐃᐃ[913][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 1.8, ["#A9D6D3"], 0)));
    ᐃᐃ[913][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 2, ["#A9D6D3"], 1)));
    ᐃᐃ[913][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 1.8, ["#A9D6D3"], 2)));
    ᐃᐃ[913][v585.ᐃⲆΔ].push(f54(f206(v1427 * 1.8, ["#115E60"], 0)));
    ᐃᐃ[913][v585.ᐃⲆΔ].push(f54(f206(v1427 * 2, ["#115E60"], 1)));
    ᐃᐃ[913][v585.ᐃⲆΔ].push(f54(f206(v1427 * 1.8, ["#115E60"], 2)));
    ᐃᐃ[914] = [];
    ᐃᐃ[914][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[914][v585.ᐃⲆΔ] = [];
    ᐃᐃ[914][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 1.9, ["#2A8B9B"], 0)));
    ᐃᐃ[914][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 2.1, ["#2A8B9B"], 1)));
    ᐃᐃ[914][v585.ᐃⲆᐃ].push(f54(f206(v1427 * 1.9, ["#2A8B9B"], 2)));
    ᐃᐃ[914][v585.ᐃⲆΔ].push(f54(f206(v1427 * 1.9, ["#0F464C"], 0)));
    ᐃᐃ[914][v585.ᐃⲆΔ].push(f54(f206(v1427 * 2.1, ["#0F464C"], 1)));
    ᐃᐃ[914][v585.ᐃⲆΔ].push(f54(f206(v1427 * 1.9, ["#0F464C"], 2)));
    ᐃᐃ[912] = [];
    ᐃᐃ[912][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[912][v585.ᐃⲆΔ] = [];
    ᐃᐃ[912][v585.ᐃⲆᐃ].push(f54(f173(v1427 * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃᐃ[912][v585.ᐃⲆᐃ].push(f54(f173(v1427 * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃᐃ[912][v585.ᐃⲆᐃ].push(f54(f173(v1427 * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃᐃ[912][v585.ᐃⲆΔ].push(f54(f173(v1427 * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃᐃ[912][v585.ᐃⲆΔ].push(f54(f173(v1427 * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃᐃ[912][v585.ᐃⲆΔ].push(f54(f173(v1427 * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃᐃ[856] = [];
    ᐃᐃ[856][v585.ᐃⲆᐃ] = f54(f250(v1427 * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ᐃᐃ[856][v585.ᐃⲆΔ] = f54(f250(v1427 * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ᐃᐃ[906] = f54(function (p1131, p1132) {
      var v1480 = document.createElement("canvas");
      var v1481 = v1480.getContext("2d");
      v1480.width = p1131 * 376;
      v1480.height = p1131 * 371;
      v1481.globalAlpha = 1;
      v1481.beginPath();
      v1481.lineCap = "round";
      v1481.lineJoin = "round";
      v1481.moveTo(p1131 * 191.633544921875, p1131 * 123.98580932617188);
      v1481.bezierCurveTo(p1131 * 215.633544921875, p1131 * 85.98580932617188, p1131 * 187.633544921875, p1131 * 71.98580932617188, p1131 * 202.633544921875, p1131 * 19.985809326171875);
      v1481.bezierCurveTo(p1131 * 231.633544921875, p1131 * 68.98580932617188, p1131 * 253.633544921875, p1131 * 71.98580932617188, p1131 * 256.633544921875, p1131 * 93.98580932617188);
      v1481.bezierCurveTo(p1131 * 306.633544921875, p1131 * 64.98580932617188, p1131 * 319.633544921875, p1131 * 61.985809326171875, p1131 * 350.633544921875, p1131 * 58.985809326171875);
      v1481.bezierCurveTo(p1131 * 280.633544921875, p1131 * 86.98580932617188, p1131 * 281.633544921875, p1131 * 106.98580932617188, p1131 * 268.633544921875, p1131 * 130.98580932617188);
      v1481.bezierCurveTo(p1131 * 295.633544921875, p1131 * 158.98580932617188, p1131 * 328.633544921875, p1131 * 155.98580932617188, p1131 * 353.633544921875, p1131 * 90.98580932617188);
      v1481.bezierCurveTo(p1131 * 371.633544921875, p1131 * 158.98580932617188, p1131 * 337.633544921875, p1131 * 210.98580932617188, p1131 * 286.633544921875, p1131 * 209.98580932617188);
      v1481.bezierCurveTo(p1131 * 323.633544921875, p1131 * 230.98580932617188, p1131 * 317.633544921875, p1131 * 274.9858093261719, p1131 * 356.633544921875, p1131 * 305.9858093261719);
      v1481.bezierCurveTo(p1131 * 288.633544921875, p1131 * 297.9858093261719, p1131 * 288.633544921875, p1131 * 265.9858093261719, p1131 * 275.633544921875, p1131 * 266.9858093261719);
      v1481.bezierCurveTo(p1131 * 280.633544921875, p1131 * 294.9858093261719, p1131 * 315.633544921875, p1131 * 306.9858093261719, p1131 * 336.633544921875, p1131 * 316.9858093261719);
      v1481.bezierCurveTo(p1131 * 295.633544921875, p1131 * 318.9858093261719, p1131 * 264.633544921875, p1131 * 302.9858093261719, p1131 * 254.633544921875, p1131 * 289.9858093261719);
      v1481.bezierCurveTo(p1131 * 252.633544921875, p1131 * 301.9858093261719, p1131 * 224.633544921875, p1131 * 315.9858093261719, p1131 * 201.633544921875, p1131 * 356.9858093261719);
      v1481.bezierCurveTo(p1131 * 195.633544921875, p1131 * 313.9858093261719, p1131 * 195.633544921875, p1131 * 308.9858093261719, p1131 * 196.633544921875, p1131 * 307.9858093261719);
      v1481.bezierCurveTo(p1131 * 197.633544921875, p1131 * 289.9858093261719, p1131 * 207.633544921875, p1131 * 283.9858093261719, p1131 * 195.633544921875, p1131 * 258.9858093261719);
      v1481.bezierCurveTo(p1131 * 182.633544921875, p1131 * 282.9858093261719, p1131 * 190.633544921875, p1131 * 287.9858093261719, p1131 * 193.633544921875, p1131 * 297.9858093261719);
      v1481.bezierCurveTo(p1131 * 195.633544921875, p1131 * 306.9858093261719, p1131 * 191.633544921875, p1131 * 334.9858093261719, p1131 * 187.633544921875, p1131 * 354.9858093261719);
      v1481.bezierCurveTo(p1131 * 165.633544921875, p1131 * 320.9858093261719, p1131 * 138.633544921875, p1131 * 307.9858093261719, p1131 * 135.633544921875, p1131 * 288.9858093261719);
      v1481.bezierCurveTo(p1131 * 110.633544921875, p1131 * 318.9858093261719, p1131 * 68.633544921875, p1131 * 323.9858093261719, p1131 * 49.633544921875, p1131 * 320.9858093261719);
      v1481.bezierCurveTo(p1131 * 88.633544921875, p1131 * 308.9858093261719, p1131 * 108.633544921875, p1131 * 284.9858093261719, p1131 * 118.633544921875, p1131 * 258.9858093261719);
      v1481.bezierCurveTo(p1131 * 86.633544921875, p1131 * 264.9858093261719, p1131 * 75.633544921875, p1131 * 310.9858093261719, p1131 * 19.633544921875, p1131 * 304.9858093261719);
      v1481.bezierCurveTo(p1131 * 54.633544921875, p1131 * 276.9858093261719, p1131 * 59.633544921875, p1131 * 214.98580932617188, p1131 * 105.633544921875, p1131 * 205.98580932617188);
      v1481.bezierCurveTo(p1131 * 14.633544921875, p1131 * 201.98580932617188, p1131 * 24.633544921875, p1131 * 141.98580932617188, p1131 * 25.633544921875, p1131 * 82.98580932617188);
      v1481.bezierCurveTo(p1131 * 49.633544921875, p1131 * 168.98580932617188, p1131 * 87.633544921875, p1131 * 141.98580932617188, p1131 * 112.633544921875, p1131 * 123.98580932617188);
      v1481.bezierCurveTo(p1131 * 95.633544921875, p1131 * 75.98580932617188, p1131 * 70.633544921875, p1131 * 68.98580932617188, p1131 * 35.633544921875, p1131 * 50.985809326171875);
      v1481.bezierCurveTo(p1131 * 70.633544921875, p1131 * 53.985809326171875, p1131 * 102.633544921875, p1131 * 65.98580932617188, p1131 * 125.633544921875, p1131 * 84.98580932617188);
      v1481.bezierCurveTo(p1131 * 133.633544921875, p1131 * 69.98580932617188, p1131 * 166.633544921875, p1131 * 42.985809326171875, p1131 * 176.633544921875, p1131 * 21.985809326171875);
      v1481.bezierCurveTo(p1131 * 185.633544921875, p1131 * 49.985809326171875, p1131 * 168.633544921875, p1131 * 95.98580932617188, p1131 * 191.633544921875, p1131 * 121.98580932617188);
      v1481.closePath();
      f88(v1481, p1132[0], p1132[0], p1131 * 12);
      return v1480;
    }(v1427 * 0.8, ["#B6222A"]));
    ᐃᐃ[892] = [];
    ᐃᐃ[892][v585.ᐃⲆᐃ] = f54(f264(v1427 * 0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ᐃᐃ[892][v585.ᐃⲆΔ] = f54(f264(v1427 * 0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ᐃᐃ[907] = f54(function (p1133, p1134) {
      var v1482 = document.createElement("canvas");
      var v1483 = v1482.getContext("2d");
      v1482.width = p1133 * 158;
      v1482.height = p1133 * 201;
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 96.5, p1133 * 76.421875);
      v1483.bezierCurveTo(p1133 * 100.5, p1133 * 64.421875, p1133 * 103.5, p1133 * 62.421875, p1133 * 110.5, p1133 * 65.421875);
      v1483.bezierCurveTo(p1133 * 116.5, p1133 * 66.421875, p1133 * 117.5, p1133 * 67.421875, p1133 * 112.5, p1133 * 73.421875);
      v1483.bezierCurveTo(p1133 * 107, p1133 * 79.921875, p1133 * 107, p1133 * 79.921875, p1133 * 101.5, p1133 * 86.421875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 61.5, p1133 * 78.421875);
      v1483.bezierCurveTo(p1133 * 57.5, p1133 * 73.421875, p1133 * 51.5, p1133 * 66.421875, p1133 * 45.5, p1133 * 68.421875);
      v1483.bezierCurveTo(p1133 * 32.5, p1133 * 73.421875, p1133 * 38.5, p1133 * 75.421875, p1133 * 46.5, p1133 * 81.421875);
      v1483.bezierCurveTo(p1133 * 51.5, p1133 * 84.921875, p1133 * 51.5, p1133 * 84.921875, p1133 * 56.5, p1133 * 88.421875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 116.5, p1133 * 127.421875);
      v1483.bezierCurveTo(p1133 * 124.5, p1133 * 108.421875, p1133 * 129.5, p1133 * 104.421875, p1133 * 141.5, p1133 * 107.421875);
      v1483.bezierCurveTo(p1133 * 156.5, p1133 * 112.421875, p1133 * 153.5, p1133 * 113.421875, p1133 * 132.5, p1133 * 134.421875);
      v1483.bezierCurveTo(p1133 * 123.5, p1133 * 141.921875, p1133 * 123.5, p1133 * 141.921875, p1133 * 114.5, p1133 * 149.421875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 41.5, p1133 * 134.421875);
      v1483.bezierCurveTo(p1133 * 30.5, p1133 * 119.421875, p1133 * 25.5, p1133 * 111.421875, p1133 * 12.5, p1133 * 115.421875);
      v1483.bezierCurveTo(p1133 * 4.5, p1133 * 120.421875, p1133 * 4.5, p1133 * 121.421875, p1133 * 26.5, p1133 * 142.421875);
      v1483.bezierCurveTo(p1133 * 35, p1133 * 149.921875, p1133 * 35, p1133 * 149.921875, p1133 * 43.5, p1133 * 157.421875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 78.5, p1133 * 51.921875);
      v1483.bezierCurveTo(p1133 * 99.5, p1133 * 75.921875, p1133 * 110.5, p1133 * 96.921875, p1133 * 118.5, p1133 * 120.921875);
      v1483.bezierCurveTo(p1133 * 121.5, p1133 * 140.921875, p1133 * 107.5, p1133 * 179.921875, p1133 * 75.5, p1133 * 183.921875);
      v1483.bezierCurveTo(p1133 * 30.5, p1133 * 169.921875, p1133 * 37.5, p1133 * 131.921875, p1133 * 34.5, p1133 * 120.921875);
      v1483.bezierCurveTo(p1133 * 41.5, p1133 * 89.921875, p1133 * 61.5, p1133 * 67.921875, p1133 * 78.5, p1133 * 51.921875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 72.5, p1133 * 72.421875);
      v1483.bezierCurveTo(p1133 * 76.5, p1133 * 79.421875, p1133 * 79.5, p1133 * 80.421875, p1133 * 83.5, p1133 * 73.421875);
      v1483.bezierCurveTo(p1133 * 80.5, p1133 * 96.921875, p1133 * 79.5, p1133 * 114.421875, p1133 * 77.5, p1133 * 120.421875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 42.5, p1133 * 163.421875);
      v1483.bezierCurveTo(p1133 * 62.5, p1133 * 185.421875, p1133 * 86.5, p1133 * 186.421875, p1133 * 111.5, p1133 * 165.421875);
      v1483.bezierCurveTo(p1133 * 107.5, p1133 * 176.421875, p1133 * 95.5, p1133 * 187.421875, p1133 * 75.5, p1133 * 188.421875);
      v1483.bezierCurveTo(p1133 * 53.5, p1133 * 188.421875, p1133 * 43.5, p1133 * 171.421875, p1133 * 42.5, p1133 * 164.421875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 79.5, p1133 * 61.421875);
      v1483.bezierCurveTo(p1133 * 88.5, p1133 * 31.421875, p1133 * 81.5, p1133 * 16.421875, p1133 * 75.5, p1133 * 7.421875);
      v1483.bezierCurveTo(p1133 * 77.5, p1133 * 28.421875, p1133 * 77.5, p1133 * 37.421875, p1133 * 68.5, p1133 * 42.421875);
      v1483.bezierCurveTo(p1133 * 79.5, p1133 * 57.421875, p1133 * 79.5, p1133 * 58.421875, p1133 * 80.5, p1133 * 61.421875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      v1483.beginPath();
      v1483.lineCap = "round";
      v1483.lineJoin = "round";
      v1483.moveTo(p1133 * 72.5, p1133 * 72.421875);
      v1483.bezierCurveTo(p1133 * 76.5, p1133 * 79.421875, p1133 * 79.5, p1133 * 80.421875, p1133 * 83.5, p1133 * 73.421875);
      v1483.bezierCurveTo(p1133 * 80.5, p1133 * 96.921875, p1133 * 79.5, p1133 * 114.421875, p1133 * 77.5, p1133 * 120.421875);
      v1483.closePath();
      f88(v1483, p1134[0], p1134[0], p1133 * 10);
      return v1482;
    }(v1427 * 0.8, ["#B6222A"]));
    ᐃᐃ[1178] = [];
    ᐃᐃ[1178][v585.ᐃⲆᐃ] = f54(f103(v1427 * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ᐃᐃ[1178][v585.ᐃⲆΔ] = f54(f103(v1427 * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃᐃ[1179] = [];
    ᐃᐃ[1179][v585.ᐃⲆᐃ] = f54(f103(v1427 * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ᐃᐃ[1179][v585.ᐃⲆΔ] = f54(f103(v1427 * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ᐃᐃ[v585.ΔᐃⲆΔΔⵠⵠ] = [];
    ᐃᐃ[v585.ΔᐃⲆΔΔⵠⵠ][v585.ᐃⲆᐃ] = f54(f103(v1427 * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ᐃᐃ[v585.ΔᐃⲆΔΔⵠⵠ][v585.ᐃⲆΔ] = f54(f103(v1427 * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃᐃ[1180] = f54(f113(v1427 * 0.4, ["#B6222A"]));
    ᐃᐃ[1181] = f54(f113(v1427 * 0.4, ["#B6222A"]));
    ᐃᐃ[v585.ⵠᐃΔⵠⵠⵠᐃᐃⲆ] = f54(f113(v1427 * 0.4, ["#B6222A"]));
    ᐃᐃ[340] = f54(f189(v1427 * 0.35, vVVVVV6232, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ᐃᐃ[339] = f54(f152(v1427 * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ᐃᐃ[1162] = [];
    ᐃᐃ[1162][v585.ᐃⲆᐃ] = f54(f141(v1427 * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ᐃᐃ[1162][v585.ᐃⲆΔ] = f54(f141(v1427 * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ᐃᐃ[1163] = [];
    ᐃᐃ[1163][v585.ᐃⲆᐃ] = f54(f141(v1427 * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ᐃᐃ[1163][v585.ᐃⲆΔ] = f54(f141(v1427 * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ᐃᐃ[1170] = [];
    ᐃᐃ[1170][v585.ᐃⲆᐃ] = f54(f139(v1427 * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃᐃ[1170][v585.ᐃⲆΔ] = f54(f139(v1427 * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃᐃ[1171] = [];
    ᐃᐃ[1171][v585.ᐃⲆᐃ] = f54(f125(v1427 * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃᐃ[1171][v585.ᐃⲆΔ] = f54(f125(v1427 * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃᐃ[1172] = [];
    ᐃᐃ[1172][v585.ᐃⲆᐃ] = f54(f139(v1427 * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃᐃ[1172][v585.ᐃⲆΔ] = f54(f139(v1427 * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃᐃ[1173] = [];
    ᐃᐃ[1173][v585.ᐃⲆᐃ] = f54(f125(v1427 * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃᐃ[1173][v585.ᐃⲆΔ] = f54(f125(v1427 * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃᐃ[1164] = f54(f128(v1427 * 0.35, ["#B6222A"]));
    ᐃᐃ[1165] = f54(f139(v1427 * 0.35, 0, [undefined, "#B6222A"]));
    ᐃᐃ[1166] = f54(f125(v1427 * 0.35, 0, [vVVVVVVUndefined14, "#B6222A"]));
    ᐃᐃ[1167] = f54(f128(v1427 * 0.35, ["#22E066"]));
    ᐃᐃ[1168] = f54(f139(v1427 * 0.35, 0, [undefined, "#22E066"]));
    ᐃᐃ[1169] = f54(f125(v1427 * 0.35, 0, [undefined, "#22E066"]));
    ᐃᐃ[84] = [];
    ᐃᐃ[84][v585.ᐃⲆᐃ] = f54(f193(v1427 * 0.3, vVVV63, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ᐃᐃ[84][v585.ᐃⲆΔ] = f54(f193(v1427 * 0.3, v6, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ᐃᐃ[83] = [];
    ᐃᐃ[83][v585.ᐃⲆᐃ] = f54(f159(v1427 * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ᐃᐃ[83][v585.ᐃⲆΔ] = f54(f159(v1427 * 0.45, vVVVVV6232, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ᐃᐃ[234] = [];
    ᐃᐃ[234][v585.ᐃⲆᐃ] = f54(f263(v1427 * 0.63, vVVVV6233, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ᐃᐃ[234][v585.ᐃⲆΔ] = f54(f263(v1427 * 0.63, vVVVV6322, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃᐃ[216] = [];
    ᐃᐃ[216][v585.ᐃⲆᐃ] = f54(f243(v1427, vVVVV632, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ᐃᐃ[216][v585.ᐃⲆΔ] = f54(f243(v1427, vVVV62, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃᐃ[331] = [];
    ᐃᐃ[331][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃⵠⲆΔᐃΔⵠⲆ;
    ᐃᐃ[331][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⲆⲆΔΔΔⲆⵠ;
    ᐃᐃ[292] = [];
    ᐃᐃ[292][v585.ᐃⲆᐃ] = f54(f94(v1427 * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃᐃ[292][v585.ᐃⲆΔ] = f54(f94(v1427 * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃᐃ[1102] = [ᐃᐃ[292]];
    ᐃᐃ[1102][1] = [];
    ᐃᐃ[1102][2] = [];
    ᐃᐃ[1102][1][v585.ᐃⲆᐃ] = f54(f98(v1427 * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃᐃ[1102][1][v585.ᐃⲆΔ] = f54(f98(v1427 * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃᐃ[1102][2][v585.ᐃⲆᐃ] = f54(f101(v1427 * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃᐃ[1102][2][v585.ᐃⲆΔ] = f54(f101(v1427 * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃᐃ[85] = [];
    ᐃᐃ[85][v585.ᐃⲆᐃ] = f54(f91(3 - Math.PI / 2, f257(v1427 * 0.6, vVVVVVV6232, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ᐃᐃ[85][v585.ᐃⲆΔ] = f54(f91(3 - Math.PI / 2, f257(v1427 * 0.6, vV6, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ᐃᐃ[977] = [];
    ᐃᐃ[977][v585.ᐃⲆᐃ] = f54(f116(v1427 * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ᐃᐃ[977][v585.ᐃⲆΔ] = f54(f116(v1427 * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ᐃᐃ[1047] = f54(function (p1135, p1136) {
      var v1484 = document.createElement("canvas");
      var v1485 = v1484.getContext("2d");
      v1484.width = p1135 * 650;
      v1484.height = p1135 * 650;
      v1485.scale(1.9, 1.9);
      v1485.save();
      v1485.translate(p1135 * 202.5, p1135 * 147.5);
      f86(v1485, p1135 * -96.5, p1135 * -21.5, p1135 * 193, p1135 * 193, p1135 * 0);
      v1485.restore();
      f88(v1485, p1136[4], p1136[1], p1135 * 12);
      v1485.save();
      v1485.translate(p1135 * 203.5, p1135 * 121.5);
      f86(v1485, p1135 * -115.5, p1135 * -20.5, p1135 * 231, p1135 * 41, p1135 * 10);
      v1485.restore();
      f88(v1485, p1136[3], p1136[1], p1135 * 12);
      v1485.save();
      v1485.translate(p1135 * 203.5, p1135 * 299);
      f86(v1485, p1135 * -115.5, p1135 * -20, p1135 * 231, p1135 * 40, p1135 * 10);
      v1485.restore();
      f88(v1485, p1136[3], p1136[1], p1135 * 12);
      v1485.save();
      v1485.translate(p1135 * 298.5, p1135 * 210);
      f86(v1485, p1135 * -20.5, p1135 * -109, p1135 * 41, p1135 * 218, p1135 * 10);
      v1485.restore();
      f88(v1485, p1136[3], p1136[1], p1135 * 12);
      v1485.save();
      v1485.translate(p1135 * 108.5, p1135 * 210);
      f86(v1485, p1135 * -20.5, p1135 * -109, p1135 * 41, p1135 * 218, p1135 * 10);
      v1485.restore();
      f88(v1485, p1136[3], p1136[1], p1135 * 12);
      v1485.save();
      v1485.translate(p1135 * 204, p1135 * 121.5);
      f86(v1485, p1135 * -92, p1135 * -9.5, p1135 * 184, p1135 * 19, p1135 * 10);
      v1485.restore();
      f88(v1485, p1136[3], p1136[3], p1135 * 10);
      v1485.save();
      v1485.translate(p1135 * 197, p1135 * 299);
      f86(v1485, p1135 * 85, p1135 * -9, p1135 * -170, p1135 * 18, p1135 * 10);
      v1485.restore();
      f88(v1485, p1136[3], p1136[3], p1135 * 10);
      v1485.beginPath();
      v1485.lineCap = "round";
      v1485.lineJoin = "round";
      v1485.moveTo(p1135 * 94, p1135 * 317);
      v1485.bezierCurveTo(p1135 * 110.5, p1135 * 299.5, p1135 * 110.5, p1135 * 299.5, p1135 * 127, p1135 * 282);
      v1485.closePath();
      f88(v1485, undefined, p1136[1], p1135 * 12);
      v1485.beginPath();
      v1485.lineCap = "round";
      v1485.lineJoin = "round";
      v1485.moveTo(p1135 * 279, p1135 * 142);
      v1485.bezierCurveTo(p1135 * 296.5, p1135 * 125.5, p1135 * 296.5, p1135 * 125.5, p1135 * 314, p1135 * 109);
      v1485.closePath();
      f88(v1485, undefined, p1136[1], p1135 * 12);
      v1485.beginPath();
      v1485.lineCap = "round";
      v1485.lineJoin = "round";
      v1485.moveTo(p1135 * 93, p1135 * 106);
      v1485.bezierCurveTo(p1135 * 110.5, p1135 * 124, p1135 * 110.5, p1135 * 124, p1135 * 128, p1135 * 142);
      v1485.closePath();
      f88(v1485, undefined, p1136[1], p1135 * 12);
      v1485.beginPath();
      v1485.lineCap = "round";
      v1485.lineJoin = "round";
      v1485.moveTo(p1135 * 281, p1135 * 282);
      v1485.bezierCurveTo(p1135 * 296, p1135 * 297.5, p1135 * 296, p1135 * 297.5, p1135 * 311, p1135 * 313);
      v1485.closePath();
      f88(v1485, undefined, p1136[1], p1135 * 12);
      return v1484;
    }(v1427 * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ᐃᐃ[978] = f54(function (p1137, p1138) {
      var v1486 = document.createElement("canvas");
      var v1487 = v1486.getContext("2d");
      v1486.width = p1137 * 400;
      v1486.height = p1137 * 400;
      v1487.save();
      v1487.translate(p1137 * 202.5, p1137 * 147.5);
      f86(v1487, p1137 * -96.5, p1137 * -21.5, p1137 * 193, p1137 * 43, p1137 * 0);
      v1487.restore();
      f88(v1487, p1138[0], p1138[0], p1137 * 12);
      v1487.save();
      v1487.translate(p1137 * 202.5, p1137 * 190.5);
      f86(v1487, p1137 * 96.5, p1137 * -21.5, p1137 * -193, p1137 * 43, p1137 * 0);
      v1487.restore();
      f88(v1487, p1138[0], p1138[0], p1137 * 12);
      v1487.save();
      v1487.translate(p1137 * 202.5, p1137 * 233.5);
      f86(v1487, p1137 * -96.5, p1137 * -20.5, p1137 * 193, p1137 * 41, p1137 * 0);
      v1487.restore();
      f88(v1487, p1138[0], p1138[0], p1137 * 12);
      v1487.save();
      v1487.translate(p1137 * 202.5, p1137 * 275);
      f86(v1487, p1137 * 96.5, p1137 * -21, p1137 * -193, p1137 * 42, p1137 * 0);
      v1487.restore();
      f88(v1487, p1138[0], p1138[0], p1137 * 12);
      v1487.save();
      v1487.translate(p1137 * 203.5, p1137 * 121.5);
      f86(v1487, p1137 * -115.5, p1137 * -20.5, p1137 * 231, p1137 * 41, p1137 * 10);
      v1487.restore();
      f88(v1487, p1138[0], p1138[0], p1137 * 12);
      v1487.save();
      v1487.translate(p1137 * 203.5, p1137 * 299);
      f86(v1487, p1137 * -115.5, p1137 * -20, p1137 * 231, p1137 * 40, p1137 * 10);
      v1487.restore();
      f88(v1487, p1138[0], p1138[0], p1137 * 12);
      v1487.save();
      v1487.translate(p1137 * 298.5, p1137 * 210);
      f86(v1487, p1137 * -20.5, p1137 * -109, p1137 * 41, p1137 * 218, p1137 * 10);
      v1487.restore();
      f88(v1487, p1138[0], p1138[0], p1137 * 12);
      v1487.save();
      v1487.translate(p1137 * 108.5, p1137 * 210);
      f86(v1487, p1137 * -20.5, p1137 * -109, p1137 * 41, p1137 * 218, p1137 * 10);
      v1487.restore();
      f88(v1487, p1138[0], p1138[0], p1137 * 12);
      return v1486;
    }(v1427 * 0.3, ["#BB0000"]));
    ᐃᐃ[877] = f119(1, [{
      f: f242,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃᐃ[243] = f119(1.5, [{
      f: f231,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃᐃ[888] = f266(v1427 * 0.35, ["#072428", "#67A242", "#67A242"], 0);
    ᐃᐃ[889] = f266(v1427 * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ᐃᐃ[890] = f266(v1427 * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ᐃᐃ[891] = f266(v1427 * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ⲆⲆⵠΔΔΔᐃ) {
      ᐃᐃ[388] = f54(function (p1139) {
        var v1488 = document.createElement("canvas");
        var v1489 = v1488.getContext("2d");
        var v1490 = p1139 * 200;
        var v1491 = p1139 * 180;
        var v1492 = p1139 * 8;
        v1488.width = v1490;
        v1488.height = v1491;
        v1489.beginPath();
        f86(v1489, 0, 0, v1490, v1491 - v1492, v1492);
        v1489.globalAlpha = 0.8;
        f88(v1489, "#1D6055");
        v1489.globalAlpha = 1;
        var vF157 = f157(p1139, "Leaderboard", 25, "#FFF");
        v1489.drawImage(vF157, (v1490 - vF157.width) / 2, p1139 * 5);
        return v1488;
      }(v1427));
    } else {
      ᐃᐃ[388] = f54(function (p1140) {
        var v1493 = document.createElement("canvas");
        var v1494 = v1493.getContext("2d");
        var v1495 = p1140 * 200;
        var v1496 = p1140 * 270;
        var v1497 = p1140 * 8;
        v1493.width = v1495;
        v1493.height = v1496 + 20;
        v1494.beginPath();
        f86(v1494, 0, 0, v1495, v1496 - v1497, v1497);
        v1494.globalAlpha = 0.5;
        f88(v1494, "#1D6055");
        v1494.globalAlpha = 1;
        var vF1572 = f157(p1140, "Leaderboard", 25, "#FFF");
        v1494.drawImage(vF1572, (v1495 - vF1572.width) / 2, p1140 * 5);
        return v1493;
      }(v1427));
    }
    if (ⲆⲆⵠΔΔΔᐃ) {
      ᐃᐃ[377] = f54(function (p1141) {
        var v1498 = document.createElement("canvas");
        var v1499 = v1498.getContext("2d");
        var v1500 = p1141 * 335;
        var v1501 = p1141 * 250;
        var v1502 = p1141 * 120;
        var v1503 = p1141 * 20;
        var v1504 = p1141 * 35;
        var v1505 = p1141 * 65;
        var v1506 = p1141 * 2;
        var v1507 = p1141 * 4;
        v1498.width = v1500;
        v1498.height = v1502;
        v1499.beginPath();
        v1499.translate(0, p1141 * 15);
        f86(v1499, v1505, 0, v1501, v1503, v1506);
        f88(v1499, null, "#69A148", v1507);
        v1499.translate(0, v1504);
        f86(v1499, v1505, 0, v1501, v1503, v1506);
        f88(v1499, null, "#AF352A", v1507);
        v1499.translate(0, v1504);
        f86(v1499, v1505, 0, v1501, v1503, v1506);
        f88(v1499, null, "#669BB1", v1507);
        return v1498;
      }(0.75));
    } else {
      ᐃᐃ[377] = f54(function (p1142) {
        var v1508 = document.createElement("canvas");
        var v1509 = v1508.getContext("2d");
        var v1510 = p1142 * 950;
        var v1511 = p1142 * 180;
        var v1512 = p1142 * 50;
        var v1513 = p1142 * 20;
        var v1514 = p1142 * 240;
        var v1515 = p1142 * 35;
        var v1516 = p1142 * 1;
        var v1517 = p1142 * 4;
        var v1518 = p1142 * 4;
        v1508.width = v1510;
        v1508.height = v1512;
        v1509.translate(0, p1142 * 15);
        f86(v1509, v1515, v1516, v1511, v1513, v1517);
        f88(v1509, null, "#69A148", v1518);
        var v1519 = ᐃᐃ[888];
        v1509.drawImage(v1519, 17, -8);
        v1509.translate(v1514, 0);
        f86(v1509, v1515, v1516, v1511, v1513, v1517);
        f88(v1509, null, "#AF352A", v1518);
        v1519 = ᐃᐃ[890];
        v1509.drawImage(v1519, 17, -9);
        v1509.translate(v1514, 0);
        f86(v1509, v1515, v1516, v1511, v1513, v1517);
        f88(v1509, null, "#669BB1", v1518);
        v1519 = ᐃᐃ[889];
        v1509.drawImage(v1519, 17, -8);
        v1509.translate(v1514, 0);
        f86(v1509, v1515, v1516, v1511, v1513, v1517);
        f88(v1509, null, "#074A87", v1518);
        v1519 = ᐃᐃ[891];
        v1509.drawImage(v1519, 17, -8);
        return v1508;
      }(v1427));
    }
    if (ⲆⲆⵠΔΔΔᐃ) {
      ᐃᐃ[827] = f54(f239(0.75));
    } else {
      ᐃᐃ[827] = f54(f239(v1427));
    }
    ᐃᐃ[1041] = f54(f237(v1427 * 0.16, vVV6, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ᐃᐃ[675] = f54(f91(5.8, f140(v1427 * 0.15, vVVVVVV6232, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ᐃᐃ[393] = [];
    ᐃᐃ[603] = [];
    for (v1430 = 0; v1430 < 40; v1430++) {
      ᐃᐃ[603][v1430] = f157(v1427, "" + (v1430 + 1), 12, "#FFF");
    }
    ᐃᐃ[957] = [];
    ᐃᐃ[957].push(f54(f232(v1427 * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ᐃᐃ[957].push(f54(f232(v1427 * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ᐃᐃ[957].push(f54(f232(v1427 * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ᐃᐃ[974] = [];
    ᐃᐃ[974].push(f54(function (p1143) {
      var v1520 = document.createElement("canvas");
      var v1521 = v1520.getContext("2d");
      v1520.width = p1143 * 321;
      v1520.height = p1143 * 345;
      v1521.translate(0, p1143 * 5);
      v1521.translate(0, p1143 * 20);
      f92(v1521, p1143 * 160.5, p1143 * 159.5, p1143 * 156.39595138242822);
      f88(v1521, "#322413", "#322413", p1143 * 4);
      v1521.translate(0, p1143 * -20);
      f92(v1521, p1143 * 160.5, p1143 * 159.5, p1143 * 156.39595138242822);
      f88(v1521, "#392C16", "#5E3E1A", p1143 * 10);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 31.999969482421875, p1143 * 163.07290649414062);
      v1521.bezierCurveTo(p1143 * 22.999969482421875, p1143 * 67.07290649414062, p1143 * 106, p1143 * 20.072906494140625, p1143 * 162, p1143 * 23.072906494140625);
      v1521.bezierCurveTo(p1143 * 269.9999694824219, p1143 * 31.072906494140625, p1143 * 292.9999694824219, p1143 * 120.07290649414062, p1143 * 294.9999694824219, p1143 * 161.07290649414062);
      v1521.bezierCurveTo(p1143 * 165.49996948242188, p1143 * 162.07290649414062, p1143 * 165.49996948242188, p1143 * 162.07290649414062, p1143 * 35.999969482421875, p1143 * 163.07290649414062);
      v1521.closePath();
      f88(v1521, "#12432D");
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 32.999969482421875, p1143 * 165.07290649414062);
      v1521.bezierCurveTo(p1143 * 16.999969482421875, p1143 * 221.07290649414062, p1143 * 85, p1143 * 289.0729064941406, p1143 * 156, p1143 * 294.0729064941406);
      v1521.bezierCurveTo(p1143 * 263.9999694824219, p1143 * 293.0729064941406, p1143 * 295.9999694824219, p1143 * 199.07290649414062, p1143 * 294.9999694824219, p1143 * 159.07290649414062);
      v1521.closePath();
      f88(v1521, "#3A2A0D");
      f92(v1521, p1143 * 161, p1143 * 158.07290649414062, p1143 * 133.4053971921676);
      f88(v1521, undefined, "#5E3E1A", p1143 * 10);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 31.999969482421875, p1143 * 161.62844848632812);
      v1521.bezierCurveTo(p1143 * 162.49996948242188, p1143 * 161.62844848632812, p1143 * 162.49996948242188, p1143 * 161.62844848632812, p1143 * 292.9999694824219, p1143 * 161.62844848632812);
      v1521.closePath();
      f88(v1521, undefined, "#5E3E1A", p1143 * 12);
      v1521.translate(0, p1143 * 8);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 66, p1143 * 158.29513549804688);
      v1521.bezierCurveTo(p1143 * 86, p1143 * 158.29513549804688, p1143 * 86, p1143 * 158.29513549804688, p1143 * 106, p1143 * 158.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#c7a726", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 57.999969482421875, p1143 * 117.29513549804688);
      v1521.bezierCurveTo(p1143 * 85, p1143 * 128.29513549804688, p1143 * 85, p1143 * 128.29513549804688, p1143 * 113, p1143 * 139.29513549804688);
      v1521.closePath();
      f88(v1521, vVVVVUndefined143, "#c7a726", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 95, p1143 * 90.29513549804688);
      v1521.bezierCurveTo(p1143 * 112, p1143 * 105.79513549804688, p1143 * 112, p1143 * 105.79513549804688, p1143 * 129, p1143 * 121.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#c7a726", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 116, p1143 * 52.850677490234375);
      v1521.bezierCurveTo(p1143 * 130, p1143 * 83.85067749023438, p1143 * 130, p1143 * 83.85067749023438, p1143 * 144, p1143 * 114.85067749023438);
      v1521.closePath();
      f88(v1521, vVVUndefined11, "#c7a726", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 159, p1143 * 61.295135498046875);
      v1521.bezierCurveTo(p1143 * 160.49996948242188, p1143 * 92.29513549804688, p1143 * 160.49996948242188, p1143 * 92.29513549804688, p1143 * 160, p1143 * 123.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#c7a726", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 203, p1143 * 51.295135498046875);
      v1521.bezierCurveTo(p1143 * 190.49996948242188, p1143 * 83.29513549804688, p1143 * 190.49996948242188, p1143 * 83.29513549804688, p1143 * 176, p1143 * 115.29513549804688);
      v1521.closePath();
      f88(v1521, vVVVVUndefined583, "#c7a726", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 225, p1143 * 89.29513549804688);
      v1521.bezierCurveTo(p1143 * 210.49996948242188, p1143 * 104.79513549804688, p1143 * 210.49996948242188, p1143 * 104.79513549804688, p1143 * 194, p1143 * 120.29513549804688);
      v1521.closePath();
      f88(v1521, vVVUndefined5, "#c7a726", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 266.9999694824219, p1143 * 112.29513549804688);
      v1521.bezierCurveTo(p1143 * 233.49996948242188, p1143 * 127.29513549804688, p1143 * 233.49996948242188, p1143 * 127.29513549804688, p1143 * 199, p1143 * 142.29513549804688);
      v1521.closePath();
      f88(v1521, vVVVVUndefined142, "#c7a726", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 256.9999694824219, p1143 * 155.29513549804688);
      v1521.bezierCurveTo(p1143 * 238.49996948242188, p1143 * 156.29513549804688, p1143 * 238.49996948242188, p1143 * 156.29513549804688, p1143 * 219, p1143 * 157.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#c7a726", p1143 * 12);
      v1521.translate(0, p1143 * -8);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 66, p1143 * 158.29513549804688);
      v1521.bezierCurveTo(p1143 * 86, p1143 * 158.29513549804688, p1143 * 86, p1143 * 158.29513549804688, p1143 * 106, p1143 * 158.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 57.999969482421875, p1143 * 117.29513549804688);
      v1521.bezierCurveTo(p1143 * 85, p1143 * 128.29513549804688, p1143 * 85, p1143 * 128.29513549804688, p1143 * 113, p1143 * 139.29513549804688);
      v1521.closePath();
      f88(v1521, vVVVVUndefined14, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 95, p1143 * 90.29513549804688);
      v1521.bezierCurveTo(p1143 * 112, p1143 * 105.79513549804688, p1143 * 112, p1143 * 105.79513549804688, p1143 * 129, p1143 * 121.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 116, p1143 * 52.850677490234375);
      v1521.bezierCurveTo(p1143 * 130, p1143 * 83.85067749023438, p1143 * 130, p1143 * 83.85067749023438, p1143 * 144, p1143 * 114.85067749023438);
      v1521.closePath();
      f88(v1521, vVVUndefined14, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 159, p1143 * 61.295135498046875);
      v1521.bezierCurveTo(p1143 * 160.49996948242188, p1143 * 92.29513549804688, p1143 * 160.49996948242188, p1143 * 92.29513549804688, p1143 * 160, p1143 * 123.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 203, p1143 * 51.295135498046875);
      v1521.bezierCurveTo(p1143 * 190.49996948242188, p1143 * 83.29513549804688, p1143 * 190.49996948242188, p1143 * 83.29513549804688, p1143 * 176, p1143 * 115.29513549804688);
      v1521.closePath();
      f88(v1521, vVVVVVVUndefined14, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 225, p1143 * 89.29513549804688);
      v1521.bezierCurveTo(p1143 * 210.49996948242188, p1143 * 104.79513549804688, p1143 * 210.49996948242188, p1143 * 104.79513549804688, p1143 * 194, p1143 * 120.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 266.9999694824219, p1143 * 112.29513549804688);
      v1521.bezierCurveTo(p1143 * 233.49996948242188, p1143 * 127.29513549804688, p1143 * 233.49996948242188, p1143 * 127.29513549804688, p1143 * 199, p1143 * 142.29513549804688);
      v1521.closePath();
      f88(v1521, vVVVVVUndefined1422, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 256.9999694824219, p1143 * 155.29513549804688);
      v1521.bezierCurveTo(p1143 * 238.49996948242188, p1143 * 156.29513549804688, p1143 * 238.49996948242188, p1143 * 156.29513549804688, p1143 * 219, p1143 * 157.29513549804688);
      v1521.closePath();
      f88(v1521, undefined, "#EDCE4F", p1143 * 12);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 94.00003051757812, p1143 * 164.40341186523438);
      v1521.bezierCurveTo(p1143 * 162.50003051757812, p1143 * 164.40341186523438, p1143 * 230.00003051757812, p1143 * 165.40341186523438, p1143 * 231.00003051757812, p1143 * 164.40341186523438);
      v1521.bezierCurveTo(p1143 * 214.00003051757812, p1143 * 267.4034118652344, p1143 * 92.00003051757812, p1143 * 243.40341186523438, p1143 * 93.00003051757812, p1143 * 165.40341186523438);
      v1521.closePath();
      f88(v1521, "#704618", "#5D3D1A", p1143 * 8);
      v1521.beginPath();
      v1521.lineCap = "round";
      v1521.lineJoin = "round";
      v1521.moveTo(p1143 * 96, p1143 * 166);
      v1521.bezierCurveTo(p1143 * 88, p1143 * 117, p1143 * 129, p1143 * 92, p1143 * 161, p1143 * 91);
      v1521.bezierCurveTo(p1143 * 201, p1143 * 90, p1143 * 223, p1143 * 121, p1143 * 230, p1143 * 161);
      v1521.closePath();
      f88(v1521, "#ECBE35", "#EDCE4F", p1143 * 8);
      f92(v1521, p1143 * 160.00003051757812, p1143 * 166.49432373046875, p1143 * 28.30194339616981);
      f88(v1521, "#392C16", "#5E3E1A", p1143 * 10);
      return v1520;
    }(v1427 * 0.22)));
    ᐃᐃ[974].push(f54(function (p1144) {
      var v1522 = document.createElement("canvas");
      var v1523 = v1522.getContext("2d");
      v1522.width = p1144 * 321;
      v1522.height = p1144 * 345;
      v1523.translate(0, p1144 * 5);
      v1523.translate(0, p1144 * 20);
      f92(v1523, p1144 * 160.5, p1144 * 159.5, p1144 * 156.39595138242822);
      f88(v1523, "#322413", "#322413", p1144 * 4);
      v1523.translate(0, p1144 * -20);
      f92(v1523, p1144 * 160.5, p1144 * 159.5, p1144 * 156.39595138242822);
      f88(v1523, "#392C16", "#5E3E1A", p1144 * 10);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 31.999969482421875, p1144 * 163.07290649414062);
      v1523.bezierCurveTo(p1144 * 22.999969482421875, p1144 * 67.07290649414062, p1144 * 106, p1144 * 20.072906494140625, p1144 * 162, p1144 * 23.072906494140625);
      v1523.bezierCurveTo(p1144 * 269.9999694824219, p1144 * 31.072906494140625, p1144 * 292.9999694824219, p1144 * 120.07290649414062, p1144 * 294.9999694824219, p1144 * 161.07290649414062);
      v1523.bezierCurveTo(p1144 * 165.49996948242188, p1144 * 162.07290649414062, p1144 * 165.49996948242188, p1144 * 162.07290649414062, p1144 * 35.999969482421875, p1144 * 163.07290649414062);
      v1523.closePath();
      f88(v1523, "#3A2A0D");
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 32.999969482421875, p1144 * 165.07290649414062);
      v1523.bezierCurveTo(p1144 * 16.999969482421875, p1144 * 221.07290649414062, p1144 * 85, p1144 * 289.0729064941406, p1144 * 156, p1144 * 294.0729064941406);
      v1523.bezierCurveTo(p1144 * 263.9999694824219, p1144 * 293.0729064941406, p1144 * 295.9999694824219, p1144 * 199.07290649414062, p1144 * 294.9999694824219, p1144 * 159.07290649414062);
      v1523.closePath();
      f88(v1523, "#071A1B");
      f92(v1523, p1144 * 161, p1144 * 158.07290649414062, p1144 * 133.4053971921676);
      f88(v1523, undefined, "#5E3E1A", p1144 * 10);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 31.999969482421875, p1144 * 161.62844848632812);
      v1523.bezierCurveTo(p1144 * 162.49996948242188, p1144 * 161.62844848632812, p1144 * 162.49996948242188, p1144 * 161.62844848632812, p1144 * 292.9999694824219, p1144 * 161.62844848632812);
      v1523.closePath();
      f88(v1523, vVVVVUndefined14, "#5E3E1A", p1144 * 12);
      v1523.translate(0, p1144 * 8);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 66, p1144 * 158.29513549804688);
      v1523.bezierCurveTo(p1144 * 86, p1144 * 158.29513549804688, p1144 * 86, p1144 * 158.29513549804688, p1144 * 106, p1144 * 158.29513549804688);
      v1523.closePath();
      f88(v1523, vUndefined, "#281C08", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 57.999969482421875, p1144 * 117.29513549804688);
      v1523.bezierCurveTo(p1144 * 85, p1144 * 128.29513549804688, p1144 * 85, p1144 * 128.29513549804688, p1144 * 113, p1144 * 139.29513549804688);
      v1523.closePath();
      f88(v1523, vVVUndefined5, "#281C08", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 95, p1144 * 90.29513549804688);
      v1523.bezierCurveTo(p1144 * 112, p1144 * 105.79513549804688, p1144 * 112, p1144 * 105.79513549804688, p1144 * 129, p1144 * 121.29513549804688);
      v1523.closePath();
      f88(v1523, undefined, "#281C08", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 116, p1144 * 52.850677490234375);
      v1523.bezierCurveTo(p1144 * 130, p1144 * 83.85067749023438, p1144 * 130, p1144 * 83.85067749023438, p1144 * 144, p1144 * 114.85067749023438);
      v1523.closePath();
      f88(v1523, vVVVVUndefined14, "#281C08", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 159, p1144 * 61.295135498046875);
      v1523.bezierCurveTo(p1144 * 160.49996948242188, p1144 * 92.29513549804688, p1144 * 160.49996948242188, p1144 * 92.29513549804688, p1144 * 160, p1144 * 123.29513549804688);
      v1523.closePath();
      f88(v1523, vVVVVUndefined583, "#281C08", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 203, p1144 * 51.295135498046875);
      v1523.bezierCurveTo(p1144 * 190.49996948242188, p1144 * 83.29513549804688, p1144 * 190.49996948242188, p1144 * 83.29513549804688, p1144 * 176, p1144 * 115.29513549804688);
      v1523.closePath();
      f88(v1523, vVVVVUndefined1422, "#281C08", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 225, p1144 * 89.29513549804688);
      v1523.bezierCurveTo(p1144 * 210.49996948242188, p1144 * 104.79513549804688, p1144 * 210.49996948242188, p1144 * 104.79513549804688, p1144 * 194, p1144 * 120.29513549804688);
      v1523.closePath();
      f88(v1523, undefined, "#281C08", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 266.9999694824219, p1144 * 112.29513549804688);
      v1523.bezierCurveTo(p1144 * 233.49996948242188, p1144 * 127.29513549804688, p1144 * 233.49996948242188, p1144 * 127.29513549804688, p1144 * 199, p1144 * 142.29513549804688);
      v1523.closePath();
      f88(v1523, undefined, "#281C08", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 256.9999694824219, p1144 * 155.29513549804688);
      v1523.bezierCurveTo(p1144 * 238.49996948242188, p1144 * 156.29513549804688, p1144 * 238.49996948242188, p1144 * 156.29513549804688, p1144 * 219, p1144 * 157.29513549804688);
      v1523.closePath();
      f88(v1523, undefined, "#281C08", p1144 * 12);
      v1523.translate(0, p1144 * -8);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 66, p1144 * 158.29513549804688);
      v1523.bezierCurveTo(p1144 * 86, p1144 * 158.29513549804688, p1144 * 86, p1144 * 158.29513549804688, p1144 * 106, p1144 * 158.29513549804688);
      v1523.closePath();
      f88(v1523, undefined, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 57.999969482421875, p1144 * 117.29513549804688);
      v1523.bezierCurveTo(p1144 * 85, p1144 * 128.29513549804688, p1144 * 85, p1144 * 128.29513549804688, p1144 * 113, p1144 * 139.29513549804688);
      v1523.closePath();
      f88(v1523, vVVVVUndefined143, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 95, p1144 * 90.29513549804688);
      v1523.bezierCurveTo(p1144 * 112, p1144 * 105.79513549804688, p1144 * 112, p1144 * 105.79513549804688, p1144 * 129, p1144 * 121.29513549804688);
      v1523.closePath();
      f88(v1523, vVVUndefined11, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 116, p1144 * 52.850677490234375);
      v1523.bezierCurveTo(p1144 * 130, p1144 * 83.85067749023438, p1144 * 130, p1144 * 83.85067749023438, p1144 * 144, p1144 * 114.85067749023438);
      v1523.closePath();
      f88(v1523, vVVUndefined14, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 159, p1144 * 61.295135498046875);
      v1523.bezierCurveTo(p1144 * 160.49996948242188, p1144 * 92.29513549804688, p1144 * 160.49996948242188, p1144 * 92.29513549804688, p1144 * 160, p1144 * 123.29513549804688);
      v1523.closePath();
      f88(v1523, vVVVVUndefined14, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 203, p1144 * 51.295135498046875);
      v1523.bezierCurveTo(p1144 * 190.49996948242188, p1144 * 83.29513549804688, p1144 * 190.49996948242188, p1144 * 83.29513549804688, p1144 * 176, p1144 * 115.29513549804688);
      v1523.closePath();
      f88(v1523, undefined, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 225, p1144 * 89.29513549804688);
      v1523.bezierCurveTo(p1144 * 210.49996948242188, p1144 * 104.79513549804688, p1144 * 210.49996948242188, p1144 * 104.79513549804688, p1144 * 194, p1144 * 120.29513549804688);
      v1523.closePath();
      f88(v1523, undefined, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 266.9999694824219, p1144 * 112.29513549804688);
      v1523.bezierCurveTo(p1144 * 233.49996948242188, p1144 * 127.29513549804688, p1144 * 233.49996948242188, p1144 * 127.29513549804688, p1144 * 199, p1144 * 142.29513549804688);
      v1523.closePath();
      f88(v1523, undefined, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 256.9999694824219, p1144 * 155.29513549804688);
      v1523.bezierCurveTo(p1144 * 238.49996948242188, p1144 * 156.29513549804688, p1144 * 238.49996948242188, p1144 * 156.29513549804688, p1144 * 219, p1144 * 157.29513549804688);
      v1523.closePath();
      f88(v1523, vVVVVUndefined582, "#5E3C10", p1144 * 12);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 96, p1144 * 166);
      v1523.bezierCurveTo(p1144 * 88, p1144 * 117, p1144 * 129, p1144 * 92, p1144 * 161, p1144 * 91);
      v1523.bezierCurveTo(p1144 * 201, p1144 * 90, p1144 * 223, p1144 * 121, p1144 * 230, p1144 * 161);
      v1523.closePath();
      f88(v1523, "#704618", "#5D3D1A", p1144 * 8);
      v1523.beginPath();
      v1523.lineCap = "round";
      v1523.lineJoin = "round";
      v1523.moveTo(p1144 * 94.00003051757812, p1144 * 164.40341186523438);
      v1523.bezierCurveTo(p1144 * 162.50003051757812, p1144 * 164.40341186523438, p1144 * 230.00003051757812, p1144 * 165.40341186523438, p1144 * 231.00003051757812, p1144 * 164.40341186523438);
      v1523.bezierCurveTo(p1144 * 214.00003051757812, p1144 * 267.4034118652344, p1144 * 92.00003051757812, p1144 * 243.40341186523438, p1144 * 93.00003051757812, p1144 * 165.40341186523438);
      v1523.closePath();
      f88(v1523, "#E1DDD5", "#EAE7E4", p1144 * 8);
      f92(v1523, p1144 * 160.00003051757812, p1144 * 166.49432373046875, p1144 * 28.30194339616981);
      f88(v1523, "#392C16", "#5E3E1A", p1144 * 10);
      return v1522;
    }(v1427 * 0.22)));
    ᐃᐃ[975] = f54(function (p1145) {
      var v1524 = document.createElement("canvas");
      var v1525 = v1524.getContext("2d");
      v1524.width = p1145 * 321;
      v1524.height = p1145 * 345;
      v1525.translate(0, p1145 * 5);
      f92(v1525, p1145 * 161.00003051757812, p1145 * 165.40341186523438, p1145 * 20.808652046684813);
      f88(v1525, "#C09D6F", "#A37943", p1145 * 10);
      v1525.beginPath();
      v1525.lineCap = "round";
      v1525.lineJoin = "round";
      v1525.moveTo(p1145 * 162.00003051757812, p1145 * 48.403411865234375);
      v1525.bezierCurveTo(p1145 * 172.50003051757812, p1145 * 67.40341186523438, p1145 * 172.50003051757812, p1145 * 67.40341186523438, p1145 * 183.00003051757812, p1145 * 86.40341186523438);
      v1525.bezierCurveTo(p1145 * 160.50003051757812, p1145 * 86.40341186523438, p1145 * 160.50003051757812, p1145 * 86.40341186523438, p1145 * 138.00003051757812, p1145 * 86.40341186523438);
      v1525.closePath();
      f88(v1525, "#C09D6F", "#A37943", p1145 * 10);
      v1525.save();
      v1525.translate(p1145 * 161.50003051757812, p1145 * 117.90341186523438);
      f86(v1525, p1145 * -5.5, p1145 * -37.5, p1145 * 11, p1145 * 75, p1145 * 10);
      v1525.restore();
      f88(v1525, "#C09D6F", "#A37943", p1145 * 10);
      v1525.save();
      v1525.translate(p1145 * 162.00003051757812, p1145 * 78.90341186523438);
      f86(v1525, p1145 * -10, p1145 * -5.5, p1145 * 20, p1145 * 11, p1145 * 1);
      v1525.restore();
      f88(v1525, "#C09D6F");
      f92(v1525, p1145 * 161.00003051757812, p1145 * 163.6761474609375, p1145 * 17.08800749063506);
      f88(v1525, "#C09D6F");
      return v1524;
    }(v1427 * 0.22));
    ᐃᐃ[976] = [];
    ᐃᐃ[976].push(f54(f114(v1427 * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ᐃᐃ[976].push(f54(f114(v1427 * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ᐃᐃ[976].push(f54(f114(v1427 * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ᐃᐃ[684] = ⵠᐃ.ᐃᐃⵠⲆΔΔᐃ;
    ᐃᐃ[685] = ⵠᐃ.ᐃΔΔᐃᐃⵠⵠ;
    ᐃᐃ[686] = ⵠᐃ.ⵠᐃᐃᐃⲆΔⵠ;
    ᐃᐃ[687] = ⵠᐃ.ⵠΔⵠⵠᐃⵠΔ;
    ᐃᐃ[655] = f157(v1427, "Show spectators", 25, "#FFF", vVVVVUndefined582, undefined, "#000", 5, 220);
    ᐃᐃ[663] = f157(v1427, "Reconnecting...", 30, "#FFF");
    console.log(vVVVVUndefined143, undefined);
  }
  function f287() {
    var v1526 = v2832.time;
    if (ᐃᐃ[395]) {
      v405.drawImage(ᐃᐃ[395][v1526][1], v409 + 480, v410 + 190);
      v405.drawImage(ᐃᐃ[395][v1526][2], v409 + 180, v410 - 430);
      v405.drawImage(ᐃᐃ[395][v1526][1], v409 - 855, v410 + 100);
      v405.drawImage(ᐃᐃ[395][v1526][0], v409 - 550, v410 - 300);
      v405.drawImage(ᐃᐃ[395][v1526][0], v409 - 1020, v410 - 520);
    }
    if (ᐃᐃ[199]) {
      v405.drawImage(ᐃᐃ[199][v1526][1], v409 - 80, v410 - 640);
      v405.drawImage(ᐃᐃ[199][v1526][1], v409 + 80, v410 + 490);
      v405.drawImage(ᐃᐃ[199][v1526][2], v409 - 180, v410 - 700);
      v405.drawImage(ᐃᐃ[199][v1526][0], v409 + 550, v410 + 100);
      v405.drawImage(ᐃᐃ[199][v1526][1], v409 + 450, v410 + 300);
      v405.drawImage(ᐃᐃ[199][v1526][1], v409 + 780, v410 + 300);
      v405.drawImage(ᐃᐃ[199][v1526][2], v409 + 980, v410 + 200);
      v405.drawImage(ᐃᐃ[199][v1526][2], v409 + 680, v410 + 600);
      v405.drawImage(ᐃᐃ[199][v1526][2], v409 - 380, v410 + 100);
      v405.drawImage(ᐃᐃ[199][v1526][2], v409 + 280, v410 + 250);
    }
    if (ᐃᐃ[201]) {
      v405.drawImage(ᐃᐃ[201][v1526][0], v409 - 590, v410);
      v405.drawImage(ᐃᐃ[201][v1526][0], v409 + 120, v410 - 390);
      v405.drawImage(ᐃᐃ[201][v1526][0], v409 - 270, v410 + 340);
    }
    if (ᐃᐃ[200]) {
      v405.drawImage(ᐃᐃ[200][v1526][4], v409 - 700, v410 - 600);
      v405.drawImage(ᐃᐃ[200][v1526][2], v409 - 970, v410 - 250);
      v405.drawImage(ᐃᐃ[200][v1526][5], v409 - 720, v410 - 200);
      v405.drawImage(ᐃᐃ[200][v1526][2], v409 - 1020, v410 + 340);
      v405.drawImage(ᐃᐃ[200][v1526][0], v409 - 1120, v410 - 0);
      v405.drawImage(ᐃᐃ[200][v1526][1], v409 - 650, v410 - 330);
      v405.drawImage(ᐃᐃ[200][v1526][4], v409 - 495, v410 - 90);
      v405.drawImage(ᐃᐃ[200][v1526][3], v409 - 520, v410 + 340);
      v405.drawImage(ᐃᐃ[200][v1526][2], v409 + 830, v410 - 520);
    }
    ᐃᐃ[524];
    if (user && world) {
      var v1527 = user.ᐃⵠⵠ.x;
      var v1528 = user.ᐃⵠⵠ.y;
      user.ᐃⵠⵠ.x = v409;
      user.ᐃⵠⵠ.y = v410;
      var v1529 = world.time;
      world.time = v2832.time;
      var v1530;
      var v1531 = v2832.items;
      v1531[2].x = 400;
      v1531[2].y = 100;
      v1531[2].ⲆΔᐃΔ(205);
      (v1530 = v1531[1]).x = -500;
      v1530.y = 100;
      v1530.ᐃᐃᐃᐃ[0].x = v1530.x - 20.5;
      v1530.ᐃᐃᐃᐃ[0].y = v1530.y - 22.5;
      v1530.ᐃᐃᐃᐃ[1].x = v1530.x - 35.5;
      v1530.ᐃᐃᐃᐃ[1].y = v1530.y + 7.5;
      v1530.ᐃᐃᐃᐃ[2].x = v1530.x + 7.5;
      v1530.ᐃᐃᐃᐃ[2].y = v1530.y - 30;
      v1530.ᐃᐃᐃᐃ[3].x = v1530.x + 22.5;
      v1530.ᐃᐃᐃᐃ[3].y = v1530.y;
      v1530.ᐃᐃᐃᐃ[4].x = v1530.x - 7.5;
      v1530.ᐃᐃᐃᐃ[4].y = v1530.y + 14.5;
      for (var v1532 = 0; v1530.info > v1532; v1532++) {
        v1530.ᐃᐃᐃᐃ[v1532].ⲆΔᐃΔ(404);
      }
      (v1530 = v1531[3]).x = 210;
      v1530.y = -290;
      v1530.ᐃᐃᐃᐃ[0].x = v1530.x - 20.5;
      v1530.ᐃᐃᐃᐃ[0].y = v1530.y - 22.5;
      v1530.ᐃᐃᐃᐃ[1].x = v1530.x - 35.5;
      v1530.ᐃᐃᐃᐃ[1].y = v1530.y + 7.5;
      v1530.ᐃᐃᐃᐃ[2].x = v1530.x + 7.5;
      v1530.ᐃᐃᐃᐃ[2].y = v1530.y - 30;
      v1530.ᐃᐃᐃᐃ[3].x = v1530.x + 22.5;
      v1530.ᐃᐃᐃᐃ[3].y = v1530.y;
      v1530.ᐃᐃᐃᐃ[4].x = v1530.x - 7.5;
      v1530.ᐃᐃᐃᐃ[4].y = v1530.y + 14.5;
      for (v1532 = 0; v1532 < v1530.info; v1532++) {
        v1530.ᐃᐃᐃᐃ[v1532].ⲆΔᐃΔ(404);
      }
      v1531[0].x = 450;
      v1531[0].y = -100;
      v1531[0].ΔⵠⵠⲆⵠΔⲆ(204);
      v1531[0].ᐃᐃΔⲆⵠ();
      user.ᐃⵠⵠ.x = v1527;
      user.ᐃⵠⵠ.y = v1528;
      world.time = v1529;
    }
  }
  function f288() {
    new Date().getTime();
    function e(p1146) {
      var v1533 = 0;
      var v1534 = 0;
      for (var v1535 = 0; p1146.length > v1535; v1535++) {
        var v1536 = p1146.charAt(v1535);
        if (v1536 !== "_" && v1535 !== 5) {
          if (v1536 === "1") {
            v1533 += Math.pow(2, v1534);
          }
          v1534++;
        }
      }
      return v1533;
    }
    ⲆⲆΔᐃⵠΔᐃⲆⵠ();
    ᐃᐃ[1334] = [ⵠᐃ.ΔΔΔⵠⲆΔΔ, ⵠᐃ.ⲆᐃΔΔᐃᐃⵠ];
    ᐃᐃ[1333] = [];
    ᐃᐃ[1333][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_010_000")] = [ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠΔᐃΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_010_010")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_010_000")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_011_000")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_010_000")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_011_010")] = [ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠᐃⵠΔ, ⵠᐃ.ΔⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆΔⲆⵠᐃⵠΔ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_011_011")] = [ⵠᐃ.ⵠⵠⲆΔⲆⵠⲆ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠᐃⵠΔ, ⵠᐃ.ΔⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆΔⲆⵠᐃⵠΔ, ⵠᐃ.ΔᐃⵠΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_110_000")] = [ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⵠΔᐃΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_110_010")] = [ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ΔΔⲆⲆΔⵠⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_110_110")] = [ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ⲆᐃᐃΔⲆⵠᐃⲆⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ΔΔⲆⲆΔⵠⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_111_000")] = [ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_111_111")] = [ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ, ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠⵠⲆΔⲆⵠⲆ, ⵠᐃ.ⲆᐃⲆΔⲆⲆⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_010_000")] = [ⵠᐃ.ⵠΔᐃΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_010_010")] = [ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_011_000")] = [ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ΔΔΔᐃⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_000")] = [ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")] = [ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⲆᐃⲆΔⲆⲆⲆ, ⵠᐃ.ⵠΔΔⵠΔᐃᐃ, ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠᐃⵠΔ, ⵠᐃ.ΔⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆΔⲆⵠᐃⵠΔ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_011_010")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_011_011")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_111_011")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_010")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_111_000")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_111_010")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_111_011")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_111_110")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_111_111")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_111_110")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("000_111_010")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_011_000")] = [ⵠᐃ.ᐃΔⵠᐃΔⵠΔ, ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ΔΔΔᐃⲆ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_011_010")] = [ⵠᐃ.ᐃΔⵠᐃΔⵠΔ, ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_011_011")] = [ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠⵠⲆΔⲆⵠⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃΔⵠᐃΔⵠΔ, ⵠᐃ.ⵠΔΔⵠΔᐃᐃ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_111_000")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_011_010")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_111_010")] = [ⵠᐃ.ᐃΔⵠᐃΔⵠΔ, ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⲆᐃⲆΔⲆⲆⲆ, ⵠᐃ.ⵠΔΔⵠΔᐃᐃ, ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠᐃⵠΔ, ⵠᐃ.ΔⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆΔⲆⵠᐃⵠΔ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_111_011")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_111_010")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_111_110")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_111_010")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("011_111_111")] = [ⵠᐃ.ᐃΔⵠᐃΔⵠΔ, ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⵠⵠⲆΔⲆⵠⲆ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⲆᐃⲆΔⲆⲆⲆ, ⵠᐃ.ⵠΔΔⵠΔᐃᐃ, ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠᐃⵠΔ, ⵠᐃ.ΔⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆΔⲆⵠᐃⵠΔ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_110_000")] = [ⵠᐃ.ⲆᐃΔⲆΔΔᐃ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⵠⵠΔⵠⵠⲆⲆ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_110_010")] = [ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ⲆᐃΔⲆΔΔᐃ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_110_110")] = [ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ, ⵠᐃ.ⲆᐃΔⲆΔΔᐃ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_111_000")] = [ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⲆᐃΔⲆΔΔᐃ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⵠⵠΔⵠⵠⲆⲆ, ⵠᐃ.ΔⵠⲆⲆΔⵠΔ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_111_110")] = [ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ, ⵠᐃ.ⲆᐃΔⲆΔΔᐃ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⲆᐃⲆΔⲆⲆⲆ, ⵠᐃ.ΔⵠⲆⲆΔⵠΔ, ⵠᐃ.ⵠΔΔⵠΔᐃᐃ, ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠᐃⵠΔ, ⵠᐃ.ΔⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆΔⲆⵠᐃⵠΔ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_111_111")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_111_011")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_111_010")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("110_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("111_111_110")] = [ⵠᐃ.ᐃΔᐃᐃⵠ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ⲆΔⲆⵠᐃⵠΔ, ⵠᐃ.ΔⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⵠⵠⲆⵠᐃⵠΔ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔΔⵠΔᐃᐃ, ⵠᐃ.ΔⵠⲆⲆΔⵠΔ, ⵠᐃ.ⲆᐃⲆΔⲆⲆⲆ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⲆᐃΔⲆΔΔᐃ, ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃΔⵠᐃΔⵠΔ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("111_111_011")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("111_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("111_111_000")] = [ⵠᐃ.ⵠⵠΔⵠⵠⲆⲆ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⲆᐃΔⲆΔΔᐃ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃΔⵠᐃΔⵠΔ, ⵠᐃ.ΔⵠⲆⲆΔⵠΔ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("111_111_111")] = [ⵠᐃ.ᐃΔⵠᐃΔⵠΔ, ⵠᐃ.ⵠᐃΔᐃⲆ, ⵠᐃ.ᐃⲆΔΔⲆ, ⵠᐃ.ⵠⵠⲆΔⲆⵠⲆ, ⵠᐃ.ⲆᐃⵠΔⲆⲆᐃ, ⵠᐃ.ⵠᐃᐃⲆΔΔΔ, ⵠᐃ.ⵠⲆᐃΔⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ, ⵠᐃ.ⲆᐃΔⲆΔΔᐃ, ⵠᐃ.ⵠᐃⵠᐃⲆ, ⵠᐃ.ⲆᐃⲆΔⲆⲆⲆ, ⵠᐃ.ⵠΔΔⵠΔᐃᐃ, ⵠᐃ.ᐃΔⲆⲆⵠᐃᐃ, ⵠᐃ.ⵠΔⲆᐃⵠ, ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ, ⵠᐃ.ᐃⲆⲆΔᐃⲆⵠ, ⵠᐃ.ⵠΔᐃΔⲆ, ⵠᐃ.ᐃΔⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠᐃⵠΔ, ⵠᐃ.ΔⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆΔⲆⵠᐃⵠΔ, ⵠᐃ.ΔᐃⵠΔⲆ, ⵠᐃ.ΔΔΔᐃⲆ, ⵠᐃ.ᐃΔᐃᐃⵠ];
    ᐃᐃ[1333][v585.ᐃⲆᐃ][e("111_111_010")] = ᐃᐃ[1333][v585.ᐃⲆᐃ][e("111_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_010_000")] = [ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⵠᐃᐃΔⵠ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_010_010")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_010_000")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_011_000")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_010_000")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_011_010")] = [ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⲆⵠⵠᐃᐃΔᐃ, ⵠᐃ.ΔΔⵠⲆΔⲆᐃ, ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_011_011")] = [ⵠᐃ.ⲆᐃⲆⵠⵠⵠⲆ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⲆⵠⵠᐃᐃΔᐃ, ⵠᐃ.ΔΔⵠⲆΔⲆᐃ, ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ, ⵠᐃ.ⵠΔⲆⵠΔ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_110_000")] = [ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⵠᐃᐃΔⵠ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_110_010")] = [ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠⲆⲆᐃΔΔᐃ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_110_110")] = [ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ᐃᐃΔⲆⵠᐃⵠⵠΔ, ⵠᐃ.ᐃⲆΔⲆⲆᐃᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠⲆⲆᐃΔΔᐃ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_111_000")] = [ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_111_111")] = [ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ᐃⲆΔⲆⲆᐃᐃ, ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ⲆᐃⲆⵠⵠⵠⲆ, ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_010_000")] = [ⵠᐃ.ⵠᐃᐃΔⵠ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_010_010")] = [ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_011_000")] = [ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_000")] = [ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")] = [ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ᐃⲆΔⲆⲆᐃᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ, ⵠᐃ.ᐃᐃᐃⵠΔΔⲆ, ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⲆⵠⵠᐃᐃΔᐃ, ⵠᐃ.ΔΔⵠⲆΔⲆᐃ, ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_011_010")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_011_011")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_111_011")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_010")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_111_000")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_111_010")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_111_011")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_111_110")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_111_111")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_111_110")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("000_111_010")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("010_110_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_011_000")] = [ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ, ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_011_010")] = [ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ, ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_011_011")] = [ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ⲆᐃⲆⵠⵠⵠⲆ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ, ⵠᐃ.ᐃᐃᐃⵠΔΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_111_000")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_011_010")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_111_010")] = [ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ, ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ, ⵠᐃ.ᐃᐃᐃⵠΔΔⲆ, ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⲆⵠⵠᐃᐃΔᐃ, ⵠᐃ.ΔΔⵠⲆΔⲆᐃ, ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_111_011")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_111_010")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_111_110")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_111_010")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("011_111_111")] = [ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ, ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⲆᐃⲆⵠⵠⵠⲆ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ᐃⲆΔⲆⲆᐃᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ, ⵠᐃ.ᐃᐃᐃⵠΔΔⲆ, ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⲆⵠⵠᐃᐃΔᐃ, ⵠᐃ.ΔΔⵠⲆΔⲆᐃ, ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_110_000")] = [ⵠᐃ.ⲆⲆⵠᐃᐃⵠᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⵠΔⲆⵠΔⵠⲆ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_110_010")] = [ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ⲆⲆⵠᐃᐃⵠᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_110_110")] = [ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ᐃⲆΔⲆⲆᐃᐃ, ⵠᐃ.ⲆⲆⵠᐃᐃⵠᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_111_000")] = [ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⲆⲆⵠᐃᐃⵠᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⵠΔⲆⵠΔⵠⲆ, ⵠᐃ.ⲆᐃᐃᐃⲆⲆⵠ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_111_110")] = [ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ᐃⲆΔⲆⲆᐃᐃ, ⵠᐃ.ⲆⲆⵠᐃᐃⵠᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ, ⵠᐃ.ⲆᐃᐃᐃⲆⲆⵠ, ⵠᐃ.ᐃᐃᐃⵠΔΔⲆ, ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⲆⵠⵠᐃᐃΔᐃ, ⵠᐃ.ΔΔⵠⲆΔⲆᐃ, ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_111_111")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_111_011")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_111_010")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("110_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("111_111_110")] = [ⵠᐃ.ⵠΔⲆΔⲆ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ, ⵠᐃ.ΔΔⵠⲆΔⲆᐃ, ⵠᐃ.ⲆⵠⵠᐃᐃΔᐃ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ᐃᐃᐃⵠΔΔⲆ, ⵠᐃ.ⲆᐃᐃᐃⲆⲆⵠ, ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⲆⲆⵠᐃᐃⵠᐃ, ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("111_111_011")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("111_111_110")];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("111_111_000")] = [ⵠᐃ.ⵠΔⲆⵠΔⵠⲆ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ⲆⲆⵠᐃᐃⵠᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ, ⵠᐃ.ⲆᐃᐃᐃⲆⲆⵠ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("111_111_111")] = [ⵠᐃ.ⵠΔΔᐃⲆⲆⵠ, ⵠᐃ.ⵠⵠᐃΔᐃ, ⵠᐃ.ΔⵠⵠⵠΔ, ⵠᐃ.ⲆᐃⲆⵠⵠⵠⲆ, ⵠᐃ.ΔⵠⵠⵠΔΔⵠ, ⵠᐃ.ΔΔΔⵠΔΔⲆ, ⵠᐃ.ⵠΔΔΔⲆ, ⵠᐃ.ᐃⲆΔⲆⲆᐃᐃ, ⵠᐃ.ⲆⲆⵠᐃᐃⵠᐃ, ⵠᐃ.ⲆⵠΔⲆΔ, ⵠᐃ.ΔⲆⵠᐃⵠⵠⵠ, ⵠᐃ.ᐃᐃᐃⵠΔΔⲆ, ⵠᐃ.ⵠⵠⵠᐃΔⵠΔ, ⵠᐃ.ⲆⵠⲆᐃⵠ, ⵠᐃ.Ⲇⵠᐃⵠⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ, ⵠᐃ.ⵠᐃᐃΔⵠ, ⵠᐃ.ᐃᐃᐃⵠΔ, ⵠᐃ.ⲆⵠⵠᐃᐃΔᐃ, ⵠᐃ.ΔΔⵠⲆΔⲆᐃ, ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ, ⵠᐃ.ⵠΔⲆⵠΔ, ⵠᐃ.ΔᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆΔⲆ];
    ᐃᐃ[1333][v585.ᐃⲆΔ][e("111_111_010")] = ᐃᐃ[1333][v585.ᐃⲆΔ][e("111_111_110")];
    ᐃᐃ[1332] = [];
    ᐃᐃ[1332][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_010_000")] = ⵠᐃ.ⲆᐃⵠⲆΔᐃᐃΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_010_010")] = ⵠᐃ.ⵠⵠᐃΔΔᐃΔᐃΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_011_000")] = ⵠᐃ.ⵠᐃᐃΔΔⵠⲆⵠΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_011_010")] = ⵠᐃ.ΔⵠᐃⲆᐃⵠⲆᐃⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_011_011")] = ⵠᐃ.ᐃΔᐃⵠᐃⲆⵠᐃⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_110_000")] = ⵠᐃ.ᐃⲆᐃΔⲆᐃⲆᐃⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_110_010")] = ⵠᐃ.ⵠᐃⵠΔᐃⲆᐃⲆⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_110_110")] = ⵠᐃ.ᐃⵠΔΔᐃΔᐃΔᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_111_000")] = ⵠᐃ.ΔᐃⵠⵠΔⲆΔⵠⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_111_010")] = ⵠᐃ.ⲆᐃᐃᐃⲆΔᐃⲆᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_111_011")] = ⵠᐃ.ΔΔⲆᐃᐃⵠΔⲆⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_111_110")] = ⵠᐃ.ⲆᐃⵠⵠᐃᐃⵠⲆⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("000_111_111")] = ⵠᐃ.ⵠΔΔΔΔⲆⲆᐃΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_010_000")] = ⵠᐃ.ΔⵠⲆΔΔⲆⲆᐃᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_010_010")] = ⵠᐃ.ⲆⲆⲆᐃⲆⵠΔⵠⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_011_000")] = ⵠᐃ.ⵠⵠΔᐃΔⲆᐃΔⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_011_010")] = ⵠᐃ.ᐃᐃⲆⵠᐃΔᐃⲆⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_011_011")] = ⵠᐃ.ⵠⵠΔᐃⲆΔᐃᐃⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_110_000")] = ⵠᐃ.ⵠⲆⵠⲆⲆⲆᐃᐃⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_110_010")] = ⵠᐃ.ᐃⲆⵠᐃⵠⵠᐃᐃᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_110_110")] = ⵠᐃ.ΔⲆᐃᐃⲆⵠⲆᐃΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_111_000")] = ⵠᐃ.ᐃⲆΔᐃⲆⵠⲆⲆΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_111_010")] = ⵠᐃ.ᐃⵠᐃⲆⲆΔⵠΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_111_011")] = ⵠᐃ.ΔΔⲆⲆⵠⲆᐃⲆⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_111_110")] = ⵠᐃ.ᐃᐃᐃⲆⲆΔⵠⵠⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("010_111_111")] = ⵠᐃ.ⲆᐃⲆⵠΔᐃⲆΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("011_011_000")] = ⵠᐃ.ⵠⵠⵠⲆΔΔⲆΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("011_011_010")] = ⵠᐃ.ᐃᐃⲆΔᐃⲆⲆⵠⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("011_011_011")] = ⵠᐃ.ᐃΔⵠᐃⵠⲆⵠΔᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("011_111_000")] = ⵠᐃ.ΔᐃΔⲆⵠⵠⲆⵠᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("011_111_010")] = ⵠᐃ.ᐃΔⲆⵠΔⲆΔΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("011_111_011")] = ⵠᐃ.ⲆΔⲆΔΔᐃⵠⵠΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("011_111_110")] = ⵠᐃ.ΔⲆΔᐃⵠΔⲆᐃΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("011_111_111")] = ⵠᐃ.ⲆΔⲆⲆᐃΔⵠΔᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("110_110_000")] = ⵠᐃ.ᐃⵠᐃᐃΔⲆⵠⲆᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("110_110_010")] = ⵠᐃ.ⲆⲆΔΔᐃΔΔⵠΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("110_110_110")] = ⵠᐃ.ᐃΔⵠΔᐃΔⲆᐃᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("110_111_000")] = ⵠᐃ.ⲆᐃᐃᐃᐃⲆᐃᐃⵠ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("110_111_010")] = ⵠᐃ.ΔΔⲆⵠⵠᐃⲆⲆΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("110_111_011")] = ⵠᐃ.ⵠⵠⲆᐃᐃΔⲆᐃⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("110_111_110")] = ⵠᐃ.ⲆⵠᐃⵠΔⲆⲆΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("110_111_111")] = ⵠᐃ.ᐃᐃᐃᐃⵠᐃⲆᐃᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("111_111_011")] = ⵠᐃ.ΔⲆⲆⵠᐃⵠΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("111_111_110")] = ⵠᐃ.ⵠⵠΔΔΔΔᐃⲆᐃ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("111_111_011")] = ⵠᐃ.ΔⲆⲆⵠᐃⵠΔ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("111_111_000")] = ⵠᐃ.ⵠⲆⵠᐃⲆⲆⵠᐃⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("111_111_111")] = ⵠᐃ.ᐃⵠΔᐃⵠᐃΔΔⲆ;
    ᐃᐃ[1332][v585.ᐃⲆᐃ][e("111_111_010")] = ⵠᐃ.ΔᐃΔᐃⵠⵠⲆΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_010_000")] = ⵠᐃ.ⲆⲆⲆᐃⵠⲆᐃᐃⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_010_010")] = ⵠᐃ.ⵠᐃⵠΔⵠⲆⵠⵠⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_011_000")] = ⵠᐃ.ᐃΔᐃᐃΔᐃⲆΔⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_011_010")] = ⵠᐃ.ᐃⲆΔΔⲆΔᐃⲆⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_011_011")] = ⵠᐃ.ᐃᐃᐃΔΔⵠΔΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_110_000")] = ⵠᐃ.ⵠᐃᐃⲆⲆᐃΔΔᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_110_010")] = ⵠᐃ.ᐃΔᐃⵠᐃΔⵠⲆΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_110_110")] = ⵠᐃ.ⲆᐃΔⲆⲆΔΔᐃⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_111_000")] = ⵠᐃ.ΔᐃΔΔⲆⲆΔⵠⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_111_010")] = ⵠᐃ.ⲆⲆⵠΔⵠⵠⵠΔᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_111_011")] = ⵠᐃ.ᐃⲆⵠⲆⵠΔⵠΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_111_110")] = ⵠᐃ.ᐃⵠⲆᐃᐃⵠⵠΔⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("000_111_111")] = ⵠᐃ.ⲆᐃΔⲆᐃΔⲆΔⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_010_000")] = ⵠᐃ.ΔⲆⵠⵠⲆΔᐃⲆᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_010_010")] = ⵠᐃ.ΔⲆᐃⲆΔⵠⲆⵠΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_011_000")] = ⵠᐃ.ⵠΔⲆΔᐃᐃΔΔⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_011_010")] = ⵠᐃ.ΔΔⲆᐃⲆΔⲆⲆΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_011_011")] = ⵠᐃ.ⵠⲆΔΔᐃⵠΔⲆᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_110_000")] = ⵠᐃ.ⲆΔⲆᐃⵠΔⵠΔⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_110_010")] = ⵠᐃ.ⲆⲆⲆΔᐃᐃⵠΔᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_110_110")] = ⵠᐃ.ᐃⲆⲆⵠⲆΔⲆΔᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_111_000")] = ⵠᐃ.ᐃΔⲆⵠⵠⲆⲆΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_111_010")] = ⵠᐃ.ⲆⵠᐃᐃᐃΔⲆⲆᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_111_011")] = ⵠᐃ.ⵠᐃᐃΔᐃⵠⲆᐃΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_111_110")] = ⵠᐃ.ᐃⲆⲆⲆΔⲆⲆᐃᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("010_111_111")] = ⵠᐃ.ⲆⲆᐃΔⲆᐃⲆⵠΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("011_011_000")] = ⵠᐃ.ⲆΔΔⵠⵠⵠⵠΔⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("011_011_010")] = ⵠᐃ.ⲆⲆᐃᐃᐃΔⲆⵠᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("011_011_011")] = ⵠᐃ.ⲆΔⵠᐃᐃⲆᐃΔⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("011_111_000")] = ⵠᐃ.ⲆⲆⲆⵠΔⲆⵠⲆⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("011_111_010")] = ⵠᐃ.ᐃΔᐃᐃᐃᐃⲆⵠᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("011_111_011")] = ⵠᐃ.ⲆⲆⵠⲆᐃⵠᐃⲆⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("011_111_110")] = ⵠᐃ.ⲆⲆᐃⵠΔΔΔΔΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("011_111_111")] = ⵠᐃ.ΔΔⵠΔⵠⲆⵠΔⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("110_110_000")] = ⵠᐃ.ⵠΔᐃΔᐃᐃⲆΔᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("110_110_010")] = ⵠᐃ.ΔⵠΔᐃⵠⵠΔⵠᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("110_110_110")] = ⵠᐃ.ⵠⲆⵠΔΔΔⲆᐃⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("110_111_000")] = ⵠᐃ.ⵠⲆⵠⲆΔᐃⲆΔⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("110_111_010")] = ⵠᐃ.ΔⵠᐃΔΔⲆⵠⵠΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("110_111_011")] = ⵠᐃ.ΔᐃΔⲆⵠⵠⵠΔⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("110_111_110")] = ⵠᐃ.ΔΔⵠΔᐃΔᐃᐃⲆ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("110_111_111")] = ⵠᐃ.ⵠΔⲆᐃⵠⲆⵠⲆᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("111_111_011")] = ⵠᐃ.ᐃΔⵠⲆⵠⲆⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("111_111_110")] = ⵠᐃ.ⲆᐃⵠⲆⲆⵠᐃⵠᐃ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("111_111_011")] = ⵠᐃ.ᐃΔⵠⲆⵠⲆⵠ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("111_111_000")] = ⵠᐃ.ΔⲆⵠⲆᐃΔΔⲆΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("111_111_111")] = ⵠᐃ.ⲆⲆΔⲆΔᐃᐃᐃΔ;
    ᐃᐃ[1332][v585.ᐃⲆΔ][e("111_111_010")] = ⵠᐃ.ⲆⵠⵠⲆⲆΔⵠⵠⲆ;
    ᐃᐃ[315] = [];
    ᐃᐃ[315][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⲆⵠⵠⵠⵠ;
    ᐃᐃ[315][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠΔⵠᐃⲆⲆ;
    ᐃᐃ[1233] = [];
    ᐃᐃ[1233][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃᐃΔΔⵠΔ;
    ᐃᐃ[1233][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠΔⲆᐃⵠⵠ;
    ᐃᐃ[317] = [];
    ᐃᐃ[317][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃⲆⲆⲆᐃ;
    ᐃᐃ[317][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃΔΔⲆΔⲆ;
    ᐃᐃ[1230] = [];
    ᐃᐃ[1230][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠΔΔΔᐃΔ;
    ᐃᐃ[1230][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⲆᐃᐃΔⵠ;
    ᐃᐃ[1746] = [];
    ᐃᐃ[1746][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔΔⵠⲆᐃⲆ;
    ᐃᐃ[1746][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⵠⵠΔΔᐃ;
    ᐃᐃ[1234] = [];
    ᐃᐃ[1234][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔᐃⲆΔᐃᐃ;
    ᐃᐃ[1234][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔΔⲆΔⵠΔ;
    ᐃᐃ[319] = [];
    ᐃᐃ[319][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔⵠΔΔⲆⵠ;
    ᐃᐃ[319][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔΔⵠⲆΔⵠ;
    ᐃᐃ[1247] = [];
    ᐃᐃ[1247][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⲆⵠⵠⵠᐃ;
    ᐃᐃ[1247][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⵠᐃⲆΔⲆ;
    ᐃᐃ[321] = [];
    ᐃᐃ[321][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆΔᐃᐃΔⲆ;
    ᐃᐃ[321][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⵠⲆΔⵠᐃ;
    ᐃᐃ[1262] = [];
    ᐃᐃ[1262][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⲆᐃⲆⲆⵠ;
    ᐃᐃ[1262][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆⲆⲆⵠΔᐃ;
    ᐃᐃ[1265] = [];
    ᐃᐃ[1265][v585.ᐃⲆᐃ] = [ⵠᐃ.ⲆᐃⲆⲆⵠΔⵠ];
    ᐃᐃ[1265][v585.ᐃⲆΔ] = [ⵠᐃ.ⵠⲆΔⲆᐃΔᐃ];
    ᐃᐃ[327] = [];
    ᐃᐃ[327][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⵠⵠⲆⲆΔ;
    ᐃᐃ[327][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⵠⵠᐃᐃⵠ;
    ᐃᐃ[329] = [];
    ᐃᐃ[329][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⵠΔⵠᐃᐃ;
    ᐃᐃ[329][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⵠᐃΔᐃΔ;
    ᐃᐃ[328] = [];
    ᐃᐃ[328][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃⲆΔΔⵠ;
    ᐃᐃ[328][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆᐃⵠᐃⲆⲆ;
    ᐃᐃ[322] = [];
    ᐃᐃ[322][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃΔⲆΔᐃⵠ;
    ᐃᐃ[322][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⵠⲆⲆⵠᐃ;
    ᐃᐃ[323] = [];
    ᐃᐃ[323][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃⵠΔΔⲆᐃ;
    ᐃᐃ[323][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃⵠⲆⵠⲆⲆ;
    ᐃᐃ[324] = [];
    ᐃᐃ[324][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃΔⵠΔⲆ;
    ᐃᐃ[324][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⵠⵠⵠⵠᐃ;
    ᐃᐃ[325] = [];
    ᐃᐃ[325][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔⲆᐃⲆᐃⵠ;
    ᐃᐃ[325][v585.ᐃⲆΔ] = ⵠᐃ.ⵠᐃᐃⵠⵠⵠⵠ;
    ᐃᐃ[326] = [];
    ᐃᐃ[326][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃΔⵠᐃᐃᐃ;
    ᐃᐃ[326][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠΔΔⲆΔⵠ;
    ᐃᐃ[330] = [];
    ᐃᐃ[330][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆᐃⲆⵠⵠΔ;
    ᐃᐃ[330][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⵠⲆⲆΔⲆ;
    ᐃᐃ[1323] = [];
    ᐃᐃ[1323][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃⵠⵠⵠⲆ;
    ᐃᐃ[1323][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠᐃⲆΔⲆᐃ;
    ᐃᐃ[1324] = [];
    ᐃᐃ[1324][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⲆᐃⲆΔᐃ;
    ᐃᐃ[1324][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⵠⲆⵠΔΔ;
    ᐃᐃ[1325] = ⵠᐃ.ΔⲆⲆΔΔᐃΔ;
    ᐃᐃ[1326] = ⵠᐃ.ᐃⲆΔᐃᐃⲆⲆ;
    ᐃᐃ[1327] = [];
    ᐃᐃ[1327][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠⲆⲆⵠⵠᐃ;
    ᐃᐃ[1327][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⵠⲆᐃΔᐃ;
    ᐃᐃ[1331] = [];
    ᐃᐃ[1331][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆⵠᐃΔΔⵠ;
    ᐃᐃ[1331][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⲆΔΔⵠΔ;
    ᐃᐃ[1349] = [];
    ᐃᐃ[1349][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1349][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1349][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠᐃⲆΔΔⲆⲆ);
    ᐃᐃ[1349][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃᐃΔᐃⵠΔⵠ);
    ᐃᐃ[1349][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⲆⲆᐃⲆⵠΔ);
    ᐃᐃ[1349][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆᐃΔⵠΔΔᐃ);
    ᐃᐃ[1349][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆᐃⲆⵠΔᐃⵠ);
    ᐃᐃ[1349][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃΔⲆⵠΔᐃⵠ);
    ᐃᐃ[354] = [];
    ᐃᐃ[354][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[354][v585.ᐃⲆΔ] = [];
    ᐃᐃ[354][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃᐃⵠⲆⲆΔⵠ);
    ᐃᐃ[354][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆΔΔⲆⲆⲆᐃ);
    ᐃᐃ[354][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⲆᐃΔΔΔⲆ);
    ᐃᐃ[354][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⵠⲆᐃⵠᐃΔ);
    ᐃᐃ[354][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠⲆⵠⲆᐃⵠ);
    ᐃᐃ[354][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃΔⲆⵠΔΔᐃ);
    ᐃᐃ[1360] = [];
    ᐃᐃ[1360][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1360][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1360][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠⵠΔΔᐃⲆΔ);
    ᐃᐃ[1360][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⵠΔᐃᐃᐃⵠ);
    ᐃᐃ[1360][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃΔⵠΔΔⲆ);
    ᐃᐃ[1360][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⵠⲆⲆⲆⵠⵠ);
    ᐃᐃ[1360][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆΔᐃᐃⲆΔⵠ);
    ᐃᐃ[1360][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠⵠⵠΔⲆΔ);
    ᐃᐃ[1360][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⲆⲆᐃᐃⵠΔ);
    ᐃᐃ[1360][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃⵠᐃⲆΔⲆΔ);
    ᐃᐃ[1360][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠΔⵠΔᐃᐃ);
    ᐃᐃ[1360][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠᐃⲆⲆⲆⵠΔ);
    ᐃᐃ[588] = [];
    ᐃᐃ[588][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠᐃΔⲆᐃⵠ;
    ᐃᐃ[588][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⵠᐃᐃⲆⲆ;
    ᐃᐃ[591] = [];
    ᐃᐃ[591][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⵠⵠᐃΔᐃ;
    ᐃᐃ[591][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⲆΔᐃⲆΔ;
    ᐃᐃ[592] = [];
    ᐃᐃ[592][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔᐃΔⲆⲆⲆ;
    ᐃᐃ[592][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⲆΔⵠⲆᐃ;
    ᐃᐃ[602] = ⵠᐃ.ⲆⲆⲆⵠⲆⲆᐃ;
    ᐃᐃ[606] = ⵠᐃ.ⲆΔⵠⲆⲆΔΔ;
    ᐃᐃ[607] = ⵠᐃ.ⵠⲆⲆΔⲆⵠⵠ;
    ᐃᐃ[29] = [];
    ᐃᐃ[29][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔᐃⲆⲆᐃᐃ;
    ᐃᐃ[29][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⵠᐃⲆⵠⲆ;
    ᐃᐃ[1196] = [];
    ᐃᐃ[1196][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆᐃⵠᐃⲆⵠ;
    ᐃᐃ[1196][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⵠⵠᐃᐃΔ;
    ᐃᐃ[30] = [];
    ᐃᐃ[30][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⲆⲆⵠⲆⵠ;
    ᐃᐃ[30][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆⵠⵠⵠⵠⲆ;
    ᐃᐃ[1200] = [];
    ᐃᐃ[1200][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆᐃⵠᐃⲆⵠ;
    ᐃᐃ[1200][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⵠⵠᐃᐃΔ;
    ᐃᐃ[71] = [];
    ᐃᐃ[71][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔΔΔΔⵠΔ;
    ᐃᐃ[71][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠΔᐃⵠⲆᐃ;
    ᐃᐃ[106] = [];
    ᐃᐃ[106][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔΔΔΔΔᐃ;
    ᐃᐃ[106][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔΔΔⲆΔᐃ;
    ᐃᐃ[306] = [];
    ᐃᐃ[306][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[306][v585.ᐃⲆΔ] = [];
    ᐃᐃ[306][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⵠⲆΔᐃⲆΔ);
    ᐃᐃ[306][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⲆⲆΔᐃᐃΔ);
    ᐃᐃ[306][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⲆΔⵠᐃⵠΔ);
    ᐃᐃ[306][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆᐃⲆΔⲆⲆⵠ);
    ᐃᐃ[306][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⲆⵠΔⵠᐃΔ);
    ᐃᐃ[306][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⵠΔⵠᐃΔᐃ);
    ᐃᐃ[307] = [];
    ᐃᐃ[307][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[307][v585.ᐃⲆΔ] = [];
    ᐃᐃ[307][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⲆᐃⵠⵠⵠΔ);
    ᐃᐃ[307][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃᐃΔⵠⲆⲆᐃ);
    ᐃᐃ[307][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆᐃⲆΔⵠᐃΔ);
    ᐃᐃ[307][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠΔᐃⵠⲆΔᐃ);
    ᐃᐃ[307][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠᐃⲆⵠᐃᐃ);
    ᐃᐃ[307][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠᐃΔⲆⲆᐃᐃ);
    ᐃᐃ[308] = [];
    ᐃᐃ[308][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[308][v585.ᐃⲆΔ] = [];
    ᐃᐃ[308][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⵠΔⵠΔᐃⲆ);
    ᐃᐃ[308][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⲆᐃΔⵠΔⲆ);
    ᐃᐃ[308][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠᐃΔⵠΔΔⲆ);
    ᐃᐃ[308][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃΔⲆⵠΔᐃΔ);
    ᐃᐃ[308][v585.ᐃⲆΔ].push(ⵠᐃ.ΔΔⵠᐃΔⲆⲆ);
    ᐃᐃ[308][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⲆⵠᐃᐃⲆᐃ);
    ᐃᐃ[309] = [];
    ᐃᐃ[309][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[309][v585.ᐃⲆΔ] = [];
    ᐃᐃ[309][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⲆᐃᐃΔΔⲆ);
    ᐃᐃ[309][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠΔⵠΔᐃⲆΔ);
    ᐃᐃ[309][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⵠⵠⵠᐃΔᐃ);
    ᐃᐃ[309][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⲆⵠⵠⲆᐃⲆ);
    ᐃᐃ[309][v585.ᐃⲆΔ].push(ⵠᐃ.ΔᐃⵠⲆⲆⲆⲆ);
    ᐃᐃ[309][v585.ᐃⲆΔ].push(ⵠᐃ.ΔΔᐃⲆⵠᐃΔ);
    ᐃᐃ[310] = [];
    ᐃᐃ[310][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[310][v585.ᐃⲆΔ] = [];
    ᐃᐃ[310][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃΔᐃᐃᐃᐃⵠ);
    ᐃᐃ[310][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔⲆᐃΔⵠⵠ);
    ᐃᐃ[310][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃⵠΔΔⲆⵠ);
    ᐃᐃ[310][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠΔⵠᐃⵠⵠⵠ);
    ᐃᐃ[310][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠᐃⵠⵠᐃⵠᐃ);
    ᐃᐃ[310][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⲆᐃΔᐃᐃᐃ);
    ᐃᐃ[311] = [];
    ᐃᐃ[311][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[311][v585.ᐃⲆΔ] = [];
    ᐃᐃ[311][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⵠⵠᐃⲆΔᐃ);
    ᐃᐃ[311][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔⵠⲆΔⲆΔ);
    ᐃᐃ[311][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠΔᐃⲆⲆⲆⵠ);
    ᐃᐃ[311][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆΔΔΔⵠᐃⲆ);
    ᐃᐃ[311][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃᐃᐃᐃⵠᐃᐃ);
    ᐃᐃ[311][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⲆᐃᐃᐃⲆΔ);
    ᐃᐃ[313] = [];
    ᐃᐃ[313][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[313][v585.ᐃⲆΔ] = [];
    ᐃᐃ[313][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆΔⲆᐃⵠΔΔ);
    ᐃᐃ[313][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃⵠⲆⵠⵠΔ);
    ᐃᐃ[313][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆΔᐃⵠᐃⲆⵠ);
    ᐃᐃ[313][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠΔⵠᐃΔΔ);
    ᐃᐃ[313][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃΔⵠΔⵠⲆΔ);
    ᐃᐃ[313][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⲆⲆⵠⵠⲆⲆ);
    ᐃᐃ[312] = [];
    ᐃᐃ[312][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[312][v585.ᐃⲆΔ] = [];
    ᐃᐃ[312][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⵠΔⵠᐃⲆᐃ);
    ᐃᐃ[312][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃΔⵠⵠⲆⲆⵠ);
    ᐃᐃ[312][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆᐃΔⵠΔⵠⲆ);
    ᐃᐃ[312][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠΔⲆᐃⲆⵠⲆ);
    ᐃᐃ[312][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠᐃⲆⵠΔΔ);
    ᐃᐃ[312][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃⵠΔΔⵠΔⵠ);
    ᐃᐃ[1739] = [];
    ᐃᐃ[1739][v585.ᐃⲆᐃ] = [ⵠᐃ.ΔⵠΔⵠΔᐃΔ];
    ᐃᐃ[1739][v585.ᐃⲆΔ] = [ⵠᐃ.ⵠΔⲆⲆᐃΔⲆ];
    ᐃᐃ[1759] = [];
    ᐃᐃ[1759][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠⲆᐃⲆᐃᐃ;
    ᐃᐃ[1759][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⲆⲆⵠᐃᐃ;
    ᐃᐃ[37] = [];
    ᐃᐃ[37][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃΔⵠᐃⵠᐃ;
    ᐃᐃ[37][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔᐃᐃⵠⵠΔ;
    ᐃᐃ[38] = [];
    ᐃᐃ[38][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⵠⲆᐃᐃⲆ;
    ᐃᐃ[38][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔᐃᐃᐃᐃᐃ;
    ᐃᐃ[39] = [];
    ᐃᐃ[39][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠᐃⵠᐃΔⵠ;
    ᐃᐃ[39][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆᐃⵠⲆΔⲆ;
    ᐃᐃ[40] = [];
    ᐃᐃ[40][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆᐃᐃΔᐃΔ;
    ᐃᐃ[40][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆᐃΔΔⵠⵠ;
    ᐃᐃ[41] = [];
    ᐃᐃ[41][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃΔⲆⲆⲆⵠ;
    ᐃᐃ[41][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⵠΔΔⵠᐃ;
    ᐃᐃ[42] = [];
    ᐃᐃ[42][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⵠᐃⵠⲆᐃ;
    ᐃᐃ[42][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⵠΔⵠᐃᐃ;
    ᐃᐃ[43] = [];
    ᐃᐃ[43][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔᐃⵠⵠⲆⵠ;
    ᐃᐃ[43][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔᐃⲆΔⲆⲆ;
    ᐃᐃ[44] = [];
    ᐃᐃ[44][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃᐃⲆⵠᐃΔ;
    ᐃᐃ[44][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔΔΔΔΔⵠ;
    ᐃᐃ[45] = [];
    ᐃᐃ[45][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆⲆⵠⲆᐃⵠ;
    ᐃᐃ[45][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠᐃᐃⲆᐃⲆ;
    ᐃᐃ[50] = [];
    ᐃᐃ[50][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔᐃⵠΔⲆⲆ;
    ᐃᐃ[50][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⵠᐃᐃΔᐃ;
    ᐃᐃ[52] = [];
    ᐃᐃ[52][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔⵠᐃᐃⲆᐃ;
    ᐃᐃ[52][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⵠΔⲆΔᐃ;
    ᐃᐃ[53] = [];
    ᐃᐃ[53][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠᐃΔⵠⲆⵠ;
    ᐃᐃ[53][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠᐃⵠⵠΔⲆ;
    ᐃᐃ[54] = [];
    ᐃᐃ[54][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔⲆΔΔᐃⵠ;
    ᐃᐃ[54][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆⵠⵠⲆⲆᐃ;
    ᐃᐃ[55] = [];
    ᐃᐃ[55][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔⲆΔⵠᐃᐃ;
    ᐃᐃ[55][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆΔⲆᐃⲆΔ;
    ᐃᐃ[56] = [];
    ᐃᐃ[56][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠⲆⵠⲆᐃΔ;
    ᐃᐃ[56][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⵠⵠⲆᐃⲆ;
    ᐃᐃ[57] = [];
    ᐃᐃ[57][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆᐃⵠᐃΔΔ;
    ᐃᐃ[57][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⲆⵠⲆⲆⲆ;
    ᐃᐃ[51] = [];
    ᐃᐃ[51][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠᐃΔᐃⲆΔ;
    ᐃᐃ[51][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆΔᐃⲆΔⲆ;
    ᐃᐃ[58] = [];
    ᐃᐃ[58][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆⲆⲆΔⵠⵠ;
    ᐃᐃ[58][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔΔⵠⵠΔⵠ;
    ᐃᐃ[59] = [];
    ᐃᐃ[59][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ;
    ᐃᐃ[59][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⵠⵠᐃΔΔ;
    ᐃᐃ[66] = [];
    ᐃᐃ[66][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔΔᐃⵠΔⲆ;
    ᐃᐃ[66][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠᐃⲆⲆⵠΔ;
    ᐃᐃ[75] = [];
    ᐃᐃ[75][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⵠΔⵠᐃⲆ;
    ᐃᐃ[75][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆᐃΔⲆⵠⲆ;
    ᐃᐃ[74] = [];
    ᐃᐃ[74][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆⲆⵠᐃᐃⲆ;
    ᐃᐃ[74][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠᐃⲆⲆⲆᐃ;
    ᐃᐃ[76] = [];
    ᐃᐃ[76][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆⵠⲆᐃΔᐃ;
    ᐃᐃ[76][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⵠⲆᐃⵠⲆ;
    ᐃᐃ[77] = [];
    ᐃᐃ[77][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⲆⵠΔⵠⵠ;
    ᐃᐃ[77][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆΔΔⲆⵠΔ;
    ᐃᐃ[78] = [];
    ᐃᐃ[78][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆⵠⵠᐃⵠⲆ;
    ᐃᐃ[78][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠΔᐃⲆΔᐃ;
    ᐃᐃ[79] = [];
    ᐃᐃ[79][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆᐃⲆⲆΔⵠ;
    ᐃᐃ[79][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⲆⵠᐃΔᐃ;
    ᐃᐃ[73] = [];
    ᐃᐃ[73][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠᐃΔⵠⲆᐃ;
    ᐃᐃ[73][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⵠᐃΔᐃⲆ;
    ᐃᐃ[80] = [];
    ᐃᐃ[80][v585.ᐃⲆᐃ] = ⵠᐃ.Ⲇⵠᐃⵠᐃⵠⵠ;
    ᐃᐃ[80][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⵠⲆⵠⵠΔ;
    ᐃᐃ[81] = [];
    ᐃᐃ[81][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆⲆⵠⲆᐃⲆ;
    ᐃᐃ[81][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠᐃⵠⲆᐃᐃ;
    ᐃᐃ[89] = [];
    ᐃᐃ[89][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃΔᐃⵠΔ;
    ᐃᐃ[89][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⵠᐃᐃᐃⲆ;
    ᐃᐃ[92] = [];
    ᐃᐃ[92][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⵠΔᐃⵠΔ;
    ᐃᐃ[92][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⵠᐃⲆΔⲆ;
    ᐃᐃ[91] = [];
    ᐃᐃ[91][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠᐃᐃⲆⲆⵠ;
    ᐃᐃ[91][v585.ᐃⲆΔ] = ⵠᐃ.ⵠᐃΔⵠΔⲆΔ;
    ᐃᐃ[93] = [];
    ᐃᐃ[93][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃᐃⲆΔΔᐃ;
    ᐃᐃ[93][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⵠⵠⵠΔⲆ;
    ᐃᐃ[94] = [];
    ᐃᐃ[94][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⵠⵠⲆᐃⵠ;
    ᐃᐃ[94][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⲆⵠⵠᐃⵠ;
    ᐃᐃ[95] = [];
    ᐃᐃ[95][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⲆⵠᐃΔΔ;
    ᐃᐃ[95][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⲆΔΔᐃᐃ;
    ᐃᐃ[96] = [];
    ᐃᐃ[96][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆⵠⵠⲆⵠⵠ;
    ᐃᐃ[96][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⲆⲆⵠΔⵠ;
    ᐃᐃ[90] = [];
    ᐃᐃ[90][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⵠΔᐃⲆⲆ;
    ᐃᐃ[90][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⵠⲆⲆΔⵠ;
    ᐃᐃ[89] = [];
    ᐃᐃ[89][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃΔᐃⵠΔ;
    ᐃᐃ[89][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⵠᐃᐃᐃⲆ;
    ᐃᐃ[97] = [];
    ᐃᐃ[97][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⲆⲆΔΔᐃ;
    ᐃᐃ[97][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆⵠΔⲆⲆᐃ;
    ᐃᐃ[98] = [];
    ᐃᐃ[98][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃΔⵠᐃᐃᐃ;
    ᐃᐃ[98][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⲆⲆⵠⲆᐃ;
    ᐃᐃ[28] = [];
    ᐃᐃ[28][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃⲆⵠᐃΔΔ;
    ᐃᐃ[28][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⵠⵠΔⲆⵠ;
    ᐃᐃ[109] = [];
    ᐃᐃ[109][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⵠᐃⲆΔᐃ;
    ᐃᐃ[109][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔᐃⲆⲆⲆⲆ;
    ᐃᐃ[111] = [];
    ᐃᐃ[111][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆⵠᐃΔⵠⵠ;
    ᐃᐃ[111][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔᐃⲆⲆⵠⵠ;
    ᐃᐃ[112] = [];
    ᐃᐃ[112][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⵠⵠᐃⵠⵠ;
    ᐃᐃ[112][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⵠᐃⲆΔⲆ;
    ᐃᐃ[113] = [];
    ᐃᐃ[113][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⵠΔᐃⲆⵠ;
    ᐃᐃ[113][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠΔΔᐃᐃⲆ;
    ᐃᐃ[114] = [];
    ᐃᐃ[114][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠⲆⵠΔΔᐃ;
    ᐃᐃ[114][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⵠᐃᐃⲆΔ;
    ᐃᐃ[115] = [];
    ᐃᐃ[115][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠᐃⵠⲆᐃΔ;
    ᐃᐃ[115][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⵠΔⵠᐃⲆ;
    ᐃᐃ[116] = [];
    ᐃᐃ[116][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃⲆⵠⵠⲆ;
    ᐃᐃ[116][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃᐃⲆᐃⲆᐃ;
    ᐃᐃ[110] = [];
    ᐃᐃ[110][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆΔΔΔᐃⵠ;
    ᐃᐃ[110][v585.ᐃⲆΔ] = ⵠᐃ.ⵠᐃΔᐃⵠⵠⵠ;
    ᐃᐃ[117] = [];
    ᐃᐃ[117][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆⵠΔᐃΔΔ;
    ᐃᐃ[117][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⲆⲆᐃΔᐃ;
    ᐃᐃ[118] = [];
    ᐃᐃ[118][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠΔΔⲆⲆⲆ;
    ᐃᐃ[118][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⲆᐃⲆΔᐃ;
    ᐃᐃ[61] = [];
    ᐃᐃ[61][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆᐃⵠⵠⵠΔ;
    ᐃᐃ[61][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔⲆⵠⵠⵠΔ;
    ᐃᐃ[17] = [];
    ᐃᐃ[17][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆΔᐃⲆⲆᐃ;
    ᐃᐃ[17][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔᐃΔⲆⵠⵠ;
    ᐃᐃ[20] = [];
    ᐃᐃ[20][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃᐃΔᐃⵠⵠ;
    ᐃᐃ[20][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⵠᐃⲆΔⲆ;
    ᐃᐃ[21] = [];
    ᐃᐃ[21][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⵠᐃᐃΔⵠ;
    ᐃᐃ[21][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃᐃⲆᐃΔⵠ;
    ᐃᐃ[22] = [];
    ᐃᐃ[22][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⵠⲆΔᐃᐃ;
    ᐃᐃ[22][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃᐃⲆΔⵠΔ;
    ᐃᐃ[23] = [];
    ᐃᐃ[23][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔΔΔᐃΔΔ;
    ᐃᐃ[23][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔΔΔΔⵠΔ;
    ᐃᐃ[24] = [];
    ᐃᐃ[24][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⵠᐃⵠⵠΔ;
    ᐃᐃ[24][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⲆⲆᐃⲆⲆ;
    ᐃᐃ[25] = [];
    ᐃᐃ[25][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠΔⵠⲆΔⲆ;
    ᐃᐃ[25][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆᐃΔᐃⲆΔ;
    ᐃᐃ[19] = [];
    ᐃᐃ[19][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⵠΔΔⲆⵠ;
    ᐃᐃ[19][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔⲆΔΔΔⵠ;
    ᐃᐃ[27] = [];
    ᐃᐃ[27][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⲆⲆᐃⲆⲆ;
    ᐃᐃ[27][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⵠᐃⵠΔⲆ;
    ᐃᐃ[26] = [];
    ᐃᐃ[26][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃᐃᐃΔⲆᐃ;
    ᐃᐃ[26][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆΔᐃⵠᐃᐃ;
    ᐃᐃ[167] = [];
    ᐃᐃ[167][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔᐃⵠΔⵠⵠⵠᐃ;
    ᐃᐃ[167][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔΔᐃᐃⵠⲆⵠᐃ;
    ᐃᐃ[168] = [];
    ᐃᐃ[168][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆᐃΔⵠΔⲆⵠΔ;
    ᐃᐃ[168][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔᐃⵠⵠⵠᐃⲆΔ;
    ᐃᐃ[169] = [];
    ᐃᐃ[169][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⲆⲆΔᐃⵠⵠⵠ;
    ᐃᐃ[169][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃΔΔΔⲆΔⵠⵠ;
    ᐃᐃ[170] = [];
    ᐃᐃ[170][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⲆⵠᐃΔⲆⲆᐃ;
    ᐃᐃ[170][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆⵠⵠⲆΔⲆⵠᐃ;
    ᐃᐃ[171] = [];
    ᐃᐃ[171][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆᐃᐃΔⲆⲆΔⲆ;
    ᐃᐃ[171][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⵠⲆⵠᐃⵠⲆⲆ;
    ᐃᐃ[172] = [];
    ᐃᐃ[172][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠᐃᐃⲆⵠᐃᐃΔ;
    ᐃᐃ[172][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆΔⵠᐃᐃⵠᐃⲆ;
    ᐃᐃ[173] = [];
    ᐃᐃ[173][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⲆⲆᐃΔⲆⲆⲆ;
    ᐃᐃ[173][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⲆΔΔⵠⲆΔΔ;
    ᐃᐃ[174] = [];
    ᐃᐃ[174][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⵠΔⲆΔⲆᐃΔ;
    ᐃᐃ[174][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⲆᐃⲆᐃᐃΔⲆ;
    ᐃᐃ[175] = [];
    ᐃᐃ[175][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⲆⲆΔᐃΔⲆⵠ;
    ᐃᐃ[175][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔΔⵠⲆΔᐃᐃⵠ;
    ᐃᐃ[176] = [];
    ᐃᐃ[176][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⵠᐃᐃⵠⵠⲆΔ;
    ᐃᐃ[176][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⵠΔᐃⲆⵠΔᐃ;
    ᐃᐃ[177] = [];
    ᐃᐃ[177][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⲆⵠᐃⲆⲆⲆΔ;
    ᐃᐃ[177][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠᐃⲆⵠⲆⵠΔΔ;
    ᐃᐃ[178] = [];
    ᐃᐃ[178][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⲆⵠΔⲆⵠⵠⵠ;
    ᐃᐃ[178][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆᐃⵠᐃⵠⵠΔᐃ;
    ᐃᐃ[179] = [];
    ᐃᐃ[179][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔᐃⵠΔⲆΔΔⲆ;
    ᐃᐃ[179][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⲆⲆⵠⲆⵠΔΔ;
    ᐃᐃ[180] = [];
    ᐃᐃ[180][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆΔΔᐃΔⲆᐃᐃ;
    ᐃᐃ[180][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆᐃⵠⵠΔⵠᐃⲆ;
    ᐃᐃ[181] = [];
    ᐃᐃ[181][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆⲆⵠⵠᐃᐃΔⲆ;
    ᐃᐃ[181][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆᐃⵠᐃᐃⲆᐃΔ;
    ᐃᐃ[163] = [];
    ᐃᐃ[163][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃᐃⵠⲆⵠΔ;
    ᐃᐃ[163][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆᐃⵠᐃᐃΔ;
    ᐃᐃ[164] = [];
    ᐃᐃ[164][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⵠΔᐃᐃⲆ;
    ᐃᐃ[164][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃΔΔⲆⲆᐃ;
    ᐃᐃ[135] = [];
    ᐃᐃ[135][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⵠΔᐃⵠⵠⵠΔ;
    ᐃᐃ[135][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⵠⲆⲆᐃⵠᐃⵠ;
    ᐃᐃ[136] = [];
    ᐃᐃ[136][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠᐃᐃΔⵠᐃⲆⵠ;
    ᐃᐃ[136][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⵠΔⵠⵠᐃΔΔ;
    ᐃᐃ[137] = [];
    ᐃᐃ[137][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⵠᐃⵠᐃΔΔⲆ;
    ᐃᐃ[137][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆᐃⵠⲆⵠΔΔᐃ;
    ᐃᐃ[138] = [];
    ᐃᐃ[138][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆᐃΔΔᐃΔⵠⵠ;
    ᐃᐃ[138][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃΔᐃᐃΔΔⵠⵠ;
    ᐃᐃ[139] = [];
    ᐃᐃ[139][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⲆⵠⵠⵠⲆⵠⲆ;
    ᐃᐃ[139][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃΔΔⵠⲆΔΔᐃ;
    ᐃᐃ[140] = [];
    ᐃᐃ[140][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔᐃⵠⲆΔⲆΔⵠ;
    ᐃᐃ[140][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⵠⵠᐃΔⲆⵠΔ;
    ᐃᐃ[148] = [];
    ᐃᐃ[148][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃᐃⲆⲆⵠⲆᐃⵠ;
    ᐃᐃ[148][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⲆⲆᐃΔΔᐃⵠ;
    ᐃᐃ[149] = [];
    ᐃᐃ[149][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⲆⲆΔΔⵠⲆΔ;
    ᐃᐃ[149][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⲆⵠⲆⲆΔᐃᐃ;
    ᐃᐃ[183] = [];
    ᐃᐃ[183][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠⵠⲆᐃⲆΔ;
    ᐃᐃ[183][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⲆⵠΔⵠΔ;
    ᐃᐃ[119] = [];
    ᐃᐃ[119][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠΔⵠⵠⵠᐃⲆΔ;
    ᐃᐃ[119][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃⵠⲆΔⵠⲆΔᐃ;
    ᐃᐃ[184] = [];
    ᐃᐃ[184][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃΔⲆⵠⲆᐃ;
    ᐃᐃ[184][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆᐃΔΔΔΔ;
    ᐃᐃ[120] = [];
    ᐃᐃ[120][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃⵠⵠΔⵠⵠⲆ;
    ᐃᐃ[120][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⲆⵠΔⵠⵠᐃⵠ;
    ᐃᐃ[185] = [];
    ᐃᐃ[185][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔᐃᐃᐃⵠᐃ;
    ᐃᐃ[185][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⲆᐃⲆⵠΔ;
    ᐃᐃ[121] = [];
    ᐃᐃ[121][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔΔⵠⵠⵠⵠᐃⲆ;
    ᐃᐃ[121][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃΔᐃⲆΔⵠΔⵠ;
    ᐃᐃ[186] = [];
    ᐃᐃ[186][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⵠᐃΔᐃΔ;
    ᐃᐃ[186][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔᐃΔΔⲆΔ;
    ᐃᐃ[122] = [];
    ᐃᐃ[122][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⲆⵠΔⵠⲆⵠΔ;
    ᐃᐃ[122][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⵠⲆⵠᐃΔⲆᐃ;
    ᐃᐃ[187] = [];
    ᐃᐃ[187][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⲆΔᐃⲆⵠ;
    ᐃᐃ[187][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠᐃⵠⵠⵠⲆ;
    ᐃᐃ[123] = [];
    ᐃᐃ[123][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆΔᐃᐃΔᐃΔΔ;
    ᐃᐃ[123][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔᐃⵠⲆⲆᐃΔⲆ;
    ᐃᐃ[188] = [];
    ᐃᐃ[188][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠᐃⲆᐃⲆⵠ;
    ᐃᐃ[188][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆΔᐃΔᐃΔⲆᐃ;
    ᐃᐃ[124] = [];
    ᐃᐃ[124][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠⲆΔⲆᐃⵠⲆΔ;
    ᐃᐃ[124][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⵠΔᐃΔⵠⵠᐃ;
    ᐃᐃ[189] = [];
    ᐃᐃ[189][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⵠⵠᐃⲆⵠ;
    ᐃᐃ[189][v585.ᐃⲆΔ] = ⵠᐃ.Ⲇᐃⵠⵠᐃᐃᐃ;
    ᐃᐃ[125] = [];
    ᐃᐃ[125][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⵠΔΔⵠᐃᐃⲆ;
    ᐃᐃ[125][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆⲆⵠⲆΔⵠΔΔ;
    ᐃᐃ[191] = [];
    ᐃᐃ[191][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⵠᐃⲆΔⲆ;
    ᐃᐃ[191][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⵠⵠᐃⵠΔ;
    ᐃᐃ[127] = [];
    ᐃᐃ[127][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⲆⲆⲆⵠᐃ;
    ᐃᐃ[127][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃᐃⵠΔⲆΔ;
    ᐃᐃ[192] = [];
    ᐃᐃ[192][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔᐃⲆⵠΔⲆ;
    ᐃᐃ[192][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃᐃⲆΔⵠᐃ;
    ᐃᐃ[128] = [];
    ᐃᐃ[128][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔᐃᐃⵠΔⲆ;
    ᐃᐃ[128][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⲆⵠⵠⲆΔ;
    ᐃᐃ[193] = [];
    ᐃᐃ[193][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⲆᐃⵠΔⲆ;
    ᐃᐃ[193][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⵠᐃΔᐃⵠ;
    ᐃᐃ[129] = [];
    ᐃᐃ[129][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠΔⲆⲆΔⵠ;
    ᐃᐃ[129][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔΔᐃⵠⵠⲆ;
    ᐃᐃ[194] = [];
    ᐃᐃ[194][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔᐃⵠⵠⵠᐃ;
    ᐃᐃ[194][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⵠⲆΔⲆⵠ;
    ᐃᐃ[130] = [];
    ᐃᐃ[130][v585.ᐃⲆᐃ] = ⵠᐃ.Ⲇᐃⵠⵠᐃⵠᐃ;
    ᐃᐃ[130][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆᐃᐃΔⵠᐃ;
    ᐃᐃ[196] = [];
    ᐃᐃ[196][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃᐃᐃΔΔᐃ;
    ᐃᐃ[196][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⲆᐃΔⲆΔ;
    ᐃᐃ[132] = [];
    ᐃᐃ[132][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⵠΔᐃᐃᐃ;
    ᐃᐃ[132][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆᐃΔⵠⲆᐃ;
    ᐃᐃ[195] = [];
    ᐃᐃ[195][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⲆΔᐃⵠᐃ;
    ᐃᐃ[195][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃᐃΔᐃⵠΔ;
    ᐃᐃ[131] = [];
    ᐃᐃ[131][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆᐃⲆᐃⵠᐃ;
    ᐃᐃ[131][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆΔᐃⵠⵠᐃ;
    ᐃᐃ[190] = [];
    ᐃᐃ[190][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⵠⲆⵠΔⲆ;
    ᐃᐃ[190][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠΔᐃⵠⵠΔ;
    ᐃᐃ[126] = [];
    ᐃᐃ[126][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⲆΔΔⲆⲆ;
    ᐃᐃ[126][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠᐃⲆΔᐃΔ;
    ᐃᐃ[198] = [];
    ᐃᐃ[198][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆᐃⵠⵠᐃⲆ;
    ᐃᐃ[198][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃᐃⲆⵠⲆⲆ;
    ᐃᐃ[134] = [];
    ᐃᐃ[134][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔⵠⵠⵠⵠⲆ;
    ᐃᐃ[134][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠᐃΔⵠᐃⲆ;
    ᐃᐃ[197] = [];
    ᐃᐃ[197][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆΔⵠⵠᐃᐃ;
    ᐃᐃ[197][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⲆⲆΔⲆⲆ;
    ᐃᐃ[133] = [];
    ᐃᐃ[133][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃᐃᐃΔⲆ;
    ᐃᐃ[133][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⲆΔΔΔΔ;
    ᐃᐃ[153] = [];
    ᐃᐃ[153][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃᐃᐃᐃⵠⵠ;
    ᐃᐃ[153][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠΔⲆⲆᐃΔ;
    ᐃᐃ[154] = [];
    ᐃᐃ[154][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⵠΔⵠᐃΔ;
    ᐃᐃ[154][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⲆⵠΔⲆⲆ;
    ᐃᐃ[31] = [];
    ᐃᐃ[31][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃⲆⵠⵠⵠ;
    ᐃᐃ[31][v585.ᐃⲆΔ] = ⵠᐃ.Δᐃⵠⵠⵠᐃⵠ;
    ᐃᐃ[1204] = [];
    ᐃᐃ[1204][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔΔⲆⵠΔΔ;
    ᐃᐃ[1204][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔΔⵠᐃⵠΔ;
    ᐃᐃ[1211] = [];
    ᐃᐃ[1211][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1211][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1211][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃΔⲆᐃᐃΔⲆⲆⲆ);
    ᐃᐃ[1211][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔⵠᐃΔΔⲆⵠᐃ);
    ᐃᐃ[1211][v585.ᐃⲆΔ].push(ⵠᐃ.ΔΔⵠᐃΔΔⲆⵠᐃ);
    ᐃᐃ[1211][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆᐃΔᐃΔⵠΔⵠᐃ);
    ᐃᐃ[1217] = [];
    ᐃᐃ[1217][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[1217][v585.ᐃⲆΔ] = [];
    ᐃᐃ[1217][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⵠⵠΔⲆⵠΔ);
    ᐃᐃ[1217][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⲆΔⵠΔⵠⵠ);
    ᐃᐃ[1217][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠⵠΔⲆᐃΔⵠ);
    ᐃᐃ[1217][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆΔΔⲆΔᐃᐃ);
    ᐃᐃ[1217][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃᐃⲆΔᐃⲆΔ);
    ᐃᐃ[1217][v585.ᐃⲆΔ].push(ⵠᐃ.ΔΔᐃⵠΔⵠⲆ);
    ᐃᐃ[99] = [];
    ᐃᐃ[99][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠⵠⲆᐃΔⵠ;
    ᐃᐃ[99][v585.ᐃⲆΔ] = ⵠᐃ.ⵠᐃⵠᐃΔⲆⵠ;
    ᐃᐃ[100] = [];
    ᐃᐃ[100][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃΔᐃⵠⵠ;
    ᐃᐃ[100][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⵠⵠΔⵠᐃ;
    ᐃᐃ[351] = [];
    ᐃᐃ[351][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[351][v585.ᐃⲆΔ] = [];
    ᐃᐃ[351][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠΔⲆⲆⵠΔΔ);
    ᐃᐃ[351][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃΔΔⲆᐃΔⵠ);
    ᐃᐃ[351][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔᐃΔΔΔᐃ);
    ᐃᐃ[351][v585.ᐃⲆΔ].push(ⵠᐃ.ΔΔᐃΔᐃΔᐃ);
    ᐃᐃ[351][v585.ᐃⲆΔ].push(ⵠᐃ.ΔⵠᐃΔΔᐃΔ);
    ᐃᐃ[351][v585.ᐃⲆΔ].push(ⵠᐃ.ΔⲆⲆΔⲆⵠΔ);
    ᐃᐃ[304] = [];
    ᐃᐃ[304][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[304][v585.ᐃⲆΔ] = [];
    ᐃᐃ[304][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃⵠⲆⵠⲆⵠ);
    ᐃᐃ[304][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃⵠΔⵠⲆΔⵠ);
    ᐃᐃ[304][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃᐃᐃΔΔⵠ);
    ᐃᐃ[304][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃⵠΔⲆⲆⲆⵠ);
    ᐃᐃ[304][v585.ᐃⲆΔ].push(ⵠᐃ.ΔᐃᐃΔⲆᐃⵠ);
    ᐃᐃ[304][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⵠⲆⲆᐃⲆⲆ);
    ᐃᐃ[305] = [];
    ᐃᐃ[305][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[305][v585.ᐃⲆΔ] = [];
    ᐃᐃ[305][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃᐃΔⲆⵠⲆⵠ);
    ᐃᐃ[305][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⵠⲆⵠΔᐃᐃ);
    ᐃᐃ[305][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠᐃΔᐃᐃⵠⲆ);
    ᐃᐃ[305][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⲆⲆⲆⵠⲆΔ);
    ᐃᐃ[305][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔΔΔⵠᐃΔ);
    ᐃᐃ[305][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠⲆᐃΔᐃᐃΔ);
    ᐃᐃ[305][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃΔᐃⵠⲆΔⵠ);
    ᐃᐃ[305][v585.ᐃⲆΔ].push(ⵠᐃ.ΔΔΔᐃΔᐃⵠ);
    ᐃᐃ[305][v585.ᐃⲆΔ].push(ⵠᐃ.ΔⵠΔᐃⵠΔⵠ);
    ᐃᐃ[305][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⲆᐃΔⵠΔΔ);
    ᐃᐃ[305][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃᐃΔΔⵠΔⲆ);
    ᐃᐃ[305][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⵠⲆⵠⲆⲆⵠ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ] = [];
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆΔ] = [];
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠΔⵠΔⲆΔΔ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔΔΔⲆΔⲆⲆ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⲆⵠⲆᐃΔⲆ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃᐃⵠⲆⵠⲆⵠ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠⵠΔⵠⵠⵠᐃ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⵠΔΔΔΔⵠ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃⲆΔᐃᐃᐃⲆ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ΔⵠⲆΔΔᐃᐃ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃᐃΔᐃᐃᐃⲆ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠΔⵠΔᐃⵠⵠ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ⲆⵠΔᐃΔΔᐃ);
    ᐃᐃ[v585.ⲆⵠⲆᐃᐃ][v585.ᐃⲆΔ].push(ⵠᐃ.ΔᐃⲆᐃⲆᐃⵠ);
    ᐃᐃ[1194] = [];
    ᐃᐃ[1194][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠⲆᐃᐃⵠᐃ;
    ᐃᐃ[1194][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔᐃⵠΔⵠⵠ;
    ᐃᐃ[1195] = ⵠᐃ.ⲆⵠᐃⲆⵠⵠⲆ;
    ᐃᐃ[102] = [];
    ᐃᐃ[102][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃᐃⵠᐃᐃⵠⲆⲆ;
    ᐃᐃ[102][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃΔΔⲆⵠⵠⵠᐃ;
    ᐃᐃ[333] = [];
    ᐃᐃ[333][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⵠⲆΔᐃΔ;
    ᐃᐃ[333][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⲆⵠᐃⵠᐃ;
    ᐃᐃ[334] = [];
    ᐃᐃ[334][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔᐃᐃΔΔᐃ;
    ᐃᐃ[334][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⲆᐃΔⵠⲆ;
    ᐃᐃ[346] = [];
    ᐃᐃ[346][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆᐃΔⵠⲆᐃ;
    ᐃᐃ[346][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠᐃⵠᐃᐃⲆ;
    ᐃᐃ[1341] = [];
    ᐃᐃ[1341][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⵠⵠⲆΔⲆ;
    ᐃᐃ[1341][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⲆⲆΔⲆⵠ;
    ᐃᐃ[1342] = ⵠᐃ.ⲆΔᐃᐃΔΔΔ;
    ᐃᐃ[1751] = [];
    ᐃᐃ[1751][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠᐃΔⲆᐃᐃ;
    ᐃᐃ[1751][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⵠⲆᐃᐃΔ;
    ᐃᐃ[1752] = ⵠᐃ.ⲆⵠΔⵠⵠΔⵠ;
    ᐃᐃ[1747] = [];
    ᐃᐃ[1747][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆⲆⲆΔᐃᐃ;
    ᐃᐃ[1747][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⵠⲆΔⵠⲆ;
    ᐃᐃ[1748] = ⵠᐃ.ᐃⵠⲆⲆᐃⲆⵠ;
    ᐃᐃ[1478] = [];
    ᐃᐃ[1478][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⵠΔⵠᐃΔ;
    ᐃᐃ[1478][v585.ᐃⲆΔ] = ⵠᐃ.ⵠᐃⲆᐃΔⵠⲆ;
    ᐃᐃ[1480] = [];
    ᐃᐃ[1480][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆΔⵠᐃᐃⲆ;
    ᐃᐃ[1480][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⵠⵠΔᐃⲆ;
    ᐃᐃ[1477] = ⵠᐃ.ⵠᐃᐃⵠⲆⵠⵠ;
    ᐃᐃ[1479] = ⵠᐃ.ᐃⵠΔⵠⲆⵠⲆ;
    ᐃᐃ[1481] = ⵠᐃ.ⵠΔᐃΔΔΔⵠ;
    ᐃᐃ[1471] = [];
    ᐃᐃ[1471][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠⵠⲆΔᐃⵠ;
    ᐃᐃ[1471][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⲆⵠΔᐃΔ;
    ᐃᐃ[1473] = [];
    ᐃᐃ[1473][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃΔᐃᐃᐃ;
    ᐃᐃ[1473][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⲆⵠⲆⵠΔ;
    ᐃᐃ[1474] = [];
    ᐃᐃ[1474][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⵠᐃⲆᐃᐃ;
    ᐃᐃ[1474][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃΔⲆᐃⵠᐃ;
    ᐃᐃ[1472] = ⵠᐃ.ΔⲆΔⲆⵠΔⲆ;
    ᐃᐃ[1476] = ⵠᐃ.ΔΔⵠⵠᐃΔⵠ;
    ᐃᐃ[1475] = ⵠᐃ.ⵠⲆⵠᐃΔΔⲆ;
    ᐃᐃ[1361] = [];
    ᐃᐃ[1361][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆᐃⵠᐃⲆΔ;
    ᐃᐃ[1361][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃΔΔⵠⲆᐃ;
    ᐃᐃ[1363] = [];
    ᐃᐃ[1363][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⲆⵠΔⵠⲆ;
    ᐃᐃ[1363][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔⵠⵠᐃΔᐃ;
    ᐃᐃ[341] = [];
    ᐃᐃ[341][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆΔᐃⵠᐃⵠ;
    ᐃᐃ[341][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⲆⵠᐃΔΔ;
    ᐃᐃ[1368] = [];
    ᐃᐃ[1368][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⵠⲆᐃᐃⲆ;
    ᐃᐃ[1368][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⵠⵠⵠⵠᐃ;
    ᐃᐃ[1371] = [];
    ᐃᐃ[1371][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠΔⵠⵠⵠⵠ;
    ᐃᐃ[1371][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆⲆᐃⵠΔΔ;
    ᐃᐃ[1367] = [];
    ᐃᐃ[1367][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆᐃⲆⲆᐃⵠ;
    ᐃᐃ[1367][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⲆⵠᐃⵠᐃ;
    ᐃᐃ[1370] = [];
    ᐃᐃ[1370][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆⵠᐃⵠᐃⲆ;
    ᐃᐃ[1370][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⲆⵠⲆᐃᐃ;
    ᐃᐃ[1364] = ⵠᐃ.ΔⵠⲆᐃⵠⵠⵠ;
    ᐃᐃ[1365] = ⵠᐃ.ΔⲆᐃΔΔⲆⲆ;
    ᐃᐃ[1366] = ⵠᐃ.ⵠⵠⲆⲆᐃΔⲆ;
    ᐃᐃ[1373] = ⵠᐃ.ⵠᐃⵠⲆⵠⵠⵠ;
    ᐃᐃ[1374] = ⵠᐃ.ΔⲆΔⲆᐃⲆⵠ;
    ᐃᐃ[1375] = ⵠᐃ.ΔΔⵠᐃᐃⵠΔ;
    ᐃᐃ[1613] = [];
    ᐃᐃ[1613][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆᐃΔⵠⵠᐃΔⵠ;
    ᐃᐃ[1613][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⲆⵠᐃⵠΔⵠⵠ;
    ᐃᐃ[358] = [];
    ᐃᐃ[358][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⲆᐃᐃⵠΔⵠᐃ;
    ᐃᐃ[358][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠΔᐃΔⵠⵠⲆⲆ;
    ᐃᐃ[1609] = [];
    ᐃᐃ[1609][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠΔᐃΔⲆᐃΔᐃ;
    ᐃᐃ[1609][v585.ᐃⲆΔ] = ⵠᐃ.ⵠᐃⲆΔΔⵠⵠⲆⲆ;
    ᐃᐃ[1612] = [];
    ᐃᐃ[1612][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠⵠΔⵠⵠⵠⲆⵠ;
    ᐃᐃ[1612][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃⲆΔⵠΔⵠⲆⵠ;
    ᐃᐃ[1614] = ⵠᐃ.ⵠᐃⲆⲆᐃⲆΔ;
    ᐃᐃ[1610] = ⵠᐃ.ⵠᐃⵠⲆΔᐃⲆ;
    ᐃᐃ[1376] = [];
    ᐃᐃ[1376][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆⵠΔⲆⵠⵠ;
    ᐃᐃ[1376][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⲆⵠᐃⵠΔ;
    ᐃᐃ[342] = [];
    ᐃᐃ[342][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠΔΔᐃΔᐃ;
    ᐃᐃ[342][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⵠⵠⵠΔⲆ;
    ᐃᐃ[1378] = [];
    ᐃᐃ[1378][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃⲆΔΔᐃⵠ;
    ᐃᐃ[1378][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃΔΔⵠΔⵠ;
    ᐃᐃ[1380] = [];
    ᐃᐃ[1380][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⲆⲆᐃΔΔ;
    ᐃᐃ[1380][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠΔⵠⲆΔᐃ;
    ᐃᐃ[1383] = [];
    ᐃᐃ[1383][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⲆⵠⵠᐃⵠ;
    ᐃᐃ[1383][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔΔⲆΔΔᐃ;
    ᐃᐃ[1379] = [];
    ᐃᐃ[1379][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔΔΔᐃᐃΔ;
    ᐃᐃ[1379][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⵠⲆⲆΔⲆ;
    ᐃᐃ[1382] = [];
    ᐃᐃ[1382][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔΔΔⵠΔΔ;
    ᐃᐃ[1382][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⵠⲆⵠⵠⵠ;
    ᐃᐃ[1381] = [];
    ᐃᐃ[1381][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔΔᐃᐃⲆⵠ;
    ᐃᐃ[1381][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠΔΔΔⵠⲆ;
    ᐃᐃ[1384] = [];
    ᐃᐃ[1384][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠΔⵠⵠⲆⲆ;
    ᐃᐃ[1384][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔΔⵠⵠⲆⲆ;
    ᐃᐃ[1385] = ⵠᐃ.ⲆᐃᐃΔⵠᐃᐃ;
    ᐃᐃ[1386] = ⵠᐃ.ΔⲆⵠⵠⲆⵠᐃ;
    ᐃᐃ[1387] = ⵠᐃ.ᐃⲆⵠᐃⵠᐃᐃ;
    ᐃᐃ[1391] = [];
    ᐃᐃ[1391][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⵠΔⲆⲆᐃ;
    ᐃᐃ[1391][v585.ᐃⲆΔ] = ⵠᐃ.ⲆᐃΔⵠⲆⵠΔ;
    ᐃᐃ[343] = [];
    ᐃᐃ[343][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⵠΔⵠⵠΔ;
    ᐃᐃ[343][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⲆΔᐃⲆⵠ;
    ᐃᐃ[1393] = [];
    ᐃᐃ[1393][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔᐃⲆᐃⵠⲆ;
    ᐃᐃ[1393][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆᐃᐃⵠⲆΔ;
    ᐃᐃ[1395] = [];
    ᐃᐃ[1395][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆⵠΔΔΔᐃ;
    ᐃᐃ[1395][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⲆⲆⵠⵠᐃ;
    ᐃᐃ[1398] = [];
    ᐃᐃ[1398][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠᐃⲆⲆⵠⵠ;
    ᐃᐃ[1398][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃᐃᐃⲆⲆΔ;
    ᐃᐃ[1394] = [];
    ᐃᐃ[1394][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆⵠᐃⵠⵠᐃ;
    ᐃᐃ[1394][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠΔⲆᐃⲆⲆ;
    ᐃᐃ[1397] = [];
    ᐃᐃ[1397][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆᐃΔⲆⲆⲆ;
    ᐃᐃ[1397][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⵠᐃⲆⲆⲆ;
    ᐃᐃ[1396] = [];
    ᐃᐃ[1396][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃΔⵠⲆΔⵠ;
    ᐃᐃ[1396][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆΔᐃⵠⵠᐃ;
    ᐃᐃ[1399] = [];
    ᐃᐃ[1399][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃⵠⵠᐃⵠⲆ;
    ᐃᐃ[1399][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⵠⲆⵠⵠΔ;
    ᐃᐃ[1400] = ⵠᐃ.ⲆⵠⲆⲆⲆⵠᐃ;
    ᐃᐃ[1401] = ⵠᐃ.ᐃᐃΔΔⲆᐃΔ;
    ᐃᐃ[1402] = ⵠᐃ.ⵠⲆⵠΔΔΔΔ;
    ᐃᐃ[1406] = [];
    ᐃᐃ[1406][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⲆΔᐃΔⵠ;
    ᐃᐃ[1406][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⲆΔΔⲆⲆᐃ;
    ᐃᐃ[345] = [];
    ᐃᐃ[345][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔᐃΔᐃⵠΔ;
    ᐃᐃ[345][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⲆᐃΔⲆⲆ;
    ᐃᐃ[1423] = ⵠᐃ.ᐃᐃⲆⲆΔΔⲆ;
    ᐃᐃ[1421] = [];
    ᐃᐃ[1421][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃᐃⲆΔⵠΔ;
    ᐃᐃ[1421][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃΔᐃⲆᐃᐃ;
    ᐃᐃ[1422] = [];
    ᐃᐃ[1422][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆΔⵠΔΔΔ;
    ᐃᐃ[1422][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆΔⲆⵠⲆⵠ;
    ᐃᐃ[1408] = [];
    ᐃᐃ[1408][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠⲆᐃΔᐃΔ;
    ᐃᐃ[1408][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⵠⵠⵠᐃΔ;
    ᐃᐃ[1410] = [];
    ᐃᐃ[1410][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆⵠᐃᐃⵠⵠ;
    ᐃᐃ[1410][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔᐃⲆⵠᐃⵠ;
    ᐃᐃ[1413] = [];
    ᐃᐃ[1413][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃᐃⵠΔⲆᐃ;
    ᐃᐃ[1413][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃⵠᐃΔⵠⲆ;
    ᐃᐃ[1409] = [];
    ᐃᐃ[1409][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⵠⵠΔᐃᐃᐃ;
    ᐃᐃ[1409][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆᐃΔⵠᐃⵠ;
    ᐃᐃ[1412] = [];
    ᐃᐃ[1412][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃΔΔⲆᐃⲆ;
    ᐃᐃ[1412][v585.ᐃⲆΔ] = ⵠᐃ.Ⲇᐃᐃⵠⵠⵠⵠ;
    ᐃᐃ[1411] = [];
    ᐃᐃ[1411][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⲆⵠΔⲆΔ;
    ᐃᐃ[1411][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⵠⲆΔᐃΔ;
    ᐃᐃ[1414] = [];
    ᐃᐃ[1414][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⵠᐃⵠΔⵠ;
    ᐃᐃ[1414][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔᐃⵠᐃΔⲆ;
    ᐃᐃ[1415] = ⵠᐃ.ⵠⵠᐃᐃᐃᐃⲆ;
    ᐃᐃ[1416] = ⵠᐃ.ⵠΔⵠΔⵠΔⲆ;
    ᐃᐃ[1417] = ⵠᐃ.ᐃⲆᐃⵠⲆΔⵠ;
    ᐃᐃ[1427] = [];
    ᐃᐃ[1427][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠⵠⲆⲆΔΔ;
    ᐃᐃ[1427][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔⲆⲆⲆΔᐃ;
    ᐃᐃ[348] = [];
    ᐃᐃ[348][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃΔⲆⲆⲆᐃⵠ;
    ᐃᐃ[348][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔᐃⵠΔΔⲆ;
    ᐃᐃ[1444] = ⵠᐃ.ΔⵠⲆᐃⲆᐃᐃ;
    ᐃᐃ[1442] = [];
    ᐃᐃ[1442][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃᐃᐃΔⲆⲆ;
    ᐃᐃ[1442][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆⵠⲆΔⵠΔ;
    ᐃᐃ[1443] = [];
    ᐃᐃ[1443][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆᐃⵠᐃⲆⲆᐃ;
    ᐃᐃ[1443][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔΔΔⲆᐃⲆ;
    ᐃᐃ[1429] = [];
    ᐃᐃ[1429][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆⵠᐃⵠⵠΔ;
    ᐃᐃ[1429][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆΔⵠⲆΔⵠ;
    ᐃᐃ[1431] = [];
    ᐃᐃ[1431][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⲆⲆΔΔΔⵠ;
    ᐃᐃ[1431][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆᐃΔⲆΔΔ;
    ᐃᐃ[1434] = [];
    ᐃᐃ[1434][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆΔᐃⵠⲆⲆ;
    ᐃᐃ[1434][v585.ᐃⲆΔ] = ⵠᐃ.Ⲇᐃᐃᐃᐃᐃⵠ;
    ᐃᐃ[1430] = [];
    ᐃᐃ[1430][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⲆᐃⵠⵠⲆ;
    ᐃᐃ[1430][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔΔⵠᐃᐃⵠ;
    ᐃᐃ[1433] = [];
    ᐃᐃ[1433][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃΔΔΔⲆ;
    ᐃᐃ[1433][v585.ᐃⲆΔ] = ⵠᐃ.ᐃᐃᐃᐃΔⵠⲆ;
    ᐃᐃ[1432] = [];
    ᐃᐃ[1432][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃΔΔⵠⲆᐃ;
    ᐃᐃ[1432][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔᐃⵠⵠΔⲆ;
    ᐃᐃ[1435] = [];
    ᐃᐃ[1435][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠⵠᐃⲆᐃᐃ;
    ᐃᐃ[1435][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⲆⵠΔΔΔⵠ;
    ᐃᐃ[1436] = ⵠᐃ.ⵠⲆΔⵠⵠᐃᐃ;
    ᐃᐃ[1437] = ⵠᐃ.ⵠᐃΔᐃⲆᐃᐃ;
    ᐃᐃ[1438] = ⵠᐃ.ⲆΔⵠⵠⲆⵠΔ;
    ᐃᐃ[1445] = [];
    ᐃᐃ[1445][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⵠΔᐃⲆⲆ;
    ᐃᐃ[1445][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⵠⲆΔᐃⵠ;
    ᐃᐃ[1446] = [];
    ᐃᐃ[1446][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆΔⵠΔᐃΔ;
    ᐃᐃ[1446][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠᐃⵠⲆΔΔ;
    ᐃᐃ[1462] = ⵠᐃ.ⲆⵠΔΔᐃⵠⲆ;
    ᐃᐃ[1460] = [];
    ᐃᐃ[1460][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃⲆᐃᐃⲆⵠ;
    ᐃᐃ[1460][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠᐃᐃⲆΔⵠ;
    ᐃᐃ[1461] = [];
    ᐃᐃ[1461][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⲆᐃⵠⲆⲆ;
    ᐃᐃ[1461][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠⵠΔⲆΔᐃ;
    ᐃᐃ[1447] = [];
    ᐃᐃ[1447][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃᐃΔΔᐃⵠ;
    ᐃᐃ[1447][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆΔΔⵠⲆⵠ;
    ᐃᐃ[1449] = [];
    ᐃᐃ[1449][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔΔΔⵠᐃΔ;
    ᐃᐃ[1449][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⵠᐃⲆⵠΔ;
    ᐃᐃ[1452] = [];
    ᐃᐃ[1452][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⲆᐃⲆΔᐃΔ;
    ᐃᐃ[1452][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠΔⲆⲆⵠⲆ;
    ᐃᐃ[1448] = [];
    ᐃᐃ[1448][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠΔⲆⵠΔⲆ;
    ᐃᐃ[1448][v585.ᐃⲆΔ] = ⵠᐃ.ΔΔΔΔⵠⲆⲆ;
    ᐃᐃ[1451] = [];
    ᐃᐃ[1451][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃΔΔⲆᐃᐃ;
    ᐃᐃ[1451][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔⵠᐃⲆⵠⲆ;
    ᐃᐃ[1450] = [];
    ᐃᐃ[1450][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆΔⵠᐃᐃᐃⵠ;
    ᐃᐃ[1450][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⵠⲆᐃⵠᐃ;
    ᐃᐃ[1453] = [];
    ᐃᐃ[1453][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆᐃᐃⵠᐃᐃ;
    ᐃᐃ[1453][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠⵠⵠΔᐃΔ;
    ᐃᐃ[1454] = ⵠᐃ.ΔⲆⵠⲆⵠᐃΔ;
    ᐃᐃ[1455] = ⵠᐃ.ⵠⲆΔⲆᐃⲆⵠ;
    ᐃᐃ[1456] = ⵠᐃ.ⵠΔΔⵠᐃᐃᐃ;
    ᐃᐃ[1350] = [];
    ᐃᐃ[1350][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃΔᐃᐃΔΔ;
    ᐃᐃ[1350][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔΔⲆⲆΔᐃ;
    ᐃᐃ[1351] = [];
    ᐃᐃ[1351][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃΔⵠⲆⲆ;
    ᐃᐃ[1351][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⵠⵠᐃⵠΔ;
    ᐃᐃ[1352] = [];
    ᐃᐃ[1352][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⲆⵠᐃᐃⲆ;
    ᐃᐃ[1352][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⵠΔⵠΔⲆ;
    ᐃᐃ[338] = [];
    ᐃᐃ[338][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⵠᐃⲆⲆⵠⲆ;
    ᐃᐃ[338][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠᐃⲆⲆⵠⲆ;
    ᐃᐃ[344] = [];
    ᐃᐃ[344][v585.ᐃⲆᐃ] = ⵠᐃ.ΔᐃᐃⵠᐃⲆᐃ;
    ᐃᐃ[344][v585.ᐃⲆΔ] = ⵠᐃ.ΔᐃᐃⵠᐃⲆᐃ;
    ᐃᐃ[359] = [];
    ᐃᐃ[359][v585.ᐃⲆᐃ] = ⵠᐃ.ⲆⵠᐃΔⲆⲆΔ;
    ᐃᐃ[359][v585.ᐃⲆΔ] = ⵠᐃ.ⲆⵠᐃΔⲆⲆΔ;
    ᐃᐃ[1353] = ⵠᐃ.ᐃΔΔⲆⲆᐃΔ;
    ᐃᐃ[162] = [];
    ᐃᐃ[162][v585.ᐃⲆᐃ] = ⵠᐃ.ΔΔⲆⵠᐃΔΔ;
    ᐃᐃ[162][v585.ᐃⲆΔ] = ⵠᐃ.ᐃⵠⵠᐃᐃⲆⵠ;
    ᐃᐃ[165] = [];
    ᐃᐃ[165][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆᐃΔᐃⵠⵠ;
    ᐃᐃ[165][v585.ᐃⲆΔ] = ⵠᐃ.ΔⲆⲆᐃⲆⵠΔ;
    ᐃᐃ[357] = [];
    ᐃᐃ[357][v585.ᐃⲆᐃ] = [ⵠᐃ.ΔΔᐃᐃⲆΔᐃ, ⵠᐃ.ᐃΔΔᐃⲆΔᐃ, ⵠᐃ.ⵠⵠⵠⲆᐃⲆΔ, ⵠᐃ.ᐃᐃΔⲆⵠⲆᐃ, ⵠᐃ.ⵠΔᐃᐃᐃⵠᐃ, ⵠᐃ.ⵠⲆⵠᐃΔᐃΔ, ⵠᐃ.ᐃᐃⲆΔᐃⲆⵠ, ⵠᐃ.ⵠⵠᐃⲆᐃⲆⵠ, ⵠᐃ.ΔΔⵠⵠᐃⲆⵠ, ⵠᐃ.ΔΔⵠⲆⵠΔⲆ, ⵠᐃ.ΔΔⵠᐃⲆΔⲆ, ⵠᐃ.ΔΔᐃⲆⵠΔⲆ, ⵠᐃ.ᐃᐃⲆᐃⵠΔⲆ, ⵠᐃ.ΔΔᐃⵠⵠⵠᐃ, ⵠᐃ.ΔΔⲆΔᐃⵠᐃ, ⵠᐃ.ⲆᐃᐃᐃΔΔᐃ, ⵠᐃ.ᐃⲆΔⵠⵠᐃᐃ, ⵠᐃ.ⵠⲆᐃⵠⵠᐃⲆ];
    ᐃᐃ[357][v585.ᐃⲆΔ] = [ⵠᐃ.ⲆⲆᐃⲆⲆΔΔ, ⵠᐃ.ᐃⵠᐃⵠⵠΔᐃ, ⵠᐃ.ⲆᐃⲆⵠΔⵠΔ, ⵠᐃ.ΔⲆᐃΔΔΔΔ, ⵠᐃ.ᐃΔⲆᐃⲆⵠΔ, ⵠᐃ.ⵠΔᐃΔΔⲆΔ, ⵠᐃ.ⵠⵠᐃⵠⵠⵠⲆ, ⵠᐃ.ⵠⵠᐃⲆᐃⲆⵠ, ⵠᐃ.Ⲇᐃⵠⵠᐃᐃᐃ, ⵠᐃ.ΔⵠΔᐃⵠⵠΔ, ⵠᐃ.ΔⲆⵠⵠᐃⵠΔ, ⵠᐃ.ΔᐃᐃⲆΔⵠᐃ, ⵠᐃ.ᐃⲆⵠᐃΔᐃⵠ, ⵠᐃ.ⲆᐃⵠⲆΔⲆⵠ, ⵠᐃ.ΔᐃᐃΔᐃⵠΔ, ⵠᐃ.ΔⵠⲆᐃΔⲆΔ, ⵠᐃ.ⵠΔⲆⲆΔⲆⲆ, ⵠᐃ.ᐃᐃᐃⲆⵠⲆⲆ];
    ᐃᐃ[166] = [];
    ᐃᐃ[166][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃᐃᐃⵠᐃⵠ;
    ᐃᐃ[166][v585.ᐃⲆΔ] = ⵠᐃ.ⵠΔᐃⵠΔⵠⲆ;
    ᐃᐃ[335] = [];
    ᐃᐃ[335][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠΔⲆᐃⲆᐃⵠ;
    ᐃᐃ[335][v585.ᐃⲆΔ] = ⵠᐃ.ᐃΔⵠⲆᐃⵠΔ;
    ᐃᐃ[336] = [];
    ᐃᐃ[336][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠᐃⲆⵠΔᐃⵠ;
    ᐃᐃ[336][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⲆⲆⵠΔΔΔ;
    ᐃᐃ[33] = [];
    ᐃᐃ[33][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃᐃᐃⲆᐃΔⵠ;
    ᐃᐃ[33][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⲆⲆΔⲆⵠ;
    ᐃᐃ[161] = [];
    ᐃᐃ[161][v585.ᐃⲆᐃ] = ⵠᐃ.ΔⲆᐃᐃⵠΔΔΔΔ;
    ᐃᐃ[161][v585.ᐃⲆΔ] = ⵠᐃ.ⲆΔⲆᐃⲆⵠΔⵠⲆ;
    ᐃᐃ[160] = [];
    ᐃᐃ[160][v585.ᐃⲆᐃ] = ⵠᐃ.ⵠⲆᐃⲆΔⲆⲆⲆᐃ;
    ᐃᐃ[160][v585.ᐃⲆΔ] = ⵠᐃ.ⵠⵠⵠⲆⲆᐃⲆⵠⵠ;
    ᐃᐃ[155] = [];
    ᐃᐃ[155][v585.ᐃⲆᐃ] = ⵠᐃ.ᐃⵠᐃᐃⲆᐃΔ;
    ᐃᐃ[155][v585.ᐃⲆΔ] = ⵠᐃ.ΔⵠΔⵠⲆⵠᐃ;
    ᐃᐃ[840] = [];
    ᐃᐃ[840][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[840][v585.ᐃⲆΔ] = [];
    ᐃᐃ[840][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆᐃⲆΔᐃⲆⵠⲆⲆ);
    ᐃᐃ[840][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⵠΔⲆⵠΔⲆⲆⲆ);
    ᐃᐃ[840][v585.ᐃⲆᐃ].push(ⵠᐃ.ᐃΔⲆⲆⲆᐃΔⲆⵠ);
    ᐃᐃ[840][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠⵠⵠⲆΔΔΔᐃⵠ);
    ᐃᐃ[840][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃᐃⲆᐃⵠⵠᐃⲆⲆ);
    ᐃᐃ[840][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠΔΔᐃΔΔᐃΔΔ);
    ᐃᐃ[838] = [];
    ᐃᐃ[838][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[838][v585.ᐃⲆΔ] = [];
    ᐃᐃ[838][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⵠᐃΔᐃᐃⲆⵠᐃ);
    ᐃᐃ[838][v585.ᐃⲆᐃ].push(ⵠᐃ.ⵠᐃΔⲆⲆΔᐃΔⵠ);
    ᐃᐃ[838][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⲆΔⲆΔⲆᐃΔΔ);
    ᐃᐃ[838][v585.ᐃⲆΔ].push(ⵠᐃ.ⵠᐃᐃΔᐃᐃⵠⵠΔ);
    ᐃᐃ[838][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃⵠⲆⵠΔⵠⵠⲆⲆ);
    ᐃᐃ[838][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃⲆᐃⵠᐃᐃᐃⲆᐃ);
    ᐃᐃ[839] = [];
    ᐃᐃ[839][v585.ᐃⲆᐃ] = [];
    ᐃᐃ[839][v585.ᐃⲆΔ] = [];
    ᐃᐃ[839][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔⲆⲆΔΔⲆΔᐃΔ);
    ᐃᐃ[839][v585.ᐃⲆᐃ].push(ⵠᐃ.ⲆⲆᐃᐃΔⲆᐃΔⵠ);
    ᐃᐃ[839][v585.ᐃⲆᐃ].push(ⵠᐃ.ΔᐃⵠⵠⲆⵠⵠᐃᐃ);
    ᐃᐃ[839][v585.ᐃⲆΔ].push(ⵠᐃ.ΔΔΔᐃᐃᐃΔᐃⵠ);
    ᐃᐃ[839][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃⵠⲆᐃΔΔⵠᐃΔ);
    ᐃᐃ[839][v585.ᐃⲆΔ].push(ⵠᐃ.ᐃᐃᐃⵠⵠᐃⵠⲆᐃ);
    ⲆᐃⲆᐃ.cop = [];
    ⲆᐃⲆᐃ.cop[0] = [ⵠᐃ.ⲆᐃⵠᐃΔΔᐃ, ⵠᐃ.ΔᐃΔⲆᐃᐃⵠ];
    ⲆᐃⲆᐃ.cop[1] = ⲆᐃⲆᐃ.cop[0];
    ⲆᐃⲆᐃ.cop[2] = [ⵠᐃ.ⵠᐃᐃⵠΔΔΔ, ⵠᐃ.ⵠⵠΔⵠΔᐃΔ];
    ⲆᐃⲆᐃ.iro = [];
    ⲆᐃⲆᐃ.iro[0] = [ⵠᐃ.ⵠⲆⵠⵠⲆᐃⲆ, ⵠᐃ.ⵠⵠᐃΔⵠⵠⲆ];
    ⲆᐃⲆᐃ.iro[1] = ⲆᐃⲆᐃ.iro[0];
    ⲆᐃⲆᐃ.iro[2] = [ⵠᐃ.ᐃⲆⵠⲆΔⲆⵠ, ⵠᐃ.ᐃⲆᐃᐃⵠᐃⵠ];
    ⲆᐃⲆᐃ.top = [];
    ⲆᐃⲆᐃ.top[0] = [ⵠᐃ.ⵠⲆⵠᐃⵠᐃⲆ, ⵠᐃ.ⲆΔⵠᐃᐃⵠΔ];
    ⲆᐃⲆᐃ.top[1] = ⲆᐃⲆᐃ.top[0];
    ⲆᐃⲆᐃ.top[2] = [ⵠᐃ.ᐃΔᐃᐃⵠⵠⵠ, ⵠᐃ.ᐃⵠⲆⲆⵠⵠⲆ];
    ⲆᐃⲆᐃ.sap = [];
    ⲆᐃⲆᐃ.sap[0] = [ⵠᐃ.ⲆⲆᐃⲆⵠⵠⲆ, ⵠᐃ.ᐃⵠᐃΔⲆⵠᐃ];
    ⲆᐃⲆᐃ.sap[1] = ⲆᐃⲆᐃ.sap[0];
    ⲆᐃⲆᐃ.sap[2] = [ⵠᐃ.ⲆΔΔᐃΔⲆΔ, ⵠᐃ.ᐃⵠᐃᐃᐃᐃᐃ];
    ⲆᐃⲆᐃ.jad = [];
    ⲆᐃⲆᐃ.jad[0] = [ⵠᐃ.ⲆΔΔᐃⵠᐃΔ, ⵠᐃ.ⲆⲆΔΔⲆⲆⵠ];
    ⲆᐃⲆᐃ.jad[1] = ⲆᐃⲆᐃ.jad[0];
    ⲆᐃⲆᐃ.jad[2] = [ⵠᐃ.ᐃΔⵠᐃⵠⵠⵠ, ⵠᐃ.ᐃΔᐃᐃΔⲆⲆ];
    ⲆᐃⲆᐃ.rub = [];
    ⲆᐃⲆᐃ.rub[0] = [ⵠᐃ.ⵠⵠΔΔⵠⲆⵠ, ⵠᐃ.ⵠΔⵠⲆⵠⲆᐃ];
    ⲆᐃⲆᐃ.rub[1] = ⲆᐃⲆᐃ.rub[0];
    ⲆᐃⲆᐃ.rub[2] = [ⵠᐃ.ⲆΔΔⲆᐃⲆⲆ, ⵠᐃ.ⵠⲆⲆᐃⵠΔⵠ];
    ⲆᐃⲆᐃ.aqu = [];
    ⲆᐃⲆᐃ.aqu[0] = [ⵠᐃ.ᐃⲆⲆΔᐃᐃⵠ, ⵠᐃ.ⵠᐃⲆᐃᐃᐃⲆ];
    ⲆᐃⲆᐃ.aqu[1] = ⲆᐃⲆᐃ.aqu[0];
    ⲆᐃⲆᐃ.aqu[2] = [ⵠᐃ.ⲆΔⲆⲆᐃΔⵠ, ⵠᐃ.ⲆᐃⲆᐃⲆΔⲆ];
    ⲆᐃⲆᐃ.coa = [];
    ⲆᐃⲆᐃ.coa[0] = [ⵠᐃ.ⲆΔⵠΔΔⲆΔ, ⵠᐃ.ⲆΔⲆⲆᐃⵠⲆ];
    ⲆᐃⲆᐃ.coa[1] = ⲆᐃⲆᐃ.coa[0];
    ⲆᐃⲆᐃ.coa[2] = [ⵠᐃ.ⵠⲆⵠⲆᐃⵠΔ, ⵠᐃ.ⵠⵠᐃⲆᐃᐃᐃ];
    ⲆᐃⲆᐃ.jut = [];
    ⲆᐃⲆᐃ.jut[0] = [ⵠᐃ.ᐃΔΔⲆⲆⵠᐃ, ⵠᐃ.ⲆⵠΔⵠᐃⲆᐃ];
    ⲆᐃⲆᐃ.jut[1] = ⲆᐃⲆᐃ.jut[0];
    ⲆᐃⲆᐃ.jut[2] = ⲆᐃⲆᐃ.jut[0];
    ⲆᐃⲆᐃ.jus = [];
    ⲆᐃⲆᐃ.jus[0] = [ⵠᐃ.ⲆΔⲆΔⵠⲆᐃ, ⵠᐃ.ⲆⲆⵠΔⲆᐃΔ];
    ⲆᐃⲆᐃ.jus[1] = ⲆᐃⲆᐃ.jus[0];
    ⲆᐃⲆᐃ.jus[2] = [ⵠᐃ.ΔᐃⵠΔᐃᐃᐃ, ⵠᐃ.ᐃᐃⵠⵠΔⲆⵠ];
    ⲆᐃⲆᐃ.jub = [];
    ⲆᐃⲆᐃ.jub[0] = [ⵠᐃ.ⵠⵠΔᐃΔⲆⲆ, ⵠᐃ.ᐃⲆⵠⲆⵠⵠᐃ];
    ⲆᐃⲆᐃ.jub[1] = ⲆᐃⲆᐃ.jub[0];
    ⲆᐃⲆᐃ.bap = [];
    ⲆᐃⲆᐃ.bap[0] = [ⵠᐃ.ⲆᐃΔΔΔⵠᐃ, ⵠᐃ.ⵠⲆⲆᐃΔⲆⵠ];
    ⲆᐃⲆᐃ.g = [];
    ⲆᐃⲆᐃ.g[0] = [ⵠᐃ.ⵠΔΔΔⲆⲆΔ, ⵠᐃ.ᐃⵠⵠΔⲆⵠΔ];
    ⲆᐃⲆᐃ.g[1] = ⲆᐃⲆᐃ.g[0];
    ⲆᐃⲆᐃ.g[2] = [ⵠᐃ.ⵠⵠⲆⵠⵠᐃⲆ, ⵠᐃ.ΔᐃⵠΔᐃⵠΔ];
    ⲆᐃⲆᐃ.m = [];
    ⲆᐃⲆᐃ.m[0] = [ⵠᐃ.ᐃⲆⵠⲆΔᐃⲆ, ⵠᐃ.ᐃΔΔᐃᐃⵠⲆ];
    ⲆᐃⲆᐃ.m[1] = ⲆᐃⲆᐃ.m[0];
    ⲆᐃⲆᐃ.m[2] = [ⵠᐃ.ᐃᐃᐃᐃΔᐃⲆ, ⵠᐃ.ᐃΔⵠᐃᐃⵠᐃ];
    ⲆᐃⲆᐃ.la = [];
    ⲆᐃⲆᐃ.la[0] = [ⵠᐃ.ΔΔᐃΔΔΔⲆ, ⵠᐃ.ⲆⲆⲆΔΔΔⲆ];
    ⲆᐃⲆᐃ.la[1] = ⲆᐃⲆᐃ.la[0];
    ⲆᐃⲆᐃ.la[2] = ⲆᐃⲆᐃ.la[0];
    ⲆᐃⲆᐃ.la[3] = ⲆᐃⲆᐃ.la[0];
    ⲆᐃⲆᐃ.la[4] = ⲆᐃⲆᐃ.la[0];
    ⲆᐃⲆᐃ.la[5] = ⲆᐃⲆᐃ.la[0];
    ⲆᐃⲆᐃ.s = [];
    ⲆᐃⲆᐃ.s[0] = [ⵠᐃ.ΔᐃⵠⵠΔⵠᐃ, ⵠᐃ.ⵠΔⲆᐃⲆⵠⵠ];
    ⲆᐃⲆᐃ.s[1] = ⲆᐃⲆᐃ.s[0];
    ⲆᐃⲆᐃ.s[2] = [ⵠᐃ.ⲆᐃⲆΔᐃΔⵠ, ⵠᐃ.ΔⲆᐃᐃᐃⲆⵠ];
    ⲆᐃⲆᐃ.p = [];
    ⲆᐃⲆᐃ.p[0] = [ⵠᐃ.ⲆⲆⲆⵠⵠΔⲆ, ⵠᐃ.ⲆⲆⲆⵠⵠΔⲆ];
    ⲆᐃⲆᐃ.a = [];
    ⲆᐃⲆᐃ.a[0] = [ⵠᐃ.ⵠⵠⲆᐃⵠΔⵠ, ⵠᐃ.ᐃᐃΔᐃΔᐃⵠ];
    ⲆᐃⲆᐃ.a[1] = ⲆᐃⲆᐃ.a[0];
    ⲆᐃⲆᐃ.a[2] = ⲆᐃⲆᐃ.a[0];
    ⲆᐃⲆᐃ.d = [];
    ⲆᐃⲆᐃ.d[0] = [ⵠᐃ.ⵠᐃΔⵠΔⵠᐃ, ⵠᐃ.ΔⵠⲆⵠΔΔⲆ];
    ⲆᐃⲆᐃ.d[1] = ⲆᐃⲆᐃ.d[0];
    ⲆᐃⲆᐃ.d[2] = ⲆᐃⲆᐃ.d[0];
    ⲆᐃⲆᐃ.re = [];
    ⲆᐃⲆᐃ.re[0] = [ⵠᐃ.ⲆⲆⲆⵠⲆᐃΔ, ⵠᐃ.ⵠᐃΔⲆⵠᐃⲆ];
    ⲆᐃⲆᐃ.re[1] = ⲆᐃⲆᐃ.re[0];
    ⲆᐃⲆᐃ.re[2] = ⲆᐃⲆᐃ.re[0];
    ⲆᐃⲆᐃ.f = [];
    ⲆᐃⲆᐃ.f[0] = [ⵠᐃ.ᐃⵠΔᐃⵠΔⵠ, ⵠᐃ.ⲆⲆⲆΔΔⲆᐃ];
    ⲆᐃⲆᐃ.f[1] = ⲆᐃⲆᐃ.f[0];
    ⲆᐃⲆᐃ.f[2] = ⲆᐃⲆᐃ.f[0];
    ⲆᐃⲆᐃ.isl = [];
    ⲆᐃⲆᐃ.isl[0] = [ⵠᐃ.ⵠⵠᐃⲆⲆⵠᐃ, ⵠᐃ.ᐃⲆⲆΔⲆΔⵠ];
    ⲆᐃⲆᐃ.isl[1] = ⲆᐃⲆᐃ.isl[0];
    ⲆᐃⲆᐃ.isl[2] = ⲆᐃⲆᐃ.isl[0];
    ⲆᐃⲆᐃ.c = [];
    ⲆᐃⲆᐃ.c[0] = [ⵠᐃ.ᐃᐃΔⵠⵠᐃⲆ, ⵠᐃ.ⵠᐃᐃⲆⵠⵠΔ];
    ⲆᐃⲆᐃ.c[1] = ⲆᐃⲆᐃ.c[0];
    ⲆᐃⲆᐃ.c[2] = ⲆᐃⲆᐃ.c[0];
    ⲆᐃⲆᐃ.wtb = [];
    ⲆᐃⲆᐃ.wtb[0] = [ⵠᐃ.ⲆᐃⵠΔⲆⵠΔ, ⵠᐃ.ⲆΔⵠⵠⲆⲆΔ];
    ⲆᐃⲆᐃ.PIRANHA = [ⵠᐃ.ΔⲆⲆⵠⲆⲆⵠ, ⵠᐃ.ᐃⵠΔΔΔᐃᐃ];
    ⲆᐃⲆᐃ.KRAKEN = [ⵠᐃ.ᐃΔⲆⵠⵠⵠⲆ, ⵠᐃ.ΔⵠΔⲆᐃᐃᐃ];
    ⲆᐃⲆᐃ.FOX = [ⵠᐃ.ⵠΔⲆΔᐃᐃΔ, ⵠᐃ.ⵠΔⲆΔΔⵠᐃ];
    ⲆᐃⲆᐃ.WOLF = [ⵠᐃ.ΔⵠⲆⵠΔⵠΔ, ⵠᐃ.ⵠΔΔΔᐃⲆΔ];
    ⲆᐃⲆᐃ.SPIDER = [ⵠᐃ.ⲆΔⵠΔⵠⵠⵠ, ⵠᐃ.ⵠΔΔᐃᐃᐃᐃ];
    ⲆᐃⲆᐃ.BEAR = [ⵠᐃ.ΔⵠᐃΔⵠⵠⲆ, ⵠᐃ.ΔᐃΔΔᐃⲆᐃ];
    ⲆᐃⲆᐃ.CAVE = [ⵠᐃ.ⵠⵠΔΔⲆᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔΔ];
    ⲆᐃⲆᐃ.MAP = [ⵠᐃ.ΔΔⲆᐃᐃⲆⵠ, ⵠᐃ.ⵠⵠⲆⵠΔᐃⵠ];
    ⲆᐃⲆᐃ.FOREST = [ⵠᐃ.ΔⲆⵠᐃΔΔⲆ, ⵠᐃ.ᐃⵠᐃⵠⲆⲆⲆ];
    ⲆᐃⲆᐃ.JUNGLE = [ⵠᐃ.ⲆᐃⵠΔⵠᐃⲆ, ⵠᐃ.ⵠⵠᐃⵠⲆᐃᐃ];
    ⲆᐃⲆᐃ.WINTER = [ⵠᐃ.ⲆᐃⵠΔΔΔᐃ, ⵠᐃ.ᐃᐃᐃᐃⲆⲆⲆ];
    ⲆᐃⲆᐃ.DESERT = [ⵠᐃ.ⲆⲆᐃⵠᐃᐃΔ, ⵠᐃ.ᐃⲆΔΔⲆΔᐃ];
    ⲆᐃⲆᐃ.LAVA = [ⵠᐃ.ᐃΔⲆᐃΔⲆⵠ, ⵠᐃ.ⵠᐃΔΔΔⵠΔ];
    for (var v1537 in ⲆᐃⲆᐃ) {
      for (var v1538 = ⲆᐃⲆᐃ[v1537], v1539 = 0; v1539 < v1538.length; v1539++) {
        var v1540 = v1538[v1539];
        if (v1540.ΔⵠᐃⲆᐃᐃⵠ !== vVVVVUndefined582) {
          v1540.ΔⵠᐃⲆᐃᐃⵠ();
        } else if (v1540.length > 0) {
          for (var v1541 = 0; v1541 < v1540.length; v1541++) {
            if (v1540[v1541].ΔⵠᐃⲆᐃᐃⵠ !== vVVVVVUndefined1422) {
              v1540[v1541].ΔⵠᐃⲆᐃᐃⵠ();
            }
          }
        }
      }
    }
    console.log(vVVUndefined14, undefined);
  }
  ⲆᐃⵠΔⵠΔΔ = [];
  Δᐃᐃⵠⵠᐃⵠ = [];
  function f290(p1147) {
    if (p1147 > 0) {
      return p1147 * p1147;
    } else {
      return p1147;
    }
  }
  function f291(p1148) {
    return vWindow.String.fromCharCode(p1148);
  }
  function f292() {
    if (!user.ⵠⲆΔᐃ.open) {
      user.ⵠⲆⵠΔΔ.ⵠⵠΔᐃ = 0;
      user.ⵠⲆⵠΔΔ.open = false;
      var v1542 = world.fast_units[user.ᐃᐃⵠⵠ];
      var v1543 = 100;
      if (v1542) {
        for (var v1544 = 0; v1544 < world.units[18].length; v1544++) {
          var v1545 = world.units[18][v1544];
          var v1546 = Δᐃᐃ.ⲆⲆⵠᐃ(v1545, v1542);
          if (v1543 > v1546) {
            v1543 = v1546;
            user.ⵠⲆⵠΔΔ.open = vVVVV632;
            user.ⵠⲆⵠΔΔ.ⵠⵠΔᐃ = v1545.info;
            user.ⵠⲆⵠΔΔ.ΔⲆᐃⲆ = v1545.ΔⲆᐃⲆ;
            user.ⵠⲆⵠΔΔ.ΔⵠΔᐃⵠ = v1545.id;
          }
        }
        if (v1543 < 100) {
          var v1547 = ᐃᐃ[522];
          var v1548 = game.ⲆᐃᐃᐃⵠⲆⲆ;
          var v1549 = Math.floor(v1548.info.translate.x + (v1548.info.Δⵠ[0].width - v1547.width) / 2);
          var v1550 = Math.floor(v1548.info.translate.y + (v1548.info.Δⵠ[0].height - v1547.height) / 2) + 3;
          f295(v405, v1547, v1549, v1550);
          if (user.ⵠⲆⵠΔΔ.ⵠⵠΔᐃ > 0) {
            v1548.ⲆΔᐃΔ(v405);
            var v1551 = user.ⵠⲆⵠΔΔ.ⵠⵠΔᐃ;
            if (v1551 > 1) {
              f298(v1551, v1548);
            }
          }
        }
      }
    }
  }
  function f293() {
    user.ⲆΔⵠΔᐃ.id = -1;
    user.ⲆΔⵠΔᐃ.ΔⲆᐃⲆ = -1;
    if (!user.ⲆⲆΔⵠⲆᐃⵠ && !user.ⲆΔⵠΔᐃ.wait && !user.ⲆΔᐃⲆΔ) {
      var v1552 = world.fast_units[user.ᐃᐃⵠⵠ];
      var v1553 = 100;
      if (v1552) {
        for (var v1554 = 0; world.units[38].length > v1554; v1554++) {
          var v1555 = world.units[38][v1554];
          var v1556 = Δᐃᐃ.ⲆⲆⵠᐃ(v1555, v1552);
          if (v1553 > v1556) {
            v1553 = v1556;
            user.ⲆΔⵠΔᐃ.id = v1555.id;
            user.ⲆΔⵠΔᐃ.ΔⲆᐃⲆ = v1555.ΔⲆᐃⲆ;
            user.ⲆΔⵠΔᐃ.info = v1555.info;
            user.ⲆΔⵠΔᐃ.lock = (v1555.info & 16) >> 4;
          }
        }
      }
      var v1557 = game.ΔΔΔⲆΔ;
      game.ΔΔΔⲆΔ = -1;
      if (user.ⲆΔⵠΔᐃ.ΔⲆᐃⲆ == -1 || user.ΔΔⲆⲆⲆ.length != 0 && user.id != user.ⲆΔⵠΔᐃ.ΔⲆᐃⲆ) {
        if (user.ΔΔⲆⲆⲆ.length != 0 && user.ΔΔⲆⲆⲆ[0] != user.id) {
          game.ΔΔΔⲆΔ = 2;
        } else if (user.ΔΔⲆⲆⲆ.length != 0 && user.id == user.ΔΔⲆⲆⲆ[0]) {
          game.ΔΔΔⲆΔ = 1;
        } else if (user.ΔΔⲆⲆⲆ.length != 0) {
          game.ΔΔΔⲆΔ = 3;
        }
      } else if (user.ΔΔⲆⲆⲆ.length == 0 && user.ⲆΔⵠΔᐃ.info >= 8) {
        game.ΔΔΔⲆΔ = 4;
      } else if (user.ΔΔⲆⲆⲆ.length == 0) {
        game.ΔΔΔⲆΔ = 3;
      } else {
        game.ΔΔΔⲆΔ = 0;
      }
      if (game.ΔΔΔⲆΔ != -1) {
        game.Δᐃᐃᐃⵠ[game.ΔΔΔⲆΔ].button.ⲆΔᐃΔ(v405);
      }
      var v1558 = document.getElementById("team_box").style;
      if (game.ΔΔΔⲆΔ != -1 && game.ΔΔΔⲆΔ != v1557 && v1558.display == "inline-block") {
        game.Δᐃᐃᐃⵠ[game.ΔΔΔⲆΔ].action();
      }
    }
  }
  function f294() {
    user.ⵠⲆΔᐃ.id = -1;
    user.ⵠⲆΔᐃ.lock = vVV14;
    user.ⵠⲆΔᐃ.locked = vVVV144;
    user.ⵠⲆΔᐃ.ⲆⵠⲆⲆⲆΔᐃ = vV143;
    user.ⵠⲆΔᐃ.ⵠᐃⵠⲆⲆΔⲆ = false;
    user.ⵠⲆΔᐃ.open = vV142;
    var v1559 = world.fast_units[user.ᐃᐃⵠⵠ];
    var v1560 = 100;
    if (v1559) {
      for (var v1561 = 0; v1561 < world.units[11].length; v1561++) {
        var v1562 = world.units[11][v1561];
        var v1563 = Δᐃᐃ.ⲆⲆⵠᐃ(v1562, v1559);
        if (v1563 < v1560) {
          v1560 = v1563;
          user.ⵠⲆΔᐃ.open = vV6;
          user.ⵠⲆΔᐃ.id = v1562.action < 2 ? -1 : Math.floor((v1562.action - 1) / 2);
          user.ⵠⲆΔᐃ.ⵠⵠΔᐃ = v1562.info;
          user.ⵠⲆΔᐃ.ΔⲆᐃⲆ = v1562.ΔⲆᐃⲆ;
          user.ⵠⲆΔᐃ.ΔⵠΔᐃⵠ = v1562.id;
          user.ⵠⲆΔᐃ.locked = v1562.lock;
          user.ⵠⲆΔᐃ.lock = !!v1562.lock && v1562.ΔⲆᐃⲆ != user.id && !user.ΔᐃᐃΔⲆⵠⲆ(v1562.ΔⲆᐃⲆ);
          user.ⵠⲆΔᐃ.ⵠᐃⵠⲆⲆΔⲆ = user.id === v1562.ΔⲆᐃⲆ && !user.ⵠⲆΔᐃ.locked && user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(241) != -1 && vVV63;
          if (user.ⵠⲆΔᐃ.locked && user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(260) != -1) {
            user.ⵠⲆΔᐃ.ⲆⵠⲆⲆⲆΔᐃ = vVV63;
          }
        }
      }
      if (v1560 < 100) {
        var v1564 = ᐃᐃ[450];
        var v1565 = game.ⵠΔᐃ[0];
        var v1566 = Math.floor(v1565.info.translate.x + (v1565.info.Δⵠ[0].width - v1564.width) / 2);
        var v1567 = Math.floor(v1565.info.translate.y + (v1565.info.Δⵠ[0].height - v1564.height) / 2) + 3;
        f295(v405, v1564, v1566, v1567);
        if ((!user.ⵠⲆΔᐃ.lock || user.id === user.ⵠⲆΔᐃ.ΔⲆᐃⲆ) && user.ⵠⲆΔᐃ.id >= 0) {
          (v1565 = game.ⵠΔᐃ[user.ⵠⲆΔᐃ.id]).ⲆΔᐃΔ(v405);
          var v1568 = user.ⵠⲆΔᐃ.ⵠⵠΔᐃ;
          if (v1568 > 1) {
            f298(v1568, v1565);
          }
        }
        if (user.ⵠⲆΔᐃ.lock) {
          game.ⲆⵠⵠΔᐃΔΔ.ⲆΔᐃΔ(v405);
        } else if (user.ⵠⲆΔᐃ.ⵠᐃⵠⲆⲆΔⲆ) {
          game.ᐃΔΔⲆΔᐃᐃ.ⲆΔᐃΔ(v405);
        }
        if (user.ⵠⲆΔᐃ.ⲆⵠⲆⲆⲆΔᐃ) {
          game.ᐃⵠᐃᐃᐃᐃⵠ.ⲆΔᐃΔ(v405);
        }
      }
    }
  }
  function f295(p1149, p1150, p1151, p1152, p1153, p1154, p1155, p1156, p1157, p1158) {
    if (p1150.ΔⵠᐃⲆᐃᐃⵠ === vVVVVUndefined142 || p1150.ΔⵠᐃⲆᐃᐃⵠ() === 1) {
      if (p1158 !== undefined) {
        p1149.drawImage(p1150, p1151, p1152, Math.max(1, p1153), Math.max(1, p1154), p1155, p1156, p1157, p1158);
      } else if (p1154 !== undefined) {
        p1149.drawImage(p1150, p1151, p1152, p1153, p1154);
      } else {
        p1149.drawImage(p1150, p1151, p1152);
      }
    }
  }
  function f296() {
    if (!user.ⵠⲆΔᐃ.open && !user.ⵠⲆⵠΔΔ.open && !user.ΔⵠⵠⲆ.open && !user.ΔⲆⲆⵠ.open) {
      user.ΔⵠⲆⵠ.open = vVV143;
      var v1569 = world.fast_units[user.ᐃᐃⵠⵠ];
      var v1570 = 100;
      if (v1569) {
        for (var v1571 = 0; world.units[43].length > v1571; v1571++) {
          var v1572 = world.units[43][v1571];
          var v1573 = Δᐃᐃ.ⲆⲆⵠᐃ(v1572, v1569);
          if (v1573 < v1570) {
            v1570 = v1573;
            user.ΔⵠⲆⵠ.open = vVVVV632;
            user.ΔⵠⲆⵠ.ⵠⵠᐃⵠΔΔᐃ = v1572.info & 31;
            user.ΔⵠⲆⵠ.ⵠΔᐃⲆⲆⲆᐃ = (v1572.info & 992) >> 5;
            user.ΔⵠⲆⵠ.ᐃⲆΔⲆⲆΔⵠ = (v1572.info & 31744) >> 10;
            user.ΔⵠⲆⵠ.ΔⲆᐃⲆ = v1572.ΔⲆᐃⲆ;
            user.ΔⵠⲆⵠ.ΔⵠΔᐃⵠ = v1572.id;
          }
        }
        if (v1570 < 100) {
          var v1574 = ᐃᐃ[971];
          var v1575 = (v1576 = game.ⵠⵠⲆⲆⵠⲆⵠ).info.translate.x - 32;
          f295(v405, v1574, v1575, 0);
          if (user.ΔⵠⲆⵠ.ⵠⵠᐃⵠΔΔᐃ > 0) {
            v1576.ⲆΔᐃΔ(v405);
            if ((v1577 = user.ΔⵠⲆⵠ.ⵠⵠᐃⵠΔΔᐃ) > 1) {
              f298(v1577, v1576);
            }
          }
          var v1576 = game.ⵠⵠⵠΔΔⲆⲆ;
          if (user.ΔⵠⲆⵠ.ᐃⲆΔⲆⲆΔⵠ > 0) {
            v1576.ⲆΔᐃΔ(v405);
            if ((v1577 = user.ΔⵠⲆⵠ.ᐃⲆΔⲆⲆΔⵠ) > 1) {
              f298(v1577, v1576);
            }
          }
          v1576 = game.ᐃᐃⵠᐃⵠᐃⲆ;
          if (user.ΔⵠⲆⵠ.ⵠΔᐃⲆⲆⲆᐃ > 0) {
            v1576.ⲆΔᐃΔ(v405);
            var v1577 = user.ΔⵠⲆⵠ.ⵠΔᐃⲆⲆⲆᐃ;
            if (v1577 > 1) {
              f298(v1577, v1576);
            }
          }
        }
      }
    }
  }
  function f297() {
    if (user.ᐃⲆⲆⵠᐃᐃΔ) {
      v405.globalAlpha = 0.5;
      v405.fillStyle = "#000";
      v405.fillRect(0, 0, v406, v408);
      v405.globalAlpha = 0.8;
      var v1578 = ᐃᐃ[654][world.time];
      var v1579 = v409 - v1578.width / 2;
      var v1580 = v410 - v1578.height / 2;
      f295(v405, v1578, v1579, v1580);
      v405.globalAlpha = 1;
      if (game.ΔΔΔⲆⲆ.ΔᐃⵠⲆᐃⲆⲆ.x > -1) {
        v405.fillStyle = "#660000";
        f92(v405, v1579 + v415 * (game.ΔΔΔⲆⲆ.ΔᐃⵠⲆᐃⲆⲆ.x * 3), v1580 + game.ΔΔΔⲆⲆ.ΔᐃⵠⲆᐃⲆⲆ.y * 3 * v415, v415 * 14);
        v405.fill();
      }
      for (var v1581 = game.ΔΔΔⲆⲆ.players, v1582 = 0; v1582 < v1581.length; v1582++) {
        var v1583 = v1581[v1582];
        world.time;
        v405.fillStyle = "#ff0000";
        f92(v405, v1579 + v415 * (v1583.x / (world.nw * 100) * 600), v1580 + v1583.y / (world.nh * 100) * 600 * v415, v415 * 6);
        v405.fill();
      }
      var v1584 = world.fast_units[user.ᐃᐃⵠⵠ];
      if (v1584) {
        v405.fillStyle = world.time ? "#fff" : "#e39716";
        f92(v405, v1579 + v1584.x / (world.nw * 100) * 600 * v415, v1580 + v415 * (v1584.y / (world.nh * 100) * 600), v415 * 12);
        v405.fill();
      }
    }
  }
  function f298(p1159, p1160) {
    ᐃᐃ[393][p1159] ||= f157(v415, "x" + p1159, 17, "#FFF");
    var v1585 = ᐃᐃ[393][p1159];
    var v1586 = p1160.info.translate.x + p1160.info.Δⵠ[0].width - v1585.width - v415 * 14;
    var v1587 = p1160.info.translate.y + p1160.info.Δⵠ[0].height - v1585.height - v415 * 19;
    if (p1160.info.state == v2226) {
      v1587 += v415 * 5;
    }
    f295(v405, v1585, v1586, v1587);
  }
  function f299() {
    user.ΔⲆᐃᐃⲆ.open = vVV14;
    var v1588 = world.fast_units[user.ᐃᐃⵠⵠ];
    var v1589 = 100;
    if (v1588) {
      for (var v1590 = 0; v1590 < world.units[22].length; v1590++) {
        var v1591 = world.units[22][v1590];
        var v1592 = Δᐃᐃ.ⲆⲆⵠᐃ(v1591, v1588);
        if (v1592 < v1589) {
          v1589 = v1592;
          user.ΔⲆᐃᐃⲆ.open = true;
          user.ΔⲆᐃᐃⲆ.ΔⲆᐃⲆ = v1591.ΔⲆᐃⲆ;
          user.ΔⲆᐃᐃⲆ.ΔⵠΔᐃⵠ = v1591.id;
        }
      }
      if (v1589 < 100) {
        game.ΔⲆᐃᐃⲆ.ⲆΔᐃΔ(v405);
      }
    }
  }
  function f300(p1161, p1162, p1163) {
    var v1593 = ᐃᐃ[603][p1161];
    var v1594 = p1162.info.translate.x + v415 * 5;
    var v1595 = p1162.info.translate.y + v415 * 5;
    if (v2226 == p1162.info.state || p1163) {
      v1595 += v415 * 5;
    }
    f295(v405, v1593, v1594, v1595);
  }
  function f301() {
    if (user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ.length > 0) {
      var v1596 = {
        x: game.ΔΔΔⲆⲆ.translate.x,
        y: game.ΔΔΔⲆⲆ.translate.y - v415 * 120
      };
    } else {
      v1596 = {
        x: game.ΔΔΔⲆⲆ.translate.x,
        y: game.ΔΔΔⲆⲆ.translate.y - v415 * 50
      };
    }
    v405.globalAlpha = 0.8;
    var v1597 = ᐃᐃ[369][world.time];
    f295(v405, v1597, v1596.x, v1596.y);
    v405.globalAlpha = 1;
    if (game.ΔΔΔⲆⲆ.ΔᐃⵠⲆᐃⲆⲆ.x > -1) {
      v405.fillStyle = "#660000";
      f92(v405, v1596.x + game.ΔΔΔⲆⲆ.ΔᐃⵠⲆᐃⲆⲆ.x * v415, v1596.y + v415 * game.ΔΔΔⲆⲆ.ΔᐃⵠⲆᐃⲆⲆ.y, v415 * 5);
      v405.fill();
    }
    var vV415 = v415;
    for (var v1598 = game.ΔΔΔⲆⲆ.players, v1599 = 0; v1599 < v1598.length; v1599++) {
      var v1600 = v1598[v1599];
      world.time;
      v405.fillStyle = "#ff0000";
      f92(v405, v1596.x + v1600.x / (world.nw * 100) * 193 * v415, v1596.y + v1600.y / (world.nh * 100) * 193 * v415, v415 * 2);
      v405.fill();
    }
    var v1601 = world.fast_units[user.ᐃᐃⵠⵠ];
    if (v1601) {
      v405.fillStyle = world.time ? "#fff" : "#e39716";
      f92(v405, v1596.x + v415 * (v1601.x / (world.nw * 100) * 193), v1596.y + v415 * (v1601.y / (world.nh * 100) * 193), v415 * 4);
      v405.fill();
    }
    v415 = vV415;
  }
  function f302() {
    if (!user.ⵠⲆΔᐃ.open && !user.ⵠⲆⵠΔΔ.open) {
      user.ΔⲆⲆⵠ.open = false;
      var v1602 = world.fast_units[user.ᐃᐃⵠⵠ];
      var v1603 = 100;
      if (v1602) {
        for (var v1604 = 0; v1604 < v2261.length; v1604++) {
          for (var v1605 = v2261[v1604][0], v1606 = v2261[v1604][1], v1607 = 0; v1607 < world.units[v1605].length; v1607++) {
            var v1608 = world.units[v1605][v1607];
            var v1609 = Δᐃᐃ.ⲆⲆⵠᐃ(v1608, v1602);
            if (v1603 > v1609) {
              v1603 = v1609;
              user.ΔⲆⲆⵠ.ᐃⲆΔⵠΔΔᐃ = v1606;
              user.ΔⲆⲆⵠ.type = v1605;
              user.ΔⲆⲆⵠ.open = vVVV6;
              user.ΔⲆⲆⵠ.ⵠⵠᐃⵠΔΔᐃ = v1608.info & 255;
              user.ΔⲆⲆⵠ.ⲆⵠᐃΔΔᐃᐃ = (v1608.info & 65280) >> 8;
              user.ΔⲆⲆⵠ.ΔⲆᐃⲆ = v1608.ΔⲆᐃⲆ;
              user.ΔⲆⲆⵠ.ΔⵠΔᐃⵠ = v1608.id;
            }
          }
        }
        if (v1603 < 100) {
          var v1610;
          var v1611 = ᐃᐃ[875];
          var v1612 = (v1613 = game.ΔⵠⲆⲆⲆΔⲆ).info.translate.x - 33;
          f295(v405, v1611, v1612, 0);
          if (user.ΔⲆⲆⵠ.ⵠⵠᐃⵠΔΔᐃ > 0) {
            v1613.ⲆΔᐃΔ(v405);
            if ((v1610 = user.ΔⲆⲆⵠ.ⵠⵠᐃⵠΔΔᐃ) > 1) {
              f298(v1610, v1613);
            }
          }
          switch (user.ΔⲆⲆⵠ.ᐃⲆΔⵠΔΔᐃ) {
            case 199:
              var v1613 = game.ⵠΔⲆⲆΔΔᐃ;
              break;
            case 202:
              v1613 = game.ᐃⲆⲆΔΔᐃⵠ;
              break;
            case 203:
              v1613 = game.ᐃⲆⲆΔⲆᐃᐃ;
              break;
            case 212:
              v1613 = game.ⵠⲆⲆⲆᐃᐃᐃ;
              break;
            case 304:
              v1613 = game.ⲆΔⲆᐃΔᐃᐃ;
              break;
            case 344:
              v1613 = game.ᐃᐃᐃⲆⲆΔᐃ;
              break;
            case 306:
              v1613 = game.ΔᐃΔΔΔⵠⲆ;
              break;
            case 307:
              v1613 = game.ⲆΔⲆⵠⵠΔᐃ;
              break;
            case 308:
              v1613 = game.ⲆⲆᐃⲆᐃⲆⲆ;
              break;
            case 309:
              v1613 = game.ⲆⵠⵠᐃⵠⵠΔ;
              break;
            case 310:
              v1613 = game.ΔⵠⵠΔᐃΔⲆ;
              break;
            case 311:
              v1613 = game.ⵠⲆⲆⵠᐃᐃᐃ;
              break;
            case 312:
              v1613 = game.ⵠΔⲆᐃⲆⲆⲆ;
              break;
            case 313:
              v1613 = game.ⲆⲆΔΔⲆᐃΔ;
          }
          if (user.ΔⲆⲆⵠ.ⲆⵠᐃΔΔᐃᐃ > 0) {
            v1613.ⲆΔᐃΔ(v405);
            if ((v1610 = user.ΔⲆⲆⵠ.ⲆⵠᐃΔΔᐃᐃ) > 1) {
              f298(v1610, v1613);
            }
          }
        }
      }
    }
  }
  function f303() {
    if (!user.ⵠⲆΔᐃ.open && !user.ⵠⲆⵠΔΔ.open) {
      user.ΔⵠⵠⲆ.open = vVVVV142;
      var v1614 = world.fast_units[user.ᐃᐃⵠⵠ];
      var v1615 = 100;
      if (v1614) {
        for (var v1616 = 0; world.units[41].length > v1616; v1616++) {
          var v1617 = world.units[41][v1616];
          var v1618 = Δᐃᐃ.ⲆⲆⵠᐃ(v1617, v1614);
          if (v1615 > v1618) {
            v1615 = v1618;
            user.ΔⵠⵠⲆ.open = true;
            user.ΔⵠⵠⲆ.ⲆⵠⲆᐃΔⲆΔ = v1617.info & 255;
            user.ΔⵠⵠⲆ.ⵠΔᐃⲆⲆⲆᐃ = (v1617.info & 65280) >> 8;
            user.ΔⵠⵠⲆ.ΔⲆᐃⲆ = v1617.ΔⲆᐃⲆ;
            user.ΔⵠⵠⲆ.ΔⵠΔᐃⵠ = v1617.id;
          }
        }
        if (v1615 < 100) {
          var v1619 = ᐃᐃ[874];
          var v1620 = (v1622 = game.ᐃⲆⵠⵠΔΔⲆ).info.translate.x - 33;
          f295(v405, v1619, v1620, 0);
          if (user.ΔⵠⵠⲆ.ⲆⵠⲆᐃΔⲆΔ > 0) {
            v1622.ⲆΔᐃΔ(v405);
            if ((v1621 = user.ΔⵠⵠⲆ.ⲆⵠⲆᐃΔⲆΔ) > 1) {
              f298(v1621, v1622);
            }
          }
          var v1621;
          var v1622 = game.ⲆⵠⲆᐃⵠΔΔ;
          if (user.ΔⵠⵠⲆ.ⵠΔᐃⲆⲆⲆᐃ > 0) {
            v1622.ⲆΔᐃΔ(v405);
            if ((v1621 = user.ΔⵠⵠⲆ.ⵠΔᐃⲆⲆⲆᐃ) > 1) {
              f298(v1621, v1622);
            }
          }
        }
      }
    }
  }
  function f304() {
    var v1623 = game.ᐃΔⵠᐃⲆ;
    var v1624 = v1623.id;
    if (v1623.ⵠᐃⲆⲆΔ === 1 && v1623.display === 1) {
      if (vVVVVUndefined14 === ⲆᐃⵠΔⵠΔΔ[v1624]) {
        ⲆᐃⵠΔⵠΔΔ[v1624] = function (p1164) {
          var v1625 = document.createElement("canvas");
          var v1626 = v1625.getContext("2d");
          var v1627 = v751[p1164];
          v1626.font = "20px Baloo Paaji";
          var v1628 = 0;
          if (v1627.length >= 1) {
            v1628 = Math.max(0, v1626.measureText(v1627[0]).width);
          }
          v1626.font = "17px Baloo Paaji";
          if (v1627.length >= 2) {
            v1628 = Math.max(v1628, v1626.measureText(v1627[1]).width);
          }
          v1626.font = "14px Baloo Paaji";
          v770 = 2;
          for (; v770 < v1627.length; v770++) {
            v1628 = Math.max(v1628, v1626.measureText(v1627[v770]).width);
          }
          var v1629 = v1628 + 35;
          var v1630 = 0;
          v1630 = v1627.length === 1 ? 55 : v1627.length === 2 ? 85 : (v1627.length - 2) * 26 + 85;
          v1625.width = v1629;
          v1625.height = v1630;
          f86(v1626, 0, 0, v1629, v1630, 10);
          v1626.fillStyle = "#000000";
          v1626.globalAlpha = 0.5;
          v1626.fill();
          if (v1627.length >= 1) {
            v1626.textBaseline = "middle";
            v1626.font = "20px Baloo Paaji";
            v1626.globalAlpha = 1;
            v1626.fillStyle = "#e2c340";
            v1626.fillText(v1627[0], 15, 28);
          }
          if (v1627.length >= 2) {
            v1626.font = "17px Baloo Paaji";
            v1626.fillStyle = "#ffffff";
            v1626.fillText(v1627[1], 15, 55);
            v1630 = 55;
          }
          if (v1627.length >= 3) {
            v1626.font = "14px Baloo Paaji";
            v1626.globalAlpha = 0.7;
            v770 = 2;
            for (; v1627.length > v770; v770++) {
              v1626.fillText(v1627[v770], 15, v1630 + 28);
              v1630 += 26;
            }
          }
          return v1625;
        }(v1624);
      }
      if (v1623.ⵠⲆⲆᐃ === 1) {
        f295(v405, ⲆᐃⵠΔⵠΔΔ[v1624], v1623.x, v1623.y);
      } else if (v406 < v1623.x - 80 + ⲆᐃⵠΔⵠΔΔ[v1624].width) {
        f295(v405, ⲆᐃⵠΔⵠΔΔ[v1624], v406 - ⲆᐃⵠΔⵠΔΔ[v1624].width - 10, v1623.y - ⲆᐃⵠΔⵠΔΔ[v1624].height - 10);
      } else {
        f295(v405, ⲆᐃⵠΔⵠΔΔ[v1624], v1623.x - 80, v1623.y - ⲆᐃⵠΔⵠΔΔ[v1624].height - 10);
      }
    }
  }
  function f305() {
    if (!user.ⵠⲆΔᐃ.open && !user.ⵠⲆⵠΔΔ.open && !user.ΔⵠⵠⲆ.open && !user.ΔⵠⲆⵠ.open && !user.ΔⲆⲆⵠ.open) {
      user.sign.open = false;
      var v1631 = world.fast_units[user.ᐃᐃⵠⵠ];
      var v1632 = 100;
      if (v1631) {
        for (var v1633 = 0; world.units[45].length > v1633; v1633++) {
          var v1634 = world.units[45][v1633];
          var v1635 = Δᐃᐃ.ⲆⲆⵠᐃ(v1634, v1631);
          if (v1632 > v1635 && v1634.info === 0 && user.id === v1634.ΔⲆᐃⲆ) {
            user.sign.open = v6;
            v1632 = v1635;
            user.sign.ΔⵠΔᐃⵠ = v1634.id;
          }
        }
        if (v1632 < 100) {
          game.sign.button.ⲆΔᐃΔ(v405);
        }
      }
    }
  }
  function f306() {
    if (user.reconnect.enabled) {
      v405.globalAlpha = 0.9;
      v405.fillStyle = "#000";
      f86(v405, v409 - 150, v410 - 90, 300, 180, 15);
      v405.fill();
      v405.globalAlpha = 1;
      var v1636 = ᐃᐃ[412];
      v405.save();
      user.reconnect.rotate = (user.reconnect.rotate + v3064 * 2) % (Math.PI * 2);
      v405.translate(v406 / 2, v408 / 2 - 25);
      v405.rotate(user.reconnect.rotate);
      f295(v405, v1636, -v1636.width / 2, -v1636.height / 2);
      v405.restore();
      v1636 = ᐃᐃ[663];
      f295(v405, v1636, (v406 - v1636.width) / 2, (v408 - v1636.height) / 2 + 25);
    }
  }
  var v1637 = [];
  function f307() {
    var v1638 = user.ⵠⵠᐃⲆᐃ;
    var v1639 = game.ΔΔΔᐃ;
    if (v1638.ⵠᐃᐃ) {
      v1638.ⵠᐃᐃ = false;
      var v1640 = v1638.ᐃᐃⵠΔᐃ;
      var v1641 = v1639.ⵠΔΔ.width;
      var v1642 = v1639.ⵠΔΔ.height;
      var v1643 = v1639.Δ;
      var v1644 = world.players;
      var vVVV1422 = vVV1422;
      v1643.clearRect(0, 0, v1641, v1642);
      v1643.drawImage(v1639.Δⵠ, 0, 0);
      for (var v1645 = 0; v1640.length > v1645; v1645++) {
        var v1646 = v1644[v1640[v1645]];
        if ((world.mode !== 1 || v1646.ᐃⲆᐃⵠⲆ !== "spectator") && (world.mode !== 2 || v1646.ⲆΔⲆⲆ !== 0)) {
          if (user.id == v1640[v1645]) {
            vVVV1422 = true;
            if (world.mode === 3 && v1646.ⲆΔⲆⲆ === 0) {
              ⵠⲆ = "#FF0000";
            } else {
              ⵠⲆ = "#FFF";
            }
          } else if (world.mode === 3 && v1646.ⲆΔⲆⲆ === 0) {
            ⵠⲆ = "#990000";
          } else {
            ⵠⲆ = "#A1BDCD";
          }
          v1643.drawImage(f157(v415, "" + (v1645 + 1), v415 * 15, ⵠⲆ), v415 * 20, v415 * (40 + v1645 * 22));
          v1646.ᐃΔⵠΔⵠⵠΔ ||= f157(v415, v1646.ᐃⲆᐃⵠⲆ, v415 * 15, ⵠⲆ, vUndefined, vVVVVUndefined1422, undefined, undefined, v415 * 110);
          v1643.drawImage(v1646.ᐃΔⵠΔⵠⵠΔ, v415 * 39, v415 * (40 + v1645 * 22));
          v1643.drawImage(f157(v415, Δᐃᐃ.ΔⲆΔⲆΔⲆⲆ(v1646.Ⲇⵠⵠᐃᐃ), v415 * 15, ⵠⲆ), v415 * 156, (40 + v1645 * 22) * v415);
        }
      }
      if (!vVVV1422) {
        if (world.mode === 0 || world.mode === 3 || world.mode === 4 || world.mode === 5 || world.mode === 7 || world.mode === 1 && !user.ⲆⲆΔⵠⲆᐃⵠ || world.mode === 2 && !user.ⲆΔᐃⲆΔ) {
          v1643.drawImage(ᐃᐃ[417], v415 * 15, (46 + v1645 * 22) * v415);
          v1643.drawImage(f157(v415, Δᐃᐃ.ΔⲆΔⲆΔⲆⲆ(world.players[user.id].Ⲇⵠⵠᐃᐃ), v415 * 15, "#FFF"), v415 * 100, (46 + v1645 * 22) * v415);
        }
      }
    }
    f295(v405, v1639.ⵠΔΔ, v1639.translate.x, v1639.translate.y);
  }
  function f308(p1165) {
    if (!((p1165 = p1165 / 100) > 0.8)) {
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
      v405.rotate(this.angle);
      if (this.ᐃΔⵠ.ⵠᐃᐃ) {
        if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vVVVV1423 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
          this.ᐃΔⵠ.ⵠᐃᐃ = vVVVV1422;
        }
        var v1647 = (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600 * v415;
        var v1648 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1647;
        var v1649 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1647;
      } else {
        v1648 = 0;
        v1649 = 0;
      }
      v405.globalAlpha = 0.5;
      f90(v405, v1648, v1649, v415 * 18, p1165);
      f88(v405, null, "#000000", v415 * 18);
      v405.globalAlpha = 1;
      f90(v405, v1648, v1649, v415 * 18, p1165);
      f88(v405, null, v585.ⲆⲆᐃΔΔΔᐃ[world.time], v415 * 6);
      v405.restore();
    }
  }
  function f309() {
    var v1650 = user.ⵠⲆⲆᐃ;
    if (v1650.ⵠⲆⲆᐃᐃ) {
      var v1651 = world.fast_units[user.ᐃᐃⵠⵠ];
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + v1651.x, user.ᐃⵠⵠ.y + v1651.y);
      var v1652 = ᐃᐃ[435];
      var v1653 = -v1652.width / 2;
      var v1654 = -v1652.height / 2 - v415 * 125;
      f295(v405, v1652, v1653, v1654);
      v405.beginPath();
      v405.lineWidth = v415 * 5;
      v405.strokeStyle = v585.ᐃⲆΔⲆᐃᐃⵠ[world.time];
      v405.lineCap = "round";
      v405.arc(0, v1654 + v1652.height / 2, v415 * 25, 0, v1650.timeout.Ⲇⵠⵠ * (Math.PI * 2));
      v405.stroke();
      v405.restore();
    }
  }
  function f310() {
    var v1655 = -8;
    if (user.ⵠⵠⵠⵠΔ.enabled) {
      var v1656 = ᐃᐃ[684];
      f295(v405, v1656, user.ⵠⵠⵠⵠΔ.translate.x, user.ⵠⵠⵠⵠΔ.translate.y + v1655);
      v1655 += 70;
    }
    if (user.ᐃⲆⵠᐃᐃⵠᐃ === 1) {
      v1656 = ᐃᐃ[687];
      f295(v405, v1656, user.ⵠⵠⵠⵠΔ.translate.x, user.ⵠⵠⵠⵠΔ.translate.y + v1655);
      v1655 += 70;
    } else if (user.ᐃⵠᐃⵠ.ⵠⲆⲆΔⲆ.x < 0.25 || user.ᐃⵠᐃⵠ.ⲆⵠⵠⵠⲆⲆⲆ.x < 0.25 || user.ᐃⵠᐃⵠ.ⵠⲆΔⲆᐃⲆⲆ.x < 0.25 || user.ᐃⵠᐃⵠ.ⲆⲆⲆⲆᐃΔⵠ.x < 0.25 || user.ᐃⵠᐃⵠ.ᐃⵠⵠᐃᐃⵠⵠ.x < 0.25) {
      v1656 = ᐃᐃ[686];
      f295(v405, v1656, user.ⵠⵠⵠⵠΔ.translate.x, user.ⵠⵠⵠⵠΔ.translate.y + v1655);
      v1655 += 70;
    }
    if (user.ᐃⲆᐃΔᐃ > 0) {
      v1656 = ᐃᐃ[685];
      f295(v405, v1656, user.ⵠⵠⵠⵠΔ.translate.x, user.ⵠⵠⵠⵠΔ.translate.y + v1655);
      var v1657 = v1637[user.ᐃⲆᐃΔᐃ];
      if (vVVVVUndefined142 === v1657) {
        v1657 = f157(v415, user.ᐃⲆᐃΔᐃ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        v1637[user.ᐃⲆᐃΔᐃ] = v1657;
      }
      if (user.ᐃⲆᐃΔᐃ < 9) {
        f295(v405, v1657, user.ⵠⵠⵠⵠΔ.translate.x - 39, user.ⵠⵠⵠⵠΔ.translate.y + v1655 + 20);
      } else {
        f295(v405, v1657, user.ⵠⵠⵠⵠΔ.translate.x - 46, user.ⵠⵠⵠⵠΔ.translate.y + v1655 + 20);
      }
    }
  }
  function f311() {
    v405.save();
    var vV4152 = v415;
    if (user.ᐃⵠᐃⵠ.ᐃⵠᐃΔᐃ.x < 0.25) {
      v405.globalAlpha = user.ᐃⵠᐃⵠ.ⵠᐃⵠⵠᐃⲆΔ.Ⲇⵠⵠ;
    }
    var v1658 = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ.length > 0 ? -70 : 0;
    if (user.ⵠⲆΔᐃ.open || user.ⵠⲆⵠΔΔ.open && user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(200) != -1 || user.ΔⵠⵠⲆ.open && user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(227) != -1 || user.ΔⲆⲆⵠ.open && user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(200) != -1 || user.ΔᐃⲆΔᐃ.open && user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(282) != -1 || user.ΔⵠⲆⵠ.open && (user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(200) != -1 || user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(224) != -1)) {
      v1658 -= v415 * 50;
    }
    v405.translate((v406 - v415 * 950) / 2, v1658);
    v405.fillStyle = "#69A148";
    v405.fillRect(this.translate.x + v415 * 37, this.translate.y + v415 * 17, v415 * (user.ᐃⵠᐃⵠ.ᐃⵠᐃΔᐃ.x * 178), v415 * 18);
    v405.globalAlpha = 1;
    if (user.ᐃⵠᐃⵠ.ⲆⵠⵠⵠⲆⲆⲆ.x < 0.35) {
      v405.fillStyle = "#8F050A";
      v405.globalAlpha = user.ᐃⵠᐃⵠ.ⲆⵠⲆⵠⵠⲆⵠ.Ⲇⵠⵠ;
      v405.fillRect(this.translate.x + v415 * 277, this.translate.y + v415 * 17, v415 * 178, v415 * 18);
      v405.globalAlpha = 1;
    }
    v405.fillStyle = "#AF352A";
    v405.fillRect(this.translate.x + v415 * 277, this.translate.y + v415 * 17, v415 * (user.ᐃⵠᐃⵠ.ⲆⵠⵠⵠⲆⲆⲆ.x * 178), v415 * 18);
    if (user.ᐃⵠᐃⵠ.ⵠⲆⲆΔⲆ.x < 0.35) {
      v405.fillStyle = "#366B91";
      v405.globalAlpha = user.ᐃⵠᐃⵠ.ⲆⵠⲆⵠΔΔⵠ.Ⲇⵠⵠ;
      v405.fillRect(this.translate.x + v415 * 517, this.translate.y + v415 * 17, v415 * 178, v415 * 18);
      v405.globalAlpha = 1;
    }
    v405.fillStyle = "#669BB1";
    v405.fillRect(this.translate.x + v415 * 517, this.translate.y + v415 * 17, user.ᐃⵠᐃⵠ.ⵠⲆⲆΔⲆ.x * 178 * v415, v415 * 18);
    if (user.ᐃⵠᐃⵠ.ⵠⲆⲆΔⲆ.x > 0.99) {
      if (user.ᐃⵠᐃⵠ.ᐃⵠⵠᐃᐃⵠⵠ.x < 0.35) {
        v405.fillStyle = "#6C4036";
        v405.globalAlpha = user.ᐃⵠᐃⵠ.ⵠΔᐃⲆΔΔⵠ.Ⲇⵠⵠ;
        v405.fillRect(this.translate.x + v415 * 517, this.translate.y + v415 * 17, v415 * 178, v415 * 18);
        v405.globalAlpha = 1;
      }
      v405.fillStyle = "#9C4036";
      v405.fillRect(this.translate.x + v415 * 517, this.translate.y + v415 * 17, v415 * ((1 - user.ᐃⵠᐃⵠ.ᐃⵠⵠᐃᐃⵠⵠ.x) * 178), v415 * 18);
    }
    if (user.ᐃⵠᐃⵠ.ⵠⲆΔⲆᐃⲆⲆ.x < 0.35) {
      v405.fillStyle = "#001A57";
      v405.globalAlpha = user.ᐃⵠᐃⵠ.ⲆΔⵠᐃⲆⵠⵠ.Ⲇⵠⵠ;
      v405.fillRect(this.translate.x + v415 * 757, this.translate.y + v415 * 17, v415 * 178, v415 * 18);
      v405.globalAlpha = 1;
    }
    v405.fillStyle = "#074A87";
    v405.fillRect(this.translate.x + v415 * 757, this.translate.y + v415 * 17, v415 * (user.ᐃⵠᐃⵠ.ⵠⲆΔⲆᐃⲆⲆ.x * 178), v415 * 18);
    v415 = vV4152;
    f295(v405, this.Δⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + v1658;
    v405.restore();
    if (user.ᐃⵠᐃⵠ.ⲆⲆⲆⲆᐃΔⵠ.x < 0.99) {
      var v1659 = Math.floor(v409 - ᐃᐃ[827].width / 2);
      v1658 += this.translate.y - ᐃᐃ[827].height - v415 * 5;
      v405.fillStyle = "#BBE8EF";
      v405.fillRect(v1659 + 5, v1658 + v415 * 5, user.ᐃⵠᐃⵠ.ⲆⲆⲆⲆᐃΔⵠ.x * (v415 * 588), v415 * 10);
      if (user.ᐃⵠᐃⵠ.ⲆⲆⲆⲆᐃΔⵠ.x < 0.35) {
        v405.fillStyle = "#9BA8AF";
        v405.globalAlpha = user.ᐃⵠᐃⵠ.ⵠⲆⵠᐃΔΔᐃ.Ⲇⵠⵠ;
        v405.fillRect(v1659 + 5, v1658 + 5, v415 * 588, v415 * 10);
        v405.globalAlpha = 1;
      }
      f295(v405, ᐃᐃ[827], v1659, v1658);
      this.y = v1658;
    }
  }
  function f312() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[349][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f313() {
    var v1660 = user.ⲆΔⵠΔᐃ;
    if (v1660.wait) {
      var v1661 = v1660.timeout.ⵠᐃᐃ();
      v405.save();
      var v1662 = ᐃᐃ[727];
      var v1663 = ᐃᐃ[675].height + v415 * 25;
      v405.translate(v1662.width, game.ᐃⵠᐃⵠ.translate.y - v415 * 188 - v1663);
      var v1664 = -v1662.width / 2 - 2;
      var v1665 = -v1662.height / 2 - 4;
      f295(v405, v1662, v1664 + 2, v1665);
      v405.beginPath();
      v405.lineWidth = v415 * 5;
      v405.strokeStyle = v585.ⵠⲆⲆΔᐃΔᐃ[world.time];
      v405.lineCap = "round";
      v405.arc(0, v1665 + v1662.height / 2, v415 * 25, 0, Math.PI * 2 * v1660.timeout.Ⲇⵠⵠ);
      v405.stroke();
      v405.restore();
      if (v1661) {
        v1660.wait = vVVVVV142;
        v1660.timeout.Ⲇⵠⵠ = 0;
        v1660.timeout.ΔⲆΔ = false;
      }
    }
  }
  function f314() {
    var v1666 = user.ⵠⲆⲆᐃⲆ;
    if (v1666.wait) {
      var v1667 = v1666.timeout.ⵠᐃᐃ();
      v405.save();
      var v1668 = ᐃᐃ[1041];
      v405.translate(v1668.width - v415 * 2, game.ᐃⵠᐃⵠ.translate.y - v415 * 125);
      var v1669 = -v1668.width / 2 + 10;
      var v1670 = -v1668.height / 2 - 4;
      f295(v405, v1668, v1669, v1670);
      v405.beginPath();
      v405.lineWidth = v415 * 5;
      v405.strokeStyle = v585.ᐃΔᐃᐃΔΔΔ[world.time];
      v405.lineCap = "round";
      v405.arc(9, v1670 + v1668.height / 2, v415 * 25, 0, Math.PI * 2 * v1666.timeout.Ⲇⵠⵠ);
      v405.stroke();
      v405.restore();
      if (v1667) {
        v1666.wait = vVV1422;
        v1666.timeout.Ⲇⵠⵠ = 0;
        v1666.timeout.ΔⲆΔ = vV14;
      }
    }
  }
  function f315() {
    for (var v1671 = user.ᐃⵠⲆⲆ, v1672 = world.fast_units[user.ᐃᐃⵠⵠ], v1673 = 0; v1673 < v1671.ᐃᐃⲆᐃᐃ.length; v1673++) {
      var v1674 = v1671.ᐃᐃⲆᐃᐃ[v1673];
      var vVVVVV1423 = vVVVV1423;
      if ((v1672 = world.fast_units[user.ᐃᐃⵠⵠ]) && (v1674.id == v1672.right || v1674.id == v1672.ⲆⲆⵠⵠⵠ && v1672.ⲆⲆⵠⵠⵠ > 0)) {
        vVVVVV1423 = true;
        f295(v405, v1674.info.Δⵠ[2], v1674.info.translate.x, v1674.info.translate.y, v1674.info.width, v1674.info.height);
      } else {
        v1674.ⲆΔᐃΔ(v405);
      }
      var v1675 = user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[v1674.id];
      if (v1675 > 1) {
        f298(v1675, v1674);
      }
      if (v1675 > 0) {
        f300(v1673, v1674, vVVVVV1423);
      }
      var v1676 = user.ⵠⲆΔᐃ;
      if (!!v1676.open && (!!(v1676.id < 0) || v1676.id == v1674.id) && (!v1676.lock || v1676.ΔⲆᐃⲆ == user.id)) {
        game.ⵠΔⲆⵠᐃ[v1674.id].ⲆΔᐃΔ(v405);
      }
      if (user.ⵠⲆⵠΔΔ.open && v1674.id == 200) {
        game.ⵠΔⲆⵠᐃ[v1674.id].ⲆΔᐃΔ(v405);
      }
      if (user.ΔᐃⲆΔᐃ.open && v1674.id == 282) {
        game.ⵠΔⲆⵠᐃ[v1674.id].ⲆΔᐃΔ(v405);
      }
      if (user.ΔⵠⵠⲆ.open && v1674.id == 227) {
        game.ⵠΔⲆⵠᐃ[v1674.id].ⲆΔᐃΔ(v405);
      }
      if (user.ΔⲆⲆⵠ.open && v1674.id == 200) {
        game.ⵠΔⲆⵠᐃ[v1674.id].ⲆΔᐃΔ(v405);
      }
      if (user.ΔⵠⲆⵠ.open && (v1674.id == 200 || v1674.id == 224)) {
        game.ⵠΔⲆⵠᐃ[v1674.id].ⲆΔᐃΔ(v405);
      }
    }
    if (v1674 && v1671.max > v1673) {
      var v1677 = ᐃᐃ[445][2];
      ⵠⵠ = v1674.info.translate.x;
      ᐃΔⲆ = v1674.info.translate.y;
      ΔᐃⵠⲆ = 1;
      for (; v1671.max > v1673; v1673++, ΔᐃⵠⲆ++) {
        f295(v405, v1677, ⵠⵠ + (v1677.width + 5) * ΔᐃⵠⲆ, ᐃΔⲆ);
      }
    }
  }
  function f316() {
    var v1678 = world.ⲆᐃⲆⵠᐃ;
    var v1679 = ᐃᐃ[974][world.time];
    f295(v405, v1679, v1678.translate.x, v1678.translate.y);
    v405.save();
    v405.translate(v1678.translate.x + v1679.width / 2, v1678.translate.y + v1679.height / 2);
    world.ⲆᐃⲆⵠᐃ.now = (new Date().getTime() - v1678.ΔᐃΔⲆⵠ + v1678.ⵠΔⲆΔᐃ) % 480000;
    var v1680 = Math.PI * 2 * world.ⲆᐃⲆⵠᐃ.now / 480000 - Math.PI / 2;
    v405.rotate(v1680);
    f295(v405, ᐃᐃ[975], -v1679.width / 2, -v1679.height / 2);
    v405.restore();
  }
  function f317(p1166) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVVV143;
      }
      var v1681 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1682 = v1681 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1683 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1681;
    } else {
      v1682 = 0;
      v1683 = 0;
    }
    var v1684 = ᐃᐃ[p1166][world.time];
    ⵠⵠᐃ = -v1684.width;
    ⵠⲆⵠ = -v1684.height;
    f295(v405, v1684, -ⵠⵠᐃ / 2 + v1682, -ⵠⲆⵠ / 2 + v1683, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f318(p1167) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1685 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1686 = v1685 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1687 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1685;
    } else {
      v1686 = 0;
      v1687 = 0;
    }
    if (p1167 === 1189 && !world.transition) {
      var v1688 = 0;
      for (var v1689 = world.units[0], v1690 = 0; v1689.length > v1690; v1690++) {
        var v1691 = Δᐃᐃ.ⲆⲆⵠᐃ(v1689[v1690], this);
        if (v1691 < 140 && v1691 > 35) {
          v1688 = 0;
          break;
        }
        if (v1691 <= 35) {
          v1688 = 1;
        }
      }
      this.opacity = v1688 === 0 ? Math.max(0.5, this.opacity - v3064 / 1.5) : Math.min(1, this.opacity + v3064 / 1.5);
      v405.globalAlpha = this.opacity;
    }
    Δⵠ = ᐃᐃ[p1167][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2 + v1686, -ⵠⲆⵠ / 2 + v1687, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.globalAlpha = 1;
    v405.restore();
  }
  function f319(p1168) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vVV1422 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1692 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1693 = v1692 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1694 = v1692 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1693 = 0;
      v1694 = 0;
    }
    if (this.ΔΔⲆΔⲆ.ⵠᐃᐃ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    Δⵠ = ᐃᐃ[1121][Math.floor(this.id + this.color) % 5][world.time];
    ⵠⵠᐃ = this.ΔΔⲆΔⲆ.Ⲇⵠⵠ * -Δⵠ.width;
    ⵠⲆⵠ = this.ΔΔⲆΔⲆ.Ⲇⵠⵠ * -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2 + v1693, -ⵠⲆⵠ / 2 + v1694, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f320() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[1097][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f321(p1169) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVVV144;
      }
      var v1695 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1696 = v1695 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1697 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1695;
    } else {
      v1696 = 0;
      v1697 = 0;
    }
    Δⵠ = ᐃᐃ[p1169][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2 + v1696, -ⵠⲆⵠ / 2 + v1697, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f322() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1698 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1699 = v1698 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1700 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1698;
    } else {
      v1699 = 0;
      v1700 = 0;
    }
    Δⵠ = ᐃᐃ[269][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2 + v1699, -ⵠⲆⵠ / 2 + v1700, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.lock) {
      Δⵠ = ᐃᐃ[241][world.time];
      ⵠⵠᐃ = -Δⵠ.width;
      ⵠⲆⵠ = -Δⵠ.height;
      f295(v405, Δⵠ, -ⵠⵠᐃ / 2 + v1699 - v415 * 1, -ⵠⲆⵠ / 2 + v1700, ⵠⵠᐃ, ⵠⲆⵠ);
    }
    v405.restore();
  }
  function f323() {
    var v1701 = user.ΔⲆΔᐃΔ;
    if (v1701.wait) {
      var v1702 = v1701.timeout.ⵠᐃᐃ();
      v405.save();
      var v1703 = ᐃᐃ[675];
      v405.translate(v1703.width - v415 * 2, game.ᐃⵠᐃⵠ.translate.y - v415 * 60);
      var v1704 = -v1703.width / 2 - 2;
      var v1705 = -v1703.height / 2 - 4;
      f295(v405, v1703, v1704, v1705);
      v405.beginPath();
      v405.lineWidth = v415 * 5;
      v405.strokeStyle = v585.ⵠⲆⲆΔᐃΔᐃ[world.time];
      v405.lineCap = "round";
      v405.arc(0, v1705 + v1703.height / 2, v415 * 25, 0, Math.PI * 2 * v1701.timeout.Ⲇⵠⵠ);
      v405.stroke();
      v405.restore();
      if (v1702) {
        v1701.wait = false;
        v1701.timeout.Ⲇⵠⵠ = 0;
        v1701.timeout.ΔⲆΔ = vVVVVV142;
      }
    }
  }
  function f324() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[1060][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f325() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[1086][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f326(p1170) {
    if (!((p1170 = p1170 / 100) > 0.95)) {
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
      v405.rotate(this.angle);
      if (this.ᐃΔⵠ.ⵠᐃᐃ) {
        if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vV143 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
          this.ᐃΔⵠ.ⵠᐃᐃ = vVV144;
        }
        var v1706 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
        var v1707 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1706;
        var v1708 = v1706 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
      } else {
        v1707 = 0;
        v1708 = 0;
      }
      v405.globalAlpha = 0.5;
      f90(v405, v1707, v1708, v415 * 28, p1170);
      f88(v405, null, "#000000", v415 * 18);
      v405.globalAlpha = 1;
      f90(v405, v1707, v1708, v415 * 28, p1170);
      f88(v405, null, v585.ᐃⲆΔⲆᐃᐃⵠ[world.time], v415 * 6);
      v405.restore();
    }
  }
  function f327() {
    var v1709 = user.ᐃΔⵠⵠᐃ;
    if (v1709.wait) {
      var v1710 = v1709.timeout.ⵠᐃᐃ();
      v405.save();
      var v1711 = ᐃᐃ[1043];
      v405.translate(v1711.width - v415 * 12, game.ᐃⵠᐃⵠ.translate.y - v415 * 190);
      var v1712 = -v1711.width / 2 + 9;
      var v1713 = -v1711.height / 2 - 4;
      f295(v405, v1711, v1712, v1713);
      v405.beginPath();
      v405.lineWidth = v415 * 5;
      v405.strokeStyle = v585.ᐃΔᐃᐃΔΔΔ[world.time];
      v405.lineCap = "round";
      v405.arc(9, v1713 + v1711.height / 2, v415 * 25, 0, v1709.timeout.Ⲇⵠⵠ * (Math.PI * 2));
      v405.stroke();
      v405.restore();
      if (v1710) {
        v1709.wait = vVV142;
        v1709.timeout.Ⲇⵠⵠ = 0;
        v1709.timeout.ΔⲆΔ = vV14;
      }
    }
  }
  function f328() {
    var v1714 = user.ⵠⲆⲆᐃ;
    if (!v1714.ⵠⲆⲆᐃᐃ && v1714.ᐃᐃⲆⲆ > 0) {
      var v1715 = world.fast_units[user.ᐃᐃⵠⵠ];
      if (!v1715) {
        return;
      }
      v405.save();
      if (v591[v1714.ᐃᐃⲆⲆ].ⵠΔⲆ === 0 && v1714.mode === 0) {
        v405.translate(user.ᐃⵠⵠ.x + v1715.x, user.ᐃⵠⵠ.y + v1715.y);
        v405.rotate(v1715.angle);
        v405.translate(120, 0);
      } else {
        var v1716 = Math.floor(v1715.x + Math.sin(v1715.angle) * 120);
        var v1717 = Math.floor(v1715.y + Math.cos(v1715.angle) * 120);
        v1716 = user.ᐃⵠⵠ.x + (v1716 - v1716 % 100 + 50);
        v1717 = user.ᐃⵠⵠ.y + (v1717 - v1717 % 100 + 50);
        v405.translate(v1716, v1717);
      }
      var v1718 = ᐃᐃ[v1714.ᐃᐃⲆⲆ][world.time];
      v405.globalAlpha = 0.5;
      f295(v405, v1718, -v1718.width / 2, -v1718.height / 2);
      v405.globalAlpha = 1;
      v405.restore();
      if (v591[v1714.ᐃᐃⲆⲆ].ⵠΔⲆ === 0) {
        if (!v1714.label[v1714.mode]) {
          if (v1714.mode === 0) {
            v1714.label[0] = f157(v415, v751[2036], 20, "#e2c340");
          } else {
            v1714.label[1] = f157(v415, v751[2037], 20, "#e2c340");
          }
        }
        v1718 = v1714.label[v1714.mode];
        f295(v405, v1718, v409 + -v1718.width / 2, game.ᐃⵠᐃⵠ.y - 26);
      }
    }
    if (v1714.ⵠⲆⲆᐃᐃ) {
      var v1719 = v1714.timeout.ⵠᐃᐃ();
      for (var v1720 = 0; v1720 < v1714.ΔᐃⵠⲆⲆ.length; v1720++) {
        var v1721 = v1714.ΔᐃⵠⲆⲆ[v1720];
        if (v1714.id == v1721.id) {
          var v1722 = v415 * 42;
          var v1723 = v415 * 17;
          f86(v405, v1721.info.translate.x, v1721.info.translate.y + (1 - v1714.timeout.Ⲇⵠⵠ) * v1722, v1721.info.width, v1714.timeout.Ⲇⵠⵠ * v1722 + v1723, v415 * 10);
          v405.fillStyle = "#55B973";
          v405.fill();
          v405.globalAlpha = 0.8;
          v1721.ⲆΔᐃΔ(v405);
        } else {
          v405.globalAlpha = 0.5;
          v1721.ⲆΔᐃΔ(v405);
        }
        v405.globalAlpha = 1;
      }
      if (v1719) {
        v1714.ⵠⲆⲆᐃᐃ = vVVVV1423;
        v1714.timeout.Ⲇⵠⵠ = 0;
        v1714.timeout.ΔⲆΔ = vV142;
      }
      return vVVV62;
    }
    for (v1720 = 0; v1714.ΔᐃⵠⲆⲆ.length > v1720; v1720++) {
      v1714.ΔᐃⵠⲆⲆ[v1720].ⲆΔᐃΔ(v405);
    }
    return false;
  }
  function f329(p1171) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1724 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1725 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1724;
      var v1726 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1724;
    } else {
      v1725 = 0;
      v1726 = 0;
    }
    var v1727 = ᐃᐃ[1102].length;
    Δⵠ = ᐃᐃ[1102][(this.ΔᐃⵠⲆ + this.ΔΔ % 2) % v1727][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    var v1728 = world.fast_units[user.ᐃᐃⵠⵠ];
    if (v1728 && (user.id === this.ΔⲆᐃⲆ || user.ΔᐃᐃΔⲆⵠⲆ(this.ΔⲆᐃⲆ))) {
      if (Δᐃᐃ.ⲆⲆⵠᐃ(this, v1728) < 550) {
        this.opacity = Math.max(this.opacity - v3064, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + v3064, 1);
      }
    } else if (v1728 && Δᐃᐃ.ⲆⲆⵠᐃ(this, world.fast_units[user.ᐃᐃⵠⵠ]) < 150) {
      this.opacity = Math.max(this.opacity - v3064, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + v3064, 1);
    }
    var v1729 = v405.globalAlpha;
    v405.globalAlpha *= this.opacity;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2 + v1725, -ⵠⲆⵠ / 2 + v1726, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.globalAlpha = v1729;
    v405.restore();
  }
  function f330() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[432][world.time];
    ⵠⵠᐃ = -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  var v1730 = 0;
  function f331() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVVVV142;
      }
      var v1731 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1732 = v1731 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1733 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1731;
    } else {
      v1732 = 0;
      v1733 = 0;
    }
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1732, user.ᐃⵠⵠ.y + this.y + v1733);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[228][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f332() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vV143;
      }
      var v1734 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1735 = v1734 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1736 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1734;
    } else {
      v1735 = 0;
      v1736 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1735 += Math.random() * 2 - 1;
      v1736 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1735, user.ᐃⵠⵠ.y + this.y + v1736);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[256][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1593][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f333() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVV1423;
      }
      var v1737 = v415 * (v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600);
      var v1738 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1737;
      var v1739 = v1737 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1738 = 0;
      v1739 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1738 += Math.random() * 2 - 1;
      v1739 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1738, user.ᐃⵠⵠ.y + this.y + v1739);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[258][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1601][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f334() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1740 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1741 = v1740 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1742 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1740;
    } else {
      v1741 = 0;
      v1742 = 0;
    }
    var v1743 = this.info & 15;
    if (this.info === 10 || v1743 === 0) {
      v405.rotate(this.angle);
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        var v1744 = ᐃᐃ[887][world.time];
      } else {
        v1744 = ᐃᐃ[225][world.time];
      }
      var v1745 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1744.width;
      var v1746 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1744.height;
      f295(v405, v1744, -v1745 / 2 + v1741, -v1746 / 2 + v1742, v1745, v1746);
    } else {
      this.ᐃⲆᐃᐃᐃᐃⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        v1744 = ᐃᐃ[857][world.time];
      } else {
        v1744 = ᐃᐃ[227][world.time];
      }
      v405.translate(0, v1744.height / 2);
      v405.rotate(this.ᐃⲆᐃᐃᐃᐃⵠ.Ⲇⵠⵠ);
      f295(v405, v1744, v1741 - v1744.width / 2, -v1744.height + v1742);
    }
    v405.restore();
  }
  function f335() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1747 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1748 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1747;
      var v1749 = v1747 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1748 = 0;
      v1749 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1748 += Math.random() * 2 - 1;
      v1749 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1748, user.ᐃⵠⵠ.y + this.y + v1749);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[246][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1553][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f336(p1172) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    Δⵠ = ᐃᐃ[p1172][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -Δⵠ.width;
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f337() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    var v1750 = Δᐃᐃ.ⲆⲆⵠᐃ(this, this.r);
    this.scale = v1750 > 350 ? Math.min(this.scale + v3064 / 2, 1.8) : Math.max(this.scale - v3064, 1);
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.rotate.ⵠᐃᐃ();
    this.ᐃⲆΔᐃ = v1750 < 350 ? Math.max(0, this.ᐃⲆΔᐃ - v3064 * 2.2) : Math.min(1, this.ᐃⲆΔᐃ + v3064 * 2.2);
    v1751 = ᐃᐃ[1443][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1751.width * this.scale;
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1751.height * this.scale;
    v405.globalAlpha = 1 - this.ᐃⲆΔᐃ;
    f295(v405, v1751, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    v1751 = ᐃᐃ[1427][world.time];
    ⵠⵠᐃ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1751.width);
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1751.height * this.scale;
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1751, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == vVVVVV142) {
        this.action -= 2;
      }
      v405.globalAlpha = (1 - this.ᐃⲆΔᐃ) * (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ);
      var v1751 = ᐃᐃ[1444];
      ⵠⵠᐃ = this.scale * (-v1751.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
      ⵠⲆⵠ = -v1751.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
      f295(v405, v1751, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ) * this.ᐃⲆΔᐃ;
      v1751 = ᐃᐃ[1436];
      ⵠⵠᐃ = -v1751.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
      ⵠⲆⵠ = -v1751.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
      f295(v405, v1751, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v1751 = ᐃᐃ[1430][world.time];
    ⵠⵠᐃ = this.scale * (-v1751.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
    ⵠⲆⵠ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1751.height);
    v405.save();
    v405.translate(v415 * -40, v415 * 80);
    v405.rotate(this.rotate.Ⲇⵠⵠ);
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1751, -ⵠⵠᐃ * v415 / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = this.ᐃⲆΔᐃ * (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ);
      v1751 = ᐃᐃ[1437];
      f295(v405, v1751, -ⵠⵠᐃ * v415 / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v1751 = ᐃᐃ[1433][world.time];
    v405.save();
    v405.translate(v415 * 40, v415 * 80);
    v405.rotate(-this.rotate.Ⲇⵠⵠ);
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1751, v415 * -ⵠⵠᐃ / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = this.ᐃⲆΔᐃ * (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ);
      v1751 = ᐃᐃ[1438];
      f295(v405, v1751, v415 * -ⵠⵠᐃ / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.globalAlpha = 1;
    v405.restore();
    v405.restore();
  }
  function f338() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1752 = v415 * (v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600);
      var v1753 = v1752 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1754 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1752;
    } else {
      v1753 = 0;
      v1754 = 0;
    }
    var v1755 = this.info & 15;
    if (this.info === 10 || v1755 === 0) {
      v405.rotate(this.angle);
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        var v1756 = ᐃᐃ[1246][world.time];
      } else {
        v1756 = ᐃᐃ[318][world.time];
      }
      var v1757 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1756.width;
      var v1758 = -v1756.height * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      f295(v405, v1756, -v1757 / 2 + v1753, -v1758 / 2 + v1754, v1757, v1758);
    } else {
      if (this.info & 16) {
        v1756 = ᐃᐃ[1247][world.time];
      } else {
        v1756 = ᐃᐃ[319][world.time];
      }
      v405.translate(0, v1756.height / 2);
      f295(v405, v1756, v1753 - v1756.width / 2, -v1756.height + v1754);
    }
    v405.restore();
  }
  function f339() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vV14) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVVVV142;
      }
      var v1759 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1760 = v1759 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1761 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1759;
    } else {
      v1760 = 0;
      v1761 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1760 += Math.random() * 2 - 1;
      v1761 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1760, user.ᐃⵠⵠ.y + this.y + v1761);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[255][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1589][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f340(p1173, p1174) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (p1173 === 1103) {
      p1173 = 360;
      this.info = 36;
    }
    Δⵠ = ᐃᐃ[p1173][this.info][world.time];
    ⵠⵠᐃ = -Δⵠ.width / 2;
    ⵠⲆⵠ = -Δⵠ.height / 2;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && vVVV14 == this.ᐃΔⵠ.ΔⲆΔ) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var vHv = f397(this.info, Δⵠ, ᐃᐃᐃⵠᐃᐃⵠⵠⲆ);
      f295(v405, vHv, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f341() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ΔΔⲆΔⲆ.ⵠᐃᐃ();
    Δⵠ = ᐃᐃ[664][world.time];
    ⵠⵠᐃ = -Δⵠ.width * this.ΔΔⲆΔⲆ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ΔΔⲆΔⲆ.Ⲇⵠⵠ * -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f342() {
    if (!(this.info < 10)) {
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
      v405.rotate(this.angle);
      if (this.ᐃΔⵠ.ⵠᐃᐃ) {
        if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vVVV143 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
          this.ᐃΔⵠ.ⵠᐃᐃ = vVV1423;
        }
        var v1762 = (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600 * v415;
        var v1763 = v1762 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
        var v1764 = v1762 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
      } else {
        v1763 = 0;
        v1764 = 0;
      }
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      var v1765 = ᐃᐃ[316][world.time];
      var v1766 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1765.width;
      var v1767 = -v1765.height * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      f295(v405, v1765, -v1766 / 2 + v1763, -v1767 / 2 + v1764, v1766, v1767);
      v405.restore();
    }
  }
  function f343() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ΔΔⲆΔⲆ.ⵠᐃᐃ();
    Δⵠ = ᐃᐃ[1547][world.time];
    ⵠⵠᐃ = this.ΔΔⲆΔⲆ.Ⲇⵠⵠ * -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height * this.ΔΔⲆΔⲆ.Ⲇⵠⵠ;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f344() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vV142) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vV143;
      }
      var v1768 = v415 * (v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600);
      var v1769 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1768;
      var v1770 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1768;
    } else {
      v1769 = 0;
      v1770 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1769 += Math.random() * 2 - 1;
      v1770 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1769, user.ᐃⵠⵠ.y + this.y + v1770);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[249][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1565][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f345() {
    var v1771 = Math.PI / 2;
    var v1772 = Math.PI / 4;
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.ᐃᐃΔΔᐃΔⲆ.ⵠᐃᐃ();
    this.ⲆⲆᐃⵠⵠⵠⲆ.ⵠᐃᐃ();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    v1773 = this.info === 0 ? ᐃᐃ[1163][world.time] : ᐃᐃ[1162][world.time];
    ⵠⵠᐃ = -v1773.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1773.height;
    f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == vVVV144) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1773 = ᐃᐃ[1164];
      f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⲆⵠΔⵠⲆ.ⵠᐃᐃ() && this.ⲆⵠΔⵠⲆ.ΔⲆΔ == v14) {
        this.action -= 4;
      }
      v405.globalAlpha = 0.6 - this.ⲆⵠΔⵠⲆ.Ⲇⵠⵠ;
      v1773 = ᐃᐃ[1167];
      f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle + v1772);
    v405.translate(55, 0);
    v405.rotate(v1771);
    v1773 = this.info === 0 ? ᐃᐃ[1170][world.time] : ᐃᐃ[1172][world.time];
    ⵠⵠᐃ = -v1773.width * this.ᐃᐃΔΔᐃΔⲆ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ᐃᐃΔΔᐃΔⲆ.Ⲇⵠⵠ * -v1773.height;
    f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1773 = ᐃᐃ[1165];
      f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    if (this.action & 4) {
      v405.globalAlpha = 0.6 - this.ⲆⵠΔⵠⲆ.Ⲇⵠⵠ;
      v1773 = ᐃᐃ[1168];
      f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle + v1771 + v1772);
    v405.translate(55, 0);
    v405.rotate(v1771);
    v1773 = this.info === 0 ? ᐃᐃ[1171][world.time] : ᐃᐃ[1173][world.time];
    ⵠⵠᐃ = -v1773.width * this.ⲆⲆᐃⵠⵠⵠⲆ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ⲆⲆᐃⵠⵠⵠⲆ.Ⲇⵠⵠ * -v1773.height;
    f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1773 = ᐃᐃ[1166];
      f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    if (this.action & 4) {
      v405.globalAlpha = 0.6 - this.ⲆⵠΔⵠⲆ.Ⲇⵠⵠ;
      v1773 = ᐃᐃ[1169];
      f295(v405, v1773, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f346() {
    if ((this.info & 1) === 1) {
      this.ᐃⵠΔᐃⲆ = Math.min(this.ᐃⵠΔᐃⲆ + v3064, 2.2);
    } else {
      this.ᐃⵠΔᐃⲆ = Math.max(this.ᐃⵠΔᐃⲆ - v3064, 0);
      this.ⵠΔⲆⲆⲆΔⵠ += v3064;
      if (this.ⵠΔⲆⲆⲆΔⵠ > 0.1) {
        this.ⵠΔⲆⲆⲆΔⵠ = 0;
        var v1774 = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ᐃΔΔⵠ.push(v1774);
      }
    }
    for (var v1775 = 0; v1775 < this.ᐃΔΔⵠ.length; v1775++) {
      v1774 = this.ᐃΔΔⵠ[v1775];
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + v1774.x, user.ᐃⵠⵠ.y + v1774.y);
      v1774.a = Math.min(1, 0 + v3064 / 2);
      var v1776 = 0;
      if (v1776 < 0.2) {
        v1776 *= 5;
      } else {
        v1776 = v1776 > 0.8 ? (1 - v1776) * 5 : 1;
      }
      v405.globalAlpha = v1776 * 0.8;
      f92(v405, 0, 0, v1774.r);
      f88(v405, v585.ᐃᐃⲆᐃⲆΔⵠ[world.time]);
      v405.restore();
      if (1 === 0) {
        this.ᐃΔΔⵠ.splice(v1775, 1);
        v1775--;
      }
    }
  }
  function f347() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vVVVV1422) {
        this.ᐃΔⵠ.ⵠᐃᐃ = v14;
      }
      var v1777 = (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600 * v415;
      var v1778 = v1777 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1779 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1777;
    } else {
      v1778 = 0;
      v1779 = 0;
    }
    var v1780 = this.info & 15;
    if (this.info === 10 || v1780 === 0) {
      v405.rotate(this.angle);
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        var v1781 = ᐃᐃ[1087][world.time];
      } else {
        v1781 = ᐃᐃ[293][world.time];
      }
      var v1782 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1781.width;
      var v1783 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1781.height;
      f295(v405, v1781, -v1782 / 2 + v1778, -v1783 / 2 + v1779, v1782, v1783);
    } else {
      if (this.info & 16) {
        v1781 = ᐃᐃ[1088][world.time];
      } else {
        v1781 = ᐃᐃ[294][world.time];
      }
      v405.translate(0, v1781.height / 2);
      f295(v405, v1781, v1778 - v1781.width / 2, -v1781.height + v1779);
    }
    v405.restore();
  }
  function f348() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vVVVV142) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVV142;
      }
      var v1784 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1785 = v1784 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1786 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1784;
    } else {
      v1785 = 0;
      v1786 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1785 += Math.random() * 2 - 1;
      v1786 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1785, user.ᐃⵠⵠ.y + this.y + v1786);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[252][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1577][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f349() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vVVV14) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVV1423;
      }
      var v1787 = v415 * (v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600);
      var v1788 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1787;
      var v1789 = v1787 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1788 = 0;
      v1789 = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      v1790 = ᐃᐃ[965][world.time];
      f295(v405, v1790, -v1790.width / 2 + v1788, -v1790.height / 2 + v1789);
      this.up.ⵠᐃᐃ();
      var v1790 = ᐃᐃ[969][world.time];
      var v1791 = -v1790.width * this.up.Ⲇⵠⵠ;
      var v1792 = -v1790.height * this.up.Ⲇⵠⵠ;
      f295(v405, v1790, -v1791 / 2 + v415 * 1, -v1792 / 2 + v415 * 3, v1791, v1792);
    } else {
      v1790 = ᐃᐃ[237][world.time];
      f295(v405, v1790, -v1790.width / 2 + v1788, -v1790.height / 2 + v1789);
    }
    v405.restore();
  }
  function f350(p1175, p1176, p1177) {
    if (p1175 >= 0) {
      Δⵠ = ᐃᐃ[p1175][world.time];
      switch (p1175) {
        case 135:
        case 136:
        case 137:
          f425(p1175, Δⵠ, -Δⵠ.width / 4 - v415 * (0 + p1176), -Δⵠ.height / 4 + v415 * (p1177 + 35));
          break;
        case 138:
          f425(p1175, Δⵠ, -Δⵠ.width / 4 - (1 + p1176) * v415, -Δⵠ.height / 4 + v415 * (p1177 + 45));
          break;
        case 139:
        case 140:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 141:
        case 148:
        case 149:
          f425(p1175, Δⵠ, -Δⵠ.width / 4 - v415 * (1 + p1176), -Δⵠ.height / 4 + v415 * (p1177 + 40));
      }
    }
  }
  function f351() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      var v1793 = (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600 * v415;
      var v1794 = v1793 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1795 = v1793 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1794 = 0;
      v1795 = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 0.5) % (Math.PI * 2);
    }
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1794, user.ᐃⵠⵠ.y + this.y + v1795);
    v405.save();
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[860][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
    v405.save();
    v405.rotate(this.ᐃΔΔΔⲆᐃⵠⵠⲆ);
    Δⵠ = ᐃᐃ[861][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
    v405.restore();
  }
  function f352() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ΔΔⲆΔⲆ.ⵠᐃᐃ();
    Δⵠ = ᐃᐃ[399][world.time];
    ⵠⵠᐃ = -Δⵠ.width * this.ΔΔⲆΔⲆ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ΔΔⲆΔⲆ.Ⲇⵠⵠ * -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f353() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1796 = (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600 * v415;
      var v1797 = v1796 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1798 = v1796 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1797 = 0;
      v1798 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1797 += Math.random() * 2 - 1;
      v1798 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1797, user.ᐃⵠⵠ.y + this.y + v1798);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[253][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1581][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f354() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVVV142;
      }
      var v1799 = v415 * (v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600);
      var v1800 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1799;
      var v1801 = v1799 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1800 = 0;
      v1801 = 0;
    }
    if (this.action == 2) {
      Δⵠ = ᐃᐃ[518][world.time];
    } else {
      Δⵠ = ᐃᐃ[210][world.time];
    }
    f295(v405, Δⵠ, -Δⵠ.width / 2 + v1800, -Δⵠ.height / 2 + v1801);
    v405.restore();
  }
  function f355() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1802 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1803 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1802;
      var v1804 = v1802 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1803 = 0;
      v1804 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1803 += Math.random() * 2 - 1;
      v1804 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1803, user.ᐃⵠⵠ.y + this.y + v1804);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[251][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1573][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f356() {
    var vUndefined3 = undefined;
    var vUndefined4 = undefined;
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.rotate.ⵠᐃᐃ();
    if (this.ᐃⵠΔᐃⲆ >= 0.1 && this.ᐃⵠΔᐃⲆ <= 1.1) {
      if ((v1805 = Math.max(0, Math.min(1, this.ᐃⵠΔᐃⲆ - 0.1))) < 0.2) {
        v1805 *= 5;
      } else {
        v1805 = v1805 > 0.8 ? (1 - v1805) * 5 : 1;
      }
      vUndefined3 = ᐃᐃ[1478][world.time];
      ⵠⵠᐃ = -vUndefined3.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
      ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -vUndefined3.height;
      v405.globalAlpha = v1805;
      f295(v405, vUndefined3, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      vUndefined4 = ᐃᐃ[1479];
    }
    if (this.ᐃⵠΔᐃⲆ >= 0.9) {
      var v1805;
      if ((v1805 = Math.max(0, Math.min(1, this.ᐃⵠΔᐃⲆ - 0.9))) < 0.2) {
        v1805 *= 5;
      } else {
        v1805 = 1;
      }
      vUndefined3 = ᐃᐃ[1480][world.time];
      ⵠⵠᐃ = -vUndefined3.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
      ⵠⲆⵠ = -vUndefined3.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
      v405.globalAlpha = v1805;
      f295(v405, vUndefined3, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      vUndefined4 = ᐃᐃ[1481];
    }
    if (this.action & 2 && vVVVVVUndefined583 !== vUndefined4) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ) * v1805;
      ⵠⵠᐃ = -vUndefined4.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
      ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -vUndefined4.height;
      f295(v405, vUndefined4, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    }
    v405.globalAlpha = 1;
    v405.restore();
  }
  function f357() {
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    v1806 = this.info === 0 ? ᐃᐃ[1350][world.time] : ᐃᐃ[1352][world.time];
    ⵠⵠᐃ = -v1806.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
    ⵠⲆⵠ = -v1806.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
    f295(v405, v1806, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1806 = ᐃᐃ[1353];
      f295(v405, v1806, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f358() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ⵠΔⲆΔⵠ.ⵠᐃᐃ();
    Δⵠ = ᐃᐃ[398][world.time];
    ⵠⵠᐃ = this.ⵠΔⲆΔⵠ.Ⲇⵠⵠ * -Δⵠ.width;
    ⵠⲆⵠ = -Δⵠ.height * this.ⵠΔⲆΔⵠ.Ⲇⵠⵠ;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    this.ΔΔⲆΔⲆ.ⵠᐃᐃ();
    Δⵠ = ᐃᐃ[399][world.time];
    ⵠⵠᐃ = -Δⵠ.width * this.ΔΔⲆΔⲆ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ΔΔⲆΔⲆ.Ⲇⵠⵠ * -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f359(p1178, p1179, p1180) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + p1179, user.ᐃⵠⵠ.y + p1180);
    v405.rotate(this.angle);
    v405.translate(this.x - p1179, this.y - p1180);
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    Δⵠ = ᐃᐃ[p1178][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -Δⵠ.width;
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -Δⵠ.height;
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.restore();
  }
  function f360() {
    if (this.info !== 10) {
      for (var v1807 = this.info & 15, v1808 = 0; v1808 < v1807; v1808++) {
        this.ᐃᐃᐃᐃ[v1808].ⲆΔᐃΔ(317, this.x, this.y);
      }
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
      v405.rotate(this.angle);
      if (this.ᐃΔⵠ.ⵠᐃᐃ) {
        if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vVVVV1423) {
          this.ᐃΔⵠ.ⵠᐃᐃ = false;
        }
        var v1809 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
        var v1810 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1809;
        var v1811 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1809;
      } else {
        v1810 = 0;
        v1811 = 0;
      }
      if (this.info & 16) {
        var v1812 = ᐃᐃ[1234][world.time];
      } else {
        v1812 = ᐃᐃ[1233][world.time];
      }
      f295(v405, v1812, -v1812.width / 2 + v1810, -v1812.width / 2 + v1811);
      v405.restore();
    }
  }
  function f361() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVVVV1423;
      }
      var v1813 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1814 = v1813 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1815 = v1813 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1814 = 0;
      v1815 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1814 += Math.random() * 2 - 1;
      v1815 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1814, user.ᐃⵠⵠ.y + this.y + v1815);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[257][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1597][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f362() {
    var v1816 = Math.PI / 2;
    var v1817 = Math.PI / 4;
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.ᐃᐃΔΔᐃΔⲆ.ⵠᐃᐃ();
    this.ⲆⲆᐃⵠⵠⵠⲆ.ⵠᐃᐃ();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    v1818 = this.info === 0 ? ᐃᐃ[341][world.time] : ᐃᐃ[1361][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1818.width;
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1818.height;
    f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1818 = ᐃᐃ[1364];
      f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⲆⵠΔⵠⲆ.ⵠᐃᐃ() && this.ⲆⵠΔⵠⲆ.ΔⲆΔ == 0) {
        this.action -= 4;
      }
      v405.globalAlpha = 0.6 - this.ⲆⵠΔⵠⲆ.Ⲇⵠⵠ;
      v1818 = ᐃᐃ[1373];
      f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle + v1817);
    v405.translate(100, 0);
    v405.rotate(v1816);
    v1818 = this.info === 0 ? ᐃᐃ[1368][world.time] : ᐃᐃ[1367][world.time];
    ⵠⵠᐃ = -v1818.width * this.ᐃᐃΔΔᐃΔⲆ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ᐃᐃΔΔᐃΔⲆ.Ⲇⵠⵠ * -v1818.height;
    f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1818 = ᐃᐃ[1365];
      f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    if (this.action & 4) {
      v405.globalAlpha = 0.6 - this.ⲆⵠΔⵠⲆ.Ⲇⵠⵠ;
      v1818 = ᐃᐃ[1374];
      f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle + v1816 + v1817);
    v405.translate(100, 0);
    v405.rotate(v1816);
    v1818 = this.info === 0 ? ᐃᐃ[1371][world.time] : ᐃᐃ[1370][world.time];
    ⵠⵠᐃ = this.ⲆⲆᐃⵠⵠⵠⲆ.Ⲇⵠⵠ * -v1818.width;
    ⵠⲆⵠ = -v1818.height * this.ⲆⲆᐃⵠⵠⵠⲆ.Ⲇⵠⵠ;
    f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1818 = ᐃᐃ[1366];
      f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    if (this.action & 4) {
      v405.globalAlpha = 0.6 - this.ⲆⵠΔⵠⲆ.Ⲇⵠⵠ;
      v1818 = ᐃᐃ[1375];
      f295(v405, v1818, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f363() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vV142 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1819 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1820 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1819;
      var v1821 = v1819 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1820 = 0;
      v1821 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1820 += Math.random() * 2 - 1;
      v1821 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1820, user.ᐃⵠⵠ.y + this.y + v1821);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[247][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1557][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f364() {
    if (!(this.info < 10)) {
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
      v405.rotate(this.angle);
      if (this.ᐃΔⵠ.ⵠᐃᐃ) {
        if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vVVV144 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
          this.ᐃΔⵠ.ⵠᐃᐃ = vVVV145;
        }
        var v1822 = v415 * (v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600);
        var v1823 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1822;
        var v1824 = v1822 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
      } else {
        v1823 = 0;
        v1824 = 0;
      }
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      var v1825 = ᐃᐃ[206][world.time];
      var v1826 = -v1825.width * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      var v1827 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1825.height;
      f295(v405, v1825, -v1826 / 2 + v1823, -v1827 / 2 + v1824, v1826, v1827);
      v405.restore();
    }
  }
  function f365() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    var v1828 = Δᐃᐃ.ⲆⲆⵠᐃ(this, this.r);
    this.scale = v1828 > 350 ? Math.min(this.scale + v3064 / 2, 1.8) : Math.max(this.scale - v3064, 1);
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.rotate.ⵠᐃᐃ();
    this.ᐃⲆΔᐃ = v1828 < 350 ? Math.max(0, this.ᐃⲆΔᐃ - v3064 * 2.2) : Math.min(1, this.ᐃⲆΔᐃ + v3064 * 2.2);
    v1829 = (this.info & 1) === 0 ? ᐃᐃ[1460][world.time] : ᐃᐃ[1461][world.time];
    ⵠⵠᐃ = this.scale * (-v1829.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1829.height * this.scale;
    v405.globalAlpha = 1 - this.ᐃⲆΔᐃ;
    f295(v405, v1829, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    v1829 = this.info & 1 ? ᐃᐃ[1445][world.time] : ᐃᐃ[1446][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1829.width * this.scale;
    ⵠⲆⵠ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1829.height);
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1829, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ) * (1 - this.ᐃⲆΔᐃ);
      var v1829 = ᐃᐃ[1462];
      ⵠⵠᐃ = -v1829.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
      ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1829.height * this.scale;
      f295(v405, v1829, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = this.ᐃⲆΔᐃ * (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ);
      v1829 = ᐃᐃ[1454];
      ⵠⵠᐃ = this.scale * (-v1829.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
      ⵠⲆⵠ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1829.height);
      f295(v405, v1829, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v1829 = this.info & 1 ? ᐃᐃ[1448][world.time] : ᐃᐃ[1449][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1829.width * this.scale;
    ⵠⲆⵠ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1829.height);
    v405.save();
    v405.translate(v415 * -20, v415 * 0);
    v405.rotate(this.rotate.Ⲇⵠⵠ);
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1829, v415 * -ⵠⵠᐃ / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ) * this.ᐃⲆΔᐃ;
      v1829 = ᐃᐃ[1455];
      f295(v405, v1829, -ⵠⵠᐃ * v415 / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v1829 = this.info & 1 ? ᐃᐃ[1451][world.time] : ᐃᐃ[1452][world.time];
    v405.save();
    v405.translate(v415 * 20, v415 * 0);
    v405.rotate(-this.rotate.Ⲇⵠⵠ);
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1829, -ⵠⵠᐃ * v415 / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ) * this.ᐃⲆΔᐃ;
      v1829 = ᐃᐃ[1456];
      f295(v405, v1829, v415 * -ⵠⵠᐃ / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.globalAlpha = 1;
    v405.restore();
    v405.restore();
  }
  function f366() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVVV142;
      }
      var v1830 = (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600 * v415;
      var v1831 = v1830 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1832 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1830;
    } else {
      v1831 = 0;
      v1832 = 0;
    }
    if (this.info === 0) {
      Δⵠ = ᐃᐃ[285][world.time];
    } else {
      Δⵠ = ᐃᐃ[1051][world.time][this.info - 1];
    }
    f295(v405, Δⵠ, -Δⵠ.width / 2 + v1831, -Δⵠ.height / 2 + v1832);
    v405.restore();
  }
  function f367(p1181, p1182) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    v1833 = ᐃᐃ[p1181][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1833.width;
    ⵠⲆⵠ = -v1833.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
    f295(v405, v1833, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1833 = ᐃᐃ[p1182];
      f295(v405, v1833, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f368() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVV144;
      }
      var v1834 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1835 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1834;
      var v1836 = v1834 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1835 = 0;
      v1836 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1835 += Math.random() * 2 - 1;
      v1836 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1835, user.ᐃⵠⵠ.y + this.y + v1836);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[254][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1585][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f369() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃⲆⵠⵠΔ.length == 0 || this.ᐃⲆⵠⵠΔ[this.ᐃⲆⵠⵠΔ.length - 1] <= v585.ⵠⲆΔᐃΔᐃⲆ)) {
      this.ᐃⲆⵠⵠΔ.push(v585.ᐃⲆⵠⲆⲆᐃⲆ);
    }
    for (var v1837 = 0; v1837 < this.ᐃⲆⵠⵠΔ.length; v1837++) {
      this.ᐃⲆⵠⵠΔ[v1837] = Math.max(0, this.ᐃⲆⵠⵠΔ[v1837] - v3064 * v585.ΔᐃᐃⲆⵠⵠⵠ);
      v405.globalAlpha = this.ᐃⲆⵠⵠΔ[v1837] / 1.3;
      var v1838 = (1 - this.ᐃⲆⵠⵠΔ[v1837]) * 40;
      var v1839 = (1 - this.ᐃⲆⵠⵠΔ[v1837]) * 35 + 10;
      f92(v405, v415 * -68 + Math.sin(-this.angle - Math.PI / 2) * v1838, v415 * -20 + v1838 * Math.cos(-this.angle - Math.PI / 2), v1839);
      f88(v405, "#333333");
    }
    v405.globalAlpha = 1;
    if (this.ᐃⲆⵠⵠΔ.length > 0 && this.ᐃⲆⵠⵠΔ[0] === 0) {
      this.ᐃⲆⵠⵠΔ.shift();
    }
    v405.restore();
  }
  function f370() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vVVVV1422) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1840 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1841 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1840;
      var v1842 = v1840 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1841 = 0;
      v1842 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1841 += Math.random() * 2 - 1;
      v1842 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1841, user.ᐃⵠⵠ.y + this.y + v1842);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[248][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1561][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f371() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (Δᐃᐃ.ⲆⲆⵠᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + v3064 / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - v3064, 1);
    }
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.rotate.ⵠᐃᐃ();
    v1843 = this.info === 0 ? ᐃᐃ[342][world.time] : ᐃᐃ[1376][world.time];
    ⵠⵠᐃ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1843.width);
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1843.height * this.scale;
    f295(v405, v1843, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1843 = ᐃᐃ[1385];
      f295(v405, v1843, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v1843 = this.info === 0 ? ᐃᐃ[1380][world.time] : ᐃᐃ[1379][world.time];
    ⵠⵠᐃ = -v1843.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
    ⵠⲆⵠ = -v1843.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
    v405.save();
    v405.translate(v415 * -40, v415 * 10);
    v405.rotate(this.rotate.Ⲇⵠⵠ);
    f295(v405, v1843, v415 * -ⵠⵠᐃ / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1843 = ᐃᐃ[1386];
      f295(v405, v1843, -ⵠⵠᐃ * v415 / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v1843 = this.info === 0 ? ᐃᐃ[1383][world.time] : ᐃᐃ[1382][world.time];
    v405.save();
    v405.translate(v415 * 40, v415 * 10);
    v405.rotate(-this.rotate.Ⲇⵠⵠ);
    f295(v405, v1843, v415 * -ⵠⵠᐃ / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1843 = ᐃᐃ[1387];
      f295(v405, v1843, v415 * -ⵠⵠᐃ / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v405.restore();
  }
  function f372(p1183, p1184) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    v1844 = ᐃᐃ[p1183][world.time];
    ⵠⵠᐃ = -v1844.width;
    ⵠⲆⵠ = -v1844.height;
    f295(v405, v1844, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && vVVV143 == this.ᐃΔⵠ.ΔⲆΔ) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1844 = ᐃᐃ[p1184];
      f295(v405, v1844, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f373() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (Δᐃᐃ.ⲆⲆⵠᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + v3064 / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - v3064, 1);
    }
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.rotate.ⵠᐃᐃ();
    v1845 = this.info === 0 ? ᐃᐃ[343][world.time] : ᐃᐃ[1391][world.time];
    ⵠⵠᐃ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1845.width);
    ⵠⲆⵠ = this.scale * (-v1845.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
    f295(v405, v1845, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1845 = ᐃᐃ[1400];
      f295(v405, v1845, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v1845 = this.info === 0 ? ᐃᐃ[1395][world.time] : ᐃᐃ[1394][world.time];
    ⵠⵠᐃ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1845.width);
    ⵠⲆⵠ = -v1845.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
    v405.save();
    v405.translate(v415 * -40, v415 * 10);
    v405.rotate(this.rotate.Ⲇⵠⵠ);
    f295(v405, v1845, v415 * -ⵠⵠᐃ / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1845 = ᐃᐃ[1401];
      f295(v405, v1845, v415 * -ⵠⵠᐃ / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v1845 = this.info === 0 ? ᐃᐃ[1398][world.time] : ᐃᐃ[1397][world.time];
    v405.save();
    v405.translate(v415 * 40, v415 * 10);
    v405.rotate(-this.rotate.Ⲇⵠⵠ);
    f295(v405, v1845, v415 * -ⵠⵠᐃ / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1845 = ᐃᐃ[1402];
      f295(v405, v1845, v415 * -ⵠⵠᐃ / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v405.restore();
  }
  function f374(p1185, p1186) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    v1846 = ᐃᐃ[p1185][world.time];
    ⵠⵠᐃ = -v1846.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1846.height;
    f295(v405, v1846, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1846 = ᐃᐃ[p1186];
      f295(v405, v1846, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f375() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vV14) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1847 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1848 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1847;
      var v1849 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1847;
    } else {
      v1848 = 0;
      v1849 = 0;
    }
    var v1850 = this.info & 15;
    if (this.info === 10 || v1850 === 0) {
      v405.rotate(this.angle);
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        var v1851 = ᐃᐃ[1098][world.time];
      } else {
        v1851 = ᐃᐃ[295][world.time];
      }
      var v1852 = -v1851.width * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      var v1853 = -v1851.height * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      f295(v405, v1851, -v1852 / 2 + v1848, -v1853 / 2 + v1849, v1852, v1853);
    } else {
      if (this.info & 16) {
        v1851 = ᐃᐃ[1118][world.time];
      } else {
        v1851 = ᐃᐃ[296][world.time];
      }
      v405.translate(0, v1851.height / 2);
      f295(v405, v1851, v1848 - v1851.width / 2, -v1851.height + v1849);
    }
    v405.restore();
  }
  function f376() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vVVV142 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVV142;
      }
      var v1854 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1855 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1854;
      var v1856 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1854;
    } else {
      v1855 = 0;
      v1856 = 0;
    }
    this.ⲆΔΔⲆᐃⵠⵠ = (this.ⲆΔΔⲆᐃⵠⵠ + v3064 * 3) % (Math.PI * 2);
    this.ⵠΔᐃᐃⵠᐃᐃ = (this.ⵠΔᐃᐃⵠᐃᐃ - v3064 * 3) % (Math.PI * 2);
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1855, user.ᐃⵠⵠ.y + this.y + v1856);
    v405.save();
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[245][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
    v405.save();
    v405.rotate(this.ⲆΔΔⲆᐃⵠⵠ);
    Δⵠ = ᐃᐃ[1549][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
    v405.save();
    v405.rotate(this.ⵠΔᐃᐃⵠᐃᐃ);
    Δⵠ = ᐃᐃ[1548][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
    v405.restore();
  }
  function f377() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vVVVVV142 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1857 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1858 = v1857 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1859 = v1857 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1858 = 0;
      v1859 = 0;
    }
    var v1860 = this.info & 15;
    if (this.info === 10 || v1860 === 0) {
      v405.rotate(this.angle);
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        var v1861 = ᐃᐃ[1261][world.time];
      } else {
        v1861 = ᐃᐃ[320][world.time];
      }
      var v1862 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1861.width;
      var v1863 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1861.height;
      f295(v405, v1861, -v1862 / 2 + v1858, -v1863 / 2 + v1859, v1862, v1863);
    } else {
      if (this.info & 16) {
        v1861 = ᐃᐃ[1262][world.time];
      } else {
        v1861 = ᐃᐃ[321][world.time];
      }
      v405.translate(0, v1861.height / 2);
      f295(v405, v1861, v1858 - v1861.width / 2, -v1861.height + v1859);
    }
    v405.restore();
  }
  function f378(p1187, p1188, p1189) {
    if (p1187 >= 0) {
      Δⵠ = ᐃᐃ[p1187][world.time];
      switch (p1187) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 49:
        case 50:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 51:
        case 58:
        case 59:
          f413(p1187, Δⵠ, -Δⵠ.width / 2 - (45 + p1188) * v415, -Δⵠ.height / 2 + v415 * (p1189 + 22));
          break;
        case 167:
        case 168:
        case 169:
        case 170:
        case 174:
        case 175:
        case 176:
        case 177:
        case 178:
        case 180:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - (52 + p1188) * v415, -Δⵠ.height / 4 + (p1189 + 20) * v415);
          break;
        case 171:
        case 172:
        case 173:
        case 179:
        case 181:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (57 + p1188), -Δⵠ.height / 4 + (p1189 + 20) * v415);
          break;
        case 103:
        case 0:
        case 5:
        case 6:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 110:
        case 117:
        case 118:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (47 + p1188), -Δⵠ.height / 4 + v415 * (p1189 + 45));
          break;
        case 48:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - (52 + p1188) * v415, -Δⵠ.height / 4 + v415 * (p1189 + 45));
          break;
        case 28:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - (47 + p1188) * v415, -Δⵠ.height / 4 + (p1189 + 44) * v415);
          break;
        case 9:
          f413(p1187, Δⵠ, -Δⵠ.width / 2 - v415 * (47 + p1188), -Δⵠ.height / 2 + (p1189 + 44) * v415);
          break;
        case 108:
          f413(p1187, Δⵠ, -Δⵠ.width / 2 - v415 * (40 + p1188), -Δⵠ.height / 2 + v415 * (p1189 + 65));
          break;
        case 12:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (37 + p1188), -Δⵠ.height / 4 + v415 * (p1189 + 85));
          break;
        case 61:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - (37 + p1188) * v415, -Δⵠ.height / 4 + (p1189 + 85) * v415);
          break;
        case 100:
        case 99:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - (26 + p1188) * v415, -Δⵠ.height / 4 + (p1189 + 77) * v415);
          break;
        case 17:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (37 + p1188), -Δⵠ.height / 4 + v415 * (p1189 + 85));
          break;
        case 109:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (47 + p1188), -Δⵠ.height / 4 + v415 * (p1189 + 44));
          break;
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 126:
        case 133:
        case 134:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (37 + p1188), -Δⵠ.height / 4 + (p1189 + 30) * v415);
          break;
        case 102:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (47 + p1188), -Δⵠ.height / 4 + v415 * (p1189 + 35));
          break;
        case 165:
        case 166:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - (47 + p1188) * v415, -Δⵠ.height / 4 + v415 * (p1189 + 40));
          break;
        case 162:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (47 + p1188), -Δⵠ.height / 4 + v415 * (p1189 + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 60:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 19:
        case 26:
        case 27:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - (37 + p1188) * v415, -Δⵠ.height / 4 + (p1189 + 90) * v415);
          break;
        case 18:
          f425(p1187, Δⵠ, -Δⵠ.width / 4 - v415 * (40 + p1188), -Δⵠ.height / 4 + (p1189 + 85) * v415);
          break;
        case 16:
          f413(p1187, Δⵠ, -Δⵠ.width / 2 - (39 + p1188) * v415, -Δⵠ.height / 2 + v415 * (p1189 + 90));
          break;
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 72:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 73:
        case 80:
        case 81:
          f413(p1187, Δⵠ, -Δⵠ.width / 2 - (46 + p1188) * v415, -Δⵠ.height / 2 + (p1189 + 35) * v415);
          break;
        case 85:
          f413(p1187, Δⵠ, -Δⵠ.width / 2 - (47 + p1188) * v415, -Δⵠ.height / 2 + v415 * (p1189 + 54));
          break;
        case 82:
        case 86:
        case 87:
        case 88:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 90:
        case 89:
        case 97:
        case 98:
          f413(p1187, Δⵠ, -Δⵠ.width / 2 - v415 * (46 + p1188), -Δⵠ.height / 2 + (p1189 + 35) * v415);
          break;
        case 101:
          f413(p1187, Δⵠ, -Δⵠ.width / 2 - v415 * (47 + p1188), -Δⵠ.height / 2 + (p1189 + 20) * v415);
      }
    }
  }
  function f379() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ⵠⵠᐃΔⲆⲆⲆ = Math.min(1, this.ⵠⵠᐃΔⲆⲆⲆ + v3064 * 2);
    v405.globalAlpha = this.ⵠⵠᐃΔⲆⲆⲆ * Math.min(1, Math.max(0, Δᐃᐃ.ⲆⲆⵠᐃ(this, this.r) / 80));
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    Δⵠ = ᐃᐃ[357][world.time][this.ⲆⲆⵠΔᐃⲆᐃ];
    if (this.ⲆⲆⵠΔᐃⲆᐃ < 2) {
      ⵠⵠᐃ = -Δⵠ.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
      ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -Δⵠ.height;
    } else if (this.ᐃᐃⲆᐃΔⵠⲆ === 0) {
      ⵠⵠᐃ = -Δⵠ.width;
      ⵠⲆⵠ = -Δⵠ.height;
    } else {
      ⵠⵠᐃ = -Δⵠ.width * 1.35;
      ⵠⲆⵠ = -Δⵠ.height * 1.35;
    }
    f295(v405, Δⵠ, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    v405.globalAlpha = 1;
    v405.restore();
  }
  function f380(p1190, p1191, p1192, p1193, p1194, p1195, p1196, p1197 = 0, p1198) {
    for (var vP1190 = p1190; p1191 >= vP1190; vP1190++) {
      for (var vP1192 = p1192; p1193 >= vP1192; vP1192++) {
        var v1864 = v2831.ⵠⲆΔⵠ[vP1190][vP1192];
        if (vVUndefined !== v1864 && v1864[p1195] !== vVVUndefined14) {
          var v1865 = v1864[p1195];
          var v1866 = ᐃᐃ[p1194][world.time][v1865.ⵠⵠᐃⵠΔᐃⵠ];
          f295(v405, v1866, user.ᐃⵠⵠ.x + v1865.x - v1866.width / (ᐃⲆΔⲆΔ * 4), user.ᐃⵠⵠ.y + v1865.y - v1866.height / (ᐃⲆΔⲆΔ * 4), v1866.width / (ᐃⲆΔⲆΔ * 2), v1866.height / (ᐃⲆΔⲆΔ * 2));
          if (v2833.ⲆΔⲆΔΔ) {
            var v1867 = 2147483648;
            var v1868 = ((vP1190 * 1000 + vP1192) * 1103515245 + 12345) % v1867 / v1867;
            if (v1868 < 0.2) {
              v1868 = Math.floor(v1868 * 5 * ᐃᐃ[1333][world.time][v1865.ⵠⵠᐃⵠΔᐃⵠ].length);
              v1866 = ᐃᐃ[1333][world.time][v1865.ⵠⵠᐃⵠΔᐃⵠ][v1868];
              f295(v405, v1866, user.ᐃⵠⵠ.x + v1865.x - v1866.width / (ᐃⲆΔⲆΔ * 4), user.ᐃⵠⵠ.y + v1865.y - v1866.height / (ᐃⲆΔⲆΔ * 4), v1866.width / (ᐃⲆΔⲆΔ * 2), v1866.height / (ᐃⲆΔⲆΔ * 2));
            } else if (v1865.ⵠⵠⵠᐃⲆΔᐃ !== 0) {
              v1866 = ᐃᐃ[1334][world.time];
              var v1869 = (v1730 + vP1190 % 2 * 30) % 60;
              v405.globalAlpha = v1869 < 30 ? v1869 / 30 : 1 - (v1869 - 30) / 30;
              f295(v405, v1866, user.ᐃⵠⵠ.x + v1865.x - v1866.width / (ᐃⲆΔⲆΔ * 4), user.ᐃⵠⵠ.y + v1865.y - v1866.height / (ᐃⲆΔⲆΔ * 4) - 30 + v1869, v1866.width / (ᐃⲆΔⲆΔ * 2), v1866.height / (ᐃⲆΔⲆΔ * 2));
              v405.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function f381() {
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    v1870 = this.info === 0 ? ᐃᐃ[358][world.time] : ᐃᐃ[1613][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1870.width;
    ⵠⲆⵠ = -v1870.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
    f295(v405, v1870, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1870 = ᐃᐃ[1614];
      f295(v405, v1870, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f382() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (Δᐃᐃ.ⲆⲆⵠᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + v3064 / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - v3064, 1);
    }
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.rotate.ⵠᐃᐃ();
    v1871 = ᐃᐃ[588][world.time];
    ⵠⵠᐃ = this.scale * (-v1871.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
    ⵠⲆⵠ = -v1871.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
    f295(v405, v1871, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && vVVV142 == this.ᐃΔⵠ.ΔⲆΔ) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1871 = ᐃᐃ[602];
      f295(v405, v1871, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v1871 = ᐃᐃ[591][world.time];
    ⵠⵠᐃ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1871.width);
    ⵠⲆⵠ = -v1871.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
    v405.save();
    v405.translate(v415 * -60, v415 * 20);
    v405.rotate(this.rotate.Ⲇⵠⵠ);
    f295(v405, v1871, v415 * -ⵠⵠᐃ / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1871 = ᐃᐃ[606];
      f295(v405, v1871, -ⵠⵠᐃ * v415 / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v1871 = ᐃᐃ[592][world.time];
    v405.save();
    v405.translate(v415 * 60, v415 * 20);
    v405.rotate(-this.rotate.Ⲇⵠⵠ);
    f295(v405, v1871, -ⵠⵠᐃ * v415 / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1871 = ᐃᐃ[607];
      f295(v405, v1871, -ⵠⵠᐃ * v415 / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v405.restore();
  }
  function f383() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = v14;
      }
      var v1872 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1873 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1872;
      var v1874 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1872;
    } else {
      v1873 = 0;
      v1874 = 0;
    }
    var v1875 = this.info & 15;
    if (this.info === 10 || v1875 === 0) {
      v405.rotate(this.angle);
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        var v1876 = ᐃᐃ[1061][world.time];
      } else {
        v1876 = ᐃᐃ[290][world.time];
      }
      var v1877 = -v1876.width * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      var v1878 = -v1876.height * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      f295(v405, v1876, -v1877 / 2 + v1873, -v1878 / 2 + v1874, v1877, v1878);
    } else {
      if (this.info & 16) {
        v1876 = ᐃᐃ[1062][world.time];
      } else {
        v1876 = ᐃᐃ[291][world.time];
      }
      v405.translate(0, v1876.height / 2);
      f295(v405, v1876, v1873 - v1876.width / 2, -v1876.height + v1874);
    }
    v405.restore();
  }
  function f384() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ᐃΔΔⵠ.ⵠᐃᐃ();
    v405.globalAlpha = 0.3;
    var v1879 = ᐃᐃ[392][world.time];
    var v1880 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1879.width;
    var v1881 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1879.height;
    f295(v405, v1879, -v1880 / 2, -v1881 / 2, v1880, v1881);
    v405.globalAlpha = 1;
    v405.restore();
  }
  function f385() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vVV142) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVV145;
      }
      var v1882 = v415 * (v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600);
      var v1883 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1882;
      var v1884 = v1882 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1883 = 0;
      v1884 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1883 += Math.random() * 2 - 1;
      v1884 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1883, user.ᐃⵠⵠ.y + this.y + v1884);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[259][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1605][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f386() {
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    v1885 = this.info === 0 ? ᐃᐃ[1323][world.time] : ᐃᐃ[1331][world.time];
    ⵠⵠᐃ = -v1885.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ;
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1885.height;
    f295(v405, v1885, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1885 = ᐃᐃ[1325];
      f295(v405, v1885, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
  }
  function f387() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vVVVV1422) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVV142;
      }
      var v1886 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1887 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1886;
      var v1888 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1886;
    } else {
      v1887 = 0;
      v1888 = 0;
    }
    var v1889 = this.info & 15;
    if (this.info === 10 || v1889 === 0) {
      v405.rotate(this.angle);
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        var v1890 = ᐃᐃ[1229][world.time];
      } else {
        v1890 = ᐃᐃ[314][world.time];
      }
      var v1891 = -v1890.width * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      var v1892 = -v1890.height * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      f295(v405, v1890, -v1891 / 2 + v1887, -v1892 / 2 + v1888, v1891, v1892);
    } else {
      if (this.info & 16) {
        v1890 = ᐃᐃ[1230][world.time];
      } else {
        v1890 = ᐃᐃ[315][world.time];
      }
      v405.translate(0, v1890.height / 2);
      f295(v405, v1890, v1887 - v1890.width / 2, -v1890.height + v1888);
    }
    v405.restore();
  }
  function f388(p1199) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    this.ᐃΔΔⵠ.ⵠᐃᐃ();
    v405.globalAlpha = 0.3;
    var v1893 = ᐃᐃ[392][world.time];
    var v1894 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1893.width;
    var v1895 = -v1893.height * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
    f295(v405, v1893, -v1894 / 2, -v1895 / 2, v1894, v1895);
    v405.globalAlpha = 1;
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = vVVVV1422;
      }
      var v1896 = (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600 * v415;
      var v1897 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1896;
      var v1898 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1896;
    } else {
      v1897 = 0;
      v1898 = 0;
    }
    v1893 = ᐃᐃ[p1199][world.time];
    f295(v405, v1893, -v1893.width / 2 + v1897, -v1893.height / 2 + v1898);
    v405.restore();
  }
  function f389() {
    if (this.info !== 10) {
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
      v405.rotate(this.angle);
      if (this.ᐃΔⵠ.ⵠᐃᐃ) {
        if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vV143 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
          this.ᐃΔⵠ.ⵠᐃᐃ = false;
        }
        var v1899 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
        var v1900 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1899;
        var v1901 = v1899 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
      } else {
        v1900 = 0;
        v1901 = 0;
      }
      if (this.info & 16) {
        var v1902 = ᐃᐃ[842][world.time];
      } else {
        v1902 = ᐃᐃ[397][world.time];
      }
      f295(v405, v1902, -v1902.width / 2 + v1900, -v1902.width / 2 + v1901);
      v405.restore();
      for (var v1903 = this.info & 15, v1904 = 0; v1904 < v1903; v1904++) {
        this.ᐃᐃᐃᐃ[v1904].ⲆΔᐃΔ(404);
      }
    }
  }
  function f390() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == vV143) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1905 = v415 * (v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600);
      var v1906 = v1905 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1907 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1905;
    } else {
      v1906 = 0;
      v1907 = 0;
    }
    this.ⲆΔΔⲆᐃⵠⵠ = (this.ⲆΔΔⲆᐃⵠⵠ + v3064 * 3) % (Math.PI * 2);
    this.ⵠΔᐃᐃⵠᐃᐃ = (this.ⵠΔᐃᐃⵠᐃᐃ - v3064 * 3) % (Math.PI * 2);
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1906, user.ᐃⵠⵠ.y + this.y + v1907);
    v405.save();
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[244][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
    v405.save();
    v405.rotate(this.ⲆΔΔⲆᐃⵠⵠ);
    Δⵠ = ᐃᐃ[666][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
    v405.save();
    v405.rotate(this.ⵠΔᐃᐃⵠᐃᐃ);
    Δⵠ = ᐃᐃ[665][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
    v405.restore();
  }
  function f391() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ == 0) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1908 = v415 * ((1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * v3064 * 600);
      var v1909 = Math.sin(this.ᐃΔⵠ.angle - this.angle) * v1908;
      var v1910 = v1908 * Math.cos(this.ᐃΔⵠ.angle - this.angle);
    } else {
      v1909 = 0;
      v1910 = 0;
    }
    var v1911 = this.info & 15;
    if (this.info === 10 || v1911 === 0) {
      v405.rotate(this.angle);
      this.ᐃΔΔⵠ.ⵠᐃᐃ();
      if (this.info & 16) {
        var v1912 = ᐃᐃ[1745][world.time];
      } else {
        v1912 = ᐃᐃ[1739][world.time];
      }
      var v1913 = this.ᐃΔΔⵠ.Ⲇⵠⵠ * -v1912.width;
      var v1914 = -v1912.height * this.ᐃΔΔⵠ.Ⲇⵠⵠ;
      f295(v405, v1912, -v1913 / 2 + v1909, -v1914 / 2 + v1910, v1913, v1914);
    } else {
      if (this.info & 16) {
        v1912 = ᐃᐃ[1746][world.time];
      } else {
        v1912 = ᐃᐃ[1759][world.time];
      }
      v405.translate(0, v1912.height / 2);
      f295(v405, v1912, v1909 - v1912.width / 2, -v1912.height + v1910);
    }
    v405.restore();
  }
  function f392() {
    if (this.ᐃΔⵠ.ⵠᐃᐃ) {
      if (this.ᐃΔⵠ.ⲆΔⲆⵠ.ⵠᐃᐃ() && vVV1422 == this.ᐃΔⵠ.ⲆΔⲆⵠ.ΔⲆΔ) {
        this.ᐃΔⵠ.ⵠᐃᐃ = false;
      }
      var v1915 = v3064 * (1 - this.ᐃΔⵠ.ⲆΔⲆⵠ.Ⲇⵠⵠ) * 600 * v415;
      var v1916 = v1915 * Math.sin(this.ᐃΔⵠ.angle - this.angle);
      var v1917 = Math.cos(this.ᐃΔⵠ.angle - this.angle) * v1915;
    } else {
      v1916 = 0;
      v1917 = 0;
    }
    v405.save();
    if (this.info & 255 && ~this.info & 65280) {
      v1916 += Math.random() * 2 - 1;
      v1917 += Math.random() * 2 - 1;
    }
    v405.translate(user.ᐃⵠⵠ.x + this.x + v1916, user.ᐃⵠⵠ.y + this.y + v1917);
    v405.rotate(this.angle);
    Δⵠ = ᐃᐃ[250][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + v3064 * 3) % (Math.PI * 2);
    }
    v405.rotate(this.rotate);
    Δⵠ = ᐃᐃ[1569][world.time];
    f295(v405, Δⵠ, -Δⵠ.width / 2, -Δⵠ.height / 2);
    v405.restore();
  }
  function f393() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    if (Δᐃᐃ.ⲆⲆⵠᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + v3064 / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - v3064, 1);
    }
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.rotate.ⵠᐃᐃ();
    v1918 = ᐃᐃ[587][world.time];
    ⵠⵠᐃ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1918.width);
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1918.height * this.scale;
    f295(v405, v1918, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      var v1918 = ᐃᐃ[601];
      f295(v405, v1918, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v1918 = ᐃᐃ[589][world.time];
    ⵠⵠᐃ = this.scale * (-v1918.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1918.height * this.scale;
    v405.save();
    v405.translate(v415 * -30, v415 * 70);
    v405.rotate(this.rotate.Ⲇⵠⵠ);
    f295(v405, v1918, v415 * -10, v415 * -40, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1918 = ᐃᐃ[604];
      f295(v405, v1918, v415 * -10, v415 * -40, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v1918 = ᐃᐃ[590][world.time];
    v405.save();
    v405.translate(v415 * 30, v415 * 70);
    v405.rotate(-this.rotate.Ⲇⵠⵠ);
    f295(v405, v1918, v415 * 10 - ⵠⵠᐃ, v415 * -40, ⵠⵠᐃ, ⵠⲆⵠ);
    if (this.action & 2) {
      v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
      v1918 = ᐃᐃ[605];
      f295(v405, v1918, v415 * 10 - ⵠⵠᐃ, v415 * -40, ⵠⵠᐃ, ⵠⲆⵠ);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v405.restore();
  }
  function f394() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    v405.rotate(this.angle);
    var v1919 = Δᐃᐃ.ⲆⲆⵠᐃ(this, this.r);
    this.scale = v1919 > 350 ? Math.min(this.scale + v3064 / 2, 1.8) : Math.max(this.scale - v3064, 1);
    this.ᐃⲆⵠᐃ.ⵠᐃᐃ();
    this.rotate.ⵠᐃᐃ();
    this.ᐃⲆΔᐃ = v1919 < 350 ? Math.max(0, this.ᐃⲆΔᐃ - v3064 * 2.2) : Math.min(1, this.ᐃⲆΔᐃ + v3064 * 2.2);
    v1920 = this.info & 1 ? ᐃᐃ[1422][world.time] : ᐃᐃ[1421][world.time];
    ⵠⵠᐃ = -v1920.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
    ⵠⲆⵠ = this.scale * (-v1920.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
    v405.globalAlpha = 1 - this.ᐃⲆΔᐃ;
    f295(v405, v1920, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    v1920 = (this.info & 1) === 0 ? ᐃᐃ[345][world.time] : ᐃᐃ[1406][world.time];
    ⵠⵠᐃ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1920.width * this.scale;
    ⵠⲆⵠ = this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1920.height * this.scale;
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1920, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
        this.action -= 2;
      }
      v405.globalAlpha = (1 - this.ᐃⲆΔᐃ) * (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ);
      var v1920 = ᐃᐃ[1423];
      ⵠⵠᐃ = this.scale * (-v1920.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
      ⵠⲆⵠ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1920.height);
      f295(v405, v1920, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = this.ᐃⲆΔᐃ * (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ);
      v1920 = ᐃᐃ[1415];
      ⵠⵠᐃ = -v1920.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
      ⵠⲆⵠ = this.scale * (this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * -v1920.height);
      f295(v405, v1920, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v1920 = (this.info & 1) === 0 ? ᐃᐃ[1410][world.time] : ᐃᐃ[1409][world.time];
    ⵠⵠᐃ = -v1920.width * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ * this.scale;
    ⵠⲆⵠ = this.scale * (-v1920.height * this.ᐃⲆⵠᐃ.Ⲇⵠⵠ);
    v405.save();
    v405.translate(v415 * -20, v415 * 0);
    v405.rotate(this.rotate.Ⲇⵠⵠ);
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1920, v415 * -ⵠⵠᐃ / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = this.ᐃⲆΔᐃ * (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ);
      v1920 = ᐃᐃ[1416];
      f295(v405, v1920, v415 * -ⵠⵠᐃ / 4, -ⵠⲆⵠ * v415 / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.restore();
    v1920 = this.info & 1 ? ᐃᐃ[1412][world.time] : ᐃᐃ[1413][world.time];
    v405.save();
    v405.translate(v415 * 20, v415 * 0);
    v405.rotate(-this.rotate.Ⲇⵠⵠ);
    v405.globalAlpha = this.ᐃⲆΔᐃ;
    f295(v405, v1920, -ⵠⵠᐃ * v415 / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
    if (this.action & 2) {
      v405.globalAlpha = (0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ) * this.ᐃⲆΔᐃ;
      v1920 = ᐃᐃ[1417];
      f295(v405, v1920, v415 * -ⵠⵠᐃ / 4, v415 * -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
      v405.globalAlpha = 1;
    }
    v405.globalAlpha = 1;
    v405.restore();
    v405.restore();
  }
  function f395(p1200) {
    if (p1200 > 0) {
      var v1921 = ᐃᐃ[p1200][world.time];
      switch (p1200) {
        case 104:
          f413(p1200, v1921, -v1921.width / 2 + v415 * 2, -v1921.height / 2 - v415 * 5);
          break;
        case 10:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 18);
          break;
        case 11:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 10);
          break;
        case 32:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 19);
          break;
        case 33:
          f425(p1200, v1921, -v1921.width / 4, -v1921.height / 4 - v415 * 20);
          break;
        case 34:
          f413(p1200, v1921, -v1921.width / 2 - v415 * 1, -v1921.height / 2 - v415 * 23);
          break;
        case 35:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 5);
          break;
        case 36:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 2);
          break;
        case 70:
          f413(p1200, v1921, -v1921.width / 2 + v415 * 1.5, -v1921.height / 2 - v415 * 1);
          break;
        case 71:
        case 29:
        case 30:
        case 31:
        case 153:
        case 154:
        case 155:
        case 106:
        case 163:
        case 161:
        case 160:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
          f425(p1200, v1921, -v1921.width / 4, -v1921.height / 4 + v415 * 2);
          break;
        case 68:
        case 69:
          f413(p1200, v1921, -v1921.width / 2 - v415 * 5, -v1921.height / 2 - v415 * 2);
          break;
        case 67:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 2);
          break;
        case 158:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 2);
          break;
        case 84:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 2);
          break;
        case 83:
          f413(p1200, v1921, -v1921.width / 2 + v415 * 2, -v1921.height / 2);
          break;
        case 105:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 5);
          break;
        case 150:
        case 151:
        case 152:
          f413(p1200, v1921, -v1921.width / 2 - v415 * 1, -v1921.height / 2);
          break;
        case 156:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 + v415 * 2);
          break;
        case 157:
        case 159:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 + v415 * 8);
          break;
        case 107:
          f413(p1200, v1921, -v1921.width / 2, -v1921.height / 2 - v415 * 4);
      }
    }
  }
  function f396() {
    if (!this.ⵠΔⵠⵠΔ && this.ⲆⲆⲆⵠ !== 0) {
      if (this.x != this.r.x || this.r.y != this.y) {
        var v1922 = (Δᐃᐃ.ⲆᐃⲆⵠⵠΔⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ᐃⵠᐃⲆⵠ = Δᐃᐃ.ⲆⵠⲆⵠΔⲆΔ(v1922, this.ᐃⵠᐃⲆⵠ);
        this.ᐃⵠᐃⲆⵠ = Δᐃᐃ.ΔΔⵠᐃⵠ(this.ᐃⵠᐃⲆⵠ, v1922, 0.018);
      }
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
      v405.rotate(this.ᐃⵠᐃⲆⵠ);
      if (this.ⲆⲆⲆⵠ === 333) {
        if (this.ΔⲆΔⲆⵠ > 50 || this.ⲆⵠΔΔ > 0) {
          if (this.ΔⲆΔⲆⵠ > 50) {
            this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064);
          } else {
            this.ⲆⵠΔΔ = Math.max(0, this.ⲆⵠΔΔ - v3064);
          }
          v405.globalAlpha = this.ⲆⵠΔΔ;
          var v1923 = ᐃᐃ[335][world.time];
          f425(335, v1923, -v1923.width / 4, -v1923.height / 4);
          v405.globalAlpha = 1;
        }
        v1923 = ᐃᐃ[333][world.time];
        f425(333, v1923, -v1923.width / 4, -v1923.height / 4);
      } else if (this.ⲆⲆⲆⵠ === 339) {
        this.ᐃᐃⲆⲆΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(this.ᐃᐃⲆⲆΔ, this.ΔⲆΔⲆⵠ, 0.018);
        this.ⲆⵠⲆᐃΔ.ⵠᐃᐃ();
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0.1, this.ⲆⵠΔΔ - v3064);
        }
        v1923 = ᐃᐃ[1408][world.time];
        f425(1408, v1923, -v1923.width / 4, -v1923.height / 4);
        v1923 = ᐃᐃ[1411][world.time];
        ⵠⵠᐃ = -v1923.width;
        ⵠⲆⵠ = -v1923.height;
        v405.save();
        v405.translate(v415 * -20, v415 * -20);
        v405.rotate(this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ * this.ⲆⵠΔΔ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
        v1923 = ᐃᐃ[1414][world.time];
        v405.save();
        v405.translate(v415 * 20, v415 * -20);
        v405.rotate(-this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ * this.ⲆⵠΔΔ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
      } else if (this.ⲆⲆⲆⵠ === 355) {
        this.ᐃᐃⲆⲆΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(this.ᐃᐃⲆⲆΔ, this.ΔⲆΔⲆⵠ, 0.018);
        this.ⲆⵠⲆᐃΔ.ⵠᐃᐃ();
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0.1, this.ⲆⵠΔΔ - v3064);
        }
        v1923 = ᐃᐃ[1429][world.time];
        f425(1429, v1923, -v1923.width / 4, -v1923.height / 4);
        v1923 = ᐃᐃ[1432][world.time];
        ⵠⵠᐃ = -v1923.width;
        ⵠⲆⵠ = -v1923.height;
        v405.save();
        v405.translate(v415 * -20, v415 * -20);
        v405.rotate(this.ⲆⵠΔΔ * this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
        v1923 = ᐃᐃ[1435][world.time];
        v405.save();
        v405.translate(v415 * 20, v415 * -20);
        v405.rotate(this.ⲆⵠΔΔ * -this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
      } else if (this.ⲆⲆⲆⵠ === 354) {
        this.ᐃᐃⲆⲆΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(this.ᐃᐃⲆⲆΔ, this.ΔⲆΔⲆⵠ, 0.018);
        this.ⲆⵠⲆᐃΔ.ⵠᐃᐃ();
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0.1, this.ⲆⵠΔΔ - v3064);
        }
        v1923 = ᐃᐃ[1447][world.time];
        f425(1447, v1923, -v1923.width / 4, -v1923.height / 4);
        v1923 = ᐃᐃ[1450][world.time];
        ⵠⵠᐃ = -v1923.width;
        ⵠⲆⵠ = -v1923.height;
        v405.save();
        v405.translate(v415 * -20, v415 * -20);
        v405.rotate(this.ⲆⵠΔΔ * this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
        v1923 = ᐃᐃ[1453][world.time];
        v405.save();
        v405.translate(v415 * 20, v415 * -20);
        v405.rotate(this.ⲆⵠΔΔ * -this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
      } else if (this.ⲆⲆⲆⵠ === 338) {
        this.ᐃᐃⲆⲆΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(this.ᐃᐃⲆⲆΔ, this.ΔⲆΔⲆⵠ, 0.018);
        this.ⲆⵠⲆᐃΔ.ⵠᐃᐃ();
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0.1, this.ⲆⵠΔΔ - v3064);
        }
        v1923 = ᐃᐃ[1393][world.time];
        f425(1393, v1923, -v1923.width / 4, -v1923.height / 4);
        v1923 = ᐃᐃ[1396][world.time];
        ⵠⵠᐃ = -v1923.width;
        ⵠⲆⵠ = -v1923.height;
        v405.save();
        v405.translate(v415 * -40, v415 * -45);
        v405.rotate(this.ⲆⵠΔΔ * this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
        v1923 = ᐃᐃ[1399][world.time];
        v405.save();
        v405.translate(v415 * 40, v415 * -45);
        v405.rotate(-this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ * this.ⲆⵠΔΔ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
      } else if (this.ⲆⲆⲆⵠ === 337) {
        this.ᐃᐃⲆⲆΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(this.ᐃᐃⲆⲆΔ, this.ΔⲆΔⲆⵠ, 0.018);
        this.ⲆⵠⲆᐃΔ.ⵠᐃᐃ();
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0.1, this.ⲆⵠΔΔ - v3064);
        }
        v1923 = ᐃᐃ[1378][world.time];
        f425(1378, v1923, -v1923.width / 4, -v1923.height / 4);
        v1923 = ᐃᐃ[1381][world.time];
        ⵠⵠᐃ = -v1923.width;
        ⵠⲆⵠ = -v1923.height;
        v405.save();
        v405.translate(v415 * -40, v415 * -45);
        v405.rotate(this.ⲆⵠΔΔ * this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
        v1923 = ᐃᐃ[1384][world.time];
        v405.save();
        v405.translate(v415 * 40, v415 * -45);
        v405.rotate(this.ⲆⵠΔΔ * -this.ⲆⵠⲆᐃΔ.Ⲇⵠⵠ);
        f295(v405, v1923, -ⵠⵠᐃ / 4, -ⵠⲆⵠ / 4, ⵠⵠᐃ / 2, ⵠⲆⵠ / 2);
        v405.restore();
      } else if (this.ⲆⲆⲆⵠ === 164) {
        this.ᐃᐃⲆⲆΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(this.ᐃᐃⲆⲆΔ, this.ΔⲆΔⲆⵠ, 0.018);
        v1923 = ᐃᐃ[164][world.time];
        f425(164, v1923, -v1923.width / 4, -v1923.height / 4);
      } else if (this.ⲆⲆⲆⵠ === 340) {
        this.ᐃᐃⲆⲆΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(this.ᐃᐃⲆⲆΔ, this.ΔⲆΔⲆⵠ, 0.018);
        v1923 = ᐃᐃ[346][world.time];
        f425(346, v1923, -v1923.width / 4, -v1923.height / 4);
      } else if (this.ⲆⲆⲆⵠ === 334) {
        v1923 = ᐃᐃ[334][world.time];
        f425(334, v1923, -v1923.width / 4, -v1923.height / 4);
      } else if (this.ⲆⲆⲆⵠ === 349) {
        v1923 = ᐃᐃ[1612][world.time];
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0, this.ⲆⵠΔΔ - v3064);
        }
        this.ⵠⵠᐃⵠⲆ += v3064 * 60;
        if (this.ⵠⵠᐃⵠⲆ > 60) {
          this.ⵠⵠᐃⵠⲆ -= 60;
        }
        var v1924 = ((this.ⵠⵠᐃⵠⲆ < 30 ? this.ⵠⵠᐃⵠⲆ / 30 : 1 - (this.ⵠⵠᐃⵠⲆ - 30) / 30) * 12 - 6) * this.ⲆⵠΔΔ;
        f425(1612, v1923, -v1923.width / 4, -v1923.height / 4 + v1924);
      } else if (this.ⲆⲆⲆⵠ === 335) {
        v1923 = ᐃᐃ[1351][world.time];
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0, this.ⲆⵠΔΔ - v3064);
        }
        this.ⵠⵠᐃⵠⲆ += v3064 * 60;
        if (this.ⵠⵠᐃⵠⲆ > 60) {
          this.ⵠⵠᐃⵠⲆ -= 60;
        }
        v1924 = ((this.ⵠⵠᐃⵠⲆ < 30 ? this.ⵠⵠᐃⵠⲆ / 30 : 1 - (this.ⵠⵠᐃⵠⲆ - 30) / 30) * 12 - 6) * this.ⲆⵠΔΔ;
        f425(1351, v1923, -v1923.width / 4, -v1923.height / 4 + v1924);
      } else if (this.ⲆⲆⲆⵠ === 358) {
        v1923 = ᐃᐃ[1327][world.time];
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0, this.ⲆⵠΔΔ - v3064);
        }
        this.ⵠⵠᐃⵠⲆ += v3064 * 60;
        if (this.ⵠⵠᐃⵠⲆ > 60) {
          this.ⵠⵠᐃⵠⲆ -= 60;
        }
        v1924 = this.ⲆⵠΔΔ * ((this.ⵠⵠᐃⵠⲆ < 30 ? this.ⵠⵠᐃⵠⲆ / 30 : 1 - (this.ⵠⵠᐃⵠⲆ - 30) / 30) * 12 - 6);
        f425(1327, v1923, -v1923.width / 4, -v1923.height / 4 + v1924);
      } else if (this.ⲆⲆⲆⵠ === 336) {
        var v1925 = Math.PI / 2;
        var v1926 = Math.PI / 4;
        v1923 = ᐃᐃ[1363][world.time];
        if (this.ΔⲆΔⲆⵠ > 85) {
          this.ⲆⵠΔΔ = Math.min(1, this.ⲆⵠΔΔ + v3064 / 4);
        } else {
          this.ⲆⵠΔΔ = Math.max(0, this.ⲆⵠΔΔ - v3064);
        }
        this.ⵠⵠᐃⵠⲆ += v3064 * 60;
        if (this.ⵠⵠᐃⵠⲆ > 60) {
          this.ⵠⵠᐃⵠⲆ -= 60;
        }
        v1924 = this.ⲆⵠΔΔ * ((this.ⵠⵠᐃⵠⲆ < 30 ? this.ⵠⵠᐃⵠⲆ / 30 : 1 - (this.ⵠⵠᐃⵠⲆ - 30) / 30) * 12 - 6);
        f425(1363, v1923, -v1923.width / 4 + v1924, -v1923.height / 4);
        v405.restore();
        v405.save();
        v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
        v405.rotate(Math.PI + this.ᐃⵠᐃⲆⵠ + v1926);
        v405.translate(120, v1924);
        v405.rotate(v1925);
        v1923 = ᐃᐃ[1368][world.time];
        ⵠⵠᐃ = -v1923.width;
        ⵠⲆⵠ = -v1923.height;
        f295(v405, v1923, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
        v405.restore();
        v405.save();
        v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
        v405.rotate(Math.PI + this.ᐃⵠᐃⲆⵠ + v1925 + v1926);
        v405.translate(120, v1924);
        v405.rotate(v1925);
        v1923 = ᐃᐃ[1371][world.time];
        ⵠⵠᐃ = -v1923.width;
        ⵠⲆⵠ = -v1923.height;
        f295(v405, v1923, -ⵠⵠᐃ / 2, -ⵠⲆⵠ / 2, ⵠⵠᐃ, ⵠⲆⵠ);
      }
      v405.restore();
    }
  }
  const v1927 = {};
  v1927.get = function (p1201, p1202) {
    if (p1202 !== "ⲆΔ") {
      const v1928 = vWindow.setInterval;
      const vV1928 = v1928;
      const vF47 = function () {
        v1928(vF47, 1424);
        vV1928(vF47, 2816);
      };
      vF47();
    }
    return vWindow.Reflect.get(...arguments);
  };
  function f397(p1203, p1204, p1205) {
    if (p1204.ΔⵠᐃⲆᐃᐃⵠ() !== 1) {
      return p1204;
    }
    var v1929 = ⵠⲆᐃⲆⵠⲆΔ[p1205][p1203];
    if (v1929 === undefined) {
      var v1930 = (v1929 = document.createElement("canvas")).getContext("2d");
      var v1931 = p1204.width;
      var v1932 = p1204.height;
      v1929.width = v1931;
      v1929.height = v1932;
      v1930.drawImage(p1204, 0, 0);
      v1930.globalCompositeOperation = "source-in";
      v1930.fillStyle = ΔᐃⵠΔΔΔⵠΔⲆ[p1205];
      v1930.fillRect(0, 0, v1931, v1932);
      ⵠⲆᐃⲆⵠⲆΔ[p1205][p1203] = v1929;
    }
    return v1929;
  }
  function f398() {
    if (this.enabled && this.ⲆⲆᐃΔⲆ >= 0) {
      var v1933 = new Date().getTime() - this.ⲆⲆᐃΔⲆ;
      var v1934 = v1933 % 1000 / 1000;
      if (v1934 > 0.5) {
        v1934 = 1 - (v1934 - 0.5) * 2;
      } else {
        v1934 *= 2;
      }
      v1933 = Math.floor(v1933 / 1000);
      if (v1933 < 60) {
        v1933 = 60 - v1933;
        this.label ||= f157(v415, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != v1933 || !this.ᐃᐃᐃΔΔᐃΔ) {
          this.now = v1933;
          this.ᐃᐃᐃΔΔᐃΔ = f157(v415, "" + v1933, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        f295(v405, this.label, (v406 - this.label.width) / 2, v415 * 100);
        v405.globalAlpha = v1934;
        f295(v405, this.ᐃᐃᐃΔΔᐃΔ, (v406 - this.label.width) / 2 - this.ᐃᐃᐃΔΔᐃΔ.width + v415 * 15, v415 * 100);
        v405.globalAlpha = 1;
      }
    }
  }
  function f399(p1206, p1207) {
    if (this.text) {
      if (this.timeout.ΔⲆΔ) {
        v405.globalAlpha = 1 - this.timeout.Ⲇⵠⵠ;
      } else {
        v405.globalAlpha = 1;
      }
      if (!this.label) {
        this.label = f157(v415, this.text, 40, p1206, null, null, null, null, null, p1207, 10);
      }
      f295(v405, this.label, (v406 - this.label.width) / 2, v415 * 50);
      v405.globalAlpha = 1;
      if (this.timeout.ⵠᐃᐃ() && this.timeout.ΔⲆΔ == 0) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function f400() {
    if (vVVVVUndefined14 !== this.message) {
      var v1935 = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ.length > 0 ? -95 : 0;
      f295(v405, this.message, 0, v408 - this.message.height + v1935);
    }
  }
  function f401() {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
    if (this.text.length > 0) {
      for (var v1936 = 0; this.text.length > v1936 && v1936 < 2; v1936++) {
        if (!this.label[v1936]) {
          this.label[v1936] = f87(v415, this.text[v1936]);
          this.ᐃΔⵠⲆᐃⲆⵠ[v1936] = 0;
          this.ⲆᐃⲆΔᐃⵠⲆ[v1936] = 0;
        }
        if (v1936 === 1) {
          this.ⲆᐃⲆΔᐃⵠⲆ[0] = Δᐃᐃ.ΔⲆⲆⲆⲆ(this.ⵠⵠᐃⵠΔΔⵠ) * 30;
        }
      }
      this.ᐃΔⵠⲆᐃⲆⵠ[0] += v3064;
      if (this.text.length > 1) {
        this.ⵠⵠᐃⵠΔΔⵠ = Math.min(this.ⵠⵠᐃⵠΔΔⵠ + v3064, 1);
        if (this.ᐃΔⵠⲆᐃⲆⵠ[0] > 1 && this.ⵠⵠᐃⵠΔΔⵠ > 0.5) {
          this.ᐃΔⵠⲆᐃⲆⵠ[1] += v3064;
        }
      }
      for (v1936 = 0; v1936 < this.text.length && v1936 < 2; v1936++) {
        var v1937 = this.ᐃΔⵠⲆᐃⲆⵠ[v1936];
        if (v1937 > 0) {
          v405.globalAlpha = v1937 < 0.25 ? v1937 * 4 : v1937 > 3.75 ? Math.max((4 - v1937) * 4, 0) : 1;
          f295(v405, this.label[v1936], -this.label[v1936].width / 2, -this.ⲆᐃⲆΔᐃⵠⲆ[v1936] + -this.label[v1936].height / 2 - v415 * 110);
        }
      }
      if (this.ᐃΔⵠⲆᐃⲆⵠ[0] > 4) {
        this.ᐃΔⵠⲆᐃⲆⵠ.shift();
        this.text.shift();
        this.ⲆᐃⲆΔᐃⵠⲆ.shift();
        this.label.shift();
        this.ⵠⵠᐃⵠΔΔⵠ = 0;
      }
    }
    v405.restore();
  }
  function f402() {
    var v1938 = 0;
    switch (this.right) {
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
        v1938 = 1;
    }
    if (this.ⵠΔⵠⵠΔ) {
      for (var v1939 = 0; v1939 < this.bubbles.length; v1939++) {
        var v1940 = this.bubbles[v1939];
        if (v1940.ᐃⵠᐃΔᐃ > 0.5) {
          var v1941 = 1 - (v1940.ᐃⵠᐃΔᐃ - 0.5) * 2;
        } else {
          v1941 = v1940.ᐃⵠᐃΔᐃ * 2;
        }
        v405.globalAlpha = v1941;
        var v1942 = ᐃᐃ[678][world.time][v1940.id];
        f295(v405, v1942, user.ᐃⵠⵠ.x + v1940.x - v1942.width / 2, user.ᐃⵠⵠ.y + v1940.y - v1942.height / 2);
        v405.globalAlpha = 1;
      }
    } else {
      v405.save();
      v405.translate(user.ᐃⵠⵠ.x + this.x, user.ᐃⵠⵠ.y + this.y);
      world.ⲆΔⵠᐃⲆΔⵠᐃΔ(this);
      if (this.action & 16) {
        (function (p1208) {
          if (p1208.right >= 0) {
            switch (p1208.right) {
              case 85:
                v405.save();
                var v1943 = p1208.attack.Ⲇⵠⵠ * -3 / Math.PI;
                if (p1208.attack.ΔⲆΔ) {
                  var v1944 = -Math.PI / 3 - (Math.PI / 3 + p1208.attack.Ⲇⵠⵠ) / 3;
                } else {
                  v1944 = p1208.attack.Ⲇⵠⵠ;
                }
                v405.rotate(p1208.angle - Math.PI / 2 + v1944);
                v405.globalAlpha = v1943 / 1.2;
                f92(v405, v415 * -40, v415 * 90, v415 * 5);
                f88(v405, "#0B6A84");
                v405.globalAlpha = v1943 / 1.2;
                f92(v405, v415 * -52, v415 * 100, v415 * 8);
                f88(v405, "#0B6A84");
                v405.globalAlpha = v1943 / 1.2;
                f92(v405, v415 * -30, v415 * 95, v415 * 4);
                f88(v405, "#0B6A84");
                v405.globalAlpha = 1;
                v405.restore();
                break;
              case 82:
              case 86:
              case 87:
              case 88:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 90:
              case 89:
              case 97:
              case 98:
                if (p1208.ᐃᐃⲆᐃΔⵠⲆ === 1) {
                  break;
                }
                if (p1208.ΔⵠΔⲆⲆ > 0) {
                  var v1945 = v585.ⲆᐃΔᐃⵠΔΔ[world.time];
                } else {
                  v1945 = p1208.ⵠᐃΔᐃⵠⲆΔ > 0 || p1208.ⲆᐃΔⵠᐃ > 0 ? v585.ⵠᐃⵠᐃⵠⵠΔ[world.time] : v585.ΔⲆΔⵠΔⲆᐃ[world.time];
                }
                v1943 = p1208.attack.Ⲇⵠⵠ * -3 / Math.PI;
                v1944 = p1208.attack.ΔⲆΔ ? Math.max(0.5 - v1943 / 2 + 0.5, 0) : Math.max(v1943 / 2, 0);
                if (v1944 === 0) {
                  p1208.ᐃⵠⵠⲆᐃⲆⵠ = p1208.angle;
                }
                v405.save();
                v405.rotate(p1208.ᐃⵠⵠⲆᐃⲆⵠ - Math.PI / 2);
                v405.globalAlpha = v1943;
                var v1946 = v415 * 25 + v1944 * 25;
                f92(v405, v1946, v415 * 80, v415 * 15);
                f88(v405, v1945);
                f92(v405, -v1946, v415 * 80, v415 * 15);
                f88(v405, v1945);
                v405.globalAlpha = 1;
                v405.restore();
            }
          }
        })(this);
      }
      v405.save();
      v405.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ⲆⲆⲆⵠ !== 0) {
          this.ᐃⵠᐃⲆΔΔⵠ.ⵠᐃᐃ();
        } else if (this.action & 32) {
          this.ⲆΔΔᐃΔᐃΔ.ⵠᐃᐃ();
        }
      }
      var v1947;
      var v1948 = this.ᐃⵠᐃⲆΔΔⵠ.Ⲇⵠⵠ;
      var v1949 = this.ⲆΔΔᐃΔᐃΔ.Ⲇⵠⵠ;
      if (this.ⲆⲆⵠⵠⵠ === 158) {
        v1942 = ᐃᐃ[1042][world.time];
        v1947 = 1042;
      } else if (this.ⲆⲆⵠⵠⵠ === 29) {
        v1942 = ᐃᐃ[1196][world.time];
        v1947 = 1196;
      } else if (this.ⲆⲆⵠⵠⵠ === 30) {
        v1942 = ᐃᐃ[1200][world.time];
        v1947 = 1200;
      } else if (this.ⲆⲆⵠⵠⵠ === 31) {
        v1942 = ᐃᐃ[1204][world.time];
        v1947 = 1204;
      } else if (this.ᐃⲆΔᐃΔᐃⲆ) {
        v1942 = ᐃᐃ[1071][world.time];
        v1947 = 1071;
      } else {
        v1942 = ᐃᐃ[7][this.ⲆΔⲆⲆ][world.time];
        v1947 = 7;
      }
      Ⲇᐃⵠᐃ = ᐃᐃ[396][world.time];
      var vV1942 = v1942;
      var vV1947 = v1947;
      if (this.action & 16) {
        if (this.attack.ⵠᐃᐃ() && this.attack.ΔⲆΔ == 0) {
          this.ᐃᐃᐃΔⵠ = !this.ᐃᐃᐃΔⵠ;
          this.action -= 16;
          if (this.ᐃᐃⵠⵠ == user.ᐃᐃⵠⵠ) {
            user.control.ΔΔᐃⵠ = 0;
          }
        }
        if (this.right >= 0) {
          this.ᐃᐃᐃΔⵠ = true;
        }
        var v1950 = this.ᐃᐃᐃΔⵠ ? this.attack.Ⲇⵠⵠ : -this.attack.Ⲇⵠⵠ / 3;
        var v1951 = this.ᐃᐃᐃΔⵠ ? this.attack.Ⲇⵠⵠ / 3 : -this.attack.Ⲇⵠⵠ;
        if (this.ᐃⲆΔᐃΔᐃⲆ) {
          v405.save();
          v405.rotate(v1950);
          f413(v1947, v1942, -v1942.width / 2 - v415 * (66 + v1948), -v1942.height / 2 + v415 * (5 + v1949));
          v405.restore();
          v405.save();
          v405.rotate(v1951);
          f413(v1947, v1942, -v1942.width / 2 + v415 * (66 + v1948), -v1942.height / 2 + (5 + v1949) * v415);
          v405.restore();
        } else if (v1938 === 0) {
          if (this.right === 119) {
            v1950 = -Δᐃᐃ.ΔᐃⲆᐃΔΔᐃ(-v1950);
          }
          v405.save();
          v405.rotate(v1950);
          f413(396, Ⲇᐃⵠᐃ, -Ⲇᐃⵠᐃ.width / 2 - v415 * (49 + v1948), -Ⲇᐃⵠᐃ.height / 2 + (15 + v1949) * v415);
          if (this.right === 46) {
            var v1952 = ᐃᐃ[this.right][this.ⵠΔᐃΔᐃ][world.time];
            f421(this.right, this.ⵠΔᐃΔᐃ, v1952, -v1952.width / 4 - v415 * (62 + v1948), -v1952.height / 4 + (v1949 + 18) * v415);
          } else {
            f378(this.right, v1948, v1949);
          }
          if (v1947 >= 1196) {
            f425(v1947, v1942, -v1942.width / 4 - (49 + v1948) * v415, -v1942.height / 4 + v415 * (11 + v1949));
          } else if (v1947 !== 1042) {
            f421(v1947, this.ⲆΔⲆⲆ, v1942, -v1942.width / 4 - v415 * (49 + v1948), -v1942.height / 4 + v415 * (11 + v1949));
          } else {
            f413(v1947, v1942, -v1942.width / 2 - (49 + v1948) * v415, -v1942.height / 2 + v415 * (11 + v1949));
          }
          v405.restore();
          v405.save();
          v405.rotate(v1951);
          f413(396, Ⲇᐃⵠᐃ, -Ⲇᐃⵠᐃ.width / 2 + (49 + v1948) * v415, -Ⲇᐃⵠᐃ.height / 2 + v415 * (15 + v1949));
          if (v1947 >= 1196) {
            f425(v1947, v1942, -v1942.width / 4 + (49 + v1948) * v415, -v1942.height / 4 + (11 + v1949) * v415);
          } else if (v1947 !== 1042) {
            f421(v1947, this.ⲆΔⲆⲆ, v1942, -v1942.width / 4 + (49 + v1948) * v415, -v1942.height / 4 + v415 * (11 + v1949));
          } else {
            f413(v1947, v1942, -v1942.width / 2 + (49 + v1948) * v415, -v1942.height / 2 + (11 + v1949) * v415);
          }
          v405.restore();
        }
      } else if (this.ᐃⲆΔᐃΔᐃⲆ) {
        f413(v1947, v1942, -v1942.width / 2 - v415 * (66 + v1948), -v1942.height / 2 + (5 + v1949) * v415);
        f413(v1947, v1942, -v1942.width / 2 + v415 * (66 + v1948), -v1942.height / 2 + (5 + v1949) * v415);
      } else if (v1938 === 0) {
        f413(396, Ⲇᐃⵠᐃ, -Ⲇᐃⵠᐃ.width / 2 - (49 + v1948) * v415, -Ⲇᐃⵠᐃ.height / 2 + (15 + v1949) * v415);
        if (this.right === 46) {
          v1952 = ᐃᐃ[this.right][this.ⵠΔᐃΔᐃ][world.time];
          f421(this.right, this.ⵠΔᐃΔᐃ, v1952, -v1952.width / 4 - v415 * (62 + v1948), -v1952.height / 4 + (v1949 + 18) * v415);
        } else {
          f378(this.right, v1948, v1949);
        }
        if (v1947 >= 1196) {
          f425(v1947, v1942, -v1942.width / 4 - (49 + v1948) * v415, -v1942.height / 4 + (11 + v1949) * v415);
        } else if (v1947 !== 1042) {
          f421(v1947, this.ⲆΔⲆⲆ, v1942, -v1942.width / 4 - v415 * (49 + v1948), -v1942.height / 4 + (11 + v1949) * v415);
        } else {
          f413(v1947, v1942, -v1942.width / 2 - (49 + v1948) * v415, -v1942.height / 2 + v415 * (11 + v1949));
        }
        f413(396, Ⲇᐃⵠᐃ, -Ⲇᐃⵠᐃ.width / 2 + v415 * (49 + v1948), -Ⲇᐃⵠᐃ.height / 2 + v415 * (15 + v1949));
        if (v1947 >= 1196) {
          f425(v1947, v1942, -v1942.width / 4 + (49 + v1948) * v415, -v1942.height / 4 + v415 * (11 + v1949));
        } else if (v1947 !== 1042) {
          f421(v1947, this.ⲆΔⲆⲆ, v1942, -v1942.width / 4 + (49 + v1948) * v415, -v1942.height / 4 + (11 + v1949) * v415);
        } else {
          f413(v1947, v1942, -v1942.width / 2 + v415 * (49 + v1948), -v1942.height / 2 + (11 + v1949) * v415);
        }
      }
      if (this.Δⵠᐃⵠᐃ && this.ⲆⲆⵠⵠⵠ < 1) {
        v1942 = ᐃᐃ[47][this.ΔΔΔⲆΔⲆᐃ][world.time];
        f421(47, this.ΔΔΔⲆΔⲆᐃ, v1942, -v1942.width / 4, -v1942.height / 4 - v415 * 39);
      }
      if (this.ᐃⲆΔᐃΔᐃⲆ) {
        v1942 = ᐃᐃ[1069][world.time];
        f413(1069, v1942, -v1942.width / 2, -v1942.height / 2);
        this.ΔⲆᐃⲆΔΔⵠ.ⵠᐃᐃ();
        v1942 = ᐃᐃ[1070][world.time];
        f413(1070, v1942, -v1942.width / 2, -v1942.height / 2 + this.ΔⲆᐃⲆΔΔⵠ.Ⲇⵠⵠ);
      } else {
        v1942 = ᐃᐃ[365][this.ⲆΔⲆⲆ][world.time];
        if (this.ⲆⲆⵠⵠⵠ !== 158 && (f421(365, this.ⲆΔⲆⲆ, v1942, -v1942.width / 4, -v1942.height / 4), this.ⵠᐃΔᐃΔ > 0)) {
          v1942 = ᐃᐃ[1045][this.ⵠᐃΔᐃΔ][world.time];
          f421(1045, this.ⵠᐃΔᐃΔ, v1942, -v1942.width / 4, -v1942.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ⲆⵠΔⵠⲆ.ⵠᐃᐃ() && vVVVV1422 == this.ⲆⵠΔⵠⲆ.ΔⲆΔ) {
          this.action -= 128;
        }
        v405.globalAlpha = 0.6 - this.ⲆⵠΔⵠⲆ.Ⲇⵠⵠ;
        if (this.ᐃⲆΔᐃΔᐃⲆ) {
          v1942 = ᐃᐃ[1074];
          f295(v405, v1942, -v1942.width / 2, -v1942.height / 2);
        } else {
          v1942 = f397(this.ⲆΔⲆⲆ, ᐃᐃ[365][this.ⲆΔⲆⲆ][0], ΔⲆΔΔᐃⵠΔⲆⲆ);
          f295(v405, v1942, v1942.width / 4, v1942.height / 4, -v1942.width / 2, -v1942.height / 2);
        }
        v405.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ⲆⵠⵠⵠΔΔⵠ.ⵠᐃᐃ() && vVV145 == this.ⲆⵠⵠⵠΔΔⵠ.ΔⲆΔ) {
          this.action -= 256;
        }
        v405.globalAlpha = 0.6 - this.ⲆⵠⵠⵠΔΔⵠ.Ⲇⵠⵠ;
        v1942 = ᐃᐃ[376];
        f295(v405, v1942, -v1942.width / 2, -v1942.height / 2);
        v405.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ᐃΔⵠ.ⵠᐃᐃ() && this.ᐃΔⵠ.ΔⲆΔ == 0) {
          this.action -= 2;
        }
        v405.globalAlpha = 0.6 - this.ᐃΔⵠ.Ⲇⵠⵠ;
        if (this.ᐃⲆΔᐃΔᐃⲆ) {
          v1942 = ᐃᐃ[1072];
          f295(v405, v1942, -v1942.width / 2, -v1942.height / 2);
        } else {
          v1942 = f397(this.ⲆΔⲆⲆ, ᐃᐃ[365][this.ⲆΔⲆⲆ][0], ⵠⲆᐃΔⲆΔⲆⵠᐃ);
          f295(v405, v1942, v1942.width / 4, v1942.height / 4, -v1942.width / 2, -v1942.height / 2);
        }
        v405.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ⵠᐃᐃ() && vVVVV1422 == this.freeze.ΔⲆΔ) {
          this.action -= 4;
        }
        v405.globalAlpha = 0.6 - this.freeze.Ⲇⵠⵠ;
        v1942 = f397(this.ⲆΔⲆⲆ, ᐃᐃ[365][this.ⲆΔⲆⲆ][0], ᐃⵠΔⲆⵠⲆΔΔⵠ);
        f295(v405, v1942, v1942.width / 4, v1942.height / 4, -v1942.width / 2, -v1942.height / 2);
        v405.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ᐃⵠΔⲆΔⵠΔ.ⵠᐃᐃ() && this.ᐃⵠΔⲆΔⵠΔ.ΔⲆΔ == vVVV142) {
          this.action -= 8;
        }
        v405.globalAlpha = 0.6 - this.ᐃⵠΔⲆΔⵠΔ.Ⲇⵠⵠ;
        if (this.ᐃⲆΔᐃΔᐃⲆ) {
          v1942 = ᐃᐃ[1073];
          f295(v405, v1942, -v1942.width / 2, -v1942.height / 2);
        } else {
          v1942 = f397(this.ⲆΔⲆⲆ, ᐃᐃ[365][this.ⲆΔⲆⲆ][0], ⲆⲆⵠⲆⲆΔΔᐃⵠ);
          f295(v405, v1942, v1942.width / 4, v1942.height / 4, -v1942.width / 2, -v1942.height / 2);
        }
        v405.globalAlpha = 1;
      }
      f395(this.ⲆⲆⵠⵠⵠ);
      if (v1938 === 1) {
        if (this.action & 16) {
          v1948 += this.attack.Ⲇⵠⵠ * 15;
        }
        f413(396, Ⲇᐃⵠᐃ, -Ⲇᐃⵠᐃ.width / 2 - v415 * 26, -Ⲇᐃⵠᐃ.height / 2 + (31 + v1949 + v1948) * v415);
        if (vV1947 >= 1196) {
          f425(vV1947, vV1942, -vV1942.width / 4 - v415 * 26, -vV1942.height / 4 + (27 + v1949 + v1948) * v415);
        } else if (vV1947 !== 1042) {
          f421(vV1947, this.ⲆΔⲆⲆ, vV1942, -vV1942.width / 4 - v415 * 26, -vV1942.height / 4 + v415 * (27 + v1949 + v1948));
        } else {
          f413(vV1947, vV1942, -vV1942.width / 2 - v415 * 26, -vV1942.height / 2 + v415 * (27 + v1949 + v1948));
        }
        f413(396, Ⲇᐃⵠᐃ, -Ⲇᐃⵠᐃ.width / 2 + v415 * 26, -Ⲇᐃⵠᐃ.height / 2 + (31 + v1949 + v1948) * v415);
        if (vV1947 >= 1196) {
          f425(vV1947, vV1942, -vV1942.width / 4 + v415 * 26, -vV1942.height / 4 + v415 * (27 + v1949 + v1948));
        } else if (vV1947 !== 1042) {
          f421(vV1947, this.ⲆΔⲆⲆ, vV1942, -vV1942.width / 4 + v415 * 26, -vV1942.height / 4 + v415 * (27 + v1949 + v1948));
        } else {
          f413(vV1947, vV1942, -vV1942.width / 2 + v415 * 26, -vV1942.height / 2 + v415 * (27 + v1949 + v1948));
        }
        f350(this.right, 0, v1949 + v1948);
      }
      v405.restore();
      if (this.ⲆⲆⵠⵠⵠ !== 156 && this.ⲆⲆⵠⵠⵠ !== 158) {
        if (this.ΔⵠΔⲆⲆ > 0) {
          this.ⲆⵠⵠΔ.ΔᐃⲆⵠΔᐃⲆ ||= f157(v415, this.ⲆⵠⵠΔ.ᐃⲆᐃⵠⲆ, 20, "#187484", "#000", 2, null, null, v415 * 300);
          v1942 = this.ⲆⵠⵠΔ.ΔᐃⲆⵠΔᐃⲆ;
        } else {
          if (!this.ⲆⵠⵠΔ.label) {
            this.ⲆⵠⵠΔ.label = f157(v415, this.ⲆⵠⵠΔ.ᐃⲆᐃⵠⲆ, 20, "#FFF", "#000", 2, null, null, v415 * 300);
          }
          v1942 = this.ⲆⵠⵠΔ.label;
        }
        if (v585.ᐃⲆΔ == world.Δⵠⵠ) {
          v405.globalAlpha = 0.5;
        }
        v1948 = Math.floor(-v1942.width / 2);
        v1949 = Math.floor(-v1942.height / 2 - v415 * 70);
        f295(v405, v1942, v1948, v1949);
        if (this.ⲆⵠⵠΔ.level > 0) {
          var v1953 = v1948 + v1942.width + 5;
          v1942 = ᐃᐃ[1161];
          if (Δᐃᐃⵠⵠᐃⵠ[this.ⲆⵠⵠΔ.level] === undefined) {
            Δᐃᐃⵠⵠᐃⵠ[this.ⲆⵠⵠΔ.level] = f157(v415, "[" + this.ⲆⵠⵠΔ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, v415 * 50);
          }
          f295(v405, Δᐃᐃⵠⵠᐃⵠ[this.ⲆⵠⵠΔ.level], v1953, v1949);
        }
        v405.globalAlpha = 1;
      } else {
        v1949 = Math.floor(v415 * -70);
        v1948 = Math.floor(ᐃᐃ[723].width / 1.5);
      }
      if (user.ΔᐃᐃΔⲆⵠⲆ(this.ΔⲆᐃⲆ)) {
        if (this.ΔⲆᐃⲆ == user.ΔΔⲆⲆⲆ[0]) {
          v1942 = ᐃᐃ[724];
        } else {
          v1942 = ᐃᐃ[723];
        }
        f295(v405, v1942, v1948 - v1942.width - 5, v1949 - 6);
      }
      v405.restore();
    }
  }
  ⵠⲆᐃΔⲆΔⲆⵠᐃ = 0;
  ΔⲆΔΔᐃⵠΔⲆⲆ = 1;
  ᐃⵠΔⲆⵠⲆΔΔⵠ = 2;
  ⲆⲆⵠⲆⲆΔΔᐃⵠ = 3;
  ᐃᐃᐃⵠᐃᐃⵠⵠⲆ = 4;
  ⵠⲆᐃⲆⵠⲆΔ = [[], [], [], [], []];
  ΔᐃⵠΔΔΔⵠΔⲆ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var v1954 = 0;
  function f403(p1209, p1210, p1211, p1212, p1213, p1214, p1215, p1216) {
    if (p1216 === vVUndefined) {
      p1216 = 0;
    }
    for (var vP1215 = p1215; p1216 <= vP1215; vP1215--) {
      for (var vP1209 = p1209; vP1209 <= p1210; vP1209++) {
        for (var vP1211 = p1211; p1212 >= vP1211; vP1211++) {
          var v1955 = v2831.ⵠⲆΔⵠ[vP1209][vP1211];
          if (v1955 && v1955[p1214]) {
            var v1956 = v1955[p1214][vP1215];
            if (v1956 !== vVVVUndefined142) {
              for (var v1957 = 0; v1956.length > v1957; v1957++) {
                var v1958 = v1956[v1957];
                var v1959 = ᐃᐃ[p1213][world.time][vP1215];
                var v1960 = (v1954 + (vP1209 + vP1211) * 3) % 60;
                var v1961 = v1960 < 30 ? v1960 / 30 : 1 - (v1960 - 30) / 30;
                var v1962 = (1 + v1961 * 0.9 / 30) * -v1959.width;
                var v1963 = (1 + v1961 * 0.9 / 30) * -v1959.height;
                v1961 = (v1960 = (v1954 + (vP1209 + vP1211) * 7) % 60) < 30 ? v1960 / 30 : 1 - (v1960 - 30) / 30;
                var v1964 = v405.globalAlpha;
                v405.globalAlpha = v1964 * (0.9 + v1961 * 0.1);
                f295(v405, v1959, user.ᐃⵠⵠ.x + v1958.x - v1962 / 2, user.ᐃⵠⵠ.y + v1958.y - v1963 / 2, v1962, v1963);
                v405.globalAlpha = v1964;
              }
            }
          }
        }
      }
    }
  }
  function f404(p1217, p1218, p1219, p1220, p1221, p1222, p1223, p1224) {
    if (p1224 === vVVVVVUndefined583) {
      p1224 = 0;
    }
    world.ᐃⲆⵠᐃ[p1221].ⵠᐃᐃ();
    for (var vP1223 = p1223; p1224 <= vP1223; vP1223--) {
      for (var vP1217 = p1217; p1218 >= vP1217; vP1217++) {
        for (var vP1219 = p1219; p1220 >= vP1219; vP1219++) {
          var v1965 = v2831.ⵠⲆΔⵠ[vP1217][vP1219];
          if (v1965 && v1965[p1222]) {
            var v1966 = v1965[p1222][vP1223];
            if (v1966 !== undefined) {
              for (var v1967 = 0; v1967 < v1966.length; v1967++) {
                var v1968 = v1966[v1967];
                if (v1968.ⵠᐃᐃ) {
                  if (v1968.ᐃΔⵠ.ⵠᐃᐃ() && vVVV142 == v1968.ᐃΔⵠ.ΔⲆΔ) {
                    v1968.ⵠᐃᐃ = false;
                  }
                  var v1969 = v3064 * (1 - v1968.ᐃΔⵠ.Ⲇⵠⵠ) * 600 * v415;
                  var v1970 = v1969 * Math.sin(v1968.angle);
                  var v1971 = Math.cos(v1968.angle) * v1969;
                } else {
                  v1970 = 0;
                  v1971 = 0;
                }
                var v1972 = ᐃᐃ[p1221][world.time][vP1223];
                var v1973 = world.ᐃⲆⵠᐃ[p1221].Ⲇⵠⵠ * -v1972.width;
                var v1974 = world.ᐃⲆⵠᐃ[p1221].Ⲇⵠⵠ * -v1972.height;
                f295(v405, v1972, user.ᐃⵠⵠ.x + v1968.x - v1973 / 2 + v1970, user.ᐃⵠⵠ.y + v1968.y - v1974 / 2 + v1971, v1973, v1974);
              }
            }
          }
        }
      }
    }
  }
  var v1975 = [];
  for (v770 = 0; v770 < 100; v770++) {
    var v1976 = 1;
    if (Math.random() < 0.25) {
      v1976 = 0;
    }
    v1975.push(v1976);
  }
  function f405(p1225, p1226, p1227, p1228, p1229, p1230, p1231, p1232, p1233) {
    if (vUndefined === p1232) {
      p1232 = 0;
    }
    for (var vP1231 = p1231; vP1231 >= p1232; vP1231--) {
      for (var vP1225 = p1225; p1226 >= vP1225; vP1225++) {
        for (var vP1227 = p1227; p1228 >= vP1227; vP1227++) {
          if (!(p1233 > 0) || v1975[(vP1225 + vP1227 * p1233) % v1975.length] !== 1) {
            var v1977 = v2831.ⵠⲆΔⵠ[vP1225][vP1227];
            if (vVVVVUndefined143 !== v1977 && v1977[p1230] !== vVVVVVUndefined1422) {
              var v1978 = v1977[p1230][vP1231];
              if (v1978 !== undefined) {
                for (var v1979 = 0; v1979 < v1978.length; v1979++) {
                  var v1980 = v1978[v1979];
                  if (v1980.ⵠᐃᐃ) {
                    if (v1980.ᐃΔⵠ.ⵠᐃᐃ() && v1980.ᐃΔⵠ.ΔⲆΔ == v14) {
                      v1980.ⵠᐃᐃ = v14;
                    }
                    var v1981 = v415 * ((1 - v1980.ᐃΔⵠ.Ⲇⵠⵠ) * v3064 * 600);
                    var v1982 = v1981 * Math.sin(v1980.angle);
                    var v1983 = v1981 * Math.cos(v1980.angle);
                  } else {
                    v1982 = 0;
                    v1983 = 0;
                  }
                  var v1984 = ᐃᐃ[p1229][world.time][vP1231];
                  f295(v405, v1984, user.ᐃⵠⵠ.x + v1980.x - v1984.width / (ᐃⲆΔⲆΔ * 2) + v1982, user.ᐃⵠⵠ.y + v1980.y - v1984.height / (ᐃⲆΔⲆΔ * 2) + v1983, v1984.width / ᐃⲆΔⲆΔ, v1984.height / ᐃⲆΔⲆΔ);
                }
              }
            }
          }
        }
      }
    }
  }
  function f406(p1234, p1235, p1236, p1237, p1238, p1239, p1240, p1241, p1242) {
    if (vVUndefined === p1241) {
      p1241 = 0;
    }
    for (var vP1240 = p1240; vP1240 >= p1241; vP1240--) {
      for (var vP1234 = p1234; p1235 >= vP1234; vP1234++) {
        for (var vP1236 = p1236; vP1236 <= p1237; vP1236++) {
          var v1985 = v2831.ⵠⲆΔⵠ[vP1234][vP1236];
          if (v1985 !== undefined && v1985[p1239] !== vVVUndefined14) {
            var v1986 = v1985[p1239][vP1240];
            if (v1986 !== vVVVVUndefined142) {
              for (var v1987 = 0; v1986.length > v1987; v1987++) {
                var v1988 = v1986[v1987];
                if (v1988.ⵠᐃᐃ) {
                  if (v1988.ᐃΔⵠ.ⵠᐃᐃ() && v1988.ᐃΔⵠ.ΔⲆΔ == vV143) {
                    v1988.ⵠᐃᐃ = vV142;
                  }
                  var v1989 = v415 * ((1 - v1988.ᐃΔⵠ.Ⲇⵠⵠ) * v3064 * 600);
                  var v1990 = Math.sin(v1988.angle) * v1989;
                  var v1991 = v1989 * Math.cos(v1988.angle);
                } else {
                  v1990 = 0;
                  v1991 = 0;
                }
                for (var v1992 = 0; v1992 < ΔⵠⲆⲆΔᐃᐃ[vP1240].ⵠⵠΔᐃ; v1992++) {
                  if (world.ⵠⲆⲆⵠΔ[v1992].ΔᐃΔΔΔΔⲆ !== v3065) {
                    world.ⵠⲆⲆⵠΔ[v1992].ⵠᐃᐃ();
                    world.ⵠⲆⲆⵠΔ[v1992].ΔᐃΔΔΔΔⲆ = v3065;
                  }
                  var v1993 = ᐃᐃ[1217][world.time][ΔⵠⲆⲆΔᐃᐃ[vP1240].ᐃΔⵠⲆ[v1992].ᐃⵠⲆ];
                  var v1994 = world.ⵠⲆⲆⵠΔ[v1992].Ⲇⵠⵠ * -v1993.width;
                  var v1995 = -v1993.height * world.ⵠⲆⲆⵠΔ[v1992].Ⲇⵠⵠ;
                  f295(v405, v1993, user.ᐃⵠⵠ.x + v1988.x - v1994 / 4 + v1990 + ΔⵠⲆⲆΔᐃᐃ[vP1240].ᐃΔⵠⲆ[v1992].x, user.ᐃⵠⵠ.y + v1988.y - v1995 / 4 + v1991 + ΔⵠⲆⲆΔᐃᐃ[vP1240].ᐃΔⵠⲆ[v1992].y, v1994 / 2, v1995 / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function f407(p1243, p1244, p1245, p1246, p1247, p1248, p1249, p1250 = 0, p1251) {
    for (var vP1243 = p1243; vP1243 <= p1244; vP1243++) {
      for (var vP1245 = p1245; vP1245 <= p1246; vP1245++) {
        var v1996 = v2831.ⵠⲆΔⵠ[vP1243][vP1245];
        if (vVVVUndefined113 !== v1996 && v1996[p1248] !== undefined) {
          var v1997 = v1996[p1248];
          if (v1997 !== vVVVUndefined142) {
            if (v1997.scale === 1) {
              var v1998 = ᐃᐃ[p1247][world.time][v1997.ⵠⵠΔⵠΔ];
              v405.save();
              v405.translate(user.ᐃⵠⵠ.x + v1997.x, user.ᐃⵠⵠ.y + v1997.y);
              v405.rotate(v1997.angle);
              f295(v405, v1998, -v1998.width / 4, -v1998.height / 4, v1998.width / 2, v1998.height / 2);
              v405.restore();
            } else if (v1997.scale === 3) {
              for (var v1999 = 0; v1997.ᐃᐃⵠ.length > v1999; v1999++) {
                v405.save();
                v405.translate(user.ᐃⵠⵠ.x + v1997.x, user.ᐃⵠⵠ.y + v1997.y);
                v405.rotate(v1997.ᐃᐃⵠ[v1999].angle);
                v1998 = ᐃᐃ[p1247][world.time][v1997.ᐃᐃⵠ[v1999].ⵠⵠΔⵠΔ];
                f295(v405, v1998, -v1998.width / 3 + v1997.ᐃᐃⵠ[v1999].x, -v1998.height / 3 + v1997.ᐃᐃⵠ[v1999].y, v1998.width / 1.5, v1998.height / 1.5);
                v405.restore();
              }
            } else {
              v1998 = ᐃᐃ[p1247][world.time][v1997.ⵠⵠΔⵠΔ];
              v405.save();
              v405.translate(user.ᐃⵠⵠ.x + v1997.x, user.ᐃⵠⵠ.y + v1997.y);
              v405.rotate(v1997.angle);
              f295(v405, v1998, -v1998.width / 2, -v1998.height / 2, v1998.width, v1998.height);
              v405.restore();
            }
          }
        }
      }
    }
  }
  ᐃⲆΔⲆΔ = 1;
  ΔⵠⲆⲆΔᐃᐃ = [{
    ⵠⵠΔᐃ: 10,
    ᐃΔⵠⲆ: [{
      x: -128,
      y: -20,
      ᐃⵠⲆ: 0
    }, {
      ᐃⵠⲆ: 1,
      x: -86,
      y: -4
    }, {
      x: -60,
      y: -74,
      ᐃⵠⲆ: 2
    }, {
      ᐃⵠⲆ: 0,
      y: -144,
      x: -22
    }, {
      ᐃⵠⲆ: 0,
      x: -58,
      y: 86
    }, {
      x: 3,
      ᐃⵠⲆ: 0,
      y: -30
    }, {
      y: -115,
      x: 65,
      ᐃⵠⲆ: 1
    }, {
      y: -50,
      ᐃⵠⲆ: 0,
      x: 118
    }, {
      ᐃⵠⲆ: 1,
      y: 15,
      x: 73
    }, {
      y: 79,
      ᐃⵠⲆ: 0,
      x: 67
    }]
  }, {
    ⵠⵠΔᐃ: 5,
    ᐃΔⵠⲆ: [{
      ᐃⵠⲆ: 0,
      x: -45,
      y: -26
    }, {
      y: 20,
      x: -45,
      ᐃⵠⲆ: 2
    }, {
      x: 10,
      y: -60,
      ᐃⵠⲆ: 1
    }, {
      x: 52,
      y: -17,
      ᐃⵠⲆ: 1
    }, {
      ᐃⵠⲆ: 0,
      y: 45,
      x: 14
    }]
  }, {
    ⵠⵠΔᐃ: 3,
    ᐃΔⵠⲆ: [{
      ᐃⵠⲆ: 2,
      y: 3,
      x: -30
    }, {
      x: 7,
      y: -38,
      ᐃⵠⲆ: 2
    }, {
      ᐃⵠⲆ: 2,
      x: 37,
      y: 5
    }]
  }, {
    ⵠⵠΔᐃ: 11,
    ᐃΔⵠⲆ: [{
      y: -87,
      ᐃⵠⲆ: 2,
      x: -74
    }, {
      x: -11,
      y: -10,
      ᐃⵠⲆ: 1
    }, {
      x: -99,
      ᐃⵠⲆ: 1,
      y: 17
    }, {
      ᐃⵠⲆ: 0,
      y: 84,
      x: -66
    }, {
      x: -55,
      y: 123,
      ᐃⵠⲆ: 1
    }, {
      ᐃⵠⲆ: 2,
      x: 10,
      y: 81
    }, {
      y: 50,
      x: 52,
      ᐃⵠⲆ: 0
    }, {
      x: 138,
      y: 9,
      ᐃⵠⲆ: 1
    }, {
      x: 104,
      y: -28,
      ᐃⵠⲆ: 0
    }, {
      x: 67,
      ᐃⵠⲆ: 2,
      y: -56
    }, {
      ᐃⵠⲆ: 0,
      y: -112,
      x: 5
    }]
  }, {
    ⵠⵠΔᐃ: 6,
    ᐃΔⵠⲆ: [{
      ᐃⵠⲆ: 2,
      y: -66,
      x: -33
    }, {
      ᐃⵠⲆ: 0,
      x: -58,
      y: 10
    }, {
      x: -19,
      ᐃⵠⲆ: 1,
      y: 44
    }, {
      x: 44,
      y: 20,
      ᐃⵠⲆ: 0
    }, {
      y: -36,
      ᐃⵠⲆ: 2,
      x: 53
    }, {
      y: -62,
      x: 7,
      ᐃⵠⲆ: 0
    }]
  }, {
    ⵠⵠΔᐃ: 3,
    ᐃΔⵠⲆ: [{
      x: -19,
      y: -25,
      ᐃⵠⲆ: 1
    }, {
      x: -29,
      ᐃⵠⲆ: 2,
      y: 13
    }, {
      y: 12,
      ᐃⵠⲆ: 0,
      x: 12
    }]
  }];
  var v2000 = 0;
  var v2001 = 0;
  var v2002 = 0;
  var v2003 = 0;
  function f408(p1252, p1253, p1254, p1255, p1256, p1257) {
    var v2004 = p1255.w1;
    var v2005 = p1255.w2;
    var v2006 = p1255.w3;
    var v2007 = user.ᐃⵠⵠ.x + p1252 + 820;
    var v2008 = Math.max(user.ᐃⵠⵠ.y + p1253, 0);
    var v2009 = Math.max(-user.ᐃⵠⵠ.y + v408 - p1254 - 100, 0);
    var vV2008 = v2008;
    var v2010 = v408 - v2008 - v2009;
    if (p1257) {
      var v2011 = p1255.ᐃⵠⲆ(v2004).x;
    } else {
      v2011 = v2004.r.x;
    }
    var v2012 = v2007 + 0;
    0;
    v2012 += -v2011 + 0 + 2;
    if (p1257) {
      v2011 = p1255.ᐃⵠⲆ(v2005).x;
    } else {
      v2011 = v2005.r.x;
    }
    var v2013 = v2007 - 250 - v2012 - v2011;
    var v2014 = (v2012 += v2013 + 2) - 2;
    if (p1257) {
      v2011 = p1255.ᐃⵠⲆ(v2006).x;
    } else {
      v2011 = v2006.r.x;
    }
    if (v2014 > v2012 + (v2013 = v2007 - 350 - v2012 - v2011)) {
      v2012 += v2013 + 2;
    } else {
      v2012 = v2014;
    }
    v2013 = v2007 - 700 - v2012;
    if (p1257 > 0 && p1256.ⵠⵠΔⲆⲆⲆᐃ === 1) {
      if (world.transition) {
        var v2015 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(15, 77, 72, 252, 239, 187, v2015);
      } else {
        v405.fillStyle = v585.ᐃᐃΔΔΔⲆⵠ[world.time];
      }
      v405.fillRect(v2012, vV2008, v2013, v2010);
    } else {
      if (world.transition) {
        v2015 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(p1256.ᐃᐃΔ[0], p1256.ᐃᐃΔ[1], p1256.ᐃᐃΔ[2], p1256.Δⵠⵠ[0], p1256.Δⵠⵠ[1], p1256.Δⵠⵠ[2], v2015);
      } else {
        v405.fillStyle = p1256.ᐃΔⲆΔⵠ[world.time];
      }
      v405.fillRect(v2012, vV2008, v2013, v2010);
    }
  }
  function f409(p1258, p1259, p1260, p1261, p1262, p1263, p1264) {
    var v2016;
    var v2017 = "#";
    v2017 += (v2016 = Math.floor(p1261 * p1264 + p1258 * (1 - p1264))) < 16 ? "0" + v2016.toString(16) : v2016.toString(16);
    v2017 += (v2016 = Math.floor(p1264 * p1262 + p1259 * (1 - p1264))) < 16 ? "0" + v2016.toString(16) : v2016.toString(16);
    return v2017 += (v2016 = Math.floor(p1264 * p1263 + p1260 * (1 - p1264))) < 16 ? "0" + v2016.toString(16) : v2016.toString(16);
  }
  function f410(p1265, p1266, p1267, p1268, p1269, p1270) {
    var v2018 = p1268.w1;
    var v2019 = p1268.w2;
    var v2020 = p1268.w3;
    var v2021 = user.ᐃⵠⵠ.x + p1265 - 700;
    var v2022 = Math.max(user.ᐃⵠⵠ.y + p1266, 0);
    var v2023 = Math.max(-user.ᐃⵠⵠ.y + v408 - p1267 - 100, 0);
    var vV2022 = v2022;
    var v2024 = v408 - v2022 - v2023;
    if (p1270) {
      var v2025 = p1268.ᐃⵠⲆ(v2018).x;
    } else {
      v2025 = v2018.r.x;
    }
    var v2026 = v2021 + 0;
    0;
    v2026 += v2025 + 0 - 2;
    if (p1270) {
      v2025 = p1268.ᐃⵠⲆ(v2019).x;
    } else {
      v2025 = v2019.r.x;
    }
    var v2027 = v2021 + 250 - v2026 + v2025;
    var v2028 = (v2026 += v2027 - 2) - 2;
    if (p1270) {
      v2025 = p1268.ᐃⵠⲆ(v2020).x;
    } else {
      v2025 = v2020.r.x;
    }
    if (v2026 + (v2027 = v2021 + 350 - v2026 + v2025) - 3 > v2028) {
      v2026 += v2027 - 2;
    } else {
      v2026 = v2028;
    }
    v2027 = v2021 + 700 - v2026;
    if (p1270 > 0 && p1269.ⵠⵠΔⲆⲆⲆᐃ === 1) {
      if (world.transition) {
        var v2029 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(15, 77, 72, 252, 239, 187, v2029);
      } else {
        v405.fillStyle = v585.ᐃᐃΔΔΔⲆⵠ[world.time];
      }
      v405.fillRect(v2026, vV2022, v2027, v2024);
    } else {
      if (world.transition) {
        v2029 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(p1269.ᐃᐃΔ[0], p1269.ᐃᐃΔ[1], p1269.ᐃᐃΔ[2], p1269.Δⵠⵠ[0], p1269.Δⵠⵠ[1], p1269.Δⵠⵠ[2], v2029);
      } else {
        v405.fillStyle = p1269.ᐃΔⲆΔⵠ[world.time];
      }
      v405.fillRect(v2026, vV2022, v2027, v2024);
    }
  }
  function f411(p1271, p1272, p1273, p1274, p1275, p1276) {
    var v2030 = p1274.w1;
    var v2031 = p1274.w2;
    var v2032 = p1274.w3;
    var v2033 = user.ᐃⵠⵠ.y + p1271 - 700;
    var v2034 = Math.max(user.ᐃⵠⵠ.x + p1272, 0);
    var v2035 = Math.max(-user.ᐃⵠⵠ.x + v406 - p1273 - 100, 0);
    var vV2034 = v2034;
    var v2036 = v406 - v2034 - v2035;
    if (p1276) {
      var v2037 = p1274.ᐃⵠⲆ(v2030).x;
    } else {
      v2037 = v2030.r.x;
    }
    var v2038 = v2033 + 0;
    0;
    v2038 += v2037 + 0 - 2;
    if (p1276) {
      v2037 = p1274.ᐃⵠⲆ(v2031).x;
    } else {
      v2037 = v2031.r.x;
    }
    var v2039 = v2033 + 250 - v2038 + v2037;
    var v2040 = (v2038 += v2039 - 2) - 2;
    if (p1276) {
      v2037 = p1274.ᐃⵠⲆ(v2032).x;
    } else {
      v2037 = v2032.r.x;
    }
    if (v2040 < v2038 + (v2039 = v2033 + 350 - v2038 + v2037) - 3) {
      v2038 += v2039 - 2;
    } else {
      v2038 = v2040;
    }
    v2039 = v2033 + 700 - v2038;
    if (p1276 > 0 && p1275.ⵠⵠΔⲆⲆⲆᐃ === 1) {
      if (world.transition) {
        var v2041 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(15, 77, 72, 252, 239, 187, v2041);
      } else {
        v405.fillStyle = v585.ᐃᐃΔΔΔⲆⵠ[world.time];
      }
      v405.fillRect(vV2034, v2038, v2036, v2039);
    } else {
      if (world.transition) {
        v2041 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(p1275.ᐃᐃΔ[0], p1275.ᐃᐃΔ[1], p1275.ᐃᐃΔ[2], p1275.Δⵠⵠ[0], p1275.Δⵠⵠ[1], p1275.Δⵠⵠ[2], v2041);
      } else {
        v405.fillStyle = p1275.ᐃΔⲆΔⵠ[world.time];
      }
      v405.fillRect(vV2034, v2038, v2036, v2039);
    }
  }
  function f412(p1277, p1278, p1279, p1280, p1281, p1282) {
    var v2042 = p1280.w1;
    var v2043 = p1280.w2;
    var v2044 = p1280.w3;
    var v2045 = user.ᐃⵠⵠ.x + p1277 + 820;
    var v2046 = Math.max(user.ᐃⵠⵠ.y + p1278, 0);
    var v2047 = Math.max(-user.ᐃⵠⵠ.y + v408 - p1279 - 100, 0);
    var vV2046 = v2046;
    var v2048 = v408 - v2046 - v2047;
    if (p1282) {
      var v2049 = p1280.ᐃⵠⲆ(v2042);
    } else {
      v2049 = v2042.r;
    }
    var v2050 = v2045 + 0;
    var vV2050 = v2050;
    var vVV2046 = vV2046;
    var v2051 = -v2049.x + 0;
    var vV2048 = v2048;
    var v2052 = v2050 += -v2049.x + 0 + 2;
    if (p1282) {
      v2049 = p1280.ᐃⵠⲆ(v2043);
    } else {
      v2049 = v2043.r;
    }
    var v2053 = v2045 - 250 - v2050 - v2049.x;
    var vV20502 = v2050;
    var vVV20462 = vV2046;
    var vV2053 = v2053;
    var vV20482 = v2048;
    var v2054 = (v2050 += v2053 + 2) - 2;
    if (p1282) {
      v2049 = p1280.ᐃⵠⲆ(v2044);
    } else {
      v2049 = v2044.r;
    }
    if (v2050 + (v2053 = v2045 - 350 - v2050 - v2049.x) < v2054) {
      var vVVVV62 = vVVV62;
      var vV20503 = v2050;
      var vVV20463 = vV2046;
      var vV20532 = v2053;
      var vV20483 = v2048;
      var v2055 = v2050 += v2053 + 2;
    } else {
      vVVVV62 = false;
      v2050 = v2054;
      v2055 = -1;
    }
    v2053 = v2045 - 700 - v2050;
    if (world.transition) {
      var v2056 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2056);
    } else {
      v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
    }
    v405.fillRect(vV2050, vVV2046, v2051, vV2048);
    if (p1282) {
      if (world.transition) {
        v2056 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(15, 70, 76, 42, 139, 155, v2056);
      } else {
        v405.fillStyle = v585.ⵠⵠΔΔⵠΔΔ[world.time];
      }
    } else if (world.transition) {
      v2056 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2056);
    } else {
      v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
    }
    v405.fillRect(vV20502, vVV20462, vV2053, vV20482);
    if (vVVVV62) {
      if (p1282) {
        if (world.transition) {
          v2056 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
          v405.fillStyle = f409(17, 94, 96, 169, 214, 211, v2056);
        } else {
          v405.fillStyle = v585.ᐃⵠⲆᐃΔⵠᐃ[world.time];
        }
      } else if (world.transition) {
        v2056 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2056);
      } else {
        v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
      }
      v405.fillRect(vV20503, vVV20463, vV20532, vV20483);
    }
    if (v2833.ⲆΔⲆΔΔ && p1282) {
      p1280.ᐃᐃᐃᐃⵠⲆᐃⲆΔ(v2054, v2055, v2052, v2045, -user.ᐃⵠⵠ.y + vVV2046, -user.ᐃⵠⵠ.y + vVV2046 + vV2048);
    }
  }
  function f413(p1283, p1284, p1285, p1286) {
    if (world.transition) {
      v405.globalAlpha = 1;
      f295(v405, ᐃᐃ[p1283][world.time], p1285, p1286);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      f295(v405, ᐃᐃ[p1283][world.time], p1285, p1286);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1;
    } else {
      f295(v405, p1284, p1285, p1286);
    }
  }
  function f414(p1287, p1288, p1289, p1290, p1291, p1292, p1293, p1294, p1295, p1296) {
    if (world.transition) {
      v405.globalAlpha = 1;
      p1287(p1288, p1289, p1290, p1291, p1292, p1293, p1294, p1295, p1296);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      p1287(p1288, p1289, p1290, p1291, p1292, p1293, p1294, p1295, p1296);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1;
    } else {
      p1287(p1288, p1289, p1290, p1291, p1292, p1293, p1294, p1295, p1296);
    }
  }
  function f415(p1297) {
    v405.globalAlpha = p1297.alpha;
    f92(v405, p1297.x + user.ᐃⵠⵠ.x, p1297.y + user.ᐃⵠⵠ.y, p1297.r);
    f88(v405, v585.ⵠⵠΔᐃⲆᐃⲆ[world.time]);
    v405.globalAlpha = 1;
  }
  function f416(p1298, p1299, p1300, p1301, p1302, p1303) {
    var v2057 = p1301.w1;
    var v2058 = p1301.w2;
    var v2059 = p1301.w3;
    var v2060 = user.ᐃⵠⵠ.x + p1298 - 700;
    var v2061 = Math.max(user.ᐃⵠⵠ.y + p1299, 0);
    var v2062 = Math.max(-user.ᐃⵠⵠ.y + v408 - p1300 - 100, 0);
    var vV2061 = v2061;
    var v2063 = v408 - v2061 - v2062;
    if (p1303) {
      var v2064 = p1301.ᐃⵠⲆ(v2057);
    } else {
      v2064 = v2057.r;
    }
    var v2065 = v2060 + 0;
    var vV2065 = v2065;
    var vVV2061 = vV2061;
    var v2066 = v2064.x + 0;
    var vV2063 = v2063;
    var v2067 = v2065 += v2064.x + 0 - 2;
    if (p1303) {
      v2064 = p1301.ᐃⵠⲆ(v2058);
    } else {
      v2064 = v2058.r;
    }
    var v2068 = v2060 + 250 - v2065 + v2064.x;
    var vV20652 = v2065;
    var vVV20612 = vV2061;
    var vV2068 = v2068;
    var vV20632 = v2063;
    var v2069 = (v2065 += v2068 - 2) - 2;
    if (p1303) {
      v2064 = p1301.ᐃⵠⲆ(v2059);
    } else {
      v2064 = v2059.r;
    }
    if (v2065 + (v2068 = v2060 + 350 - v2065 + v2064.x) - 3 > v2069) {
      var v2070 = true;
      var vV20653 = v2065;
      var vVV20613 = vV2061;
      var vV20682 = v2068;
      var vV20633 = v2063;
      var v2071 = v2065 += v2068 - 2;
    } else {
      v2070 = vVVV14;
      v2065 = v2069;
      v2071 = -1;
    }
    v2068 = v2060 + 700 - v2065;
    if (world.transition) {
      var v2072 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2072);
    } else {
      v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
    }
    v405.fillRect(vV2065, vVV2061, v2066, vV2063);
    if (p1303) {
      if (world.transition) {
        v2072 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(15, 70, 76, 42, 139, 155, v2072);
      } else {
        v405.fillStyle = v585.ⵠⵠΔΔⵠΔΔ[world.time];
      }
    } else if (world.transition) {
      v2072 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2072);
    } else {
      v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
    }
    v405.fillRect(vV20652, vVV20612, vV2068, vV20632);
    if (v2070) {
      if (p1303) {
        if (world.transition) {
          v2072 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
          v405.fillStyle = f409(17, 94, 96, 169, 214, 211, v2072);
        } else {
          v405.fillStyle = v585.ᐃⵠⲆᐃΔⵠᐃ[world.time];
        }
      } else if (world.transition) {
        v2072 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2072);
      } else {
        v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
      }
      v405.fillRect(vV20653, vVV20613, vV20682, vV20633);
    }
    if (v2833.ⲆΔⲆΔΔ && p1303) {
      p1301.ⵠΔΔᐃⵠⲆⵠᐃΔ(v2069, v2071, v2067, v2060, -user.ᐃⵠⵠ.y + vVV2061, -user.ᐃⵠⵠ.y + vVV2061 + vV2063);
    }
  }
  function f417(p1304, p1305, p1306, p1307, p1308, p1309) {
    var v2073 = p1307.w1;
    var v2074 = p1307.w2;
    var v2075 = p1307.w3;
    var v2076 = user.ᐃⵠⵠ.y + p1304 + 710;
    var v2077 = Math.max(user.ᐃⵠⵠ.x + p1305, 0);
    var v2078 = Math.max(-user.ᐃⵠⵠ.x + v406 - p1306 - 100, 0);
    var vV2077 = v2077;
    var v2079 = v406 - v2077 - v2078;
    if (p1309) {
      var v2080 = p1307.ᐃⵠⲆ(v2073);
    } else {
      v2080 = v2073.r;
    }
    var v2081 = v2076 + 0;
    var vV2081 = v2081;
    var vVV2077 = vV2077;
    var v2082 = -v2080.x + 0;
    var vV2079 = v2079;
    var v2083 = v2081 += -v2080.x + 0 + 2;
    if (p1309) {
      v2080 = p1307.ᐃⵠⲆ(v2074);
    } else {
      v2080 = v2074.r;
    }
    var v2084 = v2076 - 250 - v2081 - v2080.x;
    var vV20812 = v2081;
    var vVV20772 = vV2077;
    var vV2084 = v2084;
    var vV20792 = v2079;
    var v2085 = (v2081 += v2084 + 2) - 2;
    if (p1309) {
      v2080 = p1307.ᐃⵠⲆ(v2075);
    } else {
      v2080 = v2075.r;
    }
    if (v2085 > v2081 + (v2084 = v2076 - 350 - v2081 - v2080.x)) {
      var vVV64 = vV6;
      var vV20813 = v2081;
      var vVV20773 = vV2077;
      var vV20842 = v2084;
      var vV20793 = v2079;
      var v2086 = v2081 += v2084 + 2;
    } else {
      vVV64 = false;
      v2081 = v2085;
      v2086 = -1;
    }
    v2084 = v2076 - 700 - v2081;
    if (world.transition) {
      var v2087 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2087);
    } else {
      v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
    }
    v405.fillRect(vVV2077, vV2081, vV2079, v2082);
    if (p1309) {
      if (world.transition) {
        v2087 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(15, 70, 76, 42, 139, 155, v2087);
      } else {
        v405.fillStyle = v585.ⵠⵠΔΔⵠΔΔ[world.time];
      }
    } else if (world.transition) {
      v2087 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2087);
    } else {
      v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
    }
    v405.fillRect(vVV20772, vV20812, vV20792, vV2084);
    if (vVV64) {
      if (p1309) {
        if (world.transition) {
          v2087 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
          v405.fillStyle = f409(17, 94, 96, 169, 214, 211, v2087);
        } else {
          v405.fillStyle = v585.ᐃⵠⲆᐃΔⵠᐃ[world.time];
        }
      } else if (world.transition) {
        v2087 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2087);
      } else {
        v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
      }
      v405.fillRect(vVV20773, vV20813, vV20793, vV20842);
    }
    if (v2833.ⲆΔⲆΔΔ && p1309) {
      p1307.ᐃᐃΔΔΔΔⲆⵠⵠ(v2085, v2086, v2083, v2076, -user.ᐃⵠⵠ.x + vVV2077, -user.ᐃⵠⵠ.x + vVV2077 + vV2079);
    }
  }
  function f418() {
    v405.globalAlpha = 1;
    if (world.transition) {
      var v2088 = world.ΔⵠⵠΔ.ⵠᐃᐃ();
    }
    world.ᐃⲆⵠΔᐃᐃΔᐃⲆ(-user.ᐃⵠⵠ.x, -user.ᐃⵠⵠ.y);
    v2000 = Math.max(Math.floor(-user.ᐃⵠⵠ.x / world.ⵠᐃⵠᐃᐃⲆⲆ) - 5, 0);
    v2001 = Math.min(Math.floor((-user.ᐃⵠⵠ.x + user.ᐃⵠⵠ.w) / world.ⵠᐃⵠᐃᐃⲆⲆ) + 4, world.nw - 1);
    v2002 = Math.max(Math.floor(-user.ᐃⵠⵠ.y / world.ᐃᐃᐃᐃⵠⵠⲆ) - 3, 0);
    v2003 = Math.min(Math.floor((-user.ᐃⵠⵠ.y + user.ᐃⵠⵠ.ⵠⲆⵠ) / world.ᐃᐃᐃᐃⵠⵠⲆ) + 3, world.nh - 1);
    (function () {
      for (var v2089 = world.ᐃⲆⲆΔ.length - 1; v2089 >= 0; v2089--) {
        if ((v2100 = world.ᐃⲆⲆΔ[v2089]).ᐃⵠⲆ === world.ⲆⲆⲆⲆⵠ) {
          var v2090 = world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ];
          if (v2100.x1 - 230 - v406 <= -user.ᐃⵠⵠ.x && -user.ᐃⵠⵠ.x <= v2100.x2 + 330 && -user.ᐃⵠⵠ.y >= v2100.y1 - v408 && v2100.y2 + 100 >= -user.ᐃⵠⵠ.y) {
            var v2091 = v2100.x2;
            if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
              v2091 -= 610;
            }
            var v2092 = v2100.x1;
            if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
              v2092 += 610;
            }
            var v2093 = v2100.y2;
            if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
              v2093 -= 610;
            }
            var v2094 = v2100.y1;
            if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
              v2094 += 610;
            }
            if (world.transition) {
              var v2095 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
              v405.fillStyle = f409(v2090.ᐃᐃΔ[0], v2090.ᐃᐃΔ[1], v2090.ᐃᐃΔ[2], v2090.Δⵠⵠ[0], v2090.Δⵠⵠ[1], v2090.Δⵠⵠ[1], v2095);
            } else {
              v405.fillStyle = v2090.ᐃΔⲆΔⵠ[world.time];
            }
            var v2096 = Math.max(user.ᐃⵠⵠ.x + v2092 - 2 - 230, 0);
            var v2097 = Math.max(-user.ᐃⵠⵠ.x + v406 - v2091 - 330 - 2, 0);
            var v2098 = Math.max(user.ᐃⵠⵠ.y + v2094 - 2, 0);
            var v2099 = Math.max(-user.ᐃⵠⵠ.y + v408 - v2093 - 100 - 2, 0);
            v405.beginPath();
            v405.fillRect(v2096, v2098, v406 - v2097 - v2096, v408 - v2098 - v2099);
          }
        }
      }
      for (v2089 = world.ᐃⲆⲆΔ.length - 1; v2089 >= 0; v2089--) {
        var v2100 = world.ᐃⲆⲆΔ[v2089];
        if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
          v2091 = v2100.x2;
          if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
            v2091 -= 400;
          }
          v2092 = v2100.x1;
          if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
            v2092 += 400;
          }
          v2093 = v2100.y2;
          if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
            v2093 -= 300;
          }
          v2094 = v2100.y1;
          if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
            v2094 += 300;
          }
          if (!(v2100.Ⲇⵠⵠ & 8) && v2091 - v406 + 120 <= -user.ᐃⵠⵠ.x && -user.ᐃⵠⵠ.x <= v2091 + 820 && -user.ᐃⵠⵠ.y >= v2094 + 88 - v408 && -user.ᐃⵠⵠ.y <= v2093 + 50) {
            f408(v2091, v2094 + 88, v2093 - 88, user.ΔᐃⲆⲆ[0], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 8);
            f412(v2091, v2094 + 88, v2093 - 88, user.ΔᐃⲆⲆ[0], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 8);
          }
          if (!(v2100.Ⲇⵠⵠ & 4) && -user.ᐃⵠⵠ.x >= v2092 - v406 - 700 && -user.ᐃⵠⵠ.x <= v2092 - 20 && -user.ᐃⵠⵠ.y >= v2094 + 88 - v408 && -user.ᐃⵠⵠ.y <= v2093 + 50) {
            f410(v2092, v2094 + 88, v2093 - 88, user.ΔᐃⲆⲆ[1], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 4);
            f416(v2092, v2094 + 88, v2093 - 88, user.ΔᐃⲆⲆ[1], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 4);
          }
          if ((v2100.Ⲇⵠⵠ & 2) === 0 && v2092 - 235 - v406 <= -user.ᐃⵠⵠ.x && -user.ᐃⵠⵠ.x <= v2091 + 350 && v2093 - v408 - 275 <= -user.ᐃⵠⵠ.y && -user.ᐃⵠⵠ.y <= v2093 + 490) {
            f423(v2093 - 230, v2092 - 230, v2091 + 230, user.ΔᐃⲆⲆ[2], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 2);
            f417(v2093 - 230, v2092 - 230, v2091 + 230, user.ΔᐃⲆⲆ[2], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 2);
          }
          if ((v2100.Ⲇⵠⵠ & 1) === 0 && v2092 - 235 - v406 <= -user.ᐃⵠⵠ.x && v2091 + 350 >= -user.ᐃⵠⵠ.x && v2094 - v408 - 390 <= -user.ᐃⵠⵠ.y && -user.ᐃⵠⵠ.y <= v2094 + 315) {
            f411(v2094 + 310, v2092 - 230, v2091 + 230, user.ΔᐃⲆⲆ[3], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 1);
            f419(v2094 + 310, v2092 - 230, v2091 + 230, user.ΔᐃⲆⲆ[3], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 1);
          }
        }
      }
      for (v2089 = world.ᐃⲆⲆΔ.length - 1; v2089 >= 0; v2089--) {
        if ((v2100 = world.ᐃⲆⲆΔ[v2089]).ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
          v2091 = v2100.x2;
          if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
            v2091 -= 400;
          }
          v2092 = v2100.x1;
          if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
            v2092 += 400;
          }
          v2093 = v2100.y2;
          if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
            v2093 -= 300;
          }
          v2094 = v2100.y1;
          if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
            v2094 += 300;
          }
          if ((v2100.Ⲇⵠⵠ & 8) !== 0 && -user.ᐃⵠⵠ.x >= v2091 - v406 + 120 && -user.ᐃⵠⵠ.x <= v2091 + 820 && -user.ᐃⵠⵠ.y >= v2094 + 88 - v408 && -user.ᐃⵠⵠ.y <= v2093 + 50) {
            f408(v2091, v2094 + 88, v2093 - 88, user.ΔᐃⲆⲆ[0], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 8);
          }
          if (v2100.Ⲇⵠⵠ & 4 && -user.ᐃⵠⵠ.x >= v2092 - v406 - 700 && -user.ᐃⵠⵠ.x <= v2092 - 20 && -user.ᐃⵠⵠ.y >= v2094 + 88 - v408 && -user.ᐃⵠⵠ.y <= v2093 + 50) {
            f410(v2092, v2094 + 88, v2093 - 88, user.ΔᐃⲆⲆ[1], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 4);
          }
          if (v2100.Ⲇⵠⵠ & 2 && v2092 - 235 - v406 <= -user.ᐃⵠⵠ.x && v2091 + 350 >= -user.ᐃⵠⵠ.x && -user.ᐃⵠⵠ.y >= v2093 - v408 - 275 && -user.ᐃⵠⵠ.y <= v2093 + 490) {
            f423(v2093 - 230, v2092 - 230, v2091 + 230, user.ΔᐃⲆⲆ[2], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 2);
          }
          if ((v2100.Ⲇⵠⵠ & 1) !== 0 && -user.ᐃⵠⵠ.x >= v2092 - 235 - v406 && -user.ᐃⵠⵠ.x <= v2091 + 350 && -user.ᐃⵠⵠ.y >= v2094 - v408 - 390 && -user.ᐃⵠⵠ.y <= v2094 + 315) {
            f411(v2094 + 310, v2092 - 230, v2091 + 230, user.ΔᐃⲆⲆ[3], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 1);
          }
        }
      }
      for (v2089 = world.ᐃⲆⲆΔ.length - 1; v2089 >= 0; v2089--) {
        if ((v2100 = world.ᐃⲆⲆΔ[v2089]).ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
          v2090 = world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ];
          if (v2100.x1 - 230 - v406 <= -user.ᐃⵠⵠ.x && v2100.x2 + 330 >= -user.ᐃⵠⵠ.x && -user.ᐃⵠⵠ.y >= v2100.y1 - v408 && -user.ᐃⵠⵠ.y <= v2100.y2 + 100) {
            v2091 = v2100.x2;
            if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
              if ((v2100.Ⲇⵠⵠ & 8) === 0) {
                v2091 -= 414;
              } else {
                v2091 -= 610;
              }
            }
            v2092 = v2100.x1;
            if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
              if (v2100.Ⲇⵠⵠ & 4) {
                v2092 += 610;
              } else {
                v2092 += 414;
              }
            }
            v2093 = v2100.y2;
            if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
              if (v2100.Ⲇⵠⵠ & 2) {
                v2093 -= 610;
              } else {
                v2093 -= 414;
              }
            }
            v2094 = v2100.y1;
            if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
              if (v2100.Ⲇⵠⵠ & 1) {
                v2094 += 610;
              } else {
                v2094 += 414;
              }
            }
            if (world.transition) {
              v2095 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
              v405.fillStyle = f409(v2090.ᐃᐃΔ[0], v2090.ᐃᐃΔ[1], v2090.ᐃᐃΔ[2], v2090.Δⵠⵠ[0], v2090.Δⵠⵠ[1], v2090.Δⵠⵠ[2], v2095);
            } else {
              v405.fillStyle = v2090.ᐃΔⲆΔⵠ[world.time];
            }
            v2096 = Math.max(user.ᐃⵠⵠ.x + v2092 - 2 - 230, 0);
            v2097 = Math.max(-user.ᐃⵠⵠ.x + v406 - v2091 - 330 - 2, 0);
            v2098 = Math.max(user.ᐃⵠⵠ.y + v2094 - 2, 0);
            v2099 = Math.max(-user.ᐃⵠⵠ.y + v408 - v2093 - 100 - 2, 0);
            v405.beginPath();
            v405.fillRect(v2096, v2098, v406 - v2097 - v2096, v408 - v2098 - v2099);
          }
        }
      }
      if (v2833.ⲆΔⲆΔΔ) {
        f414(f404, v2002, v2003, v2000, v2001, 914, "isl", 2);
        f414(f404, v2002, v2003, v2000, v2001, 913, "isl", 2);
      }
      f414(f405, v2002, v2003, v2000, v2001, 911, "isl", 2);
      if (v2833.ⲆΔⲆΔΔ) {
        f414(f407, v2002, v2003, v2000, v2001, 353, "de");
      }
      var v2101 = world.units[0];
      for (v2089 = 0; v2089 < v2101.length; v2089++) {
        for (var v2102 = v2101[v2089], v2103 = 0; v2102.ΔⲆᐃⲆⵠ.length > v2103; v2103++) {
          f422(v2102.ΔⲆᐃⲆⵠ[v2103]);
        }
      }
      if ((v1730 += v3064 * 40) > 60) {
        v1730 -= 60;
      }
      f414(f380, v2002, v2003, v2000, v2001, 1332, "r", 0);
      v2089 = 0;
      for (; v2089 < world.ᐃⲆⲆΔ.length; v2089++) {
        v2100 = world.ᐃⲆⲆΔ[v2089];
        if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
          v2091 = v2100.x2;
          if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
            v2091 -= 400;
          }
          v2092 = v2100.x1;
          if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
            v2092 += 400;
          }
          v2093 = v2100.y2;
          if (world.ⲆⲆⲆⲆⵠ !== v2100.ᐃⵠⲆ) {
            v2093 -= 300;
          }
          v2094 = v2100.y1;
          if (v2100.ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ) {
            v2094 += 300;
          }
          if ((v2100.Ⲇⵠⵠ & 8) > 0 && -user.ᐃⵠⵠ.x >= v2091 - v406 + 120 && -user.ᐃⵠⵠ.x <= v2091 + 820 && v2094 + 88 - v408 <= -user.ᐃⵠⵠ.y && v2093 + 50 >= -user.ᐃⵠⵠ.y) {
            f412(v2091, v2094 + 88, v2093 - 88, user.ΔᐃⲆⲆ[0], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 8);
          }
          if ((v2100.Ⲇⵠⵠ & 4) > 0 && -user.ᐃⵠⵠ.x >= v2092 - v406 - 700 && -user.ᐃⵠⵠ.x <= v2092 - 20 && v2094 + 88 - v408 <= -user.ᐃⵠⵠ.y && -user.ᐃⵠⵠ.y <= v2093 + 50) {
            f416(v2092, v2094 + 88, v2093 - 88, user.ΔᐃⲆⲆ[1], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 4);
          }
          if ((v2100.Ⲇⵠⵠ & 2) > 0 && v2092 - 235 - v406 <= -user.ᐃⵠⵠ.x && v2091 + 350 >= -user.ᐃⵠⵠ.x && v2093 - v408 - 275 <= -user.ᐃⵠⵠ.y && -user.ᐃⵠⵠ.y <= v2093 + 490) {
            f417(v2093 - 230, v2092 - 230, v2091 + 230, user.ΔᐃⲆⲆ[2], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 2);
          }
          if ((v2100.Ⲇⵠⵠ & 1) > 0 && v2092 - 235 - v406 <= -user.ᐃⵠⵠ.x && v2091 + 350 >= -user.ᐃⵠⵠ.x && v2094 - v408 - 390 <= -user.ᐃⵠⵠ.y && v2094 + 315 >= -user.ᐃⵠⵠ.y) {
            f419(v2094 + 310, v2092 - 230, v2091 + 230, user.ΔᐃⲆⲆ[3], world.ΔΔΔΔⲆ[v2100.ᐃⵠⲆ], v2100.Ⲇⵠⵠ & 1);
          }
        }
      }
    })();
    (function () {
      var vV2000 = v2000;
      var vV2001 = v2001;
      var vV2002 = v2002;
      var vV2003 = v2003;
      if (v2833.ⲆΔⲆΔΔ) {
        f414(f405, vV2002, vV2003, vV2000, vV2001, 840, "l", 2);
      }
      if (v2833.ⲆΔⲆΔΔ) {
        f414(f405, vV2002, vV2003, vV2000, vV2001, v585.ⲆⵠⲆᐃᐃ, "la", 5);
      }
      f414(f405, vV2002, vV2003, vV2000, vV2001, 305, "la", 5);
      f414(f404, vV2002, vV2003, vV2000, vV2001, 839, "l", 2);
      if (v2833.ⲆΔⲆΔΔ) {
        f414(f406, vV2002, vV2003, vV2000, vV2001, 305, "la", 5);
        f414(f404, vV2002, vV2003, vV2000, vV2001, 838, "l", 2);
      }
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1360, "ma", 4);
      for (var v2104 = world.units[83], v2105 = 0; v2105 < v2104.length; v2105++) {
        v2104[v2105].ⵠⵠᐃⵠᐃⲆΔ();
      }
      var v2106 = world.units[0];
      for (v2105 = 0; v2106.length > v2105; v2105++) {
        for (var v2107 = v2106[v2105], v2108 = 0; v2108 < v2107.ⵠⲆᐃⲆΔ.length; v2108++) {
          f415(v2107.ⵠⲆᐃⲆΔ[v2108]);
        }
      }
      var v2109 = world.units[39];
      for (v2105 = 0; v2105 < v2109.length; v2105++) {
        f426(v2109[v2105], 216);
        v2109[v2105].ⵠᐃⲆⵠⲆ(v2109[v2105].info);
      }
      var v2110 = world.units[18];
      for (v2105 = 0; v2105 < v2110.length; v2105++) {
        if (v2110[v2105].action == 2) {
          f420(v2110[v2105]);
        }
      }
      var v2111 = world.units[1];
      for (v2105 = 0; v2111.length > v2105; v2105++) {
        f420(v2111[v2105], 204);
      }
      var v2112 = world.units[22];
      for (v2105 = 0; v2112.length > v2105; v2105++) {
        f420(v2112[v2105]);
      }
      var v2113 = world.units[23];
      for (v2105 = 0; v2113.length > v2105; v2105++) {
        f420(v2113[v2105]);
      }
      var v2114 = world.units[6];
      for (v2105 = 0; v2105 < v2114.length; v2105++) {
        f420(v2114[v2105], 209);
      }
      var v2115 = world.units[45];
      for (v2105 = 0; v2105 < v2115.length; v2105++) {
        f426(v2115[v2105]);
      }
      var v2116 = world.units[42];
      for (v2105 = 0; v2116.length > v2105; v2105++) {
        f426(v2116[v2105], 234);
      }
      var v2117 = world.units[3];
      for (v2105 = 0; v2105 < v2117.length; v2105++) {
        f420(v2117[v2105]);
      }
      v2117 = world.units[52];
      v2105 = 0;
      for (; v2117.length > v2105; v2105++) {
        f420(v2117[v2105]);
      }
      v2117 = world.units[3];
      v2105 = 0;
      for (; v2117.length > v2105; v2105++) {
        f427(v2117[v2105]);
      }
      var v2118 = world.units[53];
      for (v2105 = 0; v2118.length > v2105; v2105++) {
        if ((v2118[v2105].info & 15) === 0 || v2118[v2105].info === 10) {
          f426(v2118[v2105]);
        }
      }
      var v2119 = world.units[66];
      for (v2105 = 0; v2105 < v2119.length; v2105++) {
        if ((v2119[v2105].info & 15) === 0 || v2119[v2105].info === 10) {
          f426(v2119[v2105]);
        }
      }
      var v2120 = world.units[63];
      for (v2105 = 0; v2120.length > v2105; v2105++) {
        if (!(v2120[v2105].info & 15) || v2120[v2105].info === 10) {
          f426(v2120[v2105]);
        }
      }
      var v2121 = world.units[64];
      for (v2105 = 0; v2105 < v2121.length; v2105++) {
        if ((v2121[v2105].info & 15) === 0 || v2121[v2105].info === 10) {
          f426(v2121[v2105]);
        }
      }
      var v2122 = world.units[91];
      for (v2105 = 0; v2105 < v2122.length; v2105++) {
        f426(v2122[v2105], 225);
      }
      var v2123 = world.units[48];
      for (v2105 = 0; v2123.length > v2105; v2105++) {
        if ((v2123[v2105].info & 15) === 0 || v2123[v2105].info === 10) {
          f426(v2123[v2105]);
        }
      }
      var v2124 = world.units[49];
      for (v2105 = 0; v2124.length > v2105; v2105++) {
        if ((v2124[v2105].info & 15) === 0 || v2124[v2105].info === 10) {
          f426(v2124[v2105]);
        }
      }
      var v2125 = world.units[46];
      for (v2105 = 0; v2125.length > v2105; v2105++) {
        if ((v2125[v2105].info & 15) === 0 || v2125[v2105].info === 10) {
          f426(v2125[v2105]);
        }
      }
      v2122 = world.units[40];
      v2105 = 0;
      for (; v2105 < v2122.length; v2105++) {
        f426(v2122[v2105]);
      }
      var v2126 = world.units[98];
      for (v2105 = 0; v2126.length > v2105; v2105++) {
        f426(v2126[v2105], 360, 978);
      }
      var v2127 = world.units[94];
      for (v2105 = 0; v2127.length > v2105; v2105++) {
        f426(v2127[v2105], 360, 978);
      }
      var v2128 = world.units[99];
      for (v2105 = 0; v2128.length > v2105; v2105++) {
        f426(v2128[v2105], 1103, 1108);
      }
      var v2129 = world.units[54];
      for (v2105 = 0; v2129.length > v2105; v2105++) {
        if (v2129[v2105].info & 1) {
          f426(v2129[v2105], 447);
        }
      }
      v2129 = world.units[55];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (v2129[v2105].info & 1) {
          f426(v2129[v2105], 484);
        }
      }
      v2129 = world.units[56];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (v2129[v2105].info) {
          f426(v2129[v2105], 487);
        }
      }
      v2129 = world.units[57];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (v2129[v2105].info) {
          f426(v2129[v2105], 490);
        }
      }
      v2129 = world.units[58];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (v2129[v2105].info) {
          f426(v2129[v2105], 638);
        }
      }
      v2129 = world.units[62];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (v2129[v2105].info) {
          f426(v2129[v2105], 487);
        }
      }
      v2129 = world.units[10];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (v2129[v2105].info & 1) {
          f426(v2129[v2105], 447);
        }
      }
      v2129 = world.units[15];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (v2129[v2105].info & 1) {
          f426(v2129[v2105], 484);
        }
      }
      v2129 = world.units[16];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (v2129[v2105].info) {
          f426(v2129[v2105], 487);
        }
      }
      v2129 = world.units[17];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (v2129[v2105].info) {
          f426(v2129[v2105], 490);
        }
      }
      v2129 = world.units[21];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (v2129[v2105].info) {
          f426(v2129[v2105], 638);
        }
      }
      v2129 = world.units[60];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (v2129[v2105].info) {
          f426(v2129[v2105], 487);
        }
      }
      var v2130 = world.units[92];
      for (v2105 = 0; v2105 < v2130.length; v2105++) {
        f426(v2130[v2105], 374, 433);
      }
      var v2131 = world.units[50];
      for (v2105 = 0; v2105 < v2131.length; v2105++) {
        f426(v2131[v2105], 300);
      }
      v2104 = world.units[83];
      v2105 = 0;
      for (; v2104.length > v2105; v2105++) {
        f426(v2104[v2105], v585.ΔΔΔⲆⲆΔⵠ, v585.ⲆⵠⵠⲆᐃⲆΔΔΔ);
      }
      var v2132 = world.units[103];
      for (v2105 = 0; v2105 < v2132.length; v2105++) {
        if (v2132[v2105].ᐃᐃⲆᐃΔⵠⲆ === 0) {
          f426(v2132[v2105]);
        }
      }
      v2106 = world.units[0];
      v2105 = 0;
      for (; v2106.length > v2105; v2105++) {
        v2107 = v2106[v2105];
        if (v2106[v2105].ⲆⲆⲆⵠ !== 337 && v2106[v2105].ⲆⲆⲆⵠ !== 338 && v2106[v2105].ⲆⲆⲆⵠ !== 355 && v2106[v2105].ⲆⲆⲆⵠ !== 354 && v2106[v2105].ⲆⲆⲆⵠ !== 339 && v2106[v2105].ⲆⲆⲆⵠ !== 340 && v2106[v2105].ⲆⲆⲆⵠ !== 164 && v2106[v2105].ⲆⲆⲆⵠ !== 358) {
          if (v2107.ᐃⵠⵠΔΔᐃⲆ === 0) {
            if (v2107.ΔⵠⵠΔᐃⵠΔ > 0.001) {
              v2107.ΔⵠⵠΔᐃⵠΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(v2107.ΔⵠⵠΔᐃⵠΔ, 0, 0.018);
              var v2133 = 1 + Math.min(1, Math.max(v2107.ΔⵠⵠΔᐃⵠΔ, 0) / 100) * 0.18;
              v405.save();
              v405.scale(v2133, v2133);
              user.ᐃⵠⵠ.x /= v2133;
              user.ᐃⵠⵠ.y /= v2133;
              v2107.x /= v2133;
              v2107.y /= v2133;
              v2107.r.x /= v2133;
              v2107.r.y /= v2133;
              v2107.ΔⲆⲆⵠᐃⵠⵠ();
              v2107.ⲆΔᐃΔ();
              user.ᐃⵠⵠ.x *= v2133;
              user.ᐃⵠⵠ.y *= v2133;
              v2107.x *= v2133;
              v2107.y *= v2133;
              v2107.r.x *= v2133;
              v2107.r.y *= v2133;
              v405.restore();
            } else {
              v2107.ᐃᐃⲆᐃΔⵠⲆ = 0;
              v2107.ΔⲆⲆⵠᐃⵠⵠ();
              v2107.ⲆΔᐃΔ();
            }
          }
        } else if (v2107.ΔⲆΔⲆⵠ <= 180) {
          v405.save();
          v2133 = 1 + Math.min(1, Math.max(v2107.ᐃᐃⲆⲆΔ - 30, 0) / 180) * 0.35;
          v405.scale(v2133, v2133);
          user.ᐃⵠⵠ.x /= v2133;
          user.ᐃⵠⵠ.y /= v2133;
          v2107.x /= v2133;
          v2107.y /= v2133;
          v2107.r.x /= v2133;
          v2107.r.y /= v2133;
          v2107.ᐃᐃⲆᐃΔⵠⲆ = 0;
          v2107.ΔⲆⲆⵠᐃⵠⵠ();
          v2107.ⲆΔᐃΔ();
          user.ᐃⵠⵠ.x *= v2133;
          user.ᐃⵠⵠ.y *= v2133;
          v2107.x *= v2133;
          v2107.y *= v2133;
          v2107.r.x *= v2133;
          v2107.r.y *= v2133;
          v405.restore();
        }
      }
      v2131 = world.units[50];
      v2105 = 0;
      for (; v2105 < v2131.length; v2105++) {
        f426(v2131[v2105], 1189);
      }
      var v2134 = world.units[74];
      for (v2105 = 0; v2134.length > v2105; v2105++) {
        f426(v2134[v2105]);
      }
      var v2135 = world.units[90];
      for (v2105 = 0; v2135.length > v2105; v2105++) {
        f426(v2135[v2105], 1324, 1326);
      }
      var v2136 = world.units[69];
      for (v2105 = 0; v2136.length > v2105; v2105++) {
        f426(v2136[v2105], 530, 599);
      }
      var v2137 = world.units[77];
      for (v2105 = 0; v2137.length > v2105; v2105++) {
        f426(v2137[v2105]);
      }
      var v2138 = world.units[87];
      for (v2105 = 0; v2138.length > v2105; v2105++) {
        f426(v2138[v2105], 1751, 1752);
      }
      var v2139 = world.units[67];
      for (v2105 = 0; v2105 < v2139.length; v2105++) {
        f426(v2139[v2105], 410, 437);
      }
      var v2140 = world.units[79];
      for (v2105 = 0; v2140.length > v2105; v2105++) {
        f426(v2140[v2105], 342, 1385);
      }
      var v2141 = world.units[80];
      for (v2105 = 0; v2105 < v2141.length; v2105++) {
        f426(v2141[v2105], 343, 1400);
      }
      v2139 = world.units[88];
      v2105 = 0;
      for (; v2105 < v2139.length; v2105++) {
        f426(v2139[v2105], 1747, 1748);
      }
      v2118 = world.units[53];
      v2105 = 0;
      for (; v2105 < v2118.length; v2105++) {
        if ((v2118[v2105].info & 15) !== 0 && v2118[v2105].info !== 10) {
          f426(v2118[v2105]);
        }
      }
      v2119 = world.units[66];
      v2105 = 0;
      for (; v2105 < v2119.length; v2105++) {
        if ((v2119[v2105].info & 15) !== 0 && v2119[v2105].info !== 10) {
          f426(v2119[v2105]);
        }
      }
      v2120 = world.units[63];
      v2105 = 0;
      for (; v2105 < v2120.length; v2105++) {
        if (v2120[v2105].info & 15 && v2120[v2105].info !== 10) {
          f426(v2120[v2105]);
        }
      }
      v2121 = world.units[101];
      v2105 = 0;
      for (; v2121.length > v2105; v2105++) {
        f426(v2121[v2105], 349);
      }
      v2121 = world.units[64];
      v2105 = 0;
      for (; v2121.length > v2105; v2105++) {
        if ((v2121[v2105].info & 15) !== 0 && v2121[v2105].info !== 10) {
          f426(v2121[v2105]);
        }
      }
      v2117 = world.units[52];
      v2105 = 0;
      for (; v2105 < v2117.length; v2105++) {
        f427(v2117[v2105]);
      }
      v2123 = world.units[48];
      v2105 = 0;
      for (; v2105 < v2123.length; v2105++) {
        if ((v2123[v2105].info & 15) !== 0 && v2123[v2105].info !== 10) {
          f426(v2123[v2105]);
        }
      }
      v2124 = world.units[49];
      v2105 = 0;
      for (; v2124.length > v2105; v2105++) {
        if ((v2124[v2105].info & 15) !== 0 && v2124[v2105].info !== 10) {
          f426(v2124[v2105]);
        }
      }
      v2125 = world.units[46];
      v2105 = 0;
      for (; v2125.length > v2105; v2105++) {
        if ((v2125[v2105].info & 15) !== 0 && v2125[v2105].info !== 10) {
          f426(v2125[v2105]);
        }
      }
      var v2142 = world.units[93];
      for (v2105 = 0; v2105 < v2142.length; v2105++) {
        f426(v2142[v2105], 910, 916);
      }
      var v2143 = world.units[73];
      for (v2105 = 0; v2105 < v2143.length; v2105++) {
        f426(v2143[v2105], 856, 906);
      }
      var v2144 = world.units[72];
      for (v2105 = 0; v2144.length > v2105; v2105++) {
        f426(v2144[v2105], 892, 907);
      }
      var v2145 = world.units[68];
      for (v2105 = 0; v2105 < v2145.length; v2105++) {
        f426(v2145[v2105], 370, 444);
      }
      var v2146 = world.units[100];
      for (v2105 = 0; v2105 < v2146.length; v2105++) {
        f426(v2146[v2105], 1341, 1342);
      }
      var v2147 = world.units[70];
      for (v2105 = 0; v2105 < v2147.length; v2105++) {
        f426(v2147[v2105], 583, 600);
      }
      var v2148 = world.units[89];
      for (v2105 = 0; v2105 < v2148.length; v2105++) {
        f426(v2148[v2105], 1323, 1325);
      }
      var v2149 = world.units[84];
      for (v2105 = 0; v2105 < v2149.length; v2105++) {
        f426(v2149[v2105]);
      }
      var v2150 = world.units[75];
      for (v2105 = 0; v2150.length > v2105; v2105++) {
        f426(v2150[v2105], 1194, 1195);
      }
      var v2151 = world.units[78];
      for (v2105 = 0; v2151.length > v2105; v2105++) {
        f426(v2151[v2105]);
      }
      var v2152 = world.units[85];
      for (v2105 = 0; v2152.length > v2105; v2105++) {
        f426(v2152[v2105], 1609, 1610);
      }
      var v2153 = world.units[71];
      for (v2105 = 0; v2153.length > v2105; v2105++) {
        if (v2153[v2105].scale === 1) {
          f426(v2153[v2105], 587, 601);
        }
      }
      v2153 = world.units[76];
      v2105 = 0;
      for (; v2153.length > v2105; v2105++) {
        if (v2153[v2105].scale === 1) {
          f426(v2153[v2105], 588, 602);
        }
      }
      var v2154 = world.units[11];
      for (v2105 = 0; v2105 < v2154.length; v2105++) {
        f426(v2154[v2105]);
      }
      var v2155 = world.units[2];
      for (v2105 = 0; v2155.length > v2105; v2105++) {
        f426(v2155[v2105], 205);
      }
      v2110 = world.units[18];
      v2105 = 0;
      for (; v2105 < v2110.length; v2105++) {
        f426(v2110[v2105]);
      }
      var v2156 = world.units[43];
      for (v2105 = 0; v2156.length > v2105; v2105++) {
        f426(v2156[v2105]);
      }
      v2129 = world.units[10];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 268);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[15];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 273);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[16];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 274);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[17];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 275);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[21];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 215);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[60];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 328);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[54];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 322);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[55];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 323);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[56];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 324);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[57];
      v2105 = 0;
      for (; v2105 < v2129.length; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 325);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[58];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 326);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      v2129 = world.units[62];
      v2105 = 0;
      for (; v2129.length > v2105; v2105++) {
        if (!(v2129[v2105].info & 1)) {
          f426(v2129[v2105], 330);
        }
        v2129[v2105].ⵠᐃⲆⵠⲆ(v2129[v2105].info >> 1);
      }
      var v2157 = world.units[4];
      for (v2105 = 0; v2157.length > v2105; v2105++) {
        f426(v2157[v2105], 264);
        v2157[v2105].ⵠᐃⲆⵠⲆ(v2157[v2105].info);
      }
      v2157 = world.units[7];
      v2105 = 0;
      for (; v2105 < v2157.length; v2105++) {
        f426(v2157[v2105], 265);
        v2157[v2105].ⵠᐃⲆⵠⲆ(v2157[v2105].info);
      }
      v2157 = world.units[8];
      v2105 = 0;
      for (; v2105 < v2157.length; v2105++) {
        f426(v2157[v2105], 266);
        v2157[v2105].ⵠᐃⲆⵠⲆ(v2157[v2105].info);
      }
      v2157 = world.units[9];
      v2105 = 0;
      for (; v2157.length > v2105; v2105++) {
        f426(v2157[v2105], 267);
        v2157[v2105].ⵠᐃⲆⵠⲆ(v2157[v2105].info);
      }
      v2157 = world.units[19];
      v2105 = 0;
      for (; v2105 < v2157.length; v2105++) {
        f426(v2157[v2105], 213);
        v2157[v2105].ⵠᐃⲆⵠⲆ(v2157[v2105].info);
      }
      v2157 = world.units[59];
      v2105 = 0;
      for (; v2105 < v2157.length; v2105++) {
        f426(v2157[v2105], 327);
        v2157[v2105].ⵠᐃⲆⵠⲆ(v2157[v2105].info);
      }
      var v2158 = world.units[5];
      for (v2105 = 0; v2158.length > v2105; v2105++) {
        f426(v2158[v2105], 262);
        v2158[v2105].ⵠᐃⲆⵠⲆ(v2158[v2105].info);
      }
      v2158 = world.units[12];
      v2105 = 0;
      for (; v2158.length > v2105; v2105++) {
        f426(v2158[v2105], 270);
        v2158[v2105].ⵠᐃⲆⵠⲆ(v2158[v2105].info);
      }
      v2158 = world.units[13];
      v2105 = 0;
      for (; v2105 < v2158.length; v2105++) {
        f426(v2158[v2105], 271);
        v2158[v2105].ⵠᐃⲆⵠⲆ(v2158[v2105].info);
      }
      v2158 = world.units[14];
      v2105 = 0;
      for (; v2158.length > v2105; v2105++) {
        f426(v2158[v2105], 272);
        v2158[v2105].ⵠᐃⲆⵠⲆ(v2158[v2105].info);
      }
      v2158 = world.units[20];
      v2105 = 0;
      for (; v2105 < v2158.length; v2105++) {
        f426(v2158[v2105], 214);
        v2158[v2105].ⵠᐃⲆⵠⲆ(v2158[v2105].info);
      }
      v2158 = world.units[61];
      v2105 = 0;
      for (; v2158.length > v2105; v2105++) {
        f426(v2158[v2105], 329);
        v2158[v2105].ⵠᐃⲆⵠⲆ(v2158[v2105].info);
      }
      var v2159 = world.units[44];
      for (v2105 = 0; v2105 < v2159.length; v2105++) {
        var v2160 = v2159[v2105];
        if (v2160.info > 0) {
          f426(v2160, 1037);
        } else {
          f426(v2160, 284);
        }
      }
      var v2161 = world.units[38];
      for (v2105 = 0; v2161.length > v2105; v2105++) {
        f426(v2161[v2105], 261);
      }
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1756, "jus", 0, 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1756, "jus", 1, 1);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1756, "jus", 2, 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 202, "g", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 526, "gw", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 203, "d", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 527, "dw", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 201, "p", 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1757, "jub", 1, 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1739, "bap", 1, 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 351, "m", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 212, "a", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 304, "re", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 306, "cop", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 307, "iro", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 308, "top", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 309, "sap", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 310, "jad", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 311, "rub", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 313, "aqu", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 312, "coa", 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 898, "cs", 3, 3);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 898, "cs", 2, 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 898, "cs", 1, 1);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 898, "cs", 0, 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 895, "cs", 3, 3);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 895, "cs", 2, 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 895, "cs", 1, 1);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 895, "cs", 0, 0);
      var v2162 = world.units[105];
      for (v2105 = 0; v2105 < v2162.length; v2105++) {
        for (v2108 = 0; v2162[v2105].info > v2108; v2108++) {
          f426(v2162[v2105].ᐃᐃᐃᐃ[v2108], 404);
        }
      }
      v2162 = world.units[106];
      v2105 = 0;
      for (; v2105 < v2162.length; v2105++) {
        for (v2108 = 0; v2108 < v2162[v2105].info; v2108++) {
          f426(v2162[v2105].ᐃᐃᐃᐃ[v2108], 405);
        }
      }
      v2162 = world.units[104];
      v2105 = 0;
      for (; v2105 < v2162.length; v2105++) {
        for (v2108 = 0; v2108 < v2162[v2105].info; v2108++) {
          f426(v2162[v2105].ᐃᐃᐃᐃ[v2108], 1759);
        }
      }
      f414(f405, vV2002, vV2003, vV2000, vV2001, 199, "s", 2);
      var v2163 = world.units[24];
      for (v2105 = 0; v2163.length > v2105; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[25];
      v2105 = 0;
      for (; v2105 < v2163.length; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[26];
      v2105 = 0;
      for (; v2163.length > v2105; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[27];
      v2105 = 0;
      for (; v2163.length > v2105; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[28];
      v2105 = 0;
      for (; v2105 < v2163.length; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[29];
      v2105 = 0;
      for (; v2163.length > v2105; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[30];
      v2105 = 0;
      for (; v2105 < v2163.length; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[31];
      v2105 = 0;
      for (; v2105 < v2163.length; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[32];
      v2105 = 0;
      for (; v2105 < v2163.length; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[33];
      v2105 = 0;
      for (; v2163.length > v2105; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[34];
      v2105 = 0;
      for (; v2105 < v2163.length; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[35];
      v2105 = 0;
      for (; v2105 < v2163.length; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[36];
      v2105 = 0;
      for (; v2105 < v2163.length; v2105++) {
        f426(v2163[v2105]);
      }
      v2163 = world.units[37];
      v2105 = 0;
      for (; v2163.length > v2105; v2105++) {
        f426(v2163[v2105]);
      }
      var v2164 = world.units[41];
      for (v2105 = 0; v2164.length > v2105; v2105++) {
        f420(v2164[v2105]);
      }
      v2111 = world.units[1];
      v2105 = 0;
      for (; v2105 < v2111.length; v2105++) {
        f427(v2111[v2105]);
      }
      v2111 = world.units[6];
      v2105 = 0;
      for (; v2111.length > v2105; v2105++) {
        f427(v2111[v2105]);
      }
      v2110 = world.units[18];
      v2105 = 0;
      for (; v2110.length > v2105; v2105++) {
        if (v2110[v2105].action == 2) {
          f427(v2110[v2105]);
        }
      }
      v2156 = world.units[43];
      v2105 = 0;
      for (; v2156.length > v2105; v2105++) {
        f427(v2156[v2105]);
      }
      v2112 = world.units[22];
      v2105 = 0;
      for (; v2105 < v2112.length; v2105++) {
        f427(v2112[v2105]);
      }
      v2113 = world.units[23];
      v2105 = 0;
      for (; v2105 < v2113.length; v2105++) {
        f427(v2113[v2105]);
        v2113[v2105].ⵠᐃⲆⵠⲆ(v2113[v2105].info);
      }
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1265, "c", 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 200, "t", 5, 4);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 524, "f", 2, 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 912, "plm", 0, 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 418, "b", 3, 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 200, "t", 3, 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1755, "jut", 4, 4);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 418, "b", 1, 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 524, "f", 1, 1);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 912, "plm", 1, 1);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 200, "t", 1, 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1755, "jut", 3, 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 524, "f", 0, 0);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 912, "plm", 2, 2);
      f414(f405, vV2002, vV2003, vV2000, vV2001, 1755, "jut", 1, 0);
      v2164 = world.units[41];
      v2105 = 0;
      for (; v2105 < v2164.length; v2105++) {
        f427(v2164[v2105]);
      }
      var v2165 = world.units[65];
      for (v2105 = 0; v2165.length > v2105; v2105++) {
        f426(v2165[v2105], 331);
      }
      v2106 = world.units[0];
      v2105 = 0;
      for (; v2105 < v2106.length; v2105++) {
        if ((v2107 = v2106[v2105]).ᐃⵠⵠΔΔᐃⲆ === 1 && (v2107.ΔⲆΔⲆⵠ < 180 || v2107.ⲆⲆⲆⵠ !== 337 && v2107.ⲆⲆⲆⵠ !== 338 && v2107.ⲆⲆⲆⵠ !== 164 && v2107.ⲆⲆⲆⵠ !== 355 && v2107.ⲆⲆⲆⵠ !== 354 && v2107.ⲆⲆⲆⵠ !== 358 && v2107.ⲆⲆⲆⵠ !== 339 && v2107.ⲆⲆⲆⵠ !== 340)) {
          v2107.ΔⵠⵠΔᐃⵠΔ = Δᐃᐃ.ΔΔⵠᐃⵠ(v2107.ΔⵠⵠΔᐃⵠΔ, 100, 0.018);
          v2133 = 1 + Math.min(1, Math.max(v2107.ΔⵠⵠΔᐃⵠΔ, 0) / 100) * 0.18;
          v405.save();
          v405.scale(v2133, v2133);
          user.ᐃⵠⵠ.x /= v2133;
          user.ᐃⵠⵠ.y /= v2133;
          v2107.x /= v2133;
          v2107.y /= v2133;
          v2107.r.x /= v2133;
          v2107.r.y /= v2133;
          v2107.ΔⲆⲆⵠᐃⵠⵠ();
          v2107.ⲆΔᐃΔ();
          user.ᐃⵠⵠ.x *= v2133;
          user.ᐃⵠⵠ.y *= v2133;
          v2107.x *= v2133;
          v2107.y *= v2133;
          v2107.r.x *= v2133;
          v2107.r.y *= v2133;
          v405.restore();
        }
      }
      var v2166 = world.units[47];
      for (v2105 = 0; v2166.length > v2105; v2105++) {
        f426(v2166[v2105], 292);
        v2166[v2105].ⵠᐃⲆⵠⲆ(v2166[v2105].info);
      }
      var v2167 = world.units[102];
      for (v2105 = 0; v2105 < v2167.length; v2105++) {
        f426(v2167[v2105], 355, 356);
      }
      var v2168 = world.units[51];
      for (v2105 = 0; v2105 < v2168.length; v2105++) {
        f426(v2168[v2105], 303);
      }
      v2106 = world.units[0];
      v2105 = 0;
      for (; v2105 < v2106.length; v2105++) {
        v2107 = v2106[v2105];
        if ((v2107.ⲆⲆⲆⵠ === 337 || v2107.ⲆⲆⲆⵠ === 338 || v2107.ⲆⲆⲆⵠ === 164 || v2107.ⲆⲆⲆⵠ === 355 || v2107.ⲆⲆⲆⵠ === 354 || v2107.ⲆⲆⲆⵠ === 358 || v2107.ⲆⲆⲆⵠ === 339 || v2107.ⲆⲆⲆⵠ === 340) && v2107.ΔⲆΔⲆⵠ > 180) {
          v2107.ᐃᐃⲆᐃΔⵠⲆ = 1;
          v405.save();
          v2133 = 1 + Math.min(1, Math.max(v2107.ᐃᐃⲆⲆΔ - 30, 0) / 180) * 0.35;
          v405.scale(v2133, v2133);
          user.ᐃⵠⵠ.x /= v2133;
          user.ᐃⵠⵠ.y /= v2133;
          v2107.x /= v2133;
          v2107.y /= v2133;
          v2107.r.x /= v2133;
          v2107.r.y /= v2133;
          v2107.ΔⲆⲆⵠᐃⵠⵠ();
          v2107.ⲆΔᐃΔ();
          user.ᐃⵠⵠ.x *= v2133;
          user.ᐃⵠⵠ.y *= v2133;
          v2107.x *= v2133;
          v2107.y *= v2133;
          v2107.r.x *= v2133;
          v2107.r.y *= v2133;
          v405.restore();
        }
      }
      v2132 = world.units[103];
      v2105 = 0;
      for (; v2132.length > v2105; v2105++) {
        if (v2132[v2105].ᐃᐃⲆᐃΔⵠⲆ === 1) {
          f426(v2132[v2105]);
        }
      }
      v2153 = world.units[71];
      v2105 = 0;
      for (; v2153.length > v2105; v2105++) {
        if (v2153[v2105].scale > 1) {
          f426(v2153[v2105], 587, 601);
        }
      }
      v2153 = world.units[76];
      v2105 = 0;
      for (; v2153.length > v2105; v2105++) {
        if (v2153[v2105].scale > 1) {
          f426(v2153[v2105], 588, 602);
        }
      }
      var v2169 = world.units[86];
      for (v2105 = 0; v2169.length > v2105; v2105++) {
        f426(v2169[v2105], 1446, 1454);
      }
      var v2170 = world.units[81];
      for (v2105 = 0; v2170.length > v2105; v2105++) {
        f426(v2170[v2105], 345, 1415);
      }
      var v2171 = world.units[82];
      for (v2105 = 0; v2171.length > v2105; v2105++) {
        f426(v2171[v2105], 348, 1436);
      }
      if ((v1954 += v3064 * 15) > 60) {
        v1954 -= 60;
      }
      f414(f403, vV2002, vV2003, vV2000, vV2001, 1349, "fo", 2);
      f414(f403, vV2002, vV2003, vV2000, vV2001, 354, "fod", 2);
    })();
    if (v2833.ⲆΔⲆΔΔ && world.mode !== 2 && world.mode !== 5) {
      (function () {
        var v2172 = user.ⲆⵠⲆⲆⲆ;
        if (v2172.ⲆⲆΔⲆΔ === 0) {
          v2172.ⲆᐃᐃⲆᐃ = Math.max(0, v2172.ⲆᐃᐃⲆᐃ - v3064 / 10);
        } else {
          v2172.ⲆᐃᐃⲆᐃ = Math.min(1, v2172.ⲆᐃᐃⲆᐃ + v3064 / 10);
        }
        for (var v2173 = v2172.ΔΔⵠⵠᐃ, v2174 = 0; v2173.length > v2174; v2174++) {
          var v2175 = v2173[v2174];
          v2172.ⵠᐃᐃ(v2175);
          f424(609, v2175.id, user.ᐃⵠⵠ.x + v2175.x, user.ᐃⵠⵠ.y + v2175.y, v2175.alpha);
        }
        for (v2174 = 0; v2173.length > v2174; v2174++) {
          if ((v2175 = v2173[v2174]).ᐃⵠᐃΔᐃ <= 0 || -user.ᐃⵠⵠ.x + v406 < v2175.x || -user.ᐃⵠⵠ.x - user.ᐃⵠⵠ.w / 2 > v2175.x || v2175.y > -user.ᐃⵠⵠ.y + v408) {
            v2173.splice(v2174, 1);
          }
        }
        var v2176 = -user.ᐃⵠⵠ.y;
        if (world.ⲆᐃΔⵠᐃ > -1000) {
          v2172.add(v2176);
        }
      })();
      (function () {
        var v2177 = user.ⵠⵠᐃⵠΔ;
        if (v2177.ⲆⲆΔⲆΔ === 0) {
          v2177.ⲆᐃᐃⲆᐃ = Math.max(0, v2177.ⲆᐃᐃⲆᐃ - v3064 / 10);
        } else {
          v2177.ⲆᐃᐃⲆᐃ = Math.min(1, v2177.ⲆᐃᐃⲆᐃ + v3064 / 10);
        }
        for (var v2178 = v2177.ΔΔⵠⵠᐃ, v2179 = 0; v2178.length > v2179; v2179++) {
          var v2180 = v2178[v2179];
          v2177.ⵠᐃᐃ(v2180);
          f424(608, v2180.id, user.ᐃⵠⵠ.x + v2180.x, user.ᐃⵠⵠ.y + v2180.y, v2180.alpha);
        }
        for (v2179 = 0; v2179 < v2178.length; v2179++) {
          v2180 = v2178[v2179];
          if (v2180.ᐃⵠᐃΔᐃ <= 0 || v2180.x > -user.ᐃⵠⵠ.x + v406 || v2180.x < -user.ᐃⵠⵠ.x || v2180.y > -user.ᐃⵠⵠ.y + v408) {
            v2178.splice(v2179, 1);
          }
        }
        var v2181 = -user.ᐃⵠⵠ.y;
        if (world.ΔⵠΔⲆⲆ > -1000) {
          v2177.add(v2181);
        }
      })();
      (function () {
        var v2182 = user.ΔⵠⵠⵠΔΔΔ;
        for (var v2183 = v2182.ΔΔⵠⵠᐃ, v2184 = 0; v2184 < v2183.length; v2184++) {
          var v2185 = v2183[v2184];
          v2182.ⵠᐃᐃ(v2185);
          f424(1218, v2185.id, user.ᐃⵠⵠ.x + v2185.x, user.ᐃⵠⵠ.y + v2185.y, v2185.alpha);
        }
        for (v2184 = 0; v2184 < v2183.length; v2184++) {
          if ((v2185 = v2183[v2184]).ᐃⵠᐃΔᐃ <= 0 || v2185.x > -user.ᐃⵠⵠ.x + v406 || v2185.x < -user.ᐃⵠⵠ.x || -user.ᐃⵠⵠ.y + v408 < v2185.y) {
            v2183.splice(v2184, 1);
          }
        }
        var v2186 = -user.ᐃⵠⵠ.y;
        if (world.ᐃⵠᐃⵠᐃ > -1000) {
          v2182.add(v2186);
        }
      })();
    }
    if (world.transition && v2088) {
      world.transition = vVVV143;
      world.ΔⵠⵠΔ.Ⲇⵠⵠ = 0;
      world.ΔⵠⵠΔ.ΔⲆΔ = vV143;
    }
  }
  function f419(p1310, p1311, p1312, p1313, p1314, p1315) {
    var v2187 = p1313.w1;
    var v2188 = p1313.w2;
    var v2189 = p1313.w3;
    var v2190 = user.ᐃⵠⵠ.y + p1310 - 700;
    var v2191 = Math.max(user.ᐃⵠⵠ.x + p1311, 0);
    var v2192 = Math.max(-user.ᐃⵠⵠ.x + v406 - p1312 - 100, 0);
    var vV2191 = v2191;
    var v2193 = v406 - v2191 - v2192;
    if (p1315) {
      var v2194 = p1313.ᐃⵠⲆ(v2187);
    } else {
      v2194 = v2187.r;
    }
    var v2195 = v2190 + 0;
    var vVV2191 = vV2191;
    var vV2195 = v2195;
    var v2196 = v2194.x + 0;
    var vV2193 = v2193;
    var v2197 = v2195 += v2194.x + 0 - 2;
    if (p1315) {
      v2194 = p1313.ᐃⵠⲆ(v2188);
    } else {
      v2194 = v2188.r;
    }
    var v2198 = v2190 + 250 - v2195 + v2194.x;
    var vV21952 = v2195;
    var vVV21912 = vV2191;
    var vV2198 = v2198;
    var vV21932 = v2193;
    var v2199 = (v2195 += v2198 - 2) - 2;
    if (p1315) {
      v2194 = p1313.ᐃⵠⲆ(v2189);
    } else {
      v2194 = v2189.r;
    }
    if (v2195 + (v2198 = v2190 + 350 - v2195 + v2194.x) - 3 > v2199) {
      var vVVVV6323 = vVVV632;
      var vV21953 = v2195;
      var vVV21913 = vV2191;
      var vV21982 = v2198;
      var vV21933 = v2193;
      var v2200 = v2195 += v2198 - 2;
    } else {
      vVVVV6323 = false;
      v2195 = v2199;
      v2200 = -1;
    }
    v2198 = v2190 + 700 - v2195;
    if (world.transition) {
      var v2201 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2201);
    } else {
      v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
    }
    v405.fillRect(vVV2191, vV2195, vV2193, v2196);
    if (p1315) {
      if (world.transition) {
        v2201 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(15, 70, 76, 42, 139, 155, v2201);
      } else {
        v405.fillStyle = v585.ⵠⵠΔΔⵠΔΔ[world.time];
      }
    } else if (world.transition) {
      v2201 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2201);
    } else {
      v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
    }
    v405.fillRect(vVV21912, vV21952, vV21932, vV2198);
    if (vVVVV6323) {
      if (p1315) {
        if (world.transition) {
          v2201 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
          v405.fillStyle = f409(17, 94, 96, 169, 214, 211, v2201);
        } else {
          v405.fillStyle = v585.ᐃⵠⲆᐃΔⵠᐃ[world.time];
        }
      } else if (world.transition) {
        v2201 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(9, 55, 63, 11, 106, 132, v2201);
      } else {
        v405.fillStyle = v585.ⲆⵠΔⵠᐃ[world.time];
      }
      v405.fillRect(vVV21913, vV21953, vV21933, vV21982);
    }
    if (v2833.ⲆΔⲆΔΔ && p1315) {
      p1313.ᐃΔⲆΔᐃⲆΔⵠⲆ(v2199, v2200, v2197, v2190, -user.ᐃⵠⵠ.x + vVV2191, -user.ᐃⵠⵠ.x + vVV2191 + vV2193);
    }
  }
  function f420(p1316, p1317) {
    if (world.transition) {
      v405.globalAlpha = 1;
      p1316.ΔⵠⵠⲆⵠΔⲆ(p1317);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      p1316.ΔⵠⵠⲆⵠΔⲆ(p1317);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1;
    } else {
      p1316.ΔⵠⵠⲆⵠΔⲆ(p1317);
    }
  }
  function f421(p1318, p1319, p1320, p1321, p1322) {
    var v2202 = p1320.width;
    var v2203 = p1320.height;
    var v2204 = Math.floor(v2202 / 2);
    var v2205 = Math.floor(v2203 / 2);
    if (world.transition) {
      v405.globalAlpha = 1;
      f295(v405, ᐃᐃ[p1318][p1319][world.time], 0, 0, v2202, v2203, p1321, p1322, v2204, v2205);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      f295(v405, ᐃᐃ[p1318][p1319][world.time], 0, 0, v2202, v2203, p1321, p1322, v2204, v2205);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1;
    } else {
      f295(v405, ᐃᐃ[p1318][p1319][world.time], 0, 0, v2202, v2203, p1321, p1322, v2204, v2205);
    }
  }
  function f422(p1323) {
    v405.save();
    v405.translate(user.ᐃⵠⵠ.x + p1323.x, user.ᐃⵠⵠ.y + p1323.y);
    v405.rotate(p1323.angle);
    v405.globalAlpha = p1323.alpha;
    var v2206 = ᐃᐃ[p1323.id][world.time];
    f295(v405, v2206, -v2206.width / 2, -v2206.height / 2);
    v405.globalAlpha = 1;
    v405.restore();
  }
  function f423(p1324, p1325, p1326, p1327, p1328, p1329) {
    var v2207 = p1327.w1;
    var v2208 = p1327.w2;
    var v2209 = p1327.w3;
    var v2210 = user.ᐃⵠⵠ.y + p1324 + 710;
    var v2211 = Math.max(user.ᐃⵠⵠ.x + p1325, 0);
    var v2212 = Math.max(-user.ᐃⵠⵠ.x + v406 - p1326 - 100, 0);
    var vV2211 = v2211;
    var v2213 = v406 - v2211 - v2212;
    if (p1329) {
      var v2214 = p1327.ᐃⵠⲆ(v2207).x;
    } else {
      v2214 = v2207.r.x;
    }
    var v2215 = v2210 + 0;
    0;
    v2215 += -v2214 + 0 + 2;
    if (p1329) {
      v2214 = p1327.ᐃⵠⲆ(v2208).x;
    } else {
      v2214 = v2208.r.x;
    }
    var v2216 = v2210 - 250 - v2215 - v2214;
    var v2217 = (v2215 += v2216 + 2) - 2;
    if (p1329) {
      v2214 = p1327.ᐃⵠⲆ(v2209).x;
    } else {
      v2214 = v2209.r.x;
    }
    if (v2217 > v2215 + (v2216 = v2210 - 350 - v2215 - v2214)) {
      v2215 += v2216 + 2;
    } else {
      v2215 = v2217;
    }
    v2216 = v2210 - 700 - v2215;
    if (p1329 > 0 && p1328.ⵠⵠΔⲆⲆⲆᐃ === 1) {
      if (world.transition) {
        var v2218 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(15, 77, 72, 252, 239, 187, v2218);
      } else {
        v405.fillStyle = v585.ᐃᐃΔΔΔⲆⵠ[world.time];
      }
      v405.fillRect(vV2211, v2215, v2213, v2216);
    } else {
      if (world.transition) {
        v2218 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
        v405.fillStyle = f409(p1328.ᐃᐃΔ[0], p1328.ᐃᐃΔ[1], p1328.ᐃᐃΔ[2], p1328.Δⵠⵠ[0], p1328.Δⵠⵠ[1], p1328.Δⵠⵠ[2], v2218);
      } else {
        v405.fillStyle = p1328.ᐃΔⲆΔⵠ[world.time];
      }
      v405.fillRect(vV2211, v2215, v2213, v2216);
    }
  }
  function f424(p1330, p1331, p1332, p1333, p1334) {
    if (world.transition && p1334 == 1) {
      v405.globalAlpha = 1;
      f295(v405, ᐃᐃ[p1330][world.time][p1331], p1332, p1333);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      f295(v405, ᐃᐃ[p1330][world.time][p1331], p1332, p1333);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1;
    } else {
      v405.globalAlpha = p1334;
      f295(v405, ᐃᐃ[p1330][world.time][p1331], p1332, p1333);
      v405.globalAlpha = 1;
    }
  }
  function f425(p1335, p1336, p1337, p1338) {
    var v2219 = p1336.width;
    var v2220 = p1336.height;
    var v2221 = Math.floor(v2219 / 2);
    var v2222 = Math.floor(v2220 / 2);
    if (world.transition) {
      v405.globalAlpha = 1;
      f295(v405, ᐃᐃ[p1335][world.time], 0, 0, v2219, v2220, p1337, p1338, v2221, v2222);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      f295(v405, ᐃᐃ[p1335][world.time], 0, 0, v2219, v2220, p1337, p1338, v2221, v2222);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1;
    } else {
      f295(v405, p1336, 0, 0, v2219, v2220, p1337, p1338, v2221, v2222);
    }
  }
  function f426(p1339, p1340, p1341) {
    if (world.transition) {
      v405.globalAlpha = 1;
      p1339.ⲆΔᐃΔ(p1340, p1341);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      p1339.ⲆΔᐃΔ(p1340, p1341);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1;
    } else {
      p1339.ⲆΔᐃΔ(p1340, p1341);
    }
  }
  function f427(p1342, p1343) {
    if (world.transition) {
      v405.globalAlpha = 1;
      p1342.ᐃᐃΔⲆⵠ(p1343);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ;
      p1342.ᐃᐃΔⲆⵠ(p1343);
      world.time = world.time ? 0 : 1;
      v405.globalAlpha = 1;
    } else {
      p1342.ᐃᐃΔⲆⵠ(p1343);
    }
  }
  var v2223 = 0;
  var v2224 = 1;
  var v2225 = 2;
  var v2226 = 2;
  function f428(p1344, p1345, p1346, p1347, p1348) {
    v66(vVVVVVUndefined582, p1344, p1345, p1346, p1347, p1348);
    const vF48 = function (p1349, p1350) {
      vVVVUndefined59(vVVVVVUndefined582, p1349, p1350);
      const vF78 = f78(v372[0], v372[1], v372[0], v372[1]);
      const vF412 = f41(v372[0], v372[1]);
      return (24 << ((vF78 ^ vF412) & 255)) + (8 << ((vF78 ^ vF412) >> 8 & 255)) + (16 << ((vF78 ^ vF412) >> 16 & 255)) + (0 << ((vF78 ^ vF412) >> 24 & 255));
    }(v372[0], v372[1]);
    f516(v372[2], v372[3], v372[4], v372[0], v372[1], v372[2]);
    return vF48 ^ 21254;
  }
  function f429(p1351, p1352) {
    var v2227 = p1351.getBoundingClientRect();
    return {
      x: p1352.clientX - v2227.left,
      y: p1352.clientY - v2227.top
    };
  }
  function f430(p1353, p1354, p1355, p1356, p1357, p1358, p1359, p1360, p1361, p1362, p1363, p1364, p1365, p1366, p1367) {
    if (p1353.length === 0) {
      p1353 = " ";
    }
    if (vVUndefined === p1359) {
      p1359 = 0;
    }
    if (p1360 === undefined) {
      p1360 = 0;
    }
    if (p1361 === undefined) {
      p1361 = 0;
    }
    if (p1366 === undefined) {
      p1366 = 0;
    }
    var v2228 = document.createElement("canvas");
    var v2229 = v2228.getContext("2d");
    v2229.textBaseline = "middle";
    v2229.font = (p1367 !== undefined ? p1367 + " " : "") + p1356 + "px " + p1354;
    p1357 = p1357 !== undefined ? Math.min(v2229.measureText(p1353).width, p1357) : v2229.measureText(p1353).width;
    v2228.width = p1357 + p1359;
    v2228.height = p1356 + p1360;
    if (p1358 !== vVVVUndefined58) {
      if (p1363 !== vVVVVUndefined583) {
        v2229.globalAlpha = p1363;
      }
      v2229.fillStyle = p1358;
      if (vVVVVVUndefined583 !== p1364) {
        ⲆⲆᐃΔᐃΔⵠⵠᐃ(v2229, p1361 + 2, p1361, p1357 + p1359 - p1361 * 2 - 4, p1356 + p1360 - p1361 * 2, p1364);
        v2229.fill();
      } else {
        v2229.fillRect(p1361, p1361, p1357 + p1359 - p1361 * 2, p1356 + p1360 - p1361 * 2);
      }
      v2229.globalAlpha = 1;
      if (p1361 !== 0) {
        v2229.lineWidth = p1361;
        v2229.strokeStyle = p1362;
        v2229.stroke();
      }
    }
    v2229.textBaseline = "middle";
    v2229.font = (p1367 !== undefined ? p1367 + " " : "") + p1356 + "px " + p1354;
    if (p1365 !== undefined) {
      v2229.strokeStyle = p1365;
      v2229.lineWidth = p1366;
      v2229.lineJoin = "miter";
      v2229.miterLimit = 2;
      v2229.strokeText(p1353, Math.floor(p1359 / 2), Math.floor(p1360 / 2) + Math.floor(p1356 / 2), p1357);
    }
    v2229.fillStyle = p1355;
    v2229.fillText(p1353, Math.floor(p1359 / 2), Math.floor(p1360 / 2) + Math.floor(p1356 / 2), p1357);
    v2228.w2 = v2228.width / 2;
    v2228.ᐃⲆⵠⵠⲆ = v2228.height / 2;
    return v2228;
  }
  function f431(p1368, p1369, p1370, p1371, p1372, p1373, p1374, p1375, p1376, p1377, p1378) {
    if (p1376 === vVVVUndefined14) {
      p1376 = 0;
    }
    if (p1375 === undefined) {
      p1375 = 0;
    }
    if (p1377 === undefined) {
      p1377 = 0;
    }
    if (vVVVVUndefined583 === p1378) {
      p1378 = 1;
    }
    if (p1373 !== 1) {
      p1373 = 0;
    }
    if (p1371) {
      var vP1371 = p1371;
    }
    var v2230;
    var v2231 = {
      width: p1368,
      height: p1369,
      Δⵠ: vP1371,
      state: 0,
      translate: {
        x: p1375,
        y: p1376,
        ⲆⲆⲆΔⲆ: p1375,
        ΔΔΔΔᐃ: p1376
      },
      ⲆᐃⵠΔΔΔΔΔΔ: p1373,
      ᐃⲆⵠᐃ: 0,
      callback: p1374,
      position: p1377,
      active: p1378
    };
    function f432() {
      return v2231.Δⵠ[0];
    }
    function f433(p1379) {
      var v2232 = v2231.translate;
      if (v2231.width === 0 || v2231.height === 0) {
        v2231.width = v2231.Δⵠ[0].width;
        v2231.height = v2231.Δⵠ[0].height;
      }
      return p1379.x > v2232.x && p1379.x < v2232.x + v2231.width / p1372 && p1379.y > v2232.y && p1379.y < v2232.y + v2231.height / p1372;
    }
    p1373 = function () {
      var v2233 = 0;
      if (v2231.ⲆᐃⵠΔΔΔΔΔΔ === 1) {
        if (1 === 0 || v2226 === 0) {
          v2231.ᐃⲆⵠᐃ = (0 + v3064 * 1000) % 1000;
        } else if (0 < 0) {
          v2231.ᐃⲆⵠᐃ = 500 < 0 ? 0 + v3064 * 1000 : 0 - v3064 * 1000;
          if (0 < 0 || 0 > 1000) {
            v2231.ᐃⲆⵠᐃ = 0;
          }
        }
        v2233 = Δᐃᐃ.ΔⲆⲆⲆⲆ(500 < 0 ? 2 : 0) * 0.2;
      }
      return v2233;
    };
    if ((p1372 = p1372 === 3 ? 3 : p1372 === 1 ? 2 : 1) === 2) {
      v2230 = function (p1380) {
        var v2234 = 1 + p1373();
        var vF432 = f432();
        var v2235 = v2231.width * v2234 / 2;
        var v2236 = v2234 * v2231.height / 2;
        var v2237 = (v2235 - v2231.width / 2) / 2;
        var v2238 = (v2236 - v2231.height / 2) / 2;
        f295(p1380, vF432, v2231.translate.x - v2237, v2231.translate.y - v2238, v2235, v2236);
      };
    } else if (p1372 === 3) {
      v2230 = function (p1381) {
        var vF4322 = f432();
        var v2239 = v2231.width;
        var v2240 = v2231.height;
        var v2241 = (v2239 - v2231.width) / 2;
        var v2242 = (v2240 - v2231.height) / 2;
        f295(p1381, vF4322, v2231.translate.x - v2241, v2231.translate.y - v2242, v2239, v2240);
      };
      p1372 = 1;
    } else {
      v2230 = function (p1382) {
        f295(p1382, f432(), v2231.translate.x, v2231.translate.y);
      };
    }
    return {
      info: v2231,
      ᐃᐃⲆⵠ: function (p1383, p1384, p1385) {
        if (f433(p1384)) {
          if (v2224 == p1385) {
            v2231.state = v2226;
          } else if (v2225 == p1385 || v2223 == p1385 && v2226 != 0) {
            v2231.state = 1;
          }
          return vVVV623;
        } else {
          v2231.state = 0;
          return vVVV145;
        }
      },
      ⲆΔᐃΔ: v2230,
      ΔⵠⵠⲆⵠΔⵠ: f433
    };
  }
  function f434(p1386, p1387, p1388, p1389, p1390) {
    var v2243 = {
      x: p1388,
      y: p1389,
      ⲆⲆⲆΔⲆ: p1388,
      ΔΔΔΔᐃ: p1389
    };
    return {
      translate: v2243,
      ⲆΔᐃΔ: function (p1391) {
        f295(p1391, p1386, v2243.x, v2243.y, p1386.width / 2, p1386.height / 2);
      },
      active: p1387,
      position: p1390
    };
  }
  var v2244 = "send";
  var v2245 = Δᐃᐃ.ⲆⵠⵠΔΔᐃᐃ("id") === "1" ? 1 : 0;
  var v2246 = Δᐃᐃ.ⲆⵠⵠΔΔᐃᐃ("password");
  var v2247 = Δᐃᐃ.ⲆⵠⵠΔΔᐃᐃ("debug") || vVVVVUndefined14;
  if (v2247 !== vVVVVUndefined583) {
    v2247 = JSON.parse(vWindow.decodeURIComponent(v2247));
  }
  var v2248 = Δᐃᐃ.ⲆⵠⵠΔΔᐃᐃ("server") || vVVVVVUndefined583;
  var v2249 = Δᐃᐃ.ⲆⵠⵠΔΔᐃᐃ("region") || vVVVVUndefined582;
  var v2250 = "starve.io";
  var v2251 = "https://" + v2250;
  var v2252 = {
    ⵠⲆᐃᐃΔⲆⵠ: 256,
    IDLE: 64,
    ΔⵠΔⲆⵠⵠⵠ: 8,
    ⲆⲆⲆᐃΔⵠΔ: 128,
    ⲆᐃᐃⵠⲆᐃⵠ: 32,
    ⲆΔⵠⵠ: 2,
    ⵠⲆᐃⵠᐃᐃᐃ: 16,
    ⵠᐃᐃⵠᐃ: 4,
    ᐃᐃΔⲆᐃᐃⲆⲆΔ: 1
  };
  var v2253 = [{
    ⲆΔⲆΔᐃ: 1000,
    items: [[2, 204], [1, 208], [8, 201], [1, 236]]
  }, {
    ⲆΔⲆΔᐃ: 2000,
    items: [[2, 209], [1, 8], [2, 208], [16, 201], [2, 236]]
  }, {
    ⲆΔⲆΔᐃ: 4000,
    items: [[3, 209], [1, 1], [4, 208], [20, 201], [4, 236], [1, 205], [80, 199], [140, 200]]
  }, {
    ⲆΔⲆΔᐃ: 8000,
    items: [[1, 47], [4, 209], [1, 3], [6, 208], [30, 201], [6, 236], [1, 205], [150, 199], [200, 200], [60, 202], [2, 218]]
  }, {
    ⲆΔⲆΔᐃ: 16000,
    items: [[1, 47], [1, 4], [1, 300], [7, 229], [2, 218], [2, 209], [1, 210], [15, 265], [2, 273], [1, 261], [1, 101], [200, 199], [300, 200]]
  }, {
    ⲆΔⲆΔᐃ: 16000,
    items: [[1, 47], [1, 11], [1, 86], [1, 3], [10, 229], [4, 218], [6, 209], [3, 297], [1, 46], [200, 199], [300, 200]]
  }, {
    ⲆΔⲆΔᐃ: 16000,
    items: [[1, 47], [1, 156], [1, 63], [3, 297], [1, 0], [1, 3], [7, 229], [2, 218], [4, 209], [150, 199], [200, 200], [1, 260]]
  }, {
    ⲆΔⲆΔᐃ: 16000,
    items: [[1, 47], [1, 157], [1, 3], [7, 229], [2, 218], [4, 209], [2, 228], [4, 237], [10, 234], [6, 225], [4, 206], [1, 85], [500, 200]]
  }, {
    ⲆΔⲆΔᐃ: 16000,
    items: [[1, 47], [1, 3], [16, 231], [1, 218], [6, 209], [3, 297], [1, 84], [1, 0], [16, 216], [150, 199], [200, 200]]
  }, {
    ⲆΔⲆΔᐃ: 20000,
    items: [[1, 47], [1, 3], [1, 229], [1, 218], [3, 209], [3, 297], [1, 35], [1, 5], [1, 15], [2, 271], [50, 199], [100, 200]]
  }];
  const v2254 = [];
  let v2255 = 0;
  var v2256 = {
    ⵠⲆᐃⵠᐃᐃᐃ: 0.2,
    ⵠⵠᐃⲆⲆⵠⲆⵠⵠ: 125000,
    ΔΔΔⵠᐃΔᐃⲆⲆ: 3,
    ΔΔⲆᐃⵠᐃⲆ: 4,
    ᐃⲆⵠᐃᐃᐃΔⵠⵠ: 50,
    ⲆⲆᐃΔⵠⲆΔ: 2,
    ⵠΔΔᐃⵠⲆΔⵠⲆ: 3,
    ΔΔᐃⵠΔⵠΔΔΔ: 200,
    ⲆΔⵠⲆᐃᐃᐃᐃΔ: "[15]",
    ΔⲆⲆᐃΔⵠⵠ: 4,
    ΔΔΔΔⵠᐃᐃᐃΔ: 0.58,
    ᐃⲆⲆⲆⲆᐃᐃ: 0,
    ᐃΔᐃⵠⲆΔΔ: 3,
    ΔⲆⵠⲆⵠⲆⵠ: 600000,
    ΔⵠⵠΔⵠᐃΔΔⵠ: 8000,
    ⵠⵠⵠᐃᐃⵠΔⵠⵠ: 5,
    ⵠⵠᐃⵠᐃⲆⲆⵠᐃ: 20,
    ΔⵠΔⵠⵠⲆΔᐃᐃ: 5,
    ⲆⲆⲆΔⲆⲆᐃⲆⲆ: 14,
    ΔⲆⵠⵠΔⲆᐃ: 0.2,
    ⵠΔΔΔⲆᐃⲆΔΔ: 2000,
    ⵠᐃⵠᐃᐃᐃⵠ: 52,
    ⵠᐃΔⵠⵠⵠΔⵠΔ: 60000,
    ᐃⲆΔᐃΔⵠΔⲆΔ: 14,
    ⵠⵠⲆΔᐃⲆΔ: 1
  };
  var v2257 = {
    ᐃⲆᐃ: 480000,
    ᐃΔΔᐃⲆᐃⵠ: 10,
    ⵠΔΔΔⲆΔΔ: 16,
    ⲆⵠΔⵠⲆᐃⵠ: 6,
    ⵠΔΔΔᐃᐃΔΔᐃ: 40,
    ⲆⵠⲆᐃⵠᐃⲆ: 60,
    ⵠΔΔᐃⲆ: 1,
    ΔⵠⵠΔⲆ: 2,
    ⲆᐃⵠᐃΔ: 4,
    ΔΔⲆⲆΔ: 8,
    ΔⲆⵠⵠΔⲆᐃ: 10,
    ΔⲆⲆⵠⵠΔⲆ: 100,
    ᐃΔΔⵠⲆᐃⵠ: 100,
    ΔⲆⵠⲆⲆⵠΔ: 100,
    ⵠⲆΔΔⲆⵠᐃⲆⲆ: 100,
    ᐃΔⵠᐃⲆΔᐃ: 100,
    ⲆⲆᐃΔⵠᐃΔ: 100,
    ⵠⲆⵠⲆᐃΔⵠΔⲆ: 100,
    ⲆⲆᐃΔⵠᐃΔ: 100,
    ⵠᐃⵠⵠᐃⵠΔ: 100,
    ⲆⵠΔⵠⲆⲆᐃ: 100,
    ⲆΔⲆⲆΔ: 0,
    ⲆⲆΔⵠΔᐃⵠ: 1,
    ⲆᐃᐃΔΔ: 2,
    ⲆⲆᐃⲆⵠ: 3,
    ⲆⲆⵠⲆⲆΔⲆ: 4,
    ⵠⵠⵠⵠⲆΔΔ: 5,
    ᐃⲆΔᐃⵠ: 6,
    ⲆΔⵠᐃΔ: 7,
    ΔⵠᐃⵠᐃⲆⵠⲆⲆ: {
      sydney: "Sydney",
      osaka: "Osaka",
      frankfurt: "Frankfurt",
      atlanta: "Atlanta",
      losangeles: "Los Angeles"
    },
    ΔΔᐃΔᐃΔⵠ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ⲆⵠⵠⵠⲆΔⲆ: 0,
    ⵠⲆΔᐃΔΔΔ: 0,
    ΔⵠⵠⵠⵠΔⵠ: 30,
    ᐃⲆⲆᐃⲆΔⵠᐃΔ: 2,
    ⲆⵠⲆᐃⵠᐃⲆ: 60000,
    ⲆᐃᐃᐃΔΔΔⵠⲆ: 0,
    ⲆⲆΔΔⲆᐃⲆⵠΔ: 0,
    ᐃⲆⵠΔⲆᐃΔⵠΔ: 50,
    ᐃΔⲆⲆΔⵠΔⵠΔ: 0,
    ᐃΔⲆΔΔⵠⲆⲆⵠ: 40,
    ᐃⵠⲆⵠΔⲆᐃᐃᐃ: 39,
    ᐃⲆᐃᐃᐃΔᐃᐃᐃ: 830,
    ⲆᐃⲆⵠⲆⵠⲆ: 25,
    ⵠⲆᐃᐃⵠⲆΔ: 8,
    ΔⵠᐃⲆⲆ: 0,
    ΔⵠΔⲆΔ: 0,
    ⲆᐃΔᐃΔⵠⵠ: 200,
    ΔᐃⲆΔⲆΔⵠ: 0,
    ΔⵠᐃᐃⲆ: 250,
    ⲆⲆᐃⵠΔᐃⵠ: 150,
    ΔⲆⲆⵠⲆⵠⲆ: 0,
    ⲆΔΔᐃΔ: 350,
    ⲆᐃⵠⵠΔᐃⲆ: 100,
    ⵠⲆᐃᐃⲆΔⲆ: 700,
    ⲆᐃⲆΔⵠ: 39879
  };
  var v2258 = [];
  for (v770 = 0; v770 < 1000; v770++) {
    v2258[v770] = 0;
  }
  v2258[83] = 1;
  v2258[103] = 1;
  v2258[0] = 1;
  v2258[5] = 1;
  v2258[6] = 1;
  v2258[48] = 1;
  v2258[28] = 1;
  v2258[9] = 1;
  v2258[108] = 1;
  v2258[109] = 1;
  v2258[110] = 1;
  v2258[111] = 1;
  v2258[112] = 1;
  v2258[113] = 1;
  v2258[114] = 1;
  v2258[115] = 1;
  v2258[116] = 1;
  v2258[117] = 1;
  v2258[118] = 1;
  v2258[13] = 1;
  v2258[14] = 1;
  v2258[15] = 1;
  v2258[60] = 1;
  v2258[61] = 1;
  v2258[16] = 1;
  v2258[17] = 1;
  v2258[12] = 1;
  v2258[18] = 1;
  v2258[19] = 1;
  v2258[20] = 1;
  v2258[21] = 1;
  v2258[22] = 1;
  v2258[23] = 1;
  v2258[24] = 1;
  v2258[25] = 1;
  v2258[26] = 1;
  v2258[27] = 1;
  var v2259 = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  v584 = 0;
  var v2260 = {
    ΔⲆⲆΔΔ: 0,
    ΔⲆΔᐃⵠ: 1,
    ᐃᐃⵠᐃᐃ: 2,
    ⲆᐃⲆΔⵠ: 3,
    ᐃᐃⵠΔⵠ: 4,
    ΔᐃᐃⵠΔ: 5,
    ΔⵠᐃΔΔ: 6,
    ⲆᐃⲆⵠΔ: 7,
    ⲆⲆⲆᐃⵠ: 8,
    ⲆΔⲆⵠᐃ: 9,
    ⵠⵠᐃᐃᐃ: 10,
    ΔⵠⲆΔΔ: 11,
    ⵠⵠΔᐃᐃ: 12,
    ᐃⵠᐃⵠⲆ: 13,
    ΔΔⲆⵠⲆ: 14,
    ⲆⲆⲆⵠⲆ: 15,
    ⲆⵠᐃΔⲆ: 16,
    ⵠⵠΔΔᐃ: 17,
    ᐃΔΔᐃᐃ: 18,
    ⵠⵠⵠⵠⲆ: 19,
    ΔΔⵠᐃᐃ: 20,
    ΔⵠΔᐃΔ: 21,
    ᐃΔᐃᐃΔ: 22,
    ᐃᐃⵠⲆᐃ: 23,
    ⵠⲆΔᐃⵠ: 24,
    ⲆⲆΔᐃⵠ: 25,
    ΔΔᐃΔⲆ: 26,
    ⵠᐃᐃΔΔ: 27,
    ⲆⲆⲆΔΔ: 28,
    ᐃΔⵠⵠΔ: 29,
    ΔΔⲆⵠΔ: 30,
    ⲆΔΔⵠΔ: 31,
    ΔⵠⵠⲆⵠ: 32,
    ⲆⲆᐃΔᐃ: 33,
    ⲆΔⲆΔⵠ: 34,
    ⲆΔᐃΔΔ: 35,
    ⵠⵠᐃΔⵠ: 36,
    ᐃᐃⵠΔΔ: 37,
    ᐃⲆⲆᐃᐃ: 38,
    ᐃΔⵠⵠⵠ: 39,
    ᐃⵠⵠⵠⵠ: 40,
    ΔΔᐃᐃᐃ: 41,
    ΔᐃⲆᐃΔ: 42,
    ΔᐃⵠⲆΔ: 43,
    ΔᐃⲆⲆⲆ: 44,
    ᐃⲆⲆⲆⵠ: 45,
    ΔⵠⲆᐃⵠ: 46,
    ΔⲆΔᐃⲆ: 47,
    ⵠᐃⵠΔⵠ: 48,
    ⵠΔΔᐃΔ: 49,
    ⵠⵠⲆⵠᐃ: 50,
    ᐃᐃᐃⲆΔ: 51,
    ⵠⲆⲆⵠᐃ: 52,
    ᐃⵠᐃᐃΔ: 53,
    ⵠⵠⵠⵠⵠ: 54,
    ⵠⵠΔᐃⲆ: 55,
    ⲆΔΔⵠᐃ: 56,
    ⵠΔᐃⲆⵠ: 57,
    ΔⵠⲆⲆᐃ: 58,
    ΔΔΔᐃⵠ: 59,
    ᐃⵠⲆⵠΔ: 60,
    ᐃᐃⵠⲆⵠ: 61,
    ΔᐃΔᐃⵠ: 62,
    ⵠΔᐃⵠⵠ: 63,
    ⵠⲆⲆᐃⵠ: 64,
    ⲆⵠᐃᐃⲆ: 65,
    ⵠΔᐃⲆⲆ: 66,
    ΔⲆᐃᐃᐃ: 67,
    ⲆΔΔⲆΔ: 68,
    ΔΔⵠΔᐃ: 69,
    ⵠΔᐃΔΔ: 70,
    ⵠⲆⵠⲆⵠ: 71,
    ᐃᐃⲆⵠⲆ: 72,
    ᐃⵠⲆᐃᐃ: 73,
    ⲆⵠΔΔⵠ: 74,
    ⲆᐃᐃΔᐃ: 75,
    ᐃⲆⲆΔᐃ: 76,
    ⵠᐃⵠⲆⵠ: 77,
    ⵠᐃⲆⵠᐃ: 78,
    ΔΔⲆᐃΔ: 79,
    ᐃⲆⵠⲆⵠ: 80,
    ⲆᐃⵠΔⵠ: 81,
    ⵠᐃⲆΔⵠ: 82,
    ΔΔΔⲆⲆΔⵠ: 83,
    ᐃⵠΔⲆⵠ: 84,
    ⵠⲆΔⲆⲆ: 85,
    ᐃΔᐃΔᐃ: 86,
    ⵠΔΔⲆⵠ: 87,
    ⲆⵠⵠⵠΔ: 88,
    ⲆⵠᐃⵠⲆ: 89,
    ΔᐃⵠΔΔ: 90,
    ⵠᐃᐃΔⵠᐃⲆ: 91,
    ᐃΔᐃⵠᐃ: 92,
    ⲆⵠᐃⲆⲆⵠⵠ: 93,
    ⲆᐃᐃᐃⲆΔᐃ: 94,
    ΔⵠΔᐃΔΔᐃ: 95,
    ᐃΔΔⵠΔΔⵠ: 96,
    ⲆⵠⲆⲆᐃᐃᐃ: 97,
    ΔⵠΔⲆⵠ: 98,
    ΔⲆⲆᐃⲆ: 99,
    ᐃⵠⲆⵠⲆ: 100,
    ⲆⲆᐃᐃⲆΔⵠ: 101,
    ⲆΔⵠⲆⲆ: 102,
    ⵠⲆⵠⵠΔ: 103,
    Δᐃⵠᐃᐃ: 104,
    ⲆⲆⵠΔⵠ: 105,
    ΔⵠᐃᐃΔᐃΔ: 106
  };
  var v2261 = [[24, 199], [25, 202], [26, 203], [27, 212], [28, 304], [29, 344], [30, 306], [31, 307], [32, 308], [33, 309], [34, 310], [35, 311], [36, 312], [37, 313]];
  function f435(p1392, p1393, p1394, p1395, p1396, p1397, p1398, p1399, p1400, p1401, p1402) {
    this.type = p1392;
    this.ΔⲆᐃⲆ = p1393;
    this.id = p1394;
    this.x = p1395;
    this.y = p1396;
    this.angle = p1397;
    this.ΔᐃΔΔᐃΔᐃ = p1397;
    this.action = p1398;
    this.info = p1399;
    this.ⲆⵠⲆⵠⲆᐃᐃ = p1402;
    this.ΔᐃᐃΔⵠ = p1401;
    this.r = {
      x: p1395,
      y: p1396
    };
    this.ΔⲆΔⲆⵠ = p1400;
    if (world) {
      this.ᐃᐃⵠⵠ = p1393 * world.ᐃⲆⵠΔⵠⵠⲆ + p1394;
    }
    switch (p1392) {
      case 0:
        this.ⲆⵠⵠΔ = world.players[this.ΔⲆᐃⲆ];
        this.ⲆΔⲆⲆ = this.ⲆⵠⵠΔ.ⲆΔⲆⲆ;
        this.ΔΔΔⲆΔⲆᐃ = this.ⲆⵠⵠΔ.ΔΔΔⲆΔⲆᐃ;
        this.ⵠΔᐃΔᐃ = this.ⲆⵠⵠΔ.ⵠΔᐃΔᐃ;
        this.ⵠᐃΔᐃΔ = this.ⲆⵠⵠΔ.ⵠᐃΔᐃΔ;
        this.ⲆᐃᐃΔᐃⵠΔ = -1000000;
        this.ΔᐃᐃΔᐃᐃⲆ = -1000000;
        this.ᐃⵠᐃⵠᐃ = -1000000;
        this.ΔⵠΔⲆⲆ = -1000000;
        this.ⲆᐃΔⵠᐃ = -1000000;
        this.ΔΔΔⲆⵠΔⵠ = -1000000;
        this.ⵠᐃΔᐃⵠⲆΔ = -1000000;
        this.ⲆΔᐃⲆⲆ = -1000000;
        this.ⲆΔᐃⲆΔ = world.mode === 2 && this.ⲆΔⲆⲆ === 0 || vVV143;
        this.ᐃⲆᐃΔⵠᐃⵠ = world.mode === 3 && this.ⲆΔⲆⲆ === 0 || vVV143;
        this.ᐃⲆΔᐃΔᐃⲆ = !!this.ⲆΔᐃⲆΔ && this.ⲆⵠⵠΔ.ᐃⲆᐃⵠⲆ === "  ";
        this.ΔⲆᐃⲆⵠ = [];
        this.ᐃⵠⵠΔΔᐃⲆ = 0;
        this.ⲆᐃⲆΔ = true;
        this.ΔⲆΔⲆᐃᐃⲆ = 0;
        this.ᐃᐃⲆᐃΔⵠⲆ = 0;
        this.ⵠⲆᐃⲆΔ = [];
        this.r = {
          x: p1395,
          y: p1396
        };
        this.ⲆΔᐃΔ = f402;
        this.ΔⲆⲆⵠᐃⵠⵠ = f396;
        this.ⲆⵠΔΔ = 0;
        this.ᐃⵠᐃⲆⵠ = 0;
        this.ⵠⵠᐃⵠⲆ = 0;
        this.ⲆⵠⲆᐃΔ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃᐃⲆⲆΔ = 0;
        this.ΔⵠⵠΔᐃⵠΔ = 0;
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ⲆⵠΔⵠⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃⵠΔⲆΔⵠΔ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV144, 0.6, 0.6, 0, 5, 3);
        this.ᐃⵠᐃⲆΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(v6, 0, 2.25, -1.5, 3.75, 7.5);
        this.ⲆΔΔᐃΔᐃΔ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV632, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV142, 0, 0, -Math.PI / 3, 6, 9);
        this.ⲆⵠΔⲆⵠⵠⵠⵠⲆ = 0;
        this.ⲆⵠⵠⵠΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 1, 3);
        this.ΔⲆᐃⲆΔΔⵠ = this.ᐃⲆΔᐃΔᐃⲆ ? new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV632, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ᐃⵠⵠⲆᐃⲆⵠ = 0;
        this.ⵠⵠᐃⵠΔΔⵠ = 0;
        this.ᐃΔⵠⲆᐃⲆⵠ = [];
        this.ⲆᐃⲆΔᐃⵠⲆ = [];
        this.text = [];
        this.label = [];
        this.ΔΔⵠΔⲆⲆᐃ = f401;
        this.ᐃᐃᐃΔⵠ = vVVVV632;
        this.right = -1;
        this.ⲆⲆⲆⵠ = -1;
        this.action = 64;
        this.ᐃⲆΔⲆⵠᐃᐃ = false;
        this.ⲆⲆⵠⵠⵠ = 0;
        this.ⵠΔⵠⵠΔ = vVVV144;
        this.bubbles = [];
        this.Δⵠᐃⵠᐃ = 0;
        this.ΔⵠⵠⲆⲆ = -1;
        this.ⵠᐃᐃ = function (p1403) {
          if (this.info & 32768) {
            this.ᐃⲆΔⲆⵠᐃᐃ = true;
            this.info = this.info & -32769;
          } else {
            this.ᐃⲆΔⲆⵠᐃᐃ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.Δⵠᐃⵠᐃ = 1;
          } else {
            this.Δⵠᐃⵠᐃ = 0;
          }
          this.ⲆⲆⵠⵠⵠ = this.ⲆⵠⲆⵠⲆᐃᐃ;
          if (this.info === 7 || this.ᐃⲆΔᐃΔᐃⲆ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ᐃⵠⵠΔΔᐃⲆ = world.ⵠⵠᐃⲆⵠⵠⵠⵠᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ⲆⲆⲆⵠ = this.ΔᐃᐃΔⵠ & 65535;
          if (this.right === 2) {
            this.ⵠΔⵠⵠΔ = vVVVV6232;
          } else {
            this.ⵠΔⵠⵠΔ = false;
          }
          if (v2258[this.right]) {
            this.ΔⲆΔᐃΔ = true;
          } else {
            this.ΔⲆΔᐃΔ = false;
          }
          if (p1403 & 256) {
            this.ⲆⵠⵠⵠΔΔⵠ.ΔⲆΔ = vVVVV142;
            this.ⲆⵠⵠⵠΔΔⵠ.Ⲇⵠⵠ = 0.6;
          } else if (p1403 & 4) {
            this.freeze.ΔⲆΔ = false;
            this.freeze.Ⲇⵠⵠ = 0.6;
          } else if (p1403 & 128) {
            this.ⲆⵠΔⵠⲆ.ΔⲆΔ = v14;
            this.ⲆⵠΔⵠⲆ.Ⲇⵠⵠ = 0.6;
          }
          if (p1403 & 8) {
            this.ᐃⵠΔⲆΔⵠΔ.ΔⲆΔ = vVVV145;
            this.ᐃⵠΔⲆΔⵠΔ.Ⲇⵠⵠ = 0.6;
          }
          if (p1403 & 2) {
            this.ᐃΔⵠ.ΔⲆΔ = vVVVV1423;
            this.ᐃΔⵠ.Ⲇⵠⵠ = 0.6;
          }
          if (p1403 & 16) {
            this.ⲆⵠΔⲆⵠⵠⵠⵠⲆ = 0.58;
            if (v3031.ⲆΔᐃᐃⲆ && this.ΔⵠⵠⲆⲆ !== -1) {
              v3031.players[this.ΔⵠⵠⲆⲆ].ⵠⵠᐃΔⵠΔⵠΔᐃ(v2805[this.right]);
            }
          }
        };
        this.ⵠᐃᐃ();
        break;
      case 23:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: v14,
          angle: 0
        };
        this.ΔⵠⵠⲆⵠΔⲆ = f343;
        this.ᐃᐃΔⲆⵠ = f376;
        this.ΔΔⲆΔⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆΔΔⲆᐃⵠⵠ = 0;
        this.ⵠΔᐃᐃⵠᐃᐃ = 0;
        this.ⵠᐃⲆⵠⲆ = f326;
        break;
      case 22:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVVV145,
          angle: 0
        };
        this.ΔⵠⵠⲆⵠΔⲆ = f341;
        this.ᐃᐃΔⲆⵠ = f390;
        this.ΔΔⲆΔⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(v14, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆΔΔⲆᐃⵠⵠ = 0;
        this.ⵠΔᐃᐃⵠᐃᐃ = 0;
        break;
      case 1:
      case 6:
        this.ΔⵠⵠⲆⵠΔⲆ = f388;
        this.ᐃᐃΔⲆⵠ = f358;
        this.ⵠΔⲆΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 1, 1.03, 0.98, 0.3, 0.3);
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔΔⲆΔⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV14,
          angle: 0
        };
        break;
      case 52:
        this.ΔⵠⵠⲆⵠΔⲆ = f342;
        this.ᐃᐃΔⲆⵠ = f360;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV142,
          angle: 0
        };
        this.ᐃᐃᐃᐃ = [];
        for (var v2262 = 0; v2262 < 3; v2262++) {
          this.ᐃᐃᐃᐃ.push({
            ⲆΔᐃΔ: f359,
            ᐃⲆⵠᐃ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ᐃᐃᐃᐃ[0].x = this.x - 16.5;
        this.ᐃᐃᐃᐃ[0].y = this.y - 15.5;
        this.ᐃᐃᐃᐃ[0].angle = this.angle;
        this.ᐃᐃᐃᐃ[1].x = this.x + 36;
        this.ᐃᐃᐃᐃ[1].y = this.y + 17;
        this.ᐃᐃᐃᐃ[1].angle = this.angle;
        this.ᐃᐃᐃᐃ[2].x = this.x - 18.5;
        this.ᐃᐃᐃᐃ[2].y = this.y + 39;
        this.ᐃᐃᐃᐃ[2].angle = this.angle;
        break;
      case 3:
        this.ΔⵠⵠⲆⵠΔⲆ = f364;
        this.ᐃᐃΔⲆⵠ = f389;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV145, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        this.ᐃᐃᐃᐃ = [];
        for (v2262 = 0; v2262 < 3; v2262++) {
          this.ᐃᐃᐃᐃ.push({
            ⲆΔᐃΔ: f336,
            ᐃⲆⵠᐃ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ᐃᐃᐃᐃ[0].x = this.x - 16.5;
        this.ᐃᐃᐃᐃ[0].y = this.y - 15.5;
        this.ᐃᐃᐃᐃ[1].x = this.x - 5.5;
        this.ᐃᐃᐃᐃ[1].y = this.y + 7.5;
        this.ᐃᐃᐃᐃ[2].x = this.x + 18;
        this.ᐃᐃᐃᐃ[2].y = this.y - 5;
        break;
      case 84:
        this.ⲆΔᐃΔ = f381;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 89:
        this.ⲆΔᐃΔ = f386;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 77:
        this.ⲆΔᐃΔ = f357;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 78:
        this.ⲆΔᐃΔ = f362;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃΔΔᐃΔⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVVV142, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆᐃⵠⵠⵠⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ⲆⵠΔⵠⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV143, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.ⲆΔᐃΔ = f345;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV144, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃΔΔᐃΔⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV1423, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆⲆᐃⵠⵠⵠⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV14, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV1422, 0.6, 0.6, 0, 5, 3);
        this.ⲆⵠΔⵠⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV145, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
      case 75:
        this.ⲆΔᐃΔ = f374;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 102:
        this.ⲆΔᐃΔ = f367;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV1422, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV1423, 0.6, 0.6, 0, 5, 3);
        break;
      case 103:
        this.ⲆⲆⵠΔᐃⲆᐃ = this.ⲆⵠⲆⵠⲆᐃᐃ;
        this.ᐃᐃⲆᐃΔⵠⲆ = this.ΔᐃᐃΔⵠ & 1;
        this.ⵠⵠᐃΔⲆⲆⲆ = 0;
        this.x = this.info;
        this.y = this.ΔᐃᐃΔⵠ;
        this.ⲆΔᐃΔ = f379;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 92:
      case 67:
      case 68:
      case 69:
      case 70:
      case 85:
      case 72:
      case 73:
      case 100:
      case 87:
      case 88:
        this.ⲆΔᐃΔ = f367;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV14, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV142, 0.6, 0.6, 0, 5, 3);
        break;
      case 45:
        this.ⲆΔᐃΔ = f366;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV1422,
          angle: 0
        };
        break;
      case 43:
        this.ᐃᐃΔⲆⵠ = f369;
        this.ⲆΔᐃΔ = f349;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vV142, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV1423,
          angle: 0
        };
        this.up = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV142, 1, 1.03, 0.98, 0.1, 0.1);
        this.ᐃⲆⵠⵠΔ = [];
        break;
      case 99:
        this.angle = Math.PI * Math.random() / 2;
      case 98:
      case 94:
        this.ⲆΔᐃΔ = f340;
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 93:
        this.ⲆΔᐃΔ = f372;
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV14, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.scale = 1;
        this.ⲆΔᐃΔ = f382;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV143, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 83:
        this.ᐃⵠΔᐃⲆ = 0;
        this.ᐃΔΔⵠ = [];
        this.ⵠΔⲆⲆⲆΔⵠ = 0;
        this.ⵠⵠᐃⵠᐃⲆΔ = f346;
        this.ⲆΔᐃΔ = f356;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV142, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 82:
        this.x = this.info;
        this.y = this.ΔᐃᐃΔⵠ;
        this.scale = 1;
        this.ᐃⲆΔᐃ = 0;
        this.ⲆΔᐃΔ = f337;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV1423, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.x = this.info;
        this.y = this.ΔᐃᐃΔⵠ;
        this.scale = 1;
        this.ᐃⲆΔᐃ = 0;
        this.ⲆΔᐃΔ = f394;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV142, 0.6, 0.6, 0, 5, 3);
        break;
      case 86:
        this.x = this.info;
        this.y = this.ΔᐃᐃΔⵠ;
        this.scale = 1;
        this.ᐃⲆΔᐃ = 0;
        this.ⲆΔᐃΔ = f365;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 80:
        this.scale = 1;
        this.ⲆΔᐃΔ = f373;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV145, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 79:
        this.scale = 1;
        this.ⲆΔᐃΔ = f371;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV142, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV14, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.scale = 1;
        this.ⲆΔᐃΔ = f393;
        this.ᐃⲆⵠᐃ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 104:
        this.ᐃᐃᐃᐃ = [];
        for (v2262 = 0; v2262 < 5; v2262++) {
          this.ᐃᐃᐃᐃ.push({
            ⲆΔᐃΔ: f336,
            ᐃⲆⵠᐃ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV142, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ᐃᐃᐃᐃ[0].x = this.x - 20.5;
        this.ᐃᐃᐃᐃ[0].y = this.y - 22.5;
        this.ᐃᐃᐃᐃ[0].angle = -0.1 + Math.PI;
        this.ᐃᐃᐃᐃ[1].x = this.x - 35.5;
        this.ᐃᐃᐃᐃ[1].y = this.y + 7.5;
        this.ᐃᐃᐃᐃ[1].angle = 0.1 + Math.PI;
        this.ᐃᐃᐃᐃ[2].x = this.x + 7.5;
        this.ᐃᐃᐃᐃ[2].y = this.y - 30;
        this.ᐃᐃᐃᐃ[2].angle = -0.2 + Math.PI;
        this.ᐃᐃᐃᐃ[3].x = this.x + 22.5;
        this.ᐃᐃᐃᐃ[3].y = this.y;
        this.ᐃᐃᐃᐃ[3].angle = -0.2 + Math.PI;
        this.ᐃᐃᐃᐃ[4].x = this.x - 7.5;
        this.ᐃᐃᐃᐃ[4].y = this.y + 14.5;
        this.ᐃᐃᐃᐃ[4].angle = 0.15 + Math.PI;
        break;
      case 105:
      case 106:
        this.ᐃᐃᐃᐃ = [];
        for (v2262 = 0; v2262 < 5; v2262++) {
          this.ᐃᐃᐃᐃ.push({
            ⲆΔᐃΔ: f336,
            ᐃⲆⵠᐃ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ᐃᐃᐃᐃ[0].x = this.x - 20.5;
            this.ᐃᐃᐃᐃ[0].y = this.y - 22.5;
            this.ᐃᐃᐃᐃ[1].x = this.x - 35.5;
            this.ᐃᐃᐃᐃ[1].y = this.y + 7.5;
            this.ᐃᐃᐃᐃ[2].x = this.x + 7.5;
            this.ᐃᐃᐃᐃ[2].y = this.y - 30;
            this.ᐃᐃᐃᐃ[3].x = this.x + 22.5;
            this.ᐃᐃᐃᐃ[3].y = this.y;
            this.ᐃᐃᐃᐃ[4].x = this.x - 7.5;
            this.ᐃᐃᐃᐃ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ᐃᐃᐃᐃ[0].x = this.x - 30.5;
            this.ᐃᐃᐃᐃ[0].y = this.y - 22.5;
            this.ᐃᐃᐃᐃ[1].x = this.x - 15.5;
            this.ᐃᐃᐃᐃ[1].y = this.y + 7.5;
            this.ᐃᐃᐃᐃ[2].x = this.x + 15.5;
            this.ᐃᐃᐃᐃ[2].y = this.y - 30;
            this.ᐃᐃᐃᐃ[3].x = this.x + 12.5;
            this.ᐃᐃᐃᐃ[3].y = this.y + 5;
            this.ᐃᐃᐃᐃ[4].x = this.x - 40.5;
            this.ᐃᐃᐃᐃ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ᐃᐃᐃᐃ[0].x = this.x - 20.5;
            this.ᐃᐃᐃᐃ[0].y = this.y - 20.5;
            this.ᐃᐃᐃᐃ[1].x = this.x - 35.5;
            this.ᐃᐃᐃᐃ[1].y = this.y + 15.5;
            this.ᐃᐃᐃᐃ[2].x = this.x + 7.5;
            this.ᐃᐃᐃᐃ[2].y = this.y - 17;
            this.ᐃᐃᐃᐃ[3].x = this.x + 22.5;
            this.ᐃᐃᐃᐃ[3].y = this.y + 5;
            this.ᐃᐃᐃᐃ[4].x = this.x - 7.5;
            this.ᐃᐃᐃᐃ[4].y = this.y + 1.5;
        }
        break;
      case 40:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV142, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vV14,
          angle: 0
        };
        this.ⲆΔᐃΔ = f334;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1423, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆᐃᐃᐃᐃⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV143, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 49:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV14, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV1423,
          angle: 0
        };
        this.ⲆΔᐃΔ = f375;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 48:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVVV14,
          angle: 0
        };
        this.ⲆΔᐃΔ = f347;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 53:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        this.ⲆΔᐃΔ = f387;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 64:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        this.ⲆΔᐃΔ = f377;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 63:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(v14, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        this.ⲆΔᐃΔ = f338;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV142, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 66:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVVV145,
          angle: 0
        };
        this.ⲆΔᐃΔ = f391;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 46:
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vV142, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV145,
          angle: 0
        };
        this.ⲆΔᐃΔ = f383;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1423, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ⲆΔᐃΔ = f335;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 25:
        this.ⲆΔᐃΔ = f363;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVVV142, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVVVV142,
          angle: 0
        };
        break;
      case 26:
        this.ⲆΔᐃΔ = f370;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vV143, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vV143,
          angle: 0
        };
        break;
      case 27:
        this.ⲆΔᐃΔ = f344;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVVV142,
          angle: 0
        };
        break;
      case 28:
        this.ⲆΔᐃΔ = f392;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vV143, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 29:
        this.ⲆΔᐃΔ = f355;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vV142, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 30:
        this.ⲆΔᐃΔ = f348;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 31:
        this.ⲆΔᐃΔ = f353;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVVV14,
          angle: 0
        };
        break;
      case 32:
        this.ⲆΔᐃΔ = f368;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 33:
        this.ⲆΔᐃΔ = f339;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 34:
        this.ⲆΔᐃΔ = f332;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV143, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 35:
        this.ⲆΔᐃΔ = f361;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 36:
        this.ⲆΔᐃΔ = f333;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV1422,
          angle: 0
        };
        break;
      case 37:
        this.ⲆΔᐃΔ = f385;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 41:
        this.ΔⵠⵠⲆⵠΔⲆ = f331;
        this.ᐃᐃΔⲆⵠ = f351;
        this.rotate = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        break;
      case 47:
        this.ⲆΔᐃΔ = f329;
        this.ΔᐃⵠⲆ = Math.floor(this.x / 100);
        this.ΔΔ = Math.floor(this.y / 100);
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV1423,
          angle: 0
        };
        this.opacity = 1;
        this.ⵠᐃⲆⵠⲆ = f308;
        break;
      case 51:
        this.ⲆΔᐃΔ = f319;
        this.ΔΔⲆΔⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV142, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vV14,
          angle: 0
        };
        break;
      case 42:
      case 2:
      case 65:
      case 44:
      case 38:
        this.ⲆΔᐃΔ = f321;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVVV142, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: v14,
          angle: 0
        };
        break;
      case 39:
        this.ⲆΔᐃΔ = f321;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV142, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        this.ⵠᐃⲆⵠⲆ = f308;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 59:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 61:
        this.ⲆΔᐃΔ = f321;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV142, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV1423,
          angle: 0
        };
        this.ⵠᐃⲆⵠⲆ = f326;
        break;
      case 50:
        this.ⲆΔᐃΔ = f318;
        this.opacity = 1;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV144, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV144,
          angle: 0
        };
        var v2263 = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > v2263) {
          this.angle -= v2263;
        } else {
          this.angle += Math.PI / 2 - v2263;
        }
        break;
      case 91:
        this.ⲆΔᐃΔ = f330;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 101:
        this.ⲆΔᐃΔ = f312;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 95:
        this.ⲆΔᐃΔ = f324;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 96:
        this.ⲆΔᐃΔ = f325;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 97:
        this.ⲆΔᐃΔ = f320;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 11:
        this.ⵠᐃᐃ = function (p1404) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = p1404;
        };
        this.ⲆΔᐃΔ = f322;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vV14, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVVVV142,
          angle: 0
        };
        this.lock = 0;
        this.ⵠᐃᐃ(this.action);
        break;
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 62:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 60:
        this.ⲆΔᐃΔ = f317;
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: vVV143,
          angle: 0
        };
        this.ⵠᐃⲆⵠⲆ = f326;
        break;
      case 18:
        this.ΔⵠⵠⲆⵠΔⲆ = f384;
        this.ⲆΔᐃΔ = f354;
        this.ᐃᐃΔⲆⵠ = f352;
        this.ᐃΔΔⵠ = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1.23, 1.18, 0.02, 0.02);
        this.ΔΔⲆΔⲆ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV142, 1, 1.23, 1.18, 0.04, 0.04);
        this.ᐃΔⵠ = {
          ⲆΔⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10),
          ⵠᐃᐃ: false,
          angle: 0
        };
        this.ⵠᐃᐃ = function (p1405) {
          this.action = p1405;
        };
    }
  }
  function f436(p1406) {
    function i(p1407, p1408, p1409) {
      var vP1408 = p1408;
      for (var vP1409 = p1409; world.nh > vP1409; vP1409++) {
        for (var vP14082 = p1408; world.nw > vP14082 && (vP1409 === p1409 && (vP1408 = Math.max(vP14082, vP1408)), !(vP14082 > vP1408)) && p1407[vP1409][vP14082] !== 1; vP14082++) {
          p1407[vP1409][vP14082] = 1;
        }
        if (vP1408 > vP14082) {
          break;
        }
      }
      world.ᐃⲆⲆΔ.push(new world.ⵠΔⲆᐃΔᐃⵠ(world.ⲆⲆⲆⲆⵠ, p1408, p1409, vP1408 - p1408 + 1, vP1409 - p1409, 15));
    }
    function t(p1410, p1411, p1412, p1413, p1414) {
      for (var v2264 = 0; p1414 > v2264 && n(p1410, p1411, p1412, p1413, 8) !== 1; v2264++);
      if (v2264 === p1414) {
        return 0;
      } else {
        return 1;
      }
    }
    function n(p1415, p1416, p1417, p1418, p1419) {
      var v2265 = p1416 + Math.floor(world.ⲆᐃΔⵠΔ.get() * p1418);
      var v2266 = p1417 + Math.floor(p1418 * world.ⲆᐃΔⵠΔ.get());
      var v2267 = 10 + Math.floor((world.nw - v2265 - 20) * world.ⲆᐃΔⵠΔ.get());
      var v2268 = 10 + Math.floor(world.ⲆᐃΔⵠΔ.get() * (world.nh - v2266 - 20));
      var v2269 = v2267 + v2265;
      var v2270 = v2268 + v2266;
      for (var v2271 = 0; world.ᐃⲆⲆΔ.length > v2271; v2271++) {
        var v2272 = world.ᐃⲆⲆΔ[v2271];
        if (Δᐃᐃ.ᐃΔⵠⵠⲆⲆⲆ(v2267, v2269, v2268, v2270, v2272.x1 / 100 - p1419, v2272.x2 / 100 + p1419, v2272.y1 / 100 - p1419, v2272.y2 / 100 + p1419) === 1) {
          return 0;
        }
      }
      world.ᐃⲆⲆΔ.push(new world.ⵠΔⲆᐃΔᐃⵠ(p1415, v2267, v2268, v2265, v2266, 15));
      return 1;
    }
    function f440(p1420, p1421) {
      for (var v2273 = 0; p1421.length > v2273; v2273++) {
        f448(p1421[v2273][0], p1421[v2273][1], p1420, p1421[v2273][2]);
      }
    }
    function s(p1422, p1423, p1424, p1425, p1426, p1427, p1428, p1429) {
      var v2274 = Math.floor(p1428 / 2);
      var v2275 = Math.max(1, Math.floor(p1428 / 2));
      var v2276 = Math.floor(p1429 / 2);
      var v2277 = Math.max(1, Math.floor(p1429 / 2));
      for (var v2278 = 0; v2278 < p1424; v2278++) {
        for (var v2279 = p1422 - v2276; p1422 + v2277 > v2279; v2279++) {
          for (var v2280 = p1423 - v2274; p1423 + v2275 > v2280; v2280++) {
            if (f447(v2279, v2280, "wtb", 0, 1) === 1) {
              p1427.push([v2279, v2280, 1]);
            }
          }
        }
        p1422 += p1425;
        p1423 += p1426;
      }
    }
    function g(p1430, p1431) {
      var v2281 = world.ᐃⲆⲆΔ[p1430];
      var v2282 = Math.floor(v2281.y1 / 100);
      var v2283 = Math.floor(v2281.x1 / 100);
      var v2284 = Math.floor(v2281.ⵠⲆⵠ / 100);
      var v2285 = v2283 + (v2291 = Math.floor(v2281.w / 100));
      var v2286 = 2;
      var vV2284 = v2284;
      var vV2282 = v2282;
      for (var v2287 = v2283 + 10 + Math.floor(world.ⲆᐃΔⵠΔ.get() * (v2291 - 20)), v2288 = v2287 - 4; v2287 + 4 > v2288; v2288++) {
        f447(v2282 - 1, v2288, "wtb", 0, 1);
      }
      while (vV2284 > 0) {
        if (v2286 !== 2) {
          if (vV2284 < 10) {
            for (v2293 = 1; vV2284 > 0; v2293++) {
              s(vV2282, v2287, 1, 1, 0, p1431, v2293, 1);
              vV2284 -= 1;
              vV2282 += 1;
            }
          } else if (v2286 !== 1) {
            v2286 = 1;
            var v2289 = Math.floor(1 + world.ⲆᐃΔⵠΔ.get() * 2);
            var v2290 = 1 + Math.floor(world.ⲆᐃΔⵠΔ.get() * 4);
            if (v2287 < v2283 + 16) {
              s(vV2282, v2287, v2289, 0, 1, p1431, v2290, v2290);
              v2287 += v2289;
            } else if (v2287 > v2285 - 16) {
              s(vV2282, v2287, v2289, 0, -1, p1431, v2290, v2290);
              v2287 -= v2289;
            } else if (world.ⲆᐃΔⵠΔ.get() > 0.5) {
              s(vV2282, v2287, v2289, 0, 1, p1431, v2290, v2290);
              v2287 += v2289;
            } else {
              s(vV2282, v2287, v2289, 0, -1, p1431, v2290, v2290);
              v2287 -= v2289;
            }
          } else {
            var v2291;
            var v2292 = Math.min(vV2284, Math.floor(1 + world.ⲆᐃΔⵠΔ.get() * 4));
            s(vV2282, v2287, v2292, 1, 0, p1431, v2291 = 1 + Math.floor(world.ⲆᐃΔⵠΔ.get() * 4), v2291);
            v2286 = 0;
            vV2284 -= v2292;
            vV2282 += v2292;
          }
        } else {
          for (var v2293 = 10; v2293 > 1; v2293--) {
            s(vV2282, v2287, 1, 1, 0, p1431, v2293, 1);
            vV2284 -= 1;
            vV2282 += 1;
          }
          v2286 = 0;
        }
      }
      for (v2288 = v2287 - 1; v2288 < v2287 + 2; v2288++) {
        f447(vV2282, v2288, "wtb", 0, 1);
      }
    }
    function f443(p1432, p1433) {
      return p1432 >= 0 && p1433 >= 0 && p1432 < world.nh && p1433 < world.nw;
    }
    function _u4(p1434, p1435, p1436, p1437, p1438) {
      var v2294 = world.ᐃⲆⲆΔ[p1434];
      var v2295 = Math.floor(v2294.x1 / 100);
      var v2296 = Math.floor(v2294.y1 / 100);
      var v2297 = Math.floor(v2294.w / 100);
      var v2298 = Math.floor(v2294.ⵠⲆⵠ / 100);
      if (vVUndefined !== p1438) {
        p1438 = 1 - p1438;
        v2295 += Math.floor(p1438 * v2297 / 2);
        v2296 += Math.floor(v2298 * p1438 / 2);
        v2297 -= Math.floor(p1438 * v2297);
        v2298 -= Math.floor(p1438 * v2298);
      }
      var v2299 = v2831.ⵠⲆΔⵠ;
      for (var v2300 = 0, v2301 = 0; p1437 > v2300 && !(v2301 > 50000); v2301++) {
        var v2302 = v2296 + Math.floor(v2298 * world.ⲆᐃΔⵠΔ.get());
        var v2303 = v2295 + Math.floor(world.ⲆᐃΔⵠΔ.get() * v2297);
        if (!(world.ΔᐃⵠᐃΔ(p1434, v2303 * 100 + 50, v2302 * 100 + 50) < 400) && ((v2304 = v2299[v2302][v2303 + 1]) === vVVVVVVUndefined142 || vVVVVUndefined583 === v2304[p1435] || vVVVVVUndefined1422 === v2304[p1435][p1436]) && ((v2304 = v2299[v2302][v2303 - 1]) === vVVVVVVUndefined142 || v2304[p1435] === vVVVVVUndefined583 || vVVVUndefined142 === v2304[p1435][p1436]) && ((v2304 = v2299[v2302 + 1][v2303]) === vVVUndefined5 || v2304[p1435] === undefined || v2304[p1435][p1436] === undefined) && ((v2304 = v2299[v2302 - 1][v2303]) === undefined || vVVUndefined11 === v2304[p1435] || v2304[p1435][p1436] === undefined)) {
          var v2304 = v2299[v2302 + 1][v2303 - 1];
          if (vVVVUndefined113 === v2304 || v2304[p1435] === undefined || v2304[p1435][p1436] === vVVUndefined11) {
            v2304 = v2299[v2302 - 1][v2303 + 1];
            if (vVVVVVVUndefined142 === v2304 || v2304[p1435] === undefined || v2304[p1435][p1436] === vVVUndefined11) {
              v2304 = v2299[v2302 + 1][v2303 + 1];
              if (vVVVVVUndefined583 === v2304 || v2304[p1435] === undefined || vVVUndefined14 === v2304[p1435][p1436]) {
                v2304 = v2299[v2302 - 1][v2303 - 1];
                if (vVVVUndefined14 === v2304 || v2304[p1435] === undefined || v2304[p1435][p1436] === undefined) {
                  if (vVVVVUndefined14 === v2299[v2302][v2303]) {
                    f447(v2302, v2303, p1435, p1436, 1);
                    v2300++;
                  }
                }
              }
            }
          }
        }
      }
    }
    function f445(p1439) {
      for (var v2305 = 0; v2305 < 3; v2305++) {
        _u4(p1439, "s", v2305, 15);
      }
      for (v2305 = 0; v2305 < 3; v2305++) {
        _u4(p1439, "a", v2305, 1);
      }
      for (v2305 = 0; v2305 < 3; v2305++) {
        _u4(p1439, "d", v2305, 1);
      }
      f452(p1439);
    }
    function f446(p1440, p1441) {
      for (var v2306 = 0; v2306 < 3; v2306++) {
        _u4(p1440, "s", v2306, Math.floor(p1441 * 12));
      }
      for (v2306 = 0; v2306 < 3; v2306++) {
        _u4(p1440, "m", v2306, Math.max(1, Math.floor(p1441 * 1)), 0.2);
      }
      _u4(p1440, "c", 0, Math.floor(p1441 * 36));
      var v2307 = [];
      (function (p1442, p1443) {
        var v2308 = world.ᐃⲆⲆΔ[p1442];
        var v2309 = Math.floor(v2308.y1 / 100);
        var v2310 = Math.floor(v2308.x1 / 100);
        var v2311 = Math.floor(v2308.ⵠⲆⵠ / 100);
        var v2312 = Math.floor(v2308.w / 100);
        var v2313 = v2309 + Math.floor(v2311 / 2);
        var v2314 = v2310 + Math.floor(v2312 / 2);
        for (var v2315 = 0; v2315 < 3; v2315++) {
          f447(v2316 = Math.floor(v2313 - 3 + world.ⲆᐃΔⵠΔ.get() * 6), v2317 = Math.floor(v2314 - 3 + world.ⲆᐃΔⵠΔ.get() * 6), "plm", v2315, 1);
        }
        for (v2315 = 0; v2315 < 80; v2315++) {
          var v2316 = Math.floor(v2313 - 3 + world.ⲆᐃΔⵠΔ.get() * 6);
          var v2317 = Math.floor(v2314 - 3 + world.ⲆᐃΔⵠΔ.get() * 6);
          if (f447(v2316, v2317, "wtb", 0, 1) === 1) {
            p1443.push([v2316, v2317, 0]);
          }
        }
      })(p1440, v2307);
      f440(p1440, v2307);
      v2307 = [];
    }
    function f447(p1444, p1445, p1446, p1447, p1448) {
      if (!(p1444 < 0) && !(p1445 < 0) && !(world.nh <= p1444) && !(world.nw <= p1445)) {
        ⵠⲆΔⵠ = v2831.ⵠⲆΔⵠ;
        if (ⵠⲆΔⵠ[p1444][p1445] === undefined) {
          ⵠⲆΔⵠ[p1444][p1445] = {};
        }
        if (ⵠⲆΔⵠ[p1444][p1445][p1446] !== undefined) {
          return 0;
        } else {
          ⵠⲆΔⵠ[p1444][p1445][p1446] = [];
          ⵠⲆΔⵠ[p1444][p1445][p1446][p1447] = [{
            x: p1445 * 100 + 50,
            y: p1444 * 100 + 50
          }];
          if (p1448 === 1) {
            (function (p1449, p1450, p1451, p1452) {
              v774.push([p1449, p1450, p1451, p1452]);
            })(p1446, p1447, p1444, p1445);
          }
          return 1;
        }
      }
    }
    function f448(p1453, p1454, p1455, p1456) {
      if (f443(p1453, p1454) && (ⵠⲆΔⵠ = v2831.ⵠⲆΔⵠ, ⵠⲆΔⵠ[p1453][p1454] === undefined && (ⵠⲆΔⵠ[p1453][p1454] = {}), ⵠⲆΔⵠ[p1453][p1454].r === vVVVVUndefined14)) {
        var v2318 = 0;
        if (f443(p1453 - 1, p1454) && ⵠⲆΔⵠ[p1453 - 1][p1454] !== undefined && ⵠⲆΔⵠ[p1453 - 1][p1454].wtb !== undefined) {
          v2318 += 2;
        }
        if (f443(p1453, p1454 - 1) && ⵠⲆΔⵠ[p1453][p1454 - 1] !== undefined && vVVUndefined5 !== ⵠⲆΔⵠ[p1453][p1454 - 1].wtb) {
          v2318 += 8;
        }
        if (f443(p1453, p1454 + 1) && ⵠⲆΔⵠ[p1453][p1454 + 1] !== vVVVVUndefined142 && ⵠⲆΔⵠ[p1453][p1454 + 1].wtb !== undefined) {
          v2318 += 16;
        }
        if (f443(p1453 + 1, p1454) && ⵠⲆΔⵠ[p1453 + 1][p1454] !== undefined && vVVVVUndefined582 !== ⵠⲆΔⵠ[p1453 + 1][p1454].wtb) {
          v2318 += 64;
        }
        if (f443(p1453 - 1, p1454 - 1) && !(~v2318 & 10) && ⵠⲆΔⵠ[p1453 - 1][p1454 - 1] !== undefined && vVVVVUndefined1422 !== ⵠⲆΔⵠ[p1453 - 1][p1454 - 1].wtb) {
          v2318 += 1;
        }
        if (f443(p1453 - 1, p1454 + 1) && (v2318 & 18) == 18 && vVVVUndefined142 !== ⵠⲆΔⵠ[p1453 - 1][p1454 + 1] && ⵠⲆΔⵠ[p1453 - 1][p1454 + 1].wtb !== undefined) {
          v2318 += 4;
        }
        if (f443(p1453 + 1, p1454 - 1) && (v2318 & 72) == 72 && ⵠⲆΔⵠ[p1453 + 1][p1454 - 1] !== undefined && vVVVVUndefined143 !== ⵠⲆΔⵠ[p1453 + 1][p1454 - 1].wtb) {
          v2318 += 32;
        }
        if (!!f443(p1453 + 1, p1454 + 1) && !(~v2318 & 80) && ⵠⲆΔⵠ[p1453 + 1][p1454 + 1] !== undefined && vVVVUndefined58 !== ⵠⲆΔⵠ[p1453 + 1][p1454 + 1].wtb) {
          v2318 += 128;
        }
        ⵠⲆΔⵠ[p1453][p1454].r = {};
        ⵠⲆΔⵠ[p1453][p1454].r.ⵠⵠᐃⵠΔᐃⵠ = v2318;
        ⵠⲆΔⵠ[p1453][p1454].r.ⵠⵠⵠᐃⲆΔᐃ = p1456;
        ⵠⲆΔⵠ[p1453][p1454].r.ⲆⲆⵠᐃ = world.ΔᐃⵠᐃΔ(p1455, p1454 * 100 + 50, p1453 * 100 + 50) - 400;
        ⵠⲆΔⵠ[p1453][p1454].r.x = p1454 * 100 + 50;
        ⵠⲆΔⵠ[p1453][p1454].r.y = p1453 * 100 + 50;
      }
    }
    function f449(p1457, p1458) {
      for (var v2319 = 0; v2319 < 5; v2319++) {
        _u4(p1457, "jut", v2319, Math.floor(p1458 * 160));
      }
      for (v2319 = 0; v2319 < 2; v2319++) {
        _u4(p1457, "jub", v2319, Math.floor(p1458 * 20));
      }
      for (v2319 = 0; v2319 < 1; v2319++) {
        _u4(p1457, "bap", v2319, Math.floor(p1458 * 40));
      }
      for (v2319 = 0; v2319 < 3; v2319++) {
        _u4(p1457, "jus", v2319, Math.floor(p1458 * 80));
      }
      for (v2319 = 0; v2319 < 3; v2319++) {
        _u4(p1457, "cop", v2319, Math.floor(p1458 * 20));
        _u4(p1457, "iro", v2319, Math.floor(p1458 * 20));
        _u4(p1457, "top", v2319, Math.floor(p1458 * 20));
        _u4(p1457, "sap", v2319, Math.floor(p1458 * 20));
        _u4(p1457, "jad", v2319, Math.floor(p1458 * 20));
        _u4(p1457, "rub", v2319, Math.floor(p1458 * 20));
        _u4(p1457, "aqu", v2319, Math.floor(p1458 * 20));
        _u4(p1457, "coa", v2319, Math.floor(p1458 * 20));
      }
      var v2320 = [];
      for (v2319 = 0; v2319 < 6; v2319++) {
        g(p1457, v2320);
      }
      f440(p1457, v2320);
      v2320 = [];
      f452(p1457);
    }
    function f450(p1459, p1460) {
      (function (p1461, p1462) {
        var v2321 = world.ᐃⲆⲆΔ[p1462];
        for (var v2322 = 0, v2323 = 0; v2322 < p1461 && v2323 < 10000; v2323++) {
          var v2324 = v2321.y1 + world.ⲆᐃΔⵠΔ.get() * v2321.ⵠⲆⵠ;
          var v2325 = v2321.x1 + v2321.w * world.ⲆᐃΔⵠΔ.get();
          var v2326 = Math.floor(v2324 / 100);
          var v2327 = Math.floor(v2325 / 100);
          if (!(world.ΔᐃⵠᐃΔ(p1462, v2327 * 100 + 50, v2326 * 100 + 50) < 600)) {
            for (var v2328 = 1, v2329 = v2326 - 4; v2328 === 1 && v2329 <= v2326 + 4; v2329++) {
              for (var v2330 = v2327 - 4; v2328 === 1 && v2330 <= v2327 + 4; v2330++) {
                if (v2831.ⵠⲆΔⵠ[v2329][v2330] !== vUndefined) {
                  v2328 = 0;
                }
              }
            }
            if (v2328 !== 0) {
              f447(v2326, v2327, "la", v2322 % 6, 0);
              v2322++;
            }
          }
        }
      })(p1460 * 80, p1459);
      for (var v2331 = 0; v2331 < 3; v2331++) {
        _u4(p1459, "s", v2331, Math.floor(p1460 * 12));
      }
      for (v2331 = 0; v2331 < 3; v2331++) {
        _u4(p1459, "g", v2331, Math.floor(p1460 * 6));
      }
      for (v2331 = 0; v2331 < 3; v2331++) {
        _u4(p1459, "re", v2331, Math.max(1, Math.floor(p1460 * 1)), 0.2);
      }
      for (v2331 = 0; v2331 < 3; v2331++) {
        _u4(p1459, "a", v2331, Math.max(1, Math.floor(p1460 * 2)));
      }
      f452(p1459);
    }
    function f451(p1463, p1464) {
      for (var v2332 = 0; v2332 < 6; v2332++) {
        _u4(p1463, "t", v2332, Math.floor(p1464 * 20));
      }
      for (v2332 = 0; v2332 < 4; v2332++) {
        _u4(p1463, "b", v2332, Math.floor(p1464 * 20));
      }
      for (v2332 = 0; v2332 < 3; v2332++) {
        _u4(p1463, "s", v2332, Math.floor(p1464 * 20));
      }
      var v2333 = [];
      g(p1463, v2333);
      f440(p1463, v2333);
      v2333 = [];
      _u4(p1463, "p", 0, Math.floor(p1464 * 24));
      for (v2332 = 0; v2332 < 3; v2332++) {
        _u4(p1463, "g", v2332, Math.floor(p1464 * 5));
      }
      if (world.mode === 2) {
        for (v2332 = 0; v2332 < 3; v2332++) {
          _u4(p1463, "d", v2332, Math.floor(p1464 * 3));
        }
        for (v2332 = 0; v2332 < 3; v2332++) {
          _u4(p1463, "a", v2332, Math.floor(p1464 * 2));
        }
      }
      f452(p1463);
    }
    function f452(p1465) {
      var v2334 = world.ᐃⲆⲆΔ[p1465];
      f447(-3 + Math.floor(v2334.y2 / 100), -1 + Math.floor(v2334.x2 / 100), "s", 0, 0);
      f447(3 + Math.floor(v2334.y1 / 100), -1 + Math.floor(v2334.x2 / 100), "s", 0, 0);
      f447(-3 + Math.floor(v2334.y2 / 100), 1 + Math.floor(v2334.x1 / 100), "s", 0, 0);
      f447(3 + Math.floor(v2334.y1 / 100), 1 + Math.floor(v2334.x1 / 100), "s", 0, 0);
    }
    function f453(p1466, p1467) {
      for (var v2335 = 0; v2335 < 3; v2335++) {
        _u4(p1466, "s", v2335, Math.floor(p1467 * 18));
      }
      for (v2335 = 0; v2335 < 3; v2335++) {
        _u4(p1466, "f", v2335, Math.floor(p1467 * 24));
      }
      for (v2335 = 0; v2335 < 3; v2335++) {
        _u4(p1466, "d", v2335, Math.max(1, Math.floor(p1467 * 2)), 0.3);
      }
      for (v2335 = 0; v2335 < 3; v2335++) {
        _u4(p1466, "g", v2335, Math.floor(p1467 * 6));
      }
      f452(p1466);
    }
    function f454(p1468, p1469) {
      for (var v2336 = 0; v2336 < 6; v2336++) {
        _u4(p1468, "t", v2336, Math.floor(p1469 * 80));
      }
      for (v2336 = 0; v2336 < 4; v2336++) {
        _u4(p1468, "b", v2336, Math.floor(p1469 * 80));
      }
      for (v2336 = 0; v2336 < 3; v2336++) {
        _u4(p1468, "s", v2336, Math.floor(p1469 * 50));
      }
      var v2337 = [];
      for (v2336 = 0; v2336 < 6; v2336++) {
        g(p1468, v2337);
      }
      f440(p1468, v2337);
      v2337 = [];
      _u4(p1468, "p", 0, Math.floor(p1469 * 28));
      for (v2336 = 0; v2336 < 3; v2336++) {
        _u4(p1468, "g", v2336, Math.floor(p1469 * 7));
      }
      for (v2336 = 0; v2336 < 3; v2336++) {
        _u4(p1468, "d", v2336, Math.floor(p1469 * 2));
      }
      for (v2336 = 0; v2336 < 3; v2336++) {
        _u4(p1468, "a", v2336, Math.floor(p1469 * 1));
      }
      for (v2336 = 0; v2336 < 3; v2336++) {
        _u4(p1468, "m", v2336, Math.floor(p1469 * 1));
      }
      _u4(p1468, "a", 0, Math.floor(p1469 * 1));
      f452(p1468);
    }
    function f455(p1470, p1471, p1472) {
      if (p1470[p1471]) {
        for (v110 = 0; p1470[p1471].length > v110; v110++) {
          if (p1470[p1471][v110]) {
            for (ΔΔⵠᐃ = 0; ΔΔⵠᐃ < p1470[p1471][v110].length; ΔΔⵠᐃ++) {
              p1470[p1471][v110][ΔΔⵠᐃ].ᐃΔⵠ = p1472;
              p1470[p1471][v110][ΔΔⵠᐃ].ⵠᐃᐃ = vV143;
              p1470[p1471][v110][ΔΔⵠᐃ].time = 0;
              p1470[p1471][v110][ΔΔⵠᐃ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ᐃⲆⵠΔⵠⵠⲆ = p1406;
    this.ΔⲆΔⲆᐃ = 0;
    this.ᐃΔΔⵠᐃⵠᐃ = 6;
    this.players = [];
    this.units = [];
    this.units[0] = [];
    this.units[105] = [];
    this.units[106] = [];
    this.units[104] = [];
    this.units[92] = [];
    this.units[67] = [];
    this.units[74] = [];
    this.units[77] = [];
    this.units[84] = [];
    this.units[78] = [];
    this.units[79] = [];
    this.units[80] = [];
    this.units[81] = [];
    this.units[86] = [];
    this.units[88] = [];
    this.units[89] = [];
    this.units[90] = [];
    this.units[87] = [];
    this.units[72] = [];
    this.units[73] = [];
    this.units[69] = [];
    this.units[100] = [];
    this.units[103] = [];
    this.units[102] = [];
    this.units[70] = [];
    this.units[85] = [];
    this.units[71] = [];
    this.units[76] = [];
    this.units[75] = [];
    this.units[91] = [];
    this.units[101] = [];
    this.units[95] = [];
    this.units[96] = [];
    this.units[97] = [];
    this.units[93] = [];
    this.units[94] = [];
    this.units[98] = [];
    this.units[43] = [];
    this.units[45] = [];
    this.units[68] = [];
    this.units[2] = [];
    this.units[1] = [];
    this.units[6] = [];
    this.units[3] = [];
    this.units[5] = [];
    this.units[12] = [];
    this.units[13] = [];
    this.units[14] = [];
    this.units[20] = [];
    this.units[61] = [];
    this.units[4] = [];
    this.units[7] = [];
    this.units[8] = [];
    this.units[9] = [];
    this.units[19] = [];
    this.units[59] = [];
    this.units[50] = [];
    this.units[10] = [];
    this.units[15] = [];
    this.units[16] = [];
    this.units[17] = [];
    this.units[21] = [];
    this.units[60] = [];
    this.units[54] = [];
    this.units[55] = [];
    this.units[56] = [];
    this.units[57] = [];
    this.units[58] = [];
    this.units[62] = [];
    this.units[18] = [];
    this.units[38] = [];
    this.units[65] = [];
    this.units[11] = [];
    this.units[22] = [];
    this.units[23] = [];
    this.units[39] = [];
    this.units[47] = [];
    this.units[42] = [];
    this.units[40] = [];
    this.units[64] = [];
    this.units[46] = [];
    this.units[52] = [];
    this.units[53] = [];
    this.units[63] = [];
    this.units[66] = [];
    this.units[48] = [];
    this.units[49] = [];
    this.units[41] = [];
    this.units[24] = [];
    this.units[25] = [];
    this.units[26] = [];
    this.units[27] = [];
    this.units[28] = [];
    this.units[29] = [];
    this.units[30] = [];
    this.units[31] = [];
    this.units[32] = [];
    this.units[33] = [];
    this.units[34] = [];
    this.units[35] = [];
    this.units[36] = [];
    this.units[37] = [];
    this.units[44] = [];
    this.units[99] = [];
    this.units[51] = [];
    this.fast_units = [];
    this.nw = 260;
    this.nh = 260;
    this.ⵠᐃⵠᐃᐃⲆⲆ = 100;
    this.ᐃᐃᐃᐃⵠⵠⲆ = 100;
    this.w = this.nw * this.ⵠᐃⵠᐃᐃⲆⲆ;
    this.ⵠⲆⵠ = this.ᐃᐃᐃᐃⵠⵠⲆ * this.nh;
    this.ⲆᐃΔⵠΔ = new v566.ᐃⲆΔⲆⲆⲆᐃ();
    this.ᐃⲆⲆΔ = [];
    this.ΔⵠⵠΔ = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV144, 0, 1, 0, 1, 1);
    this.transition = false;
    this.ΔΔΔΔⲆ = [];
    this.ⲆᐃⵠΔⵠΔⵠ = 0;
    this.ⵠᐃΔΔⲆΔⲆ = 1;
    this.ⵠⲆᐃⲆⲆⵠᐃ = 2;
    this.ΔΔⲆΔᐃᐃⵠ = 3;
    this.ⲆⲆⲆⲆⵠ = 4;
    this.ⲆⲆⲆΔⲆᐃⲆ = 10;
    this.ⵠᐃⲆΔⵠᐃᐃ = 11;
    this.ΔΔΔΔⲆ[this.ⲆᐃⵠΔⵠΔⵠ] = {
      ⵠⵠΔⲆⲆⲆᐃ: 1,
      Δⵠⵠ: [19, 58, 43],
      ᐃᐃΔ: [4, 43, 48],
      ᐃΔⲆΔⵠ: ["#133a2b", "#042b30"]
    };
    this.ΔΔΔΔⲆ[this.ⵠᐃⲆΔⵠᐃᐃ] = {
      ᐃᐃΔ: [9, 43, 31],
      Δⵠⵠ: [19, 73, 30],
      ᐃΔⲆΔⵠ: ["#13491E", "#092D1F"],
      ⵠⵠΔⲆⲆⲆᐃ: 1
    };
    this.ΔΔΔΔⲆ[this.ⲆⲆⲆⲆⵠ] = {
      ⵠⵠΔⲆⲆⲆᐃ: 0,
      Δⵠⵠ: [11, 106, 132],
      ᐃᐃΔ: [9, 55, 63],
      ᐃΔⲆΔⵠ: ["#0B6A84", "#09373F"]
    };
    this.ΔΔΔΔⲆ[this.ⵠᐃΔΔⲆΔⲆ] = {
      ⵠⵠΔⲆⲆⲆᐃ: 0,
      Δⵠⵠ: [235, 242, 240],
      ᐃᐃΔ: [19, 97, 103],
      ᐃΔⲆΔⵠ: ["#EBF2F0", "#136167"]
    };
    this.ΔΔΔΔⲆ[this.ⵠⲆᐃⲆⲆⵠᐃ] = {
      Δⵠⵠ: [45, 32, 23],
      ᐃᐃΔ: [3, 28, 30],
      ᐃΔⲆΔⵠ: ["#2D2017", "#031C1E"],
      ⵠⵠΔⲆⲆⲆᐃ: 0
    };
    this.ΔΔΔΔⲆ[this.ΔΔⲆΔᐃᐃⵠ] = {
      ᐃΔⲆΔⵠ: ["#4A4A4A", "#183D3C"],
      Δⵠⵠ: [74, 74, 74],
      ⵠⵠΔⲆⲆⲆᐃ: 0,
      ᐃᐃΔ: [24, 61, 60]
    };
    this.ΔΔΔΔⲆ[this.ⲆⲆⲆΔⲆᐃⲆ] = {
      Δⵠⵠ: [235, 216, 166],
      ᐃᐃΔ: [9, 61, 56],
      ᐃΔⲆΔⵠ: ["#EBD8A6", "#093D38"],
      ⵠⵠΔⲆⲆⲆᐃ: 0
    };
    this.ⵠΔⲆᐃΔᐃⵠ = function (p1473, p1474, p1475, p1476, p1477, p1478) {
      this.x1 = p1474 * 100;
      this.y1 = p1475 * 100;
      this.w = p1476 * 100;
      this.ⵠⲆⵠ = p1477 * 100;
      this.x2 = (p1474 + p1476) * 100;
      this.y2 = (p1475 + p1477) * 100;
      this.ᐃⵠⲆ = p1473;
      this.Ⲇⵠⵠ = p1478 === undefined ? 15 : p1478;
    };
    this.ⲆᐃⲆΔΔ = -1000000;
    this.ΔⵠΔⲆⲆ = this.ⲆᐃⲆΔΔ;
    this.ⲆᐃΔⵠᐃ = this.ⲆᐃⲆΔΔ;
    this.ᐃⵠᐃⵠᐃ = this.ⲆᐃⲆΔΔ;
    this.ⲆᐃᐃΔᐃⵠΔ = this.ⲆᐃⲆΔΔ;
    this.ΔᐃᐃΔᐃᐃⲆ = this.ⲆᐃⲆΔΔ;
    this.ΔΔΔⲆⵠΔⵠ = this.ⲆᐃⲆΔΔ;
    this.ⲆΔᐃⲆⲆ = this.ⲆᐃⲆΔΔ;
    this.ⲆΔⵠᐃⲆΔⵠᐃΔ = function (p1479) {
      var v2338 = p1479.r.x;
      var v2339 = p1479.r.y;
      var v2340 = Math.floor(v2339 / 100);
      var v2341 = Math.floor(v2338 / 100);
      p1479.ΔⵠΔⲆⲆ = world.ⲆᐃⲆΔΔ;
      p1479.ⲆᐃΔⵠᐃ = world.ⲆᐃⲆΔΔ;
      p1479.ᐃⵠᐃⵠᐃ = world.ⲆᐃⲆΔΔ;
      p1479.ⲆᐃᐃΔᐃⵠΔ = world.ⲆᐃⲆΔΔ;
      p1479.ΔᐃᐃΔᐃᐃⲆ = world.ⲆᐃⲆΔΔ;
      p1479.ⲆΔᐃⲆⲆ = world.ⲆᐃⲆΔΔ;
      p1479.ⵠᐃΔᐃⵠⲆΔ = world.ⲆᐃⲆΔΔ;
      for (var v2342 = 0; world.ⲆⲆⲆⲆⵠ !== world.ᐃⲆⲆΔ[v2342].ᐃⵠⲆ; v2342++) {
        if (world.ⲆᐃⵠΔⵠΔⵠ === world.ᐃⲆⲆΔ[v2342].ᐃⵠⲆ) {
          var v2343 = world.ΔᐃⵠᐃΔ(v2342, v2338, v2339);
          p1479.ⲆᐃᐃΔᐃⵠΔ = Math.max(p1479.ⲆᐃᐃΔᐃⵠΔ, v2343);
          if (v2343 > 0 && world.ΔⵠΔⲆⲆᐃⲆ(v2342, v2338, v2339) === 1) {
            p1479.ⵠᐃΔᐃⵠⲆΔ = 1;
          }
        } else if (world.ⵠᐃⲆΔⵠᐃᐃ === world.ᐃⲆⲆΔ[v2342].ᐃⵠⲆ) {
          v2343 = world.ΔᐃⵠᐃΔ(v2342, v2338, v2339);
          p1479.ΔᐃᐃΔᐃᐃⲆ = Math.max(p1479.ΔᐃᐃΔᐃᐃⲆ, v2343);
          if (v2343 > 0 && world.ΔⵠΔⲆⲆᐃⲆ(v2342, v2338, v2339) === 1) {
            p1479.ⵠᐃΔᐃⵠⲆΔ = 1;
          }
        } else if (world.ⵠᐃΔΔⲆΔⲆ === world.ᐃⲆⲆΔ[v2342].ᐃⵠⲆ) {
          p1479.ΔⵠΔⲆⲆ = Math.max(p1479.ΔⵠΔⲆⲆ, world.ΔᐃⵠᐃΔ(v2342, v2338, v2339));
        } else if (world.ᐃⲆⲆΔ[v2342].ᐃⵠⲆ === world.ⲆⲆⲆΔⲆᐃⲆ) {
          p1479.ⲆᐃΔⵠᐃ = Math.max(p1479.ⲆᐃΔⵠᐃ, world.ΔᐃⵠᐃΔ(v2342, v2338, v2339));
        } else if (world.ᐃⲆⲆΔ[v2342].ᐃⵠⲆ === world.ⵠⲆᐃⲆⲆⵠᐃ) {
          p1479.ᐃⵠᐃⵠᐃ = Math.max(p1479.ᐃⵠᐃⵠᐃ, world.ΔᐃⵠᐃΔ(v2342, v2338, v2339));
        } else if (world.ᐃⲆⲆΔ[v2342].ᐃⵠⲆ === world.ΔΔⲆΔᐃᐃⵠ) {
          p1479.ⲆΔᐃⲆⲆ = Math.max(p1479.ⲆΔᐃⲆⲆ, world.ΔᐃⵠᐃΔ(v2342, v2338, v2339));
        }
      }
      if (v2831.ⵠⲆΔⵠ[v2340][v2341].iblk) {
        p1479.ⵠᐃΔᐃⵠⲆΔ = 1;
      }
      if (world.ᐃᐃΔⵠΔᐃᐃⵠⲆ(v2341, v2340)) {
        p1479.ΔΔΔⲆⵠΔⵠ = p1479.ⲆᐃⲆΔΔ;
      } else if (v2831.ⵠⲆΔⵠ[v2340][v2341].wtb || p1479.ΔⵠΔⲆⲆ < 0 && p1479.ᐃⵠᐃⵠᐃ < 0 && p1479.ⲆᐃᐃΔᐃⵠΔ < 0 && p1479.ⵠᐃΔᐃⵠⲆΔ < 0 && p1479.ⲆΔᐃⲆⲆ < 0 && p1479.ⲆᐃΔⵠᐃ < 0 && p1479.ΔᐃᐃΔᐃᐃⲆ < 0) {
        p1479.ΔΔΔⲆⵠΔⵠ = 1;
      } else {
        p1479.ΔΔΔⲆⵠΔⵠ = p1479.ⲆᐃⲆΔΔ;
      }
    };
    this.ᐃⲆⵠΔᐃᐃΔᐃⲆ = function (p1480, p1481) {
      world.ΔⵠΔⲆⲆ = world.ⲆᐃⲆΔΔ;
      world.ⲆᐃΔⵠᐃ = world.ⲆᐃⲆΔΔ;
      world.ᐃⵠᐃⵠᐃ = world.ⲆᐃⲆΔΔ;
      world.ⲆΔᐃⲆⲆ = world.ⲆᐃⲆΔΔ;
      world.ⲆᐃᐃΔᐃⵠΔ = world.ⲆᐃⲆΔΔ;
      world.ΔᐃᐃΔᐃᐃⲆ = world.ⲆᐃⲆΔΔ;
      for (var v2344 = 0; world.ᐃⲆⲆΔ[v2344].ᐃⵠⲆ !== world.ⲆⲆⲆⲆⵠ; v2344++) {
        if (world.ᐃⲆⲆΔ[v2344].ᐃⵠⲆ === world.ⲆᐃⵠΔⵠΔⵠ) {
          world.ⲆᐃᐃΔᐃⵠΔ = Math.max(world.ⲆᐃᐃΔᐃⵠΔ, world.ΔᐃⵠᐃΔ(v2344, p1480, p1481));
        } else if (world.ⵠᐃⲆΔⵠᐃᐃ === world.ᐃⲆⲆΔ[v2344].ᐃⵠⲆ) {
          world.ΔᐃᐃΔᐃᐃⲆ = Math.max(world.ΔᐃᐃΔᐃᐃⲆ, world.ΔᐃⵠᐃΔ(v2344, p1480, p1481));
        } else if (world.ⵠᐃΔΔⲆΔⲆ === world.ᐃⲆⲆΔ[v2344].ᐃⵠⲆ) {
          world.ΔⵠΔⲆⲆ = Math.max(world.ΔⵠΔⲆⲆ, world.ΔᐃⵠᐃΔ(v2344, p1480, p1481));
        } else if (world.ᐃⲆⲆΔ[v2344].ᐃⵠⲆ === world.ⲆⲆⲆΔⲆᐃⲆ) {
          world.ⲆᐃΔⵠᐃ = Math.max(world.ⲆᐃΔⵠᐃ, world.ΔᐃⵠᐃΔ(v2344, p1480, p1481));
        } else if (world.ᐃⲆⲆΔ[v2344].ᐃⵠⲆ === world.ⵠⲆᐃⲆⲆⵠᐃ) {
          world.ᐃⵠᐃⵠᐃ = Math.max(world.ᐃⵠᐃⵠᐃ, world.ΔᐃⵠᐃΔ(v2344, p1480, p1481));
        } else if (world.ΔΔⲆΔᐃᐃⵠ === world.ᐃⲆⲆΔ[v2344].ᐃⵠⲆ) {
          world.ⲆΔᐃⲆⲆ = Math.max(world.ⲆΔᐃⲆⲆ, world.ΔᐃⵠᐃΔ(v2344, p1480, p1481));
        }
      }
      if (world.ΔⵠΔⲆⲆ < 0 && world.ⲆΔᐃⲆⲆ < 0 && world.ⲆᐃᐃΔᐃⵠΔ < 0 && world.ⲆΔᐃⲆⲆ < 0 && world.ⲆᐃΔⵠᐃ < 0 && world.ΔᐃᐃΔᐃᐃⲆ < 0) {
        world.ΔΔΔⲆⵠΔⵠ = 1;
      } else {
        world.ΔΔΔⲆⵠΔⵠ = world.ⲆᐃⲆΔΔ;
      }
    };
    this.ΔⵠΔⲆⲆᐃⲆ = function (p1482, p1483, p1484) {
      var v2345 = world.ᐃⲆⲆΔ[p1482];
      var v2346 = 0;
      ⲆⵠΔⵠ = v2345.x1 + 30 + ((v2345.Ⲇⵠⵠ & 4) === 0 ? 150 : 0);
      var v2347 = p1483 - ⲆⵠΔⵠ;
      if ((v2345.Ⲇⵠⵠ & 4) > 0 && v2347 > 0 && v2347 < 320) {
        v2346 = 1;
      }
      ⵠⲆⵠᐃ = v2345.y1 + 250 + (v2345.Ⲇⵠⵠ & 1 ? 0 : 150);
      v2347 = p1484 - ⵠⲆⵠᐃ;
      if ((v2345.Ⲇⵠⵠ & 1) > 0 && v2347 > 0 && v2347 < 320) {
        v2346 = 1;
      }
      ⲆⵠᐃΔ = v2345.x2 + 80 + (v2345.Ⲇⵠⵠ & 8 ? 0 : -200);
      v2347 = ⲆⵠᐃΔ - p1483;
      if ((v2345.Ⲇⵠⵠ & 8) > 0 && v2347 > 0 && v2347 < 320) {
        v2346 = 1;
      }
      ΔⲆⵠΔ = v2345.y2 - 200 + (v2345.Ⲇⵠⵠ & 2 ? 0 : -200);
      v2347 = ΔⲆⵠΔ - p1484;
      if ((v2345.Ⲇⵠⵠ & 2) > 0 && v2347 > 0 && v2347 < 320) {
        v2346 = 1;
      }
      if (ⲆⵠΔⵠ <= p1483 && ⲆⵠᐃΔ >= p1483 && ⵠⲆⵠᐃ <= p1484 && p1484 <= ΔⲆⵠΔ) {
        return v2346;
      } else {
        return 0;
      }
    };
    this.ΔᐃⵠᐃΔ = function (p1485, p1486, p1487) {
      var v2348 = world.ᐃⲆⲆΔ[p1485];
      ⲆⵠΔⵠ = v2348.x1 + 30;
      ⵠⲆⵠᐃ = v2348.y1 + 250;
      ⲆⵠᐃΔ = v2348.x2 + 80;
      ΔⲆⵠΔ = v2348.y2 - 200;
      if (p1486 >= ⲆⵠΔⵠ && p1486 <= ⲆⵠᐃΔ && ⵠⲆⵠᐃ <= p1487 && p1487 <= ΔⲆⵠΔ) {
        return Math.min(p1486 - ⲆⵠΔⵠ, ⲆⵠᐃΔ - p1486, p1487 - ⵠⲆⵠᐃ, ΔⲆⵠΔ - p1487);
      }
      var v2349 = -1000000;
      if (p1486 - ⲆⵠΔⵠ < 0) {
        v2349 = Math.max(v2349, p1486 - ⲆⵠΔⵠ);
      } else if (ⲆⵠᐃΔ - p1486 < 0) {
        v2349 = Math.max(v2349, ⲆⵠᐃΔ - p1486);
      }
      ᐃⲆⵠⲆⵠⵠΔ = -1000000;
      if (p1487 < ⵠⲆⵠᐃ || ΔⲆⵠΔ < p1487) {
        if (p1487 - ⵠⲆⵠᐃ < 0) {
          ᐃⲆⵠⲆⵠⵠΔ = Math.max(ᐃⲆⵠⲆⵠⵠΔ, p1487 - ⵠⲆⵠᐃ);
        } else {
          ᐃⲆⵠⲆⵠⵠΔ = Math.max(ᐃⲆⵠⲆⵠⵠΔ, ΔⲆⵠΔ - p1487);
        }
        v2349 = v2349 !== -1000000 && ᐃⲆⵠⲆⵠⵠΔ !== -1000000 ? Math.min(v2349, ᐃⲆⵠⲆⵠⵠΔ) : ᐃⲆⵠⲆⵠⵠΔ;
      }
      return v2349;
    };
    this.ᐃΔⵠⲆⲆⵠΔ = function (p1488, p1489, p1490) {
      var vP1490 = p1490;
      var vP1489 = p1489;
      f447(vP1490, vP1489, "isl", p1488, 1);
      for (var v2350 = 0; v2350 < 4; v2350++) {
        for (var v2351 = 0; v2351 < 3; v2351++) {
          f447(vP1490 - v2351, vP1489 - v2350, "iblk", 0);
          f447(vP1490 + v2351, vP1489 - v2350, "iblk", 0);
          f447(vP1490 + v2351, vP1489 + v2350, "iblk", 0);
          f447(vP1490 - v2351, vP1489 + v2350, "iblk", 0);
        }
      }
      if (p1488 === 0) {
        for (v2350 = 0; v2350 < 2; v2350++) {
          f447(vP1490 - v2350, vP1489 - 4, "iblk", 0);
          f447(vP1490 + v2350, vP1489 - 4, "iblk", 0);
          f447(vP1490 - v2350, vP1489 + 4, "iblk", 0);
          f447(vP1490 + v2350, vP1489 + 4, "iblk", 0);
        }
        for (v2350 = 0; v2350 < 3; v2350++) {
          f447(vP1490 - 3, vP1489 + v2350, "iblk", 0);
          f447(vP1490 + 3, vP1489 + v2350, "iblk", 0);
          f447(vP1490 - 3, vP1489 - v2350, "iblk", 0);
          f447(vP1490 + 3, vP1489 - v2350, "iblk", 0);
        }
        f447(vP1490 - 2, vP1489 - 4, "iblk", 0);
        f447(vP1490 - 3, vP1489 - 3, "iblk", 0);
        f447(vP1490 + 2, vP1489 + 4, "iblk", 0);
        f447(vP1490 + 3, vP1489 + 3, "iblk", 0);
      } else if (p1488 === 1) {
        for (v2350 = 0; v2350 < 3; v2350++) {
          f447(vP1490 - v2350, vP1489 - 4, "iblk", 0);
          f447(vP1490 + v2350, vP1489 - 4, "iblk", 0);
          f447(vP1490 - v2350, vP1489 + 4, "iblk", 0);
          f447(vP1490 + v2350, vP1489 + 4, "iblk", 0);
        }
        for (v2350 = 0; v2350 < 4; v2350++) {
          f447(vP1490 - 3, vP1489 + v2350, "iblk", 0);
          f447(vP1490 + 3, vP1489 + v2350, "iblk", 0);
          f447(vP1490 - 3, vP1489 - v2350, "iblk", 0);
          f447(vP1490 + 3, vP1489 - v2350, "iblk", 0);
        }
      } else if (p1488 === 2) {
        for (v2350 = 0; v2350 < 2; v2350++) {
          f447(vP1490 - v2350, vP1489 - 4, "iblk", 0);
          f447(vP1490 + v2350, vP1489 - 4, "iblk", 0);
          f447(vP1490 - v2350, vP1489 + 4, "iblk", 0);
          f447(vP1490 + v2350, vP1489 + 4, "iblk", 0);
        }
        for (v2350 = 0; v2350 < 3; v2350++) {
          f447(vP1490 - 3, vP1489 + v2350, "iblk", 0);
          f447(vP1490 + 3, vP1489 + v2350, "iblk", 0);
          f447(vP1490 - 3, vP1489 - v2350, "iblk", 0);
          f447(vP1490 + 3, vP1489 - v2350, "iblk", 0);
        }
      }
    };
    this.ⵠⲆⵠΔΔⵠᐃⲆΔ = function (p1491) {
      for (var v2352 = 0; v2352 < world.ᐃⲆⲆΔ.length && p1491 > 0; v2352++) {
        var v2353 = world.ᐃⲆⲆΔ[v2352];
        if (world.ⲆⲆⲆⲆⵠ === v2353.ᐃⵠⲆ && v2353.w > 1800 && v2353.ⵠⲆⵠ > 1000) {
          var v2354 = Math.floor((v2353.x1 + v2353.w / 2) / 100);
          var v2355 = Math.floor((v2353.y1 + v2353.ⵠⲆⵠ / 2) / 100);
          world.ᐃΔⵠⲆⲆⵠΔ(p1491 % 3, v2354, v2355);
          for (var v2356 = 0; v2356 < 3; v2356++) {
            var v2357 = v2355 - 2 + Math.floor(world.ⲆᐃΔⵠΔ.get() * 4);
            var v2358 = v2354 - 3 + Math.floor(world.ⲆᐃΔⵠΔ.get() * 6);
            if (v2831.ⵠⲆΔⵠ[v2357][v2358].s === vVVVVUndefined583) {
              f447(v2357, v2358, "plm", v2356);
            }
            v2357 = v2355 - 2 + Math.floor(world.ⲆᐃΔⵠΔ.get() * 4);
            v2358 = v2354 - 3 + Math.floor(world.ⲆᐃΔⵠΔ.get() * 6);
            if (vVVUndefined14 === v2831.ⵠⲆΔⵠ[v2357][v2358].plm) {
              f447(v2357, v2358, "s", v2356);
            }
          }
          v2357 = v2355 - 2 + Math.floor(world.ⲆᐃΔⵠΔ.get() * 4);
          v2358 = v2354 - 3 + Math.floor(world.ⲆᐃΔⵠΔ.get() * 6);
          if (v2831.ⵠⲆΔⵠ[v2357][v2358].plm === undefined && v2831.ⵠⲆΔⵠ[v2357][v2358].s === vVVVVUndefined14) {
            f447(v2357, v2358, "p", 0, 1);
          }
          p1491--;
        }
      }
    };
    this.ΔΔⵠᐃⲆⲆⲆᐃⵠ = function (p1492) {
      world.ⲆᐃΔⵠΔ.ΔᐃΔⲆⵠ(p1492);
      var v2359 = 0;
      while (true) {
        if (++v2359 > 10000) {
          return;
        }
        world.ᐃⲆⲆΔ = [];
        if (world.ΔⲆΔⲆᐃ === 0 && (world.mode === 3 || world.mode === 7 || world.mode === 0)) {
          world.ΔⲆΔⲆᐃ = v571;
        }
        if (world.mode === 2) {
          world.ᐃⲆⲆΔ.push(new world.ⵠΔⲆᐃΔᐃⵠ(world.ⲆᐃⵠΔⵠΔⵠ, 2, 2, 80, 80, 15));
        } else if (world.ΔⲆΔⲆᐃ !== 0 && world.ΔⲆΔⲆᐃ.length > 0 && world.ΔⲆΔⲆᐃ[0].length > 3) {
          for (var v2360 = 0; world.ΔⲆΔⲆᐃ.length > v2360; v2360++) {
            if ((v2371 = world.ΔⲆΔⲆᐃ[v2360])[0] !== 0) {
              break;
            }
            var v2361 = v2257.ⲆᐃⵠΔⵠΔⵠ;
            switch (v2371[1]) {
              case "FOREST":
                v2361 = world.ⲆᐃⵠΔⵠΔⵠ;
                break;
              case "JUNGLE":
                v2361 = world.ⵠᐃⲆΔⵠᐃᐃ;
                break;
              case "WINTER":
                v2361 = world.ⵠᐃΔΔⲆΔⲆ;
                break;
              case "DESERT":
                v2361 = world.ⲆⲆⲆΔⲆᐃⲆ;
                break;
              case "LAVA":
                v2361 = world.ⵠⲆᐃⲆⲆⵠᐃ;
                break;
              case "DRAGON":
                v2361 = world.ΔΔⲆΔᐃᐃⵠ;
            }
            world.ᐃⲆⲆΔ.push(new world.ⵠΔⲆᐃΔᐃⵠ(v2361, v2371[2], v2371[3], v2371[4], v2371[5], v2371[6], v2371[7]));
          }
        } else if (world.ΔⲆΔⲆᐃ !== 0) {
          for (v2360 = 0; world.ΔⲆΔⲆᐃ.length > v2360; v2360++) {
            var v2362 = world.ΔⲆΔⲆᐃ[v2360];
            v2361 = v2257.ⲆᐃⵠΔⵠΔⵠ;
            switch (v2362[0]) {
              case "FOREST":
                v2361 = world.ⲆᐃⵠΔⵠΔⵠ;
                break;
              case "JUNGLE":
                v2361 = world.ⵠᐃⲆΔⵠᐃᐃ;
                break;
              case "WINTER":
                v2361 = world.ⵠᐃΔΔⲆΔⲆ;
                break;
              case "DESERT":
                v2361 = world.ⲆⲆⲆΔⲆᐃⲆ;
                break;
              case "LAVA":
                v2361 = world.ⵠⲆᐃⲆⲆⵠᐃ;
                break;
              case "DRAGON":
                v2361 = world.ΔΔⲆΔᐃᐃⵠ;
            }
            if (t(v2361, v2362[1], v2362[2], 0, (v2360 + 1) * 10) === 0) {
              break;
            }
          }
          if (world.ΔⲆΔⲆᐃ.length !== v2360) {
            continue;
          }
        }
        break;
      }
      ᐃᐃⵠΔⲆⲆⵠᐃᐃ();
      var v2363 = [];
      for (var v2364 = 0; world.nh > v2364; v2364++) {
        v2363[v2364] = new Array(world.nw);
        for (var v2365 = 0; world.nw > v2365; v2365++) {
          v2363[v2364][v2365] = 0;
        }
      }
      for (v2364 = 0; v2364 < world.ᐃⲆⲆΔ.length; v2364++) {
        for (var v2366 = (v2362 = world.ᐃⲆⲆΔ[v2364]).x2 / 100, v2367 = v2362.y2 / 100, v2368 = v2362.x1 / 100; v2366 >= v2368; v2368++) {
          for (var v2369 = v2362.y1 / 100; v2369 <= v2367; v2369++) {
            v2363[v2369][v2368] = 1;
          }
        }
      }
      for (v2369 = 0; v2369 < world.nh; v2369++) {
        for (v2368 = 0; v2368 < world.nw; v2368++) {
          if (v2363[v2369][v2368] === 0) {
            i(v2363, v2368, v2369);
          }
        }
      }
      v2831 = {
        w: world.nw,
        ⵠⲆⵠ: world.nh,
        ⵠⲆΔⵠ: []
      };
      for (v2364 = 0; world.nh > v2364; v2364++) {
        v2831.ⵠⲆΔⵠ[v2364] = [];
      }
      if (world.ΔⲆΔⲆᐃ !== 0 && world.ΔⲆΔⲆᐃ.length > 0 && world.ΔⲆΔⲆᐃ[0].length > 3) {
        for (v2360 = 0; v2360 < world.ΔⲆΔⲆᐃ.length; v2360++) {
          if ((v2371 = world.ΔⲆΔⲆᐃ[v2360])[1] === "isl") {
            world.ᐃΔⵠⲆⲆⵠΔ(v2371[2], v2371[3], v2371[4]);
          }
        }
      } else {
        world.ⵠⲆⵠΔΔⵠᐃⲆΔ(world.ᐃΔΔⵠᐃⵠᐃ);
      }
      if (world.ΔⲆΔⲆᐃ !== 0 && world.ΔⲆΔⲆᐃ.length > 0 && world.ΔⲆΔⲆᐃ[0].length > 3) {
        var v2370 = [];
        for (v2360 = 0; world.ΔⲆΔⲆᐃ.length > v2360; v2360++) {
          var v2371;
          if ((v2371 = world.ΔⲆΔⲆᐃ[v2360])[0] === 1) {
            if (v2371[1] === "r") {
              f447(v2371[3], v2371[2], "wtb", 0, 1);
              v2370.push([v2371[3], v2371[2], v2371[4]]);
            } else {
              f447(v2371[4], v2371[3], v2371[1], v2371[2], v2371[5]);
            }
          }
        }
        f440(0, v2370);
        v2370 = [];
      } else {
        for (v2364 = 0; world.ᐃⲆⲆΔ.length > v2364; v2364++) {
          v2362 = world.ᐃⲆⲆΔ[v2364];
          if (world.ⲆᐃⵠΔⵠΔⵠ === v2362.ᐃⵠⲆ) {
            if (world.mode === 4) {
              f454(v2364, v2362.w / 10000);
            } else {
              f451(v2364, v2362.w / 10000);
            }
          }
          if (v2362.ᐃⵠⲆ === world.ⵠᐃⲆΔⵠᐃᐃ) {
            f449(v2364, v2362.w / 10000);
          }
          if (world.ⵠⲆᐃⲆⲆⵠᐃ === v2362.ᐃⵠⲆ) {
            f450(v2364, v2362.w / 10000);
          }
          if (world.ⵠᐃΔΔⲆΔⲆ === v2362.ᐃⵠⲆ) {
            f453(v2364, v2362.w / 10000);
          }
          if (world.ⲆⲆⲆΔⲆᐃⲆ === v2362.ᐃⵠⲆ) {
            f446(v2364, v2362.w / 10000);
          }
          if (world.ΔΔⲆΔᐃᐃⵠ === v2362.ᐃⵠⲆ) {
            f445(v2364);
          }
        }
      }
      f84("isl", 1);
      f84("wtb", 20);
      f84("la", 1);
      f84("c", 1);
      f84("s", 1);
      f84("jus", 1);
      f84("f", 1);
      f84("p", 1);
      f84("bap", 1);
      f84("jub", 1);
      f84("g", 1);
      f84("d", 1);
      f84("a", 1);
      f84("re", 1);
      f84("m", 1);
      f84("cop", 1);
      f84("iro", 1);
      f84("top", 1);
      f84("sap", 1);
      f84("jad", 1);
      f84("rub", 1);
      f84("aqu", 1);
      f84("coa", 1);
      v774 = [];
      world.ⲆΔᐃⲆᐃΔᐃⲆⲆ(v2831);
    };
    this.ᐃᐃᐃⲆ = f447;
    this.ⲆΔᐃⲆᐃΔᐃⲆⲆ = function (p1493) {
      for (var v2372 = 0; this.nh > v2372; v2372++) {
        for (var v2373 = 0; this.nw > v2373; v2373++) {
          p1493.ⵠⲆΔⵠ[v2372] ||= [];
          if (p1493.ⵠⲆΔⵠ[v2372][v2373]) {
            var v2374 = p1493.ⵠⲆΔⵠ[v2372][v2373];
            if (v2374.de && v2374.de.length > 0) {
              for (var v2375 = 0; v2374.de.length > v2375; v2375++) {
                if (v2374.de[v2375] && v2374.de[v2375].length > 0) {
                  v2374.de = v2374.de[v2375][0];
                  if (v2375 >= 41 && v2375 <= 49) {
                    v2374.de.scale = 3;
                    var v2376 = Math.floor(Math.random() * 3 + 1);
                    v2374.de.ᐃᐃⵠ = [];
                    for (var v2377 = 0; v2377 < v2376; v2377++) {
                      v2374.de.ᐃᐃⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ⵠⵠΔⵠΔ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (v2375 >= 19 && v2375 <= 26) {
                    v2374.de.scale = 3;
                    v2376 = Math.floor(Math.random() * 3 + 1);
                    v2374.de.ᐃᐃⵠ = [];
                    for (v2377 = 0; v2377 < v2376; v2377++) {
                      v2374.de.ᐃᐃⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ⵠⵠΔⵠΔ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (v2375 <= 15 || v2375 >= 27 && v2375 <= 40) {
                    v2374.de.angle = 0;
                    v2374.de.scale = 2;
                    v2374.de.ⵠⵠΔⵠΔ = v2375;
                  } else {
                    v2374.de.angle = Math.PI * Math.random() * 2;
                    v2374.de.scale = 1;
                    v2374.de.ⵠⵠΔⵠΔ = v2375;
                  }
                }
              }
            }
            f455(v2374, "p", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "t", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVVV142, 1, 1, 0, 10, 10));
            f455(v2374, "s", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "g", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV144, 1, 1, 0, 10, 10));
            f455(v2374, "d", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "b", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV1422, 1, 1, 0, 10, 10));
            f455(v2374, "f", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "sw", new Δᐃᐃ.Ⲇⵠᐃᐃ(v14, 1, 1, 0, 10, 10));
            f455(v2374, "gw", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "dw", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV145, 1, 1, 0, 10, 10));
            f455(v2374, "a", new Δᐃᐃ.Ⲇⵠᐃᐃ(vV14, 1, 1, 0, 10, 10));
            f455(v2374, "cs", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "plm", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV142, 1, 1, 0, 10, 10));
            f455(v2374, "re", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV144, 1, 1, 0, 10, 10));
            f455(v2374, "c", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "m", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV1422, 1, 1, 0, 10, 10));
            f455(v2374, "coa", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV14, 1, 1, 0, 10, 10));
            f455(v2374, "cop", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "iro", new Δᐃᐃ.Ⲇⵠᐃᐃ(vV14, 1, 1, 0, 10, 10));
            f455(v2374, "top", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "sap", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 1, 1, 0, 10, 10));
            f455(v2374, "jad", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "rub", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "aqu", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "jut", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV144, 1, 1, 0, 10, 10));
            f455(v2374, "jub", new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1, 0, 10, 10));
            f455(v2374, "jus", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV144, 1, 1, 0, 10, 10));
            f455(v2374, "jus", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVVV142, 1, 1, 0, 10, 10));
            f455(v2374, "bap", new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV142, 1, 1, 0, 10, 10));
          } else {
            p1493.ⵠⲆΔⵠ[v2372][v2373] = [];
          }
        }
      }
    };
    this.time = v585.ᐃⲆᐃ;
    this.ⲆᐃⲆⵠᐃ = {
      now: 0,
      ⵠΔⲆΔᐃ: 0,
      translate: {
        y: 0,
        x: 0
      },
      ΔᐃΔⲆⵠ: 0
    };
    this.ⲆⲆΔᐃΔⵠⵠⲆΔ = function () {
      this.fast_units = [];
      this.units[0] = [];
      this.units[2] = [];
      this.units[1] = [];
      this.units[6] = [];
      this.units[3] = [];
      this.units[5] = [];
      this.units[12] = [];
      this.units[13] = [];
      this.units[14] = [];
      this.units[20] = [];
      this.units[61] = [];
      this.units[39] = [];
      this.units[65] = [];
      this.units[47] = [];
      this.units[42] = [];
      this.units[40] = [];
      this.units[64] = [];
      this.units[46] = [];
      this.units[52] = [];
      this.units[53] = [];
      this.units[63] = [];
      this.units[66] = [];
      this.units[48] = [];
      this.units[49] = [];
      this.units[41] = [];
      this.units[24] = [];
      this.units[25] = [];
      this.units[26] = [];
      this.units[27] = [];
      this.units[28] = [];
      this.units[29] = [];
      this.units[30] = [];
      this.units[31] = [];
      this.units[32] = [];
      this.units[33] = [];
      this.units[34] = [];
      this.units[35] = [];
      this.units[36] = [];
      this.units[37] = [];
      this.units[44] = [];
      this.units[4] = [];
      this.units[7] = [];
      this.units[8] = [];
      this.units[9] = [];
      this.units[19] = [];
      this.units[59] = [];
      this.units[50] = [];
      this.units[10] = [];
      this.units[15] = [];
      this.units[16] = [];
      this.units[17] = [];
      this.units[21] = [];
      this.units[60] = [];
      this.units[54] = [];
      this.units[55] = [];
      this.units[56] = [];
      this.units[57] = [];
      this.units[58] = [];
      this.units[62] = [];
      this.units[18] = [];
      this.units[38] = [];
      this.units[65] = [];
      this.units[11] = [];
      this.units[22] = [];
      this.units[23] = [];
      this.units[105] = [];
      this.units[106] = [];
      this.units[104] = [];
      this.units[92] = [];
      this.units[67] = [];
      this.units[74] = [];
      this.units[77] = [];
      this.units[84] = [];
      this.units[78] = [];
      this.units[79] = [];
      this.units[80] = [];
      this.units[81] = [];
      this.units[86] = [];
      this.units[88] = [];
      this.units[89] = [];
      this.units[90] = [];
      this.units[87] = [];
      this.units[72] = [];
      this.units[73] = [];
      this.units[69] = [];
      this.units[100] = [];
      this.units[103] = [];
      this.units[102] = [];
      this.units[70] = [];
      this.units[85] = [];
      this.units[82] = [];
      this.units[83] = [];
      this.units[71] = [];
      this.units[76] = [];
      this.units[75] = [];
      this.units[91] = [];
      this.units[101] = [];
      this.units[95] = [];
      this.units[96] = [];
      this.units[97] = [];
      this.units[93] = [];
      this.units[94] = [];
      this.units[98] = [];
      this.units[43] = [];
      this.units[45] = [];
      this.units[68] = [];
      this.units[99] = [];
      this.units[51] = [];
    };
    this.ⵠⵠΔΔⵠᐃᐃⲆᐃ = function (p1494) {
      if (this.fast_units[p1494]) {
        ⵠᐃⵠⲆ = this.fast_units[p1494].type;
        this.fast_units[p1494] = null;
        for (var v2378 = this.units[ⵠᐃⵠⲆ], v2379 = 0; v2378.length > v2379; v2379++) {
          if (p1494 == v2378[v2379].ᐃᐃⵠⵠ) {
            v2378.splice(v2379, 1);
            return;
          }
        }
      }
    };
    this.ⵠⵠᐃⲆⵠⵠⵠⵠᐃ = function (p1495, p1496) {
      for (var v2380 = 0; this.units[65].length > v2380; v2380++) {
        var v2381 = this.units[65][v2380];
        if (p1496 === Math.floor(v2381.x / 100) && p1495 === Math.floor(v2381.y / 100)) {
          return 1;
        }
      }
      return 0;
    };
    this.ᐃᐃΔⵠΔᐃᐃⵠⲆ = function (p1497, p1498) {
      for (var v2382 = 0; this.units[39].length > v2382; v2382++) {
        var v2383 = this.units[39][v2382];
        if (Math.floor(v2383.x / 100) == p1497 && p1498 == Math.floor(v2383.y / 100)) {
          return true;
        }
      }
      return vVV1423;
    };
    this.ΔⵠᐃΔᐃ = function (p1499) {
      for (var v2384 = 0; p1499.length > v2384; v2384++) {
        ᐃⲆΔⲆ = p1499[v2384];
        if (ᐃⲆΔⲆ.ΔᐃΔΔᐃΔᐃ != ᐃⲆΔⲆ.angle) {
          var v2385 = Math.PI * 2;
          ᐃⲆΔⲆ.angle = (ᐃⲆΔⲆ.angle + v2385) % v2385;
          ᐃⲆΔⲆ.ΔᐃΔΔᐃΔᐃ = (ᐃⲆΔⲆ.ΔᐃΔΔᐃΔᐃ + v2385) % v2385;
          if (ᐃⲆΔⲆ.angle != ᐃⲆΔⲆ.ΔᐃΔΔᐃΔᐃ) {
            var v2386 = ᐃⲆΔⲆ.ΔᐃΔΔᐃΔᐃ - ᐃⲆΔⲆ.angle;
            var v2387 = Math.abs(v2386);
            if (v2387 > Math.PI) {
              v2387 = Math.PI * 2 - v2387;
            }
            var v2388 = v2387 / Math.PI * 3 * 10 * v3064;
            if (v2386 > Math.PI) {
              ᐃⲆΔⲆ.angle -= v2388;
            } else if (v2386 < -Math.PI) {
              ᐃⲆΔⲆ.angle += v2388;
            } else if (v2386 < 0) {
              ᐃⲆΔⲆ.angle -= v2388;
            } else {
              ᐃⲆΔⲆ.angle += v2388;
            }
            ᐃⲆΔⲆ.angle = (ᐃⲆΔⲆ.angle + v2385) % v2385;
            if (Math.abs(ᐃⲆΔⲆ.angle - ᐃⲆΔⲆ.ΔᐃΔΔᐃΔᐃ) < v2388) {
              ᐃⲆΔⲆ.angle = ᐃⲆΔⲆ.ΔᐃΔΔᐃΔᐃ;
            }
          }
        }
        Math.floor(ᐃⲆΔⲆ.r.y / 100);
        Math.floor(ᐃⲆΔⲆ.r.x / 100);
        if (ᐃⲆΔⲆ.r.x != ᐃⲆΔⲆ.x || ᐃⲆΔⲆ.y != ᐃⲆΔⲆ.r.y) {
          if (ᐃⲆΔⲆ.action & 64) {
            ᐃⲆΔⲆ.action -= 64;
          }
          ᐃⲆΔⲆ.action |= 32;
          var v2389 = Δᐃᐃ.ⲆⵠⵠⵠΔⲆᐃ(ᐃⲆΔⲆ, ᐃⲆΔⲆ.r) + Math.PI;
          var v2390 = v3064 * ᐃⲆΔⲆ.ΔⲆΔⲆⵠ;
          var v2391 = Δᐃᐃ.ΔᐃΔᐃΔⵠᐃ(v2390, v2389);
          if (Δᐃᐃ.ᐃⲆᐃⲆⲆᐃΔ(Δᐃᐃ.ᐃⵠΔⵠⲆᐃΔ(ᐃⲆΔⲆ, ᐃⲆΔⲆ.r)) > Δᐃᐃ.ᐃⲆᐃⲆⲆᐃΔ(v2391)) {
            Δᐃᐃ.ΔᐃᐃΔᐃΔⲆ(ᐃⲆΔⲆ, v2391);
          } else {
            if (ᐃⲆΔⲆ.action & 32) {
              ᐃⲆΔⲆ.action -= 32;
            }
            ᐃⲆΔⲆ.action |= 64;
            Δᐃᐃ.ΔⲆᐃⵠᐃΔᐃ(ᐃⲆΔⲆ.r, ᐃⲆΔⲆ);
          }
        }
        if (ᐃⲆΔⲆ.ⵠΔⵠⵠΔ) {
          var v2392 = ᐃⲆΔⲆ.bubbles;
          if ((v2396 = v2392.length) === 0 || v2396 < v585.ⵠⵠΔⵠΔⲆΔ && v2392[v2396 - 1].ᐃⵠᐃΔᐃ < 0.95) {
            v2392.push({
              id: Math.floor(Math.random() * ᐃᐃ[678][0].length),
              x: Math.floor(ᐃⲆΔⲆ.x + Math.random() * 80 - 40),
              y: Math.floor(ᐃⲆΔⲆ.y + Math.random() * 80 - 40),
              ᐃⵠᐃΔᐃ: 1
            });
          }
          for (var v2393 = 0; v2396 > v2393; v2393++) {
            v2392[v2393].ᐃⵠᐃΔᐃ = Math.max(0, v2392[v2393].ᐃⵠᐃΔᐃ - v3064);
          }
          for (v2393 = 0; v2393 < v2396; v2393++) {
            if (v2392[v2393].ᐃⵠᐃΔᐃ === 0) {
              v2392.splice(v2393, 1);
              break;
            }
          }
        }
        var v2394 = 0;
        if (ᐃⲆΔⲆ.ⲆᐃⲆΔ && v2833.ⲆΔⲆΔΔ) {
          var v2395 = ᐃⲆΔⲆ.ⵠⲆᐃⲆΔ;
          var v2396 = v2395.length;
          if (ᐃⲆΔⲆ.ΔΔΔⲆⵠΔⵠ > 0 && ᐃⲆΔⲆ.ⲆⲆⲆⵠ !== 337 && ᐃⲆΔⲆ.ⲆⲆⲆⵠ !== 338 && ᐃⲆΔⲆ.ⲆⲆⲆⵠ !== 340 && ᐃⲆΔⲆ.ⲆⲆⲆⵠ !== 355 && ᐃⲆΔⲆ.ⲆⲆⲆⵠ !== 354 && ᐃⲆΔⲆ.ⲆⲆⲆⵠ !== 339 && ᐃⲆΔⲆ.ⲆⲆⲆⵠ !== 164 && !ᐃⲆΔⲆ.ⵠΔⵠⵠΔ && (v2394 = 1, v2396 === 0 || v585.ⲆΔⵠⲆⲆᐃⵠ < Δᐃᐃ.ⲆⲆⵠᐃ(v2395[v2396 - 1], ᐃⲆΔⲆ))) {
            var v2397 = -ᐃⲆΔⲆ.angle;
            var v2398 = Math.cos(v2397) * 45 * v415;
            var v2399 = Math.sin(v2397) * 45 * v415;
            v2395.push({
              x: ᐃⲆΔⲆ.x + v2398,
              y: ᐃⲆΔⲆ.y + v2399,
              r: 8,
              alpha: 0.8
            });
            v2395.push({
              x: ᐃⲆΔⲆ.x - v2398,
              y: ᐃⲆΔⲆ.y - v2399,
              r: 8,
              alpha: 0.8
            });
            v2395.push({
              x: ᐃⲆΔⲆ.x,
              y: ᐃⲆΔⲆ.y,
              r: 24,
              alpha: 1
            });
          }
          for (v2393 = 0; v2393 < v2396; v2393++) {
            v2395[v2393].alpha = Math.max(0, v2395[v2393].alpha - v3064 / 2.2);
            v2395[v2393].r += v3064 * 20;
          }
          if (v2395.length > 0 && v2395[0].alpha === 0) {
            v2395.splice(0, 1);
          }
          var v2400 = ᐃⲆΔⲆ.ΔⲆᐃⲆⵠ;
          v2396 = v2400.length;
          var v2401 = -1;
          var v2402 = Math.max(0, Math.sign(ᐃⲆΔⲆ.ⵠᐃΔᐃⵠⲆΔ));
          var v2403 = Math.max(0, Math.sign(ᐃⲆΔⲆ.ΔⵠΔⲆⲆ));
          Math.max(0, Math.sign(ᐃⲆΔⲆ.ⲆᐃΔⵠᐃ));
          var v2404 = Math.max(0, Math.sign(ᐃⲆΔⲆ.ᐃⵠᐃⵠᐃ));
          var v2405 = Math.max(0, Math.sign(ᐃⲆΔⲆ.ⲆΔᐃⲆⲆ));
          if (ᐃⲆΔⲆ.ⵠᐃΔᐃⵠⲆΔ > 0 || ᐃⲆΔⲆ.ⲆᐃΔⵠᐃ > 0) {
            v2401 = 821;
          } else if (ᐃⲆΔⲆ.ⲆΔᐃⲆⲆ > 0) {
            v2401 = 899;
          } else if (ᐃⲆΔⲆ.ΔⵠΔⲆⲆ > 0) {
            v2401 = 613;
          } else if (ᐃⲆΔⲆ.ᐃⵠᐃⵠᐃ > 0) {
            v2401 = 614;
          }
          if (ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 335 && (v2402 | v2403 | v2404 | v2405) === 1) {
            v2401 = 338;
            var v2406 = ᐃⲆΔⲆ.ᐃⵠᐃⲆⵠ - Math.PI / 2;
            var v2407 = 15;
            var v2408 = 11;
            var v2409 = v585.ᐃⵠⲆΔⵠᐃᐃ;
          } else if (ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 349 && (v2402 | v2403 | v2404 | v2405) === 1) {
            v2401 = 359;
            v2406 = ᐃⲆΔⲆ.ᐃⵠᐃⲆⵠ - Math.PI / 2;
            v2407 = 21;
            v2408 = 16;
            v2409 = v585.ᐃⵠⲆΔⵠᐃᐃ;
          } else if (ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 336 && (v2402 | v2403 | v2404 | v2405) == 1) {
            v2401 = 344;
            v2406 = ᐃⲆΔⲆ.ᐃⵠᐃⲆⵠ - Math.PI / 2;
            var v2410 = Math.random() * 50;
            v2407 = 10 + v2410;
            v2408 = 0 + v2410;
            v2409 = v585.ᐃⵠⲆΔⵠᐃᐃ * 0.9;
          } else {
            v2406 = ᐃⲆΔⲆ.angle;
            v2407 = 15;
            v2408 = 11;
            v2409 = v585.ᐃⵠⲆΔⵠᐃᐃ;
          }
          if (ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 337 || ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 338 || ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 354 || ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 355 || ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 164 || ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 339 || ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 340 || ᐃⲆΔⲆ.ⵠΔⵠⵠΔ) ;else if (ᐃⲆΔⲆ.ⲆⲆⲆⵠ === 334) {
            if (v2396 === 0 || v585.ⵠᐃⲆΔΔⵠⲆ < Δᐃᐃ.ⲆⲆⵠᐃ(v2400[v2396 - 1], ᐃⲆΔⲆ)) {
              v2400.push({
                x: ᐃⲆΔⲆ.x,
                y: ᐃⲆΔⲆ.y,
                angle: ᐃⲆΔⲆ.ᐃⵠᐃⲆⵠ,
                alpha: 1,
                id: 336
              });
            }
          } else if (v2401 != -1 && v2394 === 0 && (v2396 === 0 || v2409 < Δᐃᐃ.ⲆⲆⵠᐃ(v2400[v2396 - 1], ᐃⲆΔⲆ))) {
            ᐃⲆΔⲆ.ΔⲆΔⲆᐃᐃⲆ++;
            if (Math.abs(ᐃⲆΔⲆ.x - ᐃⲆΔⲆ.r.x) > 1 && Math.abs(ᐃⲆΔⲆ.y - ᐃⲆΔⲆ.r.y) > 1) {
              if (ᐃⲆΔⲆ.r.x > ᐃⲆΔⲆ.x && ᐃⲆΔⲆ.y > ᐃⲆΔⲆ.r.y || ᐃⲆΔⲆ.x > ᐃⲆΔⲆ.r.x && ᐃⲆΔⲆ.r.y > ᐃⲆΔⲆ.y) {
                if (ᐃⲆΔⲆ.ΔⲆΔⲆᐃᐃⲆ % 2) {
                  v2398 = v415 * -v2408;
                  v2399 = v415 * -v2408;
                } else {
                  v2399 = v2408 * v415;
                  v2398 = v2408 * v415;
                }
              } else if (ᐃⲆΔⲆ.ΔⲆΔⲆᐃᐃⲆ % 2) {
                v2398 = v415 * v2408;
                v2399 = v415 * -v2408;
              } else {
                v2399 = v415 * v2408;
                v2398 = v415 * -v2408;
              }
            } else if (ᐃⲆΔⲆ.ΔⲆΔⲆᐃᐃⲆ % 2) {
              v2398 = Math.cos(v2406) * v2407 * v415;
              v2399 = v2407 * Math.sin(v2406) * v415;
            } else {
              v2398 = v415 * (v2407 * -Math.cos(v2406));
              v2399 = -Math.sin(v2406) * v2407 * v415;
            }
            v2400.push({
              x: ᐃⲆΔⲆ.x + v2398,
              y: ᐃⲆΔⲆ.y + v2399,
              angle: v2406 + Math.PI / 2,
              alpha: 1,
              id: v2401
            });
          }
          for (v2393 = 0; v2393 < v2396; v2393++) {
            if (v2400[v2393].id === 336) {
              v2400[v2393].alpha = Math.max(0, v2400[v2393].alpha - v3064 * 1.5);
            } else {
              v2400[v2393].alpha = Math.max(0, v2400[v2393].alpha - v3064 / 2.85);
            }
          }
          if (v2400.length > 0 && v2400[0].alpha === 0) {
            v2400.splice(0, 1);
          }
        }
      }
    };
    this.ⵠᐃᐃ = function () {
      this.ΔⵠᐃΔᐃ(this.units[0]);
      this.ΔⵠᐃΔᐃ(this.units[92]);
      this.ΔⵠᐃΔᐃ(this.units[67]);
      this.ΔⵠᐃΔᐃ(this.units[74]);
      this.ΔⵠᐃΔᐃ(this.units[77]);
      this.ΔⵠᐃΔᐃ(this.units[84]);
      this.ΔⵠᐃΔᐃ(this.units[78]);
      this.ΔⵠᐃΔᐃ(this.units[79]);
      this.ΔⵠᐃΔᐃ(this.units[80]);
      this.ΔⵠᐃΔᐃ(this.units[81]);
      this.ΔⵠᐃΔᐃ(this.units[86]);
      this.ΔⵠᐃΔᐃ(this.units[88]);
      this.ΔⵠᐃΔᐃ(this.units[89]);
      this.ΔⵠᐃΔᐃ(this.units[90]);
      this.ΔⵠᐃΔᐃ(this.units[87]);
      this.ΔⵠᐃΔᐃ(this.units[68]);
      this.ΔⵠᐃΔᐃ(this.units[69]);
      this.ΔⵠᐃΔᐃ(this.units[100]);
      this.ΔⵠᐃΔᐃ(this.units[103]);
      this.ΔⵠᐃΔᐃ(this.units[102]);
      this.ΔⵠᐃΔᐃ(this.units[70]);
      this.ΔⵠᐃΔᐃ(this.units[85]);
      this.ΔⵠᐃΔᐃ(this.units[82]);
      this.ΔⵠᐃΔᐃ(this.units[83]);
      this.ΔⵠᐃΔᐃ(this.units[71]);
      this.ΔⵠᐃΔᐃ(this.units[75]);
      this.ΔⵠᐃΔᐃ(this.units[72]);
      this.ΔⵠᐃΔᐃ(this.units[73]);
      this.ΔⵠᐃΔᐃ(this.units[76]);
    };
    this.ᐃⲆⵠᐃ = [];
    this.ᐃⲆⵠᐃ[839] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV143, 1, 1.05, 1, 0.008, 0.008);
    this.ᐃⲆⵠᐃ[838] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV14, 1, 1.08, 1, 0.006, 0.006);
    this.ᐃⲆⵠᐃ[913] = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 1, 1.02, 1, 0.008, 0.008);
    this.ᐃⲆⵠᐃ[914] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV145, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠⲆⲆⵠΔ = [];
    this.ⵠⲆⲆⵠΔ[0] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV143, 0.1, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[1] = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[2] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV142, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[3] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV14, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[4] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV142, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[5] = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[6] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVVV142, 0.5, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[7] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vV143, 0.9, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[8] = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[9] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV143, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[10] = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[11] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1423, 0.4, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[12] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV143, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[13] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVV1423, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠⲆⲆⵠΔ[14] = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVVVV142, 0.7, 1, 0, 0.6, 0.6);
  }
  function f456(p1500, p1501, p1502, p1503) {
    this.id = p1500;
    this.ΔⲆΔⲆⵠ = (p1500 + 5) * 8;
    this.ᐃⵠᐃΔᐃ = v406 / 1366;
    this.x = p1501;
    this.y = p1502;
    this.c = Math.sin(p1503);
    this.ⵠᐃᐃΔ = Math.cos(p1503);
    this.alpha = 0;
  }
  function f457() {
    this.ᐃⲆᐃⵠⲆ = "";
    this.ⲆΔⲆⲆ = 0;
    this.ⵠᐃΔᐃΔ = 0;
    this.Δⵠᐃⵠᐃ = 0;
    this.ΔΔΔⲆΔⲆᐃ = 0;
    this.ⵠΔᐃΔᐃ = 0;
    this.ΔⲆⵠΔΔ = 0;
    this.ΔⵠΔⲆᐃ = 0;
    this.level = 0;
    this.label = null;
    this.ΔᐃⲆⵠΔᐃⲆ = null;
    this.ᐃΔⵠΔⵠⵠΔ = null;
    this.ⵠᐃⲆΔⲆ = vVVVV142;
    this.Ⲇⵠⵠᐃᐃ = 0;
  }
  function f458() {
    Math.random();
    return "d";
  }
  function f461() {
    Math.random();
    return "t";
  }
  function f474() {
    Math.random();
    return "p";
  }
  function f461() {
    Math.random();
    return "t";
  }
  function f470() {
    Math.random();
    return "a";
  }
  function f463() {
    Math.random();
    return "s";
  }
  function f464() {
    Math.random();
    return "r";
  }
  function f465() {
    Math.random();
    return "i";
  }
  function f466() {
    Math.random();
    return "g";
  }
  function f473() {
    Math.random();
    return "o";
  }
  function f468() {
    this.ΔᐃΔⲆⵠ = function () {};
    this.ΔⲆᐃᐃⲆ = {
      ΔⲆᐃⲆ: 1,
      ΔⵠΔᐃⵠ: 1,
      open: false
    };
    this.ΔᐃⲆΔᐃ = {
      ΔⵠΔᐃⵠ: -1,
      ΔⲆᐃⲆ: 1,
      open: vV142
    };
    this.ΔⵠⵠⲆ = {
      ⲆⵠⲆᐃΔⲆΔ: 0,
      ⵠΔᐃⲆⲆⲆᐃ: 0,
      ΔⲆᐃⲆ: 1,
      ΔⵠΔᐃⵠ: -1,
      open: false
    };
    this.ΔⲆⲆⵠ = {
      open: vV14,
      ⵠⵠᐃⵠΔΔᐃ: 0,
      ᐃⲆΔⵠΔΔᐃ: 0,
      ⲆⵠᐃΔΔᐃᐃ: 0,
      ΔⵠΔᐃⵠ: -1,
      ΔⲆᐃⲆ: 1,
      type: 0
    };
    this.ΔⵠⲆⵠ = {
      ⵠΔᐃⲆⲆⲆᐃ: 0,
      ᐃⲆΔⲆⲆΔⵠ: 0,
      ΔⲆᐃⲆ: 1,
      ΔⵠΔᐃⵠ: -1,
      open: false,
      ⵠⵠᐃⵠΔΔᐃ: 0
    };
    this.sign = {
      ΔⵠΔᐃⵠ: -1,
      open: false
    };
    this.ⵠⲆⵠΔΔ = {
      ⵠⵠΔᐃ: 0,
      ΔⲆᐃⲆ: 1,
      ΔⵠΔᐃⵠ: -1,
      open: vVVV142
    };
    this.ⵠΔⵠⵠΔ = {
      enabled: vVV144,
      ⲆⲆᐃΔⲆ: -1,
      label: false,
      now: -1,
      ⲆΔᐃΔ: f398
    };
    this.ⵠⲆΔᐃ = {
      id: -1,
      ⵠⵠΔᐃ: 0,
      ΔⲆᐃⲆ: 1,
      ΔⵠΔᐃⵠ: -1,
      open: false,
      lock: vV143,
      locked: vV143,
      ⲆⵠⲆⲆⲆΔᐃ: vVVV14,
      ⵠᐃⵠⲆⲆΔⲆ: false
    };
    this.ⵠᐃⲆΔⲆ = vVVV623;
    this.reconnect = {
      enabled: false,
      rotate: 0
    };
    this.key = Δᐃᐃ.ΔⵠΔΔΔⲆΔ("key", vWindow.location.href);
    var v2411 = Δᐃᐃ.ΔⵠΔΔΔⲆΔ("egg", vWindow.location.href);
    if (v2411) {
      v2833.ⲆΔⲆⲆ = parseInt(v2411);
    }
    this.beta = vWindow.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ⲆᐃΔⵠ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⲆᐃΔⵠ.get("starve_beta");
    }
    this.ⵠᐃᐃᐃⲆ = ⲆᐃΔⵠ.get("starve_token") ? ⲆᐃΔⵠ.get("starve_token") : Δᐃᐃ.ⵠⲆⵠΔᐃΔⵠ(14);
    vWindow.baguette();
    var v2412 = vWindow.kot2;
    this.ⵠᐃᐃᐃⲆ = v2412.substring(0, 6) + this.ⵠᐃᐃᐃⲆ.substring(6);
    this.ΔⲆⵠΔⲆᐃΔ = ⲆᐃΔⵠ.get("starve_token_id") ? ⲆᐃΔⵠ.get("starve_token_id") : "";
    this.id = 0;
    this.ᐃᐃⵠⵠ = 0;
    this.Δⵠⵠ = 0;
    this.ΔⵠᐃⵠᐃⲆⲆ = {
      ⲆⲆΔᐃᐃΔⵠ: 0,
      Ⲇⵠⵠᐃᐃ: 0,
      ᐃᐃⲆΔᐃᐃΔ: 0,
      ⲆᐃⲆᐃⵠΔΔ: ""
    };
    this.ⵠⲆᐃΔⵠᐃⲆᐃⲆ = {
      connected: 0,
      ΔᐃΔΔΔΔⲆ: new Date().getTime()
    };
    this.ΔΔⲆⲆⲆ = [];
    this.ΔᐃᐃΔⲆⵠⲆ = function (p1504) {
      for (var v2413 = 0; v2413 < this.ΔΔⲆⲆⲆ.length; v2413++) {
        if (p1504 == this.ΔΔⲆⲆⲆ[v2413]) {
          return true;
        }
      }
      return vVV142;
    };
    this.ᐃᐃᐃᐃⲆ = {
      ⲆⲆᐃΔⲆ: 0,
      time: 0,
      value: 0,
      open: vVVV145,
      ⲆΔᐃΔ: function () {
        if (this.open) {
          var v2414 = new Date().getTime();
          this.time = Math.floor((v2414 - this.ⲆⲆᐃΔⲆ) / 1000);
          if (this.time < 60) {
            game.ᐃᐃᐃᐃⲆ.button.ⲆΔᐃΔ(v405);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = vVVV142;
          }
        }
      }
    };
    this.ⲆΔᐃⵠⲆᐃᐃ = 199;
    this.ᐃΔΔⲆⵠⲆᐃ = 129;
    this.ⲆΔᐃⵠⲆᐃᐃ;
    this.ᐃΔΔⲆⵠⲆᐃ;
    this.ⲆΔⵠΔᐃ = {
      id: -1,
      ΔⲆᐃⲆ: -1,
      lock: 0,
      timeout: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV144, 0, 1, 0, 1 / 30, 1),
      wait: false
    };
    this.ⵠⲆⲆᐃⲆ = {
      timeout: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 1, 0, 1 / 5, 1),
      wait: false
    };
    this.ᐃΔⵠⵠᐃ = {
      timeout: new Δᐃᐃ.Ⲇⵠᐃᐃ(v14, 0, 1, 0, 1, 1),
      wait: false
    };
    this.ΔⲆΔᐃΔ = {
      timeout: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV145, 0, 1, 0, 0.1, 1),
      wait: false
    };
    this.ᐃⵠⵠ = new Δᐃᐃ.ΔⵠΔⲆΔᐃᐃ(Δᐃᐃ.ΔᐃⲆᐃΔΔᐃ, 0, 0.4, 0, 0, v409, v410, v409, v410);
    this.ᐃⵠⵠ.ⲆⲆᐃΔⲆ = 0;
    this.ᐃⵠⵠ.ⲆΔΔᐃᐃⲆⵠ = 0;
    var v2415 = 250;
    if (v2415 == 4) {
      v2415 = 123;
    }
    this.ᐃⵠⵠ.ⵠᐃᐃ = function () {
      if (this.ⲆΔΔᐃᐃⲆⵠ > 0) {
        this.ⲆΔΔᐃᐃⲆⵠ -= v3064;
      } else {
        var v2416 = world.fast_units[user.ᐃᐃⵠⵠ];
        if (v2416) {
          this.ⲆⲆᐃΔⲆ = 0;
          var v2417 = Math.max(Math.min(v409 - v2416.x, -2), -world.w + 2 + v406);
          var v2418 = Math.max(Math.min(v410 - v2416.y, -2), 2 - world.ⵠⲆⵠ + v408);
          this.ΔΔᐃΔⵠⲆΔ({
            x: v2417,
            y: v2418
          });
        } else {
          this.ⲆⲆᐃΔⲆ += v3064;
          if (this.ⲆⲆᐃΔⲆ > 3) {
            this.ⲆⲆᐃΔⲆ = 0;
            if (!user.reconnect.enabled) {
              v2837.ⵠΔΔᐃᐃⵠΔⲆᐃ();
            }
          }
        }
      }
    };
    this.ᐃⵠⵠ.w = screen.width;
    this.ᐃⵠⵠ.ⵠⲆⵠ = screen.height;
    this.ᐃⵠⵠ.ᐃⵠᐃⵠⵠⵠΔ = this.ᐃⵠⵠ.w;
    this.ᐃⵠⵠ.ᐃⵠⵠⵠΔⵠⵠ = this.ᐃⵠⵠ.ⵠⲆⵠ;
    this.ᐃⵠⵠ.rx = 0;
    this.ᐃⵠⵠ.ry = 0;
    this.ᐃⵠⵠ.ᐃⵠᐃΔΔΔΔΔΔ = 0;
    this.ᐃⵠⵠ.ᐃᐃᐃΔᐃΔᐃⵠΔ = 0;
    this.ᐃⵠⵠ.ⵠⵠᐃⲆΔ = function (p1505, p1506) {
      this.x = -Math.min(Math.max(-world.ⵠᐃⵠᐃᐃⲆⲆ * 2, p1505 - world.ⵠᐃⵠᐃᐃⲆⲆ - this.ᐃⵠᐃⵠⵠⵠΔ / 2), world.w - this.ᐃⵠᐃⵠⵠⵠΔ);
      this.y = -Math.min(Math.max(-world.ᐃᐃᐃᐃⵠⵠⲆ * 2, p1506 - (world.ᐃᐃᐃᐃⵠⵠⲆ + this.ᐃⵠⵠⵠΔⵠⵠ) / 2), world.ⵠⲆⵠ - this.ᐃⵠⵠⵠΔⵠⵠ + world.ᐃᐃᐃᐃⵠⵠⲆ);
      this.ⲆᐃΔΔⲆ = this.x;
      this.ΔᐃⵠΔⵠⵠᐃ = this.y;
    };
    var v2419 = 132;
    if (v2419 > 4) {
      v2419 = 143;
    }
    var v2420 = 129;
    if (v2420 >= 13) {
      v2420 = 155;
    }
    this.control = {
      angle: 0,
      timeout: 0,
      ΔⵠⲆⵠⲆᐃΔ: 0,
      ΔΔᐃⵠ: 0,
      attack: 0,
      ⵠᐃᐃ: function () {
        var v2421 = world.fast_units[user.ᐃᐃⵠⵠ];
        if (v2421) {
          var v2422 = {
            x: user.ᐃⵠⵠ.x + v2421.x,
            y: user.ᐃⵠⵠ.y + v2421.y
          };
        } else {
          v2422 = v413;
        }
        var v2423 = Δᐃᐃ.ⲆⵠⵠⵠΔⲆᐃ(v3063.ᐃΔⵠⲆ, v2422);
        var v2424 = false;
        this.ΔΔᐃⵠ += v3064;
        if (!v3063.state) {
          if (v2421 && !(v2421.action & 16) && this.ΔΔᐃⵠ > 0.2) {
            this.attack = 1;
            v2424 = vVVV63;
            this.ΔΔᐃⵠ = 0;
            v2837.ᐃⵠΔⲆΔΔⵠΔⲆ(v2423);
          }
        }
        if (v2421) {
          v2421.angle = v2423;
          v2421.ΔᐃΔΔᐃΔᐃ = v2423;
        }
        if (!v2424) {
          this.timeout += v3064;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - v2423) > 0.005) {
              v2837.ΔΔᐃⵠⲆⵠᐃⵠⵠ(v2423);
              this.angle = v2423;
            }
          }
        }
        if (!user.ⲆΔⲆᐃⲆ.open && !user.ⲆⲆᐃΔⵠ.open) {
          var v2425 = 0;
          if (v3059.ᐃΔⵠⵠᐃᐃΔ()) {
            v2425 |= 1;
          }
          if (v3059.ΔᐃⵠᐃΔⵠⲆ()) {
            v2425 |= 2;
          }
          if (v3059.ᐃᐃᐃⵠⵠⲆⵠ()) {
            v2425 |= 4;
          }
          if (v3059.ᐃᐃⲆⲆᐃⵠΔ()) {
            v2425 |= 8;
          }
          if (this.ΔⵠⲆⵠⲆᐃΔ != v2425) {
            v2837.ⵠΔᐃΔⲆⵠⵠⵠᐃ(v2425);
          }
          this.ΔⵠⲆⵠⲆᐃΔ = v2425;
        }
      }
    };
    this.ᐃⵠᐃⵠ = {
      c: 1,
      ΔΔⵠᐃ: 1,
      ⵠⲆⵠ: 1,
      ᐃⵠⲆ: 1,
      ΔⲆΔ: 1,
      ⵠΔⲆⲆΔⲆⵠ: 1,
      ⲆⵠⲆⵠΔΔⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(true, 0, 1, 0, 3, 3),
      ⵠᐃⵠⵠᐃⲆΔ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vV6, 0, 1, 0, 2, 2),
      ⲆⵠⲆⵠⵠⲆⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV63, 0, 1, 0, 3, 3),
      ⲆΔⵠᐃⲆⵠⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(true, 0, 1, 0, 3, 3),
      ⵠⲆⵠᐃΔΔᐃ: new Δᐃᐃ.Ⲇⵠᐃᐃ(true, 0, 1, 0, 3, 3),
      ⵠΔᐃⲆΔΔⵠ: new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV6, 0, 1, 0, 3, 3),
      ⵠⲆⲆΔⲆ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔᐃⲆᐃΔΔᐃ, 0, 1, 0, 0, 1),
      ᐃⵠᐃΔᐃ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔᐃⲆᐃΔΔᐃ, 0, 1, 0, 0, 1),
      ⲆⵠⵠⵠⲆⲆⲆ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔᐃⲆᐃΔΔᐃ, 0, 1, 0, 0, 1),
      ⵠⲆΔⲆᐃⲆⲆ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔᐃⲆᐃΔΔᐃ, 0, 1, 0, 0, 1),
      ⲆⲆⲆⲆᐃΔⵠ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔᐃⲆᐃΔΔᐃ, 0, 1, 0, 0, 1),
      ᐃⵠⵠᐃᐃⵠⵠ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔᐃⲆᐃΔΔᐃ, 0, 1, 0, 0, 1),
      ⵠᐃᐃ: function () {
        this.ⲆⵠⲆⵠΔΔⵠ.ⵠᐃᐃ();
        this.ⵠᐃⵠⵠᐃⲆΔ.ⵠᐃᐃ();
        this.ⲆⵠⲆⵠⵠⲆⵠ.ⵠᐃᐃ();
        this.ⲆΔⵠᐃⲆⵠⵠ.ⵠᐃᐃ();
        this.ⵠⲆⵠᐃΔΔᐃ.ⵠᐃᐃ();
        this.ⵠΔᐃⲆΔΔⵠ.ⵠᐃᐃ();
        this.ⵠⲆⲆΔⲆ.ΔΔᐃΔⵠⲆΔ(this.c);
        this.ᐃⵠᐃΔᐃ.ΔΔᐃΔⵠⲆΔ(this.ΔΔⵠᐃ);
        this.ⲆⵠⵠⵠⲆⲆⲆ.ΔΔᐃΔⵠⲆΔ(this.ⵠⲆⵠ);
        this.ⵠⲆΔⲆᐃⲆⲆ.ΔΔᐃΔⵠⲆΔ(this.ᐃⵠⲆ);
        this.ⲆⲆⲆⲆᐃΔⵠ.ΔΔᐃΔⵠⲆΔ(this.ΔⲆΔ);
        this.ᐃⵠⵠᐃᐃⵠⵠ.ΔΔᐃΔⵠⲆΔ(this.ⵠΔⲆⲆΔⲆⵠ);
      }
    };
    var v2426 = 106;
    function f469() {
      this.seed = 1;
      this.ᐃⵠⲆᐃᐃⵠΔ = 2;
      this.ⵠᐃⲆⲆᐃΔᐃ = 3;
      this.ⵠⵠᐃⲆⲆⵠΔᐃⲆ = 1;
      this.ⲆⵠΔⲆΔᐃⵠⲆⵠ = 2;
      this.ᐃⵠⲆᐃᐃΔⵠⵠᐃ = 3;
      this.ΔⵠⲆᐃᐃᐃⲆ = function (p1507) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠⲆΔᐃᐃⵠΔ = function (p1508) {
        this.ᐃⵠⲆᐃᐃⵠΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆΔᐃⵠⵠᐃΔ = function (p1509) {
        this.ⵠᐃⲆⲆᐃΔᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃⵠᐃΔΔⵠᐃΔΔ = function (p1510) {
        this.ⵠⵠᐃⲆⲆⵠΔᐃⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃⲆΔΔⵠΔᐃΔⵠ = function (p1511) {
        this.ⲆⵠΔⲆΔᐃⵠⲆⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔΔⲆΔⵠⵠⵠᐃ = function (p1512) {
        this.ᐃⵠⲆᐃᐃΔⵠⵠᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔⵠΔᐃΔⵠᐃ = function (p1513, p1514, p1515, p1516, p1517, p1518, p1519) {
        for (var v2427 = 1; p1519 > v2427;) {
          var v2428 = v2427 * p1515 % ΔⲆⵠᐃΔΔⵠ;
          var v2429 = Ⲇᐃⵠⵠᐃⵠⵠ[v2428];
          if (v2429 < 0.1) {
            v2430 += 50;
            v2427 += 50;
          } else {
            var v2430 = Math.floor(v2429 * p1516 + p1517);
            if (p1518 < v2427 && v2427 < p1519) {
              var v2431 = Math.random() > 0.5 ? v3064 * -10 : v3064 * 10;
              var v2432 = p1514 * v2430;
              this.ᐃᐃΔⲆⲆⲆⲆ[v2428] = Math.max(-25, Math.min(25, this.ᐃᐃΔⲆⲆⲆⲆ[v2428] + v2431));
              this.ΔⵠΔΔΔᐃᐃ[v2428] = Math.max(-8, Math.min(8, this.ΔⵠΔΔΔᐃᐃ[v2428] + v2431));
              if (v2432 > 0) {
                v405.beginPath();
                v405.arc(v2427 + user.ᐃⵠⵠ.x + this.ΔⵠΔΔΔᐃᐃ[v2428], p1513 + this.ᐃᐃΔⲆⲆⲆⲆ[v2428] - 20, v2432, 0, Math.PI * 2);
                if (world.transition) {
                  var v2433 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
                  v405.fillStyle = f409(83, 156, 160, 236, 247, 249, v2433);
                } else {
                  v405.fillStyle = v585.ΔΔΔΔⲆΔΔ[world.time];
                }
                v405.fill();
              }
            }
            v2427 += v2430 * 2;
          }
        }
      };
      this.ᐃⲆᐃᐃⲆᐃⵠ = function (p1520, p1521, p1522, p1523, p1524, p1525, p1526) {
        for (var v2434 = 1; v2434 < p1526;) {
          var v2435 = v2434 * p1522 % ΔⲆⵠᐃΔΔⵠ;
          var v2436 = Ⲇᐃⵠⵠᐃⵠⵠ[v2435];
          if (v2436 < 0.1) {
            v2437 += 50;
            v2434 += 50;
          } else {
            var v2437 = Math.floor(p1523 * v2436 + p1524);
            if (p1525 < v2434 && p1526 > v2434) {
              var v2438 = Math.random() > 0.5 ? v3064 * -10 : v3064 * 10;
              var v2439 = p1521 * v2437;
              this.ⲆΔⵠⵠᐃ[v2435] = Math.max(-25, Math.min(25, this.ⲆΔⵠⵠᐃ[v2435] + v2438));
              this.ⵠΔΔⵠᐃ[v2435] = Math.max(-8, Math.min(8, this.ⵠΔΔⵠᐃ[v2435] + v2438));
              if (v2439 > 0) {
                v405.beginPath();
                v405.arc(p1520 + this.ⲆΔⵠⵠᐃ[v2435] - 20, v2434 + user.ᐃⵠⵠ.y + this.ⵠΔΔⵠᐃ[v2435], v2439, 0, Math.PI * 2);
                if (world.transition) {
                  var v2440 = world.time ? 1 - world.ΔⵠⵠΔ.Ⲇⵠⵠ : world.ΔⵠⵠΔ.Ⲇⵠⵠ;
                  v405.fillStyle = f409(83, 156, 160, 236, 247, 249, v2440);
                } else {
                  v405.fillStyle = v585.ΔΔΔΔⲆΔΔ[world.time];
                }
                v405.fill();
              }
            }
            v2434 += v2437 * 2;
          }
        }
      };
      this.ᐃᐃΔΔΔΔⲆⵠⵠ = function (p1527, p1528, p1529, p1530, p1531, p1532) {
        p1531 -= 30;
        p1532 += 30;
        if ((v2441 = -(p1529 - 0 - p1530 - 2) / 200) === 0) {
          this.ⲆΔᐃⵠⵠᐃΔ();
        }
        v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2441);
        this.ΔⵠΔᐃΔⵠᐃ(p1529, v2441, this.ⵠᐃⲆⲆᐃΔᐃ, 18, 16, p1531, p1532);
        v405.globalAlpha = 1;
        var v2441 = -(p1527 - 250 - p1530 + 500) / 150;
        if (v2441 === 0) {
          this.ΔⵠⲆᐃᐃᐃⲆ();
        }
        v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2441);
        this.ΔⵠΔᐃΔⵠᐃ(p1527, v2441, this.seed, 12, 10, p1531, p1532);
        v405.globalAlpha = 1;
        if (p1528 !== -1) {
          if ((v2441 = -(p1528 - 350 - p1530 + 698) / 100) <= 0.01) {
            this.ⵠⲆΔᐃᐃⵠΔ();
          }
          v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2441);
          this.ΔⵠΔᐃΔⵠᐃ(p1528, v2441, this.ᐃⵠⲆᐃᐃⵠΔ, 6, 6, p1531, p1532);
          v405.globalAlpha = 1;
        }
      };
      this.ᐃΔⲆΔᐃⲆΔⵠⲆ = function (p1533, p1534, p1535, p1536, p1537, p1538) {
        var v2442;
        p1537 -= 30;
        p1538 += 30;
        if ((v2442 = -(-p1535 + 0 + p1536 + 2) / 200) === 0) {
          this.ⲆΔᐃⵠⵠᐃΔ();
        }
        v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2442);
        this.ΔⵠΔᐃΔⵠᐃ(p1535, v2442, this.ⵠᐃⲆⲆᐃΔᐃ, 18, 16, p1537, p1538);
        v405.globalAlpha = 1;
        if ((v2442 = -(-p1533 + 250 + p1536) / 150) === 0) {
          this.ΔⵠⲆᐃᐃᐃⲆ();
        }
        v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2442);
        this.ΔⵠΔᐃΔⵠᐃ(p1533, v2442, this.seed, 12, 10, p1537, p1538);
        v405.globalAlpha = 1;
        if (p1534 !== -1) {
          if ((v2442 = -(-p1534 + 350 + p1536) / 100) <= 0.01) {
            this.ⵠⲆΔᐃᐃⵠΔ();
          }
          v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2442);
          this.ΔⵠΔᐃΔⵠᐃ(p1534, v2442, this.ᐃⵠⲆᐃᐃⵠΔ, 6, 6, p1537, p1538);
          v405.globalAlpha = 1;
        }
      };
      this.ⵠΔΔᐃⵠⲆⵠᐃΔ = function (p1539, p1540, p1541, p1542, p1543, p1544) {
        var v2443;
        p1543 -= 30;
        p1544 += 30;
        if ((v2443 = -(-p1541 + 0 + p1542 + 2) / 200) === 0) {
          this.ⲆΔᐃⵠⵠᐃΔ();
        }
        v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2443);
        this.ᐃⲆᐃᐃⲆᐃⵠ(p1541, v2443, this.ⵠᐃⲆⲆᐃΔᐃ, 18, 16, p1543, p1544);
        v405.globalAlpha = 1;
        if ((v2443 = -(-p1539 + 250 + p1542) / 150) === 0) {
          this.ΔⵠⲆᐃᐃᐃⲆ();
        }
        v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2443);
        this.ᐃⲆᐃᐃⲆᐃⵠ(p1539, v2443, this.seed, 12, 10, p1543, p1544);
        v405.globalAlpha = 1;
        if (p1540 !== -1) {
          if ((v2443 = -(-p1540 + 350 + p1542) / 100) <= 0.01) {
            this.ⵠⲆΔᐃᐃⵠΔ();
          }
          v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2443);
          this.ᐃⲆᐃᐃⲆᐃⵠ(p1540, v2443, this.ᐃⵠⲆᐃᐃⵠΔ, 6, 6, p1543, p1544);
          v405.globalAlpha = 1;
        }
      };
      this.ᐃᐃᐃᐃⵠⲆᐃⲆΔ = function (p1545, p1546, p1547, p1548, p1549, p1550) {
        var v2444;
        p1549 -= 30;
        p1550 += 30;
        if ((v2444 = -(p1547 - 0 - p1548 - 2) / 200) === 0) {
          this.ⲆΔᐃⵠⵠᐃΔ();
        }
        v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2444);
        this.ᐃⲆᐃᐃⲆᐃⵠ(p1547, v2444, this.ⵠᐃⲆⲆᐃΔᐃ, 18, 16, p1549, p1550);
        v405.globalAlpha = 1;
        if ((v2444 = -(p1545 - 250 - p1548 + 500) / 150) === 0) {
          this.ΔⵠⲆᐃᐃᐃⲆ();
        }
        v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2444);
        this.ᐃⲆᐃᐃⲆᐃⵠ(p1545, v2444, this.seed, 12, 10, p1549, p1550);
        v405.globalAlpha = 1;
        if (p1546 !== -1) {
          if ((v2444 = -(p1546 - 350 - p1548 + 698) / 100) <= 0.01) {
            this.ⵠⲆΔᐃᐃⵠΔ();
          }
          v405.globalAlpha = Δᐃᐃ.ΔⲆⲆⲆⲆ(v2444);
          this.ᐃⲆᐃᐃⲆᐃⵠ(p1546, v2444, this.ᐃⵠⲆᐃᐃⵠΔ, 6, 6, p1549, p1550);
          v405.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ⲆⵠⵠΔᐃⲆⲆ, 0, 10, 0, 0, 200),
        ΔΔⵠᐃ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔΔⲆⵠⵠⵠᐃ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔΔᐃⲆᐃᐃⵠ, 0, 10, 0, 0, 150),
        ΔΔⵠᐃ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔⲆⲆⲆⲆ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ⵠⲆᐃⵠΔᐃⵠ, 0, 10, 0, 0, 100),
        ΔΔⵠᐃ: new Δᐃᐃ.ΔΔⵠⲆΔ(Δᐃᐃ.ΔⲆⲆⲆⲆ, 0, 10, 100, 100, 0)
      };
      this.ᐃⵠΔᐃⵠⲆⲆᐃᐃ = function (p1551) {
        if (p1551.r.ⲆᐃΔΔⲆ === p1551.r.x) {
          if (p1551.ΔΔⵠᐃ.x === p1551.ΔΔⵠᐃ.ⲆᐃΔΔⲆ) {
            return p1551.r;
          } else {
            return p1551.ΔΔⵠᐃ;
          }
        } else {
          return p1551.r;
        }
      };
      this.ᐃⵠⲆ = function (p1552) {
        var v2445;
        if (p1552.r.ⲆᐃΔΔⲆ === p1552.r.x) {
          if (p1552.ΔΔⵠᐃ.ⲆᐃΔΔⲆ === p1552.ΔΔⵠᐃ.x) {
            p1552.r.ⵠᐃᐃⲆΔⵠⵠ();
            p1552.ΔΔⵠᐃ.ⵠᐃᐃⲆΔⵠⵠ();
            v2445 = p1552.r;
          } else {
            v2445 = p1552.ΔΔⵠᐃ;
          }
        } else {
          v2445 = p1552.r;
        }
        v2445.ΔΔᐃΔⵠⲆΔ(v2445.ⲆᐃΔΔⲆ);
        return v2445;
      };
      this.ⲆΔⵠⵠᐃ = [];
      this.ⵠΔΔⵠᐃ = [];
      this.ᐃᐃΔⲆⲆⲆⲆ = [];
      this.ΔⵠΔΔΔᐃᐃ = [];
      this.ΔᐃΔⲆⵠ = function () {
        for (var v2446 = 0; ΔⲆⵠᐃΔΔⵠ > v2446; v2446++) {
          this.ⲆΔⵠⵠᐃ[v2446] = Math.floor(Ⲇᐃⵠⵠᐃⵠⵠ[v2446] * 25);
          this.ⵠΔΔⵠᐃ[v2446] = Math.floor(Ⲇᐃⵠⵠᐃⵠⵠ[v2446] * 8);
          this.ᐃᐃΔⲆⲆⲆⲆ[v2446] = Math.floor(Ⲇᐃⵠⵠᐃⵠⵠ[v2446] * 25);
          this.ΔⵠΔΔΔᐃᐃ[v2446] = Math.floor(Ⲇᐃⵠⵠᐃⵠⵠ[v2446] * 8);
        }
        this.w1.r.x = this.w1.r.ⲆᐃΔΔⲆ;
        this.w2.r.ⲆΔⵠΔⵠ = 3.5;
        this.w3.r.ⲆΔⵠΔⵠ = 2;
      };
      this.ΔᐃΔⲆⵠ();
    }
    if (v2426 == 2) {
      v2426 = 80;
    }
    this.ᐃⲆⲆⵠᐃᐃΔ = false;
    this.ⲆⲆΔⵠⲆᐃⵠ = false;
    this.ⲆΔᐃⲆΔ = false;
    this.ᐃⲆᐃΔⵠᐃⵠ = false;
    this.ᐃⵠⲆⲆ = {
      max: 10,
      ΔⵠᐃⲆⲆΔΔ: 0,
      Δⵠᐃⵠᐃ: 0,
      ᐃⵠΔⵠ: [],
      ᐃᐃⲆᐃᐃ: [],
      ΔΔΔⲆⲆᐃⲆ: function (p1553, p1554) {
        if (p1553 === 1) {
          this.Δⵠᐃⵠᐃ = 6;
        }
        this.ΔⵠᐃⲆⲆΔΔ += p1554;
        this.max = 10 + this.ΔⵠᐃⲆⲆΔΔ + this.Δⵠᐃⵠᐃ;
      },
      ΔᐃΔⵠⲆⵠⵠ: {
        item: -1,
        Δⵠ: null,
        ⲆΔΔⵠᐃΔᐃ: 0,
        ΔΔΔᐃΔᐃᐃ: 0,
        ⲆⲆⲆΔⲆ: -1,
        ΔΔΔΔᐃ: -1,
        ΔⲆⵠⲆᐃ: function (p1555) {
          if (!!this.ⲆΔΔⵠᐃΔᐃ && (p1555.x !== this.ⲆⲆⲆΔⲆ || p1555.y !== this.ΔΔΔΔᐃ)) {
            this.ΔΔΔᐃΔᐃᐃ = 1;
          }
        },
        start: function (p1556, p1557) {
          this.ⲆⲆⲆΔⲆ = p1557.x;
          this.ΔΔΔΔᐃ = p1557.y;
          this.item = p1556;
          this.Δⵠ = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ[p1556].info.Δⵠ[2];
          this.ⲆΔΔⵠᐃΔᐃ = 1;
        },
        stop: function () {
          this.ⲆΔΔⵠᐃΔᐃ = 0;
          this.ΔΔΔᐃΔᐃᐃ = 0;
          this.ⲆⲆⲆΔⲆ = -1;
          this.ΔΔΔΔᐃ = -1;
        },
        release: function () {
          var v2447 = -1;
          var v2448 = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ;
          var v2449 = 0;
          if (this.ⲆΔΔⵠᐃΔᐃ && this.ΔΔΔᐃΔᐃᐃ) {
            for (var v2450 = 0; v2450 < v2448.length; v2450++) {
              if (v2448[v2450].info.state === 1) {
                v2447 = v2450;
                break;
              }
            }
            if (v2447 !== -1 && v2447 !== this.item && v2448[this.item]) {
              v2449 = 1;
              var v2451 = v2448[v2447];
              v2448[v2447] = v2448[this.item];
              v2448[this.item] = v2451;
              game.ⵠⲆΔᐃⲆᐃᐃ();
            }
          }
          this.stop();
          return v2449;
        },
        ⲆΔᐃΔ: function (p1558, p1559) {
          if (this.ⲆΔΔⵠᐃΔᐃ && this.ΔΔΔᐃΔᐃᐃ) {
            f295(v405, this.Δⵠ, Math.floor(p1558 - this.Δⵠ.width / 2), Math.floor(p1559 - this.Δⵠ.height / 2));
          }
        }
      },
      ΔΔᐃΔᐃⲆⵠⵠⵠ: function (p1560) {
        for (v2498 = 0; v2498 < p1560.length; v2498++) {
          if (this.ᐃⵠΔⵠ[p1560[v2498][0]] == p1560[v2498][1]) {
            return vVV63;
          }
        }
        return false;
      },
      ⵠΔᐃᐃΔ: function (p1561) {
        for (var v2452 = 0; v2452 < this.ᐃᐃⲆᐃᐃ.length; v2452++) {
          if (this.ᐃᐃⲆᐃᐃ[v2452].id == p1561) {
            return v2452;
          }
        }
        return -1;
      },
      ᐃⵠⵠᐃⵠⵠΔ: function (p1562, p1563) {
        this.ᐃⵠΔⵠ[p1562] = 0;
        this.ᐃᐃⲆᐃᐃ.splice(p1563, 1);
        game.ⵠⲆΔᐃⲆᐃᐃ();
      },
      ⲆⲆᐃⲆⵠⲆⵠ: function (p1564, p1565, p1566) {
        ⵠᐃᐃ = vVVVV623;
        this.ᐃⵠΔⵠ[p1564] = Math.max(0, this.ᐃⵠΔⵠ[p1564] - p1565);
        if (!this.ᐃⵠΔⵠ[p1564] && p1566 >= 0) {
          this.ᐃⵠⵠᐃⵠⵠΔ(p1564, p1566);
        }
      }
    };
    this.ᐃΔΔΔⲆⵠⵠ = {
      enabled: vVV142,
      translate: {
        y: 0,
        x: 0
      },
      ⲆᐃⵠⵠⵠⲆΔ: function () {
        if (world.mode == 1 && !user.ⲆⲆΔⵠⲆᐃⵠ) {
          user.ᐃΔΔΔⲆⵠⵠ.enabled = !user.ᐃΔΔΔⲆⵠⵠ.enabled;
          if (user.ᐃΔΔΔⲆⵠⵠ.enabled) {
            game.options.ⵠᐃΔΔⵠⲆⵠ.display = "inline-block";
          } else {
            game.options.ⵠᐃΔΔⵠⲆⵠ.display = "none";
          }
        }
      }
    };
    game.options.ⵠᐃΔΔⵠⲆⵠ.display = "none";
    this.ⵠⵠⵠⵠΔ = {
      enabled: vVV145,
      translate: {
        y: 0,
        x: 0
      },
      ⲆⲆᐃΔⲆ: 0,
      ⲆᐃⵠⵠⵠⲆΔ: function () {
        user.ⵠⵠⵠⵠΔ.enabled = !user.ⵠⵠⵠⵠΔ.enabled;
        if (user.ⵠⵠⵠⵠΔ.enabled) {
          game.options.ⵠⵠᐃⵠⲆⵠⲆ.display = "inline-block";
        } else {
          game.options.ⵠⵠᐃⵠⲆⵠⲆ.display = "none";
        }
      },
      ⵠᐃᐃ: function () {
        if (!!this.enabled && !(user.ⵠⲆⲆᐃ.id >= 0) && !game.ΔΔΔΔ.open) {
          this.ⲆⲆᐃΔⲆ += v3064;
          if (this.ⲆⲆᐃΔⲆ > 2) {
            this.ⲆⲆᐃΔⲆ = 0;
            if (user.ᐃⵠᐃⵠ.ⵠⲆⵠ < 0.35) {
              if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[201]) {
                v2837.ᐃⵠⲆⲆΔ(201, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(201));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[356]) {
                v2837.ᐃⵠⲆⲆΔ(356, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(356));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[294]) {
                v2837.ᐃⵠⲆⲆΔ(294, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(294));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[298]) {
                v2837.ᐃⵠⲆⲆΔ(298, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(298));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[291]) {
                v2837.ᐃⵠⲆⲆΔ(291, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(291));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[317]) {
                v2837.ᐃⵠⲆⲆΔ(317, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(317));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[315]) {
                v2837.ᐃⵠⲆⲆΔ(315, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(315));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[319]) {
                v2837.ᐃⵠⲆⲆΔ(319, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(319));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[236]) {
                v2837.ᐃⵠⲆⲆΔ(236, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(236));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[208]) {
                v2837.ᐃⵠⲆⲆΔ(208, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(208));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[231]) {
                v2837.ᐃⵠⲆⲆΔ(231, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(231));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[226]) {
                v2837.ᐃⵠⲆⲆΔ(226, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(226));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[238]) {
                v2837.ᐃⵠⲆⲆΔ(238, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(238));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[229]) {
                v2837.ᐃⵠⲆⲆΔ(229, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(229));
              } else if (user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[299]) {
                v2837.ᐃⵠⲆⲆΔ(299, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(299));
              }
            } else if (user.ᐃⵠᐃⵠ.ᐃⵠⲆ < 0.35 && user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[218]) {
              v2837.ᐃⵠⲆⲆΔ(218, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(218));
            }
          }
        }
      }
    };
    game.options.ⵠⵠᐃⵠⲆⵠⲆ.display = "none";
    this.ⵠⲆⲆᐃ = {
      id: -1,
      ΔΔⵠΔ: -1,
      timeout: new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 1, 0, 1, 1),
      ⵠⲆⲆᐃᐃ: vVV142,
      ᐃᐃⲆⲆ: -1,
      mode: 0,
      label: [],
      ΔᐃⵠⲆⲆ: [],
      ᐃΔⲆᐃᐃⵠΔ: false,
      ⵠΔⲆΔⵠ: vVV142,
      ⲆᐃΔⲆΔᐃᐃ: false,
      ΔᐃⲆΔᐃ: vV14,
      ᐃΔΔⵠⲆΔⵠⲆⲆ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ⲆΔΔⲆᐃᐃΔΔᐃ: function (p1567) {
        this.ᐃΔⲆᐃᐃⵠΔ = p1567;
        var v2453 = game.ΔΔΔΔ;
        if (v2453.open) {
          v2453.ΔⵠΔⵠΔⵠⲆ(v2453.button);
        }
        this.ⵠᐃᐃ();
      },
      ⲆᐃⲆᐃⲆⲆⵠⲆⲆ: function (p1568) {
        var v2454 = v730[p1568];
        this.id = p1568;
        this.ⵠⲆⲆᐃᐃ = true;
        world.fast_units[user.ᐃᐃⵠⵠ];
        this.timeout.ᐃᐃᐃΔΔⲆΔ = v2454.time * 8;
        this.ΔΔⵠΔ = v2454.ΔΔⵠΔ;
      },
      ⵠΔΔⲆⲆⵠⵠΔⲆ: function (p1569) {
        var v2455 = v730[p1569];
        this.id = p1569;
        this.ⵠⲆⲆᐃᐃ = true;
        var v2456 = world.fast_units[user.ᐃᐃⵠⵠ];
        if (v2456 && v2456.right == 46) {
          this.timeout.ᐃᐃᐃΔΔⲆΔ = v2455.time * 3;
        } else {
          this.timeout.ᐃᐃᐃΔΔⲆΔ = v2455.time;
        }
        this.ΔΔⵠΔ = v2455.ΔΔⵠΔ;
        for (var v2457 = 0; v2457 < v2455.r.length; v2457++) {
          var v2458 = v2455.r[v2457];
          user.ᐃⵠⲆⲆ.ⲆⲆᐃⲆⵠⲆⵠ(v2458[0], v2458[1], user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(v2458[0]));
        }
        game.ⵠⲆΔᐃⲆᐃᐃ();
      },
      ⵠᐃᐃ: function () {
        this.ΔᐃⵠⲆⲆ = [];
        if (game.ᐃΔⵠᐃⲆ.ⵠⲆⲆᐃ === 1) {
          game.ᐃΔⵠᐃⲆ.display = 0;
        }
        for (var v2459 in v730) {
          var v2460 = v730[v2459];
          if (v2460) {
            var vVVVV633 = vVVV63;
            if (v2460.r) {
              for (var v2461 = 0; v2461 < v2460.r.length; v2461++) {
                if (user.ᐃⵠⲆⲆ.max >= 16 && v2460.id === 47) {
                  vVVVV633 = false;
                  break;
                }
                if (v2460.w > this.ᐃΔⲆᐃᐃⵠΔ || v2460.f > this.ⵠΔⲆΔⵠ || v2460.ΔⲆΔ > this.ⲆᐃΔⲆΔᐃᐃ || v2460.e > this.ΔᐃⲆΔᐃ) {
                  vVVVV633 = false;
                  break;
                }
                var v2462 = v2460.r[v2461];
                if (!user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[v2462[0]] || user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[v2462[0]] < v2462[1]) {
                  vVVVV633 = vV14;
                  break;
                }
              }
              if (vVVVV633) {
                this.ΔᐃⵠⲆⲆ.push(game.ⲆΔⵠ[v2460.id]);
              }
            }
          }
        }
        game.ΔⲆᐃᐃⲆᐃΔ();
        game.ΔΔΔΔⲆΔⵠ();
        game.ⵠᐃⲆⲆⲆᐃⵠ();
        game.ᐃⲆⲆΔⲆΔΔ();
        game.ΔⲆᐃⲆΔΔⲆ();
        game.ⲆΔΔᐃⲆⲆⵠ();
        game.sign.ⲆⲆᐃⲆⲆΔᐃ();
      },
      ⵠᐃᐃⲆΔⵠⵠ: function () {
        this.id = -1;
        this.ⵠⲆⲆᐃᐃ = vVV144;
        this.timeout.Ⲇⵠⵠ = 0;
        this.timeout.ΔⲆΔ = false;
        this.ⵠᐃᐃ();
      }
    };
    this.ⵠΔᐃⵠΔΔΔ = {
      message: vVVVVUndefined142,
      ⲆΔᐃΔ: f400
    };
    this.alert = {
      timeout: new Δᐃᐃ.Ⲇⵠᐃᐃ(v14, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ⲆΔᐃΔ: f399,
      list: []
    };
    this.ⵠⵠᐃⲆᐃ = {
      ⵠΔΔ: document.createElement("canvas"),
      ᐃᐃⵠΔᐃ: [],
      ⵠᐃᐃ: vVV63,
      translate: {
        y: 0,
        x: 0
      },
      sort: function () {
        var v2463 = [];
        for (var v2464 = world.players, v2465 = 0; v2465 < v2464.length; v2465++) {
          if (v2464[v2465].ⵠᐃⲆΔⲆ) {
            v2463.push({
              id: v2465,
              ⵠᐃᐃΔ: v2464[v2465].Ⲇⵠⵠᐃᐃ
            });
          }
        }
        v2463.sort(function (p1570, p1571) {
          return p1571.ⵠᐃᐃΔ - p1570.ⵠᐃᐃΔ;
        });
        this.ᐃᐃⵠΔᐃ = [];
        for (v2465 = 0; v2465 < v2463.length && v2465 < 10; v2465++) {
          this.ᐃᐃⵠΔᐃ.push(v2463[v2465].id);
        }
        this.ⵠᐃᐃ = true;
      },
      ΔᐃΔⲆⵠ: function (p1572) {
        for (var v2466 = world.players, v2467 = 0; v2467 < v2466.length; v2467++) {
          v2466[v2467].Ⲇⵠⵠᐃᐃ = 0;
        }
        v2466[user.id].Ⲇⵠⵠᐃᐃ = Δᐃᐃ.ᐃⵠᐃⲆⲆⵠⲆ(p1572[1]);
        this.ᐃᐃⵠΔᐃ = [];
        for (v2467 = 2; v2467 < p1572.length; v2467 += 2) {
          this.ᐃᐃⵠΔᐃ.push(p1572[v2467]);
          v2466[p1572[v2467]].Ⲇⵠⵠᐃᐃ = Δᐃᐃ.ᐃⵠᐃⲆⲆⵠⲆ(p1572[v2467 + 1]);
        }
        this.ⵠᐃᐃ = true;
      }
    };
    this.ⵠⵠᐃⲆᐃ.ⵠΔΔ.width = v415 * 180;
    this.ⵠⵠᐃⲆᐃ.ⵠΔΔ.height = v415 * 300;
    this.ⵠⵠᐃⲆᐃ.Δ = this.ⵠⵠᐃⲆᐃ.ⵠΔΔ.getContext("2d");
    this.ⲆⲆᐃΔⵠ = {
      open: vVVV143,
      input: document.getElementById("commandInput"),
      ΔᐃⲆⲆⲆⲆⵠ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⲆΔᐃΔⲆⵠⲆᐃⵠ: function (p1573) {
        this.ΔᐃⲆⲆⲆⲆⵠ.innerHTML += p1573;
      },
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v406 / 2 - 300) + "px";
        this.style.top = Math.floor(v408 / 2 - 250) + "px";
      },
      ᐃΔⵠᐃᐃᐃᐃⵠⲆ: function () {
        this.ΔᐃⲆⲆⲆⲆⵠ.innerHTML = "";
      },
      ᐃᐃΔⵠⵠ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ᐃΔⵠᐃⲆᐃᐃ: function (p1574) {
        var v2468 = "<table class=\"tableList\">";
        for (var v2469 = 0; v2469 < p1574.length; v2469++) {
          if (v2469 % 3 === 0) {
            v2468 += "<tr>";
          }
          v2468 += "<td class=\"tableList\">" + p1574[v2469] + "</td>";
          if ((v2469 + 1) % 3 === 0 || v2469 + 1 === p1574.length) {
            v2468 += "</tr>";
          }
        }
        return v2468 += "</table>";
      },
      ΔⵠᐃΔⲆ: function (p1575, p1576, p1577, p1578) {
        var v2470 = "<div class=commandWritten>" + (p1575 = p1575 || "");
        v2470 += (p1576 = p1576 || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        v2470 += (p1577 = p1577 || "") + "</div>" + (p1578 = p1578 || "") + "</div>";
        this.ⲆΔᐃΔⲆⵠⲆᐃⵠ(v2470);
        this.ᐃⲆᐃΔⲆΔⵠᐃΔ();
      },
      ᐃⲆᐃΔⲆΔⵠᐃΔ: function () {
        this.ΔᐃⲆⲆⲆⲆⵠ.scrollTop = this.ΔᐃⲆⲆⲆⲆⵠ.scrollHeight;
      },
      ᐃΔⲆΔΔᐃΔ: function (p1579) {
        switch (p1579) {
          case "clean":
            this.ᐃΔⵠᐃᐃᐃᐃⵠⲆ();
            return vVVV62;
          case "list":
            var v2471 = "";
            const v2472 = vWindow.document.createElement("div");
            for (var v2473 = world.players, v2474 = 0; v2474 < v2473.length; v2474++) {
              var v2475 = v2473[v2474];
              if (v2475.ⵠᐃⲆΔⲆ) {
                v2472.innerText = v2475.ᐃⲆᐃⵠⲆ;
                v2471 += v2472.innerHTML + " <span style=\"color:green\">#" + v2474 + "</span><br />";
              }
            }
            this.ΔⵠᐃΔⲆ("list", 1, "List all connected players", v2471);
            return vV6;
          case "weapon-list":
            this.ΔⵠᐃΔⲆ("Weapons", 1, "List all weapons in the game", this.ᐃΔⵠᐃⲆᐃᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "sword_copper", "sword_iron", "sword_topaz", "sword_sapphire", "sword_jade", "sword_ruby", "sword_emerald", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "copper_spear", "iron_spear", "topaz_spear", "sapphire_spear", "jade_spear", "ruby_spear", "emerald_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe", "emerald_axe", "copper_axe", "iron_axe", "topaz_axe", "sapphire_axe", "jade_axe", "ruby_axe", "coal_axe", "aquamarine_axe"]));
            return true;
          case "tool-list":
            this.ΔⵠᐃΔⲆ("Tools", 1, "List all tools in the game", this.ᐃΔⵠᐃⲆᐃᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "pick_copper", "pick_iron", "pick_topaz", "pick_sapphire", "pick_jade", "pick_ruby", "pick_emerald", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "hammer_copper", "hammer_iron", "hammer_topaz", "hammer_sapphire", "hammer_jade", "hammer_ruby", "hammer_emerald", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "shovel_reidite", "shovel_copper", "shovel_iron", "shovel_topaz", "shovel_sapphire", "shovel_jade", "shovel_ruby", "shovel_emerald", "pitchfork", "pitchfork2", "spanner", "book"]));
            return vVVV632;
          case "survival-list":
            this.ΔⵠᐃΔⲆ("Survival Items", 1, "List all survival items in the game", this.ᐃΔⵠᐃⲆᐃᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite", "extractor_emerald", "extractor_copper", "extractor_iron", "extractor_topaz", "extractor_sapphire", "extractor_jade", "extractor_ruby", "extractor_coal", "extractor_aquamarine"]));
            return true;
          case "resource-list":
            this.ΔⵠᐃΔⲆ("Resources", 1, "List all resources in the game", this.ᐃΔⵠᐃⲆᐃᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "copper", "iron", "topaz", "sapphire", "jade", "ruby", "emerald", "coal", "aquamarine", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return vV6;
          case "food-list":
            this.ΔⵠᐃΔⲆ("Food", 1, "List all food in the game", this.ᐃΔⵠᐃⲆᐃᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus", "banana"]));
            return vVVV632;
          case "hat-list":
            this.ΔⵠᐃΔⲆ("Hats", 1, "List all hats in the game", this.ᐃΔⵠᐃⲆᐃᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "emerald_helmet", "copper_helmet", "iron_helmet", "topaz_helmet", "sapphire_helmet", "jade_helmet", "ruby_helmet", "coal_helmet", "aquamarine_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ΔⵠᐃΔⲆ("Buildings", 1, "List all buildings in the game", this.ᐃΔⵠᐃⲆᐃᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return vVV63;
          case "biome-list":
            this.ΔⵠᐃΔⲆ("Biomes list", 1, "List all available biomes in the game", this.ᐃΔⵠᐃⲆᐃᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon", "jungle"]));
            return true;
          case "help-config":
            this.ΔⵠᐃΔⲆ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            v2473 = world.units[0];
            v2474 = 0;
            for (; v2474 < v2473.length; v2474++) {
              var v2476 = v2473[v2474];
              if (v2476.ΔⲆᐃⲆ === user.id) {
                this.ΔⵠᐃΔⲆ("pos", 1, "Your position is " + Math.floor(v2476.x / 100) + ":" + Math.floor(v2476.y / 100));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ΔⵠᐃΔⲆ("help-admin", 1, "List all available commands for admin only", this.ᐃΔⵠᐃⲆᐃᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "dst | disable-steal", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return vVVV62;
          case "help":
            this.ΔⵠᐃΔⲆ("help", 1, "List all available commands", this.ᐃΔⵠᐃⲆᐃᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return vVVV6;
        }
        return vVVVVV142;
      },
      ΔΔΔⲆⵠⲆΔⵠⵠ: function () {
        if (!this.open) {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ᐃⵠΔⲆⵠΔΔ: function () {
        var v2477 = this.input.value;
        if (v2477 && v2477.length > 0) {
          if (!this.ᐃΔⲆΔΔᐃΔ(v2477)) {
            v2837.ΔⲆⵠⵠⲆⲆᐃⵠΔ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ⲆΔⲆᐃⲆ = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v406 / 2 - 150) + "px";
        this.style.top = Math.floor(v408 / 2 + 80) + "px";
      },
      ᐃᐃΔⵠⵠ: function () {
        this.open = false;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (p1580) {
          if (p1580 === "off") {
            var v2478 = "Enter \"!hud\" without the quotes to restore the HUD";
            if (user.alert.text) {
              user.alert.list.push(v2478);
            } else {
              user.alert.text = v2478;
            }
            game.ⵠⲆⵠⲆⲆⵠᐃ = 0;
          } else {
            game.ⵠⲆⵠⲆⲆⵠᐃ = 1;
          }
        }
      },
      ᐃΔⲆΔΔᐃΔ: function (p1581) {
        if (p1581.charAt(0) == this.prefix) {
          var v2479 = "";
          var v2480 = "";
          for (var v2481 = 1; v2481 < p1581.length && p1581.charAt(v2481) != " "; v2481++) {
            v2479 += p1581.charAt(v2481);
          }
          for (v2481++; v2481 < p1581.length; v2481++) {
            v2480 += p1581.charAt(v2481);
          }
          var v2482 = this.cmd[v2479];
          if (v2482) {
            v2482(v2480);
          }
          return true;
        }
        return vVVVVV142;
      },
      ⲆΔᐃᐃⲆ: function () {
        if (this.open) {
          this.open = vVV1423;
          this.style.display = "none";
          var v2483 = this.input.value;
          if (v2483) {
            if (!this.ᐃΔⲆΔΔᐃΔ(v2483)) {
              v2837.ᐃᐃⵠᐃⵠᐃΔᐃⵠ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = vVVVV63;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ΔⵠⵠⵠΔΔΔ = {
      ΔΔⵠⵠᐃ: [],
      ⵠᐃᐃ: function (p1582) {
        p1582.y += v3064 * 80 * p1582.ⵠᐃᐃΔ;
        p1582.x += v3064 * 80 * p1582.c;
        p1582.ᐃⵠᐃΔᐃ -= v3064 / 6;
        if (p1582.ᐃⵠᐃΔᐃ > 0.2) {
          p1582.alpha = Math.min(p1582.alpha + v3064 * 3, 1);
        } else {
          p1582.alpha = Math.max(p1582.alpha - v3064 * 1, 0);
        }
      },
      add: function (p1583) {
        var v2484 = Math.floor(Math.min(v585.ⵠⵠⲆⵠⲆⲆᐃ * (v406 / 1366), v585.ⵠⵠⲆⵠⲆⲆᐃ + 10) * Math.max(Math.min(world.ᐃⵠᐃⵠᐃ + 1000, 3000) / 3000, 0));
        if (this.ΔΔⵠⵠᐃ.length < v2484) {
          var v2485 = Math.floor(Math.random() * v585.ⲆⲆΔΔⲆⵠⲆ);
          var v2486 = -user.ᐃⵠⵠ.x + Math.floor(Math.random() * user.ᐃⵠⵠ.w);
          var v2487 = -user.ᐃⵠⵠ.y + Math.floor(Math.random() * user.ᐃⵠⵠ.ⵠⲆⵠ);
          var v2488 = Math.random(Math.PI);
          this.ΔΔⵠⵠᐃ.push(new f456(v2485, v2486, v2487, v2488));
        }
      }
    };
    this.ᐃⲆⵠᐃᐃⵠᐃ = 0;
    this.ᐃⲆᐃΔᐃ = 0;
    this.ⲆⵠⲆⲆⲆ = {
      ΔΔⵠⵠᐃ: [],
      ⲆⲆΔⲆΔ: 0,
      ⲆᐃᐃⲆᐃ: 0,
      ⵠᐃᐃ: function (p1584) {
        p1584.y += v3064 * (200 + this.ⲆᐃᐃⲆᐃ * 800) * p1584.ⵠᐃᐃΔ;
        p1584.x += v3064 * (200 + this.ⲆᐃᐃⲆᐃ * 800) * p1584.c;
        p1584.ᐃⵠᐃΔᐃ -= v3064 / 6;
        if (p1584.ᐃⵠᐃΔᐃ > 0.2) {
          p1584.alpha = Math.min(p1584.alpha + v3064 * 3, 1);
        } else {
          p1584.alpha = Math.max(p1584.alpha - v3064 * 1, 0);
        }
      },
      add: function (p1585) {
        var v2489 = Math.floor(Math.min((this.ⲆᐃᐃⲆᐃ + 0.1) * v585.ΔⲆᐃᐃⲆΔⵠ * (v406 / 1366), (this.ⲆᐃᐃⲆᐃ + 0.1) * v585.ΔⲆᐃᐃⲆΔⵠ + 10) * Math.max(Math.min(world.ⲆᐃΔⵠᐃ + 1000, 3000) / 3000, 0));
        if (this.ΔΔⵠⵠᐃ.length < v2489) {
          var v2490 = Math.floor(Math.random() * v585.ⲆⲆΔΔⲆⵠⲆ);
          var v2491 = -user.ᐃⵠⵠ.x + Math.floor(Math.random() * user.ᐃⵠⵠ.w);
          var v2492 = -user.ᐃⵠⵠ.y + Math.floor(Math.random() * user.ᐃⵠⵠ.ⵠⲆⵠ);
          var v2493 = Math.random(Math.PI);
          if (user.ⲆⵠⲆⲆⲆ.ⲆⲆΔⲆΔ !== 0) {
            v2491 -= user.ᐃⵠⵠ.w / 2;
          }
          this.ΔΔⵠⵠᐃ.push(new f456(v2490, v2491, v2492, v2493));
        }
      }
    };
    this.ⵠⵠᐃⵠΔ = {
      ΔΔⵠⵠᐃ: [],
      ⲆⲆΔⲆΔ: 0,
      ⲆᐃᐃⲆᐃ: 0,
      ⵠᐃᐃ: function (p1586) {
        if (v3059.ᐃᐃᐃⵠⵠⲆⵠ()) {
          p1586.y += v3064 * p1586.ΔⲆΔⲆⵠ * (5.5 + this.ⲆᐃᐃⲆᐃ * 10);
        } else {
          p1586.y += v3064 * p1586.ΔⲆΔⲆⵠ * (5 + this.ⲆᐃᐃⲆᐃ * 10);
        }
        p1586.ᐃⵠᐃΔᐃ -= v3064 / 2;
        if (v3059.ᐃΔⵠⵠᐃᐃΔ()) {
          p1586.x += v3064 * (100 + this.ⲆᐃᐃⲆᐃ * 400);
        } else if (v3059.ΔᐃⵠᐃΔⵠⲆ()) {
          p1586.x -= v3064 * (130 - this.ⲆᐃᐃⲆᐃ * 400);
        } else {
          p1586.x -= v3064 * (30 - this.ⲆᐃᐃⲆᐃ * 400);
        }
        if (p1586.ᐃⵠᐃΔᐃ > 0.2) {
          p1586.alpha = Math.min(p1586.alpha + v3064 * 3, 1);
        } else {
          p1586.alpha = Math.max(p1586.alpha - v3064 * 5, 0);
        }
      },
      add: function (p1587) {
        var v2494 = Math.floor(Math.min((this.ⲆᐃᐃⲆᐃ * 1.5 + 0.5) * v585.ⲆᐃΔΔΔΔᐃ * (v406 / 1366), (this.ⲆᐃᐃⲆᐃ * 1.5 + 0.5) * v585.ⲆᐃΔΔΔΔᐃ + 10) * Math.max(Math.min(world.ΔⵠΔⲆⲆ + 1000, 3000) / 3000, 0));
        if (this.ΔΔⵠⵠᐃ.length < v2494) {
          var v2495 = Math.floor(Math.random() * v585.ᐃⲆᐃᐃᐃᐃΔ);
          var v2496 = -user.ᐃⵠⵠ.x + Math.floor(Math.random() * user.ᐃⵠⵠ.w);
          var v2497 = -user.ᐃⵠⵠ.y + Math.floor(Math.random() * 400 * v415 - v415 * 200);
          this.ΔΔⵠⵠᐃ.push(new f456(v2495, v2496, v2497, 0));
        }
      }
    };
    this.ΔᐃⲆⲆ = [];
    for (var v2498 = 0; v2498 < 4; v2498++) {
      this.ΔᐃⲆⲆ.push(new f469());
    }
  }
  function f470() {
    Math.random();
    return "a";
  }
  function f471() {
    Math.random();
    return "n";
  }
  function f472() {
    Math.random();
    return "C";
  }
  function f473() {
    Math.random();
    return "o";
  }
  function f474() {
    Math.random();
    return "p";
  }
  function f475() {
    Math.random();
    return "e";
  }
  function f476(p1588, p1589, p1590, p1591, p1592, p1593) {
    vVVVUndefined52(vVVVVVUndefined582, p1588, p1589, p1590, p1591, p1592, p1593);
    const vF482 = f48(v372[0], v372[1], v372[2], v372[3], v372[4]);
    f516(v372[5], v372[0], v372[1], v372[2], v372[3], v372[4]);
    return (vF482 | 52029) & ~(vF482 & 52029);
  }
  function f477(p1594) {
    return function (p1595, p1596) {
      const v2499 = ((p1595 + 52034) * 214013 + 2531011) % 4294967296;
      const v2500 = (2147483587 + (p1596 + 45768) * 2147483629) % 2147483647;
      const vF433 = f43(v2499, v2500);
      f535(v2499, v2500);
      return ~(vF433 & 20418) & (vF433 | 20418);
    }(p1594, 20607);
  }
  function f478(p1597, p1598, p1599, p1600, p1601) {
    const v2501 = p1597 ^ 27633;
    const v2502 = (2147483587 + (p1600 + 10941) * 2147483629) % 2147483647;
    const v2503 = (8 << (p1601 >> 16 & 255)) + (16 << (p1601 >> 24 & 255)) + (0 << (p1601 & 255)) + (24 << (p1601 >> 8 & 255));
    const vF49 = function (p1602, p1603, p1604) {
      const v2504 = (p1602 | 213) & ~(p1602 & 213);
      const v2505 = (8 << (p1603 >> 16 & 255)) + (16 << (p1603 & 255)) + (0 << (p1603 >> 24 & 255)) + (24 << (p1603 >> 8 & 255));
      const v2506 = p1604 ^ 56006;
      const vF822 = f82(v2504, v2505);
      f76(v2506, v2504, v2505, v2506, v2504, v2505);
      return (vF822 | 58424) & ~(vF822 & 58424);
    }(v2501, ((24895 + p1598) * 214013 + 2531011) % 4294967296, ((14444 + p1599) * 1664525 + 1013904223) % 4294967296);
    const vF51 = f51(v2502, v2503, v2501);
    return (8 << ((vF49 ^ vF51) >> 24 & 255)) + (24 << ((vF49 ^ vF51) >> 8 & 255)) + (0 << ((vF49 ^ vF51) >> 16 & 255)) + (16 << ((vF49 ^ vF51) >> 0 & 255));
  }
  function f479(p1605, p1606) {
    const v2507 = ~(p1605 & 38081) & (p1605 | 38081);
    const v2508 = ~(p1606 & 56524) & 56524 | ~(p1606 & 56524) & p1606;
    const vF623 = f62(v2507, v2508, 0, v2508, v2507, v2508);
    const vF612 = f61(v2507, v2508);
    return (16 << ((vF623 ^ vF612) >> 16 & 255)) + (0 << ((vF623 ^ vF612) >> 8 & 255)) + (24 << ((vF623 ^ vF612) >> 0 & 255)) + (8 << ((vF623 ^ vF612) >> 24 & 255));
  }
  function f480(p1607, p1608, p1609, p1610) {
    const v2509 = (2531011 + (25535 + p1607) * 214013) % 4294967296;
    const v2510 = p1608 ^ 23694;
    const v2511 = ~(p1609 & 32465) & 32465 | ~(p1609 & 32465) & p1609;
    const v2512 = ~(p1610 & 36569) & 36569 | ~(p1610 & 36569) & p1610;
    const vNp = f491(v2509, v2510, v2511);
    const vF50 = function (p1611, p1612, p1613, p1614) {
      const v2513 = ((p1611 + 3683) * 22695477 + 1) % 4294967296;
      const v2514 = ((p1612 + 3876) * 1103515245 + 12345) % 2147483648;
      const v2515 = p1613 ^ 60408;
      const v2516 = (p1614 | 11315) & ~(p1614 & 11315);
      const vF624 = f62(v2513, v2514, 0, v2516, v2513, v2514);
      const vNp2 = f491(v2515, v2516, v2513);
      return (8 << ((vF624 ^ vNp2) & 255)) + (0 << ((vF624 ^ vNp2) >> 16 & 255)) + (16 << ((vF624 ^ vNp2) >> 8 & 255)) + (24 << ((vF624 ^ vNp2) >> 24 & 255));
    }(v2512, v2509, v2510, v2511);
    return (16 << ((vNp ^ vF50) & 255)) + (24 << ((vNp ^ vF50) >> 16 & 255)) + (8 << ((vNp ^ vF50) >> 24 & 255)) + (0 << ((vNp ^ vF50) >> 8 & 255));
  }
  function f481(p1615, p1616) {
    const v2517 = p1615 ^ 59855;
    const v2518 = (p1616 | 51417) & ~(p1616 & 51417);
    const vF52 = function (p1617, p1618) {
      const v2519 = (8 << (p1617 >> 24 & 255)) + (0 << (p1617 >> 16 & 255)) + (24 << (p1617 & 255)) + (16 << (p1617 >> 8 & 255));
      const v2520 = ((16435 + p1618) * 1664525 + 1013904223) % 4294967296;
      const vF480 = f480(v2519, v2520, v2519, v2520);
      f535(v2519, v2520);
      return vF480 ^ 30;
    }(v2517, v2518);
    f51(v2517, v2518, v2517);
    return ~(vF52 & 35829) & vF52 | ~(vF52 & 35829) & 35829;
  }
  ΔⵠⵠⲆⲆᐃᐃΔⵠ = 1;
  setTimeout(function f482() {
    var v2521 = f471() + f470() + f461() + f465();
    Math.random();
    var v2522 = "W" + f475() + (Math.random(), "b") + (Math.random(), "S") + f473() + (Math.random(), "c") + function () {
      Math.random();
      return "k";
    }() + f475() + f461();
    if (vWindow[v2522].toString().indexOf(v2521) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var v2523 = f463() + f475() + f471() + f458();
    var v2524 = f474() + f464() + f473() + f461() + f473() + f461() + (Math.random(), "y") + f474() + f475();
    if (vWindow[v2522][v2524][v2523].toString().indexOf(v2521) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    v2522 = f458() + f464() + f470() + (Math.random(), "w") + (Math.random(), "I") + function () {
      Math.random();
      return "m";
    }() + f470() + f466() + f475();
    v2523 = f472() + f470() + f471() + function () {
      Math.random();
      return "v";
    }() + f470() + f463() + function () {
      Math.random();
      return "R";
    }() + f475() + f471() + f458() + f475() + f464() + f465() + f471() + f466() + f472() + f473() + f471() + f461() + f475() + (Math.random(), "x") + f461() + (Math.random(), "2") + (Math.random(), "D");
    if (vWindow[v2523][v2524][v2522].toString().indexOf(v2521) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    setTimeout(f482, 100000);
  }, 100000);
  function f483(p1619, p1620) {
    this.ⵠΔΔ = p1619;
    this.Δ = p1620;
    var vThis = this;
    this.ΔΔᐃᐃᐃⵠⵠ = vV142;
    this.ⵠΔᐃΔⵠΔᐃ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: 0,
        x: 0
      },
      ⵠᐃᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ΔᐃΔⲆⵠ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + user.ΔⵠᐃⵠᐃⲆⲆ.ⲆᐃⲆᐃⵠΔΔ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + v751[2035] + " : " + user.Δⵠⵠ + "</div><div class=\"stats\"> " + v751[2034] + " : " + user.ΔⵠᐃⵠᐃⲆⲆ.ᐃᐃⲆΔᐃᐃΔ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + v751[2033] + " : " + user.ΔⵠᐃⵠᐃⲆⲆ.Ⲇⵠⵠᐃᐃ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + user.ΔⵠᐃⵠᐃⲆⲆ.ⲆⲆΔᐃᐃΔⵠ + " " + v751[2032] + "</div></div><div id=\"shop_points\">" + v751[2031] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + v751[2029] + "</div><div class=\"social\" id=\"fffacebook\">" + v751[2030] + "</div></div><div id=\"bbback\">" + v751[2028] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", f509, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          scoreboard.ᐃᐃΔⵠⵠ(v2833.ⲆΔᐃᐃⲆ);
        }, vVVVV1422);
        document.getElementById("fffacebook").addEventListener("mouseup", f493, false);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var v2525 = new XMLHttpRequest();
          v2525.open("GET", v3085 + "getBreadAndScore?userid=" + vUndefined6);
          v2525.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          v2525.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && v2525.responseText !== "0") {
              var v2526 = JSON.parse(v2525.responseText);
              var v2527 = v2526.b - v2833.ⵠⲆⲆⵠⲆ;
              v2833.ⵠⲆⲆⵠⲆ = v2526.b;
              v2833.Ⲇⵠⵠᐃᐃ = v2526.s;
              v2833.ⵠⲆᐃⵠᐃ = v2833.ᐃᐃᐃⲆΔⵠⵠ(v2833.Ⲇⵠⵠᐃᐃ);
              v2833.ⵠΔᐃΔᐃᐃⵠ = v2833.ⲆΔⵠᐃΔᐃᐃ(v2833.Ⲇⵠⵠᐃᐃ);
              v2833.ⲆⵠΔᐃΔⲆⵠ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + v2527;
            }
          };
          v2525.send();
        })();
      }
    };
    var v2528;
    var v2529 = 0;
    function f484() {
      vThis.ⵠᐃᐃ();
      if (++v2529 != 30) {
        vWindow.setTimeout(f484, 33);
      } else {
        vThis.ⵠᐃᐃ();
      }
    }
    this.ᐃᐃΔⵠⵠ = function (p1621) {
      if (vVVV6 === vThis.ΔΔᐃᐃᐃⵠⵠ) {
        vThis.ΔΔᐃᐃᐃⵠⵠ = false;
        v2528 = p1621;
        v2530 = -1;
        f485();
        f532();
      }
    };
    var v2530 = -1;
    function f485() {
      vThis.ⵠᐃᐃ();
      if (++v2530 == 30) {
        vThis.stop();
        vThis.ⵠΔᐃΔⵠΔᐃ.style.display = "none";
        v2528();
        return;
      }
      vWindow.setTimeout(f485, 33);
    }
    this.ΔΔΔⵠᐃ = false;
    this.stop = function () {
      this.ΔΔΔⵠᐃ = vVVVV1423;
    };
    this.ⲆΔᐃᐃⲆ = function () {
      f534();
      document.getElementById("game_body").style.backgroundColor = v585.ΔΔⲆⲆⵠ[v2832.time];
      vThis.ⵠΔᐃΔⵠΔᐃ.ΔᐃΔⲆⵠ();
      v2833.ⵠΔᐃΔⲆⵠⲆ.style.display = "inline-block";
      vThis.ΔΔΔⵠᐃ = vVVVV6233;
      vThis.ΔΔᐃᐃᐃⵠⵠ = vVVV63;
      v2530 = -1;
      v2529 = 0;
      f484();
    };
    this.ⵠᐃᐃ = function () {
      this.ⵠΔᐃΔⵠΔᐃ.translate.x = Math.floor(v409 - 275);
      this.ⵠΔᐃΔⵠΔᐃ.translate.y = Math.floor(v410 - this.ⵠΔᐃΔⵠΔᐃ.height - 28);
      v2833.ⵠΔᐃΔⲆⵠⲆ.translate.x = this.ⵠΔᐃΔⵠΔᐃ.translate.x - 350;
      v2833.ⵠΔᐃΔⲆⵠⲆ.translate.y = this.ⵠΔᐃΔⵠΔᐃ.translate.y + 0;
      v2833.ⵠΔᐃΔⲆⵠⲆ.ⵠᐃᐃ();
      if (v2529 != 30 || v2530 != -1) {
        var v2531 = 0;
        if (v2529 != 30) {
          v2531 = 1500 / (v2529 + 1) - 50;
        }
        if (v2530 != -1) {
          v2531 = -(1750 / (30 - v2530 + 1) - 48);
        }
        this.ⵠΔᐃΔⵠΔᐃ.translate.y -= v2531;
      }
      this.ⵠΔᐃΔⵠΔᐃ.ⵠᐃᐃ();
    };
    this.ⲆΔᐃΔ = function () {
      f287();
      user.alert.ⲆΔᐃΔ("#FFF", "#000");
    };
  }
  function f486(p1622, p1623) {
    var vThis2 = this;
    this.ⵠΔΔ = p1622;
    this.ΔΔᐃⲆⲆᐃΔ = true;
    this.Δ = p1623;
    if (vWindow.navigator.userAgent.indexOf("Edge") > -1) {
      this.ᐃⵠᐃᐃΔⵠΔ = "default";
      this.ᐃᐃΔΔⲆΔᐃ = "pointer";
    } else {
      this.ᐃⵠᐃᐃΔⵠΔ = "url('img/cursor0.png'), default";
      this.ᐃᐃΔΔⲆΔᐃ = "url('img/cursor1.png'), pointer";
    }
    this.ⲆⲆⵠⲆⲆⲆΔ = 37411;
    this.ⵠⲆⵠⲆⲆⵠᐃ = 1;
    this.ᐃΔᐃⵠᐃⵠΔ = 29;
    var v2532 = 233;
    if (v2532 > 11) {
      v2532 = 35;
    }
    this.ΔΔᐃⵠⵠᐃⵠ = 1;
    this.ⲆⵠⵠΔᐃⲆⵠ = vVV63;
    this.ᐃⵠΔᐃⵠⲆᐃ = -16;
    this.ⲆⵠⵠⲆΔᐃⵠ = 1;
    this.ᐃᐃⲆΔⲆⲆᐃ = 197;
    this.ᐃⵠᐃᐃΔΔᐃ = 56;
    this.ᐃⵠᐃᐃΔΔᐃ.ᐃᐃᐃⲆⵠΔⵠ = 8;
    this.ᐃⲆⲆᐃᐃⲆⵠ = true;
    this.ⲆᐃⵠⵠⲆⵠΔ = 410;
    this.ⲆⵠᐃⲆⵠᐃⲆ = 1;
    this.ΔᐃⲆΔΔΔΔⲆⵠ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v409 - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.Ⲇⵠⵠᐃ = {
      ᐃⵠΔᐃⵠⵠⵠ: f431(60, 60, 0, ᐃᐃ[1031]),
      ⵠⵠⲆΔⵠⵠⵠ: f431(60, 60, 0, ᐃᐃ[1032])
    };
    this.sign = {
      open: vVV142,
      ⵠⲆⲆⵠⵠⲆᐃⲆⲆ: 0,
      ᐃⲆⲆΔⵠᐃⲆ: document.getElementById("sign_object"),
      ᐃⵠⵠⲆⵠΔⵠ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: f431(60, 60, 0, ᐃᐃ[1052]),
      ⲆⲆᐃⲆⲆΔᐃ: function () {
        var v2533 = Math.floor(Math.floor((3 + user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ.length) / 4) * (10 + ᐃᐃ[427][0].width) + 35);
        this.button.info.translate.x = v2533;
        this.button.info.translate.y = 22;
      },
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v409 - 150) + "px";
        this.style.top = Math.floor(v410 - 115) + "px";
      },
      ᐃᐃΔⵠⵠ: function () {
        game.sign.style.display = "none";
        game.sign.open = false;
      },
      select: function () {
        game.sign.open = !game.sign.open;
        if (game.sign.open) {
          game.sign.style.display = "inline-block";
        } else {
          game.sign.style.display = "none";
        }
      },
      ok: function () {
        v2837.ΔΔⲆᐃⵠⲆΔΔⵠ(user.sign.ΔⵠΔᐃⵠ, game.sign.ᐃⵠⵠⲆⵠΔⵠ);
        game.sign.select();
      },
      up: function () {
        game.sign.ᐃⵠⵠⲆⵠΔⵠ = game.sign.ᐃⵠⵠⲆⵠΔⵠ === 0 ? 3 : game.sign.ᐃⵠⵠⲆⵠΔⵠ - 1;
        game.sign.ᐃⲆⲆΔⵠᐃⲆ.src = "./img/sign" + game.sign.ᐃⵠⵠⲆⵠΔⵠ + ".png";
      },
      down: function () {
        game.sign.ᐃⵠⵠⲆⵠΔⵠ = (game.sign.ᐃⵠⵠⲆⵠΔⵠ + 1) % 4;
        game.sign.ᐃⲆⲆΔⵠᐃⲆ.src = "./img/sign" + game.sign.ᐃⵠⵠⲆⵠΔⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, vVVV144);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
    this.ⲆΔⵠⵠⵠ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ⲆΔⵠⲆΔ: 1,
        b: 1,
        a: 3,
        ᐃΔⲆⵠⵠ: 427
      }, {
        id: 1,
        name: "stone",
        ⲆΔⵠⲆΔ: 1,
        b: 1,
        a: 4,
        ᐃΔⲆⵠⵠ: 426
      }, {
        id: 2,
        name: "gold",
        ⲆΔⵠⲆΔ: 1,
        b: 1,
        a: 6,
        ᐃΔⲆⵠⵠ: 408
      }, {
        id: 3,
        name: "diamond",
        ⲆΔⵠⲆΔ: 4,
        b: 4,
        a: 1,
        ᐃΔⲆⵠⵠ: 409
      }, {
        id: 4,
        name: "amethyst",
        ⲆΔⵠⲆΔ: 8,
        b: 8,
        a: 1,
        ᐃΔⲆⵠⵠ: 529
      }, {
        id: 5,
        name: "reidite",
        ⲆΔⵠⲆΔ: 16,
        b: 16,
        a: 1,
        ᐃΔⲆⵠⵠ: 1214
      }, {
        id: 6,
        name: "pumpkin_seed",
        ⲆΔⵠⲆΔ: 10,
        b: 10,
        a: 1,
        ᐃΔⲆⵠⵠ: 1057
      }, {
        id: 7,
        name: "carrot_seed",
        ⲆΔⵠⲆΔ: 16,
        b: 16,
        a: 1,
        ᐃΔⲆⵠⵠ: 1225
      }, {
        id: 8,
        name: "tomato_seed",
        ⲆΔⵠⲆΔ: 20,
        b: 20,
        a: 1,
        ᐃΔⲆⵠⵠ: 1235
      }, {
        id: 9,
        name: "thornbush_seed",
        ⲆΔⵠⲆΔ: 30,
        b: 30,
        a: 1,
        ᐃΔⲆⵠⵠ: 1094
      }, {
        id: 10,
        name: "garlic_seed",
        ⲆΔⵠⲆΔ: 40,
        b: 40,
        a: 1,
        ᐃΔⲆⵠⵠ: 1083
      }, {
        id: 11,
        name: "watermelon_seed",
        ⲆΔⵠⲆΔ: 60,
        b: 60,
        a: 1,
        ᐃΔⲆⵠⵠ: 1242
      }],
      button: f431(60, 60, 0, ᐃᐃ[1044]),
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v409 - 450) + "px";
        this.style.top = Math.floor(v410 - 270) + "px";
      },
      select: function () {
        game.ⲆΔⵠⵠⵠ.open = !game.ⲆΔⵠⵠⵠ.open;
        if (game.ⲆΔⵠⵠⵠ.open) {
          game.ⲆΔⵠⵠⵠ.style.display = "inline-block";
        } else {
          game.ⲆΔⵠⵠⵠ.style.display = "none";
        }
      },
      ᐃᐃΔⵠⵠ: function () {
        game.ⲆΔⵠⵠⵠ.style.display = "none";
        game.ⲆΔⵠⵠⵠ.open = vVVV145;
      },
      ⵠΔⵠᐃΔᐃᐃ: function () {
        v2837.ΔΔⵠⵠᐃⲆΔᐃᐃ(this.ᐃΔᐃΔⵠⵠⵠ);
      },
      ⵠⵠᐃⲆΔ: function () {
        this.id;
        if (this.ᐃΔᐃΔⵠⵠⵠ.a === 1) {
          var v2534 = Math.floor(Number(this.value) * this.ᐃΔᐃΔⵠⵠⵠ.b);
          this.ᐃΔᐃΔⵠⵠⵠ.ⲆΔⵠⲆΔ = v2534;
          document.getElementById(this.ᐃΔᐃΔⵠⵠⵠ.name + "_trad_number").innerHTML = v2534 + "";
        } else {
          v2534 = Math.floor(Number(this.value) / this.ᐃΔᐃΔⵠⵠⵠ.a);
          this.ᐃΔᐃΔⵠⵠⵠ.ⲆΔⵠⲆΔ = v2534;
          document.getElementById(this.ᐃΔᐃΔⵠⵠⵠ.name + "_trad_number").innerHTML = v2534 + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⲆΔⵠⵠⵠ.ᐃᐃΔⵠⵠ, false);
    var v2535 = [["mouseup", this.ⲆΔⵠⵠⵠ.ⵠΔⵠᐃΔᐃᐃ, "buy_"], ["click", this.ⲆΔⵠⵠⵠ.ⵠⵠᐃⲆΔ, ""], ["change", this.ⲆΔⵠⵠⵠ.ⵠⵠᐃⲆΔ, ""], ["keypress", this.ⲆΔⵠⵠⵠ.keypress, ""]];
    for (var v2536 = 0; this.ⲆΔⵠⵠⵠ.items.length > v2536; v2536++) {
      var v2537 = this.ⲆΔⵠⵠⵠ.items[v2536];
      document.getElementById(v2537.name + "_market").src = ᐃᐃ[v2537.ᐃΔⲆⵠⵠ][0].ⲆⵠΔᐃⵠ === vVVVVVVUndefined142 ? ᐃᐃ[v2537.ᐃΔⲆⵠⵠ][0].src : ᐃᐃ[v2537.ᐃΔⲆⵠⵠ][0].ⲆⵠΔᐃⵠ;
      if (v2537.a === 1) {
        document.getElementById(v2537.name + "_trad_number").innerHTML = v2537.b;
        document.getElementById(v2537.name + "_number").value = 1;
        document.getElementById(v2537.name + "_number").step = 1;
        document.getElementById(v2537.name + "_number").min = 1;
        document.getElementById(v2537.name + "_number").max = Math.floor(255 / v2537.b);
      } else {
        document.getElementById(v2537.name + "_trad_number").innerHTML = 1;
        document.getElementById(v2537.name + "_number").value = v2537.a;
        document.getElementById(v2537.name + "_number").step = v2537.a;
        document.getElementById(v2537.name + "_number").min = v2537.a;
      }
      document.getElementById("buy_" + v2537.name + "_number").ᐃΔᐃΔⵠⵠⵠ = v2537;
      document.getElementById(v2537.name + "_number").ᐃΔᐃΔⵠⵠⵠ = v2537;
      for (var v2538 = 0; v2535.length > v2538; v2538++) {
        document.getElementById(v2535[v2538][2] + v2537.name + "_number").addEventListener(v2535[v2538][0], v2535[v2538][1], false);
      }
    }
    $("[type='number']").keypress(function (p1624) {
      p1624.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ᐃⵠⵠⲆΔ: document.getElementById("agree_ing").style,
      ⲆΔᐃⲆΔⵠⵠ: document.getElementById("cancel_agree_ing").style,
      Δⵠᐃⵠᐃᐃⵠ: document.getElementById("quest_agree_ing").style,
      ⵠᐃΔΔⵠⲆⵠ: document.getElementById("spectator_agree_ing").style,
      ⵠⵠᐃⵠⲆⵠⲆ: document.getElementById("auto_feed_agree_ing").style,
      ⲆⵠⵠⲆΔⲆⲆ: document.getElementById("info_agree_ing").style,
      ΔΔᐃΔⵠᐃⵠ: document.getElementById("pixelated_agree_ing").style,
      button: f431(60, 60, 0, ᐃᐃ[976]),
      ⵠᐃΔΔΔⵠⵠᐃΔ: function () {
        game.options.open = !game.options.open;
        if (game.options.open) {
          game.options.style.display = "inline-block";
        } else {
          game.options.style.display = "none";
        }
      },
      ⵠⲆᐃᐃᐃⲆᐃⵠᐃ: function () {
        v2833.ᐃᐃⵠΔⵠᐃⵠ();
      },
      ⲆⲆⵠΔⲆᐃᐃΔⵠ: function () {
        v2833.ⲆⲆⵠᐃᐃΔⵠ();
      },
      high: function () {
        v2833.ⲆΔᐃⵠΔⲆⵠⲆⵠ();
      },
      low: function () {
        v2833.ⲆΔᐃᐃⲆᐃᐃᐃΔ();
      },
      ΔⲆⵠΔᐃ: function () {
        game.ΔΔΔΔ.ΔⲆⵠΔᐃ();
      },
      ΔᐃⲆⵠⲆⵠⲆⵠⲆ: function () {
        game.ᐃⲆΔΔⵠ.ΔⲆⵠΔᐃ();
      },
      ⵠᐃⲆᐃΔΔΔⲆⲆ: function () {
        game.ΔΔΔⵠ.ΔⲆⵠΔᐃ();
      },
      ΔᐃΔΔⵠⲆᐃⲆⵠ: function () {
        user.ᐃΔΔΔⲆⵠⵠ.ⲆᐃⵠⵠⵠⲆΔ();
      },
      ᐃⵠᐃⲆⲆᐃⵠⵠⵠ: function () {
        user.ⵠⵠⵠⵠΔ.ⲆᐃⵠⵠⵠⲆΔ();
      },
      ᐃᐃΔⵠⵠ: function () {
        game.options.style.display = "none";
        game.options.open = vVVV14;
      },
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v409 - 235) + "px";
        this.style.top = Math.floor(v410 - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⵠⲆᐃᐃᐃⲆᐃⵠᐃ, vVVV142);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⲆⲆⵠΔⲆᐃᐃΔⵠ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, vVVV144);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, vVVVV142);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ᐃᐃΔⵠⵠ, false);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ΔⲆⵠΔᐃ, vV143);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⵠᐃⲆᐃΔΔΔⲆⲆ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ΔᐃⲆⵠⲆⵠⲆⵠⲆ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ΔᐃΔΔⵠⲆᐃⲆⵠ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠᐃⲆⲆᐃⵠⵠⵠ, false);
    this.ᐃⲆΔΔⵠ = {
      open: vVV145,
      ⵠᐃⲆⲆΔ: ⲆᐃΔⵠ.get("starve_cancel") ? ⲆᐃΔⵠ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ᐃⵠⵠⲆΔ: document.getElementById("cancel_agree").style,
      button: 0,
      ΔΔ: 0,
      ᐃᐃΔⵠⵠ: function () {
        game.ᐃⲆΔΔⵠ.style.display = "none";
        game.ᐃⲆΔΔⵠ.open = false;
      },
      ΔᐃⲆⵠⲆᐃⲆ: function () {
        if (user.ⵠⲆⲆᐃ.ⵠⲆⲆᐃᐃ) {
          v2837.ⲆΔⲆᐃⵠᐃⲆⵠᐃ();
        }
        game.ᐃⲆΔΔⵠ.ᐃᐃΔⵠⵠ();
      },
      ΔⲆⵠΔᐃ: function () {
        if (game.ᐃⲆΔΔⵠ.ⵠᐃⲆⲆΔ) {
          ⲆᐃΔⵠ.set("starve_cancel", "0");
          game.ᐃⲆΔΔⵠ.ᐃⵠⵠⲆΔ.display = "inline-block";
          game.options.ⲆΔᐃⲆΔⵠⵠ.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_cancel", "1");
          game.ᐃⲆΔΔⵠ.ᐃⵠⵠⲆΔ.display = "none";
          game.options.ⲆΔᐃⲆΔⵠⵠ.display = "inline-block";
        }
        game.ᐃⲆΔΔⵠ.ⵠᐃⲆⲆΔ = !game.ᐃⲆΔΔⵠ.ⵠᐃⲆⲆΔ;
      },
      ΔⵠΔⵠΔⵠⲆ: function () {
        if (this.ⵠᐃⲆⲆΔ) {
          this.style.display = "inline-block";
          this.open = vVVV623;
        } else {
          this.ΔᐃⲆⵠⲆᐃⲆ();
        }
      },
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v409 - 235) + "px";
        this.style.top = Math.floor(v410 - 130) + "px";
      }
    };
    this.ᐃⲆΔΔⵠ.id.oncontextmenu = function () {
      return vV142;
    };
    this.ᐃⲆΔΔⵠ.ᐃⵠⵠⲆΔ.display = "none";
    if (this.ᐃⲆΔΔⵠ.ⵠᐃⲆⲆΔ) {
      this.options.ⲆΔᐃⲆΔⵠⵠ.display = "inline-block";
    } else {
      this.options.ⲆΔᐃⲆΔⵠⵠ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃⲆΔΔⵠ.ΔᐃⲆⵠⲆᐃⲆ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃⲆΔΔⵠ.ᐃᐃΔⵠⵠ, vVVV14);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃⲆΔΔⵠ.ΔⲆⵠΔᐃ, false);
    document.addEventListener("cancel_sure_delete", function (p1625) {
      p1625.preventDefault();
    }, false);
    this.ⲆΔΔᐃᐃᐃᐃ = {
      ⵠᐃⲆⲆΔ: ⲆᐃΔⵠ.get("starve_aliasing") ? ⲆᐃΔⵠ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
      ΔⲆΔᐃᐃⲆᐃ: function (p1626) {
        document.getElementById("game_canvas").style.imageRendering = p1626 ? "pixelated" : "auto";
      },
      ΔⲆⵠΔᐃ: function () {
        if (game.ⲆΔΔᐃᐃᐃᐃ.ⵠᐃⲆⲆΔ === 0) {
          ⲆᐃΔⵠ.set("starve_aliasing", "1");
          game.ⲆΔΔᐃᐃᐃᐃ.ΔⲆΔᐃᐃⲆᐃ(1);
          game.options.ΔΔᐃΔⵠᐃⵠ.display = "inline-block";
        } else {
          ⲆᐃΔⵠ.set("starve_aliasing", "0");
          game.ⲆΔΔᐃᐃᐃᐃ.ΔⲆΔᐃᐃⲆᐃ(0);
          game.options.ΔΔᐃΔⵠᐃⵠ.display = "none";
        }
        game.ⲆΔΔᐃᐃᐃᐃ.ⵠᐃⲆⲆΔ = (game.ⲆΔΔᐃᐃᐃᐃ.ⵠᐃⲆⲆΔ + 1) % 2;
      }
    };
    if (this.ⲆΔΔᐃᐃᐃᐃ.ⵠᐃⲆⲆΔ === 1) {
      this.options.ΔΔᐃΔⵠᐃⵠ.display = "inline-block";
    } else {
      this.ⲆΔΔᐃᐃᐃᐃ.ΔⲆΔᐃᐃⲆᐃ(0);
      this.options.ΔΔᐃΔⵠᐃⵠ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⲆΔΔᐃᐃᐃᐃ.ΔⲆⵠΔᐃ, vVV1423);
    this.ᐃΔⵠᐃⲆ = {
      ⵠᐃⲆⲆΔ: ⲆᐃΔⵠ.get("starve_info_box") ? ⲆᐃΔⵠ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ⵠⲆⲆᐃ: 0,
      ΔⲆⵠΔᐃ: function () {
        if (game.ᐃΔⵠᐃⲆ.ⵠᐃⲆⲆΔ === 0) {
          ⲆᐃΔⵠ.set("starve_info_box", "1");
          game.options.ⲆⵠⵠⲆΔⲆⲆ.display = "inline-block";
        } else {
          ⲆᐃΔⵠ.set("starve_info_box", "0");
          game.options.ⲆⵠⵠⲆΔⲆⲆ.display = "none";
        }
        game.ᐃΔⵠᐃⲆ.ⵠᐃⲆⲆΔ = (game.ᐃΔⵠᐃⲆ.ⵠᐃⲆⲆΔ + 1) % 2;
      },
      ᐃᐃⲆⵠ: function (p1627, p1628, p1629) {
        if (p1627 && this.ⵠᐃⲆⲆΔ) {
          this.display = 1;
          this.id = p1629 === 0 ? p1628.id : v730[p1628.id].ΔΔⵠΔ;
          this.x = p1628.info.translate.x + 80;
          this.y = p1628.info.translate.y;
          this.ⵠⲆⲆᐃ = p1629;
        }
        return p1627;
      }
    };
    if (this.ᐃΔⵠᐃⲆ.ⵠᐃⲆⲆΔ === 1) {
      this.options.ⲆⵠⵠⲆΔⲆⲆ.display = "inline-block";
    } else {
      this.options.ⲆⵠⵠⲆΔⲆⲆ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ᐃΔⵠᐃⲆ.ΔⲆⵠΔᐃ, false);
    if (ⲆᐃΔⵠ.get("starve_scale")) {
      v417 = Number(ⲆᐃΔⵠ.get("starve_scale"));
      document.getElementById("input_ratio").value = v417;
      v417 *= v481 / v482;
      f55();
    }
    this.ΔΔΔᐃⵠⵠᐃ = function () {
      ⲆᐃΔⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      v417 = v481 / v482 * document.getElementById("input_ratio").value;
      f55();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ΔΔΔᐃⵠⵠᐃ, false);
    this.ΔΔΔΔ = {
      open: false,
      ⵠᐃⲆⲆΔ: ⲆᐃΔⵠ.get("starve_safe") && ⲆᐃΔⵠ.get("starve_safe") === "0" ? 0 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ᐃⵠⵠⲆΔ: document.getElementById("agree").style,
      button: 0,
      ΔΔ: 0,
      ᐃᐃΔⵠⵠ: function () {
        game.ΔΔΔΔ.style.display = "none";
        game.ΔΔΔΔ.open = vVV142;
      },
      all: function () {
        if (!user.ᐃΔⵠⵠᐃ.wait) {
          if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && user.ⵠⲆⲆᐃ.id < 0 && !user.ⵠΔⵠⵠΔ.enabled) {
            v2837.ΔᐃⵠΔᐃΔⲆⵠⲆ(game.ΔΔΔΔ.button);
          }
          game.ΔΔΔΔ.ᐃᐃΔⵠⵠ();
        }
      },
      ⲆⲆⵠ: function () {
        if (user.ⵠⲆⲆᐃ.ᐃΔⲆᐃᐃⵠΔ && !user.ᐃΔⵠⵠᐃ.wait) {
          if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && user.ⵠⲆⲆᐃ.id < 0 && !user.ⵠΔⵠⵠΔ.enabled) {
            v2837.ⲆΔⵠᐃⲆᐃⵠⵠⵠ(game.ΔΔΔΔ.button);
          }
          game.ΔΔΔΔ.ᐃᐃΔⵠⵠ();
        }
      },
      ᐃⵠⲆᐃᐃᐃⵠΔΔ: function () {
        if (!user.ᐃΔⵠⵠᐃ.wait) {
          if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && user.ⵠⲆⲆᐃ.id < 0 && !user.ⵠΔⵠⵠΔ.enabled) {
            v2837.ΔⲆᐃΔᐃⲆᐃⲆᐃ(game.ΔΔΔΔ.button);
          }
          game.ΔΔΔΔ.ᐃᐃΔⵠⵠ();
        }
      },
      ΔⲆⵠΔᐃ: function () {
        if (game.ΔΔΔΔ.ⵠᐃⲆⲆΔ) {
          ⲆᐃΔⵠ.set("starve_safe", "0");
          game.ΔΔΔΔ.ᐃⵠⵠⲆΔ.display = "inline-block";
          game.options.ᐃⵠⵠⲆΔ.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_safe", "1");
          game.ΔΔΔΔ.ᐃⵠⵠⲆΔ.display = "none";
          game.options.ᐃⵠⵠⲆΔ.display = "inline-block";
        }
        game.ΔΔΔΔ.ⵠᐃⲆⲆΔ = !game.ΔΔΔΔ.ⵠᐃⲆⲆΔ;
      },
      ΔⵠΔⵠΔⵠⲆ: function (p1630) {
        this.button = p1630;
        document.getElementById("item_to_del").src = ᐃᐃ[v591[p1630].Δⵠ][0].ⲆⵠΔᐃⵠ === undefined ? ᐃᐃ[v591[p1630].Δⵠ][0].src : ᐃᐃ[v591[p1630].Δⵠ][0].ⲆⵠΔᐃⵠ;
        if (v591[p1630].ⲆⲆⵠ && !user.ⲆΔᐃⲆΔ && user.ⵠⲆⲆᐃ.ᐃΔⲆᐃᐃⵠΔ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⵠᐃⲆⲆΔ) {
          this.style.display = "inline-block";
          this.open = vVVV6;
        } else {
          this.all();
        }
      },
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v409 - 235) + "px";
        this.style.top = Math.floor(v410 - 175) + "px";
      }
    };
    this.ΔΔΔΔ.ᐃⵠⵠⲆΔ.display = "none";
    if (this.ΔΔΔΔ.ⵠᐃⲆⲆΔ) {
      this.options.ᐃⵠⵠⲆΔ.display = "inline-block";
    } else {
      this.options.ᐃⵠⵠⲆΔ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ΔΔΔΔ.ᐃⵠⲆᐃᐃᐃⵠΔΔ, vVV14);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ΔΔΔΔ.all, vVV1422);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ΔΔΔΔ.ⲆⲆⵠ, vVVV14);
    document.getElementById("no_delete").addEventListener("mouseup", this.ΔΔΔΔ.ᐃᐃΔⵠⵠ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ΔΔΔΔ.ΔⲆⵠΔᐃ, false);
    this.ᐃᐃᐃᐃⲆ = {
      open: false,
      ⵠⵠⲆⲆⵠⵠⵠ: -1,
      button: f431(60, 60, 0, ᐃᐃ[811]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v409 - 300) + "px";
        this.style.top = Math.floor(v410 - 215) + "px";
      },
      ᐃᐃΔⵠⵠ: function () {
        game.ᐃᐃᐃᐃⲆ.open = false;
        game.ᐃᐃᐃᐃⲆ.style.display = "none";
      },
      select: function () {
        game.ᐃᐃᐃᐃⲆ.open = !game.ᐃᐃᐃᐃⲆ.open;
        if (game.ᐃᐃᐃᐃⲆ.open) {
          game.ᐃᐃᐃᐃⲆ.style.display = "inline-block";
        } else {
          game.ᐃᐃᐃᐃⲆ.style.display = "none";
        }
      },
      ⵠΔⵠᐃΔᐃᐃ: function () {
        if (game.ᐃᐃᐃᐃⲆ.ⵠⵠⲆⲆⵠⵠⵠ >= 0) {
          v2837.ⵠⲆⵠᐃΔⲆᐃᐃΔ(game.ᐃᐃᐃᐃⲆ.ⵠⵠⲆⲆⵠⵠⵠ);
          game.ᐃᐃᐃᐃⲆ.ᐃᐃΔⵠⵠ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + game.ᐃᐃᐃᐃⲆ.ⵠⵠⲆⲆⵠⵠⵠ);
          }
        }
      },
      ΔᐃΔⲆⵠ: function () {
        var v2539 = user.ᐃᐃᐃᐃⲆ.value;
        document.getElementById("points_bank").innerHTML = Δᐃᐃ.ΔⲆΔⲆΔⲆⲆ(v2539) + " points";
        for (var v2540 = 0; v2540 < v2253.length; v2540++) {
          if (v2253[v2540].ⲆΔⲆΔᐃ > v2539) {
            document.getElementById("starter" + (v2540 + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (v2540 + 1)).style.opacity = "1";
          }
        }
        for (v2540 = 1; v2540 < 13; v2540++) {
          document.getElementById("inv_shop" + v2540).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + v2540).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ᐃⵠΔΔΔΔᐃᐃⵠ: function () {
        if (this.id.length > 8) {
          var vNumber = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          vNumber = Number(this.id.charAt(7));
        }
        var v2541 = v2253[vNumber - 1];
        if (user.ᐃᐃᐃᐃⲆ.value >= v2541.ⲆΔⲆΔᐃ) {
          game.ᐃᐃᐃᐃⲆ.ⵠⵠⲆⲆⵠⵠⵠ = vNumber;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          game.ᐃᐃᐃᐃⲆ.ⵠⵠⲆⲆⵠⵠⵠ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        v2541 = v2541.items;
        for (var v2542 = 1, v2543 = 1; v2542 < v2541.length + 1; v2542++) {
          if (v2541[v2542 - 1][1] !== 47) {
            document.getElementById("inv_shop" + v2543).style.display = "inline-block";
            document.getElementById("inv_shop" + v2543).src = ᐃᐃ[v591[v2541[v2542 - 1][1]].Δⵠ][0].ⲆⵠΔᐃⵠ === undefined ? ᐃᐃ[v591[v2541[v2542 - 1][1]].Δⵠ][0].src : ᐃᐃ[v591[v2541[v2542 - 1][1]].Δⵠ][0].ⲆⵠΔᐃⵠ;
            document.getElementById("amount_shop" + v2543).innerHTML = "" + v2541[v2542 - 1][0];
            v2543++;
          }
        }
        for (; v2543 < 13; v2543++) {
          document.getElementById("inv_shop" + v2543).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + v2543).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ᐃᐃᐃᐃⲆ.ᐃᐃΔⵠⵠ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ᐃᐃᐃᐃⲆ.ⵠΔⵠᐃΔᐃᐃ, vVV1422);
    for (v2538 = 1; v2538 < 11; v2538++) {
      document.getElementById("starter" + v2538).addEventListener("mouseup", this.ᐃᐃᐃᐃⲆ.ᐃⵠΔΔΔΔᐃᐃⵠ, false);
    }
    this.ΔΔΔⵠ = {
      open: false,
      ⵠᐃⲆⲆΔ: ⲆᐃΔⵠ.get("starve_quests") ? ⲆᐃΔⵠ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: f431(60, 60, 0, ᐃᐃ[1004]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(v409 - 420) + "px";
        this.style.top = Math.floor(v410 - 270) + "px";
      },
      ᐃᐃΔⵠⵠ: function () {
        game.ΔΔΔⵠ.style.display = "none";
        game.ΔΔΔⵠ.open = vVV145;
      },
      select: function () {
        game.ΔΔΔⵠ.open = !game.ΔΔΔⵠ.open;
        if (game.ΔΔΔⵠ.open) {
          game.ΔΔΔⵠ.style.display = "inline-block";
        } else {
          game.ΔΔΔⵠ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var v2544 = 0; v2544 < v2259.length; v2544++) {
          this.list[v2544] = 1;
          document.getElementById("timeremain_" + v2544).style.display = "inline-block";
          document.getElementById("time_finished_" + v2544).style.display = "none";
          document.getElementById("claim_reward_" + v2544).style.display = "none";
        }
      },
      ⲆⵠΔⵠⲆⵠⲆ: 0,
      ⵠⵠᐃΔⲆⲆⲆ: 0,
      ᐃᐃᐃΔⲆᐃΔᐃⲆ: function () {
        if (game.ΔΔΔⵠ.open) {
          var v2545 = new Date().getTime();
          if (!(v2545 - this.ⲆⵠΔⵠⲆⵠⲆ < 1000)) {
            this.ⲆⵠΔⵠⲆⵠⲆ = v2545;
            for (var v2546 = 0; v2546 < v2259.length; v2546++) {
              if (game.ΔΔΔⵠ.list[v2546]) {
                var v2547 = v2259[v2546].time - (v2545 - world.ⲆᐃⲆⵠᐃ.ΔᐃΔⲆⵠ + game.ΔΔΔⵠ.ⵠⵠᐃΔⲆⲆⲆ);
                document.getElementById("timeremain_" + v2546).innerHTML = v2547 > 960000 ? Math.floor(v2547 / 480000) + " days" : v2547 > 480000 ? Math.floor(v2547 / 480000) + " day" : v2547 > 60000 ? Math.floor(v2547 / 60000) + " min" : Math.floor(v2547 / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (p1631) {
        for (var v2548 = 0; v2548 < p1631.length; v2548++) {
          if (p1631[v2548] != 1) {
            game.ΔΔΔⵠ.ⲆᐃⵠΔⵠΔᐃ(v2548, p1631[v2548]);
          }
        }
      },
      ⲆᐃⵠΔⵠΔᐃ: function (p1632, p1633) {
        if (p1633 === 3 && (p1632 === 11 || p1632 === 12)) {
          user.ᐃⵠⲆⲆ.ΔΔΔⲆⲆᐃⲆ(0, 1);
          game.ⵠⲆΔᐃⲆᐃᐃ();
        }
        document.getElementById("timeremain_" + p1632).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (p1633 > 1) {
          document.getElementById("time_finished_" + p1632).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + p1632).style.display = "none";
        } else if (p1633 === 0) {
          document.getElementById("time_finished_" + p1632).innerHTML = "FAILED";
          document.getElementById("timeremain_" + p1632).style.display = "none";
        }
        document.getElementById("claim_reward_" + p1632).style.display = p1633 === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + p1632).style.display = "inline";
        game.ΔΔΔⵠ.list[p1632] = 0;
      },
      modify: function (p1634, p1635) {
        game.ΔΔΔⵠ.ⲆᐃⵠΔⵠΔᐃ(p1634, p1635);
        if (game.ΔΔΔⵠ.ⵠᐃⲆⲆΔ) {
          game.ΔΔΔⵠ.open = vVVV624;
          game.ΔΔΔⵠ.style.display = "inline-block";
        }
      },
      ΔⲆⵠΔᐃ: function () {
        if (game.ΔΔΔⵠ.ⵠᐃⲆⲆΔ) {
          ⲆᐃΔⵠ.set("starve_quests", "0");
          game.options.Δⵠᐃⵠᐃᐃⵠ.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_quests", "1");
          game.options.Δⵠᐃⵠᐃᐃⵠ.display = "inline-block";
        }
        game.ΔΔΔⵠ.ⵠᐃⲆⲆΔ = !game.ΔΔΔⵠ.ⵠᐃⲆⲆΔ;
      },
      ΔⵠⲆΔᐃⲆⲆΔⵠ: function () {
        var vNumber2 = Number(this.id.charAt(13));
        var vNumber3 = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && vNumber3 >= 0 && vNumber3 <= 9) {
          vNumber2 = vNumber2 * 10 + vNumber3;
        }
        v2837.ᐃⲆⵠΔΔᐃᐃⲆΔ(vNumber2);
      }
    };
    if (this.ΔΔΔⵠ.ⵠᐃⲆⲆΔ) {
      this.options.Δⵠᐃⵠᐃᐃⵠ.display = "inline-block";
    } else {
      this.options.Δⵠᐃⵠᐃᐃⵠ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ΔΔΔⵠ.ᐃᐃΔⵠⵠ, vVV1423);
    for (v2538 = 0; v2259.length > v2538; v2538++) {
      document.getElementById("claim_reward_" + v2538).addEventListener("mouseup", this.ΔΔΔⵠ.ΔⵠⲆΔᐃⲆⲆΔⵠ, false);
    }
    function f487(p1636) {
      document.getElementById("img_" + p1636).addEventListener("mousedown", function () {
        game.ⲆΔᐃᐃᐃ.list.ⲆᐃⵠΔⲆⲆᐃΔⵠ(p1636 - 1);
      }, false);
    }
    this.ⲆΔᐃᐃᐃ = {
      open: false,
      button: f431(60, 60, 0, ᐃᐃ[957]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ⲆⲆⵠΔⲆ: [],
        ᐃᐃᐃⲆⵠᐃᐃ: 0,
        ⵠᐃᐃ: function () {
          this.style.left = Math.floor(v409 - 335) + "px";
          this.style.top = Math.floor(v410 - 215) + "px";
        },
        ᐃᐃΔⵠⵠ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          game.ⲆΔᐃᐃᐃ.open = false;
        },
        ΔⵠⲆⵠⲆᐃΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⲆᐃⵠΔⲆⲆᐃΔⵠ: function (p1637) {
          if ((v2549 = this.ⲆⲆⵠΔⲆ[p1637]).ΔⲆΔ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (v2549.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (v2549.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (v2549.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var v2549 = v2549.r, v2550 = (p1637 = 0, 1); p1637 < v2549.length; p1637++) {
            document.getElementById("inv" + v2550).style.display = "inline-block";
            document.getElementById("inv" + v2550).src = ᐃᐃ[v591[v2549[p1637][0]].Δⵠ][0].ⲆⵠΔᐃⵠ === undefined ? ᐃᐃ[v591[v2549[p1637][0]].Δⵠ][0].src : ᐃᐃ[v591[v2549[p1637][0]].Δⵠ][0].ⲆⵠΔᐃⵠ;
            document.getElementById("numb" + v2550).innerHTML = "" + v2549[p1637][1];
            v2550++;
          }
          for (; v2550 < 6; v2550++) {
            document.getElementById("inv" + v2550).style.display = "none";
            document.getElementById("numb" + v2550).innerHTML = "";
          }
        },
        ⵠΔΔΔΔⵠⲆΔΔ: function (p1638) {
          const v2551 = {};
          for (let v2552 in p1638) {
            const v2553 = p1638[v2552];
            v2551[v2553.id] = v2553;
          }
          const v2554 = new vWindow.Set(p1638.map(function (p1639) {
            return p1639.id;
          }));
          const v2555 = [];
          const v2556 = [];
          for (const v2557 of p1638) {
            let vVVVV144 = vVVV144;
            for (let v2558 = 0; v2558 < v2557.r.length; v2558++) {
              const v2559 = v2557.r[v2558][0];
              if (v2554.has(v2559)) {
                vVVVV144 = vVVVV63;
                break;
              }
            }
            if (vVVVV144) {
              v2556.push(v2557);
            } else {
              v2555.push(v2557);
            }
          }
          p1638 = v2555.concat(v2556);
          const v2560 = {};
          for (let v2561 in p1638) {
            const v2562 = p1638[v2561];
            v2560[v2562.id] = new vWindow.Set();
            for (let v2563 = 0; v2563 < v2562.r.length; v2563++) {
              const v2564 = v2562.r[v2563][0];
              if (v2551[v2564]) {
                v2560[v2562.id].add(v2564);
              }
            }
          }
          const v2565 = new vWindow.Set();
          const v2566 = new vWindow.Set();
          const v2567 = [];
          function f488(p1640) {
            if (v2566.has(p1640)) {
              return p1638;
            }
            if (!v2565.has(p1640)) {
              v2566.add(p1640);
              for (const v2568 of v2560[p1640]) {
                f488(v2568);
              }
              v2566.delete(p1640);
              v2565.add(p1640);
              v2567.push(v2551[p1640]);
            }
          }
          for (let v2569 in p1638) {
            const v2570 = p1638[v2569];
            if (!v2565.has(v2570.id)) {
              f488(v2570.id);
            }
          }
          return v2567;
        },
        select: function (p1641) {
          this.ᐃᐃᐃⲆⵠᐃᐃ = p1641;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          let v2571 = [];
          for (var v2572 = 0; v2572 < v730.length; v2572++) {
            var v2573 = v730[v2572];
            if (v2573 != null && p1641 === v2573.ᐃⵠⲆ) {
              v2571.push(v730[v2572]);
            }
          }
          v2571 = this.ⵠΔΔΔΔⵠⲆΔΔ(v2571);
          v2572 = 0;
          var v2574 = 0;
          for (; v2572 < v2571.length; v2572++) {
            const v2575 = v2571[v2572];
            this.ⲆⲆⵠΔⲆ[v2574] = v2571[v2572];
            v2574++;
            document.getElementById("img_" + v2574).style.display = "inline-block";
            document.getElementById("img_" + v2574).src = ᐃᐃ[v591[v2575.ΔΔⵠΔ].Δⵠ][0].ⲆⵠΔᐃⵠ === undefined ? ᐃᐃ[v591[v2575.ΔΔⵠΔ].Δⵠ][0].src : ᐃᐃ[v591[v2575.ΔΔⵠΔ].Δⵠ][0].ⲆⵠΔᐃⵠ;
          }
          for (v2574++; v2574 < 91; v2574++) {
            document.getElementById("img_" + v2574).style.display = "none";
          }
        }
      },
      ⲆᐃⵠⲆᐃᐃᐃ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ⵠᐃᐃ: function () {
          this.style.left = Math.floor(v409 - 285) + "px";
          this.style.top = Math.floor(v410 - 170) + "px";
        },
        ᐃᐃΔⵠⵠ: function () {
          document.getElementById("home_craft").style.display = "none";
          game.ⲆΔᐃᐃᐃ.open = vVVVV1422;
        }
      },
      ᐃΔΔΔᐃⲆⵠΔᐃ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⲆΔᐃᐃᐃ.ⲆᐃⵠⲆᐃᐃᐃ.ᐃᐃΔⵠⵠ, vVV142);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⲆΔᐃᐃᐃ.list.ᐃᐃΔⵠⵠ, vVV14);
    document.getElementById("backhome").addEventListener("mouseup", this.ⲆΔᐃᐃᐃ.list.ΔⵠⲆⵠⲆᐃΔ, false);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      game.ⲆΔᐃᐃᐃ.list.select(2);
    }, vVVVV1423);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      game.ⲆΔᐃᐃᐃ.list.select(1);
    }, vVVVV1423);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      game.ⲆΔᐃᐃᐃ.list.select(0);
    }, vVVV14);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      game.ⲆΔᐃᐃᐃ.list.select(3);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      game.ⲆΔᐃᐃᐃ.list.select(4);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      game.ⲆΔᐃᐃᐃ.list.select(5);
    }, false);
    for (let v2576 = 1; v2576 <= 90; v2576++) {
      f487(v2576);
    }
    this.ΔΔΔⲆⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      ΔᐃⵠⲆᐃⲆⲆ: {
        y: -1,
        x: -1
      },
      players: [],
      focus: function (p1642) {
        var v2577 = this.translate.y + (user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ.length > 0 ? -120 : -50);
        if (p1642.x > this.translate.x && p1642.x < this.translate.x + 193 && p1642.y > v2577 && p1642.y < v2577 + 193) {
          this.ΔᐃⵠⲆᐃⲆⲆ.x = p1642.x - this.translate.x;
          this.ΔᐃⵠⲆᐃⲆⲆ.y = p1642.y - v2577;
        }
      }
    };
    this.ΔΔΔᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      Δⵠ: ᐃᐃ[388],
      ⵠΔΔ: document.createElement("canvas")
    };
    this.ΔΔΔᐃ.ⵠΔΔ.width = this.ΔΔΔᐃ.Δⵠ.width;
    this.ΔΔΔᐃ.ⵠΔΔ.height = this.ΔΔΔᐃ.Δⵠ.height;
    this.ΔΔΔᐃ.Δ = this.ΔΔΔᐃ.ⵠΔΔ.getContext("2d");
    this.ᐃⵠᐃⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      Δⵠ: ᐃᐃ[377],
      ⲆΔᐃΔ: f311,
      y: 0
    };
    var v2578 = vWindow.document.createElement("div");
    this.ⵠᐃΔᐃⲆᐃΔ = function () {
      ᐃⵠⲆⵠᐃ = document.getElementById("team_box");
      ᐃⵠⲆⵠᐃ.innerHTML = "";
      ᐃⵠⲆⵠᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((v2578.innerText = world.players[user.ΔΔⲆⲆⲆ[0]].ᐃⲆᐃⵠⲆ) && v2578.innerHTML) + "</div";
      for (var v2579 = 1; v2579 < user.ΔΔⲆⲆⲆ.length; v2579++) {
        ᐃⵠⲆⵠᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((v2578.innerText = world.players[user.ΔΔⲆⲆⲆ[v2579]].ᐃⲆᐃⵠⲆ) && v2578.innerHTML) + "</div></div>";
      }
      ᐃⵠⲆⵠᐃ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ᐃⵠⲆⵠᐃ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", v2837.ⵠᐃΔᐃⲆᐃΔ, vVVVV142);
    };
    this.ⵠΔᐃΔᐃⲆⵠΔⵠ = function () {
      ᐃⵠⲆⵠᐃ = document.getElementById("team_box");
      ᐃⵠⲆⵠᐃ.innerHTML = "";
      ᐃⵠⲆⵠᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((v2578.innerText = world.players[user.ΔΔⲆⲆⲆ[0]].ᐃⲆᐃⵠⲆ) && v2578.innerHTML) + "</div";
      for (var v2580 = 1; v2580 < user.ΔΔⲆⲆⲆ.length; v2580++) {
        ᐃⵠⲆⵠᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((v2578.innerText = world.players[user.ΔΔⲆⲆⲆ[v2580]].ᐃⲆᐃⵠⲆ) && v2578.innerHTML) + "</div></div>";
      }
      ᐃⵠⲆⵠᐃ.innerHTML += "</div>";
      ᐃⵠⲆⵠᐃ.style.display = "inline-block";
    };
    this.ΔᐃⲆⲆⲆⵠⲆⲆⵠ = function () {
      ᐃⵠⲆⵠᐃ = document.getElementById("team_box");
      ᐃⵠⲆⵠᐃ.innerHTML = "";
      ᐃⵠⲆⵠᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((v2578.innerText = world.players[user.ΔΔⲆⲆⲆ[0]].ᐃⲆᐃⵠⲆ) && v2578.innerHTML) + "</div";
      for (var v2581 = 1; v2581 < user.ΔΔⲆⲆⲆ.length; v2581++) {
        ᐃⵠⲆⵠᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((v2578.innerText = world.players[user.ΔΔⲆⲆⲆ[v2581]].ᐃⲆᐃⵠⲆ) && v2578.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + v2581 + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (user.ⲆΔⵠΔᐃ.lock === 0) {
        ᐃⵠⲆⵠᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ᐃⵠⲆⵠᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", v2837.ΔᐃⵠⲆᐃⵠΔΔⵠ, false);
      ᐃⵠⲆⵠᐃ.style.display = "inline-block";
      for (v2581 = 1; v2581 < user.ΔΔⲆⲆⲆ.length; v2581++) {
        switch (v2581) {
          case 1:
            document.getElementById("eject_member" + v2581).addEventListener("click", function () {
              v2837.ⲆⵠⲆΔΔⵠⵠ(1);
            }, vVVVVV142);
            break;
          case 2:
            document.getElementById("eject_member" + v2581).addEventListener("click", function () {
              v2837.ⲆⵠⲆΔΔⵠⵠ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + v2581).addEventListener("click", function () {
              v2837.ⲆⵠⲆΔΔⵠⵠ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + v2581).addEventListener("click", function () {
              v2837.ⲆⵠⲆΔΔⵠⵠ(4);
            }, vVVVV1423);
            break;
          case 5:
            document.getElementById("eject_member" + v2581).addEventListener("click", function () {
              v2837.ⲆⵠⲆΔΔⵠⵠ(5);
            }, vV14);
            break;
          case 6:
            document.getElementById("eject_member" + v2581).addEventListener("click", function () {
              v2837.ⲆⵠⲆΔΔⵠⵠ(6);
            }, vVV14);
            break;
          case 7:
            document.getElementById("eject_member" + v2581).addEventListener("click", function () {
              v2837.ⲆⵠⲆΔΔⵠⵠ(7);
            }, vVVVV142);
            break;
          case 8:
            document.getElementById("eject_member" + v2581).addEventListener("click", function () {
              v2837.ⲆⵠⲆΔΔⵠⵠ(8);
            }, false);
        }
      }
    };
    this.Δᐃᐃᐃⵠ = [];
    this.Δᐃᐃᐃⵠ[2] = {
      button: f431(60, 60, 0, ᐃᐃ[721]),
      action: this.ⵠᐃΔᐃⲆᐃΔ
    };
    this.Δᐃᐃᐃⵠ[3] = {
      button: f431(60, 60, 0, ᐃᐃ[721]),
      action: v2837.ⲆᐃΔⲆΔΔᐃΔⵠ
    };
    this.Δᐃᐃᐃⵠ[0] = {
      button: f431(60, 60, 0, ᐃᐃ[722]),
      action: this.ΔᐃⲆⲆⲆⵠⲆⲆⵠ
    };
    this.Δᐃᐃᐃⵠ[1] = {
      button: f431(60, 60, 0, ᐃᐃ[726]),
      action: this.ⵠΔᐃΔᐃⲆⵠΔⵠ
    };
    this.Δᐃᐃᐃⵠ[4] = {
      button: f431(60, 60, 0, ᐃᐃ[725]),
      action: function () {}
    };
    this.ΔΔΔⲆΔ = -1;
    this.ⵠⵠⲆⲆⵠⲆⵠ = f431(60, 60, 0, ᐃᐃ[972]);
    this.ⵠⵠⵠΔΔⲆⲆ = f431(60, 60, 0, ᐃᐃ[973]);
    this.ᐃᐃⵠᐃⵠᐃⲆ = f431(60, 60, 0, ᐃᐃ[877]);
    this.ᐃⲆⵠⵠΔΔⲆ = f431(60, 60, 0, ᐃᐃ[876]);
    this.ⲆⵠⲆᐃⵠΔΔ = f431(60, 60, 0, ᐃᐃ[877]);
    this.ΔⵠⲆⲆⲆΔⲆ = f431(60, 60, 0, ᐃᐃ[427]);
    this.ⵠΔⲆⲆΔΔᐃ = f431(60, 60, 0, ᐃᐃ[426]);
    this.ᐃⲆⲆΔΔᐃⵠ = f431(60, 60, 0, ᐃᐃ[408]);
    this.ᐃⲆⲆΔⲆᐃᐃ = f431(60, 60, 0, ᐃᐃ[409]);
    this.ⵠⲆⲆⲆᐃᐃᐃ = f431(60, 60, 0, ᐃᐃ[529]);
    this.ⲆΔⲆᐃΔᐃᐃ = f431(60, 60, 0, ᐃᐃ[1214]);
    this.ᐃᐃᐃⲆⲆΔᐃ = f431(60, 60, 0, ᐃᐃ[1484]);
    this.ΔᐃΔΔΔⵠⲆ = f431(60, 60, 0, ᐃᐃ[1722]);
    this.ⲆΔⲆⵠⵠΔᐃ = f431(60, 60, 0, ᐃᐃ[1724]);
    this.ⲆⲆᐃⲆᐃⲆⲆ = f431(60, 60, 0, ᐃᐃ[1726]);
    this.ⲆⵠⵠᐃⵠⵠΔ = f431(60, 60, 0, ᐃᐃ[1728]);
    this.ΔⵠⵠΔᐃΔⲆ = f431(60, 60, 0, ᐃᐃ[1730]);
    this.ⵠⲆⲆⵠᐃᐃᐃ = f431(60, 60, 0, ᐃᐃ[1732]);
    this.ⵠΔⲆᐃⲆⲆⲆ = f431(60, 60, 0, ᐃᐃ[1734]);
    this.ⲆⲆΔΔⲆᐃΔ = f431(60, 60, 0, ᐃᐃ[1736]);
    this.ⲆᐃᐃᐃⵠⲆⲆ = f431(60, 60, 0, ᐃᐃ[523]);
    this.ᐃΔΔⲆΔᐃᐃ = f431(60, 60, 0, ᐃᐃ[674]);
    this.ᐃⵠᐃᐃᐃᐃⵠ = f431(60, 60, 0, ᐃᐃ[673]);
    this.ⲆⵠⵠΔᐃΔΔ = f431(60, 60, 0, ᐃᐃ[676]);
    this.ΔⲆᐃᐃⲆ = f431(120, 120, 0, ᐃᐃ[242]);
    this.ΔⲆᐃᐃⲆ.info.translate.x = 10;
    this.ΔⲆᐃᐃⲆ.info.translate.y = 10;
    this.ⵠΔᐃ = [];
    this.ⵠΔᐃ[0] = f431(68, 68, 0, ᐃᐃ[451], 3);
    this.ⵠΔᐃ[0].id = 0;
    this.ⵠΔᐃ[1] = f431(68, 68, 0, ᐃᐃ[452], 3);
    this.ⵠΔᐃ[1].id = 1;
    this.ⵠΔᐃ[199] = f431(68, 68, 0, ᐃᐃ[453], 3);
    this.ⵠΔᐃ[199].id = 199;
    this.ⵠΔᐃ[200] = f431(68, 68, 0, ᐃᐃ[454], 3);
    this.ⵠΔᐃ[200].id = 200;
    this.ⵠΔᐃ[201] = f431(68, 68, 0, ᐃᐃ[379], 3);
    this.ⵠΔᐃ[201].id = 201;
    this.ⵠΔᐃ[343] = f431(68, 68, 0, ᐃᐃ[1483], 3);
    this.ⵠΔᐃ[343].id = 343;
    this.ⵠΔᐃ[202] = f431(68, 68, 0, ᐃᐃ[380], 3);
    this.ⵠΔᐃ[202].id = 202;
    this.ⵠΔᐃ[203] = f431(68, 68, 0, ᐃᐃ[381], 3);
    this.ⵠΔᐃ[203].id = 203;
    this.ⵠΔᐃ[3] = f431(68, 68, 0, ᐃᐃ[382], 3);
    this.ⵠΔᐃ[3].id = 3;
    this.ⵠΔᐃ[4] = f431(68, 68, 0, ᐃᐃ[455], 3);
    this.ⵠΔᐃ[4].id = 4;
    this.ⵠΔᐃ[5] = f431(68, 68, 0, ᐃᐃ[456], 3);
    this.ⵠΔᐃ[5].id = 5;
    this.ⵠΔᐃ[103] = f431(68, 68, 0, ᐃᐃ[1080], 3);
    this.ⵠΔᐃ[103].id = 103;
    this.ⵠΔᐃ[6] = f431(68, 68, 0, ᐃᐃ[457], 3);
    this.ⵠΔᐃ[6].id = 6;
    this.ⵠΔᐃ[204] = f431(68, 68, 0, ᐃᐃ[383], 3);
    this.ⵠΔᐃ[204].id = 204;
    this.ⵠΔᐃ[205] = f431(68, 68, 0, ᐃᐃ[469], 3);
    this.ⵠΔᐃ[205].id = 205;
    this.ⵠΔᐃ[206] = f431(68, 68, 0, ᐃᐃ[459], 3);
    this.ⵠΔᐃ[206].id = 206;
    this.ⵠΔᐃ[264] = f431(68, 68, 0, ᐃᐃ[460], 3);
    this.ⵠΔᐃ[264].id = 264;
    this.ⵠΔᐃ[262] = f431(68, 68, 0, ᐃᐃ[461], 3);
    this.ⵠΔᐃ[262].id = 262;
    this.ⵠΔᐃ[8] = f431(68, 68, 0, ᐃᐃ[384], 3);
    this.ⵠΔᐃ[8].id = 8;
    this.ⵠΔᐃ[208] = f431(68, 68, 0, ᐃᐃ[462], 3);
    this.ⵠΔᐃ[208].id = 208;
    this.ⵠΔᐃ[207] = f431(68, 68, 0, ᐃᐃ[385], 3);
    this.ⵠΔᐃ[207].id = 207;
    this.ⵠΔᐃ[209] = f431(68, 68, 0, ᐃᐃ[386], 3);
    this.ⵠΔᐃ[209].id = 209;
    this.ⵠΔᐃ[297] = f431(68, 68, 0, ᐃᐃ[463], 3);
    this.ⵠΔᐃ[297].id = 297;
    this.ⵠΔᐃ[263] = f431(68, 68, 0, ᐃᐃ[464], 3);
    this.ⵠΔᐃ[263].id = 263;
    this.ⵠΔᐃ[265] = f431(68, 68, 0, ᐃᐃ[465], 3);
    this.ⵠΔᐃ[265].id = 265;
    this.ⵠΔᐃ[266] = f431(68, 68, 0, ᐃᐃ[466], 3);
    this.ⵠΔᐃ[266].id = 266;
    this.ⵠΔᐃ[267] = f431(68, 68, 0, ᐃᐃ[467], 3);
    this.ⵠΔᐃ[267].id = 267;
    this.ⵠΔᐃ[268] = f431(68, 68, 0, ᐃᐃ[468], 3);
    this.ⵠΔᐃ[268].id = 268;
    this.ⵠΔᐃ[269] = f431(68, 68, 0, ᐃᐃ[470], 3);
    this.ⵠΔᐃ[269].id = 269;
    this.ⵠΔᐃ[270] = f431(68, 68, 0, ᐃᐃ[493], 3);
    this.ⵠΔᐃ[270].id = 270;
    this.ⵠΔᐃ[271] = f431(68, 68, 0, ᐃᐃ[494], 3);
    this.ⵠΔᐃ[271].id = 271;
    this.ⵠΔᐃ[272] = f431(68, 68, 0, ᐃᐃ[495], 3);
    this.ⵠΔᐃ[272].id = 272;
    this.ⵠΔᐃ[2] = f431(68, 68, 0, ᐃᐃ[497], 3);
    this.ⵠΔᐃ[2].id = 2;
    this.ⵠΔᐃ[347] = f431(68, 68, 0, ᐃᐃ[1491], 3);
    this.ⵠΔᐃ[347].id = 347;
    this.ⵠΔᐃ[276] = f431(68, 68, 0, ᐃᐃ[505], 3);
    this.ⵠΔᐃ[276].id = 276;
    this.ⵠΔᐃ[353] = f431(68, 68, 0, ᐃᐃ[1753], 3);
    this.ⵠΔᐃ[353].id = 353;
    this.ⵠΔᐃ[351] = f431(68, 68, 0, ᐃᐃ[1749], 3);
    this.ⵠΔᐃ[351].id = 351;
    this.ⵠΔᐃ[332] = f431(68, 68, 0, ᐃᐃ[1344], 3);
    this.ⵠΔᐃ[332].id = 332;
    this.ⵠΔᐃ[341] = f431(68, 68, 0, ᐃᐃ[1346], 3);
    this.ⵠΔᐃ[341].id = 341;
    this.ⵠΔᐃ[342] = f431(68, 68, 0, ᐃᐃ[1348], 3);
    this.ⵠΔᐃ[342].id = 342;
    this.ⵠΔᐃ[352] = f431(68, 68, 0, ᐃᐃ[1464], 3);
    this.ⵠΔᐃ[352].id = 352;
    this.ⵠΔᐃ[344] = f431(68, 68, 0, ᐃᐃ[1485], 3);
    this.ⵠΔᐃ[344].id = 344;
    this.ⵠΔᐃ[10] = f431(68, 68, 0, ᐃᐃ[498], 3);
    this.ⵠΔᐃ[10].id = 10;
    this.ⵠΔᐃ[273] = f431(68, 68, 0, ᐃᐃ[499], 3);
    this.ⵠΔᐃ[273].id = 273;
    this.ⵠΔᐃ[274] = f431(68, 68, 0, ᐃᐃ[500], 3);
    this.ⵠΔᐃ[274].id = 274;
    this.ⵠΔᐃ[275] = f431(68, 68, 0, ᐃᐃ[501], 3);
    this.ⵠΔᐃ[275].id = 275;
    this.ⵠΔᐃ[11] = f431(68, 68, 0, ᐃᐃ[502], 3);
    this.ⵠΔᐃ[11].id = 11;
    this.ⵠΔᐃ[12] = f431(68, 68, 0, ᐃᐃ[514], 3);
    this.ⵠΔᐃ[12].id = 12;
    this.ⵠΔᐃ[13] = f431(68, 68, 0, ᐃᐃ[508], 3);
    this.ⵠΔᐃ[13].id = 13;
    this.ⵠΔᐃ[14] = f431(68, 68, 0, ᐃᐃ[511], 3);
    this.ⵠΔᐃ[14].id = 14;
    this.ⵠΔᐃ[15] = f431(68, 68, 0, ᐃᐃ[517], 3);
    this.ⵠΔᐃ[15].id = 15;
    this.ⵠΔᐃ[16] = f431(68, 68, 0, ᐃᐃ[1124], 3);
    this.ⵠΔᐃ[16].id = 16;
    this.ⵠΔᐃ[210] = f431(68, 68, 0, ᐃᐃ[521], 3);
    this.ⵠΔᐃ[210].id = 210;
    this.ⵠΔᐃ[32] = f431(68, 68, 0, ᐃᐃ[533], 3);
    this.ⵠΔᐃ[32].id = 32;
    this.ⵠΔᐃ[33] = f431(68, 68, 0, ᐃᐃ[536], 3);
    this.ⵠΔᐃ[33].id = 33;
    this.ⵠΔᐃ[160] = f431(68, 68, 0, ᐃᐃ[1620], 3);
    this.ⵠΔᐃ[160].id = 160;
    this.ⵠΔᐃ[161] = f431(68, 68, 0, ᐃᐃ[1623], 3);
    this.ⵠΔᐃ[161].id = 161;
    this.ⵠΔᐃ[153] = f431(68, 68, 0, ᐃᐃ[1467], 3);
    this.ⵠΔᐃ[153].id = 153;
    this.ⵠΔᐃ[154] = f431(68, 68, 0, ᐃᐃ[1470], 3);
    this.ⵠΔᐃ[154].id = 154;
    this.ⵠΔᐃ[183] = f431(68, 68, 0, ᐃᐃ[1495], 3);
    this.ⵠΔᐃ[183].id = 183;
    this.ⵠΔᐃ[119] = f431(68, 68, 0, ᐃᐃ[763], 3);
    this.ⵠΔᐃ[119].id = 119;
    this.ⵠΔᐃ[135] = f431(68, 68, 0, ᐃᐃ[1631], 3);
    this.ⵠΔᐃ[135].id = 135;
    this.ⵠΔᐃ[184] = f431(68, 68, 0, ᐃᐃ[1498], 3);
    this.ⵠΔᐃ[184].id = 184;
    this.ⵠΔᐃ[120] = f431(68, 68, 0, ᐃᐃ[766], 3);
    this.ⵠΔᐃ[120].id = 120;
    this.ⵠΔᐃ[136] = f431(68, 68, 0, ᐃᐃ[1634], 3);
    this.ⵠΔᐃ[136].id = 136;
    this.ⵠΔᐃ[185] = f431(68, 68, 0, ᐃᐃ[1501], 3);
    this.ⵠΔᐃ[185].id = 185;
    this.ⵠΔᐃ[121] = f431(68, 68, 0, ᐃᐃ[769], 3);
    this.ⵠΔᐃ[121].id = 121;
    this.ⵠΔᐃ[137] = f431(68, 68, 0, ᐃᐃ[1637], 3);
    this.ⵠΔᐃ[137].id = 137;
    this.ⵠΔᐃ[186] = f431(68, 68, 0, ᐃᐃ[1504], 3);
    this.ⵠΔᐃ[186].id = 186;
    this.ⵠΔᐃ[122] = f431(68, 68, 0, ᐃᐃ[772], 3);
    this.ⵠΔᐃ[122].id = 122;
    this.ⵠΔᐃ[138] = f431(68, 68, 0, ᐃᐃ[1640], 3);
    this.ⵠΔᐃ[138].id = 138;
    this.ⵠΔᐃ[187] = f431(68, 68, 0, ᐃᐃ[1507], 3);
    this.ⵠΔᐃ[187].id = 187;
    this.ⵠΔᐃ[123] = f431(68, 68, 0, ᐃᐃ[775], 3);
    this.ⵠΔᐃ[123].id = 123;
    this.ⵠΔᐃ[139] = f431(68, 68, 0, ᐃᐃ[1643], 3);
    this.ⵠΔᐃ[139].id = 139;
    this.ⵠΔᐃ[188] = f431(68, 68, 0, ᐃᐃ[1510], 3);
    this.ⵠΔᐃ[188].id = 188;
    this.ⵠΔᐃ[124] = f431(68, 68, 0, ᐃᐃ[778], 3);
    this.ⵠΔᐃ[124].id = 124;
    this.ⵠΔᐃ[140] = f431(68, 68, 0, ᐃᐃ[1646], 3);
    this.ⵠΔᐃ[140].id = 140;
    this.ⵠΔᐃ[189] = f431(68, 68, 0, ᐃᐃ[1513], 3);
    this.ⵠΔᐃ[189].id = 189;
    this.ⵠΔᐃ[125] = f431(68, 68, 0, ᐃᐃ[781], 3);
    this.ⵠΔᐃ[125].id = 125;
    this.ⵠΔᐃ[167] = f431(68, 68, 0, ᐃᐃ[1676], 3);
    this.ⵠΔᐃ[167].id = 167;
    this.ⵠΔᐃ[168] = f431(68, 68, 0, ᐃᐃ[1679], 3);
    this.ⵠΔᐃ[168].id = 168;
    this.ⵠΔᐃ[169] = f431(68, 68, 0, ᐃᐃ[1682], 3);
    this.ⵠΔᐃ[169].id = 169;
    this.ⵠΔᐃ[170] = f431(68, 68, 0, ᐃᐃ[1685], 3);
    this.ⵠΔᐃ[170].id = 170;
    this.ⵠΔᐃ[171] = f431(68, 68, 0, ᐃᐃ[1688], 3);
    this.ⵠΔᐃ[171].id = 171;
    this.ⵠΔᐃ[172] = f431(68, 68, 0, ᐃᐃ[1691], 3);
    this.ⵠΔᐃ[172].id = 172;
    this.ⵠΔᐃ[104] = f431(68, 68, 0, ᐃᐃ[1077], 3);
    this.ⵠΔᐃ[104].id = 104;
    this.ⵠΔᐃ[34] = f431(68, 68, 0, ᐃᐃ[542], 3);
    this.ⵠΔᐃ[34].id = 34;
    this.ⵠΔᐃ[35] = f431(68, 68, 0, ᐃᐃ[545], 3);
    this.ⵠΔᐃ[35].id = 35;
    this.ⵠΔᐃ[36] = f431(68, 68, 0, ᐃᐃ[548], 3);
    this.ⵠΔᐃ[36].id = 36;
    this.ⵠΔᐃ[46] = f431(68, 68, 0, ᐃᐃ[578], 3);
    this.ⵠΔᐃ[46].id = 46;
    this.ⵠΔᐃ[211] = f431(68, 68, 0, ᐃᐃ[581], 3);
    this.ⵠΔᐃ[211].id = 211;
    this.ⵠΔᐃ[47] = f431(68, 68, 0, ᐃᐃ[496], 3);
    this.ⵠΔᐃ[47].id = 47;
    this.ⵠΔᐃ[212] = f431(68, 68, 0, ᐃᐃ[584], 3);
    this.ⵠΔᐃ[212].id = 212;
    this.ⵠΔᐃ[48] = f431(68, 68, 0, ᐃᐃ[595], 3);
    this.ⵠΔᐃ[48].id = 48;
    this.ⵠΔᐃ[9] = f431(68, 68, 0, ᐃᐃ[1111], 3);
    this.ⵠΔᐃ[9].id = 9;
    this.ⵠΔᐃ[49] = f431(68, 68, 0, ᐃᐃ[597], 3);
    this.ⵠΔᐃ[49].id = 49;
    this.ⵠΔᐃ[50] = f431(68, 68, 0, ᐃᐃ[1294], 3);
    this.ⵠΔᐃ[50].id = 50;
    this.ⵠΔᐃ[60] = f431(68, 68, 0, ᐃᐃ[612], 3);
    this.ⵠΔᐃ[60].id = 60;
    this.ⵠΔᐃ[62] = f431(68, 68, 0, ᐃᐃ[617], 3);
    this.ⵠΔᐃ[62].id = 62;
    this.ⵠΔᐃ[63] = f431(68, 68, 0, ᐃᐃ[620], 3);
    this.ⵠΔᐃ[63].id = 63;
    this.ⵠΔᐃ[64] = f431(68, 68, 0, ᐃᐃ[623], 3);
    this.ⵠΔᐃ[64].id = 64;
    this.ⵠΔᐃ[65] = f431(68, 68, 0, ᐃᐃ[626], 3);
    this.ⵠΔᐃ[65].id = 65;
    this.ⵠΔᐃ[66] = f431(68, 68, 0, ᐃᐃ[629], 3);
    this.ⵠΔᐃ[66].id = 66;
    this.ⵠΔᐃ[213] = f431(68, 68, 0, ᐃᐃ[632], 3);
    this.ⵠΔᐃ[213].id = 213;
    this.ⵠΔᐃ[214] = f431(68, 68, 0, ᐃᐃ[635], 3);
    this.ⵠΔᐃ[214].id = 214;
    this.ⵠΔᐃ[215] = f431(68, 68, 0, ᐃᐃ[639], 3);
    this.ⵠΔᐃ[215].id = 215;
    this.ⵠΔᐃ[67] = f431(68, 68, 0, ᐃᐃ[642], 3);
    this.ⵠΔᐃ[67].id = 67;
    this.ⵠΔᐃ[239] = f431(68, 68, 0, ᐃᐃ[644], 3);
    this.ⵠΔᐃ[239].id = 239;
    this.ⵠΔᐃ[350] = f431(68, 68, 0, ᐃᐃ[1625], 3);
    this.ⵠΔᐃ[350].id = 350;
    this.ⵠΔᐃ[240] = f431(68, 68, 0, ᐃᐃ[652], 3);
    this.ⵠΔᐃ[240].id = 240;
    this.ⵠΔᐃ[241] = f431(68, 68, 0, ᐃᐃ[658], 3);
    this.ⵠΔᐃ[241].id = 241;
    this.ⵠΔᐃ[242] = f431(68, 68, 0, ᐃᐃ[660], 3);
    this.ⵠΔᐃ[242].id = 242;
    this.ⵠΔᐃ[243] = f431(68, 68, 0, ᐃᐃ[662], 3);
    this.ⵠΔᐃ[243].id = 243;
    this.ⵠΔᐃ[244] = f431(68, 68, 0, ᐃᐃ[669], 3);
    this.ⵠΔᐃ[244].id = 244;
    this.ⵠΔᐃ[260] = f431(68, 68, 0, ᐃᐃ[672], 3);
    this.ⵠΔᐃ[260].id = 260;
    this.ⵠΔᐃ[261] = f431(68, 68, 0, ᐃᐃ[719], 3);
    this.ⵠΔᐃ[261].id = 261;
    this.ⵠΔᐃ[70] = f431(68, 68, 0, ᐃᐃ[681], 3);
    this.ⵠΔᐃ[70].id = 70;
    this.ⵠΔᐃ[72] = f431(68, 68, 0, ᐃᐃ[690], 3);
    this.ⵠΔᐃ[72].id = 72;
    this.ⵠΔᐃ[216] = f431(68, 68, 0, ᐃᐃ[825], 3);
    this.ⵠΔᐃ[216].id = 216;
    this.ⵠΔᐃ[331] = f431(68, 68, 0, ᐃᐃ[1628], 3);
    this.ⵠΔᐃ[331].id = 331;
    this.ⵠΔᐃ[333] = f431(68, 68, 0, ᐃᐃ[1337], 3);
    this.ⵠΔᐃ[333].id = 333;
    this.ⵠΔᐃ[334] = f431(68, 68, 0, ᐃᐃ[1340], 3);
    this.ⵠΔᐃ[334].id = 334;
    this.ⵠΔᐃ[340] = f431(68, 68, 0, ᐃᐃ[1426], 3);
    this.ⵠΔᐃ[340].id = 340;
    this.ⵠΔᐃ[162] = f431(68, 68, 0, ᐃᐃ[1355], 3);
    this.ⵠΔᐃ[162].id = 162;
    this.ⵠΔᐃ[335] = f431(68, 68, 0, ᐃᐃ[1358], 3);
    this.ⵠΔᐃ[335].id = 335;
    this.ⵠΔᐃ[337] = f431(68, 68, 0, ᐃᐃ[1389], 3);
    this.ⵠΔᐃ[337].id = 337;
    this.ⵠΔᐃ[349] = f431(68, 68, 0, ᐃᐃ[1616], 3);
    this.ⵠΔᐃ[349].id = 349;
    this.ⵠΔᐃ[338] = f431(68, 68, 0, ᐃᐃ[1404], 3);
    this.ⵠΔᐃ[338].id = 338;
    this.ⵠΔᐃ[339] = f431(68, 68, 0, ᐃᐃ[1419], 3);
    this.ⵠΔᐃ[339].id = 339;
    this.ⵠΔᐃ[355] = f431(68, 68, 0, ᐃᐃ[1440], 3);
    this.ⵠΔᐃ[355].id = 355;
    this.ⵠΔᐃ[354] = f431(68, 68, 0, ᐃᐃ[1458], 3);
    this.ⵠΔᐃ[354].id = 354;
    this.ⵠΔᐃ[358] = f431(68, 68, 0, ᐃᐃ[1329], 3);
    this.ⵠΔᐃ[358].id = 358;
    this.ⵠΔᐃ[336] = f431(68, 68, 0, ᐃᐃ[1545], 3);
    this.ⵠΔᐃ[336].id = 336;
    this.ⵠΔᐃ[217] = f431(68, 68, 0, ᐃᐃ[829], 3);
    this.ⵠΔᐃ[217].id = 217;
    this.ⵠΔᐃ[218] = f431(68, 68, 0, ᐃᐃ[834], 3);
    this.ⵠΔᐃ[218].id = 218;
    this.ⵠΔᐃ[221] = f431(68, 68, 0, ᐃᐃ[833], 3);
    this.ⵠΔᐃ[221].id = 221;
    this.ⵠΔᐃ[82] = f431(68, 68, 0, ᐃᐃ[836], 3);
    this.ⵠΔᐃ[82].id = 82;
    this.ⵠΔᐃ[86] = f431(68, 68, 0, ᐃᐃ[920], 3);
    this.ⵠΔᐃ[86].id = 86;
    this.ⵠΔᐃ[87] = f431(68, 68, 0, ᐃᐃ[922], 3);
    this.ⵠΔᐃ[87].id = 87;
    this.ⵠΔᐃ[88] = f431(68, 68, 0, ᐃᐃ[926], 3);
    this.ⵠΔᐃ[88].id = 88;
    this.ⵠΔᐃ[101] = f431(68, 68, 0, ᐃᐃ[959], 3);
    this.ⵠΔᐃ[101].id = 101;
    this.ⵠΔᐃ[222] = f431(68, 68, 0, ᐃᐃ[844], 3);
    this.ⵠΔᐃ[222].id = 222;
    this.ⵠΔᐃ[223] = f431(68, 68, 0, ᐃᐃ[847], 3);
    this.ⵠΔᐃ[223].id = 223;
    this.ⵠΔᐃ[224] = f431(68, 68, 0, ᐃᐃ[849], 3);
    this.ⵠΔᐃ[224].id = 224;
    this.ⵠΔᐃ[225] = f431(68, 68, 0, ᐃᐃ[852], 3);
    this.ⵠΔᐃ[225].id = 225;
    this.ⵠΔᐃ[226] = f431(68, 68, 0, ᐃᐃ[855], 3);
    this.ⵠΔᐃ[226].id = 226;
    this.ⵠΔᐃ[227] = f431(68, 68, 0, ᐃᐃ[859], 3);
    this.ⵠΔᐃ[227].id = 227;
    this.ⵠΔᐃ[228] = f431(68, 68, 0, ᐃᐃ[864], 3);
    this.ⵠΔᐃ[228].id = 228;
    this.ⵠΔᐃ[83] = f431(68, 68, 0, ᐃᐃ[867], 3);
    this.ⵠΔᐃ[83].id = 83;
    this.ⵠΔᐃ[84] = f431(68, 68, 0, ᐃᐃ[870], 3);
    this.ⵠΔᐃ[84].id = 84;
    this.ⵠΔᐃ[85] = f431(68, 68, 0, ᐃᐃ[872], 3);
    this.ⵠΔᐃ[85].id = 85;
    this.ⵠΔᐃ[229] = f431(68, 68, 0, ᐃᐃ[880], 3);
    this.ⵠΔᐃ[229].id = 229;
    this.ⵠΔᐃ[236] = f431(68, 68, 0, ᐃᐃ[908], 3);
    this.ⵠΔᐃ[236].id = 236;
    this.ⵠΔᐃ[230] = f431(68, 68, 0, ᐃᐃ[882], 3);
    this.ⵠΔᐃ[230].id = 230;
    this.ⵠΔᐃ[231] = f431(68, 68, 0, ᐃᐃ[884], 3);
    this.ⵠΔᐃ[231].id = 231;
    this.ⵠΔᐃ[232] = f431(68, 68, 0, ᐃᐃ[894], 3);
    this.ⵠΔᐃ[232].id = 232;
    this.ⵠΔᐃ[233] = f431(68, 68, 0, ᐃᐃ[901], 3);
    this.ⵠΔᐃ[233].id = 233;
    this.ⵠΔᐃ[234] = f431(68, 68, 0, ᐃᐃ[902], 3);
    this.ⵠΔᐃ[234].id = 234;
    this.ⵠΔᐃ[235] = f431(68, 68, 0, ᐃᐃ[905], 3);
    this.ⵠΔᐃ[235].id = 235;
    this.ⵠΔᐃ[237] = f431(68, 68, 0, ᐃᐃ[968], 3);
    this.ⵠΔᐃ[237].id = 237;
    this.ⵠΔᐃ[238] = f431(68, 68, 0, ᐃᐃ[980], 3);
    this.ⵠΔᐃ[238].id = 238;
    this.ⵠΔᐃ[105] = f431(68, 68, 0, ᐃᐃ[982], 3);
    this.ⵠΔᐃ[105].id = 105;
    this.ⵠΔᐃ[108] = f431(68, 68, 0, ᐃᐃ[730], 3);
    this.ⵠΔᐃ[108].id = 108;
    this.ⵠΔᐃ[287] = f431(68, 68, 0, ᐃᐃ[809], 3);
    this.ⵠΔᐃ[287].id = 287;
    this.ⵠΔᐃ[286] = f431(68, 68, 0, ᐃᐃ[1001], 3);
    this.ⵠΔᐃ[286].id = 286;
    this.ⵠΔᐃ[289] = f431(68, 68, 0, ᐃᐃ[810], 3);
    this.ⵠΔᐃ[289].id = 289;
    this.ⵠΔᐃ[288] = f431(68, 68, 0, ᐃᐃ[1003], 3);
    this.ⵠΔᐃ[288].id = 288;
    this.ⵠΔᐃ[150] = f431(68, 68, 0, ᐃᐃ[1006], 3);
    this.ⵠΔᐃ[150].id = 150;
    this.ⵠΔᐃ[277] = f431(68, 68, 0, ᐃᐃ[1008], 3);
    this.ⵠΔᐃ[277].id = 277;
    this.ⵠΔᐃ[278] = f431(68, 68, 0, ᐃᐃ[1012], 3);
    this.ⵠΔᐃ[278].id = 278;
    this.ⵠΔᐃ[151] = f431(68, 68, 0, ᐃᐃ[1010], 3);
    this.ⵠΔᐃ[151].id = 151;
    this.ⵠΔᐃ[279] = f431(68, 68, 0, ᐃᐃ[1015], 3);
    this.ⵠΔᐃ[279].id = 279;
    this.ⵠΔᐃ[152] = f431(68, 68, 0, ᐃᐃ[1014], 3);
    this.ⵠΔᐃ[152].id = 152;
    this.ⵠΔᐃ[156] = f431(68, 68, 0, ᐃᐃ[1018], 3);
    this.ⵠΔᐃ[156].id = 156;
    this.ⵠΔᐃ[157] = f431(68, 68, 0, ᐃᐃ[1022], 3);
    this.ⵠΔᐃ[157].id = 157;
    this.ⵠΔᐃ[280] = f431(68, 68, 0, ᐃᐃ[1023], 3);
    this.ⵠΔᐃ[280].id = 280;
    this.ⵠΔᐃ[281] = f431(68, 68, 0, ᐃᐃ[1024], 3);
    this.ⵠΔᐃ[281].id = 281;
    this.ⵠΔᐃ[159] = f431(68, 68, 0, ᐃᐃ[1027], 3);
    this.ⵠΔᐃ[159].id = 159;
    this.ⵠΔᐃ[158] = f431(68, 68, 0, ᐃᐃ[1030], 3);
    this.ⵠΔᐃ[158].id = 158;
    this.ⵠΔᐃ[282] = f431(68, 68, 0, ᐃᐃ[1035], 3);
    this.ⵠΔᐃ[282].id = 282;
    this.ⵠΔᐃ[283] = f431(68, 68, 0, ᐃᐃ[1036], 3);
    this.ⵠΔᐃ[283].id = 283;
    this.ⵠΔᐃ[284] = f431(68, 68, 0, ᐃᐃ[1039], 3);
    this.ⵠΔᐃ[284].id = 284;
    this.ⵠΔᐃ[285] = f431(68, 68, 0, ᐃᐃ[1050], 3);
    this.ⵠΔᐃ[285].id = 285;
    this.ⵠΔᐃ[290] = f431(68, 68, 0, ᐃᐃ[1059], 3);
    this.ⵠΔᐃ[290].id = 290;
    this.ⵠΔᐃ[291] = f431(68, 68, 0, ᐃᐃ[1064], 3);
    this.ⵠΔᐃ[291].id = 291;
    this.ⵠΔᐃ[292] = f431(68, 68, 0, ᐃᐃ[1093], 3);
    this.ⵠΔᐃ[292].id = 292;
    this.ⵠΔᐃ[293] = f431(68, 68, 0, ᐃᐃ[1085], 3);
    this.ⵠΔᐃ[293].id = 293;
    this.ⵠΔᐃ[294] = f431(68, 68, 0, ᐃᐃ[1090], 3);
    this.ⵠΔᐃ[294].id = 294;
    this.ⵠΔᐃ[295] = f431(68, 68, 0, ᐃᐃ[1096], 3);
    this.ⵠΔᐃ[295].id = 295;
    this.ⵠΔᐃ[296] = f431(68, 68, 0, ᐃᐃ[1100], 3);
    this.ⵠΔᐃ[296].id = 296;
    this.ⵠΔᐃ[316] = f431(68, 68, 0, ᐃᐃ[1237], 3);
    this.ⵠΔᐃ[316].id = 316;
    this.ⵠΔᐃ[317] = f431(68, 68, 0, ᐃᐃ[1250], 3);
    this.ⵠΔᐃ[317].id = 317;
    this.ⵠΔᐃ[314] = f431(68, 68, 0, ᐃᐃ[1227], 3);
    this.ⵠΔᐃ[314].id = 314;
    this.ⵠΔᐃ[315] = f431(68, 68, 0, ᐃᐃ[1232], 3);
    this.ⵠΔᐃ[315].id = 315;
    this.ⵠΔᐃ[318] = f431(68, 68, 0, ᐃᐃ[1244], 3);
    this.ⵠΔᐃ[318].id = 318;
    this.ⵠΔᐃ[319] = f431(68, 68, 0, ᐃᐃ[1249], 3);
    this.ⵠΔᐃ[319].id = 319;
    this.ⵠΔᐃ[320] = f431(68, 68, 0, ᐃᐃ[1259], 3);
    this.ⵠΔᐃ[320].id = 320;
    this.ⵠΔᐃ[321] = f431(68, 68, 0, ᐃᐃ[1264], 3);
    this.ⵠΔᐃ[321].id = 321;
    this.ⵠΔᐃ[68] = f431(68, 68, 0, ᐃᐃ[1157], 3);
    this.ⵠΔᐃ[68].id = 68;
    this.ⵠΔᐃ[69] = f431(68, 68, 0, ᐃᐃ[1159], 3);
    this.ⵠΔᐃ[69].id = 69;
    this.ⵠΔᐃ[12] = f431(68, 68, 0, ᐃᐃ[514], 3);
    this.ⵠΔᐃ[12].id = 12;
    this.ⵠΔᐃ[16] = f431(68, 68, 0, ᐃᐃ[1124], 3);
    this.ⵠΔᐃ[16].id = 16;
    this.ⵠΔᐃ[298] = f431(68, 68, 0, ᐃᐃ[1174], 3);
    this.ⵠΔᐃ[298].id = 298;
    this.ⵠΔᐃ[18] = f431(68, 68, 0, ᐃᐃ[1175], 3);
    this.ⵠΔᐃ[18].id = 18;
    this.ⵠΔᐃ[299] = f431(68, 68, 0, ᐃᐃ[1182], 3);
    this.ⵠΔᐃ[299].id = 299;
    this.ⵠΔᐃ[300] = f431(68, 68, 0, ᐃᐃ[1184], 3);
    this.ⵠΔᐃ[300].id = 300;
    this.ⵠΔᐃ[107] = f431(68, 68, 0, ᐃᐃ[1187], 3);
    this.ⵠΔᐃ[107].id = 107;
    this.ⵠΔᐃ[303] = f431(68, 68, 0, ᐃᐃ[1120], 3);
    this.ⵠΔᐃ[303].id = 303;
    this.ⵠΔᐃ[301] = f431(68, 68, 0, ᐃᐃ[1112], 3);
    this.ⵠΔᐃ[301].id = 301;
    this.ⵠΔᐃ[302] = f431(68, 68, 0, ᐃᐃ[1117], 3);
    this.ⵠΔᐃ[302].id = 302;
    this.ⵠΔⲆⵠᐃ = [];
    for (v2538 = 0; v2538 < 1000; v2538++) {
      this.ⵠΔⲆⵠᐃ[v2538] = f431(0, 0, 0, ᐃᐃ[477]);
    }
    this.ⲆᐃΔ = [];
    this.ⲆᐃΔ[0] = f431(60, 60, 0, ᐃᐃ[371], 3);
    this.ⲆᐃΔ[0].id = 0;
    this.ⲆᐃΔ[1] = f431(60, 60, 0, ᐃᐃ[423], 3);
    this.ⲆᐃΔ[1].id = 1;
    this.ⲆᐃΔ[199] = f431(60, 60, 0, ᐃᐃ[426], 3);
    this.ⲆᐃΔ[199].id = 199;
    this.ⲆᐃΔ[199].info.Δⵠ[2] = this.ⲆᐃΔ[199].info.Δⵠ[0];
    this.ⲆᐃΔ[200] = f431(60, 60, 0, ᐃᐃ[427], 3);
    this.ⲆᐃΔ[200].id = 200;
    this.ⲆᐃΔ[200].info.Δⵠ[2] = this.ⲆᐃΔ[200].info.Δⵠ[0];
    this.ⲆᐃΔ[201] = f431(60, 60, 0, ᐃᐃ[387], 3);
    this.ⲆᐃΔ[201].id = 201;
    this.ⲆᐃΔ[343] = f431(60, 60, 0, ᐃᐃ[1482], 3);
    this.ⲆᐃΔ[343].id = 343;
    this.ⲆᐃΔ[202] = f431(60, 60, 0, ᐃᐃ[408], 3);
    this.ⲆᐃΔ[202].id = 202;
    this.ⲆᐃΔ[202].info.Δⵠ[2] = this.ⲆᐃΔ[202].info.Δⵠ[0];
    this.ⲆᐃΔ[203] = f431(60, 60, 0, ᐃᐃ[409], 3);
    this.ⲆᐃΔ[203].id = 203;
    this.ⲆᐃΔ[203].info.Δⵠ[2] = this.ⲆᐃΔ[203].info.Δⵠ[0];
    this.ⲆᐃΔ[3] = f431(60, 60, 0, ᐃᐃ[368], 3);
    this.ⲆᐃΔ[3].id = 3;
    this.ⲆᐃΔ[4] = f431(60, 60, 0, ᐃᐃ[407], 3);
    this.ⲆᐃΔ[4].id = 4;
    this.ⲆᐃΔ[5] = f431(60, 60, 0, ᐃᐃ[402], 3);
    this.ⲆᐃΔ[5].id = 5;
    this.ⲆᐃΔ[103] = f431(60, 60, 0, ᐃᐃ[1078], 3);
    this.ⲆᐃΔ[103].id = 103;
    this.ⲆᐃΔ[6] = f431(60, 60, 0, ᐃᐃ[403], 3);
    this.ⲆᐃΔ[6].id = 6;
    this.ⲆᐃΔ[204] = f431(60, 60, 0, ᐃᐃ[420], 3);
    this.ⲆᐃΔ[204].id = 204;
    this.ⲆᐃΔ[205] = f431(60, 60, 0, ᐃᐃ[421], 3);
    this.ⲆᐃΔ[205].id = 205;
    this.ⲆᐃΔ[206] = f431(60, 60, 0, ᐃᐃ[422], 3);
    this.ⲆᐃΔ[206].id = 206;
    this.ⲆᐃΔ[264] = f431(60, 60, 0, ᐃᐃ[428], 3);
    this.ⲆᐃΔ[264].id = 264;
    this.ⲆᐃΔ[262] = f431(60, 60, 0, ᐃᐃ[430], 3);
    this.ⲆᐃΔ[262].id = 262;
    this.ⲆᐃΔ[8] = f431(60, 60, 0, ᐃᐃ[424], 3);
    this.ⲆᐃΔ[8].id = 8;
    this.ⲆᐃΔ[208] = f431(60, 60, 0, ᐃᐃ[434], 3);
    this.ⲆᐃΔ[208].id = 208;
    this.ⲆᐃΔ[207] = f431(60, 60, 0, ᐃᐃ[411], 3);
    this.ⲆᐃΔ[207].id = 207;
    this.ⲆᐃΔ[209] = f431(60, 60, 0, ᐃᐃ[439], 3);
    this.ⲆᐃΔ[209].id = 209;
    this.ⲆᐃΔ[297] = f431(60, 60, 0, ᐃᐃ[414], 3);
    this.ⲆᐃΔ[297].id = 297;
    this.ⲆᐃΔ[263] = f431(60, 60, 0, ᐃᐃ[416], 3);
    this.ⲆᐃΔ[263].id = 263;
    this.ⲆᐃΔ[263].info.Δⵠ[2] = this.ⲆᐃΔ[263].info.Δⵠ[0];
    this.ⲆᐃΔ[265] = f431(60, 60, 0, ᐃᐃ[440], 3);
    this.ⲆᐃΔ[265].id = 265;
    this.ⲆᐃΔ[266] = f431(60, 60, 0, ᐃᐃ[441], 3);
    this.ⲆᐃΔ[266].id = 266;
    this.ⲆᐃΔ[267] = f431(60, 60, 0, ᐃᐃ[442], 3);
    this.ⲆᐃΔ[267].id = 267;
    this.ⲆᐃΔ[268] = f431(60, 60, 0, ᐃᐃ[446], 3);
    this.ⲆᐃΔ[268].id = 268;
    this.ⲆᐃΔ[269] = f431(60, 60, 0, ᐃᐃ[448], 3);
    this.ⲆᐃΔ[269].id = 269;
    this.ⲆᐃΔ[270] = f431(60, 60, 0, ᐃᐃ[472], 3);
    this.ⲆᐃΔ[270].id = 270;
    this.ⲆᐃΔ[271] = f431(60, 60, 0, ᐃᐃ[473], 3);
    this.ⲆᐃΔ[271].id = 271;
    this.ⲆᐃΔ[272] = f431(60, 60, 0, ᐃᐃ[475], 3);
    this.ⲆᐃΔ[272].id = 272;
    this.ⲆᐃΔ[47] = f431(60, 60, 0, ᐃᐃ[503], 3);
    this.ⲆᐃΔ[47].id = 47;
    this.ⲆᐃΔ[10] = f431(60, 60, 0, ᐃᐃ[480], 3);
    this.ⲆᐃΔ[10].id = 10;
    this.ⲆᐃΔ[273] = f431(60, 60, 0, ᐃᐃ[483], 3);
    this.ⲆᐃΔ[273].id = 273;
    this.ⲆᐃΔ[274] = f431(60, 60, 0, ᐃᐃ[486], 3);
    this.ⲆᐃΔ[274].id = 274;
    this.ⲆᐃΔ[275] = f431(60, 60, 0, ᐃᐃ[489], 3);
    this.ⲆᐃΔ[275].id = 275;
    this.ⲆᐃΔ[2] = f431(60, 60, 0, ᐃᐃ[479], 3);
    this.ⲆᐃΔ[2].id = 2;
    this.ⲆᐃΔ[2].info.Δⵠ[2] = this.ⲆᐃΔ[2].info.Δⵠ[0];
    this.ⲆᐃΔ[347] = f431(60, 60, 0, ᐃᐃ[1490], 3);
    this.ⲆᐃΔ[347].id = 347;
    this.ⲆᐃΔ[347].info.Δⵠ[2] = this.ⲆᐃΔ[347].info.Δⵠ[0];
    this.ⲆᐃΔ[276] = f431(60, 60, 0, ᐃᐃ[504], 3);
    this.ⲆᐃΔ[276].id = 276;
    this.ⲆᐃΔ[276].info.Δⵠ[2] = this.ⲆᐃΔ[276].info.Δⵠ[0];
    this.ⲆᐃΔ[353] = f431(60, 60, 0, ᐃᐃ[1754], 3);
    this.ⲆᐃΔ[353].id = 353;
    this.ⲆᐃΔ[353].info.Δⵠ[2] = this.ⲆᐃΔ[353].info.Δⵠ[0];
    this.ⲆᐃΔ[351] = f431(60, 60, 0, ᐃᐃ[1750], 3);
    this.ⲆᐃΔ[351].id = 351;
    this.ⲆᐃΔ[351].info.Δⵠ[2] = this.ⲆᐃΔ[351].info.Δⵠ[0];
    this.ⲆᐃΔ[332] = f431(60, 60, 0, ᐃᐃ[1343], 3);
    this.ⲆᐃΔ[332].id = 332;
    this.ⲆᐃΔ[341] = f431(60, 60, 0, ᐃᐃ[1345], 3);
    this.ⲆᐃΔ[341].id = 341;
    this.ⲆᐃΔ[342] = f431(60, 60, 0, ᐃᐃ[1347], 3);
    this.ⲆᐃΔ[342].id = 342;
    this.ⲆᐃΔ[352] = f431(60, 60, 0, ᐃᐃ[1463], 3);
    this.ⲆᐃΔ[352].id = 352;
    this.ⲆᐃΔ[344] = f431(60, 60, 0, ᐃᐃ[1484], 3);
    this.ⲆᐃΔ[344].id = 344;
    this.ⲆᐃΔ[10] = f431(60, 60, 0, ᐃᐃ[480], 3);
    this.ⲆᐃΔ[10].id = 10;
    this.ⲆᐃΔ[11] = f431(60, 60, 0, ᐃᐃ[492], 3);
    this.ⲆᐃΔ[11].id = 11;
    this.ⲆᐃΔ[12] = f431(60, 60, 0, ᐃᐃ[512], 3);
    this.ⲆᐃΔ[12].id = 12;
    this.ⲆᐃΔ[13] = f431(60, 60, 0, ᐃᐃ[506], 3);
    this.ⲆᐃΔ[13].id = 13;
    this.ⲆᐃΔ[14] = f431(60, 60, 0, ᐃᐃ[509], 3);
    this.ⲆᐃΔ[14].id = 14;
    this.ⲆᐃΔ[15] = f431(60, 60, 0, ᐃᐃ[515], 3);
    this.ⲆᐃΔ[15].id = 15;
    this.ⲆᐃΔ[16] = f431(60, 60, 0, ᐃᐃ[1123], 3);
    this.ⲆᐃΔ[16].id = 16;
    this.ⲆᐃΔ[210] = f431(60, 60, 0, ᐃᐃ[519], 3);
    this.ⲆᐃΔ[210].id = 210;
    this.ⲆᐃΔ[32] = f431(60, 60, 0, ᐃᐃ[531], 3);
    this.ⲆᐃΔ[32].id = 32;
    this.ⲆᐃΔ[33] = f431(60, 60, 0, ᐃᐃ[534], 3);
    this.ⲆᐃΔ[33].id = 33;
    this.ⲆᐃΔ[160] = f431(60, 60, 0, ᐃᐃ[1618], 3);
    this.ⲆᐃΔ[160].id = 160;
    this.ⲆᐃΔ[161] = f431(60, 60, 0, ᐃᐃ[1621], 3);
    this.ⲆᐃΔ[161].id = 161;
    this.ⲆᐃΔ[153] = f431(60, 60, 0, ᐃᐃ[1465], 3);
    this.ⲆᐃΔ[153].id = 153;
    this.ⲆᐃΔ[154] = f431(60, 60, 0, ᐃᐃ[1468], 3);
    this.ⲆᐃΔ[154].id = 154;
    this.ⲆᐃΔ[119] = f431(60, 60, 0, ᐃᐃ[761], 3);
    this.ⲆᐃΔ[119].id = 119;
    this.ⲆᐃΔ[183] = f431(60, 60, 0, ᐃᐃ[1494], 3);
    this.ⲆᐃΔ[183].id = 183;
    this.ⲆᐃΔ[135] = f431(60, 60, 0, ᐃᐃ[1630], 3);
    this.ⲆᐃΔ[135].id = 135;
    this.ⲆᐃΔ[120] = f431(60, 60, 0, ᐃᐃ[764], 3);
    this.ⲆᐃΔ[120].id = 120;
    this.ⲆᐃΔ[184] = f431(60, 60, 0, ᐃᐃ[1497], 3);
    this.ⲆᐃΔ[184].id = 184;
    this.ⲆᐃΔ[136] = f431(60, 60, 0, ᐃᐃ[1633], 3);
    this.ⲆᐃΔ[136].id = 136;
    this.ⲆᐃΔ[121] = f431(60, 60, 0, ᐃᐃ[767], 3);
    this.ⲆᐃΔ[121].id = 121;
    this.ⲆᐃΔ[185] = f431(60, 60, 0, ᐃᐃ[1500], 3);
    this.ⲆᐃΔ[185].id = 185;
    this.ⲆᐃΔ[137] = f431(60, 60, 0, ᐃᐃ[1636], 3);
    this.ⲆᐃΔ[137].id = 137;
    this.ⲆᐃΔ[122] = f431(60, 60, 0, ᐃᐃ[770], 3);
    this.ⲆᐃΔ[122].id = 122;
    this.ⲆᐃΔ[186] = f431(60, 60, 0, ᐃᐃ[1503], 3);
    this.ⲆᐃΔ[186].id = 186;
    this.ⲆᐃΔ[138] = f431(60, 60, 0, ᐃᐃ[1639], 3);
    this.ⲆᐃΔ[138].id = 138;
    this.ⲆᐃΔ[123] = f431(60, 60, 0, ᐃᐃ[773], 3);
    this.ⲆᐃΔ[123].id = 123;
    this.ⲆᐃΔ[187] = f431(60, 60, 0, ᐃᐃ[1506], 3);
    this.ⲆᐃΔ[187].id = 187;
    this.ⲆᐃΔ[139] = f431(60, 60, 0, ᐃᐃ[1642], 3);
    this.ⲆᐃΔ[139].id = 139;
    this.ⲆᐃΔ[124] = f431(60, 60, 0, ᐃᐃ[776], 3);
    this.ⲆᐃΔ[124].id = 124;
    this.ⲆᐃΔ[188] = f431(60, 60, 0, ᐃᐃ[1509], 3);
    this.ⲆᐃΔ[188].id = 188;
    this.ⲆᐃΔ[140] = f431(60, 60, 0, ᐃᐃ[1645], 3);
    this.ⲆᐃΔ[140].id = 140;
    this.ⲆᐃΔ[125] = f431(60, 60, 0, ᐃᐃ[779], 3);
    this.ⲆᐃΔ[125].id = 125;
    this.ⲆᐃΔ[189] = f431(60, 60, 0, ᐃᐃ[1512], 3);
    this.ⲆᐃΔ[189].id = 189;
    this.ⲆᐃΔ[167] = f431(60, 60, 0, ᐃᐃ[1675], 3);
    this.ⲆᐃΔ[167].id = 167;
    this.ⲆᐃΔ[168] = f431(60, 60, 0, ᐃᐃ[1678], 3);
    this.ⲆᐃΔ[168].id = 168;
    this.ⲆᐃΔ[169] = f431(60, 60, 0, ᐃᐃ[1681], 3);
    this.ⲆᐃΔ[169].id = 169;
    this.ⲆᐃΔ[170] = f431(60, 60, 0, ᐃᐃ[1684], 3);
    this.ⲆᐃΔ[170].id = 170;
    this.ⲆᐃΔ[171] = f431(60, 60, 0, ᐃᐃ[1687], 3);
    this.ⲆᐃΔ[171].id = 171;
    this.ⲆᐃΔ[172] = f431(60, 60, 0, ᐃᐃ[1690], 3);
    this.ⲆᐃΔ[172].id = 172;
    this.ⲆᐃΔ[104] = f431(60, 60, 0, ᐃᐃ[1075], 3);
    this.ⲆᐃΔ[104].id = 104;
    this.ⲆᐃΔ[34] = f431(60, 60, 0, ᐃᐃ[540], 3);
    this.ⲆᐃΔ[34].id = 34;
    this.ⲆᐃΔ[35] = f431(60, 60, 0, ᐃᐃ[543], 3);
    this.ⲆᐃΔ[35].id = 35;
    this.ⲆᐃΔ[36] = f431(60, 60, 0, ᐃᐃ[546], 3);
    this.ⲆᐃΔ[36].id = 36;
    this.ⲆᐃΔ[46] = f431(60, 60, 0, ᐃᐃ[576], 3);
    this.ⲆᐃΔ[46].id = 46;
    this.ⲆᐃΔ[211] = f431(60, 60, 0, ᐃᐃ[579], 3);
    this.ⲆᐃΔ[211].id = 211;
    this.ⲆᐃΔ[211].info.Δⵠ[2] = this.ⲆᐃΔ[211].info.Δⵠ[0];
    this.ⲆᐃΔ[47] = f431(60, 60, 0, ᐃᐃ[503], 3);
    this.ⲆᐃΔ[47].id = 47;
    this.ⲆᐃΔ[212] = f431(60, 60, 0, ᐃᐃ[529], 3);
    this.ⲆᐃΔ[212].id = 212;
    this.ⲆᐃΔ[212].info.Δⵠ[2] = this.ⲆᐃΔ[212].info.Δⵠ[0];
    this.ⲆᐃΔ[48] = f431(60, 60, 0, ᐃᐃ[593], 3);
    this.ⲆᐃΔ[48].id = 48;
    this.ⲆᐃΔ[9] = f431(60, 60, 0, ᐃᐃ[1109], 3);
    this.ⲆᐃΔ[9].id = 9;
    this.ⲆᐃΔ[49] = f431(60, 60, 0, ᐃᐃ[596], 3);
    this.ⲆᐃΔ[49].id = 49;
    this.ⲆᐃΔ[50] = f431(60, 60, 0, ᐃᐃ[1293], 3);
    this.ⲆᐃΔ[50].id = 50;
    this.ⲆᐃΔ[60] = f431(60, 60, 0, ᐃᐃ[610], 3);
    this.ⲆᐃΔ[60].id = 60;
    this.ⲆᐃΔ[62] = f431(60, 60, 0, ᐃᐃ[615], 3);
    this.ⲆᐃΔ[62].id = 62;
    this.ⲆᐃΔ[63] = f431(60, 60, 0, ᐃᐃ[618], 3);
    this.ⲆᐃΔ[63].id = 63;
    this.ⲆᐃΔ[64] = f431(60, 60, 0, ᐃᐃ[621], 3);
    this.ⲆᐃΔ[64].id = 64;
    this.ⲆᐃΔ[65] = f431(60, 60, 0, ᐃᐃ[624], 3);
    this.ⲆᐃΔ[65].id = 65;
    this.ⲆᐃΔ[66] = f431(60, 60, 0, ᐃᐃ[627], 3);
    this.ⲆᐃΔ[66].id = 66;
    this.ⲆᐃΔ[213] = f431(60, 60, 0, ᐃᐃ[630], 3);
    this.ⲆᐃΔ[213].id = 213;
    this.ⲆᐃΔ[214] = f431(60, 60, 0, ᐃᐃ[633], 3);
    this.ⲆᐃΔ[214].id = 214;
    this.ⲆᐃΔ[215] = f431(60, 60, 0, ᐃᐃ[637], 3);
    this.ⲆᐃΔ[215].id = 215;
    this.ⲆᐃΔ[67] = f431(60, 60, 0, ᐃᐃ[640], 3);
    this.ⲆᐃΔ[67].id = 67;
    this.ⲆᐃΔ[239] = f431(60, 60, 0, ᐃᐃ[643], 3);
    this.ⲆᐃΔ[239].id = 239;
    this.ⲆᐃΔ[239].info.Δⵠ[2] = this.ⲆᐃΔ[239].info.Δⵠ[0];
    this.ⲆᐃΔ[350] = f431(60, 60, 0, ᐃᐃ[1624], 3);
    this.ⲆᐃΔ[350].id = 350;
    this.ⲆᐃΔ[350].info.Δⵠ[2] = this.ⲆᐃΔ[350].info.Δⵠ[0];
    this.ⲆᐃΔ[240] = f431(60, 60, 0, ᐃᐃ[651], 3);
    this.ⲆᐃΔ[240].id = 240;
    this.ⲆᐃΔ[240].info.Δⵠ[2] = this.ⲆᐃΔ[240].info.Δⵠ[0];
    this.ⲆᐃΔ[241] = f431(60, 60, 0, ᐃᐃ[656], 3);
    this.ⲆᐃΔ[241].id = 241;
    this.ⲆᐃΔ[241].info.Δⵠ[2] = this.ⲆᐃΔ[241].info.Δⵠ[0];
    this.ⲆᐃΔ[242] = f431(60, 60, 0, ᐃᐃ[659], 3);
    this.ⲆᐃΔ[242].id = 242;
    this.ⲆᐃΔ[243] = f431(60, 60, 0, ᐃᐃ[661], 3);
    this.ⲆᐃΔ[243].id = 243;
    this.ⲆᐃΔ[244] = f431(60, 60, 0, ᐃᐃ[667], 3);
    this.ⲆᐃΔ[244].id = 244;
    this.ⲆᐃΔ[260] = f431(60, 60, 0, ᐃᐃ[670], 3);
    this.ⲆᐃΔ[260].id = 260;
    this.ⲆᐃΔ[261] = f431(60, 60, 0, ᐃᐃ[718], 3);
    this.ⲆᐃΔ[261].id = 261;
    this.ⲆᐃΔ[70] = f431(60, 60, 0, ᐃᐃ[679], 3);
    this.ⲆᐃΔ[70].id = 70;
    this.ⲆᐃΔ[72] = f431(60, 60, 0, ᐃᐃ[688], 3);
    this.ⲆᐃΔ[72].id = 72;
    this.ⲆᐃΔ[216] = f431(60, 60, 0, ᐃᐃ[824], 3);
    this.ⲆᐃΔ[216].id = 216;
    this.ⲆᐃΔ[331] = f431(60, 60, 0, ᐃᐃ[1627], 3);
    this.ⲆᐃΔ[331].id = 331;
    this.ⲆᐃΔ[333] = f431(60, 60, 0, ᐃᐃ[1336], 3);
    this.ⲆᐃΔ[333].id = 333;
    this.ⲆᐃΔ[334] = f431(60, 60, 0, ᐃᐃ[1339], 3);
    this.ⲆᐃΔ[334].id = 334;
    this.ⲆᐃΔ[340] = f431(60, 60, 0, ᐃᐃ[1425], 3);
    this.ⲆᐃΔ[340].id = 340;
    this.ⲆᐃΔ[162] = f431(60, 60, 0, ᐃᐃ[1354], 3);
    this.ⲆᐃΔ[162].id = 162;
    this.ⲆᐃΔ[335] = f431(60, 60, 0, ᐃᐃ[1357], 3);
    this.ⲆᐃΔ[335].id = 335;
    this.ⲆᐃΔ[336] = f431(60, 60, 0, ᐃᐃ[1544], 3);
    this.ⲆᐃΔ[336].id = 336;
    this.ⲆᐃΔ[337] = f431(60, 60, 0, ᐃᐃ[1388], 3);
    this.ⲆᐃΔ[337].id = 337;
    this.ⲆᐃΔ[349] = f431(60, 60, 0, ᐃᐃ[1615], 3);
    this.ⲆᐃΔ[349].id = 349;
    this.ⲆᐃΔ[338] = f431(60, 60, 0, ᐃᐃ[1403], 3);
    this.ⲆᐃΔ[338].id = 338;
    this.ⲆᐃΔ[339] = f431(60, 60, 0, ᐃᐃ[1418], 3);
    this.ⲆᐃΔ[339].id = 339;
    this.ⲆᐃΔ[355] = f431(60, 60, 0, ᐃᐃ[1439], 3);
    this.ⲆᐃΔ[355].id = 355;
    this.ⲆᐃΔ[354] = f431(60, 60, 0, ᐃᐃ[1457], 3);
    this.ⲆᐃΔ[354].id = 354;
    this.ⲆᐃΔ[358] = f431(60, 60, 0, ᐃᐃ[1328], 3);
    this.ⲆᐃΔ[358].id = 358;
    this.ⲆᐃΔ[217] = f431(60, 60, 0, ᐃᐃ[828], 3);
    this.ⲆᐃΔ[217].id = 217;
    this.ⲆᐃΔ[217].info.Δⵠ[2] = this.ⲆᐃΔ[217].info.Δⵠ[0];
    this.ⲆᐃΔ[218] = f431(60, 60, 0, ᐃᐃ[832], 3);
    this.ⲆᐃΔ[218].id = 218;
    this.ⲆᐃΔ[221] = f431(60, 60, 0, ᐃᐃ[831], 3);
    this.ⲆᐃΔ[221].id = 221;
    this.ⲆᐃΔ[82] = f431(60, 60, 0, ᐃᐃ[835], 3);
    this.ⲆᐃΔ[82].id = 82;
    this.ⲆᐃΔ[86] = f431(60, 60, 0, ᐃᐃ[918], 3);
    this.ⲆᐃΔ[86].id = 86;
    this.ⲆᐃΔ[87] = f431(60, 60, 0, ᐃᐃ[921], 3);
    this.ⲆᐃΔ[87].id = 87;
    this.ⲆᐃΔ[88] = f431(60, 60, 0, ᐃᐃ[924], 3);
    this.ⲆᐃΔ[88].id = 88;
    this.ⲆᐃΔ[101] = f431(60, 60, 0, ᐃᐃ[958], 3);
    this.ⲆᐃΔ[101].id = 101;
    this.ⲆᐃΔ[222] = f431(60, 60, 0, ᐃᐃ[843], 3);
    this.ⲆᐃΔ[222].id = 222;
    this.ⲆᐃΔ[222].info.Δⵠ[2] = this.ⲆᐃΔ[222].info.Δⵠ[0];
    this.ⲆᐃΔ[223] = f431(60, 60, 0, ᐃᐃ[845], 3);
    this.ⲆᐃΔ[223].id = 223;
    this.ⲆᐃΔ[224] = f431(60, 60, 0, ᐃᐃ[848], 3);
    this.ⲆᐃΔ[224].id = 224;
    this.ⲆᐃΔ[224].info.Δⵠ[2] = this.ⲆᐃΔ[224].info.Δⵠ[0];
    this.ⲆᐃΔ[225] = f431(60, 60, 0, ᐃᐃ[850], 3);
    this.ⲆᐃΔ[225].id = 225;
    this.ⲆᐃΔ[226] = f431(60, 60, 0, ᐃᐃ[853], 3);
    this.ⲆᐃΔ[226].id = 226;
    this.ⲆᐃΔ[227] = f431(60, 60, 0, ᐃᐃ[858], 3);
    this.ⲆᐃΔ[227].id = 227;
    this.ⲆᐃΔ[227].info.Δⵠ[2] = this.ⲆᐃΔ[227].info.Δⵠ[0];
    this.ⲆᐃΔ[228] = f431(60, 60, 0, ᐃᐃ[863], 3);
    this.ⲆᐃΔ[228].id = 228;
    this.ⲆᐃΔ[83] = f431(60, 60, 0, ᐃᐃ[865], 3);
    this.ⲆᐃΔ[83].id = 83;
    this.ⲆᐃΔ[84] = f431(60, 60, 0, ᐃᐃ[868], 3);
    this.ⲆᐃΔ[84].id = 84;
    this.ⲆᐃΔ[85] = f431(60, 60, 0, ᐃᐃ[871], 3);
    this.ⲆᐃΔ[85].id = 85;
    this.ⲆᐃΔ[229] = f431(60, 60, 0, ᐃᐃ[878], 3);
    this.ⲆᐃΔ[229].id = 229;
    this.ⲆᐃΔ[236] = f431(60, 60, 0, ᐃᐃ[236], 3);
    this.ⲆᐃΔ[236].id = 236;
    this.ⲆᐃΔ[230] = f431(60, 60, 0, ᐃᐃ[881], 3);
    this.ⲆᐃΔ[230].id = 230;
    this.ⲆᐃΔ[231] = f431(60, 60, 0, ᐃᐃ[883], 3);
    this.ⲆᐃΔ[231].id = 231;
    this.ⲆᐃΔ[232] = f431(60, 60, 0, ᐃᐃ[893], 3);
    this.ⲆᐃΔ[232].id = 232;
    this.ⲆᐃΔ[232].info.Δⵠ[2] = this.ⲆᐃΔ[232].info.Δⵠ[0];
    this.ⲆᐃΔ[233] = f431(60, 60, 0, ᐃᐃ[233], 3);
    this.ⲆᐃΔ[233].id = 233;
    this.ⲆᐃΔ[233].info.Δⵠ[2] = this.ⲆᐃΔ[233].info.Δⵠ[0];
    this.ⲆᐃΔ[234] = f431(60, 60, 0, ᐃᐃ[904], 3);
    this.ⲆᐃΔ[234].id = 234;
    this.ⲆᐃΔ[235] = f431(60, 60, 0, ᐃᐃ[235], 3);
    this.ⲆᐃΔ[235].id = 235;
    this.ⲆᐃΔ[235].info.Δⵠ[2] = this.ⲆᐃΔ[235].info.Δⵠ[0];
    this.ⲆᐃΔ[237] = f431(60, 60, 0, ᐃᐃ[966], 3);
    this.ⲆᐃΔ[237].id = 237;
    this.ⲆᐃΔ[238] = f431(60, 60, 0, ᐃᐃ[238], 3);
    this.ⲆᐃΔ[238].id = 238;
    this.ⲆᐃΔ[105] = f431(60, 60, 0, ᐃᐃ[981], 3);
    this.ⲆᐃΔ[105].id = 105;
    this.ⲆᐃΔ[108] = f431(60, 60, 0, ᐃᐃ[728], 3);
    this.ⲆᐃΔ[108].id = 108;
    this.ⲆᐃΔ[287] = f431(60, 60, 0, ᐃᐃ[362], 3);
    this.ⲆᐃΔ[287].id = 287;
    this.ⲆᐃΔ[287].info.Δⵠ[2] = this.ⲆᐃΔ[287].info.Δⵠ[0];
    this.ⲆᐃΔ[286] = f431(60, 60, 0, ᐃᐃ[1000], 3);
    this.ⲆᐃΔ[286].id = 286;
    this.ⲆᐃΔ[286].info.Δⵠ[2] = this.ⲆᐃΔ[286].info.Δⵠ[0];
    this.ⲆᐃΔ[17] = f431(60, 60, 0, ᐃᐃ[1126], 3);
    this.ⲆᐃΔ[17].id = 17;
    this.ⲆᐃΔ[109] = f431(60, 60, 0, ᐃᐃ[731], 3);
    this.ⲆᐃΔ[109].id = 109;
    this.ⲆᐃΔ[289] = f431(60, 60, 0, ᐃᐃ[363], 3);
    this.ⲆᐃΔ[289].id = 289;
    this.ⲆᐃΔ[289].info.Δⵠ[2] = this.ⲆᐃΔ[289].info.Δⵠ[0];
    this.ⲆᐃΔ[288] = f431(60, 60, 0, ᐃᐃ[1002], 3);
    this.ⲆᐃΔ[288].id = 288;
    this.ⲆᐃΔ[288].info.Δⵠ[2] = this.ⲆᐃΔ[288].info.Δⵠ[0];
    this.ⲆᐃΔ[150] = f431(60, 60, 0, ᐃᐃ[1005], 3);
    this.ⲆᐃΔ[150].id = 150;
    this.ⲆᐃΔ[277] = f431(60, 60, 0, ᐃᐃ[278], 3);
    this.ⲆᐃΔ[277].id = 277;
    this.ⲆᐃΔ[277].info.Δⵠ[2] = this.ⲆᐃΔ[277].info.Δⵠ[0];
    this.ⲆᐃΔ[278] = f431(60, 60, 0, ᐃᐃ[279], 3);
    this.ⲆᐃΔ[278].id = 278;
    this.ⲆᐃΔ[278].info.Δⵠ[2] = this.ⲆᐃΔ[278].info.Δⵠ[0];
    this.ⲆᐃΔ[151] = f431(60, 60, 0, ᐃᐃ[1009], 3);
    this.ⲆᐃΔ[151].id = 151;
    this.ⲆᐃΔ[279] = f431(60, 60, 0, ᐃᐃ[277], 3);
    this.ⲆᐃΔ[279].id = 279;
    this.ⲆᐃΔ[279].info.Δⵠ[2] = this.ⲆᐃΔ[279].info.Δⵠ[0];
    this.ⲆᐃΔ[152] = f431(60, 60, 0, ᐃᐃ[1013], 3);
    this.ⲆᐃΔ[152].id = 152;
    this.ⲆᐃΔ[156] = f431(60, 60, 0, ᐃᐃ[1016], 3);
    this.ⲆᐃΔ[156].id = 156;
    this.ⲆᐃΔ[157] = f431(60, 60, 0, ᐃᐃ[1020], 3);
    this.ⲆᐃΔ[157].id = 157;
    this.ⲆᐃΔ[280] = f431(60, 60, 0, ᐃᐃ[280], 3);
    this.ⲆᐃΔ[280].id = 280;
    this.ⲆᐃΔ[281] = f431(60, 60, 0, ᐃᐃ[281], 3);
    this.ⲆᐃΔ[281].id = 281;
    this.ⲆᐃΔ[159] = f431(60, 60, 0, ᐃᐃ[1025], 3);
    this.ⲆᐃΔ[159].id = 159;
    this.ⲆᐃΔ[158] = f431(60, 60, 0, ᐃᐃ[1028], 3);
    this.ⲆᐃΔ[158].id = 158;
    this.ⲆᐃΔ[282] = f431(60, 60, 0, ᐃᐃ[282], 3);
    this.ⲆᐃΔ[282].id = 282;
    this.ⲆᐃΔ[283] = f431(60, 60, 0, ᐃᐃ[283], 3);
    this.ⲆᐃΔ[283].id = 283;
    this.ⲆᐃΔ[284] = f431(60, 60, 0, ᐃᐃ[1038], 3);
    this.ⲆᐃΔ[284].id = 284;
    this.ⲆᐃΔ[285] = f431(60, 60, 0, ᐃᐃ[1049], 3);
    this.ⲆᐃΔ[285].id = 285;
    this.ⲆᐃΔ[290] = f431(60, 60, 0, ᐃᐃ[1057], 3);
    this.ⲆᐃΔ[290].id = 290;
    this.ⲆᐃΔ[291] = f431(60, 60, 0, ᐃᐃ[1063], 3);
    this.ⲆᐃΔ[291].id = 291;
    this.ⲆᐃΔ[293] = f431(60, 60, 0, ᐃᐃ[1083], 3);
    this.ⲆᐃΔ[293].id = 293;
    this.ⲆᐃΔ[294] = f431(60, 60, 0, ᐃᐃ[1089], 3);
    this.ⲆᐃΔ[294].id = 294;
    this.ⲆᐃΔ[292] = f431(60, 60, 0, ᐃᐃ[1091], 3);
    this.ⲆᐃΔ[292].id = 292;
    this.ⲆᐃΔ[295] = f431(60, 60, 0, ᐃᐃ[1094], 3);
    this.ⲆᐃΔ[295].id = 295;
    this.ⲆᐃΔ[296] = f431(60, 60, 0, ᐃᐃ[1099], 3);
    this.ⲆᐃΔ[296].id = 296;
    this.ⲆᐃΔ[314] = f431(60, 60, 0, ᐃᐃ[1225], 3);
    this.ⲆᐃΔ[314].id = 314;
    this.ⲆᐃΔ[315] = f431(60, 60, 0, ᐃᐃ[1231], 3);
    this.ⲆᐃΔ[315].id = 315;
    this.ⲆᐃΔ[316] = f431(60, 60, 0, ᐃᐃ[1235], 3);
    this.ⲆᐃΔ[316].id = 316;
    this.ⲆᐃΔ[317] = f431(60, 60, 0, ᐃᐃ[1241], 3);
    this.ⲆᐃΔ[317].id = 317;
    this.ⲆᐃΔ[318] = f431(60, 60, 0, ᐃᐃ[1242], 3);
    this.ⲆᐃΔ[318].id = 318;
    this.ⲆᐃΔ[319] = f431(60, 60, 0, ᐃᐃ[1248], 3);
    this.ⲆᐃΔ[319].id = 319;
    this.ⲆᐃΔ[320] = f431(60, 60, 0, ᐃᐃ[1257], 3);
    this.ⲆᐃΔ[320].id = 320;
    this.ⲆᐃΔ[321] = f431(60, 60, 0, ᐃᐃ[1263], 3);
    this.ⲆᐃΔ[321].id = 321;
    this.ⲆᐃΔ[68] = f431(60, 60, 0, ᐃᐃ[1156], 3);
    this.ⲆᐃΔ[68].id = 68;
    this.ⲆᐃΔ[69] = f431(60, 60, 0, ᐃᐃ[1158], 3);
    this.ⲆᐃΔ[69].id = 69;
    this.ⲆᐃΔ[12] = f431(60, 60, 0, ᐃᐃ[512], 3);
    this.ⲆᐃΔ[12].id = 12;
    this.ⲆᐃΔ[16] = f431(60, 60, 0, ᐃᐃ[1123], 3);
    this.ⲆᐃΔ[16].id = 16;
    this.ⲆᐃΔ[298] = f431(60, 60, 0, ᐃᐃ[298], 3);
    this.ⲆᐃΔ[298].id = 298;
    this.ⲆᐃΔ[18] = f431(60, 60, 0, ᐃᐃ[1177], 3);
    this.ⲆᐃΔ[18].id = 18;
    this.ⲆᐃΔ[299] = f431(60, 60, 0, ᐃᐃ[299], 3);
    this.ⲆᐃΔ[299].id = 299;
    this.ⲆᐃΔ[300] = f431(60, 60, 0, ᐃᐃ[1183], 3);
    this.ⲆᐃΔ[300].id = 300;
    this.ⲆᐃΔ[107] = f431(60, 60, 0, ᐃᐃ[1186], 3);
    this.ⲆᐃΔ[107].id = 107;
    this.ⲆᐃΔ[303] = f431(60, 60, 0, ᐃᐃ[1119], 3);
    this.ⲆᐃΔ[303].id = 303;
    this.ⲆᐃΔ[302] = f431(60, 60, 0, ᐃᐃ[302], 3);
    this.ⲆᐃΔ[302].id = 302;
    this.ⲆᐃΔ[301] = f431(60, 60, 0, ᐃᐃ[1114], 3);
    this.ⲆᐃΔ[301].id = 301;
    this.ⲆΔⵠ = [];
    this.ⲆΔⵠ[0] = f431(60, 60, 0, ᐃᐃ[364], 3);
    this.ⲆΔⵠ[0].id = 0;
    this.ⲆΔⵠ[1] = f431(60, 60, 0, ᐃᐃ[366], 3);
    this.ⲆΔⵠ[1].id = 1;
    this.ⲆΔⵠ[204] = f431(60, 60, 0, ᐃᐃ[413], 3);
    this.ⲆΔⵠ[204].id = 204;
    this.ⲆΔⵠ[205] = f431(60, 60, 0, ᐃᐃ[372], 3);
    this.ⲆΔⵠ[205].id = 205;
    this.ⲆΔⵠ[264] = f431(60, 60, 0, ᐃᐃ[429], 3);
    this.ⲆΔⵠ[264].id = 264;
    this.ⲆΔⵠ[262] = f431(60, 60, 0, ᐃᐃ[431], 3);
    this.ⲆΔⵠ[262].id = 262;
    this.ⲆΔⵠ[206] = f431(60, 60, 0, ᐃᐃ[394], 3);
    this.ⲆΔⵠ[206].id = 206;
    this.ⲆΔⵠ[3] = f431(60, 60, 0, ᐃᐃ[406], 3);
    this.ⲆΔⵠ[3].id = 3;
    this.ⲆΔⵠ[4] = f431(60, 60, 0, ᐃᐃ[367], 3);
    this.ⲆΔⵠ[4].id = 4;
    this.ⲆΔⵠ[5] = f431(60, 60, 0, ᐃᐃ[400], 3);
    this.ⲆΔⵠ[5].id = 5;
    this.ⲆΔⵠ[103] = f431(60, 60, 0, ᐃᐃ[1079], 3);
    this.ⲆΔⵠ[103].id = 103;
    this.ⲆΔⵠ[6] = f431(60, 60, 0, ᐃᐃ[401], 3);
    this.ⲆΔⵠ[6].id = 6;
    this.ⲆΔⵠ[8] = f431(60, 60, 0, ᐃᐃ[425], 3);
    this.ⲆΔⵠ[8].id = 8;
    this.ⲆΔⵠ[208] = f431(60, 60, 0, ᐃᐃ[436], 3);
    this.ⲆΔⵠ[208].id = 208;
    this.ⲆΔⵠ[209] = f431(60, 60, 0, ᐃᐃ[438], 3);
    this.ⲆΔⵠ[209].id = 209;
    this.ⲆΔⵠ[297] = f431(60, 60, 0, ᐃᐃ[415], 3);
    this.ⲆΔⵠ[297].id = 297;
    this.ⲆΔⵠ[265] = f431(60, 60, 0, ᐃᐃ[373], 3);
    this.ⲆΔⵠ[265].id = 265;
    this.ⲆΔⵠ[266] = f431(60, 60, 0, ᐃᐃ[375], 3);
    this.ⲆΔⵠ[266].id = 266;
    this.ⲆΔⵠ[267] = f431(60, 60, 0, ᐃᐃ[443], 3);
    this.ⲆΔⵠ[267].id = 267;
    this.ⲆΔⵠ[268] = f431(60, 60, 0, ᐃᐃ[378], 3);
    this.ⲆΔⵠ[268].id = 268;
    this.ⲆΔⵠ[269] = f431(60, 60, 0, ᐃᐃ[449], 3);
    this.ⲆΔⵠ[269].id = 269;
    this.ⲆΔⵠ[270] = f431(60, 60, 0, ᐃᐃ[471], 3);
    this.ⲆΔⵠ[270].id = 270;
    this.ⲆΔⵠ[271] = f431(60, 60, 0, ᐃᐃ[474], 3);
    this.ⲆΔⵠ[271].id = 271;
    this.ⲆΔⵠ[272] = f431(60, 60, 0, ᐃᐃ[476], 3);
    this.ⲆΔⵠ[272].id = 272;
    this.ⲆΔⵠ[47] = f431(60, 60, 0, ᐃᐃ[478], 3);
    this.ⲆΔⵠ[47].id = 47;
    this.ⲆΔⵠ[10] = f431(60, 60, 0, ᐃᐃ[481], 3);
    this.ⲆΔⵠ[10].id = 10;
    this.ⲆΔⵠ[273] = f431(60, 60, 0, ᐃᐃ[482], 3);
    this.ⲆΔⵠ[273].id = 273;
    this.ⲆΔⵠ[274] = f431(60, 60, 0, ᐃᐃ[485], 3);
    this.ⲆΔⵠ[274].id = 274;
    this.ⲆΔⵠ[275] = f431(60, 60, 0, ᐃᐃ[488], 3);
    this.ⲆΔⵠ[275].id = 275;
    this.ⲆΔⵠ[10] = f431(60, 60, 0, ᐃᐃ[481], 3);
    this.ⲆΔⵠ[10].id = 10;
    this.ⲆΔⵠ[11] = f431(60, 60, 0, ᐃᐃ[491], 3);
    this.ⲆΔⵠ[11].id = 11;
    this.ⲆΔⵠ[12] = f431(60, 60, 0, ᐃᐃ[513], 3);
    this.ⲆΔⵠ[12].id = 12;
    this.ⲆΔⵠ[13] = f431(60, 60, 0, ᐃᐃ[507], 3);
    this.ⲆΔⵠ[13].id = 13;
    this.ⲆΔⵠ[14] = f431(60, 60, 0, ᐃᐃ[510], 3);
    this.ⲆΔⵠ[14].id = 14;
    this.ⲆΔⵠ[15] = f431(60, 60, 0, ᐃᐃ[516], 3);
    this.ⲆΔⵠ[15].id = 15;
    this.ⲆΔⵠ[16] = f431(60, 60, 0, ᐃᐃ[1125], 3);
    this.ⲆΔⵠ[16].id = 16;
    this.ⲆΔⵠ[210] = f431(60, 60, 0, ᐃᐃ[520], 3);
    this.ⲆΔⵠ[210].id = 210;
    this.ⲆΔⵠ[32] = f431(60, 60, 0, ᐃᐃ[532], 3);
    this.ⲆΔⵠ[32].id = 32;
    this.ⲆΔⵠ[33] = f431(60, 60, 0, ᐃᐃ[535], 3);
    this.ⲆΔⵠ[33].id = 33;
    this.ⲆΔⵠ[160] = f431(60, 60, 0, ᐃᐃ[1619], 3);
    this.ⲆΔⵠ[160].id = 160;
    this.ⲆΔⵠ[161] = f431(60, 60, 0, ᐃᐃ[1622], 3);
    this.ⲆΔⵠ[161].id = 161;
    this.ⲆΔⵠ[153] = f431(60, 60, 0, ᐃᐃ[1466], 3);
    this.ⲆΔⵠ[153].id = 153;
    this.ⲆΔⵠ[154] = f431(60, 60, 0, ᐃᐃ[1469], 3);
    this.ⲆΔⵠ[154].id = 154;
    this.ⲆΔⵠ[119] = f431(60, 60, 0, ᐃᐃ[762], 3);
    this.ⲆΔⵠ[119].id = 119;
    this.ⲆΔⵠ[183] = f431(60, 60, 0, ᐃᐃ[1496], 3);
    this.ⲆΔⵠ[183].id = 183;
    this.ⲆΔⵠ[135] = f431(60, 60, 0, ᐃᐃ[1629], 3);
    this.ⲆΔⵠ[135].id = 135;
    this.ⲆΔⵠ[120] = f431(60, 60, 0, ᐃᐃ[765], 3);
    this.ⲆΔⵠ[120].id = 120;
    this.ⲆΔⵠ[184] = f431(60, 60, 0, ᐃᐃ[1499], 3);
    this.ⲆΔⵠ[184].id = 184;
    this.ⲆΔⵠ[136] = f431(60, 60, 0, ᐃᐃ[1632], 3);
    this.ⲆΔⵠ[136].id = 136;
    this.ⲆΔⵠ[121] = f431(60, 60, 0, ᐃᐃ[768], 3);
    this.ⲆΔⵠ[121].id = 121;
    this.ⲆΔⵠ[185] = f431(60, 60, 0, ᐃᐃ[1502], 3);
    this.ⲆΔⵠ[185].id = 185;
    this.ⲆΔⵠ[137] = f431(60, 60, 0, ᐃᐃ[1635], 3);
    this.ⲆΔⵠ[137].id = 137;
    this.ⲆΔⵠ[122] = f431(60, 60, 0, ᐃᐃ[771], 3);
    this.ⲆΔⵠ[122].id = 122;
    this.ⲆΔⵠ[186] = f431(60, 60, 0, ᐃᐃ[1505], 3);
    this.ⲆΔⵠ[186].id = 186;
    this.ⲆΔⵠ[167] = f431(60, 60, 0, ᐃᐃ[1674], 3);
    this.ⲆΔⵠ[167].id = 167;
    this.ⲆΔⵠ[168] = f431(60, 60, 0, ᐃᐃ[1677], 3);
    this.ⲆΔⵠ[168].id = 168;
    this.ⲆΔⵠ[169] = f431(60, 60, 0, ᐃᐃ[1680], 3);
    this.ⲆΔⵠ[169].id = 169;
    this.ⲆΔⵠ[170] = f431(60, 60, 0, ᐃᐃ[1683], 3);
    this.ⲆΔⵠ[170].id = 170;
    this.ⲆΔⵠ[171] = f431(60, 60, 0, ᐃᐃ[1686], 3);
    this.ⲆΔⵠ[171].id = 171;
    this.ⲆΔⵠ[172] = f431(60, 60, 0, ᐃᐃ[1689], 3);
    this.ⲆΔⵠ[172].id = 172;
    this.ⲆΔⵠ[138] = f431(60, 60, 0, ᐃᐃ[1638], 3);
    this.ⲆΔⵠ[138].id = 138;
    this.ⲆΔⵠ[123] = f431(60, 60, 0, ᐃᐃ[774], 3);
    this.ⲆΔⵠ[123].id = 123;
    this.ⲆΔⵠ[187] = f431(60, 60, 0, ᐃᐃ[1508], 3);
    this.ⲆΔⵠ[187].id = 187;
    this.ⲆΔⵠ[139] = f431(60, 60, 0, ᐃᐃ[1641], 3);
    this.ⲆΔⵠ[139].id = 139;
    this.ⲆΔⵠ[124] = f431(60, 60, 0, ᐃᐃ[777], 3);
    this.ⲆΔⵠ[124].id = 124;
    this.ⲆΔⵠ[188] = f431(60, 60, 0, ᐃᐃ[1511], 3);
    this.ⲆΔⵠ[188].id = 188;
    this.ⲆΔⵠ[140] = f431(60, 60, 0, ᐃᐃ[1644], 3);
    this.ⲆΔⵠ[140].id = 140;
    this.ⲆΔⵠ[125] = f431(60, 60, 0, ᐃᐃ[780], 3);
    this.ⲆΔⵠ[125].id = 125;
    this.ⲆΔⵠ[189] = f431(60, 60, 0, ᐃᐃ[1514], 3);
    this.ⲆΔⵠ[189].id = 189;
    this.ⲆΔⵠ[104] = f431(60, 60, 0, ᐃᐃ[1076], 3);
    this.ⲆΔⵠ[104].id = 104;
    this.ⲆΔⵠ[34] = f431(60, 60, 0, ᐃᐃ[541], 3);
    this.ⲆΔⵠ[34].id = 34;
    this.ⲆΔⵠ[35] = f431(60, 60, 0, ᐃᐃ[544], 3);
    this.ⲆΔⵠ[35].id = 35;
    this.ⲆΔⵠ[36] = f431(60, 60, 0, ᐃᐃ[547], 3);
    this.ⲆΔⵠ[36].id = 36;
    this.ⲆΔⵠ[46] = f431(60, 60, 0, ᐃᐃ[577], 3);
    this.ⲆΔⵠ[46].id = 46;
    this.ⲆΔⵠ[211] = f431(60, 60, 0, ᐃᐃ[580], 3);
    this.ⲆΔⵠ[211].id = 211;
    this.ⲆΔⵠ[47] = f431(60, 60, 0, ᐃᐃ[478], 3);
    this.ⲆΔⵠ[47].id = 47;
    this.ⲆΔⵠ[48] = f431(60, 60, 0, ᐃᐃ[594], 3);
    this.ⲆΔⵠ[48].id = 48;
    this.ⲆΔⵠ[9] = f431(60, 60, 0, ᐃᐃ[1110], 3);
    this.ⲆΔⵠ[9].id = 9;
    this.ⲆΔⵠ[49] = f431(60, 60, 0, ᐃᐃ[598], 3);
    this.ⲆΔⵠ[49].id = 49;
    this.ⲆΔⵠ[50] = f431(60, 60, 0, ᐃᐃ[1295], 3);
    this.ⲆΔⵠ[50].id = 50;
    this.ⲆΔⵠ[60] = f431(60, 60, 0, ᐃᐃ[611], 3);
    this.ⲆΔⵠ[60].id = 60;
    this.ⲆΔⵠ[62] = f431(60, 60, 0, ᐃᐃ[616], 3);
    this.ⲆΔⵠ[62].id = 62;
    this.ⲆΔⵠ[63] = f431(60, 60, 0, ᐃᐃ[619], 3);
    this.ⲆΔⵠ[63].id = 63;
    this.ⲆΔⵠ[64] = f431(60, 60, 0, ᐃᐃ[622], 3);
    this.ⲆΔⵠ[64].id = 64;
    this.ⲆΔⵠ[65] = f431(60, 60, 0, ᐃᐃ[625], 3);
    this.ⲆΔⵠ[65].id = 65;
    this.ⲆΔⵠ[66] = f431(60, 60, 0, ᐃᐃ[628], 3);
    this.ⲆΔⵠ[66].id = 66;
    this.ⲆΔⵠ[213] = f431(60, 60, 0, ᐃᐃ[631], 3);
    this.ⲆΔⵠ[213].id = 213;
    this.ⲆΔⵠ[214] = f431(60, 60, 0, ᐃᐃ[634], 3);
    this.ⲆΔⵠ[214].id = 214;
    this.ⲆΔⵠ[215] = f431(60, 60, 0, ᐃᐃ[636], 3);
    this.ⲆΔⵠ[215].id = 215;
    this.ⲆΔⵠ[67] = f431(60, 60, 0, ᐃᐃ[641], 3);
    this.ⲆΔⵠ[67].id = 67;
    this.ⲆΔⵠ[240] = f431(60, 60, 0, ᐃᐃ[653], 3);
    this.ⲆΔⵠ[240].id = 240;
    this.ⲆΔⵠ[241] = f431(60, 60, 0, ᐃᐃ[657], 3);
    this.ⲆΔⵠ[241].id = 241;
    this.ⲆΔⵠ[244] = f431(60, 60, 0, ᐃᐃ[668], 3);
    this.ⲆΔⵠ[244].id = 244;
    this.ⲆΔⵠ[260] = f431(60, 60, 0, ᐃᐃ[671], 3);
    this.ⲆΔⵠ[260].id = 260;
    this.ⲆΔⵠ[261] = f431(60, 60, 0, ᐃᐃ[720], 3);
    this.ⲆΔⵠ[261].id = 261;
    this.ⲆΔⵠ[70] = f431(60, 60, 0, ᐃᐃ[680], 3);
    this.ⲆΔⵠ[70].id = 70;
    this.ⲆΔⵠ[72] = f431(60, 60, 0, ᐃᐃ[689], 3);
    this.ⲆΔⵠ[72].id = 72;
    this.ⲆΔⵠ[216] = f431(60, 60, 0, ᐃᐃ[823], 3);
    this.ⲆΔⵠ[216].id = 216;
    this.ⲆΔⵠ[331] = f431(60, 60, 0, ᐃᐃ[1626], 3);
    this.ⲆΔⵠ[331].id = 331;
    this.ⲆΔⵠ[333] = f431(60, 60, 0, ᐃᐃ[1335], 3);
    this.ⲆΔⵠ[333].id = 333;
    this.ⲆΔⵠ[334] = f431(60, 60, 0, ᐃᐃ[1338], 3);
    this.ⲆΔⵠ[334].id = 334;
    this.ⲆΔⵠ[340] = f431(60, 60, 0, ᐃᐃ[1424], 3);
    this.ⲆΔⵠ[340].id = 340;
    this.ⲆΔⵠ[162] = f431(60, 60, 0, ᐃᐃ[1356], 3);
    this.ⲆΔⵠ[162].id = 162;
    this.ⲆΔⵠ[335] = f431(60, 60, 0, ᐃᐃ[1359], 3);
    this.ⲆΔⵠ[335].id = 335;
    this.ⲆΔⵠ[337] = f431(60, 60, 0, ᐃᐃ[1390], 3);
    this.ⲆΔⵠ[337].id = 337;
    this.ⲆΔⵠ[349] = f431(60, 60, 0, ᐃᐃ[1617], 3);
    this.ⲆΔⵠ[349].id = 349;
    this.ⲆΔⵠ[336] = f431(60, 60, 0, ᐃᐃ[1546], 3);
    this.ⲆΔⵠ[336].id = 336;
    this.ⲆΔⵠ[221] = f431(60, 60, 0, ᐃᐃ[830], 3);
    this.ⲆΔⵠ[221].id = 221;
    this.ⲆΔⵠ[218] = f431(60, 60, 0, ᐃᐃ[964], 3);
    this.ⲆΔⵠ[218].id = 218;
    this.ⲆΔⵠ[219] = f431(60, 60, 0, ᐃᐃ[964], 3);
    this.ⲆΔⵠ[219].id = 219;
    this.ⲆΔⵠ[220] = f431(60, 60, 0, ᐃᐃ[964], 3);
    this.ⲆΔⵠ[220].id = 220;
    this.ⲆΔⵠ[82] = f431(60, 60, 0, ᐃᐃ[837], 3);
    this.ⲆΔⵠ[82].id = 82;
    this.ⲆΔⵠ[86] = f431(60, 60, 0, ᐃᐃ[919], 3);
    this.ⲆΔⵠ[86].id = 86;
    this.ⲆΔⵠ[87] = f431(60, 60, 0, ᐃᐃ[923], 3);
    this.ⲆΔⵠ[87].id = 87;
    this.ⲆΔⵠ[88] = f431(60, 60, 0, ᐃᐃ[925], 3);
    this.ⲆΔⵠ[88].id = 88;
    this.ⲆΔⵠ[101] = f431(60, 60, 0, ᐃᐃ[960], 3);
    this.ⲆΔⵠ[101].id = 101;
    this.ⲆΔⵠ[223] = f431(60, 60, 0, ᐃᐃ[846], 3);
    this.ⲆΔⵠ[223].id = 223;
    this.ⲆΔⵠ[225] = f431(60, 60, 0, ᐃᐃ[851], 3);
    this.ⲆΔⵠ[225].id = 225;
    this.ⲆΔⵠ[226] = f431(60, 60, 0, ᐃᐃ[854], 3);
    this.ⲆΔⵠ[226].id = 226;
    this.ⲆΔⵠ[228] = f431(60, 60, 0, ᐃᐃ[862], 3);
    this.ⲆΔⵠ[228].id = 228;
    this.ⲆΔⵠ[83] = f431(60, 60, 0, ᐃᐃ[866], 3);
    this.ⲆΔⵠ[83].id = 83;
    this.ⲆΔⵠ[84] = f431(60, 60, 0, ᐃᐃ[869], 3);
    this.ⲆΔⵠ[84].id = 84;
    this.ⲆΔⵠ[85] = f431(60, 60, 0, ᐃᐃ[873], 3);
    this.ⲆΔⵠ[85].id = 85;
    this.ⲆΔⵠ[229] = f431(60, 60, 0, ᐃᐃ[879], 3);
    this.ⲆΔⵠ[229].id = 229;
    this.ⲆΔⵠ[236] = f431(60, 60, 0, ᐃᐃ[909], 3);
    this.ⲆΔⵠ[236].id = 236;
    this.ⲆΔⵠ[231] = f431(60, 60, 0, ᐃᐃ[885], 3);
    this.ⲆΔⵠ[231].id = 231;
    this.ⲆΔⵠ[234] = f431(60, 60, 0, ᐃᐃ[903], 3);
    this.ⲆΔⵠ[234].id = 234;
    this.ⲆΔⵠ[237] = f431(60, 60, 0, ᐃᐃ[967], 3);
    this.ⲆΔⵠ[237].id = 237;
    this.ⲆΔⵠ[238] = f431(60, 60, 0, ᐃᐃ[979], 3);
    this.ⲆΔⵠ[238].id = 238;
    this.ⲆΔⵠ[105] = f431(60, 60, 0, ᐃᐃ[983], 3);
    this.ⲆΔⵠ[105].id = 105;
    this.ⲆΔⵠ[108] = f431(60, 60, 0, ᐃᐃ[728], 3);
    this.ⲆΔⵠ[108].id = 108;
    this.ⲆΔⵠ[150] = f431(60, 60, 0, ᐃᐃ[1007], 3);
    this.ⲆΔⵠ[150].id = 150;
    this.ⲆΔⵠ[151] = f431(60, 60, 0, ᐃᐃ[1011], 3);
    this.ⲆΔⵠ[151].id = 151;
    this.ⲆΔⵠ[152] = f431(60, 60, 0, ᐃᐃ[1019], 3);
    this.ⲆΔⵠ[152].id = 152;
    this.ⲆΔⵠ[156] = f431(60, 60, 0, ᐃᐃ[1017], 3);
    this.ⲆΔⵠ[156].id = 156;
    this.ⲆΔⵠ[157] = f431(60, 60, 0, ᐃᐃ[1021], 3);
    this.ⲆΔⵠ[157].id = 157;
    this.ⲆΔⵠ[159] = f431(60, 60, 0, ᐃᐃ[1026], 3);
    this.ⲆΔⵠ[159].id = 159;
    this.ⲆΔⵠ[158] = f431(60, 60, 0, ᐃᐃ[1029], 3);
    this.ⲆΔⵠ[158].id = 158;
    this.ⲆΔⵠ[282] = f431(60, 60, 0, ᐃᐃ[1033], 3);
    this.ⲆΔⵠ[282].id = 282;
    this.ⲆΔⵠ[283] = f431(60, 60, 0, ᐃᐃ[1034], 3);
    this.ⲆΔⵠ[283].id = 283;
    this.ⲆΔⵠ[284] = f431(60, 60, 0, ᐃᐃ[1040], 3);
    this.ⲆΔⵠ[284].id = 284;
    this.ⲆΔⵠ[285] = f431(60, 60, 0, ᐃᐃ[1048], 3);
    this.ⲆΔⵠ[285].id = 285;
    this.ⲆΔⵠ[290] = f431(60, 60, 0, ᐃᐃ[1058], 3);
    this.ⲆΔⵠ[290].id = 290;
    this.ⲆΔⵠ[293] = f431(60, 60, 0, ᐃᐃ[1084], 3);
    this.ⲆΔⵠ[293].id = 293;
    this.ⲆΔⵠ[292] = f431(60, 60, 0, ᐃᐃ[1092], 3);
    this.ⲆΔⵠ[292].id = 292;
    this.ⲆΔⵠ[295] = f431(60, 60, 0, ᐃᐃ[1095], 3);
    this.ⲆΔⵠ[295].id = 295;
    this.ⲆΔⵠ[316] = f431(60, 60, 0, ᐃᐃ[1236], 3);
    this.ⲆΔⵠ[316].id = 316;
    this.ⲆΔⵠ[314] = f431(60, 60, 0, ᐃᐃ[1226], 3);
    this.ⲆΔⵠ[314].id = 314;
    this.ⲆΔⵠ[318] = f431(60, 60, 0, ᐃᐃ[1243], 3);
    this.ⲆΔⵠ[318].id = 318;
    this.ⲆΔⵠ[320] = f431(60, 60, 0, ᐃᐃ[1258], 3);
    this.ⲆΔⵠ[320].id = 320;
    this.ⲆΔⵠ[12] = f431(60, 60, 0, ᐃᐃ[513], 3);
    this.ⲆΔⵠ[12].id = 12;
    this.ⲆΔⵠ[16] = f431(60, 60, 0, ᐃᐃ[1125], 3);
    this.ⲆΔⵠ[16].id = 16;
    this.ⲆΔⵠ[18] = f431(60, 60, 0, ᐃᐃ[1176], 3);
    this.ⲆΔⵠ[18].id = 18;
    this.ⲆΔⵠ[300] = f431(60, 60, 0, ᐃᐃ[1185], 3);
    this.ⲆΔⵠ[300].id = 300;
    this.ⲆΔⵠ[107] = f431(60, 60, 0, ᐃᐃ[1188], 3);
    this.ⲆΔⵠ[107].id = 107;
    this.ⵠΔᐃ[99] = f431(68, 68, 0, ᐃᐃ[1252], 3);
    this.ⵠΔᐃ[99].id = 99;
    this.ⲆᐃΔ[99] = f431(60, 60, 0, ᐃᐃ[1251], 3);
    this.ⲆᐃΔ[99].id = 99;
    this.ⲆΔⵠ[99] = f431(60, 60, 0, ᐃᐃ[1253], 3);
    this.ⲆΔⵠ[99].id = 99;
    this.ⵠΔᐃ[100] = f431(68, 68, 0, ᐃᐃ[1255], 3);
    this.ⵠΔᐃ[100].id = 100;
    this.ⲆᐃΔ[100] = f431(60, 60, 0, ᐃᐃ[1254], 3);
    this.ⲆᐃΔ[100].id = 100;
    this.ⲆΔⵠ[100] = f431(60, 60, 0, ᐃᐃ[1256], 3);
    this.ⲆΔⵠ[100].id = 100;
    this.ⵠΔᐃ[102] = f431(68, 68, 0, ᐃᐃ[962], 3);
    this.ⵠΔᐃ[102].id = 102;
    this.ⲆᐃΔ[102] = f431(60, 60, 0, ᐃᐃ[961], 3);
    this.ⲆᐃΔ[102].id = 102;
    this.ⲆΔⵠ[102] = f431(60, 60, 0, ᐃᐃ[963], 3);
    this.ⲆΔⵠ[102].id = 102;
    this.ⵠΔᐃ[155] = f431(68, 68, 0, ᐃᐃ[539], 3);
    this.ⵠΔᐃ[155].id = 155;
    this.ⲆᐃΔ[155] = f431(60, 60, 0, ᐃᐃ[537], 3);
    this.ⲆᐃΔ[155].id = 155;
    this.ⲆΔⵠ[155] = f431(60, 60, 0, ᐃᐃ[538], 3);
    this.ⲆΔⵠ[155].id = 155;
    this.ⵠΔᐃ[345] = f431(68, 68, 0, ᐃᐃ[1487], 3);
    this.ⵠΔᐃ[345].id = 345;
    this.ⲆᐃΔ[345] = f431(60, 60, 0, ᐃᐃ[1486], 3);
    this.ⲆᐃΔ[345].id = 345;
    this.ⵠΔᐃ[348] = f431(68, 68, 0, ᐃᐃ[1543], 3);
    this.ⵠΔᐃ[348].id = 348;
    this.ⲆᐃΔ[348] = f431(60, 60, 0, ᐃᐃ[1542], 3);
    this.ⲆᐃΔ[348].id = 348;
    this.ⵠΔᐃ[346] = f431(68, 68, 0, ᐃᐃ[1489], 3);
    this.ⵠΔᐃ[346].id = 346;
    this.ⲆᐃΔ[346] = f431(60, 60, 0, ᐃᐃ[1488], 3);
    this.ⲆᐃΔ[346].id = 346;
    this.ⵠΔᐃ[245] = f431(68, 68, 0, ᐃᐃ[1552], 3);
    this.ⵠΔᐃ[245].id = 245;
    this.ⲆᐃΔ[245] = f431(60, 60, 0, ᐃᐃ[1550], 3);
    this.ⲆᐃΔ[245].id = 245;
    this.ⲆΔⵠ[245] = f431(60, 60, 0, ᐃᐃ[1551], 3);
    this.ⲆΔⵠ[245].id = 245;
    this.ⵠΔᐃ[322] = f431(68, 68, 0, ᐃᐃ[1268], 3);
    this.ⵠΔᐃ[322].id = 322;
    this.ⲆᐃΔ[322] = f431(60, 60, 0, ᐃᐃ[1267], 3);
    this.ⲆᐃΔ[322].id = 322;
    this.ⲆΔⵠ[322] = f431(60, 60, 0, ᐃᐃ[1266], 3);
    this.ⲆΔⵠ[322].id = 322;
    this.ⵠΔᐃ[323] = f431(68, 68, 0, ᐃᐃ[1271], 3);
    this.ⵠΔᐃ[323].id = 323;
    this.ⲆᐃΔ[323] = f431(60, 60, 0, ᐃᐃ[1270], 3);
    this.ⲆᐃΔ[323].id = 323;
    this.ⲆΔⵠ[323] = f431(60, 60, 0, ᐃᐃ[1269], 3);
    this.ⲆΔⵠ[323].id = 323;
    this.ⵠΔᐃ[324] = f431(68, 68, 0, ᐃᐃ[1274], 3);
    this.ⵠΔᐃ[324].id = 324;
    this.ⲆᐃΔ[324] = f431(60, 60, 0, ᐃᐃ[1273], 3);
    this.ⲆᐃΔ[324].id = 324;
    this.ⲆΔⵠ[324] = f431(60, 60, 0, ᐃᐃ[1272], 3);
    this.ⲆΔⵠ[324].id = 324;
    this.ⵠΔᐃ[325] = f431(68, 68, 0, ᐃᐃ[1277], 3);
    this.ⵠΔᐃ[325].id = 325;
    this.ⲆᐃΔ[325] = f431(60, 60, 0, ᐃᐃ[1276], 3);
    this.ⲆᐃΔ[325].id = 325;
    this.ⲆΔⵠ[325] = f431(60, 60, 0, ᐃᐃ[1275], 3);
    this.ⲆΔⵠ[325].id = 325;
    this.ⵠΔᐃ[326] = f431(68, 68, 0, ᐃᐃ[1280], 3);
    this.ⵠΔᐃ[326].id = 326;
    this.ⲆᐃΔ[326] = f431(60, 60, 0, ᐃᐃ[1279], 3);
    this.ⲆᐃΔ[326].id = 326;
    this.ⲆΔⵠ[326] = f431(60, 60, 0, ᐃᐃ[1278], 3);
    this.ⲆΔⵠ[326].id = 326;
    this.ⵠΔᐃ[330] = f431(68, 68, 0, ᐃᐃ[1283], 3);
    this.ⵠΔᐃ[330].id = 330;
    this.ⲆᐃΔ[330] = f431(60, 60, 0, ᐃᐃ[1282], 3);
    this.ⲆᐃΔ[330].id = 330;
    this.ⲆΔⵠ[330] = f431(60, 60, 0, ᐃᐃ[1281], 3);
    this.ⲆΔⵠ[330].id = 330;
    this.ⵠΔᐃ[327] = f431(68, 68, 0, ᐃᐃ[1292], 3);
    this.ⵠΔᐃ[327].id = 327;
    this.ⲆᐃΔ[327] = f431(60, 60, 0, ᐃᐃ[1291], 3);
    this.ⲆᐃΔ[327].id = 327;
    this.ⲆΔⵠ[327] = f431(60, 60, 0, ᐃᐃ[1290], 3);
    this.ⲆΔⵠ[327].id = 327;
    this.ⵠΔᐃ[329] = f431(68, 68, 0, ᐃᐃ[1289], 3);
    this.ⵠΔᐃ[329].id = 329;
    this.ⲆᐃΔ[329] = f431(60, 60, 0, ᐃᐃ[1288], 3);
    this.ⲆᐃΔ[329].id = 329;
    this.ⲆΔⵠ[329] = f431(60, 60, 0, ᐃᐃ[1287], 3);
    this.ⲆΔⵠ[329].id = 329;
    this.ⵠΔᐃ[328] = f431(68, 68, 0, ᐃᐃ[1286], 3);
    this.ⵠΔᐃ[328].id = 328;
    this.ⲆᐃΔ[328] = f431(60, 60, 0, ᐃᐃ[1285], 3);
    this.ⲆᐃΔ[328].id = 328;
    this.ⲆΔⵠ[328] = f431(60, 60, 0, ᐃᐃ[1284], 3);
    this.ⲆΔⵠ[328].id = 328;
    this.ⵠΔᐃ[246] = f431(68, 68, 0, ᐃᐃ[1556], 3);
    this.ⵠΔᐃ[246].id = 246;
    this.ⲆᐃΔ[246] = f431(60, 60, 0, ᐃᐃ[1554], 3);
    this.ⲆᐃΔ[246].id = 246;
    this.ⲆΔⵠ[246] = f431(60, 60, 0, ᐃᐃ[1555], 3);
    this.ⲆΔⵠ[246].id = 246;
    this.ⵠΔᐃ[247] = f431(68, 68, 0, ᐃᐃ[1560], 3);
    this.ⵠΔᐃ[247].id = 247;
    this.ⲆᐃΔ[247] = f431(60, 60, 0, ᐃᐃ[1558], 3);
    this.ⲆᐃΔ[247].id = 247;
    this.ⲆΔⵠ[247] = f431(60, 60, 0, ᐃᐃ[1559], 3);
    this.ⲆΔⵠ[247].id = 247;
    this.ⵠΔᐃ[248] = f431(68, 68, 0, ᐃᐃ[1564], 3);
    this.ⵠΔᐃ[248].id = 248;
    this.ⲆᐃΔ[248] = f431(60, 60, 0, ᐃᐃ[1562], 3);
    this.ⲆᐃΔ[248].id = 248;
    this.ⲆΔⵠ[248] = f431(60, 60, 0, ᐃᐃ[1563], 3);
    this.ⲆΔⵠ[248].id = 248;
    this.ⵠΔᐃ[249] = f431(68, 68, 0, ᐃᐃ[1568], 3);
    this.ⵠΔᐃ[249].id = 249;
    this.ⲆᐃΔ[249] = f431(60, 60, 0, ᐃᐃ[1566], 3);
    this.ⲆᐃΔ[249].id = 249;
    this.ⲆΔⵠ[249] = f431(60, 60, 0, ᐃᐃ[1567], 3);
    this.ⲆΔⵠ[249].id = 249;
    this.ⵠΔᐃ[250] = f431(68, 68, 0, ᐃᐃ[1572], 3);
    this.ⵠΔᐃ[250].id = 250;
    this.ⲆᐃΔ[250] = f431(60, 60, 0, ᐃᐃ[1570], 3);
    this.ⲆᐃΔ[250].id = 250;
    this.ⲆΔⵠ[250] = f431(60, 60, 0, ᐃᐃ[1571], 3);
    this.ⲆΔⵠ[250].id = 250;
    this.ⵠΔᐃ[251] = f431(68, 68, 0, ᐃᐃ[1576], 3);
    this.ⵠΔᐃ[251].id = 251;
    this.ⲆᐃΔ[251] = f431(60, 60, 0, ᐃᐃ[1574], 3);
    this.ⲆᐃΔ[251].id = 251;
    this.ⲆΔⵠ[251] = f431(60, 60, 0, ᐃᐃ[1575], 3);
    this.ⲆΔⵠ[251].id = 251;
    this.ⵠΔᐃ[252] = f431(68, 68, 0, ᐃᐃ[1580], 3);
    this.ⵠΔᐃ[252].id = 252;
    this.ⲆᐃΔ[252] = f431(60, 60, 0, ᐃᐃ[1578], 3);
    this.ⲆᐃΔ[252].id = 252;
    this.ⲆΔⵠ[252] = f431(60, 60, 0, ᐃᐃ[1579], 3);
    this.ⲆΔⵠ[252].id = 252;
    this.ⵠΔᐃ[253] = f431(68, 68, 0, ᐃᐃ[1584], 3);
    this.ⵠΔᐃ[253].id = 253;
    this.ⲆᐃΔ[253] = f431(60, 60, 0, ᐃᐃ[1582], 3);
    this.ⲆᐃΔ[253].id = 253;
    this.ⲆΔⵠ[253] = f431(60, 60, 0, ᐃᐃ[1583], 3);
    this.ⲆΔⵠ[253].id = 253;
    this.ⵠΔᐃ[254] = f431(68, 68, 0, ᐃᐃ[1588], 3);
    this.ⵠΔᐃ[254].id = 254;
    this.ⲆᐃΔ[254] = f431(60, 60, 0, ᐃᐃ[1586], 3);
    this.ⲆᐃΔ[254].id = 254;
    this.ⲆΔⵠ[254] = f431(60, 60, 0, ᐃᐃ[1587], 3);
    this.ⲆΔⵠ[254].id = 254;
    this.ⵠΔᐃ[255] = f431(68, 68, 0, ᐃᐃ[1592], 3);
    this.ⵠΔᐃ[255].id = 255;
    this.ⲆᐃΔ[255] = f431(60, 60, 0, ᐃᐃ[1590], 3);
    this.ⲆᐃΔ[255].id = 255;
    this.ⲆΔⵠ[255] = f431(60, 60, 0, ᐃᐃ[1591], 3);
    this.ⲆΔⵠ[255].id = 255;
    this.ⵠΔᐃ[256] = f431(68, 68, 0, ᐃᐃ[1596], 3);
    this.ⵠΔᐃ[256].id = 256;
    this.ⲆᐃΔ[256] = f431(60, 60, 0, ᐃᐃ[1594], 3);
    this.ⲆᐃΔ[256].id = 256;
    this.ⲆΔⵠ[256] = f431(60, 60, 0, ᐃᐃ[1595], 3);
    this.ⲆΔⵠ[256].id = 256;
    this.ⵠΔᐃ[257] = f431(68, 68, 0, ᐃᐃ[1600], 3);
    this.ⵠΔᐃ[257].id = 257;
    this.ⲆᐃΔ[257] = f431(60, 60, 0, ᐃᐃ[1598], 3);
    this.ⲆᐃΔ[257].id = 257;
    this.ⲆΔⵠ[257] = f431(60, 60, 0, ᐃᐃ[1599], 3);
    this.ⲆΔⵠ[257].id = 257;
    this.ⵠΔᐃ[258] = f431(68, 68, 0, ᐃᐃ[1604], 3);
    this.ⵠΔᐃ[258].id = 258;
    this.ⲆᐃΔ[258] = f431(60, 60, 0, ᐃᐃ[1602], 3);
    this.ⲆᐃΔ[258].id = 258;
    this.ⲆΔⵠ[258] = f431(60, 60, 0, ᐃᐃ[1603], 3);
    this.ⲆΔⵠ[258].id = 258;
    this.ⵠΔᐃ[259] = f431(68, 68, 0, ᐃᐃ[1608], 3);
    this.ⵠΔᐃ[259].id = 259;
    this.ⲆᐃΔ[259] = f431(60, 60, 0, ᐃᐃ[1606], 3);
    this.ⲆᐃΔ[259].id = 259;
    this.ⲆΔⵠ[259] = f431(60, 60, 0, ᐃᐃ[1607], 3);
    this.ⲆΔⵠ[259].id = 259;
    this.ⵠΔᐃ[305] = f431(68, 68, 0, ᐃᐃ[1213], 3);
    this.ⵠΔᐃ[305].id = 305;
    this.ⲆᐃΔ[305] = f431(60, 60, 0, ᐃᐃ[1212], 3);
    this.ⲆᐃΔ[305].id = 305;
    this.ⲆᐃΔ[305].info.Δⵠ[2] = this.ⲆᐃΔ[305].info.Δⵠ[0];
    this.ⵠΔᐃ[243] = f431(68, 68, 0, ᐃᐃ[662], 3);
    this.ⵠΔᐃ[243].id = 243;
    this.ⲆᐃΔ[243] = f431(60, 60, 0, ᐃᐃ[661], 3);
    this.ⲆᐃΔ[243].id = 243;
    this.ⲆᐃΔ[243].info.Δⵠ[2] = this.ⲆᐃΔ[243].info.Δⵠ[0];
    this.ⵠΔᐃ[304] = f431(68, 68, 0, ᐃᐃ[1215], 3);
    this.ⵠΔᐃ[304].id = 304;
    this.ⲆᐃΔ[304] = f431(60, 60, 0, ᐃᐃ[1214], 3);
    this.ⲆᐃΔ[304].id = 304;
    this.ⲆᐃΔ[304].info.Δⵠ[2] = this.ⲆᐃΔ[304].info.Δⵠ[0];
    this.ⵠΔᐃ[28] = f431(68, 68, 0, ᐃᐃ[1210], 3);
    this.ⵠΔᐃ[28].id = 28;
    this.ⲆᐃΔ[28] = f431(60, 60, 0, ᐃᐃ[1208], 3);
    this.ⲆᐃΔ[28].id = 28;
    this.ⲆΔⵠ[28] = f431(60, 60, 0, ᐃᐃ[1209], 3);
    this.ⲆΔⵠ[28].id = 28;
    this.ⵠΔᐃ[29] = f431(68, 68, 0, ᐃᐃ[1199], 3);
    this.ⵠΔᐃ[29].id = 29;
    this.ⲆᐃΔ[29] = f431(60, 60, 0, ᐃᐃ[1197], 3);
    this.ⲆᐃΔ[29].id = 29;
    this.ⲆΔⵠ[29] = f431(60, 60, 0, ᐃᐃ[1198], 3);
    this.ⲆΔⵠ[29].id = 29;
    this.ⵠΔᐃ[30] = f431(68, 68, 0, ᐃᐃ[1203], 3);
    this.ⵠΔᐃ[30].id = 30;
    this.ⲆᐃΔ[30] = f431(60, 60, 0, ᐃᐃ[1201], 3);
    this.ⲆᐃΔ[30].id = 30;
    this.ⲆΔⵠ[30] = f431(60, 60, 0, ᐃᐃ[1202], 3);
    this.ⲆΔⵠ[30].id = 30;
    this.ⵠΔᐃ[31] = f431(68, 68, 0, ᐃᐃ[1207], 3);
    this.ⵠΔᐃ[31].id = 31;
    this.ⲆᐃΔ[31] = f431(60, 60, 0, ᐃᐃ[1205], 3);
    this.ⲆᐃΔ[31].id = 31;
    this.ⲆΔⵠ[31] = f431(60, 60, 0, ᐃᐃ[1206], 3);
    this.ⲆΔⵠ[31].id = 31;
    this.ⵠΔᐃ[106] = f431(68, 68, 0, ᐃᐃ[985], 3);
    this.ⵠΔᐃ[106].id = 106;
    this.ⲆᐃΔ[106] = f431(60, 60, 0, ᐃᐃ[984], 3);
    this.ⲆᐃΔ[106].id = 106;
    this.ⲆΔⵠ[106] = f431(60, 60, 0, ᐃᐃ[986], 3);
    this.ⲆΔⵠ[106].id = 106;
    this.ⵠΔᐃ[163] = f431(68, 68, 0, ᐃᐃ[988], 3);
    this.ⵠΔᐃ[163].id = 163;
    this.ⲆᐃΔ[163] = f431(60, 60, 0, ᐃᐃ[987], 3);
    this.ⲆᐃΔ[163].id = 163;
    this.ⲆΔⵠ[163] = f431(60, 60, 0, ᐃᐃ[989], 3);
    this.ⲆΔⵠ[163].id = 163;
    this.ⵠΔᐃ[165] = f431(68, 68, 0, ᐃᐃ[994], 3);
    this.ⵠΔᐃ[165].id = 165;
    this.ⲆᐃΔ[165] = f431(60, 60, 0, ᐃᐃ[993], 3);
    this.ⲆᐃΔ[165].id = 165;
    this.ⲆΔⵠ[165] = f431(60, 60, 0, ᐃᐃ[995], 3);
    this.ⲆΔⵠ[165].id = 165;
    this.ⵠΔᐃ[166] = f431(68, 68, 0, ᐃᐃ[997], 3);
    this.ⵠΔᐃ[166].id = 166;
    this.ⲆᐃΔ[166] = f431(60, 60, 0, ᐃᐃ[996], 3);
    this.ⲆᐃΔ[166].id = 166;
    this.ⲆΔⵠ[166] = f431(60, 60, 0, ᐃᐃ[998], 3);
    this.ⲆΔⵠ[166].id = 166;
    this.ⵠΔᐃ[164] = f431(68, 68, 0, ᐃᐃ[991], 3);
    this.ⵠΔᐃ[164].id = 164;
    this.ⲆᐃΔ[164] = f431(60, 60, 0, ᐃᐃ[990], 3);
    this.ⲆᐃΔ[164].id = 164;
    this.ⲆΔⵠ[164] = f431(60, 60, 0, ᐃᐃ[992], 3);
    this.ⲆΔⵠ[164].id = 164;
    this.ⵠΔᐃ[182] = f431(68, 68, 0, ᐃᐃ[1493], 3);
    this.ⵠΔᐃ[182].id = 182;
    this.ⲆᐃΔ[182] = f431(60, 60, 0, ᐃᐃ[1492], 3);
    this.ⲆᐃΔ[182].id = 182;
    this.ⲆΔⵠ[182] = f431(60, 60, 0, ᐃᐃ[v585.ⲆΔⲆⵠᐃⲆΔⲆᐃ], 3);
    this.ⲆΔⵠ[182].id = 182;
    this.ⵠΔᐃ[61] = f431(68, 68, 0, ᐃᐃ[1221], 3);
    this.ⵠΔᐃ[61].id = 61;
    this.ⲆᐃΔ[61] = f431(60, 60, 0, ᐃᐃ[1219], 3);
    this.ⲆᐃΔ[61].id = 61;
    this.ⲆΔⵠ[61] = f431(60, 60, 0, ᐃᐃ[1220], 3);
    this.ⲆΔⵠ[61].id = 61;
    this.ⵠΔᐃ[71] = f431(68, 68, 0, ᐃᐃ[1224], 3);
    this.ⵠΔᐃ[71].id = 71;
    this.ⲆᐃΔ[71] = f431(60, 60, 0, ᐃᐃ[1222], 3);
    this.ⲆᐃΔ[71].id = 71;
    this.ⲆΔⵠ[71] = f431(60, 60, 0, ᐃᐃ[1223], 3);
    this.ⲆΔⵠ[71].id = 71;
    this.ⵠΔᐃ[17] = f431(68, 68, 0, ᐃᐃ[1127], 3);
    this.ⵠΔᐃ[17].id = 17;
    this.ⲆᐃΔ[17] = f431(60, 60, 0, ᐃᐃ[1126], 3);
    this.ⲆᐃΔ[17].id = 17;
    this.ⲆΔⵠ[17] = f431(60, 60, 0, ᐃᐃ[1128], 3);
    this.ⲆΔⵠ[17].id = 17;
    this.ⵠΔᐃ[109] = f431(68, 68, 0, ᐃᐃ[733], 3);
    this.ⵠΔᐃ[109].id = 109;
    this.ⲆᐃΔ[109] = f431(60, 60, 0, ᐃᐃ[731], 3);
    this.ⲆᐃΔ[109].id = 109;
    this.ⲆΔⵠ[109] = f431(60, 60, 0, ᐃᐃ[732], 3);
    this.ⲆΔⵠ[109].id = 109;
    this.ⵠΔᐃ[289] = f431(68, 68, 0, ᐃᐃ[810], 3);
    this.ⵠΔᐃ[289].id = 289;
    this.ⲆᐃΔ[289] = f431(60, 60, 0, ᐃᐃ[363], 3);
    this.ⲆᐃΔ[289].id = 289;
    this.ⵠΔᐃ[v588.ᐃⲆⵠⲆᐃΔⵠ] = f431(68, 68, 0, ᐃᐃ[v585.ΔⲆΔΔΔⲆΔⵠᐃ], 3);
    this.ⵠΔᐃ[v588.ᐃⲆⵠⲆᐃΔⵠ].id = v588.ᐃⲆⵠⲆᐃΔⵠ;
    this.ⲆᐃΔ[v588.ᐃⲆⵠⲆᐃΔⵠ] = f431(60, 60, 0, ᐃᐃ[v585.ᐃΔᐃᐃΔⲆⲆΔᐃ], 3);
    this.ⲆᐃΔ[v588.ᐃⲆⵠⲆᐃΔⵠ].id = v588.ᐃⲆⵠⲆᐃΔⵠ;
    this.ⵠΔᐃ[v588.ᐃⵠⵠⲆᐃⵠⲆ] = f431(68, 68, 0, ᐃᐃ[v585.ᐃᐃΔΔᐃⵠΔᐃⵠ], 3);
    this.ⵠΔᐃ[v588.ᐃⵠⵠⲆᐃⵠⲆ].id = v588.ᐃⵠⵠⲆᐃⵠⲆ;
    this.ⲆᐃΔ[v588.ᐃⵠⵠⲆᐃⵠⲆ] = f431(60, 60, 0, ᐃᐃ[v585.ⲆΔⵠᐃᐃᐃΔⲆᐃ], 3);
    this.ⲆᐃΔ[v588.ᐃⵠⵠⲆᐃⵠⲆ].id = v588.ᐃⵠⵠⲆᐃⵠⲆ;
    this.ⵠΔᐃ[v588.ⵠⵠΔΔᐃⵠΔ] = f431(68, 68, 0, ᐃᐃ[v585.ⵠΔΔⵠⲆⵠᐃᐃᐃ], 3);
    this.ⵠΔᐃ[v588.ⵠⵠΔΔᐃⵠΔ].id = v588.ⵠⵠΔΔᐃⵠΔ;
    this.ⲆᐃΔ[v588.ⵠⵠΔΔᐃⵠΔ] = f431(60, 60, 0, ᐃᐃ[v585.ⵠⲆΔⲆⵠΔΔᐃⲆ], 3);
    this.ⲆᐃΔ[v588.ⵠⵠΔΔᐃⵠΔ].id = v588.ⵠⵠΔΔᐃⵠΔ;
    this.ⵠΔᐃ[v588.ⵠᐃΔⵠⲆⲆⲆ] = f431(68, 68, 0, ᐃᐃ[v585.ⵠⲆⲆⲆΔΔⲆΔⲆ], 3);
    this.ⵠΔᐃ[v588.ⵠᐃΔⵠⲆⲆⲆ].id = v588.ⵠᐃΔⵠⲆⲆⲆ;
    this.ⲆᐃΔ[v588.ⵠᐃΔⵠⲆⲆⲆ] = f431(60, 60, 0, ᐃᐃ[v585.ΔΔᐃΔᐃᐃΔΔΔ], 3);
    this.ⲆᐃΔ[v588.ⵠᐃΔⵠⲆⲆⲆ].id = v588.ⵠᐃΔⵠⲆⲆⲆ;
    this.ⵠΔᐃ[v588.ⲆⲆΔᐃⵠⲆᐃ] = f431(68, 68, 0, ᐃᐃ[v585.ᐃᐃⵠⲆΔⵠⵠⵠᐃ], 3);
    this.ⵠΔᐃ[v588.ⲆⲆΔᐃⵠⲆᐃ].id = v588.ⲆⲆΔᐃⵠⲆᐃ;
    this.ⲆᐃΔ[v588.ⲆⲆΔᐃⵠⲆᐃ] = f431(60, 60, 0, ᐃᐃ[v585.ᐃⵠᐃⲆᐃⲆⲆΔⵠ], 3);
    this.ⲆᐃΔ[v588.ⲆⲆΔᐃⵠⲆᐃ].id = v588.ⲆⲆΔᐃⵠⲆᐃ;
    this.ⵠΔᐃ[306] = f431(68, 68, 0, ᐃᐃ[1721], 3);
    this.ⵠΔᐃ[306].id = 306;
    this.ⲆᐃΔ[306] = f431(60, 60, 0, ᐃᐃ[1722], 3);
    this.ⲆᐃΔ[306].id = 306;
    this.ⲆᐃΔ[306].info.Δⵠ[2] = this.ⲆᐃΔ[306].info.Δⵠ[0];
    this.ⵠΔᐃ[307] = f431(68, 68, 0, ᐃᐃ[1723], 3);
    this.ⵠΔᐃ[307].id = 307;
    this.ⲆᐃΔ[307] = f431(60, 60, 0, ᐃᐃ[1724], 3);
    this.ⲆᐃΔ[307].id = 307;
    this.ⲆᐃΔ[307].info.Δⵠ[2] = this.ⲆᐃΔ[307].info.Δⵠ[0];
    this.ⵠΔᐃ[308] = f431(68, 68, 0, ᐃᐃ[1725], 3);
    this.ⵠΔᐃ[308].id = 308;
    this.ⲆᐃΔ[308] = f431(60, 60, 0, ᐃᐃ[1726], 3);
    this.ⲆᐃΔ[308].id = 308;
    this.ⲆᐃΔ[308].info.Δⵠ[2] = this.ⲆᐃΔ[308].info.Δⵠ[0];
    this.ⵠΔᐃ[309] = f431(68, 68, 0, ᐃᐃ[1727], 3);
    this.ⵠΔᐃ[309].id = 309;
    this.ⲆᐃΔ[309] = f431(60, 60, 0, ᐃᐃ[1728], 3);
    this.ⲆᐃΔ[309].id = 309;
    this.ⲆᐃΔ[309].info.Δⵠ[2] = this.ⲆᐃΔ[309].info.Δⵠ[0];
    this.ⵠΔᐃ[310] = f431(68, 68, 0, ᐃᐃ[1729], 3);
    this.ⵠΔᐃ[310].id = 310;
    this.ⲆᐃΔ[310] = f431(60, 60, 0, ᐃᐃ[1730], 3);
    this.ⲆᐃΔ[310].id = 310;
    this.ⲆᐃΔ[310].info.Δⵠ[2] = this.ⲆᐃΔ[310].info.Δⵠ[0];
    this.ⵠΔᐃ[311] = f431(68, 68, 0, ᐃᐃ[1731], 3);
    this.ⵠΔᐃ[311].id = 311;
    this.ⲆᐃΔ[311] = f431(60, 60, 0, ᐃᐃ[1732], 3);
    this.ⲆᐃΔ[311].id = 311;
    this.ⲆᐃΔ[311].info.Δⵠ[2] = this.ⲆᐃΔ[311].info.Δⵠ[0];
    this.ⵠΔᐃ[313] = f431(68, 68, 0, ᐃᐃ[1735], 3);
    this.ⵠΔᐃ[313].id = 313;
    this.ⲆᐃΔ[313] = f431(60, 60, 0, ᐃᐃ[1736], 3);
    this.ⲆᐃΔ[313].id = 313;
    this.ⲆᐃΔ[313].info.Δⵠ[2] = this.ⲆᐃΔ[313].info.Δⵠ[0];
    this.ⵠΔᐃ[312] = f431(68, 68, 0, ᐃᐃ[1733], 3);
    this.ⵠΔᐃ[312].id = 312;
    this.ⲆᐃΔ[312] = f431(60, 60, 0, ᐃᐃ[1734], 3);
    this.ⲆᐃΔ[312].id = 312;
    this.ⲆᐃΔ[312].info.Δⵠ[2] = this.ⲆᐃΔ[312].info.Δⵠ[0];
    this.ⵠΔᐃ[357] = f431(68, 68, 0, ᐃᐃ[1742], 3);
    this.ⵠΔᐃ[357].id = 357;
    this.ⲆᐃΔ[357] = f431(60, 60, 0, ᐃᐃ[1740], 3);
    this.ⲆᐃΔ[357].id = 357;
    this.ⲆΔⵠ[357] = f431(60, 60, 0, ᐃᐃ[1741], 3);
    this.ⲆΔⵠ[357].id = 357;
    this.ⵠΔᐃ[356] = f431(68, 68, 0, ᐃᐃ[1737], 3);
    this.ⵠΔᐃ[356].id = 356;
    this.ⲆᐃΔ[356] = f431(60, 60, 0, ᐃᐃ[1738], 3);
    this.ⲆᐃΔ[356].id = 356;
    this.ⵠΔᐃ[357] = f431(68, 68, 0, ᐃᐃ[1742], 3);
    this.ⵠΔᐃ[357].id = 357;
    this.ⲆᐃΔ[357] = f431(60, 60, 0, ᐃᐃ[1740], 3);
    this.ⲆᐃΔ[357].id = 357;
    this.ⲆΔⵠ[357] = f431(60, 60, 0, ᐃᐃ[1741], 3);
    this.ⲆΔⵠ[357].id = 357;
    this.ⵠΔᐃ[37] = f431(68, 68, 0, ᐃᐃ[551], 3);
    this.ⵠΔᐃ[37].id = 37;
    this.ⲆᐃΔ[37] = f431(60, 60, 0, ᐃᐃ[549], 3);
    this.ⲆᐃΔ[37].id = 37;
    this.ⲆΔⵠ[37] = f431(60, 60, 0, ᐃᐃ[550], 3);
    this.ⲆΔⵠ[37].id = 37;
    this.ⵠΔᐃ[38] = f431(68, 68, 0, ᐃᐃ[554], 3);
    this.ⵠΔᐃ[38].id = 38;
    this.ⲆᐃΔ[38] = f431(60, 60, 0, ᐃᐃ[552], 3);
    this.ⲆᐃΔ[38].id = 38;
    this.ⲆΔⵠ[38] = f431(60, 60, 0, ᐃᐃ[553], 3);
    this.ⲆΔⵠ[38].id = 38;
    this.ⵠΔᐃ[39] = f431(68, 68, 0, ᐃᐃ[557], 3);
    this.ⵠΔᐃ[39].id = 39;
    this.ⲆᐃΔ[39] = f431(60, 60, 0, ᐃᐃ[555], 3);
    this.ⲆᐃΔ[39].id = 39;
    this.ⲆΔⵠ[39] = f431(60, 60, 0, ᐃᐃ[556], 3);
    this.ⲆΔⵠ[39].id = 39;
    this.ⵠΔᐃ[40] = f431(68, 68, 0, ᐃᐃ[560], 3);
    this.ⵠΔᐃ[40].id = 40;
    this.ⲆᐃΔ[40] = f431(60, 60, 0, ᐃᐃ[558], 3);
    this.ⲆᐃΔ[40].id = 40;
    this.ⲆΔⵠ[40] = f431(60, 60, 0, ᐃᐃ[559], 3);
    this.ⲆΔⵠ[40].id = 40;
    this.ⵠΔᐃ[41] = f431(68, 68, 0, ᐃᐃ[563], 3);
    this.ⵠΔᐃ[41].id = 41;
    this.ⲆᐃΔ[41] = f431(60, 60, 0, ᐃᐃ[561], 3);
    this.ⲆᐃΔ[41].id = 41;
    this.ⲆΔⵠ[41] = f431(60, 60, 0, ᐃᐃ[562], 3);
    this.ⲆΔⵠ[41].id = 41;
    this.ⵠΔᐃ[42] = f431(68, 68, 0, ᐃᐃ[566], 3);
    this.ⵠΔᐃ[42].id = 42;
    this.ⲆᐃΔ[42] = f431(60, 60, 0, ᐃᐃ[564], 3);
    this.ⲆᐃΔ[42].id = 42;
    this.ⲆΔⵠ[42] = f431(60, 60, 0, ᐃᐃ[565], 3);
    this.ⲆΔⵠ[42].id = 42;
    this.ⵠΔᐃ[43] = f431(68, 68, 0, ᐃᐃ[569], 3);
    this.ⵠΔᐃ[43].id = 43;
    this.ⲆᐃΔ[43] = f431(60, 60, 0, ᐃᐃ[567], 3);
    this.ⲆᐃΔ[43].id = 43;
    this.ⲆΔⵠ[43] = f431(60, 60, 0, ᐃᐃ[568], 3);
    this.ⲆΔⵠ[43].id = 43;
    this.ⵠΔᐃ[44] = f431(68, 68, 0, ᐃᐃ[572], 3);
    this.ⵠΔᐃ[44].id = 44;
    this.ⲆᐃΔ[44] = f431(60, 60, 0, ᐃᐃ[570], 3);
    this.ⲆᐃΔ[44].id = 44;
    this.ⲆΔⵠ[44] = f431(60, 60, 0, ᐃᐃ[571], 3);
    this.ⲆΔⵠ[44].id = 44;
    this.ⵠΔᐃ[45] = f431(68, 68, 0, ᐃᐃ[575], 3);
    this.ⵠΔᐃ[45].id = 45;
    this.ⲆᐃΔ[45] = f431(60, 60, 0, ᐃᐃ[573], 3);
    this.ⲆᐃΔ[45].id = 45;
    this.ⲆΔⵠ[45] = f431(60, 60, 0, ᐃᐃ[574], 3);
    this.ⲆΔⵠ[45].id = 45;
    this.ⵠΔᐃ[51] = f431(68, 68, 0, ᐃᐃ[1297], 3);
    this.ⵠΔᐃ[51].id = 51;
    this.ⲆᐃΔ[51] = f431(60, 60, 0, ᐃᐃ[1296], 3);
    this.ⲆᐃΔ[51].id = 51;
    this.ⲆΔⵠ[51] = f431(60, 60, 0, ᐃᐃ[1298], 3);
    this.ⲆΔⵠ[51].id = 51;
    this.ⵠΔᐃ[52] = f431(68, 68, 0, ᐃᐃ[1300], 3);
    this.ⵠΔᐃ[52].id = 52;
    this.ⲆᐃΔ[52] = f431(60, 60, 0, ᐃᐃ[1299], 3);
    this.ⲆᐃΔ[52].id = 52;
    this.ⲆΔⵠ[52] = f431(60, 60, 0, ᐃᐃ[1301], 3);
    this.ⲆΔⵠ[52].id = 52;
    this.ⵠΔᐃ[53] = f431(68, 68, 0, ᐃᐃ[1303], 3);
    this.ⵠΔᐃ[53].id = 53;
    this.ⲆᐃΔ[53] = f431(60, 60, 0, ᐃᐃ[1302], 3);
    this.ⲆᐃΔ[53].id = 53;
    this.ⲆΔⵠ[53] = f431(60, 60, 0, ᐃᐃ[1304], 3);
    this.ⲆΔⵠ[53].id = 53;
    this.ⵠΔᐃ[54] = f431(68, 68, 0, ᐃᐃ[1306], 3);
    this.ⵠΔᐃ[54].id = 54;
    this.ⲆᐃΔ[54] = f431(60, 60, 0, ᐃᐃ[1305], 3);
    this.ⲆᐃΔ[54].id = 54;
    this.ⲆΔⵠ[54] = f431(60, 60, 0, ᐃᐃ[1307], 3);
    this.ⲆΔⵠ[54].id = 54;
    this.ⵠΔᐃ[55] = f431(68, 68, 0, ᐃᐃ[1309], 3);
    this.ⵠΔᐃ[55].id = 55;
    this.ⲆᐃΔ[55] = f431(60, 60, 0, ᐃᐃ[1308], 3);
    this.ⲆᐃΔ[55].id = 55;
    this.ⲆΔⵠ[55] = f431(60, 60, 0, ᐃᐃ[1310], 3);
    this.ⲆΔⵠ[55].id = 55;
    this.ⵠΔᐃ[56] = f431(68, 68, 0, ᐃᐃ[1312], 3);
    this.ⵠΔᐃ[56].id = 56;
    this.ⲆᐃΔ[56] = f431(60, 60, 0, ᐃᐃ[1311], 3);
    this.ⲆᐃΔ[56].id = 56;
    this.ⲆΔⵠ[56] = f431(60, 60, 0, ᐃᐃ[1313], 3);
    this.ⲆΔⵠ[56].id = 56;
    this.ⵠΔᐃ[57] = f431(68, 68, 0, ᐃᐃ[1315], 3);
    this.ⵠΔᐃ[57].id = 57;
    this.ⲆᐃΔ[57] = f431(60, 60, 0, ᐃᐃ[1314], 3);
    this.ⲆᐃΔ[57].id = 57;
    this.ⲆΔⵠ[57] = f431(60, 60, 0, ᐃᐃ[1316], 3);
    this.ⲆΔⵠ[57].id = 57;
    this.ⵠΔᐃ[59] = f431(68, 68, 0, ᐃᐃ[1321], 3);
    this.ⵠΔᐃ[59].id = 59;
    this.ⲆᐃΔ[59] = f431(60, 60, 0, ᐃᐃ[1320], 3);
    this.ⲆᐃΔ[59].id = 59;
    this.ⲆΔⵠ[59] = f431(60, 60, 0, ᐃᐃ[1322], 3);
    this.ⲆΔⵠ[59].id = 59;
    this.ⵠΔᐃ[58] = f431(68, 68, 0, ᐃᐃ[1318], 3);
    this.ⵠΔᐃ[58].id = 58;
    this.ⲆᐃΔ[58] = f431(60, 60, 0, ᐃᐃ[1317], 3);
    this.ⲆᐃΔ[58].id = 58;
    this.ⲆΔⵠ[58] = f431(60, 60, 0, ᐃᐃ[1319], 3);
    this.ⲆΔⵠ[58].id = 58;
    this.ⵠΔᐃ[73] = f431(68, 68, 0, ᐃᐃ[693], 3);
    this.ⵠΔᐃ[73].id = 73;
    this.ⲆᐃΔ[73] = f431(60, 60, 0, ᐃᐃ[691], 3);
    this.ⲆᐃΔ[73].id = 73;
    this.ⲆΔⵠ[73] = f431(60, 60, 0, ᐃᐃ[692], 3);
    this.ⲆΔⵠ[73].id = 73;
    this.ⵠΔᐃ[74] = f431(68, 68, 0, ᐃᐃ[696], 3);
    this.ⵠΔᐃ[74].id = 74;
    this.ⲆᐃΔ[74] = f431(60, 60, 0, ᐃᐃ[694], 3);
    this.ⲆᐃΔ[74].id = 74;
    this.ⲆΔⵠ[74] = f431(60, 60, 0, ᐃᐃ[695], 3);
    this.ⲆΔⵠ[74].id = 74;
    this.ⵠΔᐃ[75] = f431(68, 68, 0, ᐃᐃ[699], 3);
    this.ⵠΔᐃ[75].id = 75;
    this.ⲆᐃΔ[75] = f431(60, 60, 0, ᐃᐃ[697], 3);
    this.ⲆᐃΔ[75].id = 75;
    this.ⲆΔⵠ[75] = f431(60, 60, 0, ᐃᐃ[698], 3);
    this.ⲆΔⵠ[75].id = 75;
    this.ⵠΔᐃ[76] = f431(68, 68, 0, ᐃᐃ[702], 3);
    this.ⵠΔᐃ[76].id = 76;
    this.ⲆᐃΔ[76] = f431(60, 60, 0, ᐃᐃ[700], 3);
    this.ⲆᐃΔ[76].id = 76;
    this.ⲆΔⵠ[76] = f431(60, 60, 0, ᐃᐃ[701], 3);
    this.ⲆΔⵠ[76].id = 76;
    this.ⵠΔᐃ[77] = f431(68, 68, 0, ᐃᐃ[705], 3);
    this.ⵠΔᐃ[77].id = 77;
    this.ⲆᐃΔ[77] = f431(60, 60, 0, ᐃᐃ[703], 3);
    this.ⲆᐃΔ[77].id = 77;
    this.ⲆΔⵠ[77] = f431(60, 60, 0, ᐃᐃ[704], 3);
    this.ⲆΔⵠ[77].id = 77;
    this.ⵠΔᐃ[78] = f431(68, 68, 0, ᐃᐃ[708], 3);
    this.ⵠΔᐃ[78].id = 78;
    this.ⲆᐃΔ[78] = f431(60, 60, 0, ᐃᐃ[706], 3);
    this.ⲆᐃΔ[78].id = 78;
    this.ⲆΔⵠ[78] = f431(60, 60, 0, ᐃᐃ[707], 3);
    this.ⲆΔⵠ[78].id = 78;
    this.ⵠΔᐃ[79] = f431(68, 68, 0, ᐃᐃ[711], 3);
    this.ⵠΔᐃ[79].id = 79;
    this.ⲆᐃΔ[79] = f431(60, 60, 0, ᐃᐃ[709], 3);
    this.ⲆᐃΔ[79].id = 79;
    this.ⲆΔⵠ[79] = f431(60, 60, 0, ᐃᐃ[710], 3);
    this.ⲆΔⵠ[79].id = 79;
    this.ⵠΔᐃ[81] = f431(68, 68, 0, ᐃᐃ[717], 3);
    this.ⵠΔᐃ[81].id = 81;
    this.ⲆᐃΔ[81] = f431(60, 60, 0, ᐃᐃ[715], 3);
    this.ⲆᐃΔ[81].id = 81;
    this.ⲆΔⵠ[81] = f431(60, 60, 0, ᐃᐃ[716], 3);
    this.ⲆΔⵠ[81].id = 81;
    this.ⵠΔᐃ[80] = f431(68, 68, 0, ᐃᐃ[714], 3);
    this.ⵠΔᐃ[80].id = 80;
    this.ⲆᐃΔ[80] = f431(60, 60, 0, ᐃᐃ[712], 3);
    this.ⲆᐃΔ[80].id = 80;
    this.ⲆΔⵠ[80] = f431(60, 60, 0, ᐃᐃ[713], 3);
    this.ⲆΔⵠ[80].id = 80;
    this.ⵠΔᐃ[90] = f431(68, 68, 0, ᐃᐃ[929], 3);
    this.ⵠΔᐃ[90].id = 90;
    this.ⲆᐃΔ[90] = f431(60, 60, 0, ᐃᐃ[927], 3);
    this.ⲆᐃΔ[90].id = 90;
    this.ⲆΔⵠ[90] = f431(60, 60, 0, ᐃᐃ[928], 3);
    this.ⲆΔⵠ[90].id = 90;
    this.ⵠΔᐃ[91] = f431(68, 68, 0, ᐃᐃ[932], 3);
    this.ⵠΔᐃ[91].id = 91;
    this.ⲆᐃΔ[91] = f431(60, 60, 0, ᐃᐃ[930], 3);
    this.ⲆᐃΔ[91].id = 91;
    this.ⲆΔⵠ[91] = f431(60, 60, 0, ᐃᐃ[931], 3);
    this.ⲆΔⵠ[91].id = 91;
    this.ⵠΔᐃ[92] = f431(68, 68, 0, ᐃᐃ[935], 3);
    this.ⵠΔᐃ[92].id = 92;
    this.ⲆᐃΔ[92] = f431(60, 60, 0, ᐃᐃ[933], 3);
    this.ⲆᐃΔ[92].id = 92;
    this.ⲆΔⵠ[92] = f431(60, 60, 0, ᐃᐃ[934], 3);
    this.ⲆΔⵠ[92].id = 92;
    this.ⵠΔᐃ[93] = f431(68, 68, 0, ᐃᐃ[938], 3);
    this.ⵠΔᐃ[93].id = 93;
    this.ⲆᐃΔ[93] = f431(60, 60, 0, ᐃᐃ[936], 3);
    this.ⲆᐃΔ[93].id = 93;
    this.ⲆΔⵠ[93] = f431(60, 60, 0, ᐃᐃ[937], 3);
    this.ⲆΔⵠ[93].id = 93;
    this.ⵠΔᐃ[94] = f431(68, 68, 0, ᐃᐃ[941], 3);
    this.ⵠΔᐃ[94].id = 94;
    this.ⲆᐃΔ[94] = f431(60, 60, 0, ᐃᐃ[939], 3);
    this.ⲆᐃΔ[94].id = 94;
    this.ⲆΔⵠ[94] = f431(60, 60, 0, ᐃᐃ[940], 3);
    this.ⲆΔⵠ[94].id = 94;
    this.ⵠΔᐃ[95] = f431(68, 68, 0, ᐃᐃ[944], 3);
    this.ⵠΔᐃ[95].id = 95;
    this.ⲆᐃΔ[95] = f431(60, 60, 0, ᐃᐃ[942], 3);
    this.ⲆᐃΔ[95].id = 95;
    this.ⲆΔⵠ[95] = f431(60, 60, 0, ᐃᐃ[943], 3);
    this.ⲆΔⵠ[95].id = 95;
    this.ⵠΔᐃ[96] = f431(68, 68, 0, ᐃᐃ[947], 3);
    this.ⵠΔᐃ[96].id = 96;
    this.ⲆᐃΔ[96] = f431(60, 60, 0, ᐃᐃ[945], 3);
    this.ⲆᐃΔ[96].id = 96;
    this.ⲆΔⵠ[96] = f431(60, 60, 0, ᐃᐃ[946], 3);
    this.ⲆΔⵠ[96].id = 96;
    this.ⵠΔᐃ[98] = f431(68, 68, 0, ᐃᐃ[953], 3);
    this.ⵠΔᐃ[98].id = 98;
    this.ⲆᐃΔ[98] = f431(60, 60, 0, ᐃᐃ[951], 3);
    this.ⲆᐃΔ[98].id = 98;
    this.ⲆΔⵠ[98] = f431(60, 60, 0, ᐃᐃ[952], 3);
    this.ⲆΔⵠ[98].id = 98;
    this.ⵠΔᐃ[97] = f431(68, 68, 0, ᐃᐃ[950], 3);
    this.ⵠΔᐃ[97].id = 97;
    this.ⲆᐃΔ[97] = f431(60, 60, 0, ᐃᐃ[948], 3);
    this.ⲆᐃΔ[97].id = 97;
    this.ⲆΔⵠ[97] = f431(60, 60, 0, ᐃᐃ[949], 3);
    this.ⲆΔⵠ[97].id = 97;
    this.ⵠΔᐃ[89] = f431(68, 68, 0, ᐃᐃ[956], 3);
    this.ⵠΔᐃ[89].id = 89;
    this.ⲆᐃΔ[89] = f431(60, 60, 0, ᐃᐃ[954], 3);
    this.ⲆᐃΔ[89].id = 89;
    this.ⲆΔⵠ[89] = f431(60, 60, 0, ᐃᐃ[955], 3);
    this.ⲆΔⵠ[89].id = 89;
    this.ⵠΔᐃ[110] = f431(68, 68, 0, ᐃᐃ[736], 3);
    this.ⵠΔᐃ[110].id = 110;
    this.ⲆᐃΔ[110] = f431(60, 60, 0, ᐃᐃ[734], 3);
    this.ⲆᐃΔ[110].id = 110;
    this.ⲆΔⵠ[110] = f431(60, 60, 0, ᐃᐃ[735], 3);
    this.ⲆΔⵠ[110].id = 110;
    this.ⵠΔᐃ[111] = f431(68, 68, 0, ᐃᐃ[739], 3);
    this.ⵠΔᐃ[111].id = 111;
    this.ⲆᐃΔ[111] = f431(60, 60, 0, ᐃᐃ[737], 3);
    this.ⲆᐃΔ[111].id = 111;
    this.ⲆΔⵠ[111] = f431(60, 60, 0, ᐃᐃ[738], 3);
    this.ⲆΔⵠ[111].id = 111;
    this.ⵠΔᐃ[112] = f431(68, 68, 0, ᐃᐃ[742], 3);
    this.ⵠΔᐃ[112].id = 112;
    this.ⲆᐃΔ[112] = f431(60, 60, 0, ᐃᐃ[740], 3);
    this.ⲆᐃΔ[112].id = 112;
    this.ⲆΔⵠ[112] = f431(60, 60, 0, ᐃᐃ[741], 3);
    this.ⲆΔⵠ[112].id = 112;
    this.ⵠΔᐃ[113] = f431(68, 68, 0, ᐃᐃ[745], 3);
    this.ⵠΔᐃ[113].id = 113;
    this.ⲆᐃΔ[113] = f431(60, 60, 0, ᐃᐃ[743], 3);
    this.ⲆᐃΔ[113].id = 113;
    this.ⲆΔⵠ[113] = f431(60, 60, 0, ᐃᐃ[744], 3);
    this.ⲆΔⵠ[113].id = 113;
    this.ⵠΔᐃ[114] = f431(68, 68, 0, ᐃᐃ[748], 3);
    this.ⵠΔᐃ[114].id = 114;
    this.ⲆᐃΔ[114] = f431(60, 60, 0, ᐃᐃ[746], 3);
    this.ⲆᐃΔ[114].id = 114;
    this.ⲆΔⵠ[114] = f431(60, 60, 0, ᐃᐃ[747], 3);
    this.ⲆΔⵠ[114].id = 114;
    this.ⵠΔᐃ[115] = f431(68, 68, 0, ᐃᐃ[751], 3);
    this.ⵠΔᐃ[115].id = 115;
    this.ⲆᐃΔ[115] = f431(60, 60, 0, ᐃᐃ[749], 3);
    this.ⲆᐃΔ[115].id = 115;
    this.ⲆΔⵠ[115] = f431(60, 60, 0, ᐃᐃ[750], 3);
    this.ⲆΔⵠ[115].id = 115;
    this.ⵠΔᐃ[116] = f431(68, 68, 0, ᐃᐃ[754], 3);
    this.ⵠΔᐃ[116].id = 116;
    this.ⲆᐃΔ[116] = f431(60, 60, 0, ᐃᐃ[752], 3);
    this.ⲆᐃΔ[116].id = 116;
    this.ⲆΔⵠ[116] = f431(60, 60, 0, ᐃᐃ[753], 3);
    this.ⲆΔⵠ[116].id = 116;
    this.ⵠΔᐃ[118] = f431(68, 68, 0, ᐃᐃ[760], 3);
    this.ⵠΔᐃ[118].id = 118;
    this.ⲆᐃΔ[118] = f431(60, 60, 0, ᐃᐃ[758], 3);
    this.ⲆᐃΔ[118].id = 118;
    this.ⲆΔⵠ[118] = f431(60, 60, 0, ᐃᐃ[759], 3);
    this.ⲆΔⵠ[118].id = 118;
    this.ⵠΔᐃ[117] = f431(68, 68, 0, ᐃᐃ[757], 3);
    this.ⵠΔᐃ[117].id = 117;
    this.ⲆᐃΔ[117] = f431(60, 60, 0, ᐃᐃ[755], 3);
    this.ⲆᐃΔ[117].id = 117;
    this.ⲆΔⵠ[117] = f431(60, 60, 0, ᐃᐃ[756], 3);
    this.ⲆΔⵠ[117].id = 117;
    this.ⵠΔᐃ[19] = f431(68, 68, 0, ᐃᐃ[1130], 3);
    this.ⵠΔᐃ[19].id = 19;
    this.ⲆᐃΔ[19] = f431(60, 60, 0, ᐃᐃ[1129], 3);
    this.ⲆᐃΔ[19].id = 19;
    this.ⲆΔⵠ[19] = f431(60, 60, 0, ᐃᐃ[1131], 3);
    this.ⲆΔⵠ[19].id = 19;
    this.ⵠΔᐃ[20] = f431(68, 68, 0, ᐃᐃ[1133], 3);
    this.ⵠΔᐃ[20].id = 20;
    this.ⲆᐃΔ[20] = f431(60, 60, 0, ᐃᐃ[1132], 3);
    this.ⲆᐃΔ[20].id = 20;
    this.ⲆΔⵠ[20] = f431(60, 60, 0, ᐃᐃ[1134], 3);
    this.ⲆΔⵠ[20].id = 20;
    this.ⵠΔᐃ[21] = f431(68, 68, 0, ᐃᐃ[1136], 3);
    this.ⵠΔᐃ[21].id = 21;
    this.ⲆᐃΔ[21] = f431(60, 60, 0, ᐃᐃ[1135], 3);
    this.ⲆᐃΔ[21].id = 21;
    this.ⲆΔⵠ[21] = f431(60, 60, 0, ᐃᐃ[1137], 3);
    this.ⲆΔⵠ[21].id = 21;
    this.ⵠΔᐃ[22] = f431(68, 68, 0, ᐃᐃ[1139], 3);
    this.ⵠΔᐃ[22].id = 22;
    this.ⲆᐃΔ[22] = f431(60, 60, 0, ᐃᐃ[1138], 3);
    this.ⲆᐃΔ[22].id = 22;
    this.ⲆΔⵠ[22] = f431(60, 60, 0, ᐃᐃ[1140], 3);
    this.ⲆΔⵠ[22].id = 22;
    this.ⵠΔᐃ[23] = f431(68, 68, 0, ᐃᐃ[1142], 3);
    this.ⵠΔᐃ[23].id = 23;
    this.ⲆᐃΔ[23] = f431(60, 60, 0, ᐃᐃ[1141], 3);
    this.ⲆᐃΔ[23].id = 23;
    this.ⲆΔⵠ[23] = f431(60, 60, 0, ᐃᐃ[1143], 3);
    this.ⲆΔⵠ[23].id = 23;
    this.ⵠΔᐃ[24] = f431(68, 68, 0, ᐃᐃ[1145], 3);
    this.ⵠΔᐃ[24].id = 24;
    this.ⲆᐃΔ[24] = f431(60, 60, 0, ᐃᐃ[1144], 3);
    this.ⲆᐃΔ[24].id = 24;
    this.ⲆΔⵠ[24] = f431(60, 60, 0, ᐃᐃ[1146], 3);
    this.ⲆΔⵠ[24].id = 24;
    this.ⵠΔᐃ[25] = f431(68, 68, 0, ᐃᐃ[1148], 3);
    this.ⵠΔᐃ[25].id = 25;
    this.ⲆᐃΔ[25] = f431(60, 60, 0, ᐃᐃ[1147], 3);
    this.ⲆᐃΔ[25].id = 25;
    this.ⲆΔⵠ[25] = f431(60, 60, 0, ᐃᐃ[1149], 3);
    this.ⲆΔⵠ[25].id = 25;
    this.ⵠΔᐃ[27] = f431(68, 68, 0, ᐃᐃ[1154], 3);
    this.ⵠΔᐃ[27].id = 27;
    this.ⲆᐃΔ[27] = f431(60, 60, 0, ᐃᐃ[1153], 3);
    this.ⲆᐃΔ[27].id = 27;
    this.ⲆΔⵠ[27] = f431(60, 60, 0, ᐃᐃ[1155], 3);
    this.ⲆΔⵠ[27].id = 27;
    this.ⵠΔᐃ[26] = f431(68, 68, 0, ᐃᐃ[1151], 3);
    this.ⵠΔᐃ[26].id = 26;
    this.ⲆᐃΔ[26] = f431(60, 60, 0, ᐃᐃ[1150], 3);
    this.ⲆᐃΔ[26].id = 26;
    this.ⲆΔⵠ[26] = f431(60, 60, 0, ᐃᐃ[1152], 3);
    this.ⲆΔⵠ[26].id = 26;
    this.ⵠΔᐃ[126] = f431(68, 68, 0, ᐃᐃ[784], 3);
    this.ⵠΔᐃ[126].id = 126;
    this.ⲆᐃΔ[126] = f431(60, 60, 0, ᐃᐃ[782], 3);
    this.ⲆᐃΔ[126].id = 126;
    this.ⲆΔⵠ[126] = f431(60, 60, 0, ᐃᐃ[783], 3);
    this.ⲆΔⵠ[126].id = 126;
    this.ⵠΔᐃ[127] = f431(68, 68, 0, ᐃᐃ[787], 3);
    this.ⵠΔᐃ[127].id = 127;
    this.ⲆᐃΔ[127] = f431(60, 60, 0, ᐃᐃ[785], 3);
    this.ⲆᐃΔ[127].id = 127;
    this.ⲆΔⵠ[127] = f431(60, 60, 0, ᐃᐃ[786], 3);
    this.ⲆΔⵠ[127].id = 127;
    this.ⵠΔᐃ[128] = f431(68, 68, 0, ᐃᐃ[790], 3);
    this.ⵠΔᐃ[128].id = 128;
    this.ⲆᐃΔ[128] = f431(60, 60, 0, ᐃᐃ[788], 3);
    this.ⲆᐃΔ[128].id = 128;
    this.ⲆΔⵠ[128] = f431(60, 60, 0, ᐃᐃ[789], 3);
    this.ⲆΔⵠ[128].id = 128;
    this.ⵠΔᐃ[129] = f431(68, 68, 0, ᐃᐃ[793], 3);
    this.ⵠΔᐃ[129].id = 129;
    this.ⲆᐃΔ[129] = f431(60, 60, 0, ᐃᐃ[791], 3);
    this.ⲆᐃΔ[129].id = 129;
    this.ⲆΔⵠ[129] = f431(60, 60, 0, ᐃᐃ[792], 3);
    this.ⲆΔⵠ[129].id = 129;
    this.ⵠΔᐃ[130] = f431(68, 68, 0, ᐃᐃ[796], 3);
    this.ⵠΔᐃ[130].id = 130;
    this.ⲆᐃΔ[130] = f431(60, 60, 0, ᐃᐃ[794], 3);
    this.ⲆᐃΔ[130].id = 130;
    this.ⲆΔⵠ[130] = f431(60, 60, 0, ᐃᐃ[795], 3);
    this.ⲆΔⵠ[130].id = 130;
    this.ⵠΔᐃ[131] = f431(68, 68, 0, ᐃᐃ[799], 3);
    this.ⵠΔᐃ[131].id = 131;
    this.ⲆᐃΔ[131] = f431(60, 60, 0, ᐃᐃ[797], 3);
    this.ⲆᐃΔ[131].id = 131;
    this.ⲆΔⵠ[131] = f431(60, 60, 0, ᐃᐃ[798], 3);
    this.ⲆΔⵠ[131].id = 131;
    this.ⵠΔᐃ[132] = f431(68, 68, 0, ᐃᐃ[802], 3);
    this.ⵠΔᐃ[132].id = 132;
    this.ⲆᐃΔ[132] = f431(60, 60, 0, ᐃᐃ[800], 3);
    this.ⲆᐃΔ[132].id = 132;
    this.ⲆΔⵠ[132] = f431(60, 60, 0, ᐃᐃ[801], 3);
    this.ⲆΔⵠ[132].id = 132;
    this.ⵠΔᐃ[134] = f431(68, 68, 0, ᐃᐃ[808], 3);
    this.ⵠΔᐃ[134].id = 134;
    this.ⲆᐃΔ[134] = f431(60, 60, 0, ᐃᐃ[806], 3);
    this.ⲆᐃΔ[134].id = 134;
    this.ⲆΔⵠ[134] = f431(60, 60, 0, ᐃᐃ[807], 3);
    this.ⲆΔⵠ[134].id = 134;
    this.ⵠΔᐃ[133] = f431(68, 68, 0, ᐃᐃ[805], 3);
    this.ⵠΔᐃ[133].id = 133;
    this.ⲆᐃΔ[133] = f431(60, 60, 0, ᐃᐃ[803], 3);
    this.ⲆᐃΔ[133].id = 133;
    this.ⲆΔⵠ[133] = f431(60, 60, 0, ᐃᐃ[804], 3);
    this.ⲆΔⵠ[133].id = 133;
    this.ⵠΔᐃ[190] = f431(68, 68, 0, ᐃᐃ[1516], 3);
    this.ⵠΔᐃ[190].id = 190;
    this.ⲆᐃΔ[190] = f431(60, 60, 0, ᐃᐃ[1515], 3);
    this.ⲆᐃΔ[190].id = 190;
    this.ⲆΔⵠ[190] = f431(60, 60, 0, ᐃᐃ[1517], 3);
    this.ⲆΔⵠ[190].id = 190;
    this.ⵠΔᐃ[191] = f431(68, 68, 0, ᐃᐃ[1519], 3);
    this.ⵠΔᐃ[191].id = 191;
    this.ⲆᐃΔ[191] = f431(60, 60, 0, ᐃᐃ[1518], 3);
    this.ⲆᐃΔ[191].id = 191;
    this.ⲆΔⵠ[191] = f431(60, 60, 0, ᐃᐃ[1520], 3);
    this.ⲆΔⵠ[191].id = 191;
    this.ⵠΔᐃ[192] = f431(68, 68, 0, ᐃᐃ[1522], 3);
    this.ⵠΔᐃ[192].id = 192;
    this.ⲆᐃΔ[192] = f431(60, 60, 0, ᐃᐃ[1521], 3);
    this.ⲆᐃΔ[192].id = 192;
    this.ⲆΔⵠ[192] = f431(60, 60, 0, ᐃᐃ[1523], 3);
    this.ⲆΔⵠ[192].id = 192;
    this.ⵠΔᐃ[193] = f431(68, 68, 0, ᐃᐃ[1525], 3);
    this.ⵠΔᐃ[193].id = 193;
    this.ⲆᐃΔ[193] = f431(60, 60, 0, ᐃᐃ[1524], 3);
    this.ⲆᐃΔ[193].id = 193;
    this.ⲆΔⵠ[193] = f431(60, 60, 0, ᐃᐃ[1526], 3);
    this.ⲆΔⵠ[193].id = 193;
    this.ⵠΔᐃ[194] = f431(68, 68, 0, ᐃᐃ[1528], 3);
    this.ⵠΔᐃ[194].id = 194;
    this.ⲆᐃΔ[194] = f431(60, 60, 0, ᐃᐃ[1527], 3);
    this.ⲆᐃΔ[194].id = 194;
    this.ⲆΔⵠ[194] = f431(60, 60, 0, ᐃᐃ[1529], 3);
    this.ⲆΔⵠ[194].id = 194;
    this.ⵠΔᐃ[195] = f431(68, 68, 0, ᐃᐃ[1531], 3);
    this.ⵠΔᐃ[195].id = 195;
    this.ⲆᐃΔ[195] = f431(60, 60, 0, ᐃᐃ[1530], 3);
    this.ⲆᐃΔ[195].id = 195;
    this.ⲆΔⵠ[195] = f431(60, 60, 0, ᐃᐃ[1532], 3);
    this.ⲆΔⵠ[195].id = 195;
    this.ⵠΔᐃ[196] = f431(68, 68, 0, ᐃᐃ[1534], 3);
    this.ⵠΔᐃ[196].id = 196;
    this.ⲆᐃΔ[196] = f431(60, 60, 0, ᐃᐃ[1533], 3);
    this.ⲆᐃΔ[196].id = 196;
    this.ⲆΔⵠ[196] = f431(60, 60, 0, ᐃᐃ[1535], 3);
    this.ⲆΔⵠ[196].id = 196;
    this.ⵠΔᐃ[198] = f431(68, 68, 0, ᐃᐃ[1540], 3);
    this.ⵠΔᐃ[198].id = 198;
    this.ⲆᐃΔ[198] = f431(60, 60, 0, ᐃᐃ[1539], 3);
    this.ⲆᐃΔ[198].id = 198;
    this.ⲆΔⵠ[198] = f431(60, 60, 0, ᐃᐃ[1541], 3);
    this.ⲆΔⵠ[198].id = 198;
    this.ⵠΔᐃ[197] = f431(68, 68, 0, ᐃᐃ[1537], 3);
    this.ⵠΔᐃ[197].id = 197;
    this.ⲆᐃΔ[197] = f431(60, 60, 0, ᐃᐃ[1536], 3);
    this.ⲆᐃΔ[197].id = 197;
    this.ⲆΔⵠ[197] = f431(60, 60, 0, ᐃᐃ[1538], 3);
    this.ⲆΔⵠ[197].id = 197;
    this.ⵠΔᐃ[141] = f431(68, 68, 0, ᐃᐃ[1649], 3);
    this.ⵠΔᐃ[141].id = 141;
    this.ⲆᐃΔ[141] = f431(60, 60, 0, ᐃᐃ[1648], 3);
    this.ⲆᐃΔ[141].id = 141;
    this.ⲆΔⵠ[141] = f431(60, 60, 0, ᐃᐃ[1647], 3);
    this.ⲆΔⵠ[141].id = 141;
    this.ⵠΔᐃ[142] = f431(68, 68, 0, ᐃᐃ[1652], 3);
    this.ⵠΔᐃ[142].id = 142;
    this.ⲆᐃΔ[142] = f431(60, 60, 0, ᐃᐃ[1651], 3);
    this.ⲆᐃΔ[142].id = 142;
    this.ⲆΔⵠ[142] = f431(60, 60, 0, ᐃᐃ[1650], 3);
    this.ⲆΔⵠ[142].id = 142;
    this.ⵠΔᐃ[143] = f431(68, 68, 0, ᐃᐃ[1655], 3);
    this.ⵠΔᐃ[143].id = 143;
    this.ⲆᐃΔ[143] = f431(60, 60, 0, ᐃᐃ[1654], 3);
    this.ⲆᐃΔ[143].id = 143;
    this.ⲆΔⵠ[143] = f431(60, 60, 0, ᐃᐃ[1653], 3);
    this.ⲆΔⵠ[143].id = 143;
    this.ⵠΔᐃ[144] = f431(68, 68, 0, ᐃᐃ[1658], 3);
    this.ⵠΔᐃ[144].id = 144;
    this.ⲆᐃΔ[144] = f431(60, 60, 0, ᐃᐃ[1657], 3);
    this.ⲆᐃΔ[144].id = 144;
    this.ⲆΔⵠ[144] = f431(60, 60, 0, ᐃᐃ[1656], 3);
    this.ⲆΔⵠ[144].id = 144;
    this.ⵠΔᐃ[145] = f431(68, 68, 0, ᐃᐃ[1661], 3);
    this.ⵠΔᐃ[145].id = 145;
    this.ⲆᐃΔ[145] = f431(60, 60, 0, ᐃᐃ[1660], 3);
    this.ⲆᐃΔ[145].id = 145;
    this.ⲆΔⵠ[145] = f431(60, 60, 0, ᐃᐃ[1659], 3);
    this.ⲆΔⵠ[145].id = 145;
    this.ⵠΔᐃ[146] = f431(68, 68, 0, ᐃᐃ[1664], 3);
    this.ⵠΔᐃ[146].id = 146;
    this.ⲆᐃΔ[146] = f431(60, 60, 0, ᐃᐃ[1663], 3);
    this.ⲆᐃΔ[146].id = 146;
    this.ⲆΔⵠ[146] = f431(60, 60, 0, ᐃᐃ[1662], 3);
    this.ⲆΔⵠ[146].id = 146;
    this.ⵠΔᐃ[147] = f431(68, 68, 0, ᐃᐃ[1667], 3);
    this.ⵠΔᐃ[147].id = 147;
    this.ⲆᐃΔ[147] = f431(60, 60, 0, ᐃᐃ[1666], 3);
    this.ⲆᐃΔ[147].id = 147;
    this.ⲆΔⵠ[147] = f431(60, 60, 0, ᐃᐃ[1665], 3);
    this.ⲆΔⵠ[147].id = 147;
    this.ⵠΔᐃ[148] = f431(68, 68, 0, ᐃᐃ[1670], 3);
    this.ⵠΔᐃ[148].id = 148;
    this.ⲆᐃΔ[148] = f431(60, 60, 0, ᐃᐃ[1669], 3);
    this.ⲆᐃΔ[148].id = 148;
    this.ⲆΔⵠ[148] = f431(60, 60, 0, ᐃᐃ[1668], 3);
    this.ⲆΔⵠ[148].id = 148;
    this.ⵠΔᐃ[149] = f431(68, 68, 0, ᐃᐃ[1673], 3);
    this.ⵠΔᐃ[149].id = 149;
    this.ⲆᐃΔ[149] = f431(60, 60, 0, ᐃᐃ[1672], 3);
    this.ⲆᐃΔ[149].id = 149;
    this.ⲆΔⵠ[149] = f431(60, 60, 0, ᐃᐃ[1671], 3);
    this.ⲆΔⵠ[149].id = 149;
    this.ⵠΔᐃ[173] = f431(68, 68, 0, ᐃᐃ[1694], 3);
    this.ⵠΔᐃ[173].id = 173;
    this.ⲆᐃΔ[173] = f431(60, 60, 0, ᐃᐃ[1693], 3);
    this.ⲆᐃΔ[173].id = 173;
    this.ⲆΔⵠ[173] = f431(60, 60, 0, ᐃᐃ[1692], 3);
    this.ⲆΔⵠ[173].id = 173;
    this.ⵠΔᐃ[174] = f431(68, 68, 0, ᐃᐃ[1697], 3);
    this.ⵠΔᐃ[174].id = 174;
    this.ⲆᐃΔ[174] = f431(60, 60, 0, ᐃᐃ[1696], 3);
    this.ⲆᐃΔ[174].id = 174;
    this.ⲆΔⵠ[174] = f431(60, 60, 0, ᐃᐃ[1695], 3);
    this.ⲆΔⵠ[174].id = 174;
    this.ⵠΔᐃ[175] = f431(68, 68, 0, ᐃᐃ[1700], 3);
    this.ⵠΔᐃ[175].id = 175;
    this.ⲆᐃΔ[175] = f431(60, 60, 0, ᐃᐃ[1699], 3);
    this.ⲆᐃΔ[175].id = 175;
    this.ⲆΔⵠ[175] = f431(60, 60, 0, ᐃᐃ[1698], 3);
    this.ⲆΔⵠ[175].id = 175;
    this.ⵠΔᐃ[176] = f431(68, 68, 0, ᐃᐃ[1703], 3);
    this.ⵠΔᐃ[176].id = 176;
    this.ⲆᐃΔ[176] = f431(60, 60, 0, ᐃᐃ[1702], 3);
    this.ⲆᐃΔ[176].id = 176;
    this.ⲆΔⵠ[176] = f431(60, 60, 0, ᐃᐃ[1701], 3);
    this.ⲆΔⵠ[176].id = 176;
    this.ⵠΔᐃ[177] = f431(68, 68, 0, ᐃᐃ[1706], 3);
    this.ⵠΔᐃ[177].id = 177;
    this.ⲆᐃΔ[177] = f431(60, 60, 0, ᐃᐃ[1705], 3);
    this.ⲆᐃΔ[177].id = 177;
    this.ⲆΔⵠ[177] = f431(60, 60, 0, ᐃᐃ[1704], 3);
    this.ⲆΔⵠ[177].id = 177;
    this.ⵠΔᐃ[178] = f431(68, 68, 0, ᐃᐃ[1709], 3);
    this.ⵠΔᐃ[178].id = 178;
    this.ⲆᐃΔ[178] = f431(60, 60, 0, ᐃᐃ[1708], 3);
    this.ⲆᐃΔ[178].id = 178;
    this.ⲆΔⵠ[178] = f431(60, 60, 0, ᐃᐃ[1707], 3);
    this.ⲆΔⵠ[178].id = 178;
    this.ⵠΔᐃ[179] = f431(68, 68, 0, ᐃᐃ[1712], 3);
    this.ⵠΔᐃ[179].id = 179;
    this.ⲆᐃΔ[179] = f431(60, 60, 0, ᐃᐃ[1711], 3);
    this.ⲆᐃΔ[179].id = 179;
    this.ⲆΔⵠ[179] = f431(60, 60, 0, ᐃᐃ[1710], 3);
    this.ⲆΔⵠ[179].id = 179;
    this.ⵠΔᐃ[180] = f431(68, 68, 0, ᐃᐃ[1715], 3);
    this.ⵠΔᐃ[180].id = 180;
    this.ⲆᐃΔ[180] = f431(60, 60, 0, ᐃᐃ[1714], 3);
    this.ⲆᐃΔ[180].id = 180;
    this.ⲆΔⵠ[180] = f431(60, 60, 0, ᐃᐃ[1713], 3);
    this.ⲆΔⵠ[180].id = 180;
    this.ⵠΔᐃ[181] = f431(68, 68, 0, ᐃᐃ[1718], 3);
    this.ⵠΔᐃ[181].id = 181;
    this.ⲆᐃΔ[181] = f431(60, 60, 0, ᐃᐃ[1717], 3);
    this.ⲆᐃΔ[181].id = 181;
    this.ⲆΔⵠ[181] = f431(60, 60, 0, ᐃᐃ[1716], 3);
    this.ⲆΔⵠ[181].id = 181;
    this.ΔⲆᐃᐃⲆᐃΔ = function () {
      for (var v2582 = user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ, v2583 = 10, v2584 = 10, v2585 = 0; v2585 < v2582.length; v2585++) {
        if (v2585 > 0 && !(v2585 % 4)) {
          v2583 += v2582[0].info.width + 10;
          v2584 = 10;
        }
        v2582[v2585].info.translate.x = v2583;
        v2582[v2585].info.translate.y = v2584;
        v2584 += 10 + v2582[v2585].info.height;
      }
    };
    this.ΔΔΔΔⲆΔⵠ = function () {
      var v2586 = Math.floor(Math.floor((3 + user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ.length) / 4) * (10 + this.ⵠΔᐃ[0].info.Δⵠ[0].width) + 35);
      for (var v2587 = 0; v2587 < this.ⵠΔᐃ.length; v2587++) {
        if (this.ⵠΔᐃ[v2587]) {
          this.ⵠΔᐃ[v2587].info.translate.x = v2586;
          this.ⵠΔᐃ[v2587].info.translate.y = 22;
        }
      }
      this.ᐃⵠᐃᐃᐃᐃⵠ.info.translate.x = v2586 + 17;
      this.ᐃⵠᐃᐃᐃᐃⵠ.info.translate.y = 22 + ᐃᐃ[450].height;
      this.ⲆⵠⵠΔᐃΔΔ.info.translate.x = v2586 + 17;
      this.ⲆⵠⵠΔᐃΔΔ.info.translate.y = 30;
      this.ᐃΔΔⲆΔᐃᐃ.info.translate.x = v2586 + 17;
      this.ᐃΔΔⲆΔᐃᐃ.info.translate.y = 22 + ᐃᐃ[450].height;
    };
    this.ⵠᐃⵠᐃᐃⵠⲆΔⲆ = function () {
      var v2588 = Math.floor((v406 - ᐃᐃ[721][0].width) / 2);
      for (var v2589 = 0; v2589 < this.Δᐃᐃᐃⵠ.length; v2589++) {
        this.Δᐃᐃᐃⵠ[v2589].button.info.translate.x = v2588;
        this.Δᐃᐃᐃⵠ[v2589].button.info.translate.y = -13;
      }
    };
    this.ⲆΔΔᐃⲆⲆⵠ = function () {
      var v2590 = 12 + Math.floor(Math.floor((3 + user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ.length) / 4) * (10 + this.ⵠⵠⲆⲆⵠⲆⵠ.info.Δⵠ[0].width) + 35);
      this.ⵠⵠⲆⲆⵠⲆⵠ.info.translate.x = v2590;
      this.ⵠⵠⲆⲆⵠⲆⵠ.info.translate.y = 33;
      this.ᐃᐃⵠᐃⵠᐃⲆ.info.translate.x = this.ⵠⵠⲆⲆⵠⲆⵠ.info.translate.x;
      this.ᐃᐃⵠᐃⵠᐃⲆ.info.translate.y = 137;
      this.ⵠⵠⵠΔΔⲆⲆ.info.translate.x = this.ⵠⵠⲆⲆⵠⲆⵠ.info.translate.x;
      this.ⵠⵠⵠΔΔⲆⲆ.info.translate.y = 240;
    };
    this.ΔⲆᐃⲆΔΔⲆ = function () {
      var v2591 = 12 + Math.floor(Math.floor((3 + user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ.length) / 4) * (10 + this.ΔⵠⲆⲆⲆΔⲆ.info.Δⵠ[0].width) + 35);
      this.ΔⵠⲆⲆⲆΔⲆ.info.translate.x = v2591;
      this.ΔⵠⲆⲆⲆΔⲆ.info.translate.y = 36;
      v2591 += 83;
      this.ⵠΔⲆⲆΔΔᐃ.info.translate.x = v2591;
      this.ⵠΔⲆⲆΔΔᐃ.info.translate.y = 36;
      this.ᐃⲆⲆΔΔᐃⵠ.info.translate.x = v2591;
      this.ᐃⲆⲆΔΔᐃⵠ.info.translate.y = 36;
      this.ᐃⲆⲆΔⲆᐃᐃ.info.translate.x = v2591;
      this.ᐃⲆⲆΔⲆᐃᐃ.info.translate.y = 36;
      this.ⵠⲆⲆⲆᐃᐃᐃ.info.translate.x = v2591;
      this.ⵠⲆⲆⲆᐃᐃᐃ.info.translate.y = 36;
      this.ⲆΔⲆᐃΔᐃᐃ.info.translate.x = v2591;
      this.ⲆΔⲆᐃΔᐃᐃ.info.translate.y = 36;
      this.ᐃᐃᐃⲆⲆΔᐃ.info.translate.x = v2591;
      this.ᐃᐃᐃⲆⲆΔᐃ.info.translate.y = 36;
      this.ΔᐃΔΔΔⵠⲆ.info.translate.x = v2591;
      this.ΔᐃΔΔΔⵠⲆ.info.translate.y = 36;
      this.ⲆΔⲆⵠⵠΔᐃ.info.translate.x = v2591;
      this.ⲆΔⲆⵠⵠΔᐃ.info.translate.y = 36;
      this.ⲆⲆᐃⲆᐃⲆⲆ.info.translate.x = v2591;
      this.ⲆⲆᐃⲆᐃⲆⲆ.info.translate.y = 36;
      this.ⲆⵠⵠᐃⵠⵠΔ.info.translate.x = v2591;
      this.ⲆⵠⵠᐃⵠⵠΔ.info.translate.y = 36;
      this.ΔⵠⵠΔᐃΔⲆ.info.translate.x = v2591;
      this.ΔⵠⵠΔᐃΔⲆ.info.translate.y = 36;
      this.ⵠⲆⲆⵠᐃᐃᐃ.info.translate.x = v2591;
      this.ⵠⲆⲆⵠᐃᐃᐃ.info.translate.y = 36;
      this.ⵠΔⲆᐃⲆⲆⲆ.info.translate.x = v2591;
      this.ⵠΔⲆᐃⲆⲆⲆ.info.translate.y = 36;
      this.ⲆⲆΔΔⲆᐃΔ.info.translate.x = v2591;
      this.ⲆⲆΔΔⲆᐃΔ.info.translate.y = 36;
    };
    this.ᐃⲆⲆΔⲆΔΔ = function () {
      var v2592 = 12 + Math.floor(Math.floor((3 + user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ.length) / 4) * (10 + this.ᐃⲆⵠⵠΔΔⲆ.info.Δⵠ[0].width) + 35);
      this.ᐃⲆⵠⵠΔΔⲆ.info.translate.x = v2592;
      this.ᐃⲆⵠⵠΔΔⲆ.info.translate.y = 36;
      v2592 += 83;
      this.ⲆⵠⲆᐃⵠΔΔ.info.translate.x = v2592;
      this.ⲆⵠⲆᐃⵠΔΔ.info.translate.y = 36;
    };
    this.ⵠᐃⲆⲆⲆᐃⵠ = function () {
      var v2593 = Math.floor((10 + this.ⲆᐃᐃᐃⵠⲆⲆ.info.Δⵠ[0].width) * Math.floor((3 + user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ.length) / 4) + 35);
      this.ⲆᐃᐃᐃⵠⲆⲆ.info.translate.x = v2593;
      this.ⲆᐃᐃᐃⵠⲆⲆ.info.translate.y = 22;
    };
    this.ⵠⲆΔᐃⲆᐃᐃ = function () {
      var v2594 = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ;
      if (v2594.length > 0) {
        var v2595 = Math.floor((v406 - user.ᐃⵠⲆⲆ.max * (v2594[0].info.width + 5)) / 2);
      }
      for (var v2596 = 0; v2594.length > v2596; v2596++) {
        v2594[v2596].info.translate.x = v2595 + v2596 * (v2594[v2596].info.width + 5);
        v2594[v2596].info.translate.y = v408 - v2594[v2596].info.width - 10;
        this.ⵠΔⲆⵠᐃ[v2594[v2596].id].info.translate.x = v2594[v2596].info.translate.x + 13;
        this.ⵠΔⲆⵠᐃ[v2594[v2596].id].info.translate.y = v2594[v2596].info.translate.y - this.ⵠΔⲆⵠᐃ[v2594[v2596].id].info.Δⵠ[0].height - 6;
      }
    };
    var v2597;
    var v2598 = 0;
    function f489() {
      vThis2.ⵠᐃᐃ();
      if (++v2598 == 30) {
        vThis2.ⲆⵠΔᐃⲆΔⵠ();
        vThis2.ⵠᐃᐃ();
        return;
      }
      vWindow.setTimeout(f489, 33);
    }
    this.ᐃᐃΔⵠⵠ = function (p1643) {
      if (user.ⲆΔⲆᐃⲆ.open) {
        user.ⲆΔⲆᐃⲆ.ᐃᐃΔⵠⵠ();
      }
      if (user.ⲆⲆᐃΔⵠ.open) {
        user.ⲆⲆᐃΔⵠ.ᐃᐃΔⵠⵠ();
      }
      document.getElementById("team_box").style.display = "none";
      vThis2.ⲆΔⵠⵠⵠ.style.display = "none";
      vThis2.ⲆΔⵠⵠⵠ.open = false;
      vThis2.sign.style.display = "none";
      vThis2.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      vThis2.ⲆΔᐃᐃᐃ.open = vVVV14;
      document.getElementById("option_in_game").style.display = "none";
      vThis2.options.open = vVVV14;
      document.getElementById("sure_delete").style.display = "none";
      vThis2.ΔΔΔΔ.open = vV14;
      document.getElementById("cancel_sure_delete").style.display = "none";
      vThis2.ᐃⲆΔΔⵠ.open = false;
      document.getElementById("chronoquest").style.display = "none";
      vThis2.ΔΔΔⵠ.open = false;
      v2597 = p1643;
      vThis2.ΔⲆⲆΔⵠᐃΔ();
      vThis2.ⵠΔΔ.style.cursor = vThis2.ᐃⵠᐃᐃΔⵠΔ;
      v3031.ᐃᐃΔⵠⵠ();
      v2599 = -1;
      f490();
      f532();
    };
    var v2599 = -1;
    function f490() {
      vThis2.ⵠᐃᐃ();
      if (++v2599 == 30) {
        vThis2.stop();
        v2597();
        return;
      }
      vWindow.setTimeout(f490, 33);
    }
    this.ΔΔΔⵠᐃ = false;
    this.stop = function () {
      this.ΔΔΔⵠᐃ = vVV14;
    };
    this.ⲆΔᐃᐃⲆ = function () {
      v2837.ΔΔᐃΔΔᐃΔᐃᐃ();
      vThis2.ΔΔΔⵠᐃ = true;
      v2599 = -1;
      v2598 = 0;
      f489();
    };
    this.ⵠᐃᐃ = function () {
      this.ΔΔΔᐃ.translate.x = v406 - this.ΔΔΔᐃ.Δⵠ.width - 10;
      this.ΔΔΔᐃ.translate.y = 5;
      world.ⲆᐃⲆⵠᐃ.translate.x = this.ΔΔΔᐃ.translate.x - ᐃᐃ[974][0].width - 85;
      world.ⲆᐃⲆⵠᐃ.translate.y = 10;
      this.ⲆΔᐃᐃᐃ.button.info.translate.x = this.ΔΔΔᐃ.translate.x - ᐃᐃ[957][0].width - 10;
      this.ⲆΔᐃᐃᐃ.button.info.translate.y = 10;
      this.ΔΔΔⵠ.button.info.translate.x = this.ΔΔΔᐃ.translate.x - ᐃᐃ[1004][0].width - 20;
      this.ΔΔΔⵠ.button.info.translate.y = this.ⲆΔᐃᐃᐃ.button.info.translate.y + ᐃᐃ[957][0].height + 5;
      this.options.button.info.translate.x = this.ΔΔΔᐃ.translate.x - ᐃᐃ[976][0].width - 20;
      this.options.button.info.translate.y = this.ΔΔΔⵠ.button.info.translate.y + ᐃᐃ[976][0].height + 18;
      this.Ⲇⵠⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ.info.translate.x = this.ΔΔΔᐃ.translate.x - ᐃᐃ[976][0].width - 20;
      this.Ⲇⵠⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ.info.translate.y = this.options.button.info.translate.y + ᐃᐃ[1032][0].height;
      this.Ⲇⵠⵠᐃ.ⵠⵠⲆΔⵠⵠⵠ.info.translate.x = this.ΔΔΔᐃ.translate.x - ᐃᐃ[976][0].width - 20;
      this.Ⲇⵠⵠᐃ.ⵠⵠⲆΔⵠⵠⵠ.info.translate.y = this.options.button.info.translate.y + ᐃᐃ[1032][0].height;
      this.ⲆΔⵠⵠⵠ.button.info.translate.x = this.ΔΔΔᐃ.translate.x - ᐃᐃ[1044][0].width - 20;
      this.ⲆΔⵠⵠⵠ.button.info.translate.y = this.Ⲇⵠⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ.info.translate.y + ᐃᐃ[1044][0].height;
      user.ⵠⵠⵠⵠΔ.translate.x = this.ΔΔΔᐃ.translate.x - 63 - 85;
      user.ⵠⵠⵠⵠΔ.translate.y = 100;
      user.ᐃΔΔΔⲆⵠⵠ.translate.x = this.ΔΔΔᐃ.translate.x - ᐃᐃ[655].width - 85;
      user.ᐃΔΔΔⲆⵠⵠ.translate.y = user.ⵠⵠⵠⵠΔ.translate.y + 10 + ᐃᐃ[684].height;
      this.ΔΔΔⲆⲆ.translate.y = v408 - 3 - 193;
      this.ΔΔΔⲆⲆ.translate.x = v406 - 3 - 193;
      this.ᐃⵠᐃⵠ.translate.x = 5;
      this.ᐃⵠᐃⵠ.translate.y = v408 - this.ᐃⵠᐃⵠ.Δⵠ.height - 5;
      this.ᐃᐃᐃᐃⲆ.button.info.translate.x = v409 - 91 / 2;
      this.ᐃᐃᐃᐃⲆ.button.info.translate.y = 50;
      this.ΔⲆᐃᐃⲆᐃΔ();
      this.ⵠⲆΔᐃⲆᐃᐃ();
      this.ΔΔΔΔⲆΔⵠ();
      this.ⵠᐃⲆⲆⲆᐃⵠ();
      this.ᐃⲆⲆΔⲆΔΔ();
      this.ΔⲆᐃⲆΔΔⲆ();
      this.ⲆΔΔᐃⲆⲆⵠ();
      this.ⵠᐃⵠᐃᐃⵠⲆΔⲆ();
      this.sign.ⲆⲆᐃⲆⲆΔᐃ();
      f293();
      user.ⲆΔⲆᐃⲆ.ⵠᐃᐃ();
      user.ⲆⲆᐃΔⵠ.ⵠᐃᐃ();
      this.ΔᐃⲆΔΔΔΔⲆⵠ.ⵠᐃᐃ();
      this.ⲆΔᐃᐃᐃ.ⲆᐃⵠⲆᐃᐃᐃ.ⵠᐃᐃ();
      this.ⲆΔᐃᐃᐃ.list.ⵠᐃᐃ();
      this.ΔΔΔΔ.ⵠᐃᐃ();
      this.ᐃⲆΔΔⵠ.ⵠᐃᐃ();
      this.ΔΔΔⵠ.ⵠᐃᐃ();
      this.ᐃᐃᐃᐃⲆ.ⵠᐃᐃ();
      this.options.ⵠᐃᐃ();
      this.ⲆΔⵠⵠⵠ.ⵠᐃᐃ();
      this.sign.ⵠᐃᐃ();
      var v2600 = 0;
      if (v2598 != 30) {
        v2600 = 1500 / (v2598 + 1) - 50;
      }
      if (v2599 != -1) {
        v2600 = -(1500 / (30 - v2599 + 1) - 48);
      }
      this.ᐃᐃᐃᐃⲆ.button.info.translate.y -= v2600 > 0 ? v2600 : -v2600;
      this.ΔΔΔᐃ.translate.y -= v2600 > 0 ? v2600 : -v2600;
      user.ⵠⵠⵠⵠΔ.translate.y -= v2600 > 0 ? v2600 : -v2600;
      user.ᐃΔΔΔⲆⵠⵠ.translate.y -= v2600 > 0 ? v2600 : -v2600;
      this.ⲆΔᐃᐃᐃ.button.info.translate.y -= v2600 > 0 ? v2600 : -v2600;
      this.ΔΔΔⵠ.button.info.translate.y -= v2600 > 0 ? v2600 : -v2600;
      this.options.button.info.translate.y -= v2600 > 0 ? v2600 : -v2600;
      this.ⲆΔⵠⵠⵠ.button.info.translate.y -= v2600 > 0 ? v2600 : -v2600;
      this.Ⲇⵠⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ.info.translate.y -= v2600 > 0 ? v2600 : -v2600;
      this.Ⲇⵠⵠᐃ.ⵠⵠⲆΔⵠⵠⵠ.info.translate.y -= v2600 > 0 ? v2600 : -v2600;
      world.ⲆᐃⲆⵠᐃ.translate.y -= v2600 > 0 ? v2600 : -v2600;
      this.ᐃⵠᐃⵠ.translate.y -= v2600 < 0 ? v2600 : -v2600;
      this.ΔΔΔⲆⲆ.translate.y -= v2600 < 0 ? v2600 : -v2600;
    };
    this.ΔᐃΔΔΔΔⵠ = function () {
      if (!user.ⵠΔⵠⵠΔ.enabled && this.ⵠⲆⵠⲆⲆⵠᐃ && !user.ⲆΔᐃⲆΔ) {
        f328();
      }
      f309();
      (function () {
        var v2601 = world.units[0];
        if (world.mode === 0 || world.mode === 7 || world.mode === 2 || world.mode === 4 || world.mode === 5 || world.mode === 6 || world.mode === 3) {
          for (var v2602 = 0; v2602 < v2601.length; v2602++) {
            v2601[v2602].ΔΔⵠΔⲆⲆᐃ();
          }
        } else if (world.mode === 1) {
          for (v2602 = 0; v2602 < v2601.length; v2602++) {
            if (user.ⲆⲆΔⵠⲆᐃⵠ || user.ᐃΔΔΔⲆⵠⵠ.enabled || v2601[v2602].ⲆⵠⵠΔ.ᐃⲆᐃⵠⲆ !== "spectator") {
              v2601[v2602].ΔΔⵠΔⲆⲆᐃ();
            }
          }
        }
      })();
      vF36.ⲆΔᐃⲆᐃᐃᐃ();
      if (this.ⵠⲆⵠⲆⲆⵠᐃ) {
        f301();
        if (this.ⲆⵠⵠⲆΔᐃⵠ === 1) {
          this.ⲆΔᐃᐃᐃ.button.ⲆΔᐃΔ(p1623);
        }
        if (world.mode !== 2 && world.mode !== 5 && this.ⲆⵠᐃⲆⵠᐃⲆ === 1) {
          this.ΔΔΔⵠ.button.ⲆΔᐃΔ(p1623);
        }
        this.options.button.ⲆΔᐃΔ(p1623);
        if (this.ⵠΔⲆⵠᐃᐃᐃ === 1) {
          this.ⲆΔⵠⵠⵠ.button.ⲆΔᐃΔ(p1623);
        }
        if (v3031.ⲆΔᐃᐃⲆ) {
          this.Ⲇⵠⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ.ⲆΔᐃΔ(p1623);
        } else {
          this.Ⲇⵠⵠᐃ.ⵠⵠⲆΔⵠⵠⵠ.ⲆΔᐃΔ(p1623);
        }
        f307();
        f310();
        this.ᐃⵠᐃⵠ.ⲆΔᐃΔ();
        f323();
        f314();
        f327();
        f313();
        f315();
        f294();
        f292();
        (function () {
          if (!user.ⵠⲆΔᐃ.open && !user.ⵠⲆⵠΔΔ.open && !user.ΔⵠⵠⲆ.open && !user.ΔⵠⲆⵠ.open && !user.ΔⲆⲆⵠ.open) {
            user.ΔᐃⲆΔᐃ.open = false;
            var v2603 = world.fast_units[user.ᐃᐃⵠⵠ];
            var v2604 = 100;
            if (v2603) {
              for (var v2605 = 0; v2605 < world.units[44].length; v2605++) {
                var v2606 = world.units[44][v2605];
                var v2607 = Δᐃᐃ.ⲆⲆⵠᐃ(v2606, v2603);
                if (v2607 < v2604) {
                  v2604 = v2607;
                  user.ΔᐃⲆΔᐃ.open = vVVV623;
                  user.ΔᐃⲆΔᐃ.ΔⲆᐃⲆ = v2606.ΔⲆᐃⲆ;
                  user.ΔᐃⲆΔᐃ.ΔⵠΔᐃⵠ = v2606.id;
                }
              }
            }
          }
        })();
        f303();
        f302();
        f296();
        f305();
        f293();
        f304();
      }
      if (user.ⵠΔⵠⵠΔ.enabled) {
        f299();
      }
      f297();
      if (this.ⵠⲆⵠⲆⲆⵠᐃ && this.ΔΔᐃⵠⵠᐃⵠ === 1) {
        f316();
      }
      user.ⵠΔᐃⵠΔΔΔ.ⲆΔᐃΔ();
      user.alert.ⲆΔᐃΔ("#FFF", "#000");
      if (this.ⵠⲆⵠⲆⲆⵠᐃ) {
        user.ⵠΔⵠⵠΔ.ⲆΔᐃΔ();
        user.ᐃᐃᐃᐃⲆ.ⲆΔᐃΔ();
        user.ᐃⵠⲆⲆ.ΔᐃΔⵠⲆⵠⵠ.ⲆΔᐃΔ(v3063.ᐃΔⵠⲆ.x, v3063.ᐃΔⵠⲆ.y);
      }
      f306();
    };
    this.ᐃᐃⵠΔⵠᐃⲆⲆⲆ = function () {
      user.ᐃⵠⵠ.ⵠᐃᐃ();
      user.ᐃⵠᐃⵠ.ⵠᐃᐃ();
      if (!user.reconnect.enabled && user.ⵠᐃⲆΔⲆ) {
        user.control.ⵠᐃᐃ();
        user.ⵠⵠⵠⵠΔ.ⵠᐃᐃ();
      }
      world.ⵠᐃᐃ();
      this.ΔΔΔⵠ.ᐃᐃᐃΔⲆᐃΔᐃⲆ();
    };
    this.ⲆⲆΔᐃⲆᐃⲆΔᐃ = function () {
      f418();
    };
    this.ΔⲆΔⵠΔᐃⵠΔΔ = function () {
      v2837.ᐃⵠⵠΔᐃⵠΔⵠᐃ();
      v2837.ⵠᐃᐃⵠΔⵠⵠᐃⵠ();
      v2837.ⵠⲆⲆᐃᐃᐃᐃΔⵠ();
      v2837.ΔΔⲆΔᐃⵠⲆⵠⲆ();
    };
    this.ⲆΔᐃΔ = function () {
      if (!user.reconnect.enabled && user.ⵠᐃⲆΔⲆ) {
        this.ΔⲆΔⵠΔᐃⵠΔΔ();
      }
      v3031.ⲆⲆⵠⵠⵠⲆⵠᐃⵠ();
      this.ᐃᐃⵠΔⵠᐃⲆⲆⲆ();
      if (v2833.ⲆᐃⲆⵠᐃⵠΔ !== 1) {
        this.ⲆⲆΔᐃⲆᐃⲆΔᐃ();
        this.ΔᐃΔΔΔΔⵠ();
      } else {
        var v2608 = ⵠᐃ.ⵠΔⵠⲆᐃⵠⵠ;
        f295(p1623, v2608, v409 - v2608.width / 4, v410 - v2608.height / 4, v2608.width / 2, v2608.height / 2);
      }
    };
    this.ΔᐃΔΔⲆⲆⲆ = function (p1644) {
      if (user.ⲆΔⲆᐃⲆ.open && p1644.keyCode === 27) {
        user.ⲆΔⲆᐃⲆ.ᐃᐃΔⵠⵠ();
      } else if (user.ⲆⲆᐃΔⵠ.open && p1644.keyCode === 27) {
        user.ⲆⲆᐃΔⵠ.ᐃᐃΔⵠⵠ();
      } else if (user.ⲆΔⲆᐃⲆ.open || user.ⲆⲆᐃΔⵠ.open || p1644.keyCode != 79 || v2599 != -1) {
        if (p1644.keyCode == 13 && v2599 == -1) {
          if (user.ⲆⲆᐃΔⵠ.open) {
            user.ⲆⲆᐃΔⵠ.ᐃⵠΔⲆⵠΔΔ();
          } else {
            user.ⲆΔⲆᐃⲆ.ⲆΔᐃᐃⲆ();
          }
        } else if (!user.ⲆΔⲆᐃⲆ.open && !user.ⲆⲆᐃΔⵠ.open) {
          if (p1644.keyCode === 82) {
            user.ⵠⵠⵠⵠΔ.ⲆᐃⵠⵠⵠⲆΔ();
          } else if (p1644.keyCode !== 80 || world.mode !== 1 || user.ⲆⲆΔⵠⲆᐃⵠ) {
            if (p1644.keyCode >= 49 && p1644.keyCode <= 57) {
              if (user.ⵠⲆⲆᐃ.id < 0) {
                var v2609 = p1644.keyCode - 49;
                var v2610 = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ[v2609];
                if (v2610) {
                  v2837.ᐃⵠⲆⲆΔ(v2610.id, v2609);
                }
              }
            } else if (p1644.keyCode == 89) {
              user.ᐃⲆⲆⵠᐃᐃΔ = !user.ᐃⲆⲆⵠᐃᐃΔ;
            } else if (p1644.keyCode == 71) {
              user.ⵠⲆⲆᐃ.ᐃΔΔⵠⲆΔⵠⲆⲆ();
            }
          } else {
            user.ᐃΔΔΔⲆⵠⵠ.ⲆᐃⵠⵠⵠⲆΔ();
          }
        }
      } else {
        user.ⲆⲆᐃΔⵠ.ΔΔΔⲆⵠⲆΔⵠⵠ();
      }
      v3059.up(p1644);
    };
    this.ΔⵠΔᐃΔⵠⲆ = function (p1645) {
      v3059.down(p1645);
      if (p1645.keyCode == 8 && !user.ⲆΔⲆᐃⲆ.open && !user.ⲆⲆᐃΔⵠ.open) {
        p1645.preventDefault();
      }
    };
    this.ⵠⲆΔⲆΔⲆΔ = function (p1646) {
      v3063.ᐃΔⵠⲆ = f429(vThis2.ⵠΔΔ, p1646);
      var vVVV1442 = vVV144;
      if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) {
        vThis2.ΔΔΔⲆⲆ.focus(v3063.ᐃΔⵠⲆ);
      }
      var v2611 = user.ⵠⲆΔᐃ;
      if (user.ⵠⲆⲆᐃ.id < 0 && v2611.id >= 0 && (!user.ⵠⲆΔᐃ.lock || user.ⵠⲆΔᐃ.ΔⲆᐃⲆ === user.id)) {
        vVVV1442 |= vThis2.ⵠΔᐃ[user.ⵠⲆΔᐃ.id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      var v2612 = user.ΔⵠⵠⲆ;
      if (v2612.open && v2612.ⵠΔᐃⲆⲆⲆᐃ > 0) {
        vVVV1442 |= vThis2.ⲆⵠⲆᐃⵠΔΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      var v2613 = user.ΔⲆⲆⵠ;
      if (v2613.open && v2613.ⲆⵠᐃΔΔᐃᐃ > 0) {
        vVVV1442 |= vThis2.ⵠΔⲆⲆΔΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ᐃⲆⲆΔΔᐃⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ᐃⲆⲆΔⲆᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ⵠⲆⲆⲆᐃᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ⲆΔⲆᐃΔᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ᐃᐃᐃⲆⲆΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ΔᐃΔΔΔⵠⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ⲆΔⲆⵠⵠΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ⲆⲆᐃⲆᐃⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ⲆⵠⵠᐃⵠⵠΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ΔⵠⵠΔᐃΔⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ⵠⲆⲆⵠᐃᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ⵠΔⲆᐃⲆⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        vVVV1442 |= vThis2.ⲆⲆΔΔⲆᐃΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      var v2614 = user.ΔⵠⲆⵠ;
      if (v2614.open && v2614.ᐃⲆΔⲆⲆΔⵠ > 0) {
        vVVV1442 |= vThis2.ⵠⵠⵠΔΔⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (user.sign.open) {
        vVVV1442 |= vThis2.sign.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (!user.ⵠⲆΔᐃ.lock) {
        if (user.ⵠⲆΔᐃ.ⵠᐃⵠⲆⲆΔⲆ) {
          vVVV1442 |= vThis2.ᐃΔΔⲆΔᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        }
      }
      if (user.ⵠⲆΔᐃ.ⲆⵠⲆⲆⲆΔᐃ) {
        vVVV1442 |= vThis2.ᐃⵠᐃᐃᐃᐃⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (user.ⵠⲆⲆᐃ.id < 0 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.options.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
        for (var v2615 = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ, v2616 = 0; v2615.length > v2616; v2616++) {
          var v2617 = v2615[v2616].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
          vVVV1442 |= v2617;
          if (v2617) {
            user.ᐃⵠⲆⲆ.ΔᐃΔⵠⲆⵠⵠ.start(v2616, v3063.ᐃΔⵠⲆ);
          }
          if (v2611.open && (v2611.id < 0 || v2615[v2616].id == v2611.id) || user.ⵠⲆⵠΔΔ.open && v2615[v2616].id === 200 || user.ΔᐃⲆΔᐃ.open && v2615[v2616].id === 282 || user.ΔⵠⲆⵠ.open && (v2615[v2616].id === 200 || v2615[v2616].id === 224) || user.ΔⵠⵠⲆ.open && v2615[v2616].id === 227 || user.ΔⲆⲆⵠ.open && v2615[v2616].id === 200) {
            vVVV1442 |= vThis2.ⵠΔⲆⵠᐃ[v2615[v2616].id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
          }
        }
      }
      if (user.ΔⲆᐃᐃⲆ.open) {
        vVVV1442 |= vThis2.ΔⲆᐃᐃⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (vThis2.ΔΔΔⲆΔ != -1) {
        if (vVVV1442 |= vThis2.Δᐃᐃᐃⵠ[vThis2.ΔΔΔⲆΔ].button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224)) {
          var v2618 = true;
        }
      } else {
        v2618 = false;
      }
      if (!!(user.ⵠⲆⲆᐃ.id < 0) && !!(user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) && !v2618 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open && !user.ⲆΔᐃⲆΔ) {
        v2615 = user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ;
        v2616 = 0;
        for (; v2616 < v2615.length; v2616++) {
          vVVV1442 |= v2615[v2616].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        }
      }
      if (user.ⵠⲆⲆᐃ.id < 0 && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && user.ᐃᐃᐃᐃⲆ.open && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
        vVVV1442 |= vThis2.ᐃᐃᐃᐃⲆ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
        vVVV1442 |= vThis2.ⲆΔᐃᐃᐃ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
        vVVV1442 |= vThis2.options.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.options.open) {
        vVVV1442 |= vThis2.ⲆΔⵠⵠⵠ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (!!(user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.options.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
        if (v3031.ⲆΔᐃᐃⲆ) {
          vVVV1442 |= vThis2.Ⲇⵠⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        } else {
          vVVV1442 |= vThis2.Ⲇⵠⵠᐃ.ⵠⵠⲆΔⵠⵠⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        }
      }
      if (!!(user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ⲆΔⵠⵠⵠ.open && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && world.mode !== 2 && world.mode !== 5) {
        vVVV1442 |= vThis2.ΔΔΔⵠ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
      }
      if (!vVVV1442 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open && !vThis2.sign.open) {
        if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ >= 0) {
          v2837.ᐃⵠⲆⵠΔΔⲆⵠⲆ();
        } else if (!v2618) {
          v3063.down();
        }
      }
    };
    this.ⲆᐃΔⲆᐃΔⲆ = function (p1647) {
      v3063.ᐃΔⵠⲆ = f429(vThis2.ⵠΔΔ, p1647);
      v3063.up();
      if (!user.ᐃⵠⲆⲆ.ΔᐃΔⵠⲆⵠⵠ.release()) {
        var v2619 = user.ⵠⲆΔᐃ;
        var v2620 = user.ⵠⲆⵠΔΔ;
        var v2621 = user.ΔᐃⲆΔᐃ;
        var v2622 = user.ΔⵠⵠⲆ;
        var v2623 = user.ΔⲆⲆⵠ;
        var v2624 = user.ΔⵠⲆⵠ;
        if (user.control.attack) {
          user.control.attack = 0;
          v2837.ᐃᐃΔⲆⵠⲆⵠᐃᐃ();
        }
        if (vThis2.ΔΔΔⲆΔ != -1) {
          var v2625 = vThis2.Δᐃᐃᐃⵠ[vThis2.ΔΔΔⲆΔ].button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225);
          var v2626 = document.getElementById("team_box").style;
          if (v2625 && v2626.display == "inline-block") {
            v2626.display = "none";
            return;
          }
          if (v2625) {
            vThis2.Δᐃᐃᐃⵠ[vThis2.ΔΔΔⲆΔ].action();
          }
        }
        if (user.ⵠⲆⲆᐃ.id < 0 && v2619.id >= 0 && !vThis2.ΔΔΔΔ.open) {
          if (!user.ⵠⲆΔᐃ.lock || user.id === user.ⵠⲆΔᐃ.ΔⲆᐃⲆ) {
            if (v2625 = vThis2.ⵠΔᐃ[user.ⵠⲆΔᐃ.id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
              v2837.ⲆⵠᐃⵠⵠΔⲆⲆΔ(v2619);
            }
          }
        }
        if ((v2622 = user.ΔⵠⵠⲆ).open && v2622.ⵠΔᐃⲆⲆⲆᐃ > 0 && !vThis2.ΔΔΔΔ.open) {
          if (v2625 = vThis2.ⲆⵠⲆᐃⵠΔΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            v2837.ⵠⲆⲆⲆⵠΔΔⲆⵠ(v2622);
          }
        }
        if ((v2623 = user.ΔⲆⲆⵠ).open && v2623.ⲆⵠᐃΔΔᐃᐃ > 0 && !vThis2.ΔΔΔΔ.open) {
          switch (v2623.type) {
            case 24:
              if (v2625 = vThis2.ⵠΔⲆⲆΔΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 25:
              if (v2625 = vThis2.ᐃⲆⲆΔΔᐃⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 26:
              if (v2625 = vThis2.ᐃⲆⲆΔⲆᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 27:
              if (v2625 = vThis2.ⵠⲆⲆⲆᐃᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 28:
              if (v2625 = vThis2.ⲆΔⲆᐃΔᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 29:
              if (v2625 = vThis2.ᐃᐃᐃⲆⲆΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 30:
              if (v2625 = vThis2.ΔᐃΔΔΔⵠⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 31:
              if (v2625 = vThis2.ⲆΔⲆⵠⵠΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 32:
              if (v2625 = vThis2.ⲆⲆᐃⲆᐃⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 33:
              if (v2625 = vThis2.ⲆⵠⵠᐃⵠⵠΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 34:
              if (v2625 = vThis2.ΔⵠⵠΔᐃΔⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 35:
              if (v2625 = vThis2.ⵠⲆⲆⵠᐃᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 36:
              if (v2625 = vThis2.ⵠΔⲆᐃⲆⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
              break;
            case 37:
              if (v2625 = vThis2.ⲆⲆΔΔⲆᐃΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
                v2837.ᐃⲆⲆⵠⵠ(v2623);
              }
          }
        }
        if ((v2624 = user.ΔⵠⲆⵠ).open && v2624.ᐃⲆΔⲆⲆΔⵠ > 0 && !vThis2.ΔΔΔΔ.open) {
          if (v2625 = vThis2.ⵠⵠⵠΔΔⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            v2837.ⵠΔⲆᐃᐃⲆᐃᐃⵠ(v2624);
          }
        }
        if (user.sign.open && !vThis2.ΔΔΔΔ.open) {
          if (v2625 = vThis2.sign.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            vThis2.sign.select();
          }
        }
        if (!user.ⵠⲆΔᐃ.lock && !vThis2.ΔΔΔΔ.open) {
          if (user.ⵠⲆΔᐃ.ⵠᐃⵠⲆⲆΔⲆ && (v2625 = vThis2.ᐃΔΔⲆΔᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225))) {
            v2837.ⲆᐃⵠⲆᐃⵠᐃΔᐃ(v2619);
          }
        }
        if (user.ⵠⲆΔᐃ.ⲆⵠⲆⲆⲆΔᐃ && !vThis2.ΔΔΔΔ.open && (v2625 = vThis2.ᐃⵠᐃᐃᐃᐃⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225))) {
          v2837.ΔⵠᐃⲆⲆᐃᐃᐃᐃ(v2619);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (user.ΔⲆᐃᐃⲆ.open) {
          if (v2625 = vThis2.ΔⲆᐃᐃⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            v2837.ΔⲆᐃᐃⲆ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (user.ⵠⲆⲆᐃ.id < 0 && !user.ⵠΔⵠⵠΔ.enabled && !vThis2.ΔΔΔΔ.open) {
          for (var v2627 = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ, v2628 = 0; v2627.length > v2628; v2628++) {
            if (v2625 = v2627[v2628].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
              if (p1647.which != 1 || p1647.shiftKey) {
                if ((p1647.which == 1 && p1647.shiftKey || p1647.which == 3) && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) {
                  vThis2.ΔΔΔΔ.ΔⵠΔⵠΔⵠⲆ(v2627[v2628].id);
                }
              } else {
                v2837.ᐃⵠⲆⲆΔ(v2627[v2628].id, v2628);
              }
            } else if (v2619.open && (v2619.id < 0 || v2619.id === v2627[v2628].id)) {
              if ((v2625 = vThis2.ⵠΔⲆⵠᐃ[v2627[v2628].id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) {
                v2837.ᐃᐃΔΔⲆΔⲆᐃᐃ(v2619, v2627[v2628].id, p1647.shiftKey ? 10 : 1);
              }
            } else if (v2621.open && v2627[v2628].id === 282) {
              if ((v2625 = vThis2.ⵠΔⲆⵠᐃ[v2627[v2628].id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) {
                v2837.ⲆΔⲆΔⵠⲆᐃΔΔ(v2621);
              }
            } else if (v2620.open && v2627[v2628].id === 200) {
              if ((v2625 = vThis2.ⵠΔⲆⵠᐃ[v2627[v2628].id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) {
                v2837.ΔΔΔⲆΔⲆⵠⵠⲆ(v2620, p1647.shiftKey ? 10 : 1);
              }
            } else if (v2622.open && v2627[v2628].id === 227) {
              if ((v2625 = vThis2.ⵠΔⲆⵠᐃ[v2627[v2628].id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) {
                v2837.ᐃᐃΔⲆΔΔⲆᐃΔ(v2622, p1647.shiftKey ? 10 : 1);
              }
            } else if (v2623.open && v2627[v2628].id === 200) {
              if ((v2625 = vThis2.ⵠΔⲆⵠᐃ[v2627[v2628].id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) {
                v2837.ᐃᐃⲆΔⵠⵠⵠⵠᐃ(v2623, p1647.shiftKey ? 10 : 1);
              }
            } else if (v2624.open && (v2627[v2628].id === 200 || v2627[v2628].id === 224)) {
              if ((v2625 = vThis2.ⵠΔⲆⵠᐃ[v2627[v2628].id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) {
                if (v2627[v2628].id === 200) {
                  v2837.ᐃⲆᐃⲆΔΔΔ(v2624, p1647.shiftKey ? 10 : 1, 0);
                } else {
                  v2837.ᐃⲆᐃⲆΔΔΔ(v2624, 0, p1647.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (user.ⵠⲆⲆᐃ.id < 0 && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !user.ⵠΔⵠⵠΔ.enabled && !vThis2.ΔΔΔΔ.open && !user.ⲆΔᐃⲆΔ) {
          v2627 = user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ;
          v2628 = 0;
          for (; v2627.length > v2628; v2628++) {
            if (v2625 = v2627[v2628].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
              ⵠⵠΔⲆⲆ = v2837.ΔΔⵠⵠⲆⵠΔⲆⲆ(v2627[v2628].id);
              if (ⵠⵠΔⲆⲆ && ga) {
                ga("send", "event", "Game", "craft", v591[v730[v2627[v2628].id].ΔΔⵠΔ].name);
              }
            }
          }
        }
        if (user.ⵠⲆⲆᐃ.id < 0 && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && user.ᐃᐃᐃᐃⲆ.open && !vThis2.ⲆΔⵠⵠⵠ.open && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open) {
          if (v2625 = vThis2.ᐃᐃᐃᐃⲆ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223)) {
            game.ᐃᐃᐃᐃⲆ.select();
          }
        }
        if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ⲆΔⵠⵠⵠ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.options.open) {
          if (v3031.ⲆΔᐃᐃⲆ) {
            if (v2625 = vThis2.Ⲇⵠⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
              v3031.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (v2625 = vThis2.Ⲇⵠⵠᐃ.ⵠⵠⲆΔⵠⵠⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            v3031.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
          if (v2625 = vThis2.options.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            vThis2.options.ⵠᐃΔΔΔⵠⵠᐃΔ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.options.open && vThis2.ⵠΔⲆⵠᐃᐃᐃ === 1) {
          if (v2625 = vThis2.ⲆΔⵠⵠⵠ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            vThis2.ⲆΔⵠⵠⵠ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ΔΔΔΔ.open && !vThis2.ⲆΔⵠⵠⵠ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && vThis2.ⲆⵠⵠⲆΔᐃⵠ === 1) {
          if (v2625 = vThis2.ⲆΔᐃᐃᐃ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            vThis2.ⲆΔᐃᐃᐃ.ᐃΔΔΔᐃⲆⵠΔᐃ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open && world.mode !== 2 && world.mode !== 5 && vThis2.ⲆⵠᐃⲆⵠᐃⲆ === 1) {
          if (v2625 = vThis2.ΔΔΔⵠ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
            vThis2.ΔΔΔⵠ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (user.ⵠⲆⲆᐃ.ⵠⲆⲆᐃᐃ && p1647.which == 3) {
          vThis2.ᐃⲆΔΔⵠ.ΔⵠΔⵠΔⵠⲆ();
        }
      }
    };
    this.ΔⵠΔᐃⵠΔᐃ = false;
    this.ΔⵠⵠΔΔᐃΔ = function (p1648) {
      v3063.ᐃΔⵠⲆ = f429(vThis2.ⵠΔΔ, p1648);
      var vVVV1443 = vVV144;
      game.ᐃΔⵠᐃⲆ.display = 0;
      user.ᐃⵠⲆⲆ.ΔᐃΔⵠⲆⵠⵠ.ΔⲆⵠⲆᐃ(v3063.ᐃΔⵠⲆ);
      if (vThis2.ΔΔΔⲆΔ != -1) {
        vVVV1443 |= vThis2.Δᐃᐃᐃⵠ[vThis2.ΔΔΔⲆΔ].button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      var v2629 = user.ΔⵠⵠⲆ;
      if (v2629.open && v2629.ⵠΔᐃⲆⲆⲆᐃ > 0) {
        vVVV1443 |= vThis2.ⲆⵠⲆᐃⵠΔΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      var v2630 = user.ΔⲆⲆⵠ;
      if (v2630.open && v2630.ⲆⵠᐃΔΔᐃᐃ > 0) {
        vVVV1443 |= vThis2.ⵠΔⲆⲆΔΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ᐃⲆⲆΔΔᐃⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ᐃⲆⲆΔⲆᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ⵠⲆⲆⲆᐃᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ⲆΔⲆᐃΔᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ᐃᐃᐃⲆⲆΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ΔᐃΔΔΔⵠⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ⲆΔⲆⵠⵠΔᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ⲆⲆᐃⲆᐃⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ⲆⵠⵠᐃⵠⵠΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ΔⵠⵠΔᐃΔⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ⵠⲆⲆⵠᐃᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ⵠΔⲆᐃⲆⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        vVVV1443 |= vThis2.ⲆⲆΔΔⲆᐃΔ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      var v2631 = user.ΔⵠⲆⵠ;
      if (v2631.open && v2631.ᐃⲆΔⲆⲆΔⵠ > 0) {
        vVVV1443 |= vThis2.ⵠⵠⵠΔΔⲆⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      if (user.sign.open) {
        vVVV1443 |= vThis2.sign.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      var v2632 = user.ⵠⲆΔᐃ;
      if (user.ⵠⲆⲆᐃ.id < 0 && v2632.id >= 0 && !user.ⵠΔⵠⵠΔ.enabled) {
        if (!user.ⵠⲆΔᐃ.lock || user.id === user.ⵠⲆΔᐃ.ΔⲆᐃⲆ) {
          vVVV1443 |= vThis2.ⵠΔᐃ[v2632.id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        }
      }
      if (user.ΔⲆᐃᐃⲆ.open) {
        vVVV1443 |= vThis2.ΔⲆᐃᐃⲆ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      if (!user.ⵠⲆΔᐃ.lock && !user.ⵠΔⵠⵠΔ.enabled) {
        if (user.ⵠⲆΔᐃ.ⵠᐃⵠⲆⲆΔⲆ) {
          vVVV1443 |= vThis2.ᐃΔΔⲆΔᐃᐃ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        }
      }
      if (user.ⵠⲆΔᐃ.ⲆⵠⲆⲆⲆΔᐃ && !user.ⵠΔⵠⵠΔ.enabled) {
        vVVV1443 |= vThis2.ᐃⵠᐃᐃᐃᐃⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      if (user.ⵠⲆⲆᐃ.id < 0 && !user.ⵠΔⵠⵠΔ.enabled) {
        for (var v2633 = user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ, v2634 = 0; v2634 < v2633.length; v2634++) {
          var v2635 = v2633[v2634].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
          vVVV1443 |= game.ᐃΔⵠᐃⲆ.ᐃᐃⲆⵠ(v2635, v2633[v2634], 0);
          if (v2632.open && (v2632.id < 0 || v2633[v2634].id == v2632.id) || user.ⵠⲆⵠΔΔ.open && v2633[v2634].id == 200 || user.ΔᐃⲆΔᐃ.open && v2633[v2634].id === 282 || user.ΔⵠⲆⵠ.open && (v2633[v2634].id == 200 || v2633[v2634].id == 224) || user.ΔⵠⵠⲆ.open && v2633[v2634].id == 227 || user.ΔⲆⲆⵠ.open && v2633[v2634].id == 200) {
            vVVV1443 |= vThis2.ⵠΔⲆⵠᐃ[v2633[v2634].id].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
          }
        }
      }
      if (user.ⵠⲆⲆᐃ.id < 0 && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !user.ⵠΔⵠⵠΔ.enabled && !user.ⲆΔᐃⲆΔ) {
        v2633 = user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ;
        v2634 = 0;
        for (; v2634 < v2633.length; v2634++) {
          v2635 = false;
          v2635 = v2633[v2634].ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
          vVVV1443 |= game.ᐃΔⵠᐃⲆ.ᐃᐃⲆⵠ(v2635, v2633[v2634], 1);
        }
      }
      if (user.ⵠⲆⲆᐃ.id < 0 && user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && user.ᐃᐃᐃᐃⲆ.open && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
        vVVV1443 |= vThis2.ᐃᐃᐃᐃⲆ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open && vThis2.ⲆⵠⵠⲆΔᐃⵠ === 1) {
        vVVV1443 |= vThis2.ⲆΔᐃᐃᐃ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      if (!!(user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
        vVVV1443 |= vThis2.options.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      if (!!(user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.options.open && vThis2.ⵠΔⲆⵠᐃᐃᐃ === 1) {
        vVVV1443 |= vThis2.ⲆΔⵠⵠⵠ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      if (!!(user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0) && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ΔΔΔⵠ.open && !vThis2.options.open && !vThis2.ⲆΔⵠⵠⵠ.open) {
        if (v3031.ⲆΔᐃᐃⲆ) {
          vVVV1443 |= vThis2.Ⲇⵠⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        } else {
          vVVV1443 |= vThis2.Ⲇⵠⵠᐃ.ⵠⵠⲆΔⵠⵠⵠ.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        }
      }
      if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ < 0 && !vThis2.ⲆΔᐃᐃᐃ.open && !vThis2.ΔΔΔΔ.open && !vThis2.options.open && !vThis2.ᐃⲆΔΔⵠ.open && !vThis2.ⲆΔⵠⵠⵠ.open && world.mode !== 2 && world.mode !== v2257.ᐃᐃⵠⲆⵠⲆΔᐃⲆ && vThis2.ⲆⵠᐃⲆⵠᐃⲆ === 1) {
        vVVV1443 |= vThis2.ΔΔΔⵠ.button.ᐃᐃⲆⵠ(vThis2.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
      }
      if (vVVV1443 !== vThis2.ΔⵠΔᐃⵠΔᐃ) {
        vThis2.ΔⵠΔᐃⵠΔᐃ = vVVV1443;
        p1622.style.cursor = vVVV1443 ? vThis2.ᐃᐃΔΔⲆΔᐃ : vThis2.ᐃⵠᐃᐃΔⵠΔ;
      }
    };
    this.ⲆⵠΔᐃⲆΔⵠ = function () {
      vWindow.addEventListener("mousedown", this.ⵠⲆΔⲆΔⲆΔ, vVVVV1422);
      vWindow.addEventListener("mouseup", this.ⲆᐃΔⲆᐃΔⲆ, false);
      vWindow.addEventListener("mousemove", this.ΔⵠⵠΔΔᐃΔ, v14);
      vWindow.addEventListener("keyup", this.ΔᐃΔΔⲆⲆⲆ, v14);
      vWindow.addEventListener("keydown", this.ΔⵠΔᐃΔⵠⲆ, false);
    };
    this.ΔⲆⲆΔⵠᐃΔ = function () {
      vWindow.removeEventListener("mousedown", this.ⵠⲆΔⲆΔⲆΔ, vVV144);
      vWindow.removeEventListener("mouseup", this.ⲆᐃΔⲆᐃΔⲆ, vVVV142);
      vWindow.removeEventListener("mousemove", this.ΔⵠⵠΔΔᐃΔ, vVVVV1422);
      vWindow.removeEventListener("keyup", this.ΔᐃΔΔⲆⲆⲆ, vVVVV1422);
      vWindow.removeEventListener("keydown", this.ΔⵠΔᐃΔⵠⲆ, false);
    };
  }
  function f491(p1649, p1650, p1651) {
    const v2636 = ((p1649 + 38748) * 1664525 + 1013904223) % 4294967296;
    const v2637 = ~(p1650 & 4435) & (p1650 | 4435);
    const v2638 = ~(p1651 & 10353) & p1651 | ~(p1651 & 10353) & 10353;
    const vF63 = f63(v2636, v2637, v2638, v2636, v2637);
    const vF632 = f63(v2638, v2636, v2637, v2638, v2636);
    return (16 << ((vF63 ^ vF632) >> 24 & 255)) + (8 << ((vF63 ^ vF632) & 255)) + (24 << ((vF63 ^ vF632) >> 16 & 255)) + (0 << ((vF63 ^ vF632) >> 8 & 255));
  }
  function f492(p1652, p1653, p1654, p1655, p1656) {
    const v2639 = ~(p1652 & 35036) & p1652 | ~(p1652 & 35036) & 35036;
    const v2640 = (8 << (p1654 & 255)) + (0 << (p1654 >> 16 & 255)) + (16 << (p1654 >> 8 & 255)) + (24 << (p1654 >> 24 & 255));
    const v2641 = (8 << (p1655 >> 8 & 255)) + (24 << (p1655 >> 16 & 255)) + (16 << (p1655 & 255)) + (0 << (p1655 >> 24 & 255));
    const v2642 = (p1656 | 41525) & ~(p1656 & 41525);
    const vF442 = f44(v2639, ~(p1653 & 9956) & p1653 | ~(p1653 & 9956) & 9956);
    f480(v2640, v2641, v2642, v2639);
    return ~(vF442 & 2559) & vF442 | ~(vF442 & 2559) & 2559;
  }
  function f493() {
    Δᐃᐃ.ⲆⵠΔⲆΔⲆⵠ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function f494(p1657, p1658) {
    this.ⵠΔΔ = p1657;
    this.ⵠⲆΔᐃΔᐃᐃΔⲆ = 14420;
    this.Δ = p1658;
    if (vWindow.navigator.userAgent.indexOf("Edge") > -1) {
      this.ᐃⵠᐃᐃΔⵠΔ = "default";
      this.ᐃᐃΔΔⲆΔᐃ = "pointer";
    } else {
      this.ᐃⵠᐃᐃΔⵠΔ = "url('img/cursor0.png'), default";
      this.ᐃᐃΔΔⲆΔᐃ = "url('img/cursor1.png'), pointer";
    }
    this.ᐃᐃᐃⲆⵠΔⵠ = 201;
    this.ⲆΔᐃⵠⲆᐃᐃ = 204;
    this.ᐃᐃᐃⲆⵠΔⵠ;
    this.ⲆΔᐃⵠⲆᐃᐃ;
    var vThis3 = this;
    this.waiting = vV142;
    this.ᐃⵠΔⲆⲆⵠⵠ = 0;
    this.ᐃⲆⵠᐃⵠⲆᐃ = -1;
    this.ⵠⵠᐃΔΔᐃⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      angle: 0,
      Δⵠ: ᐃᐃ[412],
      ⲆΔᐃΔ: function () {
        this.angle += v3064 * 2;
        p1658.save();
        p1658.translate(this.translate.x + this.Δⵠ.width / 2, this.translate.y + this.Δⵠ.height / 2);
        p1658.rotate(this.angle);
        f295(p1658, this.Δⵠ, -this.Δⵠ.width / 2, -this.Δⵠ.height / 2);
        p1658.restore();
      }
    };
    this.ΔⲆᐃⵠⲆⵠⵠ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠᐃᐃ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⵠⲆⲆⵠⲆ = 0;
    this.ᐃΔΔⲆΔᐃⵠΔᐃ = -16;
    this.ⲆΔΔⲆⲆⲆⵠ = 36;
    this.ᐃᐃⲆⵠⲆΔΔ = 194;
    this.ᐃᐃⲆⵠⲆΔΔ;
    this.ⲆΔΔⲆⲆⲆⵠ;
    this.ⵠΔΔⵠΔⲆⵠ = -1;
    this.ⵠΔⲆᐃⲆⵠΔ = undefined;
    this.ⲆⲆⲆⵠᐃΔⵠ = "";
    this.ᐃᐃⵠΔΔᐃⲆⲆᐃ = 9880;
    this.ⵠⲆⲆΔᐃᐃΔ = "";
    var v2643 = 91;
    this.ⵠᐃᐃΔⵠⲆⵠⲆᐃ = 319;
    if (v2643 === 11) {
      v2643 = 39;
    }
    this.ⲆⲆⵠᐃⵠΔⵠ = vVVVUndefined142;
    this.ⵠⲆᐃⵠᐃ = 0;
    this.ΔΔᐃΔΔᐃⲆ = -1;
    this.ΔⵠᐃⲆΔᐃⵠ = undefined;
    this.ΔᐃⵠⵠΔⲆⵠ = 118;
    this.ⲆⲆⲆⵠⲆⵠⲆ = 89;
    this.ΔᐃⵠⵠΔⲆⵠ;
    this.ⲆⲆⲆⵠⲆⵠⲆ;
    this.ⲆⵠΔᐃΔⲆⵠ = 0;
    this.ⵠΔᐃΔᐃᐃⵠ = 0;
    this.ⲆⵠⲆⵠᐃⲆⲆ = 141;
    this.ᐃⲆΔⵠΔⲆⲆ = this.ⲆⵠⲆⵠᐃⲆⲆ;
    this.ⲆⲆⵠⵠⲆⵠΔ = 0;
    this.ᐃᐃⲆΔᐃᐃΔ = 0;
    this.ΔΔΔΔⵠᐃⲆ = 0;
    this.time = 0;
    this.Ⲇⵠⵠᐃᐃ = 0;
    this.ⵠΔⲆⵠΔΔᐃ = 0;
    this.ⲆΔΔⵠᐃⲆⲆ = 0;
    this.ᐃᐃⵠⲆⵠⵠⲆ = 0;
    var v2644 = 220;
    if (v2644 == 7) {
      v2644 = 38;
    }
    this.ⵠᐃᐃⲆᐃⲆⵠⲆⵠ = vVVVV6322;
    this.ⲆᐃⲆⲆᐃΔᐃ = 0;
    this.Ⲇᐃᐃⵠⵠᐃⵠ = [];
    this.ⵠⵠⲆⲆⵠⵠⵠ = -1;
    this.ΔⵠᐃⲆⵠᐃΔ = -1;
    this.ⲆΔⲆⲆⲆⵠⵠ = -1;
    this.ⵠᐃⲆⲆΔᐃⲆ = vVVVVVUndefined14;
    this.ⵠᐃΔΔⵠᐃΔ = undefined;
    this.ⵠᐃᐃᐃⵠΔᐃ = -1;
    this.ᐃΔᐃⵠᐃⵠΔ = 77;
    this.ⲆⵠⵠΔᐃⲆⵠ = 52;
    this.ⲆⵠⵠΔᐃⲆⵠ;
    this.ᐃΔᐃⵠᐃⵠΔ;
    this.ΔⵠⵠᐃⲆⲆⵠ = -1;
    this.ΔⲆⵠⵠΔⵠΔ = -1;
    this.ⵠⵠΔⲆⵠⲆⲆ = -1;
    this.ᐃΔᐃⲆⲆᐃⵠ = undefined;
    this.ⵠᐃᐃⵠΔⵠⲆ = undefined;
    this.ΔⵠΔΔᐃΔΔ = vVVVVVUndefined1422;
    this.ᐃⲆⵠⵠᐃΔΔ = vVVVUndefined14;
    this.ⲆⲆⲆⲆΔᐃⲆ = vVVVVUndefined583;
    this.ⲆⵠΔΔⲆⲆⵠᐃᐃ = 164;
    this.ⲆᐃᐃⲆΔⲆΔⲆᐃ = 58;
    this.ⲆᐃᐃⲆΔⲆΔⲆᐃ;
    this.ⲆⵠΔΔⲆⲆⵠᐃᐃ;
    this.ⵠΔⵠΔⵠⲆⵠ = vVVVVUndefined142;
    this.ⵠⵠΔΔⲆⵠⲆ = vVVVUndefined58;
    this.ᐃⵠⲆΔⲆᐃⵠ = vVVVVUndefined582;
    this.ΔΔⲆᐃΔᐃⲆ = undefined;
    var v2645 = 188;
    function g(p1659, p1660, p1661, p1662, p1663) {
      var vThis4 = this;
      for (var v2646 = p1660 + 9, v2647 = 0, vP1662 = p1662, vP1660 = p1660; vP1660 < v2646; vP1660++) {
        vThis3.buttons[vP1660].info.callback = f496;
        vThis3.buttons[vP1660].info.ᐃⵠᐃⲆΔᐃΔΔⲆ = p1659;
      }
      function f496() {
        if (vP1662 !== this.ΔΔᐃᐃⵠⲆⲆ && this.ΔΔᐃᐃⵠⲆⲆ !== -1) {
          if (this.ⲆΔᐃⵠⲆⲆΔ > 0) {
            if (p1660 === ⵠᐃΔⲆⲆⵠⵠ) {
              f502(v2689, v2759, "none");
            } else {
              f502(v2690, v2759, "none");
            }
          } else if (ⵠᐃΔⲆⲆⵠⵠ === p1660) {
            f502(v2689, v2760, "inline-block");
          } else {
            f502(v2690, v2760, "inline-block");
          }
          vP1662 = this.ΔΔᐃᐃⵠⲆⲆ;
          p1661(this.ΔΔᐃᐃⵠⲆⲆ);
          f497();
        }
      }
      function f497() {
        var v2648 = p1659[vP1662];
        v2833.ᐃⲆⵠⵠᐃΔΔ = f430(v2648.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
        if (v2648.level !== vVVVVUndefined583) {
          v2833.ⲆⲆⲆⲆΔᐃⲆ = f430("Level " + v2648.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        } else {
          v2833.ⲆⲆⲆⲆΔᐃⲆ = f430("by " + v2648.ᐃⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, vVVVVUndefined143, 10, 8);
        }
      }
      this.ⲆᐃᐃⵠⵠⵠΔ = function () {
        for (var vP16602 = p1660, v2649 = v2647 * 3; vP16602 < v2646 && p1659.length > v2649; vP16602++, v2649++) {
          if (ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ !== p1659[v2649].ⲆⲆΔ || p1663[v2649] !== 0) {
            vThis3.buttons[vP16602].info.ΔΔᐃᐃⵠⲆⲆ = v2649;
            for (var v2650 = 0; v2650 < 3; v2650++) {
              vThis3.buttons[vP16602].info.Δⵠ[v2650] = ⵠΔᐃᐃΔⵠⲆ[p1659[v2649].ⲆⲆΔ][v2650];
              vThis3.buttons[vP16602].info.active = v2760;
              vThis3.buttons[vP16602].info.ⲆΔᐃⵠⲆⲆΔ = p1663[v2649];
            }
          } else {
            vThis3.buttons[vP16602].info.ΔΔᐃᐃⵠⲆⲆ = -1;
            vThis3.buttons[vP16602].info.active = v2759;
          }
        }
        for (; v2646 > vP16602; vP16602++) {
          vThis3.buttons[vP16602].info.ΔΔᐃᐃⵠⲆⲆ = -1;
          vThis3.buttons[vP16602].info.active = v2759;
        }
        f497();
      };
      vThis3.buttons[v2646].info.callback = function () {
        if (v2647 > 0) {
          v2647--;
        }
        vThis4.ⲆᐃᐃⵠⵠⵠΔ();
      };
      vThis3.buttons[v2646 + 1].info.callback = function () {
        if (v2647 * 3 + 9 < p1659.length) {
          v2647++;
        }
        vThis4.ⲆᐃᐃⵠⵠⵠΔ();
      };
    }
    function f498() {
      var vNumber4 = Number(ⲆᐃΔⵠ.get("starve_crate"));
      var vNumber5 = Number(ⲆᐃΔⵠ.get("starve_dead"));
      var vNumber6 = Number(ⲆᐃΔⵠ.get("starve_book"));
      var vNumber7 = Number(ⲆᐃΔⵠ.get("starve_bag"));
      var vNumber8 = Number(ⲆᐃΔⵠ.get("starve_skin"));
      var vNumber9 = Number(ⲆᐃΔⵠ.get("starve_accessory"));
      vThis3.ⲆΔⲆⲆ = vNumber8 || 0;
      vThis3.ⵠΔᐃΔᐃ = vNumber6 || 0;
      vThis3.ΔⲆⵠΔΔ = vNumber4 || 1;
      vThis3.ⵠᐃΔᐃΔ = vNumber9 || 0;
      vThis3.Δⵠᐃⵠᐃ = vNumber7 || 0;
      vThis3.ΔⵠΔⲆᐃ = vNumber5 || 0;
    }
    function f499() {
      for (var v2651 = ΔⵠᐃΔ.ⵠⵠᐃᐃΔ, v2652 = 0; v2652 < v2651.length; v2652++) {
        if (v2651[v2652].ⲆⲆΔ === ᐃⵠΔ.ΔⲆⲆΔᐃ) {
          vThis3.unlock.ⲆΔⲆⲆ[v2652] = 1;
        } else {
          vThis3.unlock.ⲆΔⲆⲆ[v2652] = 0;
        }
      }
      v2651 = ΔⵠᐃΔ.ⵠⲆΔᐃΔ;
      v2652 = 0;
      for (; v2652 < v2651.length; v2652++) {
        if (v2651[v2652].ⲆⲆΔ === ᐃⵠΔ.ΔⲆⲆΔᐃ) {
          vThis3.unlock.ⵠᐃΔᐃΔ[v2652] = 1;
        } else {
          vThis3.unlock.ⵠᐃΔᐃΔ[v2652] = 0;
        }
      }
      v2651 = ΔⵠᐃΔ.ⲆⲆΔΔ;
      v2652 = 0;
      for (; v2651.length > v2652; v2652++) {
        if (ᐃⵠΔ.ΔⲆⲆΔᐃ === v2651[v2652].ⲆⲆΔ) {
          vThis3.unlock.Δⵠᐃⵠᐃ[v2652] = 1;
        } else {
          vThis3.unlock.Δⵠᐃⵠᐃ[v2652] = 0;
        }
      }
      v2651 = ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ;
      v2652 = 0;
      for (; v2652 < v2651.length; v2652++) {
        if (v2651[v2652].ⲆⲆΔ === ᐃⵠΔ.ΔⲆⲆΔᐃ) {
          vThis3.unlock.ⵠΔᐃΔᐃ[v2652] = 1;
        } else {
          vThis3.unlock.ⵠΔᐃΔᐃ[v2652] = 0;
        }
      }
      v2651 = ΔⵠᐃΔ.ΔⵠΔⲆⵠ;
      v2652 = 0;
      for (; v2652 < v2651.length; v2652++) {
        if (v2651[v2652].ⲆⲆΔ === ᐃⵠΔ.ΔⲆⲆΔᐃ) {
          vThis3.unlock.ΔⲆⵠΔΔ[v2652] = 1;
          vThis3.unlock.ΔⵠΔⲆᐃ[v2652] = 1;
        } else {
          vThis3.unlock.ΔⲆⵠΔΔ[v2652] = 0;
          vThis3.unlock.ΔⵠΔⲆᐃ[v2652] = 0;
        }
      }
    }
    if (v2645 > 3) {
      v2645 = 135;
    }
    this.ᐃᐃΔⲆⲆⲆⵠ = 6;
    this.ᐃⲆⵠᐃ = 0;
    this.ᐃⵠⲆᐃᐃΔᐃᐃᐃ = false;
    this.ⲆΔⲆΔΔ = ⲆᐃΔⵠ.get("starve_quality") ? ⲆᐃΔⵠ.get("starve_quality") : "high";
    if (this.ⲆΔⲆΔΔ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⲆΔⲆΔΔ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⲆΔⲆΔΔ = 0;
    }
    this.ⲆΔᐃⵠΔⲆⵠⲆⵠ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⲆᐃΔⵠ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      game.ΔΔΔᐃⵠⵠᐃ();
      v2833.ⲆΔⲆΔΔ = 1;
    };
    this.ⲆΔᐃᐃⲆᐃᐃᐃΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⲆᐃΔⵠ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (v481 / v482);
      game.ΔΔΔᐃⵠⵠᐃ();
      v2833.ⲆΔⲆΔΔ = 0;
    };
    if (ⲆᐃΔⵠ.get("starve_mapping") === undefined && v544 === "FR") {
      v3059.ᐃᐃⵠΔⵠᐃⵠ();
      this.ᐃⲆⲆΔⵠⵠΔ = "azerty";
    } else {
      this.ᐃⲆⲆΔⵠⵠΔ = ⲆᐃΔⵠ.get("starve_mapping") ? ⲆᐃΔⵠ.get("starve_mapping") : "qwerty";
    }
    if (this.ᐃⲆⲆΔⵠⵠΔ == "azerty") {
      v3059.ᐃᐃⵠΔⵠᐃⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ᐃᐃⵠΔⵠᐃⵠ = function () {
      v3059.ᐃᐃⵠΔⵠᐃⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⲆᐃΔⵠ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⲆⲆⵠᐃᐃΔⵠ = function () {
      v3059.ⲆⲆⵠᐃᐃΔⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⲆᐃΔⵠ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⵠᐃᐃΔᐃΔΔ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠᐃᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    f498();
    this.unlock = {};
    this.unlock.ⲆΔⲆⲆ = [];
    this.unlock.Δⵠᐃⵠᐃ = [];
    this.unlock.ⵠΔᐃΔᐃ = [];
    this.unlock.ΔⲆⵠΔΔ = [];
    this.unlock.ΔⵠΔⲆᐃ = [];
    this.unlock.ⵠᐃΔᐃΔ = [];
    this.ᐃⵠⵠⲆΔⲆⲆ = 0;
    this.ΔΔᐃⲆⵠⲆΔ = f499;
    f499();
    this.ⵠΔᐃΔⲆⵠⲆ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠᐃᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var v2653;
    var v2654 = 0;
    function f500() {
      vThis3.ⵠᐃᐃ();
      if (++v2654 == 30) {
        vThis3.ⲆⵠΔᐃⲆΔⵠ();
        vThis3.ᐃⵠΔⲆⲆⵠⵠ = vVVVV6322;
        vThis3.ⵠᐃᐃ();
        return;
      }
      vWindow.setTimeout(f500, 33);
    }
    this.ᐃᐃΔⵠⵠ = function (p1664) {
      v2653 = p1664;
      vThis3.ΔⲆⲆΔⵠᐃΔ();
      vThis3.ᐃⵠΔⲆⲆⵠⵠ = 0;
      v2655 = -1;
      f501();
    };
    var v2655 = -1;
    function f501() {
      vThis3.ⵠᐃᐃ();
      if (++v2655 == 30) {
        ⲆᐃΔⵠ.set("starve_nickname", vThis3.ᐃⲆᐃⵠⲆ.input.value, {
          expires: 30
        });
        vThis3.ᐃⲆᐃⵠⲆ.style.display = "none";
        vThis3.ⵠΔⲆⵠⲆ.style.display = "none";
        vThis3.ΔⲆᐃⵠⲆⵠⵠ.style.display = "none";
        vThis3.ⵠᐃᐃΔᐃΔΔ.style.display = "none";
        vThis3.ⵠΔᐃΔⲆⵠⲆ.style.display = "none";
        vThis3.stop();
        v2653();
        return;
      }
      vWindow.setTimeout(f501, 33);
    }
    this.ΔΔΔⵠᐃ = false;
    this.stop = function () {
      this.ΔΔΔⵠᐃ = false;
    };
    this.ⲆΔᐃᐃⲆ = function () {
      f534();
      document.getElementById("game_body").style.backgroundColor = v585.ΔΔⲆⲆⵠ[v2832.time];
      vThis3.ᐃⲆᐃⵠⲆ.style.display = "inline-block";
      vThis3.ⵠΔⲆⵠⲆ.style.display = "inline-block";
      vThis3.ΔⲆᐃⵠⲆⵠⵠ.style.display = "inline-block";
      vThis3.ⵠᐃᐃΔᐃΔΔ.style.display = "inline-block";
      vThis3.ⵠΔᐃΔⲆⵠⲆ.style.display = "inline-block";
      vThis3.waiting = vVV143;
      vThis3.ΔΔΔⵠᐃ = true;
      v2655 = -1;
      v2654 = 0;
      f500();
    };
    this.ⲆΔⵠΔⲆⲆᐃ = function (p1665, p1666) {
      p1666 = p1666 < 0 ? -p1666 : p1666;
      if ((p1665.position & v2755) === v2755) {
        if ((p1665.position & v2751) === v2751) {
          p1665.translate.x = v409 + p1665.translate.ⲆⲆⲆΔⲆ - p1666;
        } else if ((p1665.position & v2752) === v2752) {
          p1665.translate.x = v409 + p1665.translate.ⲆⲆⲆΔⲆ + p1666;
        } else {
          p1665.translate.x = v409 + p1665.translate.ⲆⲆⲆΔⲆ;
        }
      } else if ((p1665.position & v2751) === v2751) {
        p1665.translate.x = p1665.translate.ⲆⲆⲆΔⲆ - p1666;
      } else if (v2752 === (p1665.position & v2752)) {
        p1665.translate.x = v406 - p1665.translate.ⲆⲆⲆΔⲆ + p1666;
      } else {
        p1665.translate.x = p1665.translate.ⲆⲆⲆΔⲆ;
      }
      if (v2756 === (p1665.position & v2756)) {
        if ((p1665.position & v2753) === v2753) {
          p1665.translate.y = v410 + p1665.translate.ΔΔΔΔᐃ - p1666;
        } else if ((p1665.position & v2754) === v2754) {
          p1665.translate.y = v410 + p1665.translate.ΔΔΔΔᐃ + p1666;
        } else {
          p1665.translate.y = v410 + p1665.translate.ΔΔΔΔᐃ;
        }
      } else if ((p1665.position & v2753) === v2753) {
        p1665.translate.y = p1665.translate.ΔΔΔΔᐃ - p1666;
      } else if ((p1665.position & v2754) === v2754) {
        p1665.translate.y = v408 + p1665.translate.ΔΔΔΔᐃ + p1666;
      } else {
        p1665.translate.y = p1665.translate.ΔΔΔΔᐃ;
      }
      if (vUndefined !== p1665.style) {
        p1665.style.left = Math.floor(p1665.translate.x) + "px";
        p1665.style.top = Math.floor(p1665.translate.y) + "px";
      }
    };
    this.ⵠᐃᐃ = function () {
      var v2656 = 0;
      if (v2654 != 30 || v2655 != -1) {
        if (v2654 != 30) {
          v2656 = 1500 / (v2654 + 1) - 50;
        }
        if (v2655 != -1) {
          v2656 = -(1750 / (30 - v2655 + 1) - 48);
        }
      }
      for (var v2657 = 0; v2657 < this.ⲆᐃⲆⲆ.length; v2657++) {
        this.ⲆΔⵠΔⲆⲆᐃ(this.ⲆᐃⲆⲆ[v2657], v2656);
      }
      for (v2657 = 0; v2657 < this.buttons.length; v2657++) {
        this.ⲆΔⵠΔⲆⲆᐃ(this.buttons[v2657].info, v2656);
      }
      for (v2657 = 0; v2657 < this.ᐃⲆⲆⲆⲆΔΔ.length; v2657++) {
        this.ⲆΔⵠΔⲆⲆᐃ(this.ᐃⲆⲆⲆⲆΔΔ[v2657], v2656);
      }
      this.ⵠⵠᐃΔΔᐃⵠ.translate.x = (v406 - this.ⵠⵠᐃΔΔᐃⵠ.Δⵠ.width) / 2;
      this.ⵠⵠᐃΔΔᐃⵠ.translate.y = 0;
      this.ΔⲆᐃⵠⲆⵠⵠ.translate.x = v406 - 450;
      this.ΔⲆᐃⵠⲆⵠⵠ.translate.y = v408 - 40;
      this.ⵠᐃᐃΔᐃΔΔ.translate.x = v406 - 340;
      this.ⵠᐃᐃΔᐃΔΔ.translate.y = v408 - 25;
      this.ⵠΔᐃΔⲆⵠⲆ.translate.x = v406 - 320;
      this.ⵠΔᐃΔⲆⵠⲆ.translate.y = 80;
      if (v2654 != 30 || v2655 != -1) {
        var v2658 = 0;
        if (v2654 != 30) {
          v2658 = 1500 / (v2654 + 1) - 50;
        }
        if (v2655 != -1) {
          v2658 = -(1750 / (30 - v2655 + 1) - 48);
        }
        this.ⵠⵠᐃΔΔᐃⵠ.translate.y -= v2658 > 0 ? v2658 : -v2658;
        this.ΔⲆᐃⵠⲆⵠⵠ.translate.y -= v2658 < 0 ? v2658 : -v2658;
        this.ⵠᐃᐃΔᐃΔΔ.translate.y -= v2658 < 0 ? v2658 : -v2658;
      }
      this.ΔⲆᐃⵠⲆⵠⵠ.ⵠᐃᐃ();
      this.ⵠᐃᐃΔᐃΔΔ.ⵠᐃᐃ();
      this.ⵠΔᐃΔⲆⵠⲆ.ⵠᐃᐃ();
    };
    this.ⵠⲆᐃⲆΔᐃⲆ = function (p1667) {
      var v2659 = document.createElement("canvas");
      var v2660 = v2659.getContext("2d");
      v2659.width = 342;
      v2659.height = 342;
      var v2661 = -Math.PI / 2;
      for (var v2662 = 0; p1667.length > v2662; v2662++) {
        var v2663 = p1667[v2662][0];
        var v2664 = Math.PI * p1667[v2662][1] / 180;
        v2660.beginPath();
        v2660.arc(171, 171, 170, v2661, v2661 + v2664, vVV142);
        v2660.lineTo(171, 171);
        v2660.fillStyle = v2663;
        v2660.fill();
        v2661 += v2664;
      }
      return v2659;
    };
    this.ᐃⵠΔΔⵠᐃΔⲆⵠ = function () {
      this.ⲆⲆⲆⵠᐃΔⵠ = document.getElementById("account_nickname_input").value;
      if (this.ⲆⲆⲆⵠᐃΔⵠ !== this.ⵠⲆⲆΔᐃᐃΔ) {
        this.ⵠⲆⲆΔᐃᐃΔ = this.ⲆⲆⲆⵠᐃΔⵠ;
        this.ⲆⲆⵠᐃⵠΔⵠ = f430(this.ⲆⲆⲆⵠᐃΔⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ⲆΔᐃΔ = function () {
      f287();
      v2833.ⲆⵠΔᐃΔⲆⵠ = Δᐃᐃ.ΔΔⵠᐃⵠ(v2833.ⲆⵠΔᐃΔⲆⵠ, v2833.ⵠΔᐃΔᐃᐃⵠ, 0.03);
      this.ⲆᐃⲆⲆ[ⵠᐃᐃΔᐃⲆⵠ].translate.x = this.ⲆᐃⲆⲆ[0].translate.x + -72 + v2833.ⲆⵠΔᐃΔⲆⵠ * 165;
      this.ⲆᐃⲆⲆ[ⵠᐃᐃΔᐃⲆⵠ].translate.ⲆⲆⲆΔⲆ = this.ⲆᐃⲆⲆ[ⵠᐃᐃΔᐃⲆⵠ].translate.x;
      this.ⲆᐃⲆⲆ[ⵠᐃᐃΔᐃⲆⵠ].translate.y = this.ⲆᐃⲆⲆ[0].translate.y + 30;
      this.ⲆᐃⲆⲆ[ⵠᐃᐃΔᐃⲆⵠ].translate.ΔΔΔΔᐃ = this.ⲆᐃⲆⲆ[ⵠᐃᐃΔᐃⲆⵠ].translate.y;
      for (var v2665 = 2; v2665 < this.ⲆᐃⲆⲆ.length; v2665++) {
        if (this.ⲆᐃⲆⲆ[v2665].active === v2760) {
          this.ⲆᐃⲆⲆ[v2665].ⲆΔᐃΔ(p1658);
        }
      }
      var v2666;
      if ((v2666 = this.ⵠⵠⲆⲆⵠⵠⵠ - Date.now()) > 0) {
        var v2667 = Math.floor(v2666 / 60000);
        var v2668 = Math.floor(v2667 / 60);
        v2667 %= 60;
        if (this.ⲆΔⲆⲆⲆⵠⵠ !== v2667) {
          this.ⲆΔⲆⲆⲆⵠⵠ = v2667;
          v2667 = v2667 < 10 ? "0" + v2667 : "" + v2667;
          vThis3.ⵠᐃⲆⲆΔᐃⲆ = f430(v2667, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (v2668 !== this.ΔⵠᐃⲆⵠᐃΔ) {
          this.ΔⵠᐃⲆⵠᐃΔ = v2668;
          v2668 = v2668 < 10 ? "0" + v2668 : "" + v2668;
          vThis3.ⵠᐃΔΔⵠᐃΔ = f430(v2668, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (v2670 = this.ⲆᐃⲆⲆ[ⲆᐃΔΔⲆⲆΔ]).ⲆΔᐃΔ(p1658);
        var v2669 = this.ⵠᐃΔΔⵠᐃΔ;
        f295(p1658, v2669, v2670.translate.x - v2669.width / 4 + 182, v2670.translate.y - v2669.height / 4 + 40, v2669.width / 2, v2669.height / 2);
        v2669 = this.ⵠᐃⲆⲆΔᐃⲆ;
        f295(p1658, v2669, v2670.translate.x - v2669.width / 4 + 251, v2670.translate.y - v2669.height / 4 + 40, v2669.width / 2, v2669.height / 2);
      }
      if ((v2666 = this.ⵠᐃᐃᐃⵠΔᐃ - Date.now()) > 0) {
        v2667 = Math.floor(v2666 / 60000);
        v2668 = Math.floor(v2667 / 60);
        var v2670;
        var v2671 = Math.floor(v2668 / 24);
        v2667 %= 60;
        v2668 %= 24;
        if (this.ⵠⵠΔⲆⵠⲆⲆ !== v2667) {
          this.ⵠⵠΔⲆⵠⲆⲆ = v2667;
          v2667 = v2667 < 10 ? "0" + v2667 : "" + v2667;
          vThis3.ᐃΔᐃⲆⲆᐃⵠ = f430(v2667, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (v2668 !== this.ΔⲆⵠⵠΔⵠΔ) {
          this.ΔⲆⵠⵠΔⵠΔ = v2668;
          v2668 = v2668 < 10 ? "0" + v2668 : "" + v2668;
          vThis3.ⵠᐃᐃⵠΔⵠⲆ = f430(v2668, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (v2671 !== this.ΔⵠⵠᐃⲆⲆⵠ) {
          this.ΔⵠⵠᐃⲆⲆⵠ = v2671;
          v2671 = v2671 < 10 ? "0" + v2671 : "" + v2671;
          vThis3.ΔⵠΔΔᐃΔΔ = f430(v2671, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (v2670 = this.ⲆᐃⲆⲆ[ᐃⲆⵠᐃⲆΔΔ]).ⲆΔᐃΔ(p1658);
        v2669 = this.ΔⵠΔΔᐃΔΔ;
        f295(p1658, v2669, v2670.translate.x - v2669.width / 4 + 113, v2670.translate.y - v2669.height / 4 + 40, v2669.width / 2, v2669.height / 2);
        v2669 = this.ⵠᐃᐃⵠΔⵠⲆ;
        f295(p1658, v2669, v2670.translate.x - v2669.width / 4 + 182, v2670.translate.y - v2669.height / 4 + 40, v2669.width / 2, v2669.height / 2);
        v2669 = this.ᐃΔᐃⲆⲆᐃⵠ;
        f295(p1658, v2669, v2670.translate.x - v2669.width / 4 + 251, v2670.translate.y - v2669.height / 4 + 40, v2669.width / 2, v2669.height / 2);
      }
      if ((this.ⵠΔⵠⲆⲆ & v2681) === v2681) {
        this.buttons[ⲆⵠⲆⵠᐃᐃᐃ].info.state = v2226;
      } else if ((this.ⵠΔⵠⲆⲆ & v2687) === v2687) {
        this.buttons[ΔΔᐃᐃⲆⵠᐃ].info.state = v2226;
      } else if ((this.ⵠΔⵠⲆⲆ & v2684) === v2684) {
        this.buttons[ΔⵠⲆᐃⵠΔⵠ].info.state = v2226;
      } else if ((this.ⵠΔⵠⲆⲆ & v2682) === v2682) {
        this.buttons[ΔᐃΔⵠⲆⵠᐃ].info.state = v2226;
      } else if ((this.ⵠΔⵠⲆⲆ & v2686) === v2686) {
        this.buttons[ΔᐃᐃⲆᐃΔᐃ].info.state = v2226;
      } else if (v2683 === (this.ⵠΔⵠⲆⲆ & v2683)) {
        this.buttons[ⵠⲆⲆⲆⵠΔⵠ].info.state = v2226;
      } else if (v2685 === (this.ⵠΔⵠⲆⲆ & v2685) || (this.ⵠΔⵠⲆⲆ & v2691) === v2691 || v2692 === (this.ⵠΔⵠⲆⲆ & v2692) || v2693 === (this.ⵠΔⵠⲆⲆ & v2693) || (this.ⵠΔⵠⲆⲆ & v2694) === v2694 || v2695 === (this.ⵠΔⵠⲆⲆ & v2695) || (this.ⵠΔⵠⲆⲆ & v2696) === v2696) {
        this.buttons[ΔⲆΔᐃΔⵠⵠ].info.state = v2226;
      } else if (v2697 === (this.ⵠΔⵠⲆⲆ & v2697) || v2699 === (this.ⵠΔⵠⲆⲆ & v2699) || v2698 === (this.ⵠΔⵠⲆⲆ & v2698) || v2700 === (this.ⵠΔⵠⲆⲆ & v2700) || v2701 === (this.ⵠΔⵠⲆⲆ & v2701) || (this.ⵠΔⵠⲆⲆ & v2702) === v2702) {
        this.buttons[ΔⵠⲆᐃⵠΔⵠ].info.state = v2226;
      } else if ((this.ⵠΔⵠⲆⲆ & v2705) === v2705 || (this.ⵠΔⵠⲆⲆ & v2706) === v2706 || v2707 === (this.ⵠΔⵠⲆⲆ & v2707)) {
        this.buttons[ⲆⲆΔⵠⲆⲆΔ].info.state = v2226;
      } else if ((this.ⵠΔⵠⲆⲆ & v2708) === v2708) {
        this.buttons[ΔᐃΔⵠⲆⵠᐃ].info.state = v2226;
      }
      if (v2687 === (this.ⵠΔⵠⲆⲆ & v2687)) {
        if (this.ⵠⵠΔΔⲆⵠⲆ === this.ᐃⵠⲆⵠᐃⵠⵠ) {
          this.ⵠΔⵠΔⵠⲆⵠ = this.ΔᐃΔⵠΔΔⵠ;
          this.buttons[this.ΔᐃΔⵠΔΔⵠ].info.active = v2759;
          this.buttons[this.ⲆᐃⲆΔⵠⲆᐃ].info.active = v2759;
          this.buttons[this.ΔⲆⵠⲆΔⵠᐃ].info.active = v2759;
        } else {
          this.buttons[this.ΔᐃΔⵠΔΔⵠ].info.active = v2760;
          this.buttons[this.ⲆᐃⲆΔⵠⲆᐃ].info.active = v2760;
          this.buttons[this.ΔⲆⵠⲆΔⵠᐃ].info.active = v2760;
        }
        if (this.ⲆⵠᐃⲆⵠᐃᐃ === this.ⵠⵠΔΔⲆⵠⲆ) {
          this.buttons[this.ⲆⵠᐃⲆⵠᐃᐃ].info.state = v2226;
        } else if (this.ⵠΔᐃⵠⲆⵠΔ === this.ⵠⵠΔΔⲆⵠⲆ) {
          this.buttons[this.ⵠΔᐃⵠⲆⵠΔ].info.state = v2226;
        } else if (this.ⵠⵠΔΔⲆⵠⲆ === this.ᐃⵠⲆⵠᐃⵠⵠ) {
          this.buttons[this.ᐃⵠⲆⵠᐃⵠⵠ].info.state = v2226;
        } else if (this.ⲆⵠⵠΔⲆᐃⲆ === this.ⵠⵠΔΔⲆⵠⲆ) {
          this.buttons[this.ⲆⵠⵠΔⲆᐃⲆ].info.state = v2226;
        } else if (this.ᐃⲆⲆᐃΔᐃᐃ === this.ⵠⵠΔΔⲆⵠⲆ) {
          this.buttons[this.ᐃⲆⲆᐃΔᐃᐃ].info.state = v2226;
        }
        if (this.ⵠΔⵠΔⵠⲆⵠ === this.ΔᐃΔⵠΔΔⵠ) {
          this.buttons[this.ΔᐃΔⵠΔΔⵠ].info.state = v2226;
        } else if (this.ⵠΔⵠΔⵠⲆⵠ === this.ⲆᐃⲆΔⵠⲆᐃ) {
          this.buttons[this.ⲆᐃⲆΔⵠⲆᐃ].info.state = v2226;
        } else if (this.ΔⲆⵠⲆΔⵠᐃ === this.ⵠΔⵠΔⵠⲆⵠ) {
          this.buttons[this.ΔⲆⵠⲆΔⵠᐃ].info.state = v2226;
        }
        if (this.ᐃⵠⲆΔⲆᐃⵠ === this.ⵠᐃᐃⲆⲆᐃⵠ) {
          this.buttons[this.ⵠᐃᐃⲆⲆᐃⵠ].info.state = v2226;
        } else if (this.ᐃⵠⲆΔⲆᐃⵠ === this.ⵠⲆᐃΔΔᐃΔ) {
          this.buttons[this.ⵠⲆᐃΔΔᐃΔ].info.state = v2226;
        } else if (this.ⲆᐃΔⲆᐃⲆᐃ === this.ᐃⵠⲆΔⲆᐃⵠ) {
          this.buttons[this.ⲆᐃΔⲆᐃⲆᐃ].info.state = v2226;
        }
        if (this.ΔΔⲆᐃΔᐃⲆ === this.ᐃⲆΔᐃⵠᐃⵠ) {
          this.buttons[this.ᐃⲆΔᐃⵠᐃⵠ].info.state = v2226;
        } else if (this.ΔΔⲆᐃΔᐃⲆ === this.ΔⵠΔⲆⵠΔⵠ) {
          this.buttons[this.ΔⵠΔⲆⵠΔⵠ].info.state = v2226;
        } else if (this.ΔⲆⲆⵠΔᐃⵠ === this.ΔΔⲆᐃΔᐃⲆ) {
          this.buttons[this.ΔⲆⲆⵠΔᐃⵠ].info.state = v2226;
        } else if (this.ΔΔⲆᐃΔᐃⲆ === this.ⲆΔⲆΔᐃⵠⲆ) {
          this.buttons[this.ⲆΔⲆΔᐃⵠⲆ].info.state = v2226;
        } else if (this.ᐃΔⲆⵠⲆⲆᐃ === this.ΔΔⲆᐃΔᐃⲆ) {
          this.buttons[this.ᐃΔⲆⵠⲆⲆᐃ].info.state = v2226;
        } else if (this.ΔΔⲆᐃΔᐃⲆ === this.ⲆΔᐃᐃΔⵠᐃ) {
          this.buttons[this.ⲆΔᐃᐃΔⵠᐃ].info.state = v2226;
        } else if (this.ΔΔⲆᐃΔᐃⲆ === this.ⵠⲆΔⵠⲆΔΔ) {
          this.buttons[this.ⵠⲆΔⵠⲆΔΔ].info.state = v2226;
        }
      }
      if ((this.ⵠΔⵠⲆⲆ & v2682) === v2682) {
        if (this.ᐃⲆⵠᐃⵠⲆᐃ === -1) {
          this.buttons[vV26808].info.state = v2226;
        } else if (this.ᐃⲆⵠᐃⵠⲆᐃ === 0) {
          this.buttons[vV26809].info.state = v2226;
        } else if (this.ᐃⲆⵠᐃⵠⲆᐃ === 2) {
          this.buttons[vV268011].info.state = v2226;
        } else if (this.ᐃⲆⵠᐃⵠⲆᐃ === 3) {
          this.buttons[vV268012].info.state = v2226;
        } else if (this.ᐃⲆⵠᐃⵠⲆᐃ === 4) {
          this.buttons[vV268010].info.state = v2226;
        }
        if (this.ᐃᐃΔⲆⲆⲆⵠ === 0) {
          this.buttons[vV2680].info.state = v2226;
        } else if (this.ᐃᐃΔⲆⲆⲆⵠ === 1) {
          this.buttons[vV26802].info.state = v2226;
        } else if (this.ᐃᐃΔⲆⲆⲆⵠ === 2) {
          this.buttons[vV26803].info.state = v2226;
        } else if (this.ᐃᐃΔⲆⲆⲆⵠ === 3) {
          this.buttons[vV26804].info.state = v2226;
        } else if (this.ᐃᐃΔⲆⲆⲆⵠ === 4) {
          this.buttons[vV26805].info.state = v2226;
        } else if (this.ᐃᐃΔⲆⲆⲆⵠ === 5) {
          this.buttons[vV26806].info.state = v2226;
        } else if (this.ᐃᐃΔⲆⲆⲆⵠ === 6) {
          this.buttons[vV26807].info.state = v2226;
        }
      }
      if ((this.ⵠΔⵠⲆⲆ & v2681) === v2681 && v2837.ΔᐃΔᐃΔᐃᐃ === 0) {
        if (this.buttons[v2766].ΔⵠⵠⲆⵠΔⵠ(v3063.ᐃΔⵠⲆ)) {
          this.buttons[v2766].hint = Math.min(1, this.buttons[v2766].hint + v3064 * 1.5);
        } else {
          this.buttons[v2766].hint = Math.max(0, this.buttons[v2766].hint - v3064 * 1.5);
        }
        if (this.buttons[v2767].ΔⵠⵠⲆⵠΔⵠ(v3063.ᐃΔⵠⲆ)) {
          this.buttons[v2767].hint = Math.min(1, this.buttons[v2767].hint + v3064 * 1.5);
        } else {
          this.buttons[v2767].hint = Math.max(0, this.buttons[v2767].hint - v3064 * 1.5);
        }
        if (this.buttons[v2768].ΔⵠⵠⲆⵠΔⵠ(v3063.ᐃΔⵠⲆ)) {
          this.buttons[v2768].hint = Math.min(1, this.buttons[v2768].hint + v3064 * 1.5);
        } else {
          this.buttons[v2768].hint = Math.max(0, this.buttons[v2768].hint - v3064 * 1.5);
        }
        if (this.buttons[v2771].ΔⵠⵠⲆⵠΔⵠ(v3063.ᐃΔⵠⲆ)) {
          this.buttons[v2771].hint = Math.min(1, this.buttons[v2771].hint + v3064 * 1.5);
        } else {
          this.buttons[v2771].hint = Math.max(0, this.buttons[v2771].hint - v3064 * 1.5);
        }
        if (this.buttons[v2769].ΔⵠⵠⲆⵠΔⵠ(v3063.ᐃΔⵠⲆ)) {
          this.buttons[v2769].hint = Math.min(1, this.buttons[v2769].hint + v3064 * 1.5);
        } else {
          this.buttons[v2769].hint = Math.max(0, this.buttons[v2769].hint - v3064 * 1.5);
        }
        if (this.buttons[v2770].ΔⵠⵠⲆⵠΔⵠ(v3063.ᐃΔⵠⲆ)) {
          this.buttons[v2770].hint = Math.min(1, this.buttons[v2770].hint + v3064 * 1.5);
        } else {
          this.buttons[v2770].hint = Math.max(0, this.buttons[v2770].hint - v3064 * 1.5);
        }
      }
      var v2672 = 1;
      if ((this.ⵠΔⵠⲆⲆ & (v2691 | v2692 | v2693 | v2694 | v2695 | v2696)) > 1) {
        v2669 = ⵠᐃ.ⲆⲆΔⵠΔΔⵠ;
        p1658.save();
        p1658.translate(v409, v2765 + v2669.height / 4);
        if (this.ⵠᐃΔΔᐃ === 1) {
          this.ΔᐃⵠΔⵠΔⲆ += v3064 / 3;
          v2672 = this.ⲆᐃⲆᐃᐃⲆΔ - 100 / Math.pow(1 + this.ΔᐃⵠΔⵠΔⲆ, 1 + this.ΔᐃⵠΔⵠΔⲆ);
          p1658.rotate(v2672);
        }
        f295(p1658, v2669, -v2669.width / 4, -v2669.height / 4, v2669.width / 2, v2669.height / 2);
        p1658.restore();
      }
      if (v2837.ΔᐃΔᐃΔᐃᐃ === 0) {
        if (v2837.ⵠΔⵠΔΔ === 0) {
          this.buttons[v2766].info.state = v2226;
        } else if (v2837.ⵠΔⵠΔΔ === 4) {
          this.buttons[v2767].info.state = v2226;
        } else if (v2837.ⵠΔⵠΔΔ === 2) {
          this.buttons[v2769].info.state = v2226;
        } else if (v2837.ⵠΔⵠΔΔ === 3) {
          this.buttons[v2770].info.state = v2226;
        } else if (v2837.ⵠΔⵠΔΔ === 6) {
          this.buttons[v2768].info.state = v2226;
        } else if (v2837.ⵠΔⵠΔΔ === 7) {
          this.buttons[v2771].info.state = v2226;
        }
      }
      for (v2665 = 1; this.buttons.length > v2665; v2665++) {
        if (v2760 === this.buttons[v2665].info.active) {
          this.buttons[v2665].ⲆΔᐃΔ(p1658);
        }
      }
      this.ⲆᐃⲆⲆ[0].ⲆΔᐃΔ(p1658);
      if ((this.ⵠΔⵠⲆⲆ & (v2704 | v2703)) > 0) {
        v2669 = this.ⲆⲆⵠᐃⵠΔⵠ;
        f295(p1658, v2669, v409 - v2669.width / 4, 138, v2669.width / 2, v2669.height / 2);
      }
      var v2673 = Math.max(1, Math.min(18, Math.floor((v2833.ⵠⲆᐃⵠᐃ + 3) / 2)));
      this.ⲆᐃⲆⲆ[v2673].active = v2760;
      this.ⲆᐃⲆⲆ[v2673].ⲆΔᐃΔ(p1658);
      this.ⲆᐃⲆⲆ[v2673].active = v2759;
      this.buttons[0].ⲆΔᐃΔ(p1658);
      if ((this.ⵠΔⵠⲆⲆ & (v2684 | v2699 | v2700 | v2697 | v2701)) > 1) {
        var v2674 = (this.ⵠΔⵠⲆⲆ & (v2699 | v2700 | v2697 | v2701)) > 1 ? -190 : 0;
        v2669 = ᐃᐃ[47][this.Δⵠᐃⵠᐃ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 + v2674, 183, v2669.width / 2, v2669.height / 2);
        this.ᐃⲆⵠᐃ = (this.ᐃⲆⵠᐃ + v3064 * 1000) % 2000;
        var v2675 = (this.ᐃⲆⵠᐃ < 1000) * 4.5 ? this.ᐃⲆⵠᐃ / 1000 : (2000 - this.ᐃⲆⵠᐃ) / 1000;
        v2669 = ᐃᐃ[46][this.ⵠΔᐃΔᐃ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 - 62 + v2675 + v2674, 240, v2669.width / 2, v2669.height / 2);
        v2669 = ᐃᐃ[7][this.ⲆΔⲆⲆ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 - 54 + v2675 + v2674, 272, v2669.width / 2, v2669.height / 2);
        f295(p1658, v2669, v409 - v2669.width / 4 + 54 - v2675 + v2674, 272, v2669.width / 2, v2669.height / 2);
        v2669 = ᐃᐃ[365][this.ⲆΔⲆⲆ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 + v2674, 222, v2669.width / 2, v2669.height / 2);
        v2669 = ᐃᐃ[1045][this.ⵠᐃΔᐃΔ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 + v2674, 222, v2669.width / 2, v2669.height / 2);
      }
      if ((this.ⵠΔⵠⲆⲆ & v2684) === v2684) {
        v2669 = ᐃᐃ[360][this.ΔⲆⵠΔΔ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 - 61, 406 - v2669.height / 4, v2669.width / 2, v2669.height / 2);
        v2669 = ᐃᐃ[360][this.ΔⵠΔⲆᐃ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 + 53, 406 - v2669.height / 4, v2669.width / 2, v2669.height / 2);
      }
      if (v2698 === (this.ⵠΔⵠⲆⲆ & v2698)) {
        v2669 = ᐃᐃ[360][this.ΔⵠΔⲆᐃ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 - 200, 268 - v2669.height / 4, v2669.width / 2, v2669.height / 2);
      }
      if (v2702 === (this.ⵠΔⵠⲆⲆ & v2702)) {
        v2669 = ᐃᐃ[360][this.ΔⲆⵠΔΔ][this.ᐃⵠⵠⲆΔⲆⲆ];
        f295(p1658, v2669, v409 - v2669.width / 4 - 200, 268 - v2669.height / 4, v2669.width / 2, v2669.height / 2);
      }
      if ((this.ⵠΔⵠⲆⲆ & (v2699 | v2700 | v2697 | v2701 | v2698 | v2702)) > 1) {
        for (v2665 = 1; v2665 < this.buttons.length; v2665++) {
          if ((this.buttons[v2665].view & this.ⵠΔⵠⲆⲆ) !== 0) {
            var v2676 = this.buttons[v2665].info;
            if (v2676.ΔΔᐃᐃⵠⲆⲆ >= 0) {
              v2669 = v2676.ᐃⵠᐃⲆΔᐃΔΔⲆ[v2676.ΔΔᐃᐃⵠⲆⲆ].Δⵠⵠ;
              f295(p1658, v2669, v2676.translate.x - v2669.width / 8 + 44.5, v2676.translate.y - v2669.height / 8 + 45.5, v2669.width / 4, v2669.height / 4);
              if (v2676.ⲆΔᐃⵠⲆⲆΔ !== 1) {
                v2669 = ⵠᐃ.ΔⲆⵠΔⲆⵠΔ;
                f295(p1658, v2669, v2676.translate.x - v2669.width / 4 + 44.5, v2676.translate.y - v2669.height / 4 + 44.5, v2669.width / 2, v2669.height / 2);
              }
            }
          }
        }
        v2669 = this.ᐃⲆⵠⵠᐃΔΔ;
        f295(p1658, v2669, v409 - 312, 375, v2669.width / 2, v2669.height / 2);
        v2669 = this.ⲆⲆⲆⲆΔᐃⲆ;
        f295(p1658, v2669, v409 - 312, 395, v2669.width / 2, v2669.height / 2);
      }
      if (this.ⵠΔΔⵠΔⲆⵠ !== this.ⵠⲆⲆⵠⲆ) {
        this.ⵠΔΔⵠΔⲆⵠ = this.ⵠⲆⲆⵠⲆ;
        this.ⵠΔⲆᐃⲆⵠΔ = f430("" + this.ⵠⲆⲆⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      f295(p1658, this.ⵠΔⲆᐃⲆⵠΔ, this.ⲆᐃⲆⲆ[0].translate.x + 350, 15, this.ⵠΔⲆᐃⲆⵠΔ.w2, this.ⵠΔⲆᐃⲆⵠΔ.ᐃⲆⵠⵠⲆ);
      if (this.ⵠⲆᐃⵠᐃ !== this.ΔΔᐃΔΔᐃⲆ) {
        this.ΔΔᐃΔΔᐃⲆ = this.ⵠⲆᐃⵠᐃ;
        this.ΔⵠᐃⲆΔᐃⵠ = f430("LVL " + (this.ⵠⲆᐃⵠᐃ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, undefined, vVVUndefined14, "#3F3019", 20);
      }
      f295(p1658, this.ΔⵠᐃⲆΔᐃⵠ, this.ⲆᐃⲆⲆ[0].translate.x + 94, 0, this.ΔⵠᐃⲆΔᐃⵠ.w2, this.ΔⵠᐃⲆΔᐃⵠ.ᐃⲆⵠⵠⲆ);
      if (v2837.ΔᐃΔᐃΔᐃᐃ === 0) {
        var v2677 = this.buttons[v2766].hint;
        if (v2677 > 0) {
          v2669 = ⵠᐃ.ⲆⲆΔⵠⵠⲆⲆ;
          f295(p1658, v2669, v409 - v2669.width / 4, -36 - Δᐃᐃ.ΔⲆⲆⲆⲆ(1 - v2677) * v2669.height / 2, v2669.width / 2, v2669.height / 2);
        }
        if ((v2677 = this.buttons[v2767].hint) > 0) {
          v2669 = ⵠᐃ.ⲆⲆΔΔᐃΔᐃ;
          f295(p1658, v2669, v409 - v2669.width / 4, -36 - Δᐃᐃ.ΔⲆⲆⲆⲆ(1 - v2677) * v2669.height / 2, v2669.width / 2, v2669.height / 2);
        }
        v2677 = this.buttons[v2768].hint;
        if (v2677 > 0) {
          v2669 = ⵠᐃ.ⲆΔⵠΔⲆⲆΔ;
          f295(p1658, v2669, v409 - v2669.width / 4, -36 - Δᐃᐃ.ΔⲆⲆⲆⲆ(1 - v2677) * v2669.height / 2, v2669.width / 2, v2669.height / 2);
        }
        if ((v2677 = this.buttons[v2771].hint) > 0) {
          v2669 = ⵠᐃ.ΔΔᐃⵠᐃⲆⲆ;
          f295(p1658, v2669, v409 - v2669.width / 4, -36 - Δᐃᐃ.ΔⲆⲆⲆⲆ(1 - v2677) * v2669.height / 2, v2669.width / 2, v2669.height / 2);
        }
        if ((v2677 = this.buttons[v2770].hint) > 0) {
          v2669 = ⵠᐃ.ⲆⲆΔΔⲆᐃⲆ;
          f295(p1658, v2669, v409 - v2669.width / 4, -36 - v2669.height * Δᐃᐃ.ΔⲆⲆⲆⲆ(1 - v2677) / 2, v2669.width / 2, v2669.height / 2);
        }
        if ((v2677 = this.buttons[v2769].hint) > 0) {
          v2669 = ⵠᐃ.ⵠΔⲆΔΔⵠΔ;
          f295(p1658, v2669, v409 - v2669.width / 4, -36 - Δᐃᐃ.ΔⲆⲆⲆⲆ(1 - v2677) * v2669.height / 2, v2669.width / 2, v2669.height / 2);
        }
      }
      if (this.ⵠᐃΔΔᐃ === 1 && Math.abs(v2672 - this.ⲆᐃⲆᐃᐃⲆΔ) < 0.006) {
        p1658.globalAlpha = Math.min(1, this.ⵠⲆᐃⲆΔⵠⲆ * 3);
        v2669 = ⵠᐃ.ⵠⲆⲆⵠΔⲆᐃ;
        p1658.save();
        p1658.translate(v409, 260);
        this.ⵠⲆᐃⲆΔⵠⲆ += v3064;
        p1658.rotate(this.ⵠⲆᐃⲆΔⵠⲆ);
        f295(p1658, v2669, -v2669.width / 2, -v2669.height / 2, v2669.width, v2669.height);
        p1658.restore();
        v2675 = 1.05 + Math.cos(this.ⵠⲆᐃⲆΔⵠⲆ * 5) * 0.05;
        if (this.ⵠⵠᐃΔⵠⲆᐃ === 0) {
          var v2678 = (v2669 = ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[this.ᐃⲆⵠΔᐃᐃΔ].Δⵠⵠ).width * v2675;
          var v2679 = v2669.height * v2675;
          f295(p1658, v2669, v409 - v2678 / 2, 260 - v2679 / 2, v2678, v2679);
        } else if (this.ⵠⵠᐃΔⵠⲆᐃ === 1) {
          v2678 = v2675 * (v2669 = ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[0].Δⵠⵠ).width;
          v2679 = v2675 * v2669.height;
          f295(p1658, v2669, v409 - v2678 / 2, 260 - v2679 / 2, v2678, v2679);
          v2678 = (v2669 = ΔⵠᐃΔ.ⵠⲆΔᐃΔ[this.ᐃⲆⵠΔᐃᐃΔ].Δⵠⵠ).width * v2675;
          v2679 = v2669.height * v2675;
          f295(p1658, v2669, v409 - v2678 / 2, 260 - v2679 / 2, v2678, v2679);
        } else if (this.ⵠⵠᐃΔⵠⲆᐃ === 2) {
          v2678 = (v2669 = ΔⵠᐃΔ.ⲆⲆΔΔ[this.ᐃⲆⵠΔᐃᐃΔ].Δⵠⵠ).width * v2675;
          v2679 = v2669.height * v2675;
          f295(p1658, v2669, v409 - v2678 / 2, 180 - v2679 / 2, v2678, v2679);
          v2678 = v2675 * (v2669 = ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[0].Δⵠⵠ).width;
          v2679 = v2675 * v2669.height;
          f295(p1658, v2669, v409 - v2678 / 2, 260 - v2679 / 2, v2678, v2679);
        } else if (this.ⵠⵠᐃΔⵠⲆᐃ === 3) {
          v2678 = (v2669 = ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ[this.ᐃⲆⵠΔᐃᐃΔ].Δⵠⵠ).width * v2675;
          v2679 = v2675 * v2669.height;
          p1658.save();
          p1658.translate(v409, 260);
          p1658.rotate(Math.PI);
          f295(p1658, v2669, -v2678 / 2, -v2679 / 2, v2678, v2679);
          p1658.restore();
        } else if (this.ⵠⵠᐃΔⵠⲆᐃ === 4) {
          v2678 = v2675 * (v2669 = ΔⵠᐃΔ.ΔⵠΔⲆⵠ[this.ᐃⲆⵠΔᐃᐃΔ].Δⵠⵠ).width;
          v2679 = v2669.height * v2675;
          f295(p1658, v2669, v409 - v2678 / 2, 260 - v2679 / 2, v2678, v2679);
        }
        v2669 = this.ⵠⲆⲆⲆΔΔⲆ;
        f295(p1658, v2669, v409 - v2669.width / 4, 340, v2669.width / 2, v2669.height / 2);
        v2669 = this.ΔⲆΔΔⲆⲆΔ;
        f295(p1658, v2669, v409 - v2669.width / 4, 365, v2669.width / 2, v2669.height / 2);
        if (this.ⵠⲆᐃⲆΔⵠⲆ > 6) {
          this.ⵠᐃΔΔᐃ = 0;
          f504(v2685);
        }
        p1658.globalAlpha = 1;
      }
      user.alert.ⲆΔᐃΔ("#FFF", "#000");
      if (vThis3.waiting) {
        this.ⵠⵠᐃΔΔᐃⵠ.ⲆΔᐃΔ();
      }
    };
    var v2680 = 0;
    var v2681 = Math.pow(2, v2680++);
    var v2682 = Math.pow(2, v2680++);
    this.ΔⵠᐃⵠΔ = v2682;
    var v2683 = Math.pow(2, v2680++);
    var v2684 = Math.pow(2, v2680++);
    var v2685 = Math.pow(2, v2680++);
    var v2686 = Math.pow(2, v2680++);
    var v2687 = Math.pow(2, v2680++);
    var v2688 = Math.pow(2, v2680++);
    this.ⵠΔᐃⵠᐃ = v2688;
    var v2689 = Math.pow(2, v2680++);
    var v2690 = Math.pow(2, v2680++);
    var v2691 = Math.pow(2, v2680++);
    var v2692 = Math.pow(2, v2680++);
    var v2693 = Math.pow(2, v2680++);
    var v2694 = Math.pow(2, v2680++);
    var v2695 = Math.pow(2, v2680++);
    var v2696 = Math.pow(2, v2680++);
    var v2697 = Math.pow(2, v2680++);
    var v2698 = Math.pow(2, v2680++);
    var v2699 = Math.pow(2, v2680++);
    var v2700 = Math.pow(2, v2680++);
    var v2701 = Math.pow(2, v2680++);
    var v2702 = Math.pow(2, v2680++);
    var v2703 = Math.pow(2, v2680++);
    var v2704 = Math.pow(2, v2680++);
    var v2705 = Math.pow(2, v2680++);
    this.ⲆⲆⲆⲆᐃ = v2705;
    var v2706 = Math.pow(2, v2680++);
    this.ΔⲆᐃᐃⵠΔⲆ = v2706;
    var v2707 = Math.pow(2, v2680++);
    this.ⵠᐃⲆⲆⵠ = v2707;
    var v2708 = Math.pow(2, v2680++);
    function f502(p1668, p1669, p1670) {
      for (var v2709 = 0; vThis3.ⲆᐃⲆⲆ.length > v2709; v2709++) {
        if ((vThis3.ⲆᐃⲆⲆ[v2709].view & p1668) !== 0) {
          vThis3.ⲆᐃⲆⲆ[v2709].active = p1669;
        }
      }
      for (v2709 = 0; v2709 < vThis3.buttons.length; v2709++) {
        if ((vThis3.buttons[v2709].view & p1668) !== 0) {
          vThis3.buttons[v2709].info.active = p1669;
        }
      }
      for (v2709 = 0; v2709 < vThis3.ᐃⲆⲆⲆⲆΔΔ.length; v2709++) {
        if (vThis3.ᐃⲆⲆⲆⲆΔΔ[v2709].view & p1668) {
          vThis3.ᐃⲆⲆⲆⲆΔΔ[v2709].style.display = p1670;
        }
      }
    }
    this.ⵠΔⵠⲆⲆ = v2681;
    function f503() {
      var vNumber10 = Number(ⲆᐃΔⵠ.get("starve_crate"));
      var vNumber11 = Number(ⲆᐃΔⵠ.get("starve_dead"));
      var vNumber12 = Number(ⲆᐃΔⵠ.get("starve_book"));
      var vNumber13 = Number(ⲆᐃΔⵠ.get("starve_bag"));
      var vNumber14 = Number(ⲆᐃΔⵠ.get("starve_skin"));
      var vNumber15 = Number(ⲆᐃΔⵠ.get("starve_accessory"));
      if (!(v2833.unlock.ⲆΔⲆⲆ[v2833.ⲆΔⲆⲆ] > 0)) {
        v2833.ⲆΔⲆⲆ = v2833.unlock.ⲆΔⲆⲆ[vNumber14] > 0 ? vNumber14 : 0;
      }
      if (!(v2833.unlock.ⵠΔᐃΔᐃ[v2833.ⵠΔᐃΔᐃ] > 0)) {
        v2833.ⵠΔᐃΔᐃ = v2833.unlock.ⵠΔᐃΔᐃ[vNumber12] > 0 ? vNumber12 : 0;
      }
      if (!(v2833.unlock.ΔⵠΔⲆᐃ[v2833.ΔⵠΔⲆᐃ] > 0)) {
        v2833.ΔⵠΔⲆᐃ = v2833.unlock.ΔⵠΔⲆᐃ[vNumber11] > 0 ? vNumber11 : 0;
      }
      if (!(v2833.unlock.ΔⲆⵠΔΔ[v2833.ΔⲆⵠΔΔ] > 0)) {
        v2833.ΔⲆⵠΔΔ = v2833.unlock.ΔⲆⵠΔΔ[vNumber10] > 0 ? vNumber10 : 0;
      }
      if (!(v2833.unlock.ⵠᐃΔᐃΔ[v2833.ⵠᐃΔᐃΔ] > 0)) {
        v2833.ⵠᐃΔᐃΔ = v2833.unlock.ⵠᐃΔᐃΔ[vNumber15] > 0 ? vNumber15 : 0;
      }
      if (!(v2833.unlock.Δⵠᐃⵠᐃ[v2833.Δⵠᐃⵠᐃ] > 0)) {
        v2833.Δⵠᐃⵠᐃ = v2833.unlock.Δⵠᐃⵠᐃ[vNumber13] > 0 ? vNumber13 : 0;
      }
    }
    function f504(p1671) {
      if (vThis3.ᐃⵠΔⲆⲆⵠⵠ !== false) {
        f502(v2689, v2759, "none");
        f502(v2690, v2759, "none");
        f503();
        if (p1671 !== vThis3.ⵠΔⵠⲆⲆ && !(vThis3.ⵠᐃΔΔᐃ >= 1)) {
          vThis3.ⵠΔᐃΔⲆⵠⲆ.style.display = p1671 === v2681 || v2685 === p1671 || p1671 === v2682 || p1671 === v2687 || p1671 === v2684 || v2686 === p1671 ? "inline-block" : "none";
          f502(vThis3.ⵠΔⵠⲆⲆ, v2759, "none");
          vThis3.ⵠΔⵠⲆⲆ = p1671;
          f502(vThis3.ⵠΔⵠⲆⲆ, v2760, "inline-block");
        }
      }
    }
    function f505(p1672) {
      if (user.ΔⲆᐃⵠΔⵠⲆ !== undefined && user.ᐃΔᐃᐃΔⵠΔ !== vUndefined && user.ᐃⵠᐃΔⲆⲆⲆ !== undefined && user.ΔⲆⵠⲆⲆΔⵠ !== undefined) {
        p1672();
      }
    }
    function f506() {
      f503();
      if (v3081 % 2 || vVVVVVVUndefined142 === vWindow.Widget) {
        console.log(vVVVVVUndefined14);
        v2837.connect();
      } else {
        console.log(undefined);
        if (vWindow.Widget.isBlocked === 1) {
          vWindow.Widget.createAdPlayer(v2837.connect.bind(v2837), v2837.connect.bind(v2837));
        } else {
          vWindow.Widget.preroll();
          vWindow.Widget.play = v2837.connect.bind(v2837);
        }
      }
    }
    function f507(p1673, p1674, p1675) {
      const v2710 = new XMLHttpRequest();
      v2710.open("GET", p1673);
      v2710.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      v2710.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (p1674 !== undefined) {
            p1674(v2710.responseText);
          }
        } else if (this.readyState == 4 && p1675 !== undefined) {
          p1675();
        }
      };
      v2710.send();
    }
    this.ⲆᐃⲆⵠᐃⵠΔ = 0;
    this.ΔᐃⲆᐃ = f504;
    this.ⲆⵠⲆⵠⵠΔⵠ = function (p1676, p1677) {
      let v2711 = "0";
      let v2712 = 0;
      if (vUndefined6) {
        v2711 = vUndefined6 + vF36.ⲆⵠⵠⲆⲆΔᐃ();
      }
      if (user.ΔⲆᐃⵠΔⵠⲆ) {
        f505(p1676);
      } else {
        f507(`${v3085}token?id=${v2711}`, function (p1678) {
          if (v2712 === 1) {
            return;
          }
          const v2713 = p1678.split("_");
          const v2714 = v2713[0] + "_";
          const vNumber16 = Number(v2713[1]);
          const v2715 = Math.abs(f30(vNumber16));
          user.ΔⲆᐃⵠΔⵠⲆ = v2714 + v2715;
          f505(p1676);
        }, function () {
          if (v2712 !== 1) {
            if (p1677 === 1) {
              v2712 = 1;
              p1676();
              return;
            } else {
              vThis3.waiting = vVV1422;
              return;
            }
          }
        });
      }
      f507(`${v3086}let`, function (p1679) {
        if (v2712 === 1) {
          return;
        }
        p1679 = p1679.split(":");
        {
          const v2716 = p1679[0].split("_");
          var v2717 = 101;
          if (v2717 === 1) {
            v2717 = 43;
          }
          const v2718 = v2716[0] + "_";
          if (252 === 121) {
            176;
          }
          var v2719 = 238;
          if (v2719 == 13) {
            v2719 = 202;
          }
          var v2720 = 38;
          if (v2720 === 0) {
            v2720 = 211;
          }
          176 .ΔᐃᐃᐃⵠᐃⵠΔⲆ = 7;
          const v2721 = 112;
          var v2722 = 250;
          if (117 == 6) {
            83;
          }
          const v2723 = 184;
          Math.floor(184[v2723.ᐃᐃᐃΔᐃΔᐃ]);
          var v2724 = 246;
          if (193 === 102) {
            113;
          }
          if (v2724 > 14) {
            v2724 = 223;
          }
          if (v2722 === 0) {
            v2722 = 69;
          }
          if (195 == 204) {
            183;
          }
          if (112 == 198) {
            122;
          }
          const vNumber17 = Number(v2716[1]);
          const v2725 = Math.abs(f477(vNumber17));
          var v2726 = 184;
          if (v2726 > 4) {
            v2726 = 115;
          }
          v551.ΔΔᐃⲆⲆΔⵠΔⵠ = 0;
          var v2727 = 250;
          if (v2727 == 8) {
            v2727 = 28;
          }
          user.ᐃΔᐃᐃΔⵠΔ = v2718 + v2725;
          user.ΔⵠⵠⲆΔΔᐃ = v2725;
          const v2728 = 63;
          if (4 === 12) {
            235;
          }
          Math.floor(63[v2728.ΔⵠⲆⲆⲆⲆⲆ]);
        }
        {
          const v2729 = p1679[1].split("_");
          const v2730 = v2729[0] + "_";
          if (105 <= 11) {
            151;
          }
          const vNumber18 = Number(v2729[1]);
          var v2731 = 189;
          if (v2731 == 12) {
            v2731 = 0;
          }
          if (118 === 70) {
            235;
          }
          const v2732 = Math.abs(f49(vNumber18));
          var v2733 = 56;
          0;
          if (208 === 233) {
            221;
          }
          if (v2733 > 11) {
            v2733 = 206;
          }
          user.ᐃⵠᐃΔⲆⲆⲆ = v2730 + v2732;
          var v2734 = 123;
          if (v2734 > 7) {
            v2734 = 140;
          }
          user.ⲆⲆΔΔⲆΔΔΔᐃ = v2732;
        }
        Math.floor(216[216 .ΔΔΔⲆᐃΔΔ]);
        var v2735 = 239;
        var v2736 = 102;
        if (v2736 > 9) {
          v2736 = 37;
        }
        if (v2735 >= 7) {
          v2735 = 51;
        }
        {
          var v2737 = 203;
          if (v2737 == 13) {
            v2737 = 66;
          }
          if (13 <= 76) {
            98;
          }
          if (206 == 81) {
            176;
          }
          if (219 > 115) {
            88;
          }
          const v2738 = p1679[2].split("_");
          if (81 < 227) {
            181;
          }
          const v2739 = v2738[0] + "_";
          const vNumber19 = Number(v2738[1]);
          const v2740 = Math.abs(f49(vNumber19));
          if (225 < 49) {
            193;
          }
          var v2741 = 56;
          if (v2741 == 1) {
            v2741 = 2;
          }
          ({}).ΔᐃⵠⵠⵠⵠⲆⵠⲆ = 13;
          var v2742 = 77;
          if (v2742 == 2) {
            v2742 = 232;
          }
          const v2743 = 133;
          Math.floor(133[v2743.ᐃⵠⵠΔᐃᐃⵠ]);
          const v2744 = 174;
          9 .ΔΔⵠⲆᐃᐃⵠΔⵠ = 9;
          if (214 === 174) {
            52;
          }
          if (120 > 127) {
            195;
          }
          user.ΔⲆⵠⲆⲆΔⵠ = v2739 + v2740;
          if (154 == 177) {
            74;
          }
          const v2745 = 92;
          Math.floor(92[v2745.ᐃⲆⵠΔⵠⵠⵠ]);
          0;
          if (226 === 171) {
            234;
          }
          var v2746 = 221;
          if (v2746 == 13) {
            v2746 = 40;
          }
          var v2747 = 47;
          if (v2747 == 6) {
            v2747 = 155;
          }
          if (213 < 207) {
            180;
          }
          if (124 >= 27) {
            85;
          }
          if (61 == 213) {
            80;
          }
          var v2748 = 131;
          var v2749 = 217;
          if (v2749 == 9) {
            v2749 = 243;
          }
          if (38 === 129) {
            15;
          }
          if (v2748 == 0) {
            v2748 = 211;
          }
          user.ΔⵠⵠⲆΔⵠΔⵠⵠ = v2740;
        }
        f505(p1676);
        var v2750 = 55;
        if (v2750 == 6) {
          v2750 = 243;
        }
      }, function () {
        if (v2712 !== 1) {
          if (p1677 === 1) {
            v2712 = 1;
            p1676();
            return;
          } else {
            vThis3.waiting = false;
            return;
          }
        }
      });
    };
    this.ⵠΔⲆⲆⲆⵠⵠ = function () {
      if (vThis3.waiting === vVVV143) {
        user.reconnect.enabled = vVV1423;
        vThis3.waiting = vVV62;
        vThis3.ⲆⵠⲆⵠⵠΔⵠ(f506);
      }
    };
    var v2751 = 1;
    var v2752 = 2;
    var v2753 = 4;
    var v2754 = 8;
    var v2755 = 16;
    var v2756 = 32;
    var v2757 = 1;
    var v2758 = 1;
    var v2759 = 0;
    var v2760 = 1;
    if (vWindow.innerWidth < 1300) {
      this.ᐃⲆᐃⵠⲆ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: v2760,
        position: v2753 | v2751,
        view: v2681,
        translate: {
          ⲆⲆⲆΔⲆ: 200,
          x: 0,
          y: 0,
          ΔΔΔΔᐃ: 184
        }
      };
    } else {
      this.ᐃⲆᐃⵠⲆ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: v2760,
        position: v2753 | v2755,
        view: v2681,
        translate: {
          ΔΔΔΔᐃ: 184,
          ⲆⲆⲆΔⲆ: -180,
          y: 0,
          x: 0
        }
      };
    }
    this.ᐃⲆᐃⵠⲆ.id.addEventListener("keyup", function (p1680) {
      p1680.preventDefault();
      if (p1680.keyCode == 13 && !vThis3.waiting && !vThis3.ᐃⵠⲆᐃᐃΔᐃᐃᐃ) {
        vThis3.ⵠΔⲆⲆⲆⵠⵠ();
      }
    });
    this.ᐃⲆᐃⵠⲆ.input.value = ⲆᐃΔⵠ.get("starve_nickname") ? ⲆᐃΔⵠ.get("starve_nickname") : "";
    this.ⵠⵠⲆⵠΔΔⵠΔⲆ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: v2759,
      position: v2753 | v2755,
      view: v2682,
      translate: {
        x: 0,
        ΔΔΔΔᐃ: 110,
        y: 0,
        ⲆⲆⲆΔⲆ: -122
      }
    };
    if (vWindow.innerWidth < 1300) {
      this.ⵠΔⲆⵠⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: v2760,
        position: v2753 | v2751,
        view: v2681,
        translate: {
          x: 0,
          ΔΔΔΔᐃ: 225,
          y: 0,
          ⲆⲆⲆΔⲆ: 208
        }
      };
    } else {
      this.ⵠΔⲆⵠⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: v2760,
        position: v2753 | v2755,
        view: v2681,
        translate: {
          y: 0,
          ΔΔΔΔᐃ: 225,
          x: 0,
          ⲆⲆⲆΔⲆ: -180
        }
      };
    }
    this.ΔΔΔᐃ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: v2759,
      position: v2753 | v2755,
      view: v2687,
      translate: {
        ΔΔΔΔᐃ: 190,
        x: 0,
        y: 0,
        ⲆⲆⲆΔⲆ: -294.5
      }
    };
    this.ⲆΔΔⵠᐃᐃᐃⲆΔ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: v2759,
      position: v2753 | v2755,
      view: v2682,
      translate: {
        x: 0,
        y: 0,
        ΔΔΔΔᐃ: 187,
        ⲆⲆⲆΔⲆ: 125
      }
    };
    this.ⵠᐃⵠⵠⵠᐃΔⵠᐃ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: v2759,
      position: v2753 | v2755,
      view: v2707,
      translate: {
        ΔΔΔΔᐃ: 350,
        ⲆⲆⲆΔⲆ: -260,
        x: 0,
        y: 0
      }
    };
    v2680 = 0;
    this.ᐃⲆⲆⲆⲆΔΔ = [];
    this.ᐃⲆⲆⲆⲆΔΔ[v2680++] = this.ᐃⲆᐃⵠⲆ;
    this.ᐃⲆⲆⲆⲆΔΔ[v2680++] = this.ⵠΔⲆⵠⲆ;
    this.ᐃⲆⲆⲆⲆΔΔ[v2680++] = this.ΔΔΔᐃ;
    this.ᐃⲆⲆⲆⲆΔΔ[v2680++] = this.ⵠⵠⲆⵠΔΔⵠΔⲆ;
    this.ᐃⲆⲆⲆⲆΔΔ[v2680++] = this.ⲆΔΔⵠᐃᐃᐃⲆΔ;
    this.ᐃⲆⲆⲆⲆΔΔ[v2680++] = this.ⵠᐃⵠⵠⵠᐃΔⵠᐃ;
    v2680 = 0;
    this.ⲆᐃⲆⲆ = [];
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⵠᐃⵠᐃⲆⲆᐃ, v2760, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⲆⲆᐃΔΔⵠΔ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⲆΔⵠⵠⲆⲆⵠ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⲆᐃⵠΔⲆΔᐃ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⲆᐃΔⵠᐃⵠᐃ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ΔⵠⵠΔΔᐃᐃ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⵠᐃᐃᐃᐃΔᐃ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⲆⵠⵠᐃᐃΔⲆ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ᐃᐃⵠᐃⲆΔⲆ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.Ⲇᐃᐃⵠᐃⵠⵠ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ΔⵠⵠⲆⲆⲆⲆ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⵠΔⵠΔᐃΔⲆ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ΔᐃΔΔΔᐃᐃ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⲆᐃⵠⵠⲆΔⲆ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ᐃΔⵠⲆⲆⲆᐃ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ᐃⲆⵠᐃΔⲆⵠ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⵠⲆΔᐃᐃⲆᐃ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ᐃⲆⵠᐃⲆᐃΔ, v2759, 0, 0, v2751);
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ⵠᐃᐃΔⲆΔⲆ, v2759, 0, 0, v2751);
    if (vWindow.innerWidth < 1300) {
      this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔⲆΔᐃΔᐃⵠ, v2760, 200, 100, v2753 | v2751);
    } else {
      this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔⲆΔᐃΔᐃⵠ, v2760, -753 / 4, 100, v2753 | v2755);
    }
    this.ⲆᐃⲆⲆ[v2680++].view = v2681;
    this.ⲆᐃⲆⲆ[v2680++] = f434(ⵠᐃ.ᐃΔⲆΔⵠⵠⵠ, v2760, 403, -10, v2752);
    if (vWindow.innerWidth > 1300) {
      this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⲆⲆΔΔᐃᐃᐃ, v2760, -885 / 4, -159.5, v2754 | v2755);
      this.ⲆᐃⲆⲆ[v2680++].view = v2681;
    }
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ᐃⲆᐃⲆΔᐃⲆ, v2759, -1293 / 4, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2682;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⵠⵠⲆⲆⵠᐃⵠ, v2759, -356.25, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2684;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔᐃᐃᐃᐃⵠⲆ, v2759, -905 / 4, 50, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2683;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⵠᐃΔⲆΔⵠᐃ, v2759, -402, 130, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2685;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⵠΔⲆΔΔⲆᐃ, v2759, -279.25, 130, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2705;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⵠᐃⲆⵠⵠᐃᐃ, v2759, -1222 / 4, 130, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2706;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔΔⵠⵠᐃⵠⲆ, v2759, -305.5, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2707;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔᐃⲆⵠΔᐃⵠ, v2759, -ⵠᐃ.ΔᐃⲆⵠΔᐃⵠ.width / 4 - 350, -15, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2708;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ᐃⵠᐃΔΔⲆⵠ, v2759, -374.25, 110, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2686;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔⲆⲆᐃΔⲆⲆ, v2759, -306.5, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2687;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⵠΔΔᐃᐃⵠⲆ, v2759, -345.25, 80, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2688;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔⵠⲆⵠⲆᐃᐃ, v2759, -385.5, 150, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2691;
    var v2761 = 3.6;
    var v2762 = this.ⵠⲆᐃⲆΔᐃⲆ([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", v2761 * 57]]);
    this.ⲆᐃⲆⲆ[v2680] = f434(v2762, v2759, -v2762.width / 4, 178, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2691;
    this.ⵠⵠⵠⵠⵠΔⵠⵠΔ = function (p1681, p1682, p1683) {
      var v2763;
      vThis3.ⵠᐃΔΔᐃ = 1;
      vThis3.ΔᐃⵠΔⵠΔⲆ = 0;
      vThis3.ⵠⲆᐃⲆΔⵠⲆ = 0;
      vThis3.ⲆᐃⲆᐃᐃⲆΔ = p1681;
      vThis3.ⵠⵠᐃΔⵠⲆᐃ = p1682;
      var v2764 = 0;
      if (p1682 === 0) {
        for (v2764 = 0; v2764 < ΔⵠᐃΔ.ⵠⵠᐃᐃΔ.length && p1683 !== ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[v2764].id; v2764++);
        v2763 = ΔⵠᐃΔ.ⵠⵠᐃᐃΔ[v2764];
        vThis3.unlock.ⲆΔⲆⲆ[v2764] = 1;
      } else if (p1682 === 1) {
        for (v2764 = 0; v2764 < ΔⵠᐃΔ.ⵠⲆΔᐃΔ.length && p1683 !== ΔⵠᐃΔ.ⵠⲆΔᐃΔ[v2764].id; v2764++);
        v2763 = ΔⵠᐃΔ.ⵠⲆΔᐃΔ[v2764];
        vThis3.unlock.ⵠᐃΔᐃΔ[v2764] = 1;
      } else if (p1682 === 2) {
        for (v2764 = 0; ΔⵠᐃΔ.ⲆⲆΔΔ.length > v2764 && p1683 !== ΔⵠᐃΔ.ⲆⲆΔΔ[v2764].id; v2764++);
        v2763 = ΔⵠᐃΔ.ⲆⲆΔΔ[v2764];
        vThis3.unlock.Δⵠᐃⵠᐃ[v2764] = 1;
      } else if (p1682 === 3) {
        for (v2764 = 0; v2764 < ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ.length && ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ[v2764].id !== p1683; v2764++);
        v2763 = ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ[v2764];
        vThis3.unlock.ⵠΔᐃΔᐃ[v2764] = 1;
      } else if (p1682 === 4) {
        for (v2764 = 0; ΔⵠᐃΔ.ΔⵠΔⲆⵠ.length > v2764 && ΔⵠᐃΔ.ΔⵠΔⲆⵠ[v2764].id !== p1683; v2764++);
        v2763 = ΔⵠᐃΔ.ΔⵠΔⲆⵠ[v2764];
        vThis3.unlock.ΔⲆⵠΔΔ[v2764] = 1;
        vThis3.unlock.ΔⵠΔⲆᐃ[v2764] = 1;
      }
      vThis3.ᐃⲆⵠΔᐃᐃΔ = v2764;
      vThis3.ΔⲆΔΔⲆⲆΔ = f430("by " + v2763.ᐃⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, vVVVVVVUndefined142, 30, 24, undefined, undefined, vVVUndefined14, undefined, "#000000", 24);
      vThis3.ⵠⲆⲆⲆΔΔⲆ = f430(v2763.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, vVVVVVVUndefined14, 30, 24, undefined, undefined, undefined, undefined, "#000000", 20);
    };
    this.ⵠᐃΔΔᐃ = 0;
    this.ΔᐃⵠΔⵠΔⲆ = 0;
    this.ⲆᐃⲆᐃᐃⲆΔ = 0;
    this.ⵠⵠᐃΔⵠⲆᐃ = 0;
    this.ⵠⲆᐃⲆΔⵠⲆ = 0;
    this.ΔⲆΔΔⲆⲆΔ = undefined;
    this.ⵠⲆⲆⲆΔΔⲆ = undefined;
    var v2765 = 197;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⲆᐃᐃⵠⲆⵠᐃ, v2759, -385.5, 150, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2695;
    v2762 = this.ⵠⲆᐃⲆΔᐃⲆ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", v2761 * 57]]);
    this.ⲆᐃⲆⲆ[v2680] = f434(v2762, v2759, -v2762.width / 4, 178, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2695;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ᐃᐃⲆᐃΔΔⵠ, v2759, -1542 / 4, 150, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2693;
    v2762 = this.ⵠⲆᐃⲆΔᐃⲆ([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", v2761 * 57]]);
    this.ⲆᐃⲆⲆ[v2680] = f434(v2762, v2759, -v2762.width / 4, 178, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2693;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ᐃᐃᐃⲆΔⵠⲆ, v2759, -1542 / 4, 150, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2694;
    v2762 = this.ⵠⲆᐃⲆΔᐃⲆ([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", v2761 * 57]]);
    this.ⲆᐃⲆⲆ[v2680] = f434(v2762, v2759, -v2762.width / 4, 178, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2694;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⲆⵠᐃᐃΔⵠᐃ, v2759, -385.5, 150, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2692;
    v2762 = this.ⵠⲆᐃⲆΔᐃⲆ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", v2761 * 57]]);
    this.ⲆᐃⲆⲆ[v2680] = f434(v2762, v2759, -v2762.width / 4, 178, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2692;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ᐃΔΔⵠⲆᐃΔ, v2759, -385.5, 150, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2696;
    v2762 = this.ⵠⲆᐃⲆΔᐃⲆ([["#d33a2a", v2761 * 3], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", v2761 * 57]]);
    this.ⲆᐃⲆⲆ[v2680] = f434(v2762, v2759, -v2762.width / 4, 178, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2696;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔΔΔⲆΔΔⲆ, v2759, -341.5, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2697;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔᐃᐃΔⵠⵠⲆ, v2759, -341.5, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2701;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⵠᐃⵠⲆΔΔᐃ, v2759, -341.5, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2699;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔΔⵠᐃⲆᐃⲆ, v2759, -341.5, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2700;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔⲆⵠⵠⵠⲆⵠ, v2759, -341.5, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2698;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⵠᐃⵠᐃᐃᐃΔ, v2759, -341.5, 100, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2702;
    ⲆᐃΔΔⲆⲆΔ = v2680++;
    this.ⲆᐃⲆⲆ[ⲆᐃΔΔⲆⲆΔ] = f434(ⵠᐃ.ⲆᐃΔΔⲆⲆΔ, v2759, 484, 0, v2753);
    ᐃⲆⵠᐃⲆΔΔ = v2680++;
    this.ⲆᐃⲆⲆ[ᐃⲆⵠᐃⲆΔΔ] = f434(ⵠᐃ.ᐃⲆⵠᐃⲆΔΔ, v2759, 454 + 597 / 2 + 60, 0, v2753);
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⵠᐃᐃⲆⲆⲆⵠ, v2759, -189.5, -5, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2690;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ΔⲆⲆⲆᐃⲆᐃ, v2759, -758 / 4, -5, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2689;
    ⵠᐃᐃΔᐃⲆⵠ = v2680++;
    this.ⲆᐃⲆⲆ[ⵠᐃᐃΔᐃⲆⵠ] = f434(ⵠᐃ.ΔⲆᐃⲆⲆⲆΔ, v2760, 93, 30, v2753);
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.Δᐃⵠⵠⵠⵠᐃ, v2759, -173, 110, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2703;
    this.ⲆᐃⲆⲆ[v2680] = f434(ⵠᐃ.ⲆᐃΔᐃⵠᐃΔ, v2759, -173, 110, v2753 | v2755);
    this.ⲆᐃⲆⲆ[v2680++].view = v2704;
    v2680 = 0;
    this.buttons = [];
    this.buttons[v2680] = f431(50, 57, 0, [ⵠᐃ.ᐃᐃᐃⵠᐃⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠⲆⲆΔ, ⵠᐃ.ΔΔᐃⵠΔΔᐃ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f504(v2688);
      } else {
        f504(v2683);
      }
    }, 320, 0, v2751, v2760);
    v2680++;
    if (vWindow.innerWidth < 1300) {
      this.buttons[v2680] = f431(202, 97, 0, [ⵠᐃ.ᐃⲆᐃᐃⲆΔᐃ, ⵠᐃ.ΔᐃΔⲆⵠⲆᐃ, ⵠᐃ.ⲆⵠⵠⲆⵠΔⲆ], v2757, 0, this.ⵠΔⲆⲆⲆⵠⵠ, 462, 235, v2753 | v2751, v2760);
    } else {
      this.buttons[v2680] = f431(202, 97, 0, [ⵠᐃ.ᐃⲆᐃᐃⲆΔᐃ, ⵠᐃ.ΔᐃΔⲆⵠⲆᐃ, ⵠᐃ.ⲆⵠⵠⲆⵠΔⲆ], v2757, 0, this.ⵠΔⲆⲆⲆⵠⵠ, 74, 235, v2753 | v2755, v2760);
    }
    this.buttons[v2680].view = v2681;
    v2680++;
    if (vWindow.innerWidth > 1300) {
      this.buttons[v2680] = f431(355, 168, 0, [ⵠᐃ.ⵠᐃᐃⵠΔⵠⵠ, ⵠᐃ.ⵠᐃᐃⵠΔⵠⵠ, ⵠᐃ.ⵠᐃᐃⵠΔⵠⵠ], v2757, 0, function () {
        vWindow.open("./changelog.html", "_blank");
      }, -195, -115, v2754 | v2755, v2760);
      this.buttons[v2680++].view = v2681;
      this.buttons[v2680] = f431(355, 168, 0, [ⵠᐃ.ᐃⵠⵠⵠⵠⲆⲆ, ⵠᐃ.ᐃⵠⵠⵠⵠⲆⲆ, ⵠᐃ.ᐃⵠⵠⵠⵠⲆⲆ], v2757, 0, function () {
        vWindow.open("https://taming.io", "_blank");
      }, 20, -115, v2754 | v2755, v2760);
      this.buttons[v2680++].view = v2681;
    }
    this.buttons[v2680++] = f431(80, 80, 0, [ⵠᐃ.ᐃⵠⲆⲆⵠΔᐃ, ⵠᐃ.ⲆᐃⵠⲆΔⵠⲆ, ⵠᐃ.ΔΔᐃⲆⲆⲆⵠ], v2757, 0, function () {
      vWindow.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, v2752, v2760);
    this.buttons[v2680++] = f431(80, 80, 0, [ⵠᐃ.ⵠⲆⲆⲆΔᐃⵠ, ⵠᐃ.ᐃⵠᐃΔᐃⲆᐃ, ⵠᐃ.ᐃⲆⵠⲆⵠⲆⲆ], v2757, 0, function () {
      vWindow.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, v2752, v2760);
    this.buttons[v2680++] = f431(80, 80, 0, [ⵠᐃ.ΔⲆᐃⲆⵠⲆⵠ, ⵠᐃ.ᐃᐃΔᐃᐃⲆᐃ, ⵠᐃ.ΔⵠⵠⲆΔᐃⲆ], v2757, 0, function () {
      vWindow.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, v2752, v2760);
    this.buttons[v2680++] = f431(80, 80, 0, [ⵠᐃ.ⵠᐃΔⲆᐃⵠⲆ, ⵠᐃ.ΔⵠᐃⵠⵠᐃΔ, ⵠᐃ.ⵠⵠᐃⵠᐃⵠΔ], v2757, 0, function () {
      vWindow.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, v2752, v2760);
    this.buttons[v2680++] = f431(80, 80, 0, [ⵠᐃ.ᐃⵠⲆΔⵠⵠⵠ, ⵠᐃ.ᐃΔΔⲆⲆΔⲆ, ⵠᐃ.ᐃⵠⵠΔΔⲆⵠ], v2757, 0, function () {
      vWindow.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, v2752, v2760);
    this.buttons[v2680++] = f431(80, 80, 0, [ⵠᐃ.ΔⲆⲆΔⵠⵠⲆ, ⵠᐃ.ΔΔⵠᐃᐃᐃᐃ, ⵠᐃ.ΔⵠⲆΔᐃⵠΔ], v2757, 0, function () {
      vWindow.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, v2752, v2760);
    this.buttons[v2680++] = f431(80, 80, 0, [ⵠᐃ.ⵠⲆΔⵠⵠⲆᐃ, ⵠᐃ.ᐃΔΔⲆᐃΔⲆ, ⵠᐃ.ᐃⵠⵠᐃᐃᐃᐃ], v2757, 0, function () {
      vWindow.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, v2752, v2760);
    ΔΔᐃᐃⲆⵠᐃ = v2680++;
    this.buttons[ΔΔᐃᐃⲆⵠᐃ] = f431(232, 142, 0, [ⵠᐃ.ᐃⲆᐃᐃᐃⵠⲆ, ⵠᐃ.ᐃΔⲆⵠᐃⵠΔ, ⵠᐃ.ⲆᐃⲆⵠⵠⵠᐃ], v2757, 0, function () {
      f504(v2687);
      f547(v2833.ΔᐃΔⵠΔΔⵠ, v2833.ᐃⵠⲆⵠᐃⵠⵠ, v2833.ⵠⲆᐃΔΔᐃΔ, v2833.ⵠⲆΔⵠⲆΔΔ);
    }, -5, 573, v2751, v2760);
    this.buttons[v2680++] = f431(236, 165, 0, [ⵠᐃ.ⵠⵠⵠⵠᐃⲆΔ, ⵠᐃ.ⵠⵠⵠⵠᐃⲆΔ, ⵠᐃ.ⵠⵠⵠⵠᐃⲆΔ], v2757, v2758, function () {
      f504(v2687);
    }, -5, 566, v2751, v2760);
    ΔᐃᐃⲆᐃΔᐃ = v2680++;
    this.buttons[ΔᐃᐃⲆᐃΔᐃ] = f431(236, 165, 0, [ⵠᐃ.ᐃⲆᐃⲆΔⲆⲆ, ⵠᐃ.ⲆΔᐃΔⵠⲆⵠ, ⵠᐃ.ΔⵠⲆⵠⵠᐃⲆ], v2757, 0, function () {
      f504(v2686);
    }, -5, 494, v2751, v2760);
    this.buttons[v2680++] = f431(236, 165, 0, [ⵠᐃ.ᐃᐃⵠⵠᐃⵠⵠ, ⵠᐃ.ᐃᐃⵠⵠᐃⵠⵠ, ⵠᐃ.ᐃᐃⵠⵠᐃⵠⵠ], v2757, v2758, function () {
      f504(v2686);
    }, -5, 494, v2751, v2760);
    ⲆⲆΔⵠⲆⲆΔ = v2680++;
    this.buttons[ⲆⲆΔⵠⲆⲆΔ] = f431(236, 165, 0, [ⵠᐃ.ᐃⲆᐃⲆΔⲆⲆ, ⵠᐃ.ⲆΔᐃΔⵠⲆⵠ, ⵠᐃ.ΔⵠⲆⵠⵠᐃⲆ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        if (v2833.ⵠᐃᐃᐃⵠΔᐃ - Date.now() > 0) {
          f504(v2707);
        } else {
          f504(v2705);
        }
      } else {
        f504(v2683);
      }
    }, -5, 415, v2751, v2760);
    this.buttons[v2680++] = f431(236, 165, 0, [ⵠᐃ.ⵠᐃᐃᐃⲆΔᐃ, ⵠᐃ.ⵠᐃᐃᐃⲆΔᐃ, ⵠᐃ.ⵠᐃᐃᐃⲆΔᐃ], v2757, v2758, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        if (v2833.ⵠᐃᐃᐃⵠΔᐃ - Date.now() > 0) {
          f504(v2707);
        } else {
          f504(v2705);
        }
      } else {
        f504(v2683);
      }
    }, -5, 415, v2751, v2760);
    ΔⲆΔᐃΔⵠⵠ = v2680++;
    this.buttons[ΔⲆΔᐃΔⵠⵠ] = f431(236, 165, 0, [ⵠᐃ.ᐃⲆᐃⲆΔⲆⲆ, ⵠᐃ.ⲆΔᐃΔⵠⲆⵠ, ⵠᐃ.ΔⵠⲆⵠⵠᐃⲆ], v2757, 0, function () {
      f504(v2685);
    }, -5, 336, v2751, v2760);
    this.buttons[v2680++] = f431(236, 165, 0, [ⵠᐃ.ΔΔⲆΔⵠⵠⵠ, ⵠᐃ.ΔΔⲆΔⵠⵠⵠ, ⵠᐃ.ΔΔⲆΔⵠⵠⵠ], v2757, v2758, function () {
      f504(v2685);
    }, -5, 336, v2751, v2760);
    ΔⵠⲆᐃⵠΔⵠ = v2680++;
    this.buttons[ΔⵠⲆᐃⵠΔⵠ] = f431(236, 165, 0, [ⵠᐃ.ᐃⲆᐃⲆΔⲆⲆ, ⵠᐃ.ⲆΔᐃΔⵠⲆⵠ, ⵠᐃ.ΔⵠⲆⵠⵠᐃⲆ], v2757, 0, function () {
      f504(v2684);
    }, -5, 257, v2751, v2760);
    this.buttons[v2680++] = f431(236, 165, 0, [ⵠᐃ.ᐃᐃᐃⲆⵠᐃⵠ, ⵠᐃ.ᐃᐃᐃⲆⵠᐃⵠ, ⵠᐃ.ᐃᐃᐃⲆⵠᐃⵠ], v2757, v2758, function () {
      f504(v2684);
    }, -5, 257, v2751, v2760);
    ⲆⵠⲆⵠᐃᐃᐃ = v2680++;
    this.buttons[ⲆⵠⲆⵠᐃᐃᐃ] = f431(236, 165, 0, [ⵠᐃ.ᐃⲆᐃⲆΔⲆⲆ, ⵠᐃ.ⲆΔᐃΔⵠⲆⵠ, ⵠᐃ.ΔⵠⲆⵠⵠᐃⲆ], v2757, 0, function () {
      f504(v2681);
    }, -5, 178, v2751, v2760);
    this.buttons[v2680++] = f431(236, 165, 0, [ⵠᐃ.ⲆⵠⵠⲆⲆⲆⵠ, ⵠᐃ.ⲆⵠⵠⲆⲆⲆⵠ, ⵠᐃ.ⲆⵠⵠⲆⲆⲆⵠ], v2757, v2758, function () {
      f504(v2681);
    }, -5, 178, v2751, v2760);
    ⵠⲆⲆⲆⵠΔⵠ = v2680++;
    this.ⵠⲆⲆⲆⵠΔⵠ = ⵠⲆⲆⲆⵠΔⵠ;
    this.buttons[ⵠⲆⲆⲆⵠΔⵠ] = f431(324, 222, 0, [ⵠᐃ.ΔⵠⲆⵠⲆⵠⲆ, ⵠᐃ.ⲆⲆᐃⵠⵠᐃΔ, ⵠᐃ.ᐃᐃᐃᐃΔᐃΔ], v2757, 0, function () {
      f504(v2683);
    }, 0, 70, v2751, v2760);
    ΔᐃΔⵠⲆⵠᐃ = v2680++;
    ΔⲆⵠᐃⲆⲆᐃ = v2680++;
    this.ΔᐃΔⵠⲆⵠᐃ = ΔᐃΔⵠⲆⵠᐃ;
    this.ΔⲆⵠᐃⲆⲆᐃ = ΔⲆⵠᐃⲆⲆᐃ;
    this.buttons[ΔᐃΔⵠⲆⵠᐃ] = f431(324, 222, 0, [ⵠᐃ.ⵠⲆΔΔΔΔⲆ, ⵠᐃ.ΔⵠᐃⵠⲆⲆᐃ, ⵠᐃ.ᐃⵠⲆΔⲆᐃΔ], v2757, 0, function () {
      f504(v2682);
      f508(-1);
    }, 0, 70, v2751, v2759);
    this.buttons[ΔⲆⵠᐃⲆⲆᐃ] = f431(324, 222, 0, [ⵠᐃ.ⵠⵠⲆᐃⵠⵠⵠ, ⵠᐃ.ⵠⵠⲆᐃⵠⵠⵠ, ⵠᐃ.ⵠⵠⲆᐃⵠⵠⵠ], v2757, v2758, function () {
      f504(v2682);
      f508(-1);
    }, 0, 70, v2751, v2759);
    if (v2837.ΔᐃΔᐃΔᐃᐃ === 0) {
      var v2766 = v2680++;
      if (vWindow.innerWidth < 1300) {
        this.buttons[v2766] = f431(266, 176, 0, [ⵠᐃ.ᐃⵠⲆⵠⲆⲆΔ, ⵠᐃ.ⲆⲆΔΔⲆⵠᐃ, ⵠᐃ.ᐃⲆΔⵠⲆΔⵠ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(0);
        }, 150, 300, v2751 | v2753, v2760);
      } else {
        this.buttons[v2766] = f431(266, 176, 0, [ⵠᐃ.ᐃⵠⲆⵠⲆⲆΔ, ⵠᐃ.ⲆⲆΔΔⲆⵠᐃ, ⵠᐃ.ᐃⲆΔⵠⲆΔⵠ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(0);
        }, -340, 100, v2755 | v2753, v2760);
      }
      this.buttons[v2766].view = v2681;
      this.buttons[v2766].hint = 0;
      var v2767 = v2680++;
      if (vWindow.innerWidth < 1300) {
        this.buttons[v2767] = f431(266, 176, 0, [ⵠᐃ.ᐃΔⵠⵠⲆᐃᐃ, ⵠᐃ.ⲆᐃⵠΔΔΔⲆ, ⵠᐃ.ⵠⲆᐃⲆΔⲆΔ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(4);
        }, 150, 400, v2751 | v2753, v2760);
      } else {
        this.buttons[v2767] = f431(266, 176, 0, [ⵠᐃ.ᐃΔⵠⵠⲆᐃᐃ, ⵠᐃ.ⲆᐃⵠΔΔΔⲆ, ⵠᐃ.ⵠⲆᐃⲆΔⲆΔ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(4);
        }, -340, 200, v2755 | v2753, v2760);
      }
      this.buttons[v2767].view = v2681;
      this.buttons[v2767].hint = 0;
      var v2768 = v2680++;
      if (vWindow.innerWidth < 1300) {
        this.buttons[v2768] = f431(266, 176, 0, [ⵠᐃ.ᐃᐃᐃᐃΔⲆΔ, ⵠᐃ.ΔⲆΔΔΔⲆⲆ, ⵠᐃ.ⵠⲆΔⲆᐃΔΔ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(6);
        }, 450, 300, v2751 | v2753, v2760);
      } else {
        this.buttons[v2768] = f431(266, 176, 0, [ⵠᐃ.ᐃᐃᐃᐃΔⲆΔ, ⵠᐃ.ΔⲆΔΔΔⲆⲆ, ⵠᐃ.ⵠⲆΔⲆᐃΔΔ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(6);
        }, -340, 300, v2755 | v2753, v2760);
      }
      this.buttons[v2768].view = v2681;
      this.buttons[v2768].hint = 0;
      var v2769 = v2680++;
      if (vWindow.innerWidth < 1300) {
        this.buttons[v2769] = f431(266, 176, 0, [ⵠᐃ.ΔⲆᐃᐃΔΔⵠ, ⵠᐃ.ΔⵠⲆΔᐃΔⲆ, ⵠᐃ.ΔⵠⵠⲆᐃⵠⵠ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(2);
        }, 300, 300, v2751 | v2753, v2760);
      } else {
        this.buttons[v2769] = f431(266, 176, 0, [ⵠᐃ.ΔⲆᐃᐃΔΔⵠ, ⵠᐃ.ΔⵠⲆΔᐃΔⲆ, ⵠᐃ.ΔⵠⵠⲆᐃⵠⵠ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(2);
        }, 204, 100, v2755 | v2753, v2760);
      }
      this.buttons[v2769].view = v2681;
      this.buttons[v2769].hint = 0;
      var v2770 = v2680++;
      if (vWindow.innerWidth < 1300) {
        this.buttons[v2770] = f431(266, 176, 0, [ⵠᐃ.ᐃΔⵠᐃⵠΔⵠ, ⵠᐃ.ᐃⵠᐃⵠⵠⵠⵠ, ⵠᐃ.ᐃⲆⲆⵠᐃᐃⵠ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(3);
        }, 300, 400, v2751 | v2753, v2760);
      } else {
        this.buttons[v2770] = f431(266, 176, 0, [ⵠᐃ.ᐃΔⵠᐃⵠΔⵠ, ⵠᐃ.ᐃⵠᐃⵠⵠⵠⵠ, ⵠᐃ.ᐃⲆⲆⵠᐃᐃⵠ], v2757, 0, function () {
          v2837.ⲆⲆⵠᐃᐃᐃⵠ(3);
        }, 204, 200, v2755 | v2753, v2760);
      }
      this.buttons[v2770].view = v2681;
      this.buttons[v2770].hint = 0;
      var v2771 = v2680++;
      this.buttons[v2771] = f431(266, 176, 0, [ⵠᐃ.ⵠᐃΔⵠΔᐃᐃ, ⵠᐃ.ⵠⲆᐃⲆΔΔΔ, ⵠᐃ.ΔΔᐃᐃⵠⵠⵠ], v2757, 0, function () {
        v2837.ⲆⲆⵠᐃᐃᐃⵠ(7);
      }, vWindow.innerWidth < 1300 ? 450 : 204, vWindow.innerWidth < 1300 ? 400 : 300, (vWindow.innerWidth < 1300 ? v2751 : v2755) | v2753, v2760);
      this.buttons[v2771].view = v2681;
      this.buttons[v2771].hint = 0;
    }
    function f508(p1684, p1685) {
      if (p1685 !== vVVVUndefined58) {
        v2833.ᐃᐃΔⲆⲆⲆⵠ = p1685;
        var v2772 = v2833.Ⲇᐃᐃⵠⵠᐃⵠ[p1685];
        v2833.Ⲇⵠⵠᐃᐃ = v2772.score;
        v2833.ᐃᐃⲆΔᐃᐃΔ = v2772.kill;
        v2833.ΔΔΔΔⵠᐃⲆ = v2772.death;
        v2833.time = v2772.time;
        v2833.ⲆᐃⲆⲆᐃΔᐃ = v2772.bestScore;
        v2833.ⲆΔΔⵠᐃⲆⲆ = v2772.bestKill;
        v2833.ᐃᐃⵠⲆⵠⵠⲆ = v2772.bestTime;
        v2833.ⵠΔⲆⵠΔΔᐃ = v2772.scoreTotal;
      }
      if (vVVVVUndefined143 === p1684) {
        p1684 = v2833.ᐃⲆⵠᐃⵠⲆᐃ;
      }
      v2833.ᐃⲆⵠᐃⵠⲆᐃ = p1684;
      if (p1684 >= 0) {
        document.getElementById("stats_box_time").innerHTML = v2833.ᐃᐃⵠⲆⵠⵠⲆ[p1684];
        document.getElementById("stats_box_kill").innerHTML = v2833.ⲆΔΔⵠᐃⲆⲆ[p1684];
        document.getElementById("stats_box_score").innerHTML = v2833.ⲆᐃⲆⲆᐃΔᐃ[p1684];
      } else {
        var v2773 = 0;
        for (var v2774 = 0; v2774 < v2833.ᐃᐃⲆΔᐃᐃΔ.length; v2774++) {
          v2773 += v2833.ᐃᐃⲆΔᐃᐃΔ[v2774];
        }
        var v2775 = 0;
        for (v2774 = 0; v2833.time.length > v2774; v2774++) {
          v2775 += v2833.time[v2774];
        }
        document.getElementById("stats_box_time").innerHTML = v2775;
        document.getElementById("stats_box_kill").innerHTML = v2773;
        document.getElementById("stats_box_score").innerHTML = v2833.Ⲇⵠⵠᐃᐃ;
      }
    }
    this.buttons[v2680] = f431(87, 78, 0, [ⵠᐃ.ⵠΔᐃⵠΔΔⵠ, ⵠᐃ.ⲆΔⲆΔⲆᐃⵠ, ⵠᐃ.ΔᐃⵠⲆⵠⵠⲆ], v2757, 0, function () {
      v2833.ᐃⵠΔΔⵠᐃΔⲆⵠ();
      if (v2833.ⲆⲆⵠⵠⲆⵠΔ === 0) {
        f504(v2704);
      } else {
        f504(v2703);
      }
    }, 127, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    this.buttons[v2680] = f431(87, 78, 0, [ⵠᐃ.ⵠⵠⲆⵠΔΔⲆ, ⵠᐃ.ᐃᐃᐃⲆᐃⵠⵠ, ⵠᐃ.ⲆⵠΔᐃⲆᐃⲆ], v2757, 0, function () {
      const v2776 = vWindow.document.createElement("textarea");
      v2776.value = vUndefined6;
      vWindow.document.body.appendChild(v2776);
      v2776.select();
      vWindow.document.execCommand("copy");
      vWindow.document.body.removeChild(v2776);
    }, 182, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    this.buttons[v2680] = f431(87, 78, 0, [ⵠᐃ.ΔΔᐃΔᐃⵠΔ, ⵠᐃ.ⲆΔΔⵠᐃⵠΔ, ⵠᐃ.ΔΔⲆⵠΔΔΔ], v2757, 0, function () {
      (function () {
        if (v3088 === vVVVVUndefined1423 && vWindow.FB && vWindow.FB.getUserID()) {
          vWindow.FB.logout();
        }
        if (v3087 === vVVVVUndefined1423 && vVVVVVUndefined5822 !== undefined) {
          vWindow.gapi.auth2.getAuthInstance().signOut();
          vVVVVVUndefined5822 = undefined;
        }
        vUndefined6 = vVVVUndefined58;
        vUndefined5 = undefined;
        vVVVVUndefined1423 = vVVVVUndefined1422;
        v2833.ⵠⵠⲆⲆⵠⵠⵠ = 0;
        v2833.ⵠⲆⲆⵠⲆ = 0;
        v2833.Ⲇⵠⵠᐃᐃ = 0;
        v2833.ΔΔᐃⲆⵠⲆΔ();
        ⲆᐃᐃⵠⲆⲆⲆᐃⵠ();
      })();
    }, 255, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    this.buttons[v2680] = f431(58, 64, 0, [ⵠᐃ.ⲆΔⲆⵠΔᐃᐃ, ⵠᐃ.ΔΔΔⵠⵠⵠΔ, ⵠᐃ.ᐃⲆᐃᐃΔᐃⲆ], v2757, 0, function () {
      f504(v2681);
    }, 189, 118, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2683;
    this.buttons[v2680] = f431(497, 72, 0, [ⵠᐃ.ΔᐃΔⵠⲆⲆᐃ, ⵠᐃ.ⲆⲆΔⵠᐃΔᐃ, ⵠᐃ.ⵠⲆΔᐃⵠⵠⵠ], v2757, 0, function () {
      (function () {
        if (v2247) {
          vUndefined5 = Δᐃᐃ.ⵠⲆⵠΔᐃΔⵠ(40);
          vVVVVUndefined1423 = v3089;
          vUndefined6 = v2247.userId;
          vWindow.ΔⲆⲆⲆΔⵠⵠ();
          return;
        }
        vWindow.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2683;
    this.buttons[v2680] = f431(497, 72, 0, [ⵠᐃ.ᐃΔᐃⲆⲆᐃΔ, ⵠᐃ.ΔⲆΔᐃⲆⲆⵠ, ⵠᐃ.ᐃΔΔⲆΔⲆⵠ], v2757, 0, function () {
      vWindow.FB.login(function (p1686) {
        if (p1686.authResponse) {
          vWindow.FB.api("/me", function (p1687) {
            vVVVVUndefined1423 = v3088;
            vUndefined5 = vWindow.FB.getAuthResponse().accessToken;
            f541();
            vWindow.ΔⲆⲆⲆΔⵠⵠ();
          });
        }
      });
    }, -130, 430, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2683;
    ᐃΔⲆᐃᐃⲆᐃ = 20000;
    this.ⲆΔⵠᐃΔᐃᐃ = function (p1688) {
      var v2777 = v2833.ᐃᐃᐃⲆΔⵠⵠ(p1688);
      var v2778 = ᐃΔⲆᐃᐃⲆᐃ * (v2777 * v2777);
      return (p1688 -= v2778) / ((v2777 + 1) * (v2777 + 1) * ᐃΔⲆᐃᐃⲆᐃ - v2778);
    };
    this.ᐃᐃᐃⲆΔⵠⵠ = function (p1689) {
      return Math.floor(Math.sqrt(p1689 / ᐃΔⲆᐃᐃⲆᐃ));
    };
    this.ΔΔⲆΔⵠΔΔⵠᐃ = function (p1690) {
      v2833.ⵠⲆᐃⵠᐃ = v2833.ᐃᐃᐃⲆΔⵠⵠ(p1690);
      v2833.ⵠΔᐃΔᐃᐃⵠ = v2833.ⲆΔⵠᐃΔᐃᐃ(p1690);
      v2833.ⲆⵠΔᐃΔⲆⵠ = 0;
      v2833.Ⲇⵠⵠᐃᐃ = p1690;
    };
    this.ᐃⵠⲆⲆΔΔⲆⲆᐃ = function (p1691) {
      v2833.buttons[v2833.ⵠⲆⲆⲆⵠΔⵠ].info.active = 0;
      v2833.buttons[v2833.ΔᐃΔⵠⲆⵠᐃ].info.active = 1;
      v2833.buttons[v2833.ΔⲆⵠᐃⲆⲆᐃ].info.active = 1;
      f498();
      if (p1691.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = vWindow.decodeURIComponent(vWindow.escape(vWindow.atob(p1691.name)));
      } else {
        document.getElementById("account_nickname_input").value = p1691.name;
      }
      v2833.ⵠⲆⲆⵠⲆ = p1691.bread;
      var v2779 = p1691.seasons;
      var v2780 = v2779[v2779.length - 1];
      v2833.Ⲇᐃᐃⵠⵠᐃⵠ = v2779;
      vThis3.ΔΔⲆΔⵠΔΔⵠᐃ(v2780.score);
      v2833.Ⲇⵠⵠᐃᐃ = v2780.score;
      v2833.ᐃᐃⲆΔᐃᐃΔ = v2780.kill;
      v2833.ΔΔΔΔⵠᐃⲆ = v2780.death;
      v2833.time = v2780.time;
      v2833.ⲆᐃⲆⲆᐃΔᐃ = v2780.bestScore;
      v2833.ⲆΔΔⵠᐃⲆⲆ = v2780.bestKill;
      v2833.ᐃᐃⵠⲆⵠⵠⲆ = v2780.bestTime;
      v2833.ⵠΔⲆⵠΔΔᐃ = v2780.scoreTotal;
      v2833.ⲆⲆⵠⵠⲆⵠΔ = p1691.firstName;
      document.getElementById("serverAddressInput").value = p1691.privateServerRegion + " : " + p1691.privateServer;
      if (vVVVVVUndefined583 === v2833.ⲆⲆⵠⵠⲆⵠΔ) {
        v2833.ⲆⲆⵠⵠⲆⵠΔ = 0;
      }
      v2833.ⵠᐃᐃᐃⵠΔᐃ = Date.now() + p1691.privateServerTime;
      if (Number(p1691.privateServerTime) > 0) {
        v2833.ⵠᐃᐃᐃⵠΔᐃ = Date.now() + Number(p1691.privateServerTime);
      }
      v2833.ⵠⵠⲆⲆⵠⵠⵠ = Date.now() + p1691.kit;
      if (Number(p1691.kit) > 0) {
        v2833.ⵠⵠⲆⲆⵠⵠⵠ = Date.now() + Number(p1691.kit);
      }
      var v2781 = ΔⵠᐃΔ.ⵠⵠᐃᐃΔ;
      for (var v2782 = 0; v2782 < p1691.skins.length; v2782++) {
        var v2783 = p1691.skins[v2782];
        if (v2783 > 0) {
          for (var v2784 = 0; v2784 < v2781.length; v2784++) {
            if (v2781[v2784].id === v2782) {
              vThis3.unlock.ⲆΔⲆⲆ[v2784] = 1;
            }
          }
        }
      }
      v2781 = ΔⵠᐃΔ.ⵠⲆΔᐃΔ;
      v2782 = 0;
      for (; p1691.accessories.length > v2782; v2782++) {
        if ((v2783 = p1691.accessories[v2782]) > 0) {
          for (v2784 = 0; v2784 < v2781.length; v2784++) {
            if (v2781[v2784].id === v2782) {
              vThis3.unlock.ⵠᐃΔᐃΔ[v2784] = 1;
            }
          }
        }
      }
      v2781 = ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ;
      v2782 = 0;
      for (; p1691.books.length > v2782; v2782++) {
        if ((v2783 = p1691.books[v2782]) > 0) {
          for (v2784 = 0; v2784 < v2781.length; v2784++) {
            if (v2781[v2784].id === v2782) {
              vThis3.unlock.ⵠΔᐃΔᐃ[v2784] = 1;
            }
          }
        }
      }
      v2781 = ΔⵠᐃΔ.ⲆⲆΔΔ;
      v2782 = 0;
      for (; v2782 < p1691.bags.length; v2782++) {
        if ((v2783 = p1691.bags[v2782]) > 0) {
          for (v2784 = 0; v2781.length > v2784; v2784++) {
            if (v2782 === v2781[v2784].id) {
              vThis3.unlock.Δⵠᐃⵠᐃ[v2784] = 1;
            }
          }
        }
      }
      v2781 = ΔⵠᐃΔ.ΔⵠΔⲆⵠ;
      v2782 = 0;
      for (; p1691.crates.length > v2782; v2782++) {
        if ((v2783 = p1691.crates[v2782]) > 0) {
          for (v2784 = 0; v2781.length > v2784; v2784++) {
            if (v2782 === v2781[v2784].id) {
              vThis3.unlock.ΔⲆⵠΔΔ[v2784] = 1;
              vThis3.unlock.ΔⵠΔⲆᐃ[v2784] = 1;
            }
          }
        }
      }
    };
    this.ⵠⵠⵠⵠΔⲆⲆᐃᐃ = function () {
      vWindow.ΔⲆⲆⲆΔⵠⵠ = function () {
        f504(v2681);
        (function (p1692) {
          var v2785 = new XMLHttpRequest();
          v2785.open("GET", v3085 + "login?token=" + vUndefined5 + "&type=" + vVVVVUndefined1423 + (v2247 ? "&userId=" + v2247.userId + "&userInfo=" + v2247.userInfo : ""));
          v2785.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          v2785.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && v2785.responseText !== "0") {
              p1692(JSON.parse(v2785.responseText));
            }
          };
          v2785.send();
        })(vThis3.ᐃⵠⲆⲆΔΔⲆⲆᐃ);
      };
      if (v3090 === 1) {
        vWindow.ΔⲆⲆⲆΔⵠⵠ();
      }
    };
    vWindow.ⲆᐃᐃⵠⲆⲆⲆᐃⵠ = function () {
      v2833.buttons[v2833.ⵠⲆⲆⲆⵠΔⵠ].info.active = 1;
      v2833.buttons[v2833.ΔᐃΔⵠⲆⵠᐃ].info.active = 0;
      v2833.buttons[v2833.ΔⲆⵠᐃⲆⲆᐃ].info.active = 0;
      f504(v2681);
    };
    this.ⲆΔΔᐃⲆ = function () {
      return v2833.buttons[v2833.ΔᐃΔⵠⲆⵠᐃ].info.active;
    };
    this.buttons[v2680] = f431(461, 105, 0, [ⵠᐃ.ΔⵠᐃⲆⲆΔⵠ, ⵠᐃ.ΔΔⲆΔⲆⵠᐃ, ⵠᐃ.ᐃΔⵠⵠᐃⲆΔ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f504(v2688);
      } else {
        f504(v2683);
      }
    }, -100, 80, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(157, 158, 0, [ⵠᐃ.ⲆⲆⵠᐃⵠΔᐃ, ⵠᐃ.ⲆⲆⵠᐃΔΔⲆ, ⵠᐃ.ⵠᐃⵠΔᐃⵠⲆ], v2757, 0, function () {
      vWindow.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2686;
    this.buttons[v2680] = f431(66, 73, 0, [ⵠᐃ.ⲆⵠⲆⲆᐃⲆΔ, ⵠᐃ.ⲆΔΔΔΔΔⵠ, ⵠᐃ.ⲆⲆᐃⲆΔΔΔ], v2757, 0, vVVUndefined14, -68, 340, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2686;
    this.buttons[v2680] = f431(66, 73, 0, [ⵠᐃ.ⵠᐃΔᐃⵠΔᐃ, ⵠᐃ.ⵠᐃⵠⵠⲆⵠⲆ, ⵠᐃ.ⲆⲆⲆΔⲆⲆᐃ], v2757, 0, undefined, -30, 340, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2686;
    this.ⵠⵠⵠⲆᐃⲆⵠΔⲆ = v2680;
    this.buttons[v2680] = f431(97, 66, 0, [ⵠᐃ.ᐃᐃΔᐃⵠΔΔ, ⵠᐃ.ⲆⲆⲆⲆΔⵠⲆ, ⵠᐃ.ⲆⲆΔΔⲆⲆᐃ], v2757, 0, function () {
      f547(undefined, undefined, v2833.ⵠⲆᐃΔΔᐃΔ);
    }, -14, 151, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⵠᐃᐃⲆⲆᐃⵠ = v2680;
    this.buttons[v2680] = f431(135, 66, 0, [ⵠᐃ.ⲆⵠᐃⵠᐃⲆⲆ, ⵠᐃ.ᐃⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ⲆΔᐃΔΔⲆΔ], v2757, 0, function () {
      f547(vVVVVVUndefined583, undefined, v2833.ⵠᐃᐃⲆⲆᐃⵠ);
    }, 37.5, 151, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⲆᐃΔⲆᐃⲆᐃ = v2680;
    this.buttons[v2680] = f431(160, 66, 0, [ⵠᐃ.ᐃⲆⲆⵠᐃⵠᐃ, ⵠᐃ.ΔΔⲆᐃΔᐃΔ, ⵠᐃ.ΔᐃΔⲆΔΔᐃ], v2757, 0, function () {
      f547(vVVVVVVUndefined14, undefined, v2833.ⲆᐃΔⲆᐃⲆᐃ);
    }, 107.5, 151, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⵠⲆᐃΔΔᐃΔ = v2680;
    this.buttons[v2680] = f431(207, 66, 0, [ⵠᐃ.ⲆΔⲆⲆⲆⲆⲆ, ⵠᐃ.ⵠⵠⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃⵠᐃⲆⲆᐃⲆ], v2757, 0, function () {
      f547(vVVVVUndefined142, vVVVUndefined58, v2833.ⵠⲆᐃΔΔᐃΔ);
    }, 190.5, 151, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ΔⲆⵠⲆΔⵠᐃ = v2680;
    this.buttons[v2680] = f431(144, 66, 0, [ⵠᐃ.ΔⵠᐃⲆᐃᐃⲆ, ⵠᐃ.ᐃⵠⵠΔΔᐃⵠ, ⵠᐃ.ⵠⵠⵠⲆΔⵠⵠ], v2757, 0, function () {
      f547(v2833.ΔⲆⵠⲆΔⵠᐃ);
    }, 103.5, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⲆᐃⲆΔⵠⲆᐃ = v2680;
    this.buttons[v2680] = f431(124, 66, 0, [ⵠᐃ.ΔᐃⲆᐃᐃΔⵠ, ⵠᐃ.ΔᐃΔΔⵠⲆᐃ, ⵠᐃ.ΔΔΔΔⲆⵠⲆ], v2757, 0, function () {
      f547(v2833.ⲆᐃⲆΔⵠⲆᐃ);
    }, 177.5, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ΔᐃΔⵠΔΔⵠ = v2680;
    this.buttons[v2680] = f431(104, 66, 0, [ⵠᐃ.ᐃΔⵠᐃᐃᐃΔ, ⵠᐃ.ⲆⲆⵠᐃⲆⲆⲆ, ⵠᐃ.ΔⲆⵠᐃΔΔΔ], v2757, 0, function () {
      f547(v2833.ΔᐃΔⵠΔΔⵠ);
    }, 242, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ᐃⲆΔᐃⵠᐃⵠ = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ᐃⲆΔⵠⲆⵠΔ, ⵠᐃ.ΔᐃⵠΔⲆⵠⵠ, ⵠᐃ.ⵠⵠᐃⲆⲆⲆΔ], v2757, 0, function () {
      f547(undefined, vVVVVVVUndefined142, vVVVVVVUndefined142, v2833.ᐃⲆΔᐃⵠᐃⵠ);
    }, -185, 528, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ΔⵠΔⲆⵠΔⵠ = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ⲆⲆⲆⲆΔΔⲆ, ⵠᐃ.ᐃⲆᐃⲆⲆᐃᐃ, ⵠᐃ.ᐃⵠᐃΔⵠⵠᐃ], v2757, 0, function () {
      f547(vVVVVVVUndefined142, vVVVVUndefined583, vVVUndefined5, v2833.ΔⵠΔⲆⵠΔⵠ);
    }, -149, 528, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ΔⲆⲆⵠΔᐃⵠ = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ΔΔᐃⲆⲆᐃⲆ, ⵠᐃ.ΔⵠᐃⲆΔⵠⲆ, ⵠᐃ.ᐃᐃⵠⵠⵠⵠΔ], v2757, 0, function () {
      f547(undefined, undefined, undefined, v2833.ΔⲆⲆⵠΔᐃⵠ);
    }, -113, 528, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⲆΔⲆΔᐃⵠⲆ = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ⵠΔᐃᐃᐃⵠⵠ, ⵠᐃ.ᐃⲆᐃⲆⲆⵠΔ, ⵠᐃ.ΔᐃⲆᐃⲆΔΔ], v2757, 0, function () {
      f547(vVVVUndefined14, undefined, vVVVVVUndefined14, v2833.ⲆΔⲆΔᐃⵠⲆ);
    }, -77, 528, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ᐃΔⲆⵠⲆⲆᐃ = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ΔᐃᐃᐃⵠΔΔ, ⵠᐃ.ᐃⲆⵠⵠᐃⲆⲆ, ⵠᐃ.ⵠⲆᐃᐃⲆⵠⲆ], v2757, 0, function () {
      f547(undefined, undefined, undefined, v2833.ᐃΔⲆⵠⲆⲆᐃ);
    }, -41, 528, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⲆΔᐃᐃΔⵠᐃ = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ⲆⲆΔΔΔΔΔ, ⵠᐃ.ⵠⵠΔΔΔᐃᐃ, ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ], v2757, 0, function () {
      f547(undefined, vVVVUndefined113, undefined, v2833.ⲆΔᐃᐃΔⵠᐃ);
    }, -5, 528, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⵠⲆΔⵠⲆΔΔ = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ⵠⵠᐃΔⵠΔⲆ, ⵠᐃ.ΔΔΔⵠΔᐃᐃ, ⵠᐃ.ⵠⲆΔᐃΔᐃΔ], v2757, 0, function () {
      f547(undefined, undefined, vVVVVUndefined1422, v2833.ⵠⲆΔⵠⲆΔΔ);
    }, 25, 528, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.buttons[v2680] = f431(232, 352, 0, [ⵠᐃ.ΔΔⲆⲆᐃⵠⵠ, ⵠᐃ.ΔⲆΔⵠⵠⵠⵠ, ⵠᐃ.ᐃᐃⵠᐃⵠⵠᐃ], v2757, 0, function () {
      f545(300);
    }, -330, 135, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2688;
    this.buttons[v2680] = f431(232, 352, 0, [ⵠᐃ.ΔⵠⵠᐃⵠᐃΔ, ⵠᐃ.ΔΔⲆΔΔΔΔ, ⵠᐃ.ⵠⲆⲆᐃΔᐃΔ], v2757, 0, function () {
      f545(600);
    }, -195, 135, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2688;
    this.buttons[v2680] = f431(243, 374, 0, [ⵠᐃ.ⵠᐃᐃⵠⵠᐃⵠ, ⵠᐃ.Δⵠᐃᐃⵠⵠᐃ, ⵠᐃ.ⵠᐃᐃΔⲆⵠᐃ], v2757, 0, function () {
      f545(2600);
    }, -60, 130, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2688;
    this.buttons[v2680] = f431(232, 352, 0, [ⵠᐃ.ᐃᐃⲆⲆΔᐃΔ, ⵠᐃ.ᐃⵠΔᐃΔⵠⵠ, ⵠᐃ.ⲆᐃⲆΔⵠⵠⵠ], v2757, 0, function () {
      f545(7000);
    }, 78, 135, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2688;
    this.buttons[v2680] = f431(243, 374, 0, [ⵠᐃ.ΔⵠΔΔΔⲆⲆ, ⵠᐃ.ⲆⵠⵠᐃⵠΔΔ, ⵠᐃ.ᐃᐃⵠΔⲆᐃΔ], v2757, 0, function () {
      f545(20000);
    }, 213, 130, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2688;
    this.buttons[v2680] = f431(58, 64, 0, [ⵠᐃ.ⲆΔⲆⵠΔᐃᐃ, ⵠᐃ.ΔΔΔⵠⵠⵠΔ, ⵠᐃ.ᐃⲆᐃᐃΔᐃⲆ], v2757, 0, function () {
      f504(v2685);
    }, 300, 88, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2688;
    this.buttons[v2680] = f431(323, 112, 0, [ⵠᐃ.ⲆⵠᐃⲆⲆᐃΔ, ⵠᐃ.ΔᐃΔⲆᐃΔΔ, ⵠᐃ.ⵠΔᐃᐃⵠΔⵠ], v2757, 0, function () {
      f504(v2697);
      v2792.ⲆᐃᐃⵠⵠⵠΔ();
    }, -315, 185, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2684;
    this.buttons[v2680] = f431(323, 112, 0, [ⵠᐃ.ⵠⲆΔΔⲆⲆⵠ, ⵠᐃ.ᐃⲆⵠⲆⵠΔᐃ, ⵠᐃ.ᐃΔΔⵠⵠⵠᐃ], v2757, 0, function () {
      f504(v2701);
      v2797.ⲆᐃᐃⵠⵠⵠΔ();
    }, -315, 321, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2684;
    this.buttons[v2680] = f431(323, 112, 0, [ⵠᐃ.ⵠᐃᐃᐃΔΔⲆ, ⵠᐃ.ᐃΔᐃᐃᐃⵠⵠ, ⵠᐃ.ⵠⲆΔᐃᐃⵠⲆ], v2757, 0, function () {
      f504(v2699);
      v2793.ⲆᐃᐃⵠⵠⵠΔ();
    }, 153, 185, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2684;
    this.buttons[v2680] = f431(323, 112, 0, [ⵠᐃ.ᐃᐃⲆⵠΔⵠΔ, ⵠᐃ.ΔΔⵠᐃᐃΔΔ, ⵠᐃ.ⲆΔΔⵠⲆΔΔ], v2757, 0, function () {
      f504(v2700);
      v2794.ⲆᐃᐃⵠⵠⵠΔ();
    }, 153, 321, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2684;
    this.buttons[v2680] = f431(323, 112, 0, [ⵠᐃ.ⵠⵠⵠⵠⵠΔⲆ, ⵠᐃ.ΔΔᐃΔᐃΔⲆ, ⵠᐃ.ⲆⵠⲆⲆⲆⵠⲆ], v2757, 0, function () {
      f504(v2698);
      v2795.ⲆᐃᐃⵠⵠⵠΔ();
    }, 153, 463, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2684;
    this.buttons[v2680] = f431(323, 112, 0, [ⵠᐃ.ⲆΔⵠⲆᐃᐃⲆ, ⵠᐃ.ᐃⲆΔⵠᐃⲆΔ, ⵠᐃ.ⵠᐃΔⵠⲆᐃᐃ], v2757, 0, function () {
      f504(v2702);
      v2796.ⲆᐃᐃⵠⵠⵠΔ();
    }, -315, 463, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2684;
    this.buttons[v2680] = f431(327, 117, 0, [ⵠᐃ.ⵠⲆΔⵠⵠᐃΔ, ⵠᐃ.ⲆᐃⵠᐃⵠΔⲆ, ⵠᐃ.ᐃΔⲆⵠⵠΔΔ], v2757, 0, function () {
      f504(v2708);
    }, 155, 70, v2751, v2760);
    this.buttons[v2680++].view = v2681;
    this.buttons[v2680] = f431(130, 129, 0, [ⵠᐃ.ΔⲆᐃᐃⲆΔΔ, ⵠᐃ.ⲆᐃᐃⲆⵠΔⵠ, ⵠᐃ.ΔᐃΔⲆᐃΔⲆ], v2757, 0, function () {
      f502(v2689, v2759, "none");
      f504(v2685);
    }, 10, 40, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2689;
    this.buttons[v2680] = f431(130, 129, 0, [ⵠᐃ.ΔⲆᐃᐃⲆΔΔ, ⵠᐃ.ⲆᐃᐃⲆⵠΔⵠ, ⵠᐃ.ΔᐃΔⲆᐃΔⲆ], v2757, 0, function () {
      f502(v2690, v2759, "none");
      f504(v2685);
    }, 10, 40, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2690;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2685);
    }, 200, 140, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2705;
    this.buttons[v2680] = f431(524, 110, 0, [ⵠᐃ.ᐃⵠᐃᐃᐃᐃΔ, ⵠᐃ.ⵠⲆΔⲆᐃⵠⲆ, ⵠᐃ.ΔⲆΔΔⲆᐃⵠ], v2757, 0, function () {
      f546("Atlanta");
    }, -265, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2705;
    this.buttons[v2680] = f431(523, 110, 0, [ⵠᐃ.ⲆⵠⲆⲆᐃᐃⵠ, ⵠᐃ.ᐃⲆΔⵠⵠⲆΔ, ⵠᐃ.ᐃᐃⵠⲆᐃⲆⲆ], v2757, 0, function () {
      f546("LosAngeles");
    }, 5, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2705;
    this.buttons[v2680] = f431(344, 110, 0, [ⵠᐃ.ⵠΔⲆᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔⲆᐃⲆᐃ, ⵠᐃ.ΔΔΔΔᐃᐃᐃ], v2757, 0, function () {
      f546("Frankfurt");
    }, -265, 365, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2705;
    this.buttons[v2680] = f431(344, 110, 0, [ⵠᐃ.ⵠᐃᐃⵠⲆⲆΔ, ⵠᐃ.ⵠᐃⲆⲆᐃᐃᐃ, ⵠᐃ.ΔⲆⲆⵠⵠᐃᐃ], v2757, 0, function () {
      f546("Osaka");
    }, 100, 365, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2705;
    this.buttons[v2680] = f431(344, 110, 0, [ⵠᐃ.ⲆⲆⲆΔᐃⵠⲆ, ⵠᐃ.ⲆⵠᐃΔΔⲆΔ, ⵠᐃ.ⲆⲆΔⲆᐃⵠᐃ], v2757, 0, function () {
      f546("Sydney");
    }, -86, 365, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2705;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2705);
    }, 224, 140, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2706;
    this.buttons[v2680] = f431(230, 352, 0, [ⵠᐃ.ᐃᐃⲆⲆᐃⲆΔ, ⵠᐃ.ⲆⲆⵠⵠΔⲆᐃ, ⵠᐃ.ᐃᐃⵠΔⵠΔⵠ], v2757, 0, function () {
      f545(350);
    }, -280, 240, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2706;
    this.buttons[v2680] = f431(230, 352, 0, [ⵠᐃ.Ⲇⵠⵠⵠᐃⵠᐃ, ⵠᐃ.ⵠⵠⵠᐃⲆᐃΔ, ⵠᐃ.ⲆⲆⵠⵠᐃⲆⲆ], v2757, 0, function () {
      f545(700);
    }, -130, 240, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2706;
    this.buttons[v2680] = f431(230, 352, 0, [ⵠᐃ.ⵠΔᐃⲆⵠΔᐃ, ⵠᐃ.ᐃⲆⲆᐃᐃⲆⲆ, ⵠᐃ.ⵠᐃΔⵠᐃⵠᐃ], v2757, 0, function () {
      f545(1400);
    }, 20, 240, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2706;
    this.buttons[v2680] = f431(230, 352, 0, [ⵠᐃ.ΔᐃⵠⲆΔⵠᐃ, ⵠᐃ.ΔⲆⲆⲆᐃⲆⵠ, ⵠᐃ.ⲆⵠᐃⲆⵠⲆⲆ], v2757, 0, function () {
      f545(3000);
    }, 170, 240, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2706;
    this.buttons[v2680] = f431(105, 119, 0, [ⵠᐃ.ⲆᐃΔΔᐃⲆⲆ, ⵠᐃ.ⵠⵠΔᐃⲆⲆᐃ, ⵠᐃ.ⲆΔⲆΔΔᐃΔ], v2757, 0, function () {
      const v2786 = document.getElementById("serverAddressInput").value.split(" : ");
      const v2787 = vWindow.document.createElement("textarea");
      v2787.value = v2251 + "?server=" + v2786[1] + "&region=" + v2786[0];
      vWindow.document.body.appendChild(v2787);
      v2787.select();
      vWindow.document.execCommand("copy");
      vWindow.document.body.removeChild(v2787);
    }, 105, 310, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2707;
    this.buttons[v2680] = f431(105, 119, 0, [ⵠᐃ.ᐃⲆᐃΔΔⵠⲆ, ⵠᐃ.ᐃⵠᐃΔΔᐃΔ, ⵠᐃ.ⲆᐃᐃΔΔⲆⲆ], v2757, 0, function () {
      (function () {
        var v2788 = new XMLHttpRequest();
        v2788.open("GET", v3085 + "rebootServer?token=" + vUndefined5 + "&userid=" + vUndefined6);
        v2788.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        v2788.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && v2788.responseText !== "0") {
            const v2789 = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = v2251 + "?server=" + v2789[1] + "&region=" + v2789[0];
          }
        };
        v2788.send();
      })();
    }, 235, 310, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2707;
    this.buttons[v2680] = f431(105, 119, 0, [ⵠᐃ.ⵠⵠΔⵠΔⵠⵠ, ⵠᐃ.ⲆⵠⲆⲆΔΔΔ, ⵠᐃ.ᐃⲆᐃⲆⵠΔΔ], v2757, 0, function () {
      (function () {
        var v2790 = new XMLHttpRequest();
        v2790.open("GET", v3085 + "restartServer?token=" + vUndefined5 + "&userid=" + vUndefined6);
        v2790.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        v2790.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && v2790.responseText !== "0") {
            const v2791 = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = v2251 + "?server=" + v2791[1] + "&region=" + v2791[0];
          }
        };
        v2790.send();
      })();
    }, 170, 310, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2707;
    this.buttons[v2680] = f431(204, 115, 0, [ⵠᐃ.ⵠⵠᐃⵠΔⵠⵠ, ⵠᐃ.ΔΔⲆⲆᐃⲆⵠ, ⵠᐃ.ΔᐃΔⵠⵠⲆⲆ], v2757, 0, function () {
      vWindow.open("./commands.html", "_blank");
    }, -265, 490, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2707;
    this.buttons[v2680] = f431(145, 69, 0, [ⵠᐃ.ΔⵠⲆΔⵠᐃⵠ, ⵠᐃ.ΔᐃᐃΔⵠΔⲆ, ⵠᐃ.ⵠⵠⲆⲆⲆᐃⲆ], v2757, 0, function () {
      f504(v2691);
    }, -210, 170, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(145, 69, 0, [ⵠᐃ.ⲆⲆⲆⲆⲆⵠᐃ, ⵠᐃ.ΔⵠⲆⲆΔΔⲆ, ⵠᐃ.ⵠΔᐃⲆΔΔⲆ], v2757, 0, function () {
      f504(v2694);
    }, 70, 170, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(145, 69, 0, [ⵠᐃ.ΔᐃⲆⵠΔⵠⲆ, ⵠᐃ.ᐃⵠⵠⲆΔⲆᐃ, ⵠᐃ.ᐃΔⵠⵠΔΔⵠ], v2757, 0, function () {
      f504(v2692);
    }, 70, 204, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(145, 69, 0, [ⵠᐃ.ΔⲆⲆᐃⵠΔⵠ, ⵠᐃ.ᐃΔⵠⲆᐃΔΔ, ⵠᐃ.ᐃⵠᐃΔΔⵠⵠ], v2757, 0, function () {
      f504(v2695);
    }, -210, 204, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(145, 69, 0, [ⵠᐃ.ΔⲆⲆᐃⵠΔⵠ, ⵠᐃ.ᐃΔⵠⲆᐃΔΔ, ⵠᐃ.ᐃⵠᐃΔΔⵠⵠ], v2757, 0, function () {
      f504(v2696);
    }, 70, 238, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(145, 69, 0, [ⵠᐃ.ΔⲆⲆᐃⵠΔⵠ, ⵠᐃ.ᐃΔⵠⲆᐃΔΔ, ⵠᐃ.ᐃⵠᐃΔΔⵠⵠ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f544(0, 300);
      } else {
        f504(v2683);
      }
    }, 307, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(145, 69, 0, [ⵠᐃ.ᐃⲆΔⲆᐃⲆⲆ, ⵠᐃ.ᐃⵠⵠⵠⵠΔⵠ, ⵠᐃ.ᐃΔΔⲆΔⵠⲆ], v2757, 0, function () {
      f504(v2693);
    }, -210, 238, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(145, 69, 0, [ⵠᐃ.ᐃⲆΔⲆᐃⲆⲆ, ⵠᐃ.ᐃⵠⵠⵠⵠΔⵠ, ⵠᐃ.ᐃΔΔⲆΔⵠⲆ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f544(1, 600);
      } else {
        f504(v2683);
      }
    }, 307, 239, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    this.buttons[v2680] = f431(192, 101, 0, [ⵠᐃ.ᐃᐃⵠⵠΔᐃⵠ, ⵠᐃ.ⵠᐃᐃⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃⲆΔᐃⵠᐃ], v2757, 0, function () {
      f543();
    }, -100, 250, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2704;
    this.buttons[v2680] = f431(192, 104, 0, [ⵠᐃ.ⵠΔⲆⲆⲆᐃᐃ, ⵠᐃ.ⲆΔΔⲆᐃᐃᐃ, ⵠᐃ.ΔⵠⲆⲆⵠΔᐃ], v2757, 0, function () {
      f543();
    }, -100, 239, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2703;
    this.buttons[v2680] = f431(192, 101, 0, [ⵠᐃ.ᐃᐃⲆⵠⲆᐃⲆ, ⵠᐃ.ᐃⲆⲆⵠⲆΔΔ, ⵠᐃ.ⵠΔᐃⵠⲆᐃⵠ], v2757, 0, function () {
      f504(v2682);
    }, 10, 250, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2704;
    this.buttons[v2680] = f431(192, 104, 0, [ⵠᐃ.Ⲇⵠⵠᐃᐃⵠⵠ, ⵠᐃ.ΔΔⲆᐃⵠΔᐃ, ⵠᐃ.ΔᐃΔᐃᐃᐃⵠ], v2757, 0, function () {
      f504(v2682);
    }, 10, 239, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2703;
    ⵠΔᐃᐃΔⵠⲆ = [];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.ΔⲆⲆΔᐃ] = [ⵠᐃ.ⲆⲆΔⵠⲆᐃᐃ, ⵠᐃ.ⵠᐃⲆⵠΔᐃΔ, ⵠᐃ.ⲆⲆⲆⵠᐃⲆⲆ];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.ⲆⲆΔᐃ] = [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.ⲆⵠⲆᐃ] = [ⵠᐃ.ⵠⵠⵠⲆΔⲆΔ, ⵠᐃ.ᐃΔΔⵠⵠⲆᐃ, ⵠᐃ.ΔΔⵠΔⵠⲆᐃ];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.Δⵠᐃᐃ] = [ⵠᐃ.ⵠΔⲆⵠΔⵠΔ, ⵠᐃ.ⲆⲆᐃᐃΔⵠⵠ, ⵠᐃ.ΔⲆΔᐃᐃᐃΔ];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.ⵠᐃⲆⲆ] = [ⵠᐃ.ΔᐃΔⲆΔⵠⵠ, ⵠᐃ.ⵠΔᐃⲆⲆᐃΔ, ⵠᐃ.ΔᐃⵠⵠᐃⲆΔ];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.ΔΔⵠⵠ] = [ⵠᐃ.ΔⵠⲆⵠⲆᐃⲆ, ⵠᐃ.ⵠᐃⵠⲆΔᐃᐃ, ⵠᐃ.ⲆᐃⲆΔⲆΔΔ];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.ᐃⲆᐃⲆ] = [ⵠᐃ.ᐃⵠⵠΔⵠⵠΔ, ⵠᐃ.ΔΔΔⵠⵠⲆⲆ, ⵠᐃ.ⲆⲆΔⵠⲆΔΔ];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.ⲆΔᐃⵠⵠ] = [ⵠᐃ.ΔⲆⲆⲆⵠⵠᐃ, ⵠᐃ.ᐃᐃⲆⵠᐃᐃⲆ, ⵠᐃ.ⲆⲆⵠΔⵠΔⵠ];
    ⵠΔᐃᐃΔⵠⲆ[ᐃⵠΔ.ᐃⲆᐃⵠⵠⵠⲆ] = [ⵠᐃ.ΔΔΔᐃᐃⲆᐃ, ⵠᐃ.ᐃΔⵠⵠⵠⵠⲆ, ⵠᐃ.ΔᐃⵠΔⵠⵠⲆ];
    ⵠᐃΔⲆⲆⵠⵠ = v2680;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined582, -29, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined582, -29, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 65, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined142, 65, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 65, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVVUndefined1422, 159, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined14, 159, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVVUndefined583, 159, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ⵠΔⲆᐃΔⵠΔ, ⵠᐃ.ⲆΔⵠᐃⵠΔⲆ, ⵠᐃ.ΔΔΔⵠᐃΔⵠ], v2757, 0, vVVVVUndefined143, -61, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ΔΔᐃⲆΔΔⲆ, ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ, ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ], v2757, 0, vVVVVVVUndefined14, 260, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2684);
    }, -320, 470, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2697;
    ᐃᐃΔⵠΔⵠⵠΔΔ = v2680;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVVUndefined14, -29, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vUndefined, 65, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 65, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 65, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined582, 159, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined142, 159, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined143, 159, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ⵠΔⲆᐃΔⵠΔ, ⵠᐃ.ⲆΔⵠᐃⵠΔⲆ, ⵠᐃ.ΔΔΔⵠᐃΔⵠ], v2757, 0, undefined, -61, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ΔΔᐃⲆΔΔⲆ, ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ, ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ], v2757, 0, vVVVVVVUndefined14, 260, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2684);
    }, -320, 470, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2701;
    ΔΔΔᐃΔᐃⵠⵠΔ = v2680;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVVUndefined1422, -29, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVVUndefined14, 65, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVUndefined5, 65, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 65, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 159, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined14, 159, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined1422, 159, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ⵠΔⲆᐃΔⵠΔ, ⵠᐃ.ⲆΔⵠᐃⵠΔⲆ, ⵠᐃ.ΔΔΔⵠᐃΔⵠ], v2757, 0, vVVVVVUndefined583, -61, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ΔΔᐃⲆΔΔⲆ, ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ, ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ], v2757, 0, vVVVUndefined58, 260, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2684);
    }, -320, 470, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2702;
    ⵠᐃⵠⵠⲆΔΔⲆⲆ = v2680;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined14, -29, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined58, 65, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vUndefined, 65, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 65, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined582, 159, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 159, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 159, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ⵠΔⲆᐃΔⵠΔ, ⵠᐃ.ⲆΔⵠᐃⵠΔⲆ, ⵠᐃ.ΔΔΔⵠᐃΔⵠ], v2757, 0, undefined, -61, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ΔΔᐃⲆΔΔⲆ, ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ, ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ], v2757, 0, vVVVUndefined142, 260, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2684);
    }, -320, 470, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2699;
    ᐃᐃⲆΔᐃⲆⲆⵠΔ = v2680;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVVUndefined583, -29, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 65, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined142, 65, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined142, 65, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 159, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVUndefined14, 159, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVUndefined11, 159, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ⵠΔⲆᐃΔⵠΔ, ⵠᐃ.ⲆΔⵠᐃⵠΔⲆ, ⵠᐃ.ΔΔΔⵠᐃΔⵠ], v2757, 0, undefined, -61, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ΔΔᐃⲆΔΔⲆ, ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ, ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ], v2757, 0, vUndefined, 260, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2684);
    }, -320, 470, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2700;
    ⵠⲆⵠᐃⵠⲆⲆⵠⲆ = v2680;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, -29, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVVUndefined583, -29, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVUndefined14, 65, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined142, 65, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined142, 65, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVUndefined113, 159, 205, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, undefined, 159, 300, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(178, 182, 0, [ⵠᐃ.ᐃⵠⲆᐃ, ⵠᐃ.ⲆⲆᐃᐃ, ⵠᐃ.ⵠⵠΔΔ], v2757, 0, vVVVVUndefined582, 159, 395, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ⵠΔⲆᐃΔⵠΔ, ⵠᐃ.ⲆΔⵠᐃⵠΔⲆ, ⵠᐃ.ΔΔΔⵠᐃΔⵠ], v2757, 0, vVVVVUndefined143, -61, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(39, 122, 0, [ⵠᐃ.ΔΔᐃⲆΔΔⲆ, ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ, ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ], v2757, 0, undefined, 260, 315, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2684);
    }, -320, 470, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2698;
    this.buttons[v2680] = f431(260, 260, 0, [ⵠᐃ.ⵠⵠᐃⲆⵠⵠⲆ, ⵠᐃ.ᐃⵠΔⵠᐃⲆⲆ, ⵠᐃ.ᐃⲆΔΔΔⵠΔ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f542(3, 50);
      } else {
        f504(v2683);
      }
    }, -65, 197, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2694;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2685);
    }, 309, 180, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2694;
    this.buttons[v2680] = f431(260, 260, 0, [ⵠᐃ.ⲆΔⵠΔΔᐃⲆ, ⵠᐃ.ᐃᐃᐃⵠᐃⵠΔ, ⵠᐃ.ΔⵠⲆᐃⲆᐃⲆ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f542(0, 100);
      } else {
        f504(v2683);
      }
    }, -65, 197, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2691;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2685);
    }, 309, 180, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2691;
    this.buttons[v2680] = f431(260, 260, 0, [ⵠᐃ.ⵠⵠΔᐃΔᐃⲆ, ⵠᐃ.ⲆⲆⵠᐃᐃⲆⲆ, ⵠᐃ.ⲆΔᐃⵠΔΔⵠ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f542(4, 150);
      } else {
        f504(v2683);
      }
    }, -65, 197, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2692;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2685);
    }, 309, 180, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2692;
    this.buttons[v2680] = f431(260, 260, 0, [ⵠᐃ.ᐃⵠⵠᐃⲆΔΔ, ⵠᐃ.ⵠᐃΔΔᐃᐃⲆ, ⵠᐃ.ⵠⲆⵠᐃⲆᐃⵠ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f542(1, 300);
      } else {
        f504(v2683);
      }
    }, -65, 197, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2695;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2685);
    }, 309, 180, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2695;
    this.buttons[v2680] = f431(260, 260, 0, [ⵠᐃ.ᐃᐃⵠⲆⲆⲆΔ, ⵠᐃ.ᐃⵠΔⵠⲆⲆⵠ, ⵠᐃ.ΔⲆΔⲆᐃΔⲆ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f542(2, 600);
      } else {
        f504(v2683);
      }
    }, -65, 197, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2693;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2685);
    }, 309, 180, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2693;
    this.buttons[v2680] = f431(260, 260, 0, [ⵠᐃ.ᐃⵠⵠᐃⲆΔΔ, ⵠᐃ.ⵠᐃΔΔᐃᐃⲆ, ⵠᐃ.ⵠⲆⵠᐃⲆᐃⵠ], v2757, 0, function () {
      if (vThis3.ⲆΔΔᐃⲆ()) {
        f542(5, 300);
      } else {
        f504(v2683);
      }
    }, -65, 197, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2696;
    this.buttons[v2680] = f431(115, 73, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠ, ⵠᐃ.ⵠᐃⵠⵠⲆ, ⵠᐃ.ⲆⵠⵠⲆΔ], v2757, 0, function () {
      f504(v2685);
    }, 309, 180, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2696;
    var vV2680 = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ᐃⵠⵠΔΔⲆᐃ, ⵠᐃ.ΔⲆΔⵠΔΔΔ, ⵠᐃ.ⵠᐃⲆⲆᐃⵠⲆ], v2757, 0, function () {
      f508(vVVVVUndefined582, 0);
    }, -305, 132, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV26802 = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ᐃⵠΔΔΔⵠΔ, ⵠᐃ.ΔⵠᐃΔⵠᐃⵠ, ⵠᐃ.ⲆΔΔⲆᐃⵠⲆ], v2757, 0, function () {
      f508(undefined, 1);
    }, -273, 132, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV26803 = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ᐃΔᐃΔⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⲆⲆⵠⲆ, ⵠᐃ.ΔⲆΔᐃⵠᐃⲆ], v2757, 0, function () {
      f508(vVVVVVUndefined14, 2);
    }, -241, 132, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV26804 = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ⲆΔᐃⵠⵠΔΔ, ⵠᐃ.ᐃΔⵠⲆⲆⲆΔ, ⵠᐃ.ᐃⵠⵠᐃⲆᐃⲆ], v2757, 0, function () {
      f508(vVVVVUndefined582, 3);
    }, -305, 165, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV26805 = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ᐃΔⵠΔΔΔⵠ, ⵠᐃ.ⵠᐃⵠⵠⵠⵠᐃ, ⵠᐃ.ᐃᐃᐃⵠΔⲆΔ], v2757, 0, function () {
      f508(vVVVVVUndefined14, 4);
    }, -273, 165, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV26806 = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ⵠⵠᐃⵠᐃⲆⲆ, ⵠᐃ.ΔⵠΔⵠᐃᐃᐃ, ⵠᐃ.ⲆᐃᐃⲆⲆⵠⵠ], v2757, 0, function () {
      f508(vUndefined, 5);
    }, -241, 165, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV26807 = v2680;
    this.buttons[v2680] = f431(46, 51, 0, [ⵠᐃ.ᐃΔᐃΔΔⵠΔ, ⵠᐃ.ᐃΔⵠⵠⲆᐃΔ, ⵠᐃ.ⲆᐃⵠⲆⵠΔᐃ], v2757, 0, function () {
      f508(vVVUndefined11, 6);
    }, -305, 198, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV26808 = v2680;
    this.buttons[v2680] = f431(460, 73, 0, [ⵠᐃ.ⵠⲆⵠᐃⲆⵠⵠ, ⵠᐃ.ᐃⵠΔⲆⵠⲆⲆ, ⵠᐃ.ΔⲆΔⲆⵠⵠᐃ], v2757, 0, function () {
      f508(-1);
    }, -180, 170, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV26809 = v2680;
    this.buttons[v2680] = f431(222, 68, 0, [ⵠᐃ.ᐃᐃΔᐃⵠⵠⲆ, ⵠᐃ.ΔⵠᐃⵠⵠΔⵠ, ⵠᐃ.ᐃᐃΔⲆᐃⲆΔ], v2757, 0, function () {
      f508(0);
    }, -180, 215, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV268010 = v2680;
    this.buttons[v2680] = f431(222, 68, 0, [ⵠᐃ.ⵠΔᐃⵠᐃᐃΔ, ⵠᐃ.ᐃᐃᐃᐃⲆⲆⵠ, ⵠᐃ.ⲆⵠΔᐃⲆⵠⵠ], v2757, 0, function () {
      f508(4);
    }, -180, 260, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV268011 = v2680;
    this.buttons[v2680] = f431(222, 68, 0, [ⵠᐃ.ΔΔⲆⵠⲆΔⵠ, ⵠᐃ.ᐃΔᐃᐃⵠⲆⵠ, ⵠᐃ.ⲆⲆⲆⵠΔᐃᐃ], v2757, 0, function () {
      f508(2);
    }, -60, 215, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    var vV268012 = v2680;
    this.buttons[v2680] = f431(222, 68, 0, [ⵠᐃ.ⲆΔΔΔᐃⵠᐃ, ⵠᐃ.ⲆᐃⵠⵠΔⲆⵠ, ⵠᐃ.ⵠΔⲆΔⵠΔⲆ], v2757, 0, function () {
      f508(3);
    }, -60, 260, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2682;
    this.ᐃⵠⲆⵠᐃⵠⵠ = v2680;
    this.buttons[v2680] = f431(143, 66, 0, [ⵠᐃ.ΔᐃⵠⵠⵠⲆΔ, ⵠᐃ.ᐃᐃⲆⵠᐃᐃᐃ, ⵠᐃ.ᐃⲆⵠⲆᐃᐃΔ], v2757, 0, function () {
      f547(vVVUndefined5, v2833.ᐃⵠⲆⵠᐃⵠⵠ);
    }, -298, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⲆⵠᐃⲆⵠᐃᐃ = v2680;
    this.buttons[v2680] = f431(104, 66, 0, [ⵠᐃ.ᐃΔⲆΔⵠⲆⵠ, ⵠᐃ.ᐃΔⲆᐃⵠⵠΔ, ⵠᐃ.ᐃᐃᐃⲆⲆⵠⲆ], v2757, 0, function () {
      f547(undefined, v2833.ⲆⵠᐃⲆⵠᐃᐃ);
    }, -223, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ᐃⲆⲆᐃΔᐃᐃ = v2680;
    this.buttons[v2680] = f431(110, 66, 0, [ⵠᐃ.ΔΔⲆⲆⲆⵠΔ, ⵠᐃ.ΔᐃⵠᐃΔᐃⲆ, ⵠᐃ.ⵠΔⵠⵠⲆⵠⲆ], v2757, 0, function () {
      f547(vVVVUndefined142, v2833.ᐃⲆⲆᐃΔᐃᐃ);
    }, -168, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⲆⵠⵠΔⲆᐃⲆ = v2680;
    this.buttons[v2680] = f431(88, 66, 0, [ⵠᐃ.ⲆⲆΔⲆᐃⲆⵠ, ⵠᐃ.Ⲇⵠⵠⵠⵠⵠⵠ, ⵠᐃ.ⵠⲆⲆᐃⲆᐃΔ], v2757, 0, function () {
      f547(vUndefined, v2833.ⲆⵠⵠΔⲆᐃⲆ);
    }, -110, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.ⵠΔᐃⵠⲆⵠΔ = v2680;
    this.buttons[v2680] = f431(88, 66, 0, [ⵠᐃ.ⲆᐃΔⵠᐃΔᐃ, ⵠᐃ.ⵠⲆⵠⵠᐃᐃᐃ, ⵠᐃ.ⲆᐃΔᐃΔⵠᐃ], v2757, 0, function () {
      f547(undefined, v2833.ⵠΔᐃⵠⲆⵠΔ);
    }, -63, 110, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2687;
    this.buttons[v2680] = f431(86, 44, 0, [ⵠᐃ.ⵠⲆⵠᐃⲆⲆΔ, ⵠᐃ.ᐃᐃᐃⲆⵠΔΔ, ⵠᐃ.ⲆΔΔⲆΔⲆⲆ], v2757, 0, function () {
      vWindow.open("./terms.html", "_blank");
    }, 349, 290, v2755 | v2753, v2759);
    this.buttons[v2680++].view = v2685;
    var v2792 = new g(ΔⵠᐃΔ.ⵠⵠᐃᐃΔ, ⵠᐃΔⲆⲆⵠⵠ, function (p1693) {
      v2833.ⲆΔⲆⲆ = p1693;
      if (v2833.unlock.ⲆΔⲆⲆ[p1693] === 1) {
        ⲆᐃΔⵠ.set("starve_skin", "" + p1693, {
          expires: 30
        });
      }
    }, this.ⲆΔⲆⲆ, this.unlock.ⲆΔⲆⲆ);
    var v2793 = new g(ΔⵠᐃΔ.ⲆⲆΔΔ, ⵠᐃⵠⵠⲆΔΔⲆⲆ, function (p1694) {
      v2833.Δⵠᐃⵠᐃ = p1694;
      if (v2833.unlock.Δⵠᐃⵠᐃ[p1694] === 1) {
        ⲆᐃΔⵠ.set("starve_bag", "" + p1694, {
          expires: 30
        });
      }
    }, this.Δⵠᐃⵠᐃ, this.unlock.Δⵠᐃⵠᐃ);
    var v2794 = new g(ΔⵠᐃΔ.ᐃᐃᐃⲆᐃ, ᐃᐃⲆΔᐃⲆⲆⵠΔ, function (p1695) {
      v2833.ⵠΔᐃΔᐃ = p1695;
      if (v2833.unlock.ⵠΔᐃΔᐃ[p1695] === 1) {
        ⲆᐃΔⵠ.set("starve_book", "" + p1695, {
          expires: 30
        });
      }
    }, this.ⵠΔᐃΔᐃ, this.unlock.ⵠΔᐃΔᐃ);
    var v2795 = new g(ΔⵠᐃΔ.ΔⵠΔⲆⵠ, ⵠⲆⵠᐃⵠⲆⲆⵠⲆ, function (p1696) {
      v2833.ΔⵠΔⲆᐃ = p1696;
      if (v2833.unlock.ΔⵠΔⲆᐃ[p1696] === 1) {
        ⲆᐃΔⵠ.set("starve_dead", "" + p1696, {
          expires: 30
        });
      }
    }, this.ΔⵠΔⲆᐃ, this.unlock.ΔⵠΔⲆᐃ);
    var v2796 = new g(ΔⵠᐃΔ.ΔⵠΔⲆⵠ, ΔΔΔᐃΔᐃⵠⵠΔ, function (p1697) {
      v2833.ΔⲆⵠΔΔ = p1697;
      if (v2833.unlock.ΔⲆⵠΔΔ[p1697] === 1) {
        ⲆᐃΔⵠ.set("starve_crate", "" + p1697, {
          expires: 30
        });
      }
    }, this.ΔⲆⵠΔΔ, this.unlock.ΔⲆⵠΔΔ);
    var v2797 = new g(ΔⵠᐃΔ.ⵠⲆΔᐃΔ, ᐃᐃΔⵠΔⵠⵠΔΔ, function (p1698) {
      v2833.ⵠᐃΔᐃΔ = p1698;
      if (v2833.unlock.ⵠᐃΔᐃΔ[p1698] === 1) {
        ⲆᐃΔⵠ.set("starve_accessory", "" + p1698, {
          expires: 30
        });
      }
    }, this.ⵠᐃΔᐃΔ, this.unlock.ⵠᐃΔᐃΔ);
    this.ⵠⲆΔⲆΔⲆΔ = function (p1699) {
      v3063.ᐃΔⵠⲆ = f429(vThis3.ⵠΔΔ, p1699);
      for (var v2798 = 0; vThis3.buttons.length > v2798; v2798++) {
        if (v2760 === vThis3.buttons[v2798].info.active) {
          vThis3.buttons[v2798].ᐃᐃⲆⵠ(vThis3.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2224);
        }
      }
    };
    this.ⲆᐃΔⲆᐃΔⲆ = function (p1700) {
      v3063.ᐃΔⵠⲆ = f429(vThis3.ⵠΔΔ, p1700);
      for (var v2799 = 0; v2799 < vThis3.buttons.length; v2799++) {
        var v2800 = vThis3.buttons[v2799];
        if (v2760 === v2800.info.active && v2800.ᐃᐃⲆⵠ(vThis3.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2225)) {
          v2800.info.callback();
          return;
        }
      }
    };
    this.ΔⵠΔᐃⵠΔᐃ = vVV145;
    this.ΔⵠⵠΔΔᐃΔ = function (p1701) {
      v3063.ᐃΔⵠⲆ = f429(vThis3.ⵠΔΔ, p1701);
      var vVVVV14 = vVVV14;
      for (var v2801 = 0; vThis3.buttons.length > v2801; v2801++) {
        if (vThis3.buttons[v2801].info.active === v2760) {
          vVVVV14 |= vThis3.buttons[v2801].ᐃᐃⲆⵠ(vThis3.ⵠΔΔ, v3063.ᐃΔⵠⲆ, v2223);
        }
      }
      if (vThis3.ΔⵠΔᐃⵠΔᐃ !== vVVVV14) {
        vThis3.ΔⵠΔᐃⵠΔᐃ = vVVVV14;
        p1657.style.cursor = vVVVV14 ? vThis3.ᐃᐃΔΔⲆΔᐃ : vThis3.ᐃⵠᐃᐃΔⵠΔ;
      }
    };
    this.ⲆⵠΔᐃⲆΔⵠ = function () {
      vWindow.addEventListener("mousedown", this.ⵠⲆΔⲆΔⲆΔ, vV142);
      vWindow.addEventListener("mouseup", this.ⲆᐃΔⲆᐃΔⲆ, vVV142);
      vWindow.addEventListener("mousemove", this.ΔⵠⵠΔΔᐃΔ, vVVVV1423);
    };
    this.ΔⲆⲆΔⵠᐃΔ = function () {
      vWindow.removeEventListener("mousedown", this.ⵠⲆΔⲆΔⲆΔ, false);
      vWindow.removeEventListener("mouseup", this.ⲆᐃΔⲆᐃΔⲆ, false);
      vWindow.removeEventListener("mousemove", this.ΔⵠⵠΔΔᐃΔ, false);
    };
  }
  function f509() {
    Δᐃᐃ.ⲆⵠΔⲆΔⲆⵠ("https://twitter.com/intent/tweet?text=I%20survived%20" + user.Δⵠⵠ + "%20days%20with%20" + user.ΔⵠᐃⵠᐃⲆⲆ.Ⲇⵠⵠᐃᐃ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  var v2802 = 1;
  var v2803 = 1;
  var v2804 = {
    ᐃᐃⲆⲆⵠ: 1,
    ⲆᐃⲆⵠᐃⲆⲆᐃΔ: 12,
    ᐃⵠⵠΔΔᐃⲆⵠᐃ: 5000,
    ᐃⲆⵠΔⵠⵠⵠᐃᐃ: 5000,
    ⲆΔⵠⲆᐃᐃΔ: 12,
    ᐃΔⲆᐃⲆ: 3,
    ⵠⲆⲆ: 6,
    ⲆⲆⵠᐃⲆᐃΔᐃᐃ: 5000,
    ΔᐃᐃⲆΔⲆᐃᐃⲆ: 12,
    ⲆⵠⵠⵠⲆ: 2,
    ΔⵠⲆᐃΔΔΔ: 3000,
    ΔⲆⲆΔΔ: 8,
    ΔⵠΔᐃⵠⲆᐃ: 460000
  };
  var v2805 = [];
  v2805[-1] = 1;
  v2805[46] = 1;
  v2805[85] = 1;
  v2805[v588.ᐃΔⲆΔⲆΔΔΔⵠ] = 2;
  v2805[8] = 2;
  v2805[1] = 2;
  v2805[3] = 2;
  v2805[4] = 2;
  v2805[49] = 2;
  v2805[50] = 2;
  v2805[9] = 2;
  v2805[103] = 2;
  v2805[0] = 2;
  v2805[109] = 2;
  v2805[17] = 2;
  v2805[5] = 2;
  v2805[6] = 2;
  v2805[48] = 2;
  v2805[v588.ΔⵠⵠᐃⲆᐃⵠⲆᐃ] = 2;
  v2805[18] = 2;
  v2805[12] = 2;
  v2805[13] = 2;
  v2805[14] = 2;
  v2805[15] = 2;
  v2805[16] = 2;
  v2805[60] = 2;
  v2805[v588.ΔⵠⲆᐃᐃᐃΔⲆᐃ] = 2;
  v2805[62] = 2;
  v2805[63] = 2;
  v2805[64] = 2;
  v2805[65] = 2;
  v2805[66] = 2;
  v2805[72] = 2;
  v2805[108] = 2;
  v2805[100] = 2;
  v2805[99] = 2;
  v2805[82] = 3;
  v2805[86] = 3;
  v2805[87] = 3;
  v2805[88] = 3;
  ⲆᐃΔⲆ = [];
  ⲆᐃΔⲆ[0] = 0;
  ⲆᐃΔⲆ[1] = 1;
  ⲆᐃΔⲆ[2] = 1;
  ⲆᐃΔⲆ[3] = 1;
  ⲆᐃΔⲆ[4] = 0;
  ⲆᐃΔⲆ[5] = 0;
  ⲆᐃΔⲆ[6] = 0;
  ⲆᐃΔⲆ[7] = 0;
  ⲆᐃΔⲆ[8] = 0;
  ⲆᐃΔⲆ[9] = 0;
  ⲆᐃΔⲆ[10] = 1;
  ⲆᐃΔⲆ[11] = 1;
  ⲆᐃΔⲆ[12] = 1;
  ⲆᐃΔⲆ[13] = 1;
  ⲆᐃΔⲆ[14] = 1;
  ⲆᐃΔⲆ[15] = 1;
  ⲆᐃΔⲆ[16] = 0;
  ⲆᐃΔⲆ[17] = 0;
  ⲆᐃΔⲆ[18] = 0;
  ⲆᐃΔⲆ[19] = 0;
  ⲆᐃΔⲆ[20] = 0;
  function f510(p1702) {
    if (p1702 > 0) {
      return p1702 * p1702;
    } else {
      return p1702;
    }
  }
  function f511(p1703) {
    return vWindow.String.fromCharCode(p1703);
  }
  ⲆᐃΔⲆ[21] = 0;
  ⲆᐃΔⲆ[22] = 0;
  ⲆᐃΔⲆ[23] = 1;
  ⲆᐃΔⲆ[24] = 1;
  ⲆᐃΔⲆ[25] = 1;
  ⲆᐃΔⲆ[26] = 1;
  ⲆᐃΔⲆ[27] = 1;
  ⲆᐃΔⲆ[28] = 1;
  ⲆᐃΔⲆ[29] = 1;
  ⲆᐃΔⲆ[30] = 1;
  ⲆᐃΔⲆ[31] = 1;
  ⲆᐃΔⲆ[32] = 1;
  ⲆᐃΔⲆ[33] = 1;
  ⲆᐃΔⲆ[34] = 1;
  ⲆᐃΔⲆ[35] = 1;
  ⲆᐃΔⲆ[36] = 1;
  ⲆᐃΔⲆ[37] = 1;
  ⲆᐃΔⲆ[38] = 1;
  ⲆᐃΔⲆ[40] = 0;
  ⲆᐃΔⲆ[41] = 0;
  ⲆᐃΔⲆ[42] = 0;
  ⲆᐃΔⲆ[50] = 1;
  ⲆᐃΔⲆ[51] = 1;
  ⲆᐃΔⲆ[52] = 1;
  ⲆᐃΔⲆ[55] = 0;
  ⲆᐃΔⲆ[56] = 0;
  ⲆᐃΔⲆ[57] = 0;
  ⲆᐃΔⲆ[58] = 0;
  ᐃΔᐃΔⲆ = [];
  ᐃΔᐃΔⲆ[v2260.ⵠⲆΔΔⲆ] = 0;
  ᐃΔᐃΔⲆ[1] = 0;
  ᐃΔᐃΔⲆ[38] = 0;
  ᐃΔᐃΔⲆ[6] = 0;
  ᐃΔᐃΔⲆ[3] = -1;
  ᐃΔᐃΔⲆ[40] = -1;
  ᐃΔᐃΔⲆ[2] = 0;
  var v2806 = vWindow.console;
  v2806.log = v2806.info = v2806.error = v2806.warn = v2806.debug = v2806.ⵠⵠᐃᐃⵠⵠᐃⲆⵠ = v2806.trace = v2806.time = v2806.timeEnd = function () {};
  ;
  ᐃΔᐃΔⲆ[4] = 0;
  ᐃΔᐃΔⲆ[39] = 0;
  ᐃΔᐃΔⲆ[42] = 0;
  ᐃΔᐃΔⲆ[41] = 1;
  ᐃΔᐃΔⲆ[44] = 1;
  ᐃΔᐃΔⲆ[7] = 1;
  ᐃΔᐃΔⲆ[8] = 1;
  ᐃΔᐃΔⲆ[9] = 1;
  ᐃΔᐃΔⲆ[19] = 1;
  ᐃΔᐃΔⲆ[59] = 1;
  ᐃΔᐃΔⲆ[5] = 0;
  ᐃΔᐃΔⲆ[12] = 1;
  ᐃΔᐃΔⲆ[13] = 1;
  ᐃΔᐃΔⲆ[14] = 1;
  ᐃΔᐃΔⲆ[20] = 1;
  ᐃΔᐃΔⲆ[61] = 1;
  ᐃΔᐃΔⲆ[10] = 0;
  ᐃΔᐃΔⲆ[15] = 1;
  ᐃΔᐃΔⲆ[16] = 1;
  ᐃΔᐃΔⲆ[17] = 1;
  ᐃΔᐃΔⲆ[21] = 1;
  ᐃΔᐃΔⲆ[60] = 1;
  ᐃΔᐃΔⲆ[54] = 0;
  ᐃΔᐃΔⲆ[55] = 1;
  ᐃΔᐃΔⲆ[56] = 1;
  ᐃΔᐃΔⲆ[57] = 1;
  ᐃΔᐃΔⲆ[58] = 1;
  ᐃΔᐃΔⲆ[62] = 1;
  ᐃΔᐃΔⲆ[18] = 1;
  ᐃΔᐃΔⲆ[22] = 1;
  ᐃΔᐃΔⲆ[23] = 1;
  ᐃΔᐃΔⲆ[11] = 0;
  ᐃΔᐃΔⲆ[43] = 1;
  var v2807 = {
    ⲆΔⵠᐃⲆᐃΔ: {
      ⵠⲆΔⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃᐃ: {
        d0: [90086, 300, false],
        d2: [90684, 300, false],
        d1: [90391, 300, v14]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ΔΔⵠⵠⵠᐃᐃ: {
      ⵠⲆΔⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃᐃ: {
        p2: [89815, 300, false],
        p1: [89549, 300, false],
        p0: [89303, 300, false]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ⲆᐃΔᐃΔⲆᐃ: {
      ⵠⲆΔⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃᐃ: {
        w1: [88473, 300, false],
        w2: [88751, 300, vVVV144],
        w0: [88195, 300, false],
        w3: [89025, 300, vVV1423]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ⲆΔᐃᐃⲆΔⲆ: {
      ⵠⲆΔⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃᐃ: {
        ⲆΔΔᐃΔᐃΔ: [31658, 813, vV6],
        ᐃⲆΔⲆⵠⵠⵠᐃⵠ: [100, 2800, true],
        ⵠΔⲆΔⵠ: [12356, 6965, true],
        ⲆᐃⵠⵠΔⵠⵠ: [54524, 11393, vVVVV632],
        ⵠⲆᐃⲆΔ: [28380, 1797, vVVVV63],
        ᐃⲆᐃᐃᐃⵠᐃ: [32604, 21890, true],
        ⵠⲆΔᐃΔⲆⵠ: [66961, 21223, vVVVVV6232],
        ⵠΔΔⲆⲆⲆΔ: [66961, 21223, true],
        ΔⲆⲆⵠΔⲆⵠ: [91022, 400, false],
        ⲆΔⲆⲆⵠᐃΔ: [19882, 8301, true],
        ⵠΔⵠⵠⵠⵠⵠ: [3100, 8800, true],
        ᐃᐃⵠⵠⲆⲆΔ: [92249, 500, false],
        ᐃᐃᐃΔⵠ: [91431, 400, false],
        ᐃⲆΔⲆΔΔᐃ: [66014, 925, true],
        ⵠⵠᐃⵠⲆⲆΔ: [30562, 655, true]
      },
      sample: {
        ᐃⲆΔⲆⵠⵠⵠᐃⵠ: 1,
        ⵠΔⵠⵠⵠⵠⵠ: 1,
        ⲆΔⲆⲆⵠᐃΔ: 1,
        ᐃⲆᐃᐃᐃⵠᐃ: 1,
        ⲆᐃⵠⵠΔⵠⵠ: 1,
        ⵠΔΔⲆⲆⲆΔ: 1,
        ⵠⲆΔᐃΔⲆⵠ: 1,
        ⵠΔⲆΔⵠ: 8,
        ⵠⲆᐃⲆΔ: 8,
        ⵠⵠᐃⵠⲆⲆΔ: 8,
        ⲆΔΔᐃΔᐃΔ: 8,
        ᐃⲆΔⲆΔΔᐃ: 8,
        ΔⲆⲆⵠΔⲆⵠ: 6,
        ᐃᐃᐃΔⵠ: 6,
        ᐃᐃⵠⵠⲆⲆΔ: 6
      }
    }
  };
  function f512(p1704, p1705, p1706, p1707, p1708) {
    v42(vVVVVVUndefined582, p1704, p1705, p1706, p1707, p1708);
    const vF502 = f50(v372[0], v372[1], v372[2], v372[3], v372[4]);
    f52(v372[0], v372[1], v372[2], v372[3]);
    return ~(vF502 & 8108) & (vF502 | 8108);
  }
  function f513(p1709, p1710, p1711, p1712, p1713, p1714, p1715, p1716, p1717, p1718, p1719) {
    this.r = 1;
    this.ⲆⲆᐃΔⲆ = p1709;
    this.ⵠⲆΔΔⵠΔᐃ = p1709;
    this.ᐃᐃΔ = p1710;
    this.Δⵠⵠ = p1711;
    this.fade = p1712;
    this.ᐃⵠⲆⲆⵠⵠⵠ = p1713;
    this.ΔᐃⲆᐃⵠᐃⵠ = p1714;
    this.ⲆⵠⵠΔ = p1715;
    this.ᐃᐃᐃⵠⵠᐃⲆ = p1716;
    this.source = p1717;
    this.source.ΔⵠⵠΔΔΔΔ = p1717.x + p1717.w;
    this.source.ⵠΔΔⵠᐃ = p1717.y + p1717.ⵠⲆⵠ;
    this.ⵠᐃⲆᐃΔᐃΔᐃᐃ = p1718;
    this.ⲆᐃΔⲆⵠΔᐃ = p1719;
    this.ⲆᐃⲆΔΔⵠⲆ = 0;
    this.ΔⵠΔΔⲆᐃΔ = {
      d: 5,
      ΔⵠⲆΔⲆ: 5
    };
    this.ⵠⲆΔΔᐃ = function () {
      this.ⲆⲆᐃΔⲆ -= v3064;
      if (this.ⲆⲆᐃΔⲆ < 0) {
        this.ⲆⲆᐃΔⲆ = this.ⵠⲆΔΔⵠΔᐃ;
        var v2808 = v2807.ⲆΔᐃᐃⲆΔⲆ.ⵠⲆΔⲆᐃ.playing(this.ᐃᐃΔ);
        var v2809 = v2807.ⲆΔᐃᐃⲆΔⲆ.ⵠⲆΔⲆᐃ.playing(this.Δⵠⵠ);
        if (v2808 && !v2809) {
          var v2810 = this.ⲆⵠⵠΔ.volume(this.ᐃᐃΔ) * v2802;
          var v2811 = (this.ΔᐃⲆᐃⵠᐃⵠ * Math.random() + this.ᐃⵠⲆⲆⵠⵠⵠ) * v2802;
          this.ⲆⵠⵠΔ.fade(v2810, v2811, this.fade, this.ᐃᐃΔ);
        } else if (!v2808 && v2809) {
          v2810 = v2802 * this.ⲆⵠⵠΔ.volume(this.Δⵠⵠ);
          v2811 = (this.ΔᐃⲆᐃⵠᐃⵠ * Math.random() + this.ᐃⵠⲆⲆⵠⵠⵠ) * v2802;
          this.ⲆⵠⵠΔ.fade(v2810, v2811, this.fade, this.Δⵠⵠ);
        }
      }
    };
    this.transition = function () {
      this.ⲆⲆᐃΔⲆ = this.ⵠⲆΔΔⵠΔᐃ;
      this.ΔⵠΔΔⲆᐃΔ.d = this.ΔⵠΔΔⲆᐃΔ.ΔⵠⲆΔⲆ;
      if (world.time) {
        this.ⲆⵠⵠΔ.fade(0, v2802 * this.ᐃⵠⲆⲆⵠⵠⵠ, this.ᐃᐃᐃⵠⵠᐃⲆ, this.ᐃᐃΔ);
        this.ⲆⵠⵠΔ.play(this.ᐃᐃΔ);
        if (this.ⲆⵠⵠΔ.playing(this.Δⵠⵠ)) {
          var v2812 = v2802 * this.ⲆⵠⵠΔ.volume(this.Δⵠⵠ);
          this.ⲆⵠⵠΔ.fade(v2812, 0, this.ᐃᐃᐃⵠⵠᐃⲆ, this.Δⵠⵠ);
        }
      } else {
        this.ⲆⵠⵠΔ.fade(0, this.ᐃⵠⲆⲆⵠⵠⵠ * v2802, this.ᐃᐃᐃⵠⵠᐃⲆ, this.Δⵠⵠ);
        this.ⲆⵠⵠΔ.play(this.Δⵠⵠ);
        if (this.ⲆⵠⵠΔ.playing(this.ᐃᐃΔ)) {
          v2812 = v2802 * this.ⲆⵠⵠΔ.volume(this.ᐃᐃΔ);
          this.ⲆⵠⵠΔ.fade(v2812, 0, this.ᐃᐃᐃⵠⵠᐃⲆ, this.ᐃᐃΔ);
        }
      }
    };
    this.check = function (p1720) {
      if (this.ⲆᐃⲆΔΔⵠⲆ) {
        if (Δᐃᐃ.ⲆᐃΔⲆⵠΔᐃ(p1720, this.ⵠᐃⲆᐃΔᐃΔᐃᐃ)) {
          if (!v3031.transition && world.ⲆᐃⲆⵠᐃ.now < 460000) {
            if (world.time) {
              if (!this.ⲆⵠⵠΔ.playing(this.ᐃᐃΔ)) {
                this.ΔⵠΔΔⲆᐃΔ.d -= v3064;
                if (this.ΔⵠΔΔⲆᐃΔ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ⲆⵠⵠΔ.playing(this.Δⵠⵠ)) {
              this.ΔⵠΔΔⲆᐃΔ.d -= v3064;
              if (this.ΔⵠΔΔⲆᐃΔ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⲆᐃⲆΔΔⵠⲆ = 0;
          if (this.ⲆⵠⵠΔ.playing(this.ᐃᐃΔ)) {
            var v2813 = this.ⲆⵠⵠΔ.volume(this.ᐃᐃΔ) * v2802;
            this.ⲆⵠⵠΔ.fade(v2813, 0, this.ᐃᐃᐃⵠⵠᐃⲆ, this.ᐃᐃΔ);
          }
          if (this.ⲆⵠⵠΔ.playing(this.Δⵠⵠ)) {
            v2813 = v2802 * this.ⲆⵠⵠΔ.volume(this.Δⵠⵠ);
            this.ⲆⵠⵠΔ.fade(v2813, 0, this.ᐃᐃᐃⵠⵠᐃⲆ, this.Δⵠⵠ);
          }
        }
      } else if (Δᐃᐃ.ⲆᐃΔⲆⵠΔᐃ(p1720, this.ⲆᐃΔⲆⵠΔᐃ)) {
        this.ⲆᐃⲆΔΔⵠⲆ = 1;
        if (!v3031.transition && world.ⲆᐃⲆⵠᐃ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ⵠᐃᐃ = function (p1721, p1722) {
      var v2814;
      var v2815;
      v2814 = p1721.x < this.source.x ? v3031.ⵠᐃⵠΔⵠᐃᐃ(this.source.x) : this.source.ΔⵠⵠΔΔΔΔ < p1721.x ? v3031.ⵠᐃⵠΔⵠᐃᐃ(this.source.ΔⵠⵠΔΔΔΔ) : p1722.x;
      v2815 = p1721.y < this.source.y ? v3031.ⵠᐃᐃⵠⵠⲆⲆ(this.source.y) : this.source.ⵠΔΔⵠᐃ < p1721.y ? v3031.ⵠᐃᐃⵠⵠⲆⲆ(this.source.ⵠΔΔⵠᐃ) : p1722.y;
      this.ⲆⵠⵠΔ.pos(v2814, v2815, -0.5, this.ᐃᐃΔ);
      this.ⲆⵠⵠΔ.pos(v2814, v2815, -0.5, this.Δⵠⵠ);
    };
  }
  ᐃΔᐃΔⵠ = {
    ⵠᐃᐃⲆᐃΔⲆ: 100,
    ΔⲆΔΔᐃⲆᐃᐃᐃ: 0.2,
    ⵠΔΔⲆΔⲆⵠᐃΔ: 0.4,
    ⵠⲆᐃᐃⲆᐃᐃ: 4,
    ⵠⵠΔⵠⲆⲆⲆ: 100,
    ΔⵠⵠΔΔ: 2,
    ⵠⲆⵠⲆⵠⵠⲆⲆΔ: 0.2,
    ΔΔΔⵠⵠᐃⵠⲆⲆ: 0.2,
    ⲆᐃⵠⵠΔⵠⲆ: 2,
    ⲆⲆⲆⲆΔΔΔ: 100,
    ⲆᐃᐃⵠⲆᐃⵠ: 0,
    ⵠⲆΔᐃⲆᐃΔ: 3,
    ᐃᐃΔᐃΔⲆᐃ: 300,
    ΔᐃᐃᐃΔᐃΔ: 1
  };
  function f514(p1723, p1724, p1725) {
    this.ⵠΔⲆⵠΔΔⵠ = p1723;
    this.c = 0;
    this.ⲆⵠⵠΔ = p1724;
    this.ᐃᐃⵠΔᐃ = p1725;
    this.max = p1725.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var v2816 = this.ᐃᐃⵠΔᐃ[this.c];
      this.ⵠΔⲆⵠΔΔⵠ.ⵠᐃᐃΔΔⵠⵠ(this.ⲆⵠⵠΔ, v2816);
      this.ⲆⵠⵠΔ.play(v2816);
    };
  }
  function f515(p1726) {
    this.ᐃᐃⵠᐃⵠⵠΔ = 1;
    this.ᐃᐃⵠⵠ = 0;
    this.mode = -1;
    this.ⵠⲆᐃⲆΔ = v3031.sample.ⵠⲆᐃⲆΔ[p1726];
    this.ⵠⵠᐃⵠⲆⲆΔ = v3031.sample.ⵠⵠᐃⵠⲆⲆΔ[p1726];
    this.ⲆΔΔᐃΔᐃΔ = v3031.sample.ⲆΔΔᐃΔᐃΔ[p1726];
    this.ᐃⲆΔⲆΔΔᐃ = v3031.sample.ᐃⲆΔⲆΔΔᐃ[p1726];
    this.ⵠⵠⵠΔᐃⵠΔ = new f514(this, v2807.ΔΔⵠⵠⵠᐃᐃ.ⵠⲆΔⲆᐃ, v3031.ⲆⲆᐃΔΔⲆΔ.ⵠⵠⵠΔᐃⵠΔ[p1726]);
    this.ΔⲆΔᐃΔ = new f514(this, v2807.ⲆᐃΔᐃΔⲆᐃ.ⵠⲆΔⲆᐃ, v3031.ⲆⲆᐃΔΔⲆΔ.ΔⲆΔᐃΔ[p1726]);
    this.ᐃⵠΔᐃⲆ = new f514(this, v2807.ⲆΔⵠᐃⲆᐃΔ.ⵠⲆΔⲆᐃ, v3031.ⲆⲆᐃΔΔⲆΔ.ᐃⵠΔᐃⲆ[p1726]);
    this.ΔⵠⵠⲆⲆ = p1726;
    this.x = 0;
    this.y = 0;
    this.ΔⲆⵠⲆᐃ = 0;
    this.ⲆⲆᐃΔⲆ = ᐃΔᐃΔⵠ.ΔⲆᐃΔⲆⲆΔⲆΔ;
    this.ᐃΔⵠⲆ = {
      x: 0,
      y: 0
    };
    this.ᐃⲆⵠᐃΔ = v2807.ⲆΔᐃᐃⲆΔⲆ.ⵠⲆΔⲆᐃ;
    this.ⵠⵠᐃΔⵠΔⵠΔᐃ = function (p1727) {
      if (p1727 === 1) {
        this.ⵠⵠⵠΔᐃⵠΔ.play();
      } else if (p1727 === 2) {
        this.ΔⲆΔᐃΔ.play();
      } else if (p1727 === 3) {
        this.ᐃⵠΔᐃⲆ.play();
      }
    };
    this.ᐃᐃⵠⲆⵠᐃⲆ = function (p1728) {
      if (p1728.ⵠᐃΔᐃⵠⲆΔ > 0) {
        return ᐃΔᐃΔⵠ.ΔⵠⵠΔΔ;
      } else if (p1728.ΔΔΔⲆⵠΔⵠ > 0) {
        return ᐃΔᐃΔⵠ.ΔᐃᐃᐃΔᐃΔ;
      } else if (p1728.ΔⵠΔⲆⲆ > 0 || p1728.ᐃⵠᐃⵠᐃ > 0) {
        return ᐃΔᐃΔⵠ.ⵠⲆΔᐃⲆᐃΔ;
      } else {
        return ᐃΔᐃΔⵠ.ⲆᐃᐃⵠⲆᐃⵠ;
      }
    };
    this.ΔᐃΔⲆⵠ = function (p1729) {
      this.ᐃᐃⵠᐃⵠⵠΔ = 0;
      this.ᐃᐃⵠⵠ = p1729;
      var v2817 = world.fast_units[p1729];
      v2817.ΔⵠⵠⲆⲆ = this.ΔⵠⵠⲆⲆ;
      this.mode = this.ᐃᐃⵠⲆⵠᐃⲆ(v2817);
      this.ᐃΔⵠⲆ.x = v2817.x;
      this.ᐃΔⵠⲆ.y = v2817.y;
    };
    this.ΔΔΔᐃᐃⵠⲆ = function () {
      this.ᐃᐃⵠᐃⵠⵠΔ = 1;
      this.mode = -1;
      this.ᐃⲆⵠᐃΔ.stop(this.ⵠⲆᐃⲆΔ);
      this.ᐃⲆⵠᐃΔ.stop(this.ⵠⵠᐃⵠⲆⲆΔ);
      this.ᐃⲆⵠᐃΔ.stop(this.ⲆΔΔᐃΔᐃΔ);
      this.ᐃⲆⵠᐃΔ.stop(this.ᐃⲆΔⲆΔΔᐃ);
    };
    this.fade = function (p1730, p1731) {
      var v2818 = this.ᐃⲆⵠᐃΔ.volume(p1730) * v2803;
      this.ᐃⲆⵠᐃΔ.fade(v2818, 0, p1731, p1730);
    };
    this.ⵠᐃᐃΔΔⵠⵠ = function (p1732, p1733) {
      if (this.ΔⲆⵠⲆᐃ && this.ΔⵠⵠⲆⲆ) {
        p1732.pos(this.x, this.y, -0.5, p1733);
      }
    };
    this.ⵠⲆΔΔᐃ = function (p1734, p1735, p1736, p1737, p1738, p1739, p1740) {
      this.ⲆⲆᐃΔⲆ = p1739;
      if (p1737 && this.mode === p1738) {
        var v2819 = v2803 * this.ᐃⲆⵠᐃΔ.volume(p1734);
        if (this.ΔⲆⵠⲆᐃ) {
          var v2820 = v2803 * (Math.random() * p1736 + p1735);
          this.ᐃⲆⵠᐃΔ.fade(v2819, v2820, p1740, p1734);
        } else {
          this.ᐃⲆⵠᐃΔ.fade(v2819, 0, p1740, p1734);
        }
      } else if (p1738 != this.mode && this.ΔⲆⵠⲆᐃ) {
        this.ᐃⲆⵠᐃΔ.fade(0, (p1735 + p1736) * v2803, p1740, p1734);
      } else if (this.ΔⲆⵠⲆᐃ) {
        v2819 = this.ᐃⲆⵠᐃΔ.volume(p1734) * v2803;
        v2820 = (Math.random() * p1736 + p1735) * v2803;
        this.ᐃⲆⵠᐃΔ.fade(v2819, v2820, p1740, p1734);
      }
      this.ⵠᐃᐃΔΔⵠⵠ(this.ᐃⲆⵠᐃΔ, p1734);
      this.ᐃⲆⵠᐃΔ.play(p1734);
    };
    this.ⵠᐃᐃ = function () {
      var v2821 = world.fast_units[this.ᐃᐃⵠⵠ];
      this.ⲆⲆᐃΔⲆ -= v3064;
      if (!(this.ⲆⲆᐃΔⲆ > 0)) {
        var v2822 = 0;
        if (this.ᐃΔⵠⲆ.x != v2821.x || v2821.y != this.ᐃΔⵠⲆ.y) {
          if (!this.ΔⲆⵠⲆᐃ) {
            v2822 = 1;
            this.ΔⲆⵠⲆᐃ = 1;
          }
          this.x = v3031.ΔΔᐃᐃᐃᐃΔ(v2821.x, ᐃΔᐃΔⵠ.ⲆᐃⵠⵠΔⵠⲆ);
          this.y = v3031.ⲆⵠΔΔⵠᐃⲆ(v2821.y, ᐃΔᐃΔⵠ.ⲆᐃⵠⵠΔⵠⲆ);
        } else if (this.ΔⲆⵠⲆᐃ) {
          v2822 = 1;
          this.ΔⲆⵠⲆᐃ = 0;
        }
        this.ᐃΔⵠⲆ.x = v2821.x;
        this.ᐃΔⵠⲆ.y = v2821.y;
        ᐃⲆⵠΔ = this.ᐃᐃⵠⲆⵠᐃⲆ(v2821);
        if (this.mode != ᐃⲆⵠΔ) {
          if (this.mode === ᐃΔᐃΔⵠ.ΔᐃᐃᐃΔᐃΔ) {
            this.fade(this.ⵠⲆᐃⲆΔ, ᐃΔᐃΔⵠ.ᐃᐃΔᐃΔⲆᐃ);
          } else if (this.mode === ᐃΔᐃΔⵠ.ΔⵠⵠΔΔ) {
            this.fade(this.ⵠⵠᐃⵠⲆⲆΔ, ᐃΔᐃΔⵠ.ⵠᐃᐃⲆᐃΔⲆ);
          } else if (this.mode === ᐃΔᐃΔⵠ.ⲆᐃᐃⵠⲆᐃⵠ) {
            this.fade(this.ⲆΔΔᐃΔᐃΔ, ᐃΔᐃΔⵠ.ⲆⲆⲆⲆΔΔΔ);
          } else if (ᐃΔᐃΔⵠ.ⵠⲆΔᐃⲆᐃΔ === this.mode) {
            this.fade(this.ᐃⲆΔⲆΔΔᐃ, ᐃΔᐃΔⵠ.ⵠⵠΔⵠⲆⲆⲆ);
          }
        }
        if (ᐃΔᐃΔⵠ.ΔᐃᐃᐃΔᐃΔ === ᐃⲆⵠΔ) {
          this.ⵠⲆΔΔᐃ(this.ⵠⲆᐃⲆΔ, 0.08, 0.3, v2822, ᐃⲆⵠΔ, ᐃΔᐃΔⵠ.ⵠΔΔⲆΔⲆⵠᐃΔ, ᐃΔᐃΔⵠ.ᐃᐃΔᐃΔⲆᐃ);
        } else if (ᐃⲆⵠΔ === ᐃΔᐃΔⵠ.ΔⵠⵠΔΔ) {
          this.ⵠⲆΔΔᐃ(this.ⵠⵠᐃⵠⲆⲆΔ, 0.2, 0.3, v2822, ᐃⲆⵠΔ, ᐃΔᐃΔⵠ.ΔΔΔⵠⵠᐃⵠⲆⲆ, ᐃΔᐃΔⵠ.ⵠᐃᐃⲆᐃΔⲆ);
        } else if (ᐃΔᐃΔⵠ.ⲆᐃᐃⵠⲆᐃⵠ === ᐃⲆⵠΔ) {
          this.ⵠⲆΔΔᐃ(this.ⲆΔΔᐃΔᐃΔ, 0.3, 0.6, v2822, ᐃⲆⵠΔ, ᐃΔᐃΔⵠ.ΔⲆΔΔᐃⲆᐃᐃᐃ, ᐃΔᐃΔⵠ.ⲆⲆⲆⲆΔΔΔ);
        } else if (ᐃⲆⵠΔ === ᐃΔᐃΔⵠ.ⵠⲆΔᐃⲆᐃΔ) {
          this.ⵠⲆΔΔᐃ(this.ᐃⲆΔⲆΔΔᐃ, 0.1, 0.25, v2822, ᐃⲆⵠΔ, ᐃΔᐃΔⵠ.ⵠⲆⵠⲆⵠⵠⲆⲆΔ, ᐃΔᐃΔⵠ.ⵠⵠΔⵠⲆⲆⲆ);
        }
        this.mode = ᐃⲆⵠΔ;
      }
    };
    this.check = function () {
      var v2823 = world.fast_units[this.ᐃᐃⵠⵠ];
      return !!v2823 || (this.ΔΔΔᐃᐃⵠⲆ(v2823), false);
    };
  }
  function f516(p1741, p1742, p1743, p1744, p1745, p1746) {
    vVVVUndefined54(vVVVVVUndefined582, p1741, p1742, p1743, p1744, p1745, p1746);
    const vF53 = function (p1747, p1748) {
      vVVVUndefined55(vVVVVVUndefined582, p1747, p1748);
      const vF522 = f52(v372[0], v372[1], v372[0], v372[1]);
      f80(v372[0], v372[1]);
      return ~(vF522 & 36485) & 36485 | ~(vF522 & 36485) & vF522;
    }(v372[0], v372[1]);
    const vF512 = f512(v372[2], v372[3], v372[4], v372[5], v372[0]);
    return (24 << ((vF53 ^ vF512) >> 16 & 255)) + (8 << ((vF53 ^ vF512) >> 8 & 255)) + (16 << ((vF53 ^ vF512) >> 24 & 255)) + (0 << ((vF53 ^ vF512) & 255));
  }
  function f517(p1749, p1750, p1751, p1752, p1753) {
    const v2824 = ~(p1749 & 28320) & (p1749 | 28320);
    const v2825 = ((p1750 + 8476) * 214013 + 2531011) % 4294967296;
    return ((14862 + (f492(v2824, v2825, (p1751 | 16501) & ~(p1751 & 16501), p1752 ^ 13007, (24 << (p1753 >> 16 & 255)) + (0 << (p1753 >> 8 & 255)) + (16 << (p1753 >> 24 & 255)) + (8 << (p1753 & 255))) ^ function (p1754, p1755) {
      const v2826 = p1754 ^ 29330;
      const v2827 = ~(p1755 & 10700) & 10700 | ~(p1755 & 10700) & p1755;
      const vF479 = f479(v2826, v2827);
      (function (p1756, p1757, p1758, p1759) {
        const v2828 = p1758 ^ 48460;
        const v2829 = (0 << (p1759 >> 16 & 255)) + (8 << (p1759 & 255)) + (24 << (p1759 >> 24 & 255)) + (16 << (p1759 >> 8 & 255));
        const vF4792 = f479((p1756 | 24279) & ~(p1756 & 24279), ~(p1757 & 15170) & p1757 | ~(p1757 & 15170) & 15170);
        f479(v2828, v2829);
      })(v2826, v2827, v2826, v2827);
      return ~(vF479 & 27473) & (vF479 | 27473);
    }(v2824, v2825))) * 1664525 + 1013904223) % 4294967296;
  }
  ⲆⲆⵠΔΔΔᐃ = 0;
  document.getElementById("version").innerHTML = "52.3";
  var v2830 = 1 + Math.random();
  var v2831 = [];
  var v2832 = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = v585.ΔΔⲆⲆⵠ[v2832.time];
  v2832.items.push(new f435(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  v2832.items.push(new f435(105, 0, 0, 0, 0, 0, 0, 5));
  v2832.items.push(new f435(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  v2832.items.push(new f435(105, 0, 0, 0, 0, 0, 0, 5));
  var v2833;
  var world;
  var user;
  var scoreboard;
  var v2837 = new function () {
    var vThis5 = this;
    this.ᐃᐃⲆΔ = null;
    this.ⲆⵠⵠΔᐃ = 0;
    this.ΔⲆⲆᐃᐃⵠⵠⲆΔ = -92;
    this.ᐃᐃⲆᐃⵠⲆⵠᐃⲆ = 6;
    this.ⲆⲆΔⲆⵠⲆⵠΔᐃ = 116;
    var v2838 = 88;
    if (v2838 > 1) {
      v2838 = 88;
    }
    this.ⲆⲆΔⲆⵠⲆⵠΔᐃ.ⵠᐃᐃⲆᐃⲆⵠⲆⵠ = 7;
    this.ᐃᐃⲆΔⲆⲆᐃ = 54684;
    var v2839 = 204;
    if (v2839 === 7) {
      v2839 = 133;
    }
    this.ⵠΔⲆⵠⲆ = [];
    this.ⲆⵠⲆⵠᐃⲆⲆ = 60928;
    this.ᐃⵠΔⲆⵠᐃⵠ = {};
    this.ᐃⵠⵠⵠⵠⲆΔ = {};
    this.ⵠΔΔⲆΔΔᐃⲆⲆ = 207;
    this.ᐃⲆΔⵠΔⲆⲆ = 140;
    this.ᐃⲆΔⵠΔⲆⲆ.ᐃΔΔⲆΔᐃⵠΔᐃ = 7;
    this.ΔⲆⵠⵠΔΔΔ = -97;
    this.ᐃᐃⲆⲆⵠⵠⵠⵠⲆ = vVV142;
    this.ⲆⲆⲆⵠⵠ = [[], [], [], [], [], [], [], [], []];
    this.ⲆⲆⵠⲆΔᐃⲆΔⲆ = {};
    this.ⲆⵠΔΔΔᐃΔⲆⲆ = 242;
    this.ΔΔΔⵠᐃΔΔⵠΔ = 110;
    this.ⲆⵠΔΔΔᐃΔⲆⲆ;
    this.ΔΔΔⵠᐃΔΔⵠΔ;
    this.ⲆⲆⵠⲆΔᐃⲆΔⲆ.ᐃᐃᐃΔⵠⵠᐃΔΔ = 3;
    this.ΔⵠΔⲆᐃⲆⲆΔⲆ = 5658;
    this.ⲆⲆᐃⵠᐃⵠᐃ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ⲆᐃᐃΔⲆᐃΔ = 253;
    this.ⲆᐃᐃⲆⵠΔΔᐃⲆ = 213;
    this.ᐃΔΔᐃⲆᐃΔⵠΔ = 233;
    this.ⲆᐃᐃⲆⵠΔΔᐃⲆ;
    this.ᐃΔΔᐃⲆᐃΔⵠΔ;
    this.ⲆᐃᐃΔⲆᐃΔ.ΔᐃᐃᐃᐃΔⵠⲆᐃ = 12;
    this.ΔᐃΔᐃⲆΔⵠⲆᐃ = 39;
    this.ΔΔᐃᐃⲆᐃⵠⵠⲆ = 33;
    this.ΔᐃΔᐃⲆΔⵠⲆᐃ;
    this.ΔΔᐃᐃⲆᐃⵠⵠⲆ;
    this.ⲆᐃⵠⵠⲆⵠΔ = 2703360;
    this.ⵠΔⵠΔΔ = 0;
    var v2840 = 112;
    this.ᐃᐃᐃⲆⵠᐃᐃΔΔ = 84;
    this.ᐃᐃⵠΔΔᐃⲆⲆᐃ = vVVV144;
    this.ⲆⲆⲆⵠΔΔΔ = 150;
    this.ⲆⲆⲆⵠΔΔΔ;
    this.ᐃᐃᐃⲆⵠᐃᐃΔΔ;
    this.ΔⵠⲆⲆᐃΔⵠᐃⲆ = -110;
    if (v2840 >= 3) {
      v2840 = 166;
    }
    this.ᐃⵠΔᐃⵠⲆᐃ = 175;
    this.ᐃⵠΔᐃⵠⲆᐃ.ⲆⵠⵠΔᐃⲆⵠ = 1;
    var v2841 = 184;
    function f518(p1760) {
      let v2842 = p1760.name || p1760.a;
      if (p1760.auto) {
        return v2842;
      } else {
        return v2842 + " [" + p1760.nu + " " + v751[2024] + "]";
      }
    }
    if (v2841 == 2) {
      v2841 = 41;
    }
    this.ΔᐃΔᐃΔᐃᐃ = 0;
    this.ⲆⲆⵠⲆⲆⲆΔ = 190;
    this.ᐃⵠᐃᐃΔΔᐃ = 168;
    this.ⲆⲆⵠⲆⲆⲆΔ;
    this.ᐃⵠᐃᐃΔΔᐃ;
    this.ᐃⵠⲆⵠⲆᐃⲆ = function (p1761) {
      if (v2247 !== undefined) {
        vThis5.ⵠΔⲆⵠⲆ.push({
          a: v2247.name,
          gm: v2247.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        p1761();
        return;
      }
      fetch(v2251 + "/list", {
        method: "GET"
      }).then(function (p1762) {
        if (p1762.ok) {
          p1762.json().then(function (p1763) {
            vThis5.ⵠΔⲆⵠⲆ = [];
            vThis5.ᐃⵠⵠⵠⵠⲆΔ = {};
            for (let v2843 in v2257.ΔΔᐃΔᐃΔⵠ) {
              const v2844 = v2257.ΔΔᐃΔᐃΔⵠ[v2843];
              vThis5.ⵠΔⲆⵠⲆ.push({
                a: "Auto Select",
                gm: v2844,
                m: 100,
                nu: 0,
                auto: vVVVV632
              });
            }
            var v2845 = 3;
            var v2846 = 4;
            for (let v2847 = 0; v2847 < p1763.length; v2847++) {
              const v2848 = p1763[v2847];
              const v2849 = v2848.n;
              const v2850 = v2848.l;
              const v2851 = v2848.p;
              const v2852 = [];
              vThis5.ᐃⵠΔⲆⵠᐃⵠ[v2849] = v2852;
              const v2853 = [];
              for (let v2854 = 0; v2851.length > v2854; v2854++) {
                const v2855 = v2849 + v2851[v2854][0];
                v2853.push(v2855);
                v2852.push(v2855);
              }
              for (let v2856 = 0; v2850.length > v2856; v2856++) {
                const v2857 = v2850[v2856];
                let v2858;
                let v2859 = v2257.ΔΔᐃΔᐃΔⵠ[v2857[2]];
                let v2860 = v2859 + v2857[1];
                v2858 = v2859 in vThis5.ᐃⵠⵠⵠⵠⲆΔ ? ++vThis5.ᐃⵠⵠⵠⵠⲆΔ[v2859] : vThis5.ᐃⵠⵠⵠⵠⲆΔ[v2859] = 1;
                if (v2860 in vThis5.ᐃⵠⵠⵠⵠⲆΔ) {
                  ⵠⵠⵠᐃⵠΔᐃ = ++vThis5.ᐃⵠⵠⵠⵠⲆΔ[v2860];
                } else {
                  ⵠⵠⵠᐃⵠΔᐃ = vThis5.ᐃⵠⵠⵠⵠⲆΔ[v2860] = 1;
                }
                vThis5.ⵠΔⲆⵠⲆ.push({
                  name: v2857[v2846],
                  a: v2257.ΔⵠᐃⵠᐃⲆⵠⲆⲆ[v2857[1]] + " " + ⵠⵠⵠᐃⵠΔᐃ,
                  r: v2857[1],
                  gm: v2257.ΔΔᐃΔᐃΔⵠ[v2857[2]],
                  idx: v2858,
                  m: 100,
                  nu: v2857[v2845],
                  id: v2857[1] + v2857[0],
                  p: v2853
                });
              }
            }
            const v2861 = [];
            const v2862 = [];
            const v2863 = [];
            for (let v2864 = 0; v2864 < vThis5.ⵠΔⲆⵠⲆ.length; v2864++) {
              const v2865 = vThis5.ⵠΔⲆⵠⲆ[v2864];
              if (!v2865.auto) {
                if (v2865.gm === v2257.ΔΔᐃΔᐃΔⵠ[6]) {
                  if (typeof v2865.name === "string" && (v2865.name.indexOf("Private Server") !== -1 || v2865.nu > 95)) {
                    v2861.push(v2865);
                  } else {
                    v2863.push(v2865);
                  }
                  v2862.push(v2864);
                }
              }
            }
            const v2866 = [];
            v2866.push(...v2863.sort(function (p1764, p1765) {
              return p1765.nu - p1764.nu;
            }));
            v2866.push(...v2861.sort(function (p1766, p1767) {
              return (p1767.nu < 95 ? p1767.nu : 0) - (p1766.nu < 95 ? p1766.nu : 0);
            }));
            for (let v2867 = 0; v2867 < v2862.length; v2867++) {
              const v2868 = v2862[v2867];
              const v2869 = v2866[v2867];
              v2869.idx = v2867 + 1;
              vThis5.ⵠΔⲆⵠⲆ[v2868] = v2869;
            }
            p1761();
          });
        } else {
          vWindow.setTimeout(function () {
            vThis5.ᐃⵠⲆⵠⲆᐃⲆ(p1761);
          }, 3000);
        }
      });
    };
    this.ⲆⲆᐃΔⲆⵠᐃᐃⵠ = function (p1768) {
      var v2870 = [];
      for (var v2871 = 0; p1768.length > v2871; v2871++) {
        if (p1768[v2871].a.indexOf(vV549) !== -1) {
          v2870.push(v2871);
        }
      }
      if (v2870.length === 0) {
        return 0;
      } else {
        return v2870[Math.floor(Math.random() * v2870.length)];
      }
    };
    this.ΔⲆᐃᐃΔⲆⵠ = function (p1769) {
      var v2872 = 0;
      for (var v2873 = 0; p1769.length > v2873; v2873++) {
        v2872 += p1769[v2873].nu;
      }
      var v2874 = document.getElementById("servselect");
      if (v2837.ⲆⲆᐃⵠᐃⵠᐃ[v2837.ⵠΔⵠΔΔ] === -1) {
        v2837.ⲆⲆᐃⵠᐃⵠᐃ[v2837.ⵠΔⵠΔΔ] = v2874.selectedIndex = v2837.ⲆⲆᐃΔⲆⵠᐃᐃⵠ(p1769);
      } else {
        v2874.selectedIndex = v2837.ⲆⲆᐃⵠᐃⵠᐃ[v2837.ⵠΔⵠΔΔ];
      }
      var v2875 = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + p1769[v2874.selectedIndex].a + (p1769[v2874.selectedIndex].nu > 0 ? " [" + p1769[v2874.selectedIndex].nu + " " + v751[2024] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + v751[2023] + " (" + this.ΔⵠΔΔⵠΔΔ + ") " + v751[2025] + "</li>";
      for (v2873 = 0; v2873 < p1769.length; v2873++) {
        v2875 += "<li role=\"option\">" + f518(p1769[v2873]) + "</li>\n";
      }
      v2875 += "<li role=\"option\" id=\"selectDisabled\">(" + v2872 + ") " + v751[2026] + "</li>";
      v2875 += "</div>";
      v2874.innerHTML = v2875;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var v2876 = $(this).text();
        var v2877 = -1;
        for (var v2878 = v2837.ⲆⲆⲆⵠⵠ[v2837.ⵠΔⵠΔΔ], v2879 = 0; v2878.length > v2879; v2879++) {
          if (v2876 === f518(v2878[v2879])) {
            v2877 = v2879;
            break;
          }
        }
        if (v2877 !== -1) {
          document.getElementById("servselect").selectedIndex = v2877;
          v2837.ⲆⲆᐃⵠᐃⵠᐃ[v2837.ⵠΔⵠΔΔ] = v2877;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(v2876);
        }
      });
    };
    this.ΔⵠΔΔⵠΔΔ = 0;
    this.ΔΔⲆΔΔᐃⵠᐃᐃ = function () {
      this.ΔⵠΔΔⵠΔΔ = 0;
      for (var v2880 = 0; v2837.ⵠΔⲆⵠⲆ.length > v2880; v2880++) {
        if (this.ⵠΔⲆⵠⲆ[v2880].gm == "experimental") {
          this.ⲆⲆⲆⵠⵠ[7].push(this.ⵠΔⲆⵠⲆ[v2880]);
        } else if (this.ⵠΔⲆⵠⲆ[v2880].gm == "zombies") {
          this.ⲆⲆⲆⵠⵠ[2].push(this.ⵠΔⲆⵠⲆ[v2880]);
        } else if (this.ⵠΔⲆⵠⲆ[v2880].gm == "community") {
          this.ⲆⲆⲆⵠⵠ[6].push(this.ⵠΔⲆⵠⲆ[v2880]);
        } else if (this.ⵠΔⲆⵠⲆ[v2880].gm == "forest") {
          this.ⲆⲆⲆⵠⵠ[4].push(this.ⵠΔⲆⵠⲆ[v2880]);
        } else if (this.ⵠΔⲆⵠⲆ[v2880].gm == "battle-royale") {
          this.ⲆⲆⲆⵠⵠ[5].push(this.ⵠΔⲆⵠⲆ[v2880]);
        } else if (this.ⵠΔⲆⵠⲆ[v2880].gm == "vampires") {
          this.ⲆⲆⲆⵠⵠ[3].push(this.ⵠΔⲆⵠⲆ[v2880]);
        } else {
          this.ⲆⲆⲆⵠⵠ[0].push(this.ⵠΔⲆⵠⲆ[v2880]);
        }
        this.ΔⵠΔΔⵠΔΔ += this.ⵠΔⲆⵠⲆ[v2880].nu;
      }
      for (v2880 = 0; v2880 < this.ⲆⲆⲆⵠⵠ.length; v2880++) {
        if (this.ⲆⲆⲆⵠⵠ[v2880].length === 0) {
          this.ⲆⲆⲆⵠⵠ[v2880].push({
            a: v751[2027],
            ᐃᐃⲆⲆᐃⵠⲆⲆⵠ: 0,
            ΔΔ: "127.0.0.1",
            ᐃᐃⵠ: 80
          });
        }
      }
      this.ΔⲆᐃᐃΔⲆⵠ(this.ⲆⲆⲆⵠⵠ[0]);
      this.ⲆⲆⵠᐃᐃᐃⵠ = function (p1770) {
        v2837.ⵠΔⵠΔΔ = p1770;
        v2837.ΔⲆᐃᐃΔⲆⵠ(v2837.ⲆⲆⲆⵠⵠ[v2837.ⵠΔⵠΔΔ]);
        v2837.ΔⲆᐃᐃΔⲆⵠ(v2837.ⲆⲆⲆⵠⵠ[v2837.ⵠΔⵠΔΔ]);
        document.getElementById("servselect").selectedIndex = v2837.ⵠΔⵠΔΔ;
      };
    };
    this.ⲆⵠⵠⲆᐃΔⲆ = 0;
    this.ⲆⵠΔΔΔᐃᐃ = 0;
    this.ΔⵠⲆᐃΔΔⵠ = null;
    this.timeout = function () {
      vThis5.ⲆⵠΔΔΔᐃᐃ++;
      vThis5.ᐃᐃⲆΔ.close();
      if (vThis5.ⲆⵠΔΔΔᐃᐃ > 3) {
        v3081 = 1;
        v2833.ᐃⵠΔΔⵠⲆᐃⵠⲆ = v2256.ⵠᐃᐃΔᐃⲆⲆⵠⲆ;
        vThis5.ᐃⲆᐃΔⵠ(v751[2000]);
        v2833.waiting = false;
        if (user.reconnect.enabled) {
          game.ᐃᐃΔⵠⵠ(v2833.ⲆΔᐃᐃⲆ);
        }
      } else if (user.ΔⲆᐃⵠΔⵠⲆ === vVVVUndefined113 || user.ᐃΔᐃᐃΔⵠΔ === undefined || user.ᐃⵠᐃΔⲆⲆⲆ === undefined || user.ΔⲆⵠⲆⲆΔⵠ === vVVVVVVUndefined14) {
        v2833.ⲆⵠⲆⵠⵠΔⵠ(function () {
          vThis5.ⵠᐃΔⲆⵠⲆΔ();
        }, 1);
      } else {
        vThis5.ⵠᐃΔⲆⵠⲆΔ();
      }
    };
    this.ⲆⵠᐃⲆΔᐃΔ = function (p1771) {
      if (this.ⲆⵠⵠΔᐃ == this.ᐃᐃⲆΔ.ⲆⵠⵠΔᐃ) {
        this.ⲆⵠⵠΔᐃ++;
        this.ᐃⲆᐃΔⵠ(v751[2001] + p1771);
        game.ᐃᐃΔⵠⵠ(v2833.ⲆΔᐃᐃⲆ);
      }
    };
    this.ⲆΔⲆⲆᐃᐃΔⵠΔ = function () {
      this.ᐃⲆᐃΔⵠ("You speak too much");
    };
    this.ⵠⵠⲆᐃΔΔΔⲆΔ = function () {
      clearTimeout(this.ΔⵠⲆᐃΔΔⵠ);
      this.ᐃⲆᐃΔⵠ(v751[2002]);
      v2833.waiting = vVVV143;
    };
    this.ᐃⵠᐃΔⲆΔΔⲆⵠ = function () {
      user.ᐃᐃᐃᐃⲆ.open = false;
    };
    this.ΔΔΔⵠⵠⵠⲆᐃΔ = function () {
      game.ⲆⵠⵠⲆΔᐃⵠ = 0;
    };
    this.ⵠⲆⵠΔⵠⵠⵠΔᐃ = function () {
      game.ΔΔᐃⵠⵠᐃⵠ = 0;
    };
    this.ⲆΔΔΔⵠᐃᐃᐃΔ = function (p1772) {
      user.ⲆⵠⲆⲆⲆ.ⲆⲆΔⲆΔ = p1772;
      if (world.ⲆᐃΔⵠᐃ > -300) {
        if (p1772 === 0) {
          this.ᐃⲆᐃΔⵠ(v751[2040]);
        } else {
          this.ᐃⲆᐃΔⵠ(v751[2041]);
        }
      }
    };
    this.ᐃⲆᐃΔᐃ = function (p1773) {
      user.ᐃⲆᐃΔᐃ = p1773;
    };
    this.ⵠᐃᐃⵠⵠᐃᐃΔᐃ = function (p1774) {
      user.ᐃⲆⵠᐃᐃⵠᐃ = p1774;
    };
    this.ᐃⲆⵠᐃᐃⵠᐃ = function (p1775) {
      user.ⵠⵠᐃⵠΔ.ⲆⲆΔⲆΔ = p1775;
      if (world.ΔⵠΔⲆⲆ > -300) {
        if (p1775 === 0) {
          this.ᐃⲆᐃΔⵠ(v751[2042]);
        } else {
          this.ᐃⲆᐃΔⵠ(v751[2043]);
        }
      }
    };
    this.ΔⲆᐃⵠΔⲆⲆⲆᐃ = function (p1776) {
      if (p1776 === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (p1776 === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (p1776 === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (p1776 === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ⲆⵠΔⲆⵠⲆᐃⲆᐃ = function () {
      game.ⵠΔⲆⵠᐃᐃᐃ = 0;
    };
    this.ⲆⲆᐃΔᐃⲆⲆⲆⵠ = function () {
      game.ⲆⵠᐃⲆⵠᐃⲆ = 0;
    };
    this.ⵠⲆᐃΔᐃⵠⵠⵠᐃ = function () {
      user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ = [];
      user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ = [];
      user.ᐃⵠⲆⲆ.id = -1;
      user.ᐃⵠⲆⲆ.ΔᐃΔⵠⲆⵠⵠ.stop();
      user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ = [];
      user.ⵠⲆⲆᐃ.ⵠⲆⲆᐃᐃ = vVV1422;
      user.ⵠⲆⲆᐃ.ᐃᐃⵠΔᐃΔⲆⲆⲆ = vVV142;
      user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
      user.ⵠⲆⲆᐃ.id = -1;
      user.ⵠⲆⲆᐃ.ᐃΔⲆᐃᐃⵠΔ = false;
      user.ⵠⲆⲆᐃ.ΔᐃⲆΔᐃ = false;
      user.ⵠⲆⲆᐃ.ⵠΔⲆΔⵠ = false;
      user.ⵠⲆⲆᐃ.ⲆᐃΔⲆΔᐃᐃ = vV143;
      user.ⵠⲆⲆᐃ.timeout = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV14, 0, 1, 0, 1, 1);
    };
    this.ᐃⵠΔⲆⲆᐃΔΔⵠ = function () {
      clearTimeout(this.ΔⵠⲆᐃΔΔⵠ);
      this.ᐃⲆᐃΔⵠ();
      v2833.waiting = false;
    };
    this.ᐃΔⲆΔΔᐃΔ = function (p1777) {
      for (var v2881 = 0; v2881 < p1777.length; v2881++) {
        if (typeof p1777[v2881] === "string") {
          p1777[v2881] = Δᐃᐃ.ⵠⵠᐃᐃⵠᐃᐃ(p1777[v2881]);
        }
      }
      user.ⲆⲆᐃΔⵠ.ΔⵠᐃΔⲆ(p1777[1], p1777[2], p1777[3], p1777[4]);
    };
    this.message = function (p1778) {
      this.ᐃⲆᐃΔⵠ(p1778);
    };
    this.ΔⵠⵠΔᐃᐃⲆᐃΔ = function () {
      clearTimeout(this.ΔⵠⲆᐃΔΔⵠ);
      this.ᐃⲆᐃΔⵠ(v751[2039]);
      v2833.waiting = false;
    };
    this.ⲆᐃⵠⲆΔΔⵠΔΔ = function () {
      clearTimeout(this.ΔⵠⲆᐃΔΔⵠ);
      this.ᐃⲆᐃΔⵠ(v751[2038]);
      v2833.waiting = false;
    };
    this.ⲆⲆⵠⲆΔᐃⲆΔᐃ = function () {
      clearTimeout(this.ΔⵠⲆᐃΔΔⵠ);
      this.ᐃⲆᐃΔⵠ(v751[2004]);
      v2833.waiting = vVVVV142;
    };
    this.ⵠᐃⲆᐃᐃⵠⵠⲆΔ = function () {
      user.ᐃⵠⲆⲆ.ΔΔΔⲆⲆᐃⲆ(1, 0);
      game.ⵠⲆΔᐃⲆᐃᐃ();
    };
    this.ᐃⲆΔⵠΔⲆⲆⵠΔ = function (p1779) {
      var v2882 = p1779[1];
      var v2883 = world.players[v2882];
      v2883.ⲆΔⲆⲆ = p1779[2];
      v2883.ⵠᐃΔᐃΔ = p1779[3];
      v2883.ΔΔΔⲆΔⲆᐃ = p1779[4];
      v2883.ⵠΔᐃΔᐃ = p1779[5];
      v2883.ΔⲆⵠΔΔ = p1779[6];
      v2883.ΔⵠΔⲆᐃ = p1779[7];
      v2883.level = p1779[8];
      var v2884 = world.fast_units[v2882 * world.ᐃⲆⵠΔⵠⵠⲆ];
      if (v2884) {
        v2884.ⲆΔⲆⲆ = p1779[2];
        v2884.ⵠᐃΔᐃΔ = p1779[3];
        v2884.ΔΔΔⲆΔⲆᐃ = p1779[4];
        v2884.ⵠΔᐃΔᐃ = p1779[5];
      }
    };
    this.ⵠⲆⲆΔⵠⵠΔⵠΔ = function (p1780) {
      if (p1780 === 47) {
        user.ᐃⵠⲆⲆ.ΔΔΔⲆⲆᐃⲆ(1, 0);
        game.ⵠⲆΔᐃⲆᐃᐃ();
      } else {
        this.ⲆⲆⲆⵠⵠΔΔ([0, p1780, 1]);
      }
      user.ⵠⲆⲆᐃ.ⵠᐃᐃⲆΔⵠⵠ();
    };
    this.ⵠᐃⲆⲆΔᐃΔΔⵠ = function (p1781) {
      user.ⵠⵠⵠⵠΔ.ⲆⲆᐃΔⲆ = 0;
      user.ⵠⲆⲆᐃ.ⲆᐃⲆᐃⲆⲆⵠⲆⲆ(p1781);
    };
    this.ᐃΔᐃⵠⵠΔᐃΔΔ = function (p1782) {
      for (var v2885 = v730[p1782].r, v2886 = 0; v2885.length > v2886; v2886++) {
        if (user.ᐃⵠⲆⲆ.max > user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ.length || user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[v2885[v2886][0]] > 0) {
          var v2887 = Math.floor(v2885[v2886][1] * 0.8);
          if (!v2887) {
            continue;
          }
          this.ⲆⲆⲆⵠⵠΔΔ([0, v2885[v2886][0], v2887]);
        }
      }
      user.ⵠⲆⲆᐃ.ⵠᐃᐃⲆΔⵠⵠ();
    };
    this.ⲆⵠΔⵠⵠᐃΔⲆⲆ = function (p1783) {
      user.ⵠⵠⵠⵠΔ.ⲆⲆᐃΔⲆ = 0;
      user.ⵠⲆⲆᐃ.ⵠΔΔⲆⲆⵠⵠΔⲆ(p1783);
    };
    this.ᐃⲆᐃΔⵠ = function (p1784) {
      if (user.alert.text) {
        if (p1784 !== user.alert.text && p1784 !== user.alert.list[user.alert.list.length - 1]) {
          user.alert.list.push(p1784);
        }
      } else {
        user.alert.text = p1784;
      }
    };
    this.ΔᐃΔᐃⲆΔⵠᐃⲆ = function () {
      this.ᐃⲆᐃΔⵠ(v751[2005]);
    };
    this.ΔᐃⲆᐃⵠⵠⵠⲆᐃ = function () {
      var v2888;
      v2888 = user.Δⵠⵠ == 0 ? v751[2006] : v751[2007] + (user.Δⵠⵠ + 1) + v751[2008];
      this.ᐃⲆᐃΔⵠ(v2888);
      user.Δⵠⵠ++;
    };
    this.ⲆᐃᐃⵠⵠⲆⲆᐃΔ = function () {
      clearTimeout(vThis5.ΔⵠⲆᐃΔΔⵠ);
      user.reconnect.enabled = false;
      user.ⵠᐃⲆΔⲆ = false;
      this.ᐃⲆᐃΔⵠ(v751[2009]);
      game.ᐃᐃΔⵠⵠ(v2833.ⲆΔᐃᐃⲆ);
      this.ᐃᐃⲆΔ.close();
    };
    this.ᐃⲆΔⲆΔᐃⲆⲆⲆ = function () {
      v3081 = 1;
      clearTimeout(this.ΔⵠⲆᐃΔΔⵠ);
      this.ᐃⲆᐃΔⵠ(v751[2010]);
      v2833.waiting = false;
    };
    this.ⲆᐃⵠⲆΔⵠΔΔΔ = function () {
      v3081 = 1;
      clearTimeout(this.ΔⵠⲆᐃΔΔⵠ);
      this.ᐃⲆᐃΔⵠ(v751[2011]);
      v2833.waiting = false;
    };
    this.ΔⲆᐃⲆⲆⲆᐃⵠⵠ = function (p1785) {
      var v2889 = p1785[1];
      var v2890 = world.players;
      v2890[v2889].ᐃⲆᐃⵠⲆ = p1785[2];
      v2890[v2889].ⲆΔⲆⲆ = p1785[3];
      v2890[v2889].ⵠᐃΔᐃΔ = p1785[4];
      v2890[v2889].ΔΔΔⲆΔⲆᐃ = p1785[5];
      v2890[v2889].ⵠΔᐃΔᐃ = p1785[6];
      v2890[v2889].ΔⲆⵠΔΔ = p1785[7];
      v2890[v2889].ΔⵠΔⲆᐃ = p1785[8];
      v2890[v2889].level = p1785[9];
      v2890[v2889].Ⲇⵠⵠᐃᐃ = 0;
      v2890[v2889].ᐃΔⵠΔⵠⵠΔ = null;
      v2890[v2889].label = null;
      v2890[v2889].ΔᐃⲆⵠΔᐃⲆ = null;
      v2890[v2889].ⵠᐃⲆΔⲆ = true;
      if (v2245 === 1) {
        v2890[v2889].ᐃⲆᐃⵠⲆ += "|" + v2889;
      }
    };
    this.ⵠΔΔᐃᐃⵠΔⲆᐃ = function () {
      this.ᐃᐃⲆΔ[v2244](vVWindow[v421].stringify([29]));
    };
    this.ⲆᐃⲆⲆᐃⵠⵠⲆᐃ = function () {
      this.ᐃⲆᐃΔⵠ(v751[2012]);
    };
    this.ΔⵠΔᐃⵠⲆΔ = function () {
      this.ᐃⲆᐃΔⵠ(v751[2013]);
    };
    this.ⵠⲆⵠᐃΔⲆᐃᐃΔ = function (p1786) {
      this.ᐃᐃⲆΔ[v2244](vVVVWindow[v444].stringify([4, p1786]));
      user.ᐃᐃᐃᐃⲆ.open = vVV14;
    };
    this.ᐃᐃᐃᐃΔᐃΔⵠⵠ = function (p1787) {
      for (var v2891 = v2253[p1787 - 1].items, v2892 = 0; v2892 < v2891.length && user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ.length < user.ᐃⵠⲆⲆ.max; v2892++) {
        var v2893 = v2891[v2892][1];
        var v2894 = v2891[v2892][0];
        if (v2891[v2892][1] === 47) {
          user.ᐃⵠⲆⲆ.ΔΔΔⲆⲆᐃⲆ(1, 0);
        } else {
          this.ⲆⲆⲆⵠⵠΔΔ([0, v2893, v2894]);
        }
      }
    };
    this.ⲆⲆⲆⵠⵠΔΔ = function (p1788) {
      for (var v2895 = p1788.length, v2896 = user.ᐃⵠⲆⲆ, v2897 = 1; v2895 > v2897; v2897 += 2) {
        var v2898 = p1788[v2897];
        var v2899 = p1788[v2897 + 1];
        for (var v2900 = 0; v2900 < v2896.ᐃᐃⲆᐃᐃ.length; v2900++) {
          if (v2898 == v2896.ᐃᐃⲆᐃᐃ[v2900].id) {
            v2896.ᐃⵠΔⵠ[v2898] += v2899;
            break;
          }
        }
        if (v2896.ᐃᐃⲆᐃᐃ.length == v2900) {
          v2896.ᐃⵠΔⵠ[v2898] = v2899;
          v2896.ᐃᐃⲆᐃᐃ.push(game.ⲆᐃΔ[v2898]);
          game.ⵠⲆΔᐃⲆᐃᐃ();
        }
      }
      user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
    };
    this.ᐃⵠᐃⵠ = function (p1789, p1790, p1791, p1792, p1793, p1794, p1795) {
      user.ᐃⵠᐃⵠ.ΔΔⵠᐃ = p1789 / 100;
      user.ᐃⵠᐃⵠ.ⵠⲆⵠ = p1790 / 100;
      user.ᐃⵠᐃⵠ.c = p1791 / 100;
      user.ᐃⵠᐃⵠ.ᐃⵠⲆ = p1792 / 100;
      user.ᐃⵠᐃⵠ.ΔⲆΔ = p1793 / 100;
      user.ᐃⵠᐃⵠ.ⵠΔⲆⲆΔⲆⵠ = p1794 / 100;
      user.ᐃⲆᐃΔᐃ = p1795;
    };
    this.ᐃⲆⲆΔⲆΔᐃᐃᐃ = function (p1796) {
      game.ΔΔΔⵠ.modify(p1796, 2);
    };
    this.ⵠᐃᐃⵠⵠⲆᐃⵠᐃ = function (p1797) {
      game.ΔΔΔⵠ.modify(p1797, 0);
    };
    this.ⵠΔⲆᐃᐃⵠⲆΔⵠ = function (p1798) {
      game.ΔΔΔⵠ.modify(p1798, 3);
    };
    this.ᐃⵠΔⵠⵠᐃⲆⲆᐃ = function (p1799, p1800) {
      user.ᐃⵠᐃⵠ.ΔΔⵠᐃ = p1799 / 100;
      user.ᐃⲆᐃΔᐃ = p1800;
    };
    this.ⵠΔΔⲆᐃⵠⲆⵠΔ = function (p1801) {
      user.ᐃⵠᐃⵠ.ᐃⵠⲆ = p1801 / 100;
    };
    this.ⵠᐃⵠΔⵠΔΔΔⵠ = function (p1802) {
      user.ᐃⵠᐃⵠ.ⵠⲆⵠ = p1802 / 100;
    };
    this.ᐃᐃⵠⵠⵠᐃⵠᐃⲆ = function (p1803) {
      user.ᐃⵠᐃⵠ.ⵠΔⲆⲆΔⲆⵠ = p1803 / 100;
    };
    this.ⵠΔⵠΔⵠⲆⲆᐃⵠ = function (p1804) {
      user.ᐃⵠᐃⵠ.c = p1804 / 100;
    };
    this.ᐃΔᐃⲆⵠⲆⲆⵠⵠ = function (p1805) {
      world.time = p1805;
      world.transition = true;
      v3031.transition = 1;
    };
    this.ΔΔᐃΔΔᐃΔᐃᐃ = function () {
      document.getElementById("game_body").style.backgroundColor = v585.ΔΔⲆⲆⵠ[world.time];
    };
    this.ᐃΔⲆⲆⲆΔⵠΔⲆ = function (p1806) {
      if (world.mode == 1 && world.players[p1806].ᐃⲆᐃⵠⲆ !== "spectator") {
        this.ᐃⲆᐃΔⵠ(world.players[p1806].ᐃⲆᐃⵠⲆ + v751[2014]);
      }
      world.players[p1806].ⵠᐃⲆΔⲆ = false;
    };
    this.ᐃᐃᐃΔⵠⲆⵠⵠⵠ = function (p1807) {
      var v2901 = new Uint16Array(p1807);
      ⲆⵠⵠΔ.ᐃⵠⵠ.ⵠⵠᐃⲆΔ(v2901[1], v2901[2]);
    };
    this.ΔⵠΔⲆⲆΔᐃᐃΔ = function (p1808) {
      var v2902 = new Uint16Array(p1808);
      user.ᐃⵠⵠ.ⵠⵠᐃⲆΔ(v2902[1], v2902[2]);
    };
    this.ⲆⲆⲆⵠΔⵠᐃⲆⲆ = function (p1809, p1810) {
      var v2903 = new Uint16Array(p1810);
      for (var v2904 = (p1809.length - 2) / 4, v2905 = 0; v2905 < v2904; v2905++) {
        var v2906 = v2903[1 + v2905 * 2];
        var v2907 = p1809[4 + v2905 * 4];
        var v2908 = (p1809[5 + v2905 * 4] >> 1) / 127 * Math.PI * 2;
        var v2909 = world.fast_units[v2907 * world.ᐃⲆⵠΔⵠⵠⲆ + v2906];
        if (v2909 && v2909.ᐃΔⵠ) {
          if (v3031.loaded && v3031.ⲆΔᐃᐃⲆ) {
            v3031.ᐃΔⵠ(p1809[5 + v2905 * 4] & 1, ᐃΔᐃΔⲆ[v2909.type], v2909.x, v2909.y);
          }
          v2909.ᐃΔⵠ.angle = v2908;
          v2909.ᐃΔⵠ.ⵠᐃᐃ = v2908;
        }
      }
    };
    this.ⲆΔⵠⵠᐃᐃⲆᐃⵠ = function (p1811) {
      var v2910 = new Uint16Array(p1811);
      for (var v2911 = (v2910.length - 1) / 4, v2912 = 0; v2912 < v2911; v2912++) {
        var v2913;
        var v2914 = v2912 * 4;
        var v2915 = v2910[1 + v2914];
        var v2916 = v2910[2 + v2914];
        var v2917 = (v2910[3 + v2914] >> 1) / 127 * Math.PI * 2;
        var v2918 = v2910[4 + v2914];
        var v2919 = v2831.ⵠⲆΔⵠ[v2916][v2915];
        switch (v2918) {
          case 0:
            (v2913 = v2919.p[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV623;
            break;
          case 1:
            (v2913 = v2919.s[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 2:
            (v2913 = v2919.s[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 3:
            (v2913 = v2919.s[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV623;
            break;
          case 4:
            (v2913 = v2919.t[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 5:
            (v2913 = v2919.t[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV622;
            break;
          case 6:
            (v2913 = v2919.t[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 7:
            (v2913 = v2919.t[3][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVV63;
            break;
          case 8:
            (v2913 = v2919.t[4][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 9:
            (v2913 = v2919.t[5][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 10:
            (v2913 = v2919.g[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV6232;
            break;
          case 11:
            (v2913 = v2919.g[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVVV6232;
            break;
          case 12:
            (v2913 = v2919.g[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = v6;
            break;
          case 13:
            (v2913 = v2919.d[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV623;
            break;
          case 14:
            (v2913 = v2919.d[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 15:
            (v2913 = v2919.d[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 16:
            (v2913 = v2919.b[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 17:
            (v2913 = v2919.b[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 18:
            (v2913 = v2919.b[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV632;
            break;
          case 19:
            (v2913 = v2919.b[3][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVVVV6232;
            break;
          case 20:
            (v2913 = v2919.f[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 21:
            (v2913 = v2919.f[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV632;
            break;
          case 22:
            (v2913 = v2919.f[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV623;
            break;
          case 23:
            (v2913 = v2919.sw[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV63;
            break;
          case 24:
            (v2913 = v2919.sw[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 25:
            (v2913 = v2919.sw[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV624;
            break;
          case 26:
            (v2913 = v2919.gw[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = v6;
            break;
          case 27:
            (v2913 = v2919.gw[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV624;
            break;
          case 28:
            (v2913 = v2919.gw[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 29:
            (v2913 = v2919.dw[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV624;
            break;
          case 30:
            (v2913 = v2919.dw[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV62;
            break;
          case 31:
            (v2913 = v2919.dw[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 32:
            (v2913 = v2919.a[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 33:
            (v2913 = v2919.a[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV632;
            break;
          case 34:
            (v2913 = v2919.a[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 35:
            (v2913 = v2919.cs[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVVVV6232;
            break;
          case 36:
            (v2913 = v2919.cs[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV624;
            break;
          case 37:
            (v2913 = v2919.cs[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVVVV6232;
            break;
          case 38:
            (v2913 = v2919.cs[3][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV6;
            break;
          case 40:
            (v2913 = v2919.plm[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV632;
            break;
          case 41:
            (v2913 = v2919.plm[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV63;
            break;
          case 42:
            (v2913 = v2919.plm[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 50:
            (v2913 = v2919.re[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 51:
            (v2913 = v2919.re[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV6322;
            break;
          case 52:
            (v2913 = v2919.re[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV622;
            break;
          case 55:
            (v2913 = v2919.c[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 56:
            (v2913 = v2919.m[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 57:
            (v2913 = v2919.m[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVV63;
            break;
          case 58:
            (v2913 = v2919.m[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV623;
            break;
          case 59:
            (v2913 = v2919.cop[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV623;
            break;
          case 60:
            (v2913 = v2919.cop[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vV6;
            break;
          case 61:
            (v2913 = v2919.cop[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV63;
            break;
          case 62:
            (v2913 = v2919.iro[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 63:
            (v2913 = v2919.iro[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV632;
            break;
          case 64:
            (v2913 = v2919.iro[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 65:
            (v2913 = v2919.top[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV623;
            break;
          case 66:
            (v2913 = v2919.top[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVV6;
            break;
          case 67:
            (v2913 = v2919.top[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 68:
            (v2913 = v2919.sap[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 69:
            (v2913 = v2919.sap[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 70:
            (v2913 = v2919.sap[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV623;
            break;
          case 71:
            (v2913 = v2919.jad[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 72:
            (v2913 = v2919.jad[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 73:
            (v2913 = v2919.jad[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = v6;
            break;
          case 74:
            (v2913 = v2919.rub[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 75:
            (v2913 = v2919.rub[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 76:
            (v2913 = v2919.rub[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 77:
            (v2913 = v2919.coa[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 78:
            (v2913 = v2919.coa[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVV62;
            break;
          case 79:
            (v2913 = v2919.coa[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 80:
            (v2913 = v2919.aqu[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV624;
            break;
          case 81:
            (v2913 = v2919.aqu[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV624;
            break;
          case 82:
            (v2913 = v2919.aqu[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 83:
            (v2913 = v2919.jut[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 84:
            (v2913 = v2919.jut[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 85:
            (v2913 = v2919.jut[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVVV6232;
            break;
          case 86:
            (v2913 = v2919.jut[3][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV632;
            break;
          case 87:
            (v2913 = v2919.jut[4][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV6233;
            break;
          case 88:
            (v2913 = v2919.jub[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 89:
            (v2913 = v2919.jub[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVV62;
            break;
          case 90:
            (v2913 = v2919.jus[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = true;
            break;
          case 91:
            (v2913 = v2919.jus[1][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVV6;
            break;
          case 92:
            (v2913 = v2919.jus[2][0]).angle = v2917;
            v2913.ⵠᐃᐃ = v6;
            break;
          case 93:
            (v2913 = v2919.bap[0][0]).angle = v2917;
            v2913.ⵠᐃᐃ = vVVVV623;
        }
        if (v3031.loaded && v3031.ⲆΔᐃᐃⲆ && v2913) {
          v3031.ᐃΔⵠ(v2910[3 + v2914] & 1, ⲆᐃΔⲆ[v2918], v2913.x, v2913.y);
        }
      }
    };
    this.ΔⲆᐃᐃⲆ = function () {
      this.ᐃᐃⲆΔ[v2244](vVVWindow[v420].stringify([30, user.ΔⲆᐃᐃⲆ.ΔⲆᐃⲆ, user.ΔⲆᐃᐃⲆ.ΔⵠΔᐃⵠ]));
    };
    this.ᐃᐃΔⲆΔΔⲆᐃΔ = function (p1812, p1813) {
      this.ᐃᐃⲆΔ[v2244](vVVWindow[v435].stringify([37, p1813, p1812.ΔⲆᐃⲆ, p1812.ΔⵠΔᐃⵠ]));
    };
    this.ᐃⲆᐃⲆΔΔΔ = function (p1814, p1815, p1816) {
      if (p1815) {
        this.ᐃᐃⲆΔ[v2244](vVVWindow[v435].stringify([36, p1815, p1814.ΔⲆᐃⲆ, p1814.ΔⵠΔᐃⵠ]));
      } else {
        this.ᐃᐃⲆΔ[v2244](vVVWindow[v428].stringify([1, p1816, p1814.ΔⲆᐃⲆ, p1814.ΔⵠΔᐃⵠ]));
      }
    };
    this.ⵠΔⲆᐃᐃⲆᐃᐃⵠ = function (p1817) {
      this.ᐃᐃⲆΔ[v2244](vVVVVVWindow[v440].stringify([25, p1817.ΔⲆᐃⲆ, p1817.ΔⵠΔᐃⵠ]));
    };
    this.ᐃⲆⵠΔΔᐃᐃⲆΔ = function (p1818) {
      this.ᐃᐃⲆΔ[v2244](vVVVVVWindow[v449].stringify([2, p1818]));
    };
    this.ⲆΔⲆΔⵠⲆᐃΔΔ = function (p1819) {
      this.ᐃᐃⲆΔ[v2244](vVVVVWindow[v420].stringify([16, p1819.ΔⲆᐃⲆ, p1819.ΔⵠΔᐃⵠ]));
    };
    this.ᐃᐃⲆΔⵠⵠⵠⵠᐃ = function (p1820, p1821) {
      this.ᐃᐃⲆΔ[v2244](vVVVWindow[v440].stringify([11, p1821, p1820.ΔⲆᐃⲆ, p1820.ΔⵠΔᐃⵠ, p1820.type]));
    };
    this.ΔΔΔⲆΔⲆⵠⵠⲆ = function (p1822, p1823) {
      this.ᐃᐃⲆΔ[v2244](vVVVWindow[v440].stringify([18, p1823, p1822.ΔⲆᐃⲆ, p1822.ΔⵠΔᐃⵠ]));
    };
    this.ᐃᐃΔΔⲆΔⲆᐃᐃ = function (p1824, p1825, p1826) {
      this.ᐃᐃⲆΔ[v2244](vVVVVWindow[v435].stringify([24, p1825, p1826, p1824.ΔⲆᐃⲆ, p1824.ΔⵠΔᐃⵠ]));
    };
    this.ᐃⲆⲆⵠⵠ = function (p1827) {
      this.ᐃᐃⲆΔ[v2244](vVVVVVWindow[v440].stringify([21, p1827.ΔⲆᐃⲆ, p1827.ΔⵠΔᐃⵠ, p1827.type]));
    };
    this.ⵠⲆⲆⲆⵠΔΔⲆⵠ = function (p1828) {
      this.ᐃᐃⲆΔ[v2244](vVVVVVWindow[v440].stringify([20, p1828.ΔⲆᐃⲆ, p1828.ΔⵠΔᐃⵠ]));
    };
    this.ⲆⵠᐃⵠⵠΔⲆⲆΔ = function (p1829) {
      this.ᐃᐃⲆΔ[v2244](vVVVVVWindow[v440].stringify([9, p1829.ΔⲆᐃⲆ, p1829.ΔⵠΔᐃⵠ]));
    };
    this.ΔⵠᐃⲆⲆᐃᐃᐃᐃ = function (p1830) {
      this.ᐃᐃⲆΔ[v2244](vVVVVVVWindow[v442].stringify([7, p1830.ΔⲆᐃⲆ, p1830.ΔⵠΔᐃⵠ]));
    };
    this.ⲆᐃⵠⲆᐃⵠᐃΔᐃ = function (p1831) {
      this.ᐃᐃⲆΔ[v2244](vVVVVVVVWindow[v444].stringify([8, p1831.ΔⵠΔᐃⵠ]));
    };
    this.ⲆⵠⲆΔΔⵠⵠ = function (p1832) {
      vThis5.ᐃᐃⲆΔ[v2244](vVVVVVVVVWindow[v449].stringify([26, user.ⲆΔⵠΔᐃ.id, user.ΔΔⲆⲆⲆ[p1832]]));
    };
    this.ⲆᐃΔⲆΔΔᐃΔⵠ = function () {
      vThis5.ᐃᐃⲆΔ[v2244](vVVVVVVVVVWindow[v459].stringify([12, user.ⲆΔⵠΔᐃ.ΔⲆᐃⲆ, user.ⲆΔⵠΔᐃ.id]));
    };
    this.ⵠᐃΔᐃⲆᐃΔ = function () {
      vThis5.ᐃᐃⲆΔ[v2244](vVVVVVVVVVVWindow[v462].stringify([23]));
    };
    this.ΔᐃⵠⲆᐃⵠΔΔⵠ = function () {
      vThis5.ᐃᐃⲆΔ[v2244](vVVVVVVVVVVWindow[v449].stringify([6, user.ⲆΔⵠΔᐃ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        user.ⲆΔⵠΔᐃ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        user.ⲆΔⵠΔᐃ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.units = function (p1833, p1834, p1835) {
      var v2920 = new Uint16Array(p1833);
      if (p1835) {
        world.ⲆⲆΔᐃΔⵠⵠⲆΔ();
      }
      for (var v2921 = (p1834.length - 2) / 20, v2922 = 0; v2922 < v2921; v2922++) {
        var v2923 = 2 + v2922 * 20;
        var v2924 = 1 + v2922 * 10;
        var v2925 = p1834[v2923];
        var v2926 = v2920[v2924 + 1];
        var v2927 = v2920[v2924 + 5];
        var v2928 = world.ᐃⲆⵠΔⵠⵠⲆ * v2925 + v2927;
        if (v2926 & 1) {
          world.ⵠⵠΔΔⵠᐃᐃⲆᐃ(v2928);
        } else {
          var v2929 = v2920[v2924 + 2];
          var v2930 = v2920[v2924 + 3];
          var v2931 = v2920[v2924 + 4];
          var v2932 = v2920[v2924 + 6];
          var v2933 = v2920[v2924 + 7];
          var v2934 = v2920[v2924 + 8];
          var v2935 = v2920[v2924 + 9];
          var v2936 = Math.PI * (p1834[v2923 + 1] / 255) * 2;
          if (world.fast_units[v2928]) {
            var v2937 = world.fast_units[v2928];
            v2937.r.x = v2930;
            v2937.r.y = v2931;
            if (v2925 != 0 && Δᐃᐃ.ⲆⲆⵠᐃ(v2937, v2937.r) > 200) {
              v2937.x = v2930;
              v2937.y = v2931;
            }
            if (v2937.id !== user.id || v2925 === 0) {
              v2937.ΔᐃΔΔᐃΔᐃ = v2936;
            }
            v2937.action |= v2926;
            v2937.info = v2932;
            v2937.ⲆⵠⲆⵠⲆᐃᐃ = v2935;
            v2937.ΔⲆΔⲆⵠ = v2933;
            v2937.ΔᐃᐃΔⵠ = v2934;
            if (v2937.ⵠᐃᐃ) {
              v2937.ⵠᐃᐃ(v2926);
            }
          } else {
            var v2938 = new f435(v2929, v2925, v2927, v2930, v2931, v2936, v2926, v2932, v2933, v2934, v2935);
            world.fast_units[v2928] = v2938;
            world.units[v2929].push(v2938);
          }
        }
      }
    };
    this.ΔΔΔᐃ = function (p1836) {
      this.ⲆⵠⵠⲆᐃΔⲆ = v3065;
      var v2939 = new Uint16Array(p1836);
      user.ⵠⵠᐃⲆᐃ.ΔᐃΔⲆⵠ(v2939);
    };
    this.ΔᐃⲆⵠᐃᐃⵠᐃᐃ = function (p1837) {
      vUndefined2 = vVVVUndefined58;
      if (p1837 && p1837.length > 0) {
        vUndefined2 = p1837;
      }
    };
    this.ΔⲆⵠⵠⵠⵠⵠᐃᐃ = function (p1838) {
      if (vVVVUndefined14 !== p1838) {
        for (let v2940 = 0; p1838.length > v2940; v2940++) {
          const v2941 = p1838[v2940];
          if (!v2941) {
            continue;
          }
          const v2942 = v2941.id;
          const v2943 = v2941.text;
          const v2944 = v751[v2942];
          if (vVVVVVVUndefined14 !== v2944 && v2943 !== vVVUndefined14) {
            for (let v2945 = 0; v2943.length > v2945; v2945++) {
              v2944[v2945 + 2] = v2943[v2945];
            }
          }
        }
      }
    };
    this.ⲆΔⵠⵠΔⵠΔᐃᐃ = function (p1839) {
      if (p1839 !== undefined) {
        for (let v2946 = 0; v2946 < p1839.length; v2946++) {
          const v2947 = p1839[v2946];
          if (v2947) {
            v2259[v2946].time = v2947.time;
          }
        }
      }
    };
    this.ᐃΔⵠⵠΔᐃΔⲆⵠ = function (p1840) {
      if (vVVVVVVUndefined14 !== vVVUndefined15) {
        v730 = vVVUndefined15;
      }
      if (p1840.length > 0) {
        vVVUndefined15 = JSON.parse(JSON.stringify(v730));
        for (var v2948 = 0; p1840.length > v2948; v2948++) {
          var v2949 = p1840[v2948];
          var v2950 = v2949.item;
          var v2951 = v730[v2950];
          if (vVVUndefined5 === v2951 || v2951 === null) {
            if (v2949.category === undefined) {
              continue;
            }
            (v2951 = {}).id = v2950;
            v2951.ΔΔⵠΔ = v2950;
            v2951.ᐃⵠⲆ = v2949.category;
            v730[v2949.item] = v2951;
          }
          v2951.r = v2949.recipe;
          v2951.w = v2949.workbench;
          v2951.f = v2949.fire;
          v2951.ΔⲆΔ = v2949.water;
          v2951.e = v2949.well;
          v2951.time = 1 / v2949.time;
        }
      }
    };
    this.ⵠΔᐃⵠΔΔΔ = function (p1841) {
      if (p1841 && p1841.length !== 0) {
        user.ⵠΔᐃⵠΔΔΔ.message = function (p1842) {
          var v2952 = document.createElement("canvas");
          var v2953 = v2952.getContext("2d");
          for (v2953.lineJoin = "round"; p1842.indexOf("\\n") !== -1;) {
            p1842 = p1842.replace("\\n", "\n");
          }
          p1842 = p1842.split("\n");
          ⵠⲆ = [];
          var v2954 = p1842.length * 18 + 10;
          var v2955 = 0;
          v2953.font = "14px Baloo Paaji";
          for (var v2956 = 0; v2956 < p1842.length; v2956++) {
            if (p1842[v2956].charAt(0) === "#") {
              ⵠⲆ[v2956] = p1842[v2956].substring(0, 7);
              p1842[v2956] = p1842[v2956].substring(8);
            } else {
              ⵠⲆ[v2956] = "#FFFFFF";
            }
            v2955 = Math.max(v2953.measureText(p1842[v2956]).width + 16, v2955);
          }
          v2952.height = v2954;
          v2952.width = v2955;
          v2956 = 0;
          for (; p1842.length > v2956; v2956++) {
            var vF1573 = f157(1, p1842[v2956], 14, ⵠⲆ[v2956], null, null, null, null, null, "#000", 6);
            v2953.drawImage(vF1573, 8, v2956 * 18 + 5);
          }
          return v2952;
        }(p1841);
      } else {
        user.ⵠΔᐃⵠΔΔΔ.message = undefined;
      }
    };
    this.ⲆΔⲆᐃⲆ = function (p1843) {
      var v2957 = world.fast_units[p1843[1] * world.ᐃⲆⵠΔⵠⵠⲆ];
      if (v2957) {
        if (world.mode === 2 && v2957.ⲆΔⲆⲆ === 0) {
          if (user.ⲆΔᐃⲆΔ) {
            if (Math.random() > 0.5) {
              v2957.text.push(p1843[2] + " ..." + ⵠᐃⵠⵠⲆᐃⲆ);
            } else {
              v2957.text.push(ⵠᐃⵠⵠⲆᐃⲆ + "... " + p1843[2]);
            }
          } else {
            v2957.text.push(ΔⵠΔΔⵠᐃΔ[Math.floor(Math.random() * ΔⵠΔΔⵠᐃΔ.length)]);
          }
        } else {
          v2957.text.push(p1843[2]);
        }
      }
    };
    this.ΔΔⵠⵠⲆⵠΔⲆⲆ = function (p1844) {
      if (user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ.length !== user.ᐃⵠⲆⲆ.max || v730[p1844].ΔΔⵠΔ === 47 || user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(v730[p1844].ΔΔⵠΔ) != -1 || user.ᐃⵠⲆⲆ.ΔΔᐃΔᐃⲆⵠⵠⵠ(v730[p1844].r)) {
        this.ᐃᐃⲆΔ[v2244](vVWindow[v421].stringify([13, p1844]));
        return 1;
      } else {
        this.ΔⵠΔᐃⵠⲆΔ();
        return 0;
      }
    };
    this.ᐃΔⲆᐃᐃⵠΔ = function (p1845) {
      user.ⵠⲆⲆᐃ.ⲆΔΔⲆᐃᐃΔΔᐃ(p1845);
    };
    this.ΔᐃⲆΔᐃ = function (p1846) {
      user.ⵠⲆⲆᐃ.ΔᐃⲆΔᐃ = p1846;
      user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
    };
    this.ⵠΔⲆΔⵠ = function (p1847) {
      user.ⵠⲆⲆᐃ.ⵠΔⲆΔⵠ = p1847;
      user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
    };
    this.ⲆᐃΔⲆΔᐃᐃ = function (p1848) {
      user.ⵠⲆⲆᐃ.ⲆᐃΔⲆΔᐃᐃ = p1848;
      user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
    };
    this.ⵠΔᐃᐃΔᐃᐃᐃᐃ = function (p1849) {
      this.ᐃⲆᐃΔⵠ(v751[2015]);
    };
    this.ⲆΔⵠΔΔⵠⲆᐃΔ = function () {
      user.ⵠⲆⲆᐃ.ⵠᐃᐃⲆΔⵠⵠ();
    };
    this.ΔΔΔⲆⲆ = function (p1850) {
      game.ΔΔΔⲆⲆ.players = [];
      var v2958 = world.fast_units[user.ᐃᐃⵠⵠ];
      var v2959 = 0;
      for (var v2960 = 1; v2960 < p1850.length; v2960 += 2) {
        var v2961 = {
          x: Math.floor(p1850[v2960] * world.w / 250),
          y: Math.floor(p1850[v2960 + 1] * world.ⵠⲆⵠ / 250)
        };
        if (v2958 && !v2959 && !user.ⲆⲆΔⵠⲆᐃⵠ && Δᐃᐃ.ⲆⲆⵠᐃ(v2961, v2958) < 250) {
          v2959 += 1;
        } else {
          game.ΔΔΔⲆⲆ.players.push(v2961);
        }
      }
    };
    this.ⲆΔⵠⵠΔⵠⲆⵠᐃ = function () {
      user.ΔⲆᐃᐃⲆ.open = vVVVV142;
      user.ⵠΔⵠⵠΔ.enabled = vVV145;
      user.ⵠΔⵠⵠΔ.ⲆⲆᐃΔⲆ = -1;
      user.ⵠΔⵠⵠΔ.label = null;
      user.ⵠΔⵠⵠΔ.ᐃᐃᐃΔΔᐃΔ = null;
      user.ⵠΔⵠⵠΔ.now = -1;
    };
    this.ⵠΔⵠⵠΔ = function (p1851) {
      v2257.ⲆⵠⲆᐃⵠᐃⲆ = p1851;
      user.ⵠΔⵠⵠΔ.enabled = vVVV622;
      user.ⵠΔⵠⵠΔ.ⲆⲆᐃΔⲆ = new Date().getTime();
      user.ⵠΔⵠⵠΔ.label = null;
      user.ⵠΔⵠⵠΔ.now = -1;
      for (var v2962 = vUndefined2 || v590, v2963 = 0; v2963 < v2962.length; v2963++) {
        var v2964 = user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(v2962[v2963]);
        if (v2964 != -1) {
          user.ᐃⵠⲆⲆ.ᐃⵠⵠᐃⵠⵠΔ(v2962.length[v2963], v2964);
        }
      }
      user.ⵠⲆⲆᐃ.ⵠᐃᐃⲆΔⵠⵠ();
    };
    this.ⵠⵠᐃⲆΔⵠⲆᐃᐃ = function (p1852, p1853, p1854) {
      this.ΔᐃΔⵠⵠᐃΔ(p1852, p1853 * 256 + p1854);
    };
    this.ΔᐃΔⵠⵠᐃΔ = function (p1855, p1856) {
      user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
      user.ᐃⵠⲆⲆ.ⲆⲆᐃⲆⵠⲆⵠ(p1855, p1856, user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(p1855));
      user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
    };
    this.ⵠΔⲆⵠᐃΔⵠⵠᐃ = function (p1857) {
      user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
      user.ᐃΔⵠⵠᐃ.wait = vVVVVVV6232;
      var v2965 = user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(p1857);
      user.ᐃⵠⲆⲆ.ⲆⲆᐃⲆⵠⲆⵠ(p1857, 1, v2965);
      if (v2965 >= 0 && !user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ[p1857]) {
        user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
      }
      if (p1857 == 261) {
        user.ΔΔⲆⲆⲆ = [user.id];
      }
    };
    this.ⲆΔⲆᐃⵠᐃⲆⵠᐃ = function () {
      this.ᐃᐃⲆΔ[v2244](vVVWindow[v420].stringify([32]));
    };
    this.ΔΔⵠⵠᐃⲆΔᐃᐃ = function (p1858) {
      this.ᐃᐃⲆΔ[v2244](vVVVWindow[v428].stringify([22, p1858.ⲆΔⵠⲆΔ, p1858.id]));
    };
    this.ΔΔⲆᐃⵠⲆΔΔⵠ = function (p1859, p1860) {
      this.ᐃᐃⲆΔ[v2244](vVVVWindow[v440].stringify([28, p1859, p1860]));
    };
    this.ᐃⵠⲆⵠΔΔⲆⵠⲆ = function () {
      var v2966 = world.fast_units[user.ᐃᐃⵠⵠ];
      if (v2966) {
        var v2967 = Math.PI * 2;
        this.ᐃᐃⲆΔ[v2244](vVVVWindow[v428].stringify([17, user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ, Math.floor((v2966.angle + v2967) % v2967 * 255 / v2967), user.ⵠⲆⲆᐃ.mode]));
      }
    };
    this.ᐃⵠⲆⲆΔ = function (p1861, p1862) {
      switch (p1861) {
        case 297:
        case 201:
        case 207:
        case 208:
        case 238:
        case 218:
        case 226:
        case 229:
        case 235:
        case 236:
        case 291:
        case 317:
        case 343:
        case 315:
        case 319:
        case 356:
        case 321:
        case 294:
        case 230:
        case 231:
        case 298:
        case 299:
        case 302:
        case 301:
          user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
          this.ᐃᐃⲆΔ[v2244](vVVVVWindow[v435].stringify([33, p1861]));
          break;
        case 205:
        case 262:
        case 206:
        case 225:
        case 290:
        case 316:
        case 314:
        case 293:
        case 295:
        case 318:
        case 357:
        case 320:
        case 204:
        case 264:
        case 265:
        case 266:
        case 267:
        case 209:
        case 269:
        case 244:
        case 245:
        case 268:
        case 273:
        case 274:
        case 275:
        case 215:
        case 328:
        case 322:
        case 323:
        case 324:
        case 325:
        case 326:
        case 330:
        case 270:
        case 271:
        case 272:
        case 210:
        case 213:
        case 214:
        case 327:
        case 329:
        case 216:
        case 292:
        case 234:
        case 228:
        case 246:
        case 247:
        case 248:
        case 249:
        case 250:
        case 251:
        case 252:
        case 253:
        case 254:
        case 255:
        case 256:
        case 257:
        case 258:
        case 259:
        case 300:
        case 303:
        case 284:
        case 285:
        case 237:
        case 261:
        case 331:
          if (!user.ⲆΔᐃⲆΔ) {
            if (user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ === p1861) {
              user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
            } else {
              user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = p1861;
            }
          }
          break;
        case 0:
        case 103:
        case 5:
        case 6:
        case 48:
        case 28:
        case 9:
        case 108:
        case 109:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 165:
        case 166:
        case 12:
        case 13:
        case 14:
        case 15:
        case 60:
        case v588.ΔⵠⲆᐃᐃᐃΔⲆᐃ:
        case 16:
        case 17:
        case 61:
        case 18:
        case 167:
        case 168:
        case 169:
        case 170:
        case 171:
        case 172:
        case 110:
        case 126:
        case 19:
        case 173:
        case 111:
        case 127:
        case 20:
        case 174:
        case 112:
        case 128:
        case 21:
        case 175:
        case 113:
        case 129:
        case 22:
        case 176:
        case 114:
        case 130:
        case 23:
        case 177:
        case 115:
        case 131:
        case 24:
        case 178:
        case 116:
        case 132:
        case 25:
        case 179:
        case 117:
        case 133:
        case 26:
        case 180:
        case 118:
        case 134:
        case 27:
        case 181:
          if (!user.ⲆΔᐃⲆΔ) {
            user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
            if ((v2968 = world.fast_units[user.ᐃᐃⵠⵠ]) && v2968.right === p1861) {
              this.ᐃᐃⲆΔ[v2244](vVVVVVWindow[v440].stringify([33, 7]));
            } else {
              user.ΔⲆΔᐃΔ.wait = true;
              this.ᐃᐃⲆΔ[v2244](vVVVVVVWindow[v442].stringify([33, p1861]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 62:
        case 63:
        case 64:
        case 46:
        case 65:
        case 66:
        case 49:
        case 50:
        case 72:
        case 82:
        case 86:
        case 87:
        case 88:
        case 101:
        case 102:
        case 99:
        case 100:
        case 162:
        case 85:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 51:
        case 73:
        case 90:
        case 141:
        case 52:
        case 74:
        case 91:
        case 142:
        case 53:
        case 75:
        case 92:
        case 143:
        case 54:
        case 76:
        case 93:
        case 144:
        case 55:
        case 77:
        case 94:
        case 145:
        case 56:
        case 78:
        case 95:
        case 146:
        case 57:
        case 79:
        case 96:
        case 147:
        case 58:
        case 80:
        case 97:
        case 148:
        case 59:
        case 81:
        case 98:
        case 89:
        case 149:
          if (!user.ⲆΔᐃⲆΔ) {
            user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
            if ((v2968 = world.fast_units[user.ᐃᐃⵠⵠ]) && p1861 === v2968.right) {
              this.ᐃᐃⲆΔ[v2244](vVVVVVVVWindow[v444].stringify([33, 7]));
            } else {
              this.ᐃᐃⲆΔ[v2244](vVVVVVVVVWindow[v449].stringify([33, p1861]));
            }
          }
          break;
        case 333:
        case 334:
        case 335:
        case 349:
        case 336:
        case 337:
        case 338:
        case 339:
        case 355:
        case 354:
        case 358:
        case 340:
        case 164:
          if (!user.ⲆΔᐃⲆΔ) {
            user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
            var v2968 = world.fast_units[user.ᐃᐃⵠⵠ];
            this.ᐃᐃⲆΔ[v2244](vVVVVVVVVWindow[v449].stringify([33, p1861]));
          }
          break;
        case 150:
        case 151:
        case 152:
        case 104:
        case 34:
        case 35:
        case 36:
        case 70:
        case 71:
        case 29:
        case 30:
        case 31:
        case 105:
        case 106:
        case 163:
        case 107:
        case 83:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
          if ((v2968 = world.fast_units[user.ᐃᐃⵠⵠ]) && p1861 !== v2968.ⲆⲆⵠⵠⵠ) {
            user.ⵠⲆⲆᐃⲆ.wait = vVVVV6233;
          }
          this.ᐃᐃⲆΔ[v2244](vVVVVWindow[v440].stringify([33, p1861]));
          break;
        case 10:
        case 156:
        case 157:
        case 159:
        case 11:
        case 67:
        case 161:
        case 155:
        case 153:
        case 154:
        case 68:
        case 69:
        case 158:
        case 32:
        case 33:
        case 84:
          this.ᐃᐃⲆΔ[v2244](vVVVVVVVVVWindow[v459].stringify([33, p1861]));
      }
    };
    this.ΔᐃⵠΔᐃΔⲆⵠⲆ = function (p1863) {
      this.ᐃᐃⲆΔ[v2244](vVVVWindow[v421].stringify([27, p1863]));
    };
    this.ⵠᐃⲆᐃΔⵠⵠᐃΔ = function (p1864) {
      user.ᐃΔⵠⵠᐃ.wait = v6;
      var v2969 = user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(p1864);
      user.ᐃⵠⲆⲆ.ᐃⵠⵠᐃⵠⵠΔ(p1864, v2969);
      user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
    };
    this.ⲆΔⵠᐃⲆᐃⵠⵠⵠ = function (p1865, p1866) {
      this.ᐃᐃⲆΔ[v2244](vVWindow[v444].stringify([31, p1865]));
    };
    this.ΔⲆᐃΔᐃⲆᐃⲆᐃ = function (p1867, p1868) {
      this.ᐃᐃⲆΔ[v2244](vVVWindow[v420].stringify([35, p1867]));
    };
    this.ᐃΔΔⵠΔΔΔᐃᐃ = function (p1869) {
      user.ᐃΔⵠⵠᐃ.wait = true;
      var v2970 = user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(p1869);
      user.ᐃⵠⲆⲆ.ⲆⲆᐃⲆⵠⲆⵠ(p1869, 1, v2970);
      user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
    };
    this.ΔⵠⲆᐃᐃⲆᐃΔⲆ = function (p1870) {
      var v2971 = p1870[1];
      var v2972 = p1870[2];
      user.ᐃΔⵠⵠᐃ.wait = vVVV62;
      var v2973 = user.ᐃⵠⲆⲆ.ⵠΔᐃᐃΔ(v2971);
      user.ᐃⵠⲆⲆ.ⲆⲆᐃⲆⵠⲆⵠ(v2971, v2972, v2973);
      user.ⵠⲆⲆᐃ.ⵠᐃᐃ();
    };
    this.ᐃᐃΔⲆⵠⲆⵠᐃᐃ = function () {
      this.ᐃᐃⲆΔ[v2244](vVVWindow[v420].stringify([38]));
    };
    this.ᐃⵠΔⲆΔΔⵠΔⲆ = function (p1871) {
      var v2974 = Math.PI * 2;
      this.ᐃᐃⲆΔ[v2244](vVVVWindow[v428].stringify([19, Math.floor((p1871 + v2974) % v2974 * 255 / v2974)]));
    };
    this.ΔΔᐃⵠⲆⵠᐃⵠⵠ = function (p1872) {
      var v2975 = Math.PI * 2;
      this.ᐃᐃⲆΔ[v2244](vVVVWindow[v428].stringify([10, Math.floor((p1872 + v2975) % v2975 * 255 / v2975)]));
    };
    this.ⵠΔᐃΔⲆⵠⵠⵠᐃ = function (p1873) {
      this.ᐃᐃⲆΔ[v2244](ⲆΔⵠᐃⵠⲆⲆ[v423].stringify([14, p1873]));
    };
    this.ΔⲆⵠⵠⲆⲆᐃⵠΔ = function (p1874) {
      this.ᐃᐃⲆΔ[v2244](vVVVVVWindow[v440].stringify([34, p1874]));
    };
    this.ᐃᐃⵠᐃⵠᐃΔᐃⵠ = function (p1875) {
      var v2976 = world.fast_units[user.ᐃᐃⵠⵠ];
      if (user.ⲆΔᐃⲆΔ) {
        if (Math.random() > 0.5) {
          v2976.text.push(p1875.substring(0, 25) + " ..." + ⵠᐃⵠⵠⲆᐃⲆ);
        } else {
          v2976.text.push(ⵠᐃⵠⵠⲆᐃⲆ + "... " + p1875.substring(0, 25));
        }
      } else {
        v2976.text.push(p1875);
      }
      this.ᐃᐃⲆΔ[v2244](vVVVVVWindow[v440].stringify([5, p1875]));
    };
    this.ΔⵠᐃΔᐃ = function (p1876) {
      var v2977 = ⲆⵠⵠΔ.select.units;
      if (v2977.length != 0) {
        var v2978 = [14];
        var v2979 = [];
        Δᐃᐃ.ⵠⲆᐃΔⲆΔΔ(p1876, {
          x: ⲆⵠⵠΔ.ᐃⵠⵠ.rx,
          y: ⲆⵠⵠΔ.ᐃⵠⵠ.ry
        });
        v2978.push(p1876.x);
        v2978.push(p1876.y);
        for (var v2980 = 0; v2977.length > v2980; v2980++) {
          v2979.push(v2977[v2980].ΔΔᐃΔᐃᐃⵠΔⲆ);
        }
        v2978.push(v2979);
        this.ᐃᐃⲆΔ[v2244](vVVVVVVWindow[v442].stringify(v2978));
      }
    };
    this.ⵠᐃⲆⵠΔᐃᐃ = 0;
    this.ⵠΔΔᐃΔᐃᐃ = {
      ΔΔ: 0,
      ΔᐃⵠⲆ: 0
    };
    this.ΔΔⲆΔᐃⵠⲆⵠⲆ = function () {
      if (v3065 - this.ⵠᐃⲆⵠΔᐃᐃ > 50) {
        this.ⵠᐃⲆⵠΔᐃᐃ = v3065;
        var v2981 = user.ᐃⵠⵠ;
        var v2982 = Math.floor(v2981.x / 100);
        var v2983 = Math.floor(v2981.y / 100);
        if (this.ⵠΔΔᐃΔᐃᐃ.ΔΔ != v2982 || this.ⵠΔΔᐃΔᐃᐃ.ΔᐃⵠⲆ != v2983) {
          this.ᐃᐃⲆΔ[v2244](vVVVVVVVVWindow[v444].stringify([0, Math.floor(-v2981.x), Math.floor(-v2981.y)]));
          this.ⵠΔΔᐃΔᐃᐃ.ΔΔ = v2982;
          this.ⵠΔΔᐃΔᐃᐃ.ΔᐃⵠⲆ = v2983;
        }
      }
    };
    this.ⵠⵠΔⵠⲆⲆⵠ = 0;
    this.ⵠⲆⲆᐃᐃᐃᐃΔⵠ = function () {
      if (v3065 - this.ⵠⵠΔⵠⲆⲆⵠ > 60000) {
        this.ⵠⵠΔⵠⲆⲆⵠ = v3065;
        this.ping();
      }
    };
    this.ΔⵠΔΔᐃⲆⲆⲆⲆ = function () {
      user.reconnect.enabled = true;
      if (vThis5.ᐃᐃⲆΔ.ⲆⵠⵠΔᐃ == vThis5.ⲆⵠⵠΔᐃ) {
        vThis5.ⲆⵠⵠΔᐃ++;
        vThis5.ᐃᐃⲆΔ.close();
        v2837.connect();
      }
    };
    this.ⵠΔΔΔⵠΔΔⵠⵠ = function (p1877) {
      this.ᐃⲆᐃΔⵠ(v751[2016]);
      for (var v2984 = 1; v2984 < p1877.length; v2984++) {
        user.ΔΔⲆⲆⲆ.push(p1877[v2984]);
      }
    };
    this.ⲆΔⵠΔⲆᐃΔⲆᐃ = function (p1878) {
      this.ᐃⲆᐃΔⵠ(world.players[p1878].ᐃⲆᐃⵠⲆ + v751[2018]);
      user.ΔΔⲆⲆⲆ.push(p1878);
      var v2985 = document.getElementById("team_box");
      if (game.ΔΔΔⲆΔ != -1 && v2985.style.display == "inline-block") {
        game.Δᐃᐃᐃⵠ[game.ΔΔΔⲆΔ].action();
      }
    };
    this.ⲆⵠⲆⲆᐃᐃΔᐃΔ = function () {
      this.ᐃⲆᐃΔⵠ(v751[2019]);
      user.ⲆΔⵠΔᐃ.wait = vV6;
      user.ΔΔⲆⲆⲆ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⵠⵠⵠᐃⵠΔⲆⲆⵠ = function (p1879) {
      if (user.id == p1879) {
        this.ᐃⲆᐃΔⵠ(v751[2020]);
        user.ⲆΔⵠΔᐃ.wait = vVVVV6232;
        user.ΔΔⲆⲆⲆ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ᐃⲆᐃΔⵠ(world.players[p1879].ᐃⲆᐃⵠⲆ + v751[2021]);
        for (var v2986 = 0; v2986 < user.ΔΔⲆⲆⲆ.length; v2986++) {
          if (user.ΔΔⲆⲆⲆ[v2986] == p1879) {
            user.ΔΔⲆⲆⲆ.splice(v2986, 1);
            break;
          }
        }
        var v2987 = document.getElementById("team_box");
        if (game.ΔΔΔⲆΔ != -1 && v2987.style.display == "inline-block") {
          game.Δᐃᐃᐃⵠ[game.ΔΔΔⲆΔ].action();
        }
      }
    };
    this.ⲆᐃᐃⵠⵠⵠΔⲆᐃ = function (p1880) {
      user.ⵠᐃⲆΔⲆ = false;
      this.ᐃⲆᐃΔⵠ(v751[2022]);
      if (this.ⲆⵠⵠΔᐃ == this.ᐃᐃⲆΔ.ⲆⵠⵠΔᐃ) {
        this.ⲆⵠⵠΔᐃ++;
        game.ᐃᐃΔⵠⵠ(v2833.ⲆΔᐃᐃⲆ);
        this.ᐃᐃⲆΔ.close();
      }
    };
    this.ΔᐃΔΔΔⲆⲆΔΔ = function (p1881, p1882) {
      user.ⵠᐃⲆΔⲆ = vVVV142;
      var v2988 = new Uint16Array(p1882);
      var v2989 = new Uint32Array(p1882);
      user.ΔⵠᐃⵠᐃⲆⲆ.ⲆᐃⲆᐃⵠΔΔ = v753[p1881][Math.floor(Math.random() * v753[p1881].length)];
      user.ΔⵠᐃⵠᐃⲆⲆ.Ⲇⵠⵠᐃᐃ = Δᐃᐃ.ΔⲆΔⲆΔⲆⲆ(world.players[user.id].Ⲇⵠⵠᐃᐃ);
      user.ΔⵠᐃⵠᐃⲆⲆ.ⲆⲆΔᐃᐃΔⵠ = Δᐃᐃ.ΔⲆΔⲆΔⲆⲆ(v2989[1]);
      user.ΔⵠᐃⵠᐃⲆⲆ.ᐃᐃⲆΔᐃᐃΔ = v2988[1];
      this.ᐃⲆᐃΔⵠ(v751[2017]);
      if (this.ᐃᐃⲆΔ.ⲆⵠⵠΔᐃ == this.ⲆⵠⵠΔᐃ) {
        this.ⲆⵠⵠΔᐃ++;
        game.ᐃᐃΔⵠⵠ(scoreboard.ⲆΔᐃᐃⲆ);
        this.ᐃᐃⲆΔ.close();
        try {
          vWindow.Widget.adsRefresh();
        } catch (e) {}
      }
    };
    this.ping = function () {
      this.ᐃᐃⲆΔ[v2244]("[15]");
    };
    this.ᐃⵠⵠΔᐃⵠΔⵠᐃ = function () {
      if (this.ᐃᐃⲆΔ.readyState == 3) {
        this.ⲆⵠⵠⲆᐃΔⲆ -= 600000;
      }
    };
    this.ⵠᐃᐃⵠΔⵠⵠᐃⵠ = function () {
      if (v3064 > 5) {
        this.ⲆⵠⵠⲆᐃΔⲆ = v3065;
      }
      if (v3065 - this.ⲆⵠⵠⲆᐃΔⲆ > 600000) {
        this.ⲆⵠⵠⲆᐃΔⲆ = v3065;
        this.ΔⵠΔΔᐃⲆⲆⲆⲆ();
      }
    };
    this.ΔⲆⵠⵠⵠᐃⲆΔⲆ = function (p1883) {
      v3081++;
      clearTimeout(this.ΔⵠⲆᐃΔΔⵠ);
      document.getElementById("commandMainBoxName").innerHTML = this.ⲆⲆⲆⵠⵠ[this.ⵠΔⵠΔΔ][this.ⲆⲆᐃⵠᐃⵠᐃ[this.ⵠΔⵠΔΔ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⲆⵠⵠⲆᐃΔⲆ = v3065;
      user.ᐃⵠᐃⵠ.ⵠⲆⲆΔⲆ.ⲆΔⵠΔⵠ = user.ᐃⵠᐃⵠ.ⵠⲆⲆΔⲆ.ᐃⵠⲆΔⲆ;
      user.ᐃⵠᐃⵠ.ⲆⵠⵠⵠⲆⲆⲆ.ⲆΔⵠΔⵠ = user.ᐃⵠᐃⵠ.ⲆⵠⵠⵠⲆⲆⲆ.ᐃⵠⲆΔⲆ;
      user.ᐃⵠᐃⵠ.ⵠⲆΔⲆᐃⲆⲆ.ⲆΔⵠΔⵠ = user.ᐃⵠᐃⵠ.ⵠⲆΔⲆᐃⲆⲆ.ᐃⵠⲆΔⲆ;
      user.ᐃⵠᐃⵠ.ⲆⲆⲆⲆᐃΔⵠ.ⲆΔⵠΔⵠ = user.ᐃⵠᐃⵠ.ⲆⲆⲆⲆᐃΔⵠ.ᐃⵠⲆΔⲆ;
      user.ᐃⵠᐃⵠ.ᐃⵠⵠᐃᐃⵠⵠ.ⲆΔⵠΔⵠ = user.ᐃⵠᐃⵠ.ᐃⵠⵠᐃᐃⵠⵠ.ᐃⵠⲆΔⲆ;
      user.ᐃⵠᐃⵠ.ΔΔⵠᐃ = 1;
      user.ᐃⵠᐃⵠ.c = 1;
      user.ᐃⵠᐃⵠ.ⵠⲆⵠ = 1;
      user.ᐃⵠᐃⵠ.ᐃⵠⲆ = 1;
      user.ᐃⵠᐃⵠ.ΔⲆΔ = 1;
      user.ᐃⵠᐃⵠ.ⵠΔⲆⲆΔⲆⵠ = 1;
      user.ᐃⲆⲆⵠᐃᐃΔ = vVVVV1423;
      game.ᐃΔⵠᐃⲆ.display = 0;
      v2257.ᐃΔΔᐃⲆᐃⵠ = p1883[29];
      v2257.ⲆⵠΔⵠⲆᐃⵠ = p1883[30];
      v2257.ⵠΔΔΔⲆΔΔ = 16;
      user.ᐃⵠⲆⲆ.ᐃᐃⲆᐃᐃ = [];
      user.ᐃⵠⲆⲆ.ᐃⵠΔⵠ = [];
      user.ᐃⵠⲆⲆ.max = 10;
      user.ᐃⵠⲆⲆ.ΔⵠᐃⲆⲆΔΔ = 0;
      user.ᐃⵠⲆⲆ.Δⵠᐃⵠᐃ = 0;
      user.ᐃⵠⲆⲆ.id = -1;
      game.ⲆⵠⵠⲆΔᐃⵠ = 1;
      game.ΔΔᐃⵠⵠᐃⵠ = 1;
      game.ⲆⵠᐃⲆⵠᐃⲆ = 1;
      game.ⵠΔⲆⵠᐃᐃᐃ = 1;
      user.ⵠᐃⲆΔⲆ = true;
      user.ᐃⵠⲆⲆ.ΔᐃΔⵠⲆⵠⵠ.stop();
      user.ⵠⲆⲆᐃ.ΔᐃⵠⲆⲆ = [];
      user.ⵠⲆⲆᐃ.ⵠⲆⲆᐃᐃ = false;
      user.ⵠⲆⲆᐃ.ᐃᐃⵠΔᐃΔⲆⲆⲆ = vVVVV1422;
      user.ⵠⲆⲆᐃ.ᐃᐃⲆⲆ = -1;
      user.ⵠⲆⲆᐃ.id = -1;
      user.ⵠⲆⲆᐃ.ᐃΔⲆᐃᐃⵠΔ = false;
      user.ⵠⲆⲆᐃ.ΔᐃⲆΔᐃ = vVV14;
      user.ⵠⲆⲆᐃ.ⵠΔⲆΔⵠ = false;
      user.ⵠⲆⲆᐃ.ⲆᐃΔⲆΔᐃᐃ = false;
      user.ⵠⲆⲆᐃ.timeout = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 1, 0, 1, 1);
      user.ΔⲆΔᐃΔ.timeout = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 1, 0, 1 / 10, 1);
      user.ΔⲆΔᐃΔ.wait = false;
      user.ⵠⲆⲆᐃⲆ.timeout = new Δᐃᐃ.Ⲇⵠᐃᐃ(false, 0, 1, 0, 1 / 5, 1);
      user.ⵠⲆⲆᐃⲆ.wait = false;
      user.ᐃΔⵠⵠᐃ.timeout = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVVV145, 0, 1, 0, 1, 1);
      user.ᐃΔⵠⵠᐃ.wait = vVVVVV142;
      user.ⲆΔⵠΔᐃ.id = -1;
      user.ⲆΔⵠΔᐃ.ΔⲆᐃⲆ = -1;
      user.ⲆΔⵠΔᐃ.wait = false;
      user.ⲆΔⵠΔᐃ.timeout = new Δᐃᐃ.Ⲇⵠᐃᐃ(vVV1422, 0, 1, 0, 1 / 30, 1);
      game.ΔΔΔⲆⲆ.ΔᐃⵠⲆᐃⲆⲆ.x = -1;
      game.ΔΔΔⲆⲆ.ΔᐃⵠⲆᐃⲆⲆ.y = -1;
      game.ⲆΔᐃᐃᐃ.open = false;
      game.ΔΔΔⲆⲆ.players = [];
      user.ᐃΔΔΔⲆⵠⵠ.enabled = v14;
      world.mode = p1883[1];
      if (p1883[20] !== undefined && p1883[21] !== undefined) {
        world.nw = p1883[20];
        world.nh = p1883[21];
        world.w = world.nw * world.ⵠᐃⵠᐃᐃⲆⲆ;
        world.ⵠⲆⵠ = world.ᐃᐃᐃᐃⵠⵠⲆ * world.nh;
      }
      world.ᐃΔΔⵠᐃⵠᐃ = p1883[22];
      world.ΔⲆΔⲆᐃ = p1883[23];
      vThis5.ⵠΔᐃⵠΔΔΔ(p1883[24]);
      vThis5.ᐃΔⵠⵠΔᐃΔⲆⵠ(p1883[25]);
      vThis5.ⲆΔⵠⵠΔⵠΔᐃᐃ(p1883[28]);
      vThis5.ΔⲆⵠⵠⵠⵠⵠᐃᐃ(p1883[31]);
      vThis5.ΔᐃⲆⵠᐃᐃⵠᐃᐃ(p1883[32]);
      user.ⲆⵠⲆⲆⲆ.ⲆⲆΔⲆΔ = p1883[26];
      user.ᐃⲆⵠᐃᐃⵠᐃ = 0;
      user.ⵠⵠᐃⵠΔ.ⲆⲆΔⲆΔ = p1883[27];
      world.ΔΔⵠᐃⲆⲆⲆᐃⵠ(p1883[19]);
      world.time = p1883[5];
      world.ⲆᐃⲆⵠᐃ.ⵠΔⲆΔᐃ = p1883[15];
      world.ⲆᐃⲆⵠᐃ.ΔᐃΔⲆⵠ = new Date().getTime();
      game.ΔΔΔⵠ.ⵠⵠᐃΔⲆⲆⲆ = p1883[16];
      world.transition = vVV145;
      user.Δⵠⵠ = p1883[2];
      game.ΔΔΔⵠ.reset();
      user.ΔΔⲆⲆⲆ = p1883[8];
      world.units[0] = [];
      world.units[105] = [];
      world.units[106] = [];
      world.units[104] = [];
      world.units[2] = [];
      world.units[1] = [];
      world.units[6] = [];
      world.units[3] = [];
      world.units[40] = [];
      world.units[46] = [];
      world.units[52] = [];
      world.units[53] = [];
      world.units[48] = [];
      world.units[49] = [];
      world.units[63] = [];
      world.units[66] = [];
      world.units[64] = [];
      world.units[4] = [];
      world.units[7] = [];
      world.units[8] = [];
      world.units[9] = [];
      world.units[10] = [];
      world.units[15] = [];
      world.units[16] = [];
      world.units[17] = [];
      world.units[54] = [];
      world.units[55] = [];
      world.units[56] = [];
      world.units[57] = [];
      world.units[58] = [];
      world.units[62] = [];
      world.units[11] = [];
      world.units[22] = [];
      world.units[23] = [];
      world.units[5] = [];
      world.units[12] = [];
      world.units[13] = [];
      world.units[14] = [];
      world.units[67] = [];
      world.units[77] = [];
      world.units[78] = [];
      world.units[79] = [];
      world.units[80] = [];
      world.units[81] = [];
      world.units[86] = [];
      world.units[89] = [];
      world.units[90] = [];
      world.units[87] = [];
      world.units[88] = [];
      world.units[93] = [];
      world.units[94] = [];
      world.units[99] = [];
      world.units[98] = [];
      world.units[43] = [];
      world.units[72] = [];
      world.units[73] = [];
      world.units[74] = [];
      world.units[69] = [];
      world.units[70] = [];
      world.units[85] = [];
      world.units[84] = [];
      world.units[82] = [];
      world.units[83] = [];
      world.units[71] = [];
      world.units[76] = [];
      world.units[75] = [];
      world.units[91] = [];
      world.units[101] = [];
      world.units[95] = [];
      world.units[96] = [];
      world.units[97] = [];
      world.units[92] = [];
      world.units[100] = [];
      world.units[103] = [];
      world.units[102] = [];
      world.units[68] = [];
      world.units[18] = [];
      world.units[19] = [];
      world.units[20] = [];
      world.units[21] = [];
      world.units[59] = [];
      world.units[61] = [];
      world.units[60] = [];
      world.units[38] = [];
      world.units[65] = [];
      world.units[39] = [];
      world.units[47] = [];
      world.units[42] = [];
      world.units[41] = [];
      world.units[24] = [];
      world.units[25] = [];
      world.units[26] = [];
      world.units[27] = [];
      world.units[28] = [];
      world.units[29] = [];
      world.units[30] = [];
      world.units[31] = [];
      world.units[32] = [];
      world.units[33] = [];
      world.units[34] = [];
      world.units[35] = [];
      world.units[36] = [];
      world.units[37] = [];
      world.units[51] = [];
      world.units[50] = [];
      world.units[44] = [];
      world.units[45] = [];
      world.fast_units = [];
      world.ᐃⲆⵠΔⵠⵠⲆ = p1883[7];
      user.id = p1883[9];
      user.ᐃᐃⵠⵠ = world.ᐃⲆⵠΔⵠⵠⲆ * user.id;
      if (v3031.loaded) {
        v3031.players[0].ᐃᐃⵠⵠ = user.ᐃᐃⵠⵠ;
        v3031.players[0].ᐃᐃⵠᐃⵠⵠΔ = 0;
      }
      v3059.ΔΔⲆᐃΔⲆⵠ();
      user.ᐃⵠⵠ.ⵠⵠᐃⲆΔ(p1883[3], p1883[10]);
      world.players = [];
      var v2990 = world.players;
      for (var v2991 = 0; v2991 < p1883[11]; v2991++) {
        v2990.push(new f457());
      }
      v2991 = 0;
      for (var v2992 = p1883[4]; v2992.length > v2991; v2991++) {
        var v2993 = v2990[v2992[v2991].i];
        v2993.ᐃⲆᐃⵠⲆ = v2992[v2991].n;
        v2993.ⲆΔⲆⲆ = v2992[v2991].s;
        v2993.ⵠᐃΔᐃΔ = v2992[v2991].a;
        v2993.ΔⲆⵠΔΔ = v2992[v2991].c;
        v2993.ⵠΔᐃΔᐃ = v2992[v2991].b;
        v2993.ΔⵠΔⲆᐃ = v2992[v2991].d;
        v2993.ΔΔΔⲆΔⲆᐃ = v2992[v2991].g;
        v2993.level = v2992[v2991].l;
        v2993.Ⲇⵠⵠᐃᐃ = Δᐃᐃ.ᐃⵠᐃⲆⲆⵠⲆ(v2992[v2991].p);
        v2993.ⵠᐃⲆΔⲆ = true;
        if (v2245 === 1) {
          v2993.ᐃⲆᐃⵠⲆ += "|" + v2992[v2991].i;
        }
      }
      user.ⵠⵠᐃⲆᐃ.sort();
      if (world.mode === 1 && world.players[user.id].ᐃⲆᐃⵠⲆ === "spectator") {
        user.ⲆⲆΔⵠⲆᐃⵠ = true;
      } else {
        user.ⲆⲆΔⵠⲆᐃⵠ = vVVV14;
      }
      if (world.mode === 2 && world.players[user.id].ⲆΔⲆⲆ === 0) {
        user.ⲆΔᐃⲆΔ = true;
      } else {
        user.ⲆΔᐃⲆΔ = false;
      }
      if (world.mode === 3 && world.players[user.id].ⲆΔⲆⲆ === 0) {
        user.ᐃⲆᐃΔⵠᐃⵠ = true;
      } else {
        user.ᐃⲆᐃΔⵠᐃⵠ = false;
      }
      ⲆᐃΔⵠ.set("starve_token", user.ⵠᐃᐃᐃⲆ);
      if (p1883[12] === 0) {
        user.ᐃᐃᐃᐃⲆ.ⲆⲆᐃΔⲆ = 0;
        game.ΔΔΔⵠ.restore(p1883[17]);
        var v2994 = p1883[14];
        if (v2994[47]) {
          user.ᐃⵠⲆⲆ.ΔΔΔⲆⲆᐃⲆ(1, 0);
        }
        for (v2991 = 0; v2994.length > v2991; v2991++) {
          if (v2994[v2991]) {
            if (v2991 == 47) {
              continue;
            }
            if (v2991 == 7) {
              continue;
            }
            this.ⲆⲆⲆⵠⵠΔΔ([0, v2991, v2994[v2991]]);
          }
        }
        user.ᐃᐃᐃᐃⲆ.open = false;
      } else {
        if (world.mode === 3) {
          if (user.ᐃⲆᐃΔⵠᐃⵠ) {
            this.ⲆⲆⲆⵠⵠΔΔ([0, 292, 4]);
          } else {
            this.ⲆⲆⲆⵠⵠΔΔ([0, 293, 3]);
          }
        }
        if (world.mode === 0 || world.mode === 3 || world.mode === 7 || world.mode === 4) {
          user.ᐃᐃᐃᐃⲆ.ⲆⲆᐃΔⲆ = new Date().getTime();
          user.ᐃᐃᐃᐃⲆ.open = true;
          user.ᐃᐃᐃᐃⲆ.value = p1883[13];
          game.ᐃᐃᐃᐃⲆ.ΔᐃΔⲆⵠ();
        } else {
          user.ᐃᐃᐃᐃⲆ.ⲆⲆᐃΔⲆ = 0;
          user.ᐃᐃᐃᐃⲆ.open = false;
          user.ᐃᐃᐃᐃⲆ.value = 0;
        }
        user.ΔⲆⵠΔⲆᐃΔ = p1883[12].toString();
      }
      user.ⵠΔⵠⵠΔ.enabled = p1883[6];
      user.ⵠΔⵠⵠΔ.ⲆⲆᐃΔⲆ = -1;
      user.ⵠΔⵠⵠΔ.label = null;
      user.ⵠΔⵠⵠΔ.now = -1;
      ⲆᐃΔⵠ.set("starve_token_id", user.ΔⲆⵠΔⲆᐃΔ);
      if (user.reconnect.enabled) {
        user.reconnect.rotate = 0;
        user.reconnect.enabled = vVV144;
      } else {
        v2833.ᐃᐃΔⵠⵠ(game.ⲆΔᐃᐃⲆ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + v2833.ⲆΔⲆⲆ + "A" + v2833.ⵠᐃΔᐃΔ);
        }
      }
    };
    this.connect = function () {
      vThis5.ⲆⵠΔΔΔᐃᐃ = 0;
      vThis5.ⵠᐃΔⲆⵠⲆΔ();
    };
    this.ⵠⲆⲆⲆᐃⵠⵠ = [];
    this.ⲆⲆⲆⲆⵠⲆᐃᐃⵠ = function (p1884) {
      const v2995 = vThis5.ⵠΔⲆⵠⲆ.filter(p1885 => p1885.gm === p1884);
      const v2996 = {};
      for (let v2997 = 0; v2997 < v2995.length; v2997++) {
        const v2998 = v2995[v2997];
        const v2999 = v2998.r;
        if (v2999 !== undefined) {
          if (v2996[v2999] === undefined) {
            v2996[v2999] = [];
          }
          v2996[v2999].push(v2998);
        }
      }
      function o(p1886) {
        vThis5.ⵠⲆⲆⲆᐃⵠⵠ[p1884] = p1886;
        const v3000 = v2996[p1886];
        const v3001 = v3000[Math.floor(Math.random() * v3000.length)];
        vThis5.ⲆⲆΔΔᐃᐃΔ({
          domain: v2250,
          is_tls: 1,
          id: v3001.id,
          p: v3001.p
        });
      }
      if (vThis5.ⵠⲆⲆⲆᐃⵠⵠ[p1884] !== vVVVVUndefined14) {
        o(vThis5.ⵠⲆⲆⲆᐃⵠⵠ[p1884]);
        return;
      }
      let v3002 = 1;
      function h(p1887) {
        const v3003 = new vWindow.XMLHttpRequest();
        const v3004 = p1887[0];
        const v3005 = v3004.p;
        const v3006 = v3004.r;
        const v3007 = v3005[Math.floor(Math.random() * v3005.length)];
        v3003.open("GET", "https://" + v3007 + "." + v2250 + "/", true);
        v3003.onreadystatechange = function () {
          if (v3003.readyState === 4) {
            if (v3002 === 0) {
              return;
            }
            v3002 = 0;
            o(v3006);
          }
        };
        v3003.send();
      }
      for (let v3008 in v2996) {
        h(v2996[v3008]);
      }
      vWindow.setTimeout(function () {
        if (v3002 === 0) {
          return;
        }
        v3002 = 0;
        const v3009 = vWindow.Object.keys(v2996);
        o(v3009[Math.floor(v3009.length * Math.random())]);
      }, 5000);
    };
    this.ᐃⲆⲆᐃⵠⲆᐃⲆⲆ = function () {
      let v3010 = v2257.ΔΔᐃΔᐃΔⵠ[vThis5.ⵠΔⵠΔΔ];
      console.log(vVVVUndefined58, undefined, undefined);
      let v3011 = vThis5.ⲆⲆᐃⵠᐃⵠᐃ[vThis5.ⵠΔⵠΔΔ];
      let v3012 = vThis5.ⵠΔⲆⵠⲆ.find(p1888 => p1888.gm == v3010 && p1888.idx == v3011);
      if (v3012 === undefined) {
        vThis5.ⲆⲆⲆⲆⵠⲆᐃᐃⵠ(v3010);
      } else {
        vThis5.ⲆⲆΔΔᐃᐃΔ({
          domain: v2250,
          is_tls: 1,
          id: v3012.id,
          p: v3012.p
        });
      }
    };
    this.ⵠᐃΔⲆⵠⲆΔ = function () {
      console.log(undefined);
      if (vVVVVUndefined1422 === v2248 || v2249 === vVVVVVVUndefined14) {
        if (v2247 === undefined) {
          vThis5.ᐃⲆⲆᐃⵠⲆᐃⲆⲆ();
        } else {
          vThis5.ⲆⲆΔΔᐃᐃΔ({
            domain: v2247.domain,
            is_tls: v2247.ssl,
            id: v2247.id,
            p: [v2247.p]
          });
        }
      } else {
        vThis5.ⲆⲆΔΔᐃᐃΔ({
          domain: v2250,
          is_tls: 1,
          id: v2249 + v2248,
          p: vThis5.ᐃⵠΔⲆⵠᐃⵠ[v2249]
        });
      }
    };
    this.ⲆⲆΔΔᐃᐃΔ = function (p1889) {
      let v3013 = p1889.domain;
      let v3014 = p1889.is_tls;
      let v3015 = p1889.id;
      let v3016 = p1889.p;
      let v3017 = v3016[Math.floor(Math.random() * v3016.length)];
      let v3018 = v3014 ? "wss://" + v3017 + "." + v3013 + "/" + v3015 + "?" + user.ΔⲆⵠⲆⲆΔⵠ : "ws://" + v3013;
      console.log(vVVVVUndefined14, undefined);
      vThis5.ᐃᐃⲆΔ = new vWindow.WebSocket(v3018);
      vThis5.ᐃᐃⲆΔ.binaryType = "arraybuffer";
      vThis5.ᐃᐃⲆΔ.ⲆⵠⵠΔᐃ = vThis5.ⲆⵠⵠΔᐃ;
      vThis5.ᐃᐃⲆΔ.onmessage = function (p1890) {
        if (vThis5.ⲆⵠⵠΔᐃ == vThis5.ⲆⵠⵠΔᐃ) {
          if (typeof p1890.data == "string") {
            var v3019 = JSON.parse(p1890.data);
            switch (v3019[0]) {
              case 0:
                vThis5.ⲆΔⲆᐃⲆ(v3019);
                break;
              case 1:
                vThis5.ⲆⵠᐃⲆΔᐃΔ(v3019[1]);
                break;
              case 2:
                vThis5.ΔⲆᐃⲆⲆⲆᐃⵠⵠ(v3019);
                break;
              case 3:
                vThis5.ΔⲆⵠⵠⵠᐃⲆΔⲆ(v3019);
                break;
              case 4:
                vThis5.message(v3019[1]);
                break;
              case 5:
                vThis5.ᐃΔⲆΔΔᐃΔ(v3019);
                break;
              case 6:
                vThis5.ⵠΔᐃⵠΔΔΔ(v3019[1]);
            }
          } else {
            var vF55 = function (p1891, p1892, p1893) {
              const v3020 = new Uint8Array(p1891);
              const v3021 = v3020.length;
              let v3022;
              let v3023;
              let v3024 = v2254[v3021];
              if (v3024 === undefined) {
                v2255 += v3021 * 2;
                if (v2255 < 65535) {
                  v3022 = vVVUndefined(vVVVUndefined53(v3021));
                } else {
                  v2255 = v3021;
                  for (let v3025 = 0; v2254.length > v3025; v3025++) {
                    if (v2254[v3025] !== undefined) {
                      const v3026 = v2254[v3025][0];
                      v2254[v3025] = undefined;
                      v30(v3026);
                    }
                  }
                  v3022 = vVVUndefined(vVVVUndefined53(v3021));
                  v32();
                }
                v3023 = f5(v3022);
                v2254[v3021] = [v3022, v3023];
              } else {
                v3022 = v3024[0];
                v3023 = v3024[1];
              }
              for (let v3027 = 0; v3020.length > v3027; v3027++) {
                v3023[v3027] = v3020[v3027];
              }
              vVUndefined11(v3022, p1892, p1893);
              for (let v3028 = 0; v3020.length > v3028; v3028++) {
                v3020[v3028] = v3023[v3028];
              }
              return v3020;
            }(p1890.data, user.ΔⵠⵠⲆΔΔᐃ, user.ⲆⲆΔΔⲆΔΔΔᐃ);
            var v3029 = vF55.buffer;
            switch (vF55[0]) {
              case 0:
                vThis5.units(v3029, vF55, false);
                break;
              case 1:
                vThis5.units(v3029, vF55, true);
                break;
              case 2:
                vThis5.ⲆΔⵠΔΔⵠⲆᐃΔ();
                break;
              case 3:
                vThis5.ⲆⲆⲆⵠⵠΔΔ(new Uint16Array(v3029));
                break;
              case 4:
                vThis5.ⲆⲆⵠⲆΔᐃⲆΔᐃ();
                break;
              case 5:
                vThis5.ⲆᐃⵠⲆΔⵠΔΔΔ();
                break;
              case 6:
                vThis5.ⵠΔᐃᐃΔᐃᐃᐃᐃ();
                break;
              case 7:
                vThis5.ⲆΔⵠⵠᐃᐃⲆᐃⵠ(v3029);
                break;
              case 8:
                vThis5.ⵠⲆⲆΔⵠⵠΔⵠΔ(vF55[1] + vF55[2] * 256);
                break;
              case 9:
                vThis5.ⲆⵠΔⵠⵠᐃΔⲆⲆ(vF55[1] + (vF55[2] << 8));
                break;
              case 10:
                vThis5.ΔⵠΔᐃⵠⲆΔ();
                break;
              case 11:
                vThis5.ΔᐃΔⵠⵠᐃΔ(vF55[1] + (vF55[2] << 8), vF55[3]);
                break;
              case 12:
                vThis5.ᐃΔⲆᐃᐃⵠΔ(vF55[1]);
                break;
              case 13:
                vThis5.ⲆⲆⲆⵠΔⵠᐃⲆⲆ(vF55, v3029);
                break;
              case 14:
                vThis5.ⲆΔⲆⲆᐃᐃΔⵠΔ();
                break;
              case 15:
                vThis5.ᐃΔⲆⲆⲆΔⵠΔⲆ(vF55[1]);
                break;
              case 16:
                vThis5.ᐃⵠᐃⵠ(vF55[1], vF55[2], vF55[3], vF55[4], vF55[5], vF55[6], vF55[7]);
                break;
              case 17:
                vThis5.ΔⵠΔⲆⲆΔᐃᐃΔ(v3029);
                break;
              case 18:
                vThis5.ⲆᐃⲆⲆᐃⵠⵠⲆᐃ();
                break;
              case 19:
                vThis5.ⵠΔⲆΔⵠ(vF55[1]);
                break;
              case 20:
                vThis5.ΔᐃⲆᐃⵠⵠⵠⲆᐃ();
                break;
              case 21:
                vThis5.ΔΔΔᐃ(v3029);
                break;
              case 22:
                vThis5.ᐃΔᐃⲆⵠⲆⲆⵠⵠ(vF55[1]);
                break;
              case 23:
                vThis5.ᐃᐃᐃΔⵠⲆⵠⵠⵠ(v3029);
                break;
              case 24:
                vThis5.ⵠΔⲆⵠᐃΔⵠⵠᐃ(vF55[1] + vF55[2] * 256);
                break;
              case 25:
                vThis5.ΔᐃΔΔΔⲆⲆΔΔ(vF55[1], v3029);
                break;
              case 26:
                vThis5.ΔΔΔⲆⲆ(vF55);
                break;
              case 27:
                vThis5.ⲆᐃᐃⵠⵠⲆⲆᐃΔ();
                break;
              case 28:
                vThis5.ⵠΔⵠⵠΔ(vF55[1]);
                break;
              case 29:
                vThis5.ⲆΔⵠⵠΔⵠⲆⵠᐃ();
                break;
              case 30:
                vThis5.ⲆᐃᐃⵠⵠⵠΔⲆᐃ();
                break;
              case 31:
                vThis5.ⵠΔΔΔⵠΔΔⵠⵠ(vF55);
                break;
              case 32:
                vThis5.ⵠⵠⵠᐃⵠΔⲆⲆⵠ(vF55[1]);
                break;
              case 33:
                vThis5.ⲆΔⵠΔⲆᐃΔⲆᐃ(vF55[1]);
                break;
              case 34:
                vThis5.ⲆⵠⲆⲆᐃᐃΔᐃΔ();
                break;
              case 35:
                vThis5.ᐃᐃᐃᐃΔᐃΔⵠⵠ(vF55[1] + (vF55[2] << 8));
                break;
              case 36:
                vThis5.ⲆᐃΔⲆΔᐃᐃ(vF55[1]);
                break;
              case 37:
                vThis5.ᐃⵠΔⵠⵠᐃⲆⲆᐃ(vF55[1], vF55[2]);
                break;
              case 38:
                vThis5.ⵠᐃⵠΔⵠΔΔΔⵠ(vF55[1]);
                break;
              case 39:
                vThis5.ⵠΔΔⲆᐃⵠⲆⵠΔ(vF55[1]);
                break;
              case 40:
                vThis5.ⵠᐃⲆᐃᐃⵠⵠⲆΔ();
                break;
              case 41:
                vThis5.ᐃⲆΔⵠΔⲆⲆⵠΔ(new Uint16Array(v3029));
                break;
              case 42:
                vThis5.ᐃⲆⲆΔⲆΔᐃᐃᐃ(vF55[1] + (vF55[2] << 8));
                break;
              case 43:
                vThis5.ⵠᐃᐃⵠⵠⲆᐃⵠᐃ(vF55[1] + vF55[2] * 256);
                break;
              case 44:
                vThis5.ⵠΔⲆᐃᐃⵠⲆΔⵠ(vF55[1] + (vF55[2] << 8));
                break;
              case 45:
                vThis5.ⵠᐃⲆⲆΔᐃΔΔⵠ(vF55[1] + (vF55[2] << 8));
                break;
              case 46:
                vThis5.ᐃΔᐃⵠⵠΔᐃΔΔ(vF55[1] + vF55[2] * 256);
                break;
              case 47:
                vThis5.ΔᐃⲆΔᐃ(vF55[1]);
                break;
              case 48:
                vThis5.ΔᐃΔᐃⲆΔⵠᐃⲆ();
                break;
              case 50:
                vThis5.ⵠⵠᐃⲆΔⵠⲆᐃᐃ(vF55[1] + (vF55[2] << 8), vF55[3], vF55[4]);
                break;
              case 51:
                vThis5.ᐃⲆΔⲆΔᐃⲆⲆⲆ();
                break;
              case 52:
                vThis5.ⵠᐃⲆᐃΔⵠⵠᐃΔ(vF55[1] + (vF55[2] << 8));
                break;
              case 53:
                vThis5.ᐃΔΔⵠΔΔΔᐃᐃ(vF55[1] + (vF55[2] << 8));
                break;
              case 54:
                vThis5.ΔᐃⲆᐃⵠᐃⵠⲆⵠ();
                break;
              case 55:
                vThis5.ᐃᐃⵠⵠⵠᐃⵠᐃⲆ(vF55[1]);
                break;
              case 56:
                vThis5.ⵠΔⵠΔⵠⲆⲆᐃⵠ(vF55[1]);
                break;
              case 57:
                vThis5.ⲆᐃⵠⲆΔΔⵠΔΔ();
                break;
              case 58:
                vThis5.ΔⵠⵠΔᐃᐃⲆᐃΔ();
                break;
              case 59:
                vThis5.ⵠⲆᐃΔᐃⵠⵠⵠᐃ();
                break;
              case 60:
                vThis5.ᐃⵠᐃΔⲆΔΔⲆⵠ();
                break;
              case 61:
                user.ᐃⵠⵠ.ⲆΔΔᐃᐃⲆⵠ = 0.2;
                user.ᐃⵠⵠ.ⲆⲆᐃΔⲆ = 3;
                break;
              case 62:
                vThis5.ΔⵠⲆᐃᐃⲆᐃΔⲆ(new Uint16Array(v3029));
                break;
              case 63:
                vThis5.ⵠⲆⵠΔⵠⵠⵠΔᐃ();
                break;
              case 64:
                vThis5.ΔΔΔⵠⵠⵠⲆᐃΔ();
                break;
              case 65:
                vThis5.ⲆⲆᐃΔᐃⲆⲆⲆⵠ();
                break;
              case 66:
                vThis5.ⲆⵠΔⲆⵠⲆᐃⲆᐃ();
                break;
              case 67:
                vThis5.ΔⲆᐃⵠΔⲆⲆⲆᐃ(vF55[1]);
                break;
              case 68:
                vThis5.ⲆΔΔΔⵠᐃᐃᐃΔ(vF55[1]);
                break;
              case 69:
                vThis5.ᐃⲆⵠᐃᐃⵠᐃ(vF55[1]);
                break;
              case 70:
                vThis5.ⵠᐃᐃⵠⵠᐃᐃΔᐃ(vF55[1]);
                break;
              case 71:
                vThis5.ᐃⲆᐃΔᐃ(vF55[1]);
            }
          }
        }
      };
      vThis5.ᐃᐃⲆΔ.onerror = function () {
        if (user.reconnect.enabled) {
          vWindow.setTimeout(vThis5.timeout, 2500);
        }
      };
      this.ᐃᐃⲆΔ.onopen = function () {
        clearTimeout(vThis5.ΔⵠⲆᐃΔΔⵠ);
        user.ΔⲆᐃⵠΔⵠⲆ = user.ΔⲆᐃⵠΔⵠⲆ || Δᐃᐃ.ⲆⵠⵠΔΔᐃᐃ("token");
        Δᐃᐃ.ⲆⲆⵠΔᐃᐃᐃ().then(p1894 => {
          vThis5.ᐃᐃⲆΔ[v2244](vVVVVVVVVVVWindow[v459].stringify([v2833.ᐃⲆᐃⵠⲆ.input.value, screen.width + 200, screen.height + 200, 52, user.ⵠᐃᐃᐃⲆ, user.ΔⲆⵠΔⲆᐃΔ, user.reconnect.enabled ? 1 : 0, v2833.ⲆΔⲆⲆ, v2833.ⵠᐃΔᐃΔ, v2833.Δⵠᐃⵠᐃ, v2833.ⵠΔᐃΔᐃ, v2833.ΔⲆⵠΔΔ, v2833.ΔⵠΔⲆᐃ, vUndefined6 === vVVVVUndefined143 ? 0 : vUndefined6, vUndefined5 === undefined ? 0 : vUndefined5.substring(vUndefined5.length - 50), v2246, user.ΔⲆᐃⵠΔⵠⲆ, p1894, user.ᐃΔᐃᐃΔⵠΔ, user.ᐃⵠᐃΔⲆⲆⲆ]));
          user.ΔⲆᐃⵠΔⵠⲆ = undefined;
          user.ᐃΔᐃᐃΔⵠΔ = vVVVVUndefined1422;
          user.ᐃⵠᐃΔⲆⲆⲆ = undefined;
          user.ΔⲆⵠⲆⲆΔⵠ = undefined;
          vThis5.ΔⵠⲆᐃΔΔⵠ = setTimeout(vThis5.timeout, 2000);
        });
      };
    };
  }();
  var game = {
    ΔΔΔⵠᐃ: false
  };
  var v3031 = new function () {
    this.ⲆΔᐃᐃⲆ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ⵠᐃⵠΔⵠᐃᐃ = function (p1895) {
      return p1895 / world.w * 100;
    };
    this.ⵠᐃᐃⵠⵠⲆⲆ = function (p1896) {
      return p1896 / world.ⵠⲆⵠ * 100;
    };
    this.ΔΔᐃᐃᐃᐃΔ = function (p1897, p1898) {
      p1897 = this.ⵠᐃⵠΔⵠᐃᐃ(p1897) - this.ⵠⵠⵠΔⲆ.x;
      return this.ⵠⵠⵠΔⲆ.x + p1898 * p1897;
    };
    this.ⲆⵠΔΔⵠᐃⲆ = function (p1899, p1900) {
      p1899 = Math.abs(this.ⵠᐃᐃⵠⵠⲆⲆ(p1899) - this.ⵠⵠⵠΔⲆ.y);
      return this.ⵠⵠⵠΔⲆ.y + p1900 * p1899;
    };
    this.sample = {};
    this.ⲆⲆᐃΔΔⲆΔ = {};
    this.ⲆⵠⵠΔ = {};
    this.ᐃΔⲆⲆΔΔⲆ = function (p1901, p1902, p1903, p1904) {
      for (var v3032 = 0; v3032 < p1902.length; v3032++) {
        var v3033 = p1902[v3032];
        if (!p1901.playing(v3033)) {
          p1901.pos(p1903, p1904, -0.5, v3033);
          p1901.play(v3033);
          return vVVV63;
        }
      }
      return vVVV145;
    };
    this.ᐃΔⵠ = function (p1905, p1906, p1907, p1908) {
      p1907 = this.ΔΔᐃᐃᐃᐃΔ(p1907, ᐃΔᐃΔⵠ.ⵠⲆᐃᐃⲆᐃᐃ);
      p1908 = this.ⲆⵠΔΔⵠᐃⲆ(p1908, ᐃΔᐃΔⵠ.ⵠⲆᐃᐃⲆᐃᐃ);
      console.log("HIT", p1905, p1906, p1907, p1908, ᐃΔᐃΔⵠ.ⵠⲆᐃᐃⲆᐃᐃ);
      if (p1905) {
        if (p1906 === 1) {
          this.ᐃΔⲆⲆΔΔⲆ(this.ⲆⵠⵠΔ.ᐃᐃⵠⵠⲆⲆΔ, this.sample.ᐃᐃⵠⵠⲆⲆΔ, p1907, p1908);
        } else if (p1906 === 0) {
          this.ᐃΔⲆⲆΔΔⲆ(this.ⲆⵠⵠΔ.ΔⲆⲆⵠΔⲆⵠ, this.sample.ΔⲆⲆⵠΔⲆⵠ, p1907, p1908);
        }
      } else {
        this.ᐃΔⲆⲆΔΔⲆ(this.ⲆⵠⵠΔ.ᐃᐃᐃΔⵠ, this.sample.ᐃᐃᐃΔⵠ, p1907, p1908);
      }
    };
    this.ⵠⵠⵠΔⲆ = {
      y: 0,
      x: 0
    };
    this.ᐃⲆⵠⲆΔⲆⲆ = {
      x: 0,
      y: 0
    };
    this.ᐃᐃΔΔⵠⵠᐃ = {};
    this.players = [];
    this.ᐃⲆⵠᐃΔ = function (p1909, p1910) {
      for (var v3034 in this.ᐃᐃΔΔⵠⵠᐃ) {
        var v3035 = this.ᐃᐃΔΔⵠⵠᐃ[v3034];
        v3035.check(p1909);
        if (v3035.ⲆᐃⲆΔΔⵠⲆ) {
          if (world.ⲆᐃⲆⵠᐃ.now < 460000) {
            v3035.ⵠⲆΔΔᐃ();
          }
          if (p1910) {
            v3035.ⵠᐃᐃ(p1909, this.ⵠⵠⵠΔⲆ);
          }
          if (this.transition) {
            v3035.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⲆⵠᐃⵠᐃⲆᐃⵠⲆ = function () {
      var v3036 = [];
      for (var v3037 = 0; v3037 < this.players.length; v3037++) {
        if ((v3040 = this.players[v3037]).ᐃᐃⵠᐃⵠⵠΔ) {
          v3036.push(v3037);
        } else if (!v3040.ᐃᐃⵠᐃⵠⵠΔ && !world.fast_units[v3040.ᐃᐃⵠⵠ]) {
          v3040.ΔΔΔᐃᐃⵠⲆ();
          v3036.push(v3037);
        }
      }
      var v3038 = world.units[0];
      var v3039 = 0;
      for (v3037 = 0; v3037 < v3038.length && v3036.length > v3039; v3037++) {
        var v3040 = v3038[v3037];
        if ((world.mode != 1 || world.players[v3040.id].ᐃⲆᐃⵠⲆ !== "spectator") && v3040.ΔⵠⵠⲆⲆ === -1 && v3040.ᐃᐃⵠⵠ !== user.ᐃᐃⵠⵠ) {
          this.players[v3036[v3039]].ΔᐃΔⲆⵠ(v3040.ᐃᐃⵠⵠ);
          v3039++;
        }
      }
    };
    this.ⵠᐃⲆⲆⲆⵠᐃΔⲆ = function () {
      this.ⲆⵠᐃⵠᐃⲆᐃⵠⲆ();
      for (var v3041 = 0; this.players.length > v3041; v3041++) {
        var v3042 = this.players[v3041];
        if (!v3042.ᐃᐃⵠᐃⵠⵠΔ && v3042.check()) {
          v3042.ⵠᐃᐃ();
        }
      }
    };
    this.ᐃⵠⵠΔⵠⲆΔⵠΔ = function (p1911) {
      if (this.ᐃⲆⵠⲆΔⲆⲆ.x === p1911.x && p1911.y === this.ᐃⲆⵠⲆΔⲆⲆ.y) {
        return 0;
      } else {
        this.ᐃⲆⵠⲆΔⲆⲆ.x = p1911.x;
        this.ᐃⲆⵠⲆΔⲆⲆ.y = p1911.y;
        this.ⵠⵠⵠΔⲆ.x = this.ⵠᐃⵠΔⵠᐃᐃ(p1911.x);
        this.ⵠⵠⵠΔⲆ.y = this.ⵠᐃᐃⵠⵠⲆⲆ(p1911.y);
        Howler.pos(this.ⵠⵠⵠΔⲆ.x, this.ⵠⵠⵠΔⲆ.y, 0);
        return 1;
      }
    };
    this.ⲆⲆⵠⵠⵠⲆⵠᐃⵠ = function () {
      if (this.ⲆΔᐃᐃⲆ && this.loaded) {
        var v3043 = world.fast_units[user.ᐃᐃⵠⵠ];
        if (v3043) {
          v3043.ΔⵠⵠⲆⲆ = 0;
          var v3044 = this.ᐃⵠⵠΔⵠⲆΔⵠΔ(v3043);
          if (world.mode !== 2 && world.mode !== 5) {
            this.ᐃⲆⵠᐃΔ(v3043, v3044);
          }
          this.ⵠᐃⲆⲆⲆⵠᐃΔⲆ();
        }
      }
    };
    this.ⲆⲆΔⲆⲆⵠⵠΔⵠ = function () {
      for (var v3045 in v2807) {
        var v3046 = v2807[v3045];
        if (typeof v3046 === "object" && v3046.path) {
          v3046.ⵠⲆΔⲆᐃ = new Howl({
            src: v3046.path,
            volume: 0,
            sprite: v3046.ᐃᐃ
          });
        }
        for (var v3047 in v3046.sample) {
          var v3048 = v3046.sample[v3047];
          var v3049 = [];
          console.log(undefined);
          for (var v3050 = 0; v3050 < v3048; v3050++) {
            var v3051 = v3046.ⵠⲆΔⲆᐃ.play(v3047);
            v3046.ⵠⲆΔⲆᐃ.stop(v3051);
            v3046.ⵠⲆΔⲆᐃ.on("fade", function (p1912) {
              if (!this.volume(p1912)) {
                console.log(undefined, undefined);
                this.stop(p1912);
              }
            }, v3051);
            v3049.push(v3051);
          }
          if (v3049.length > 1) {
            v3031.sample[v3047] = v3049;
          } else {
            v3031.sample[v3047] = v3049[0];
          }
          v3031.ⲆⵠⵠΔ[v3047] = v3046.ⵠⲆΔⲆᐃ;
        }
      }
    };
    this.ⲆⲆⵠΔᐃᐃⵠ = function (p1913, p1914, p1915) {
      for (var v3052 = 0; p1913.length > v3052; v3052++) {
        p1914.volume(p1915, p1913[v3052]);
      }
    };
    this.ⲆᐃᐃΔⵠⲆⵠ = function (p1916, p1917, p1918, p1919, p1920, p1921) {
      var vP1916 = p1916;
      for (var v3053 = 0; v3053 < p1918; v3053++) {
        var v3054 = vP1916[v3053] = [];
        for (ΔᐃⵠⲆ = 0; ΔᐃⵠⲆ < p1919; ΔᐃⵠⲆ++) {
          v3054[ΔᐃⵠⲆ] = v3031.sample[p1920 + ΔᐃⵠⲆ][v3053];
          p1917.ⵠⲆΔⲆᐃ.volume(p1921, v3054[ΔᐃⵠⲆ]);
        }
      }
    };
    this.ΔᐃΔⲆⵠ = function () {
      v3031.ⲆⲆΔⲆⲆⵠⵠΔⵠ();
      v3031.ⲆⲆᐃΔΔⲆΔ.ⵠⵠⵠΔᐃⵠΔ = [];
      v3031.ⲆⲆᐃΔΔⲆΔ.ΔⲆΔᐃΔ = [];
      v3031.ⲆⲆᐃΔΔⲆΔ.ᐃⵠΔᐃⲆ = [];
      v3031.ⲆᐃᐃΔⵠⲆⵠ(v3031.ⲆⲆᐃΔΔⲆΔ.ⵠⵠⵠΔᐃⵠΔ, v2807.ΔΔⵠⵠⵠᐃᐃ, 8, 3, "p", 0.15);
      v3031.ⲆᐃᐃΔⵠⲆⵠ(v3031.ⲆⲆᐃΔΔⲆΔ.ΔⲆΔᐃΔ, v2807.ⲆᐃΔᐃΔⲆᐃ, 8, 4, "w", 0.15);
      v3031.ⲆᐃᐃΔⵠⲆⵠ(v3031.ⲆⲆᐃΔΔⲆΔ.ᐃⵠΔᐃⲆ, v2807.ⲆΔⵠᐃⲆᐃΔ, 8, 3, "d", 0.09);
      v3031.ⲆⲆⵠΔᐃᐃⵠ(v3031.sample.ᐃᐃᐃΔⵠ, v3031.ⲆⵠⵠΔ.ᐃᐃᐃΔⵠ, 0.15);
      v3031.ⲆⲆⵠΔᐃᐃⵠ(v3031.sample.ΔⲆⲆⵠΔⲆⵠ, v3031.ⲆⵠⵠΔ.ΔⲆⲆⵠΔⲆⵠ, 0.2);
      v3031.ⲆⲆⵠΔᐃᐃⵠ(v3031.sample.ᐃᐃⵠⵠⲆⲆΔ, v3031.ⲆⵠⵠΔ.ᐃᐃⵠⵠⲆⲆΔ, 1);
      v3031.ᐃᐃΔΔⵠⵠᐃ.ᐃᐃᐃⵠᐃᐃᐃⵠᐃ = new f513(12, this.sample.ⲆΔⲆⲆⵠᐃΔ, this.sample.ⵠΔⵠⵠⵠⵠⵠ, 5000, 0.05, 0.4, v2807.ⲆΔᐃᐃⲆΔⲆ.ⵠⲆΔⲆᐃ, 3000, {
        x: v585.ⵠᐃᐃⵠⵠⵠⲆ,
        y: v585.ᐃΔΔⵠⵠᐃΔ,
        w: world.w,
        ⵠⲆⵠ: world.ⵠⲆⵠ
      }, {
        x: v585.ⵠᐃᐃⵠⵠⵠⲆ - 2300,
        y: v585.ᐃΔΔⵠⵠᐃΔ - 4000,
        w: world.w,
        ⵠⲆⵠ: world.ⵠⲆⵠ
      }, {
        x: v585.ⵠᐃᐃⵠⵠⵠⲆ - 1500,
        y: v585.ᐃΔΔⵠⵠᐃΔ - 2000,
        w: world.w,
        ⵠⲆⵠ: world.ⵠⲆⵠ
      });
      v3031.ᐃᐃΔΔⵠⵠᐃ.ⵠⲆⲆΔⵠᐃΔΔⵠ = new f513(12, this.sample.ⲆᐃⵠⵠΔⵠⵠ, this.sample.ᐃⲆᐃᐃᐃⵠᐃ, 5000, 0.03, 0.25, v2807.ⲆΔᐃᐃⲆΔⲆ.ⵠⲆΔⲆᐃ, 3000, {
        x: 0,
        y: v585.ᐃΔΔⵠⵠᐃΔ + 800,
        w: v585.ⵠᐃᐃⵠⵠⵠⲆ - 2300,
        ⵠⲆⵠ: world.ⵠⲆⵠ
      }, {
        x: -100,
        y: v585.ᐃΔΔⵠⵠᐃΔ - 300,
        w: v585.ⵠᐃᐃⵠⵠⵠⲆ - 100,
        ⵠⲆⵠ: world.ⵠⲆⵠ
      }, {
        x: -100,
        y: v585.ᐃΔΔⵠⵠᐃΔ + 400,
        w: v585.ⵠᐃᐃⵠⵠⵠⲆ - 1400,
        ⵠⲆⵠ: world.ⵠⲆⵠ
      });
      v3031.ᐃᐃΔΔⵠⵠᐃ.ᐃⲆΔⲆΔΔᐃ = new f513(12, this.sample.ⵠⲆΔᐃΔⲆⵠ, this.sample.ⵠΔΔⲆⲆⲆΔ, 5000, 0.01, 0.22, v2807.ⲆΔᐃᐃⲆΔⲆ.ⵠⲆΔⲆᐃ, 3000, {
        x: -100,
        y: -100,
        w: world.w + 200,
        ⵠⲆⵠ: v585.ᐃΔΔⵠⵠᐃΔ - 1000
      }, {
        x: -100,
        y: -100,
        w: world.w + 200,
        ⵠⲆⵠ: v585.ᐃΔΔⵠⵠᐃΔ + 600
      }, {
        x: -100,
        y: -100,
        w: world.w + 200,
        ⵠⲆⵠ: v585.ᐃΔΔⵠⵠᐃΔ + 100
      });
      for (var v3055 = 0; v3055 < 8; v3055++) {
        v3031.players[v3055] = new f515(v3055);
      }
      v3031.players[0].ΔᐃΔⲆⵠ(user.ᐃᐃⵠⵠ);
      v3031.loaded = 1;
    };
    this.ⲆΔᐃⵠⵠᐃΔⲆᐃ = function () {
      if (!this.transition && world.ⲆᐃⲆⵠᐃ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ᐃᐃΔⵠⵠ = function () {
      if (this.ⲆΔᐃᐃⲆ && this.loaded) {
        for (var v3056 in v3031.sample) {
          var v3057 = v3031.sample[v3056];
          if (typeof v3057 === "object") {
            for (var v3058 = 0; v3058 < v3057.length; v3058++) {
              v3031.ⲆⵠⵠΔ[v3056].stop(v3057[v3058]);
            }
          } else {
            v3031.ⲆⵠⵠΔ[v3056].stop(v3057);
          }
        }
        for (v3058 = 0; v3058 < v3031.players.length; v3058++) {
          v3031.players[v3058].ΔΔΔᐃᐃⵠⲆ();
        }
      }
    };
    this.select = function () {
      if (v3031.ⲆΔᐃᐃⲆ) {
        v3031.ᐃᐃΔⵠⵠ();
      } else {
        if (!v3031.loaded) {
          v3031.ΔᐃΔⲆⵠ();
        }
        v3031.players[0].ᐃᐃⵠⵠ = user.ᐃᐃⵠⵠ;
        v3031.players[0].ᐃᐃⵠᐃⵠⵠΔ = 0;
        v3031.ⲆΔᐃⵠⵠᐃΔⲆᐃ();
      }
      v3031.ⲆΔᐃᐃⲆ = !v3031.ⲆΔᐃᐃⲆ;
    };
  }();
  var v3059 = new function () {
    this.ᐃᐃⵠΔⵠᐃⵠ = function () {
      this.ⲆᐃⵠᐃΔ = 81;
      this.ΔΔⲆⲆΔ = 68;
      this.ⵠΔΔᐃⲆ = 90;
      this.ⵠᐃᐃΔᐃⲆᐃ = 83;
    };
    this.ⲆⲆⵠᐃᐃΔⵠ = function () {
      this.ⲆᐃⵠᐃΔ = 65;
      this.ΔΔⲆⲆΔ = 68;
      this.ⵠΔΔᐃⲆ = 87;
      this.ΔⵠⵠΔⲆ = 83;
    };
    this.ᐃᐃΔⵠΔ = 0;
    this.ⵠᐃᐃΔᐃⲆᐃ = 1;
    this.ΔΔⵠⲆᐃᐃⵠ = 49;
    this.ⵠᐃᐃⲆᐃⵠⵠ = 50;
    this.ⲆⲆΔᐃⲆᐃᐃ = 51;
    this.ΔΔᐃᐃⵠⲆⵠ = 52;
    this.ⲆᐃΔᐃⲆⲆΔⵠΔ = 53;
    this.ⲆⲆΔⲆⵠⲆⵠ = 17;
    this.ⲆΔᐃⲆᐃⵠΔ = 37;
    this.ΔⲆⲆⲆⵠΔᐃ = 39;
    this.ⲆⵠⲆⲆᐃⲆⵠ = 38;
    this.ᐃᐃΔⵠᐃⵠⵠ = 40;
    this.ⵠΔΔΔⲆⵠᐃ = 32;
    this.ⵠΔᐃΔᐃⲆᐃ = 82;
    this.ΔΔⵠⲆⲆⵠⲆ = 71;
    this.ΔᐃᐃΔᐃΔⵠ = 86;
    this.ⵠᐃΔⵠⲆΔᐃ = 66;
    this.ⲆⲆⵠᐃᐃΔⵠ();
    this.keys = new Array(255);
    for (var v3060 = 0; v3060 < 255; v3060++) {
      this.keys[v3060] = this.ᐃᐃΔⵠΔ;
    }
    this.up = function (p1922) {
      var v3061 = Math.min(p1922.charCode || p1922.keyCode, 255);
      this.keys[v3061] = this.ᐃᐃΔⵠΔ;
    };
    this.down = function (p1923) {
      var v3062 = Math.min(p1923.charCode || p1923.keyCode, 255);
      if (v3062 == this.ⲆᐃⵠᐃΔ || this.ⲆΔᐃⲆᐃⵠΔ == v3062) {
        this.ᐃᐃⲆΔⵠΔⲆ();
      } else if (this.ⵠΔΔᐃⲆ == v3062 || v3062 == this.ⲆⵠⲆⲆᐃⲆⵠ) {
        this.ⲆⲆᐃᐃᐃᐃⵠ();
      } else if (v3062 == this.ⵠᐃᐃΔᐃⲆᐃ || v3062 == this.ᐃⲆΔⲆⲆΔⵠᐃΔ) {
        this.ᐃᐃΔΔΔᐃᐃ();
      } else if (this.ΔΔⲆⲆΔ == v3062 || v3062 == this.ΔⲆⲆⲆⵠΔᐃ) {
        this.ⵠΔᐃⲆᐃⵠᐃ();
      }
      this.keys[v3062] = this.ⵠᐃᐃΔᐃⲆᐃ;
      return v3062;
    };
    this.ᐃᐃⲆΔⵠΔⲆ = function () {
      this.keys[this.ΔΔⲆⲆΔ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ΔⲆⲆⲆⵠΔᐃ] = this.ᐃᐃΔⵠΔ;
    };
    this.ⵠΔᐃⲆᐃⵠᐃ = function () {
      this.keys[this.ⲆᐃⵠᐃΔ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ⲆΔᐃⲆᐃⵠΔ] = this.ᐃᐃΔⵠΔ;
    };
    this.ᐃᐃΔΔΔᐃᐃ = function () {
      this.keys[this.ⵠΔΔᐃⲆ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ⲆⵠⲆⲆᐃⲆⵠ] = this.ᐃᐃΔⵠΔ;
    };
    this.ⲆⲆᐃᐃᐃᐃⵠ = function () {
      this.keys[this.ΔⵠⵠΔⲆ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ᐃᐃΔⵠᐃⵠⵠ] = this.ᐃᐃΔⵠΔ;
    };
    this.ΔΔⲆᐃΔⲆⵠ = function () {
      this.keys[this.ΔΔⲆⲆΔ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ΔⲆⲆⲆⵠΔᐃ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ⲆᐃⵠᐃΔ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ⲆΔᐃⲆᐃⵠΔ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ⵠΔΔᐃⲆ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ⲆⵠⲆⲆᐃⲆⵠ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ΔⵠⵠΔⲆ] = this.ᐃᐃΔⵠΔ;
      this.keys[this.ᐃᐃΔⵠᐃⵠⵠ] = this.ᐃᐃΔⵠΔ;
    };
    this.ᐃΔⵠⵠᐃᐃΔ = function () {
      return this.keys[this.ⲆᐃⵠᐃΔ] || this.keys[this.ⲆΔᐃⲆᐃⵠΔ];
    };
    this.ΔᐃⵠᐃΔⵠⲆ = function () {
      return this.keys[this.ΔΔⲆⲆΔ] || this.keys[this.ΔⲆⲆⲆⵠΔᐃ];
    };
    this.ᐃᐃⲆⲆᐃⵠΔ = function () {
      return this.keys[this.ⵠΔΔᐃⲆ] || this.keys[this.ⲆⵠⲆⲆᐃⲆⵠ];
    };
    this.ᐃᐃᐃⵠⵠⲆⵠ = function () {
      return this.keys[this.ΔⵠⵠΔⲆ] || this.keys[this.ᐃᐃΔⵠᐃⵠⵠ];
    };
    this.ᐃⲆⵠΔⲆⵠΔᐃⲆ = function () {
      return this.keys[this.ⲆⲆΔⲆⵠⲆⵠ];
    };
    this.ⲆⵠᐃΔⵠⵠᐃΔⵠ = function () {
      return this.keys[this.ΔΔⵠⲆᐃᐃⵠ];
    };
    this.ΔⲆΔᐃⵠⵠΔⵠⵠ = function () {
      return this.keys[this.ⵠᐃᐃⲆᐃⵠⵠ];
    };
    this.ⵠⵠᐃᐃΔΔᐃᐃᐃ = function () {
      return this.keys[this.ⲆⲆΔᐃⲆᐃᐃ];
    };
    this.ⲆΔⲆⵠⵠᐃᐃⵠⲆ = function () {
      return this.keys[this.ΔΔᐃᐃⵠⲆⵠ];
    };
    this.ΔⲆᐃⲆᐃΔΔΔΔ = function () {
      return this.keys[this.ⵠΔΔΔⲆⵠᐃ];
    };
    this.ΔᐃΔⲆⲆⲆⵠⵠΔ = function () {
      return this.keys[this.ⵠΔᐃΔᐃⲆᐃ];
    };
    this.ⵠⵠᐃᐃᐃᐃⲆΔⲆ = function () {
      return this.keys[this.ΔΔⵠⲆⲆⵠⲆ];
    };
    this.ⵠΔⵠⲆⵠⲆⲆⵠΔ = function () {
      return this.keys[this.ΔᐃᐃΔᐃΔⵠ];
    };
    this.ᐃΔᐃᐃⵠⵠⵠⲆᐃ = function () {
      return this.keys[this.ⵠᐃΔⵠⲆΔᐃ];
    };
  }();
  var v3063 = new function () {
    this.ⵠᐃᐃΔᐃⲆᐃ = 0;
    this.ᐃᐃΔⵠΔ = 1;
    this.IDLE = 2;
    this.ΔⲆⲆᐃⲆⵠⲆ = 0;
    this.ⲆΔᐃᐃⵠΔᐃᐃᐃ = 1;
    this.ᐃΔⵠⲆ = {
      x: 0,
      y: 0
    };
    this.ΔΔⲆΔᐃΔΔ = 0;
    this.ⲆⲆⵠⵠΔⵠΔ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ⲆⲆⵠᐃ = this.ΔⲆⲆᐃⲆⵠⲆ;
    this.down = function () {
      this.state = this.ⵠᐃᐃΔᐃⲆᐃ;
    };
    this.up = function () {
      this.state = this.ᐃᐃΔⵠΔ;
    };
    this.ⵠᐃᐃ = function () {
      if (this.ᐃΔⵠⲆ.x != this.ΔΔⲆΔᐃΔΔ || this.ᐃΔⵠⲆ.y != this.ⲆⲆⵠⵠΔⵠΔ) {
        this.ΔΔⲆΔᐃΔΔ = this.ᐃΔⵠⲆ.x;
        this.ⲆⲆⵠⵠΔⵠΔ = this.ᐃΔⵠⲆ.y;
        return true;
      } else {
        return vVVVV1422;
      }
    };
  }();
  var v3064 = 0;
  var v3065 = 0;
  var v3066 = new function (p1924, p1925, p1926) {
    this.ⵠΔΔ = p1924;
    this.Δ = p1925;
    this.ⲆⵠᐃᐃΔⵠⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      style: document.getElementById("loading").style,
      ⵠᐃᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆⵠᐃᐃΔⵠⵠ.style.position = "absolute";
    this.ⲆⵠᐃᐃΔⵠⵠ.style.display = "inline-block";
    this.ⲆⵠᐃᐃΔⵠⵠ.ⵠᐃᐃ();
    this.ΔΔΔⵠᐃ = true;
    this.stop = function () {
      this.ΔΔΔⵠᐃ = vVVVV142;
    };
    this.ⵠⵠᐃΔΔᐃⵠ = {
      total: 1
    };
    var vThis6 = this;
    function f521() {}
    var v3067 = 0;
    function f522(p1927) {
      if (p1927.indexOf("normal-mode") !== -1 || p1927.indexOf("player0") !== -1) {
        return 1;
      } else if (p1927.indexOf("day-bag") !== -1 || p1927.indexOf("night-bag") !== -1 || p1927.indexOf("day-book") !== -1 || p1927.indexOf("night-book") !== -1 || p1927.indexOf("day-player") !== -1 || p1927.indexOf("night-player") !== -1 || p1927.indexOf("day-accessory") !== -1 || p1927.indexOf("night-accessory") !== -1 || p1927.indexOf("day-crate") !== -1 || p1927.indexOf("night-crate") !== -1 || p1927.indexOf("day-skin") !== -1 || p1927.indexOf("night-skin") !== -1 || p1927.indexOf("day-river") !== -1 || p1927.indexOf("night-river") !== -1 || p1927.indexOf("day-river") !== -1 || p1927.indexOf("night-river") !== -1 || p1927.indexOf("day-rock") !== -1 || p1927.indexOf("night-rock") !== -1 || p1927.indexOf("day-flower") !== -1 || p1927.indexOf("night-flower") !== -1 || p1927.indexOf("day-leaf") !== -1 || p1927.indexOf("night-leaf") !== -1 || p1927.indexOf("day-herb") !== -1 || p1927.indexOf("night-herb") !== -1 || p1927.indexOf("day-shell") !== -1 || p1927.indexOf("night-shell") !== -1 || p1927.indexOf("day-hand-skin") !== -1 || p1927.indexOf("night-hand-skin") !== -1 || p1927.indexOf("bignight") !== -1 || p1927.indexOf("bigday") !== -1 || p1927.indexOf("bigzday") !== -1 || p1927.indexOf("bigznight") !== -1 || p1927.indexOf("tutorial-box") !== -1 || p1927.indexOf("tuto-") !== -1 || p1927.indexOf("-leaderboard-") !== -1 || p1927.indexOf("-lead-") !== -1 || p1927.indexOf("day-lava-") !== -1 || p1927.indexOf("night-lava-") !== -1 || p1927.indexOf("-click.png") !== -1 || p1927.indexOf("-in.png") !== -1 || p1927.indexOf("-fog") !== -1 || p1927.indexOf("-lava") !== -1 || p1927.indexOf("pebblecompo") !== -1 || p1927.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ⵠⵠᐃⵠΔᐃⲆ = function () {
      vThis6.ⵠᐃᐃ();
      if (++v3067 == 40) {
        vThis6.stop();
        f521();
        return;
      }
      vWindow.setTimeout(vThis6.ⵠⵠᐃⵠΔᐃⲆ, 33);
    };
    this.ᐃᐃΔⵠⵠ = function (p1928) {
      f521 = p1928;
      vThis6.ⵠⵠᐃⵠΔᐃⲆ();
    };
    new Date().getTime();
    Object.keys(ⵠᐃ).length;
    console.log(vVVVVVVUndefined14, undefined);
    for (var v3068 in ⵠᐃ) {
      if (f522(ⵠᐃ[v3068]) === 0) {
        0;
      }
    }
    console.log(vVVVVVUndefined14, undefined);
    function f523() {
      if (this.ᐃⲆⵠΔᐃⲆⲆ !== 0) {
        return this.ᐃⲆⵠΔᐃⲆⲆ;
      } else {
        this.ᐃⲆⵠΔᐃⲆⲆ = 2;
        this.src = this.ⲆⵠΔᐃⵠ;
        return 0;
      }
    }
    function f524(p1929) {
      this.ᐃⲆⵠΔᐃⲆⲆ = 1;
    }
    var v3069 = 0;
    function f525() {
      console.log(undefined);
      if (v3069 !== 1) {
        v3069 = 1;
        console.log(vVVVVUndefined142);
        if (v760 !== f72) {
          f72();
        }
        v760();
        var v3070 = Δᐃᐃ.ⲆⵠⵠΔΔᐃᐃ("server");
        if (v3070 !== null) {
          v2837.ΔᐃΔᐃΔᐃᐃ = 1;
          v2837.ⵠΔⲆⵠⲆ = [{
            nu: 0,
            m: 100,
            i: "server" + v3070 + ".starve.io",
            p: 443,
            a: v3070,
            ssl: 1
          }];
        }
        v2837.ΔΔⲆΔΔᐃⵠᐃᐃ();
        setTimeout(p1926, 100);
      }
    }
    function f526() {
      let vF56 = function () {
        v2837.ᐃⵠⲆⵠⲆᐃⲆ(f525);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(vF56, 100);
        } else {
          setTimeout(f526, 100);
        }
      } else {
        setTimeout(vF56, 1000);
      }
    }
    function f527() {
      this.ⲆⵠΔⲆⵠⵠⲆ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⲆⵠΔⲆⵠⵠⲆ}`, this);
      if (this.ⲆⵠΔⲆⵠⵠⲆ > 3) {
        console.warn("Failed to load image too many times");
      }
      var v3071 = this.ⲆⵠΔⲆⵠⵠⲆ;
      var v3072 = this.src;
      var v3073 = f522(v3072) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var v3074 in ΔⵠᐃᐃⵠᐃΔ) {
          if (v3072.indexOf(ΔⵠᐃᐃⵠᐃΔ[v3074]) !== -1) {
            ⵠᐃ[v3074] = new Image();
            ⵠᐃ[v3074].onload = f524;
            ⵠᐃ[v3074].onerror = f527;
            ⵠᐃ[v3074].ⲆⵠΔⲆⵠⵠⲆ = v3071;
            ⵠᐃ[v3074].src = v3072;
            break;
          }
        }
      }, v3073);
    }
    function f528(p1930) {
      for (var v3075 in ⵠᐃ) {
        var v3076 = ⵠᐃ[v3075];
        if (typeof v3076 === "string" && f522(v3076) === p1930) {
          ⵠᐃ[v3075] = new Image();
          ⵠᐃ[v3075].ᐃⲆⵠΔᐃⲆⲆ = 0;
          ⵠᐃ[v3075].ⲆⵠΔⲆⵠⵠⲆ = 0;
          ⵠᐃ[v3075].onload = f524;
          ⵠᐃ[v3075].onerror = f527;
          ⵠᐃ[v3075].ΔⵠᐃⲆᐃᐃⵠ = f523;
          ⵠᐃ[v3075].ⲆⵠΔᐃⵠ = v3076;
        }
      }
    }
    f528(1);
    f528(0);
    f157(1, "l", 20, "#000");
    f526();
    f288();
    this.ⵠᐃᐃ = function () {
      this.ⲆⵠᐃᐃΔⵠⵠ.translate.x = (v406 - 500) / 2;
      this.ⲆⵠᐃᐃΔⵠⵠ.translate.y = (v408 - 150) / 2;
      var v3077 = 2500 / (40 - v3067 + 1) - 48;
      this.ⲆⵠᐃᐃΔⵠⵠ.translate.y -= v3077;
      this.ⲆⵠᐃᐃΔⵠⵠ.ⵠᐃᐃ();
    };
    this.ⲆⵠᐃᐃΔⵠⵠ.ⵠᐃᐃ();
    this.ⲆΔᐃΔ = function () {
      try {
        f287();
      } catch (e) {}
      this.ⵠᐃᐃ();
    };
  }(v403, v405, function () {
    f286();
    game = new f486(v403, v405);
    (v2833 = new f494(v403, v405)).ⵠⵠⵠⵠΔⲆⲆᐃᐃ();
    scoreboard = new f483(v403, v405);
    world = new f436();
    user = new f468();
    v3066.ᐃᐃΔⵠⵠ(function () {
      v3066.ⲆⵠᐃᐃΔⵠⵠ.style.display = "none";
      v2833.ⲆΔᐃᐃⲆ();
    });
  });
  function f529(p1931, p1932) {
    vVUndefined10(vVVVVVUndefined582, p1931, p1932);
    const vF428 = f428(v372[0], v372[1], v372[0], v372[1], v372[0]);
    f78(v372[1], v372[0], v372[1], v372[0]);
    return (vF428 | 6598) & ~(vF428 & 6598);
  }
  function f530(p1933, p1934, p1935, p1936, p1937) {
    vVVVUndefined11(vVVVVVUndefined582, p1933, p1934, p1935, p1936, p1937);
    const v3078 = (16 << ((v372[0] ^ v372[1]) >> 16 & 255)) + (8 << ((v372[0] ^ v372[1]) >> 0 & 255)) + (0 << ((v372[0] ^ v372[1]) >> 24 & 255)) + (24 << ((v372[0] ^ v372[1]) >> 8 & 255)) ^ 53843;
    return (24 << ((v3078 ^ v372[3]) >> 16 & 255)) + (0 << ((v3078 ^ v372[3]) & 255)) + (16 << ((v3078 ^ v372[3]) >> 8 & 255)) + (8 << ((v3078 ^ v372[3]) >> 24 & 255)) ^ 64576;
  }
  function f531(p1938, p1939, p1940, p1941, p1942) {
    const v3079 = (2147483587 + (p1938 + 6218) * 2147483629) % 2147483647;
    const v3080 = p1939 ^ 65288;
    const vF492 = f492(v3079, v3080, ~(p1940 & 51806) & 51806 | ~(p1940 & 51806) & p1940, (8 << (p1941 >> 24 & 255)) + (24 << (p1941 >> 16 & 255)) + (0 << (p1941 >> 8 & 255)) + (16 << (p1941 & 255)), ~(p1942 & 31950) & 31950 | ~(p1942 & 31950) & p1942);
    f481(v3079, v3080);
    return ~(vF492 & 26690) & vF492 | ~(vF492 & 26690) & 26690;
  }
  function f532() {
    try {
      vWindow.Widget.adsRefresh();
    } catch (e) {}
  }
  vWindow.onbeforeunload = function () {
    if (game.ΔΔΔⵠᐃ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  f55();
  (function f533(p1943) {
    vWindow.requestAnimationFrame(f533);
    v3064 = (p1943 - v3065) / 1000;
    v3065 = p1943;
    v3064 = v3064 > 1 ? 1 : v3064;
    if (game.ΔΔΔⵠᐃ) {
      game.ⲆΔᐃΔ();
    } else {
      v405.clearRect(0, 0, v406, v408);
      if (v3066.ΔΔΔⵠᐃ) {
        v3066.ⲆΔᐃΔ();
      } else if (v2833.ΔΔΔⵠᐃ) {
        v2833.ⲆΔᐃΔ();
      } else if (scoreboard.ΔΔΔⵠᐃ) {
        scoreboard.ⲆΔᐃΔ();
      }
    }
  })(0);
  var v3081 = 0;
  function f534() {
    v3082.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
    v3082.send();
  }
  var v3082 = new XMLHttpRequest();
  function f535(p1944, p1945) {
    const v3083 = (1 + (39106 + p1944) * 22695477) % 4294967296;
    const v3084 = ((p1945 + 35372) * 22695477 + 1) % 4294967296;
    const vF72 = f7(v3083, v3084, v3083, v3084, v3083);
    f62(v3084, v3083, 0, v3083, v3084, v3083);
    return (vF72 | 14922) & ~(vF72 & 14922);
  }
  v3082.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var v3085 = "https://token.starve.io/";
  var v3086 = "https://token2.starve.io/";
  var v3087 = 0;
  var v3088 = 1;
  var v3089 = 4;
  var vVVVVUndefined1423 = vVVVUndefined142;
  var vUndefined5 = undefined;
  var vUndefined6 = undefined;
  var v3090 = 0;
  vWindow.ΔⲆⲆⲆΔⵠⵠ = function () {
    v3090 = 1;
  };
  var v3091 = {
    ⵠⵠⵠⲆⲆⲆᐃᐃΔᐃⲆ: "ACCESS_TOKEN"
  };
  var v3092 = document.createElement("script");
  v3092.type = "text/javascript";
  v3092.async = true;
  v3092.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  v3092.addEventListener("load", function (p1946) {
    vWindow.XPayStationWidget.init(v3091);
    vWindow.XPayStationWidget.on("status-done", f540);
  }, false);
  document.getElementsByTagName("head")[0].appendChild(v3092);
  vWindow.fbAsyncInit = function () {
    f541();
    console.log(vVVUndefined11);
  };
  (function (p1947, p1948, p1949) {
    var v3093;
    var v3094 = p1947.getElementsByTagName(p1948)[0];
    if (!p1947.getElementById(p1949)) {
      (v3093 = p1947.createElement(p1948)).id = p1949;
      v3093.src = "https://connect.facebook.net/en_US/sdk.js";
      v3094.parentNode.insertBefore(v3093, v3094);
    }
  })(document, "script", "facebook-jssdk");
  var vVVVVVUndefined5832 = vVVVVUndefined583;
  var vVVVVVUndefined5822 = vVVVVUndefined582;
  function f536() {
    vWindow.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(p1950 => {
      (vVVVVVUndefined5832 = p1950).isSignedIn.listen(f537);
      vVVVVVUndefined5832.currentUser.listen(f538);
      if (vVVVVVUndefined5832.isSignedIn.get()) {
        vVVVVVUndefined5832.signIn();
      }
      f539();
    });
  }
  function f537(p1951) {}
  function f538(p1952) {
    if (vUndefined5 === undefined && vVVVUndefined142 !== vVVVVVUndefined5822 && (vUndefined5 = vVVVVVUndefined5822.getAuthResponse().id_token, vVVVVVVUndefined14 !== vUndefined5)) {
      vVVVVUndefined1423 = v3087;
      vUndefined6 = vVVVVVUndefined5822.getBasicProfile().getId();
      vWindow.ΔⲆⲆⲆΔⵠⵠ();
      return;
    }
    if (p1952 !== undefined && vVVV63 === p1952.isSignedIn()) {
      vUndefined6 = (vVVVVVUndefined5822 = p1952).id;
      vUndefined6 = vVVVVVUndefined5822.getBasicProfile().getId();
      vUndefined5 = vVVVVVUndefined5822.getAuthResponse().id_token;
      vVVVVUndefined1423 = v3087;
      vWindow.ΔⲆⲆⲆΔⵠⵠ();
    }
  }
  function f539() {
    if (vVVVVVUndefined5832) {
      vVVVVVUndefined5822 = vVVVVVUndefined5832.currentUser.get();
    }
  }
  function f540() {
    var v3095 = new XMLHttpRequest();
    v3095.open("GET", v3085 + "claimBread?userid=" + vUndefined6);
    v3095.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    v3095.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && v3095.responseText !== "0") {
        var vNumber20 = Number(v3095.responseText);
        if (!isNaN(vNumber20)) {
          v2833.ⵠⲆⲆⵠⲆ = vNumber20;
        }
      }
    };
    v3095.send();
  }
  function f541() {
    if (vWindow.FB) {
      vWindow.FB.init({
        version: "v15.0",
        appId: "642017356260407",
        xfbml: true,
        cookie: true
      });
    }
    if (vUndefined6 === vVVVVVVUndefined14) {
      (function () {
        try {
          if (vWindow.FB && vWindow.FB.getUserID()) {
            vUndefined6 = vWindow.FB.getUserID();
            if (vUndefined5 === vVVVVUndefined582) {
              vWindow.FB.getLoginStatus(function () {
                vVVVVUndefined1423 = v3088;
                vUndefined5 = vWindow.FB.getAuthResponse().accessToken;
                vWindow.ΔⲆⲆⲆΔⵠⵠ(vUndefined6);
              });
            }
          }
        } catch (e) {}
        try {
          vUndefined6 = vVVVVVUndefined5822.getBasicProfile().getId();
        } catch (e) {}
      })();
    }
  }
  function f542(p1953, p1954) {
    if (!(v2833.ⵠᐃΔΔᐃ > 0)) {
      if (p1954 > v2833.ⵠⲆⲆⵠⲆ) {
        v2833.ΔᐃⲆᐃ(v2833.ⵠΔᐃⵠᐃ);
      } else {
        v2833.ⵠᐃΔΔᐃ = 2;
        v2833.ΔᐃⵠΔⵠΔⲆ = 0;
        v2833.ⲆᐃⲆᐃᐃⲆΔ = 100;
        var v3096 = new XMLHttpRequest();
        v3096.open("GET", v3085 + "buySpin?token=" + vUndefined5 + "&userid=" + vUndefined6 + "&spin=" + p1953);
        v3096.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        v3096.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (v3096.responseText !== "0") {
              var v3097 = JSON.parse(v3096.responseText);
              v2833.ⵠⵠⵠⵠⵠΔⵠⵠΔ(v3097.rand * Math.PI * 2, v3097.type, v3097.id);
              v2833.ⵠⲆⲆⵠⲆ -= p1954;
            } else {
              v2833.ⵠᐃΔΔᐃ = 0;
            }
          }
        };
        v3096.send();
      }
    }
  }
  function f543() {
    if (!(v2833.ⵠⲆⲆⵠⲆ < 300) || !(v2833.ⲆⲆⵠⵠⲆⵠΔ > 0)) {
      var v3098 = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = v3098;
      if (!(v3098.length < 1) && !(v3098.length > 20)) {
        var v3099 = new XMLHttpRequest();
        v3099.open("GET", v3085 + "changeNickname?token=" + vUndefined5 + "&userid=" + vUndefined6 + "&nickname=" + encodeURIComponent(v3098));
        v3099.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        v3099.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && v3099.responseText !== "0") {
            var vNumber21 = Number(v3099.responseText);
            if (vNumber21 > 0) {
              v2833.ⵠⲆⲆⵠⲆ -= vNumber21;
            }
            v2833.ⲆⲆⵠⵠⲆⵠΔ = 1;
            v2833.ΔᐃⲆᐃ(v2833.ΔⵠᐃⵠΔ);
          }
        };
        v3099.send();
      }
    }
  }
  function f544(p1955, p1956) {
    if (v2833.ⵠⲆⲆⵠⲆ < p1956) {
      v2833.ΔᐃⲆᐃ(v2833.ⵠΔᐃⵠᐃ);
    } else {
      var v3100 = new XMLHttpRequest();
      v3100.open("GET", v3085 + "buyKit?token=" + vUndefined5 + "&userid=" + vUndefined6 + "&kit=" + p1955);
      v3100.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      v3100.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && v3100.responseText !== "0") {
          var v3101 = JSON.parse(v3100.responseText);
          v2833.ⵠⲆⲆⵠⲆ -= p1956;
          v2833.ⵠⵠⲆⲆⵠⵠⵠ = Date.now() + Number(v3101);
        }
      };
      v3100.send();
    }
  }
  function f545(p1957) {
    if (vUndefined6) {
      var v3102 = new XMLHttpRequest();
      v3102.open("GET", v3085 + "xsolla?userid=" + vUndefined6 + "&item=" + p1957);
      v3102.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      v3102.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && v3102.responseText !== "0") {
          v3091.access_token = v3102.responseText;
          vWindow.XPayStationWidget.init(v3091);
          vWindow.XPayStationWidget.open();
        }
      };
      v3102.send();
    }
  }
  function f546(p1958) {
    var v3103 = new XMLHttpRequest();
    v3103.open("GET", v3085 + "setRegion?token=" + vUndefined5 + "&userid=" + vUndefined6 + "&region=" + p1958);
    v3103.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    v3103.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (v3103.responseText !== "0") {
          v2833.ΔᐃⲆᐃ(v2833.ΔⲆᐃᐃⵠΔⲆ);
        } else {
          v2833.ΔᐃⲆᐃ(v2833.ⵠΔⵠⲆⵠ);
        }
      }
    };
    v3103.send();
  }
  function f547(p1959, p1960, p1961, p1962) {
    p1959 = p1959 === vVVVVVUndefined1422 ? v2833.ⵠΔⵠΔⵠⲆⵠ : p1959;
    p1960 = p1960 === undefined ? v2833.ⵠⵠΔΔⲆⵠⲆ : p1960;
    p1961 = p1961 === vVVVVUndefined582 ? v2833.ᐃⵠⲆΔⲆᐃⵠ : p1961;
    p1962 = p1962 === undefined ? v2833.ΔΔⲆᐃΔᐃⲆ : p1962;
    if (v2833.ⵠΔⵠΔⵠⲆⵠ !== p1959 || v2833.ⵠⵠΔΔⲆⵠⲆ !== p1960 || v2833.ᐃⵠⲆΔⲆᐃⵠ !== p1961 || v2833.ΔΔⲆᐃΔᐃⲆ !== p1962) {
      v2833.ⵠΔⵠΔⵠⲆⵠ = p1959;
      v2833.ⵠⵠΔΔⲆⵠⲆ = p1960;
      v2833.ᐃⵠⲆΔⲆᐃⵠ = p1961;
      v2833.ΔΔⲆᐃΔᐃⲆ = p1962;
      if (p1962 === v2833.ᐃⲆΔᐃⵠᐃⵠ) {
        p1962 = "0";
      } else if (v2833.ΔⵠΔⲆⵠΔⵠ === p1962) {
        p1962 = "1";
      } else if (p1962 === v2833.ΔⲆⲆⵠΔᐃⵠ) {
        p1962 = "2";
      } else if (p1962 === v2833.ⲆΔⲆΔᐃⵠⲆ) {
        p1962 = "3";
      } else if (v2833.ᐃΔⲆⵠⲆⲆᐃ === p1962) {
        p1962 = "4";
      } else if (p1962 === v2833.ⲆΔᐃᐃΔⵠᐃ) {
        p1962 = "5";
      } else if (p1962 === v2833.ⵠⲆΔⵠⲆΔΔ) {
        p1962 = "6";
      }
      if (v2833.ᐃⵠⲆⵠᐃⵠⵠ === p1960) {
        p1960 = "total";
      } else if (v2833.ⲆⵠᐃⲆⵠᐃᐃ === p1960) {
        p1960 = "normal";
      } else if (v2833.ⲆⵠⵠΔⲆᐃⲆ === p1960) {
        p1960 = "zombie";
      } else if (v2833.ⵠΔᐃⵠⲆⵠΔ === p1960) {
        p1960 = "vampire";
      } else if (p1960 === v2833.ᐃⲆⲆᐃΔᐃᐃ) {
        p1960 = "forest";
      }
      if (v2833.ΔᐃΔⵠΔΔⵠ === p1959) {
        p1959 = "all";
      }
      if (p1959 === v2833.ⲆᐃⲆΔⵠⲆᐃ) {
        p1959 = "week";
      }
      if (v2833.ΔⲆⵠⲆΔⵠᐃ === p1959) {
        p1959 = "today";
      }
      if (p1961 === v2833.ⵠᐃᐃⲆⲆᐃⵠ) {
        p1961 = "kill";
      } else if (p1961 === v2833.ⵠⲆᐃΔΔᐃΔ) {
        p1961 = "score";
      } else if (v2833.ⲆᐃΔⲆᐃⲆᐃ === p1961) {
        p1961 = "time";
      }
      var v3104 = new XMLHttpRequest();
      v3104.open("GET", v3085 + "leaderboard?range=" + p1959 + "&mode=" + p1960 + "&sort=" + p1961 + "&season=" + p1962);
      v3104.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      v3104.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && v3104.responseText !== "0") {
          for (var v3105 = JSON.parse(v3104.responseText), v3106 = "", v3107 = 0; v3107 < v3105.length; v3107++) {
            ᐃⲆⵠᐃᐃ = v3105[v3107];
            var v3108 = ᐃⲆⵠᐃᐃ[1];
            try {
              if (v3108.indexOf("Starver#") === -1) {
                v3108 = vWindow.decodeURIComponent(vWindow.escape(vWindow.atob(v3108)));
              }
            } catch (e) {}
            v3106 += "<div class=\"lineLeaderboard\">";
            v3106 += "<div class=\"rank\">";
            v3106 += v3107 + 1 + "";
            v3106 += "</div>";
            v3106 += "<div class=\"name\">";
            v3106 += v3108;
            v3106 += "</div>";
            v3106 += "<div class=\"lvl\">";
            v3106 += v2833.ᐃᐃᐃⲆΔⵠⵠ(ᐃⲆⵠᐃᐃ[6]) + 1 + "";
            v3106 += "</div>";
            v3106 += "<div class=\"kills\">";
            v3106 += ᐃⲆⵠᐃᐃ[5] + "";
            v3106 += "</div>";
            v3106 += "<div class=\"time\">";
            v3106 += ᐃⲆⵠᐃᐃ[4] + "";
            v3106 += "</div>";
            v3106 += "<div class=\"score\">";
            v3106 += ᐃⲆⵠᐃᐃ[3] + "";
            v3106 += "</div>";
            v3106 += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = v3106;
        }
      };
      v3104.send();
    }
  }
  vWindow.onload = function () {
    vWindow.gapi.load("auth2", f536);
  };
})();